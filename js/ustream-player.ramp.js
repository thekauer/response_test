/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkustreamPlayer"] = self["webpackChunkustreamPlayer"] || []).push([["ramp"],{

/***/ "../js/atlas/logic/multicast/rampClient.js":
/*!*************************************************!*\
  !*** ../js/atlas/logic/multicast/rampClient.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"warmUp\": function() { return /* binding */ warmUp; }\n/* harmony export */ });\n/* harmony import */ var atlas_vendor_rampapi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! atlas/vendor/rampapi */ \"../js/atlas/vendor/rampapi.js\");\n/* harmony import */ var atlas_vendor_rampapi__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(atlas_vendor_rampapi__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var shared_lib_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/lib/logger */ \"../js/shared/lib/logger/index.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n/**\n * @typedef {{\n *   urlPattern: string,\n *   hash: string,\n *   chunkId: number\n * }} URLData\n */\n\nvar debugLogger = (0,shared_lib_logger__WEBPACK_IMPORTED_MODULE_1__.createLoggerForModule)('multicast/rampClient');\n/**\n * @param {string} mid - \"channel.1234\"\n * @return {string|undefined}\n */\n\nfunction getChannelOrVideoIdFromMediaId(mid) {\n  var matches = mid.match(/(\\w+)\\.(\\d+)/);\n\n  if (matches === null) {\n    return undefined;\n  }\n\n  return matches[2];\n}\n/**\n * Example URL: \"http://example.org/path/to/chunk/chunk_1234_hash.m4v\"\n *\n * @param {URLData} data\n * @return {string}\n */\n\n\nfunction buildURL(_ref) {\n  var urlPattern = _ref.urlPattern,\n      hash = _ref.hash,\n      chunkId = _ref.chunkId;\n  return urlPattern.replace('%', chunkId).replace('%', hash);\n}\n/**\n * @param {URLData} testURL\n * @param {{ timeoutInMs: numner }} options\n * @return {Promise.<URLData>}\n */\n\n\nfunction pingOneURL(testURL, _ref2) {\n  var timeoutInMs = _ref2.timeoutInMs;\n  var url = buildURL(testURL);\n  return new Promise(function (resolve, reject) {\n    var xhr = new XMLHttpRequest();\n\n    function onError() {\n      var msg = \"\".concat(xhr.status, \" \").concat(xhr.statusText);\n      return reject(new Error(msg));\n    }\n\n    function onSuccess() {\n      return resolve(testURL);\n    }\n\n    function onLoad() {\n      if (xhr.status === 200) {\n        onSuccess();\n      } else {\n        onError();\n      }\n    }\n\n    xhr.open('GET', url, true\n    /* async */\n    );\n    xhr.timeout = timeoutInMs;\n    xhr.addEventListener('load', onLoad);\n    xhr.addEventListener('error', onError);\n    xhr.addEventListener('timeout', onError);\n    return xhr.send();\n  });\n}\n/**\n * @param {Arrray.<URLData>} testURLs\n * @param {{ timeoutInMs: numner, pingDelayInMs: number }} options\n * @return {Promise.<URLData>}\n */\n\n\nfunction pingMultipleURLs(testURLs, _ref3) {\n  var timeoutInMs = _ref3.timeoutInMs,\n      pingDelayInMs = _ref3.pingDelayInMs;\n\n  var _testURLs = _toArray(testURLs),\n      firstURL = _testURLs[0],\n      restOfTheURLs = _testURLs.slice(1);\n\n  return pingOneURL(firstURL, {\n    timeoutInMs: timeoutInMs\n  }).catch(function () {\n    if (restOfTheURLs.length === 0) {\n      return Promise.reject(new Error('ping failed'));\n    }\n\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        pingMultipleURLs(restOfTheURLs, {\n          timeoutInMs: timeoutInMs,\n          pingDelayInMs: pingDelayInMs\n        }).then(resolve).catch(reject);\n      }, pingDelayInMs);\n    });\n  });\n}\n/**\n * @param {string} mid\n * @return {Promise.<undefined>}\n */\n\n\nfunction warmUpRAMPClient(mid) {\n  return new Promise(function (resolve) {\n    function receiverInterfaceDone(ifc, obj) {\n      debugLogger.debug('receiverInterfaceDone', {\n        obj: obj,\n        text: \"\".concat(ifc.interpretResponse(obj), \"\\n\").concat(ifc.interpretState(obj))\n      });\n      return resolve();\n    }\n\n    function receiverDone() {\n      debugLogger.debug('receiverDone');\n    }\n\n    function receiverReady(rcvr, providerUrl) {\n      if (providerUrl) {\n        debugLogger.debug('receiverReady', providerUrl);\n      }\n    }\n\n    function receiverProgramGuideReady(rcvr, obj) {\n      if (obj.reason === 'success' && rcvr.streamKey) {\n        debugLogger.debug('receiverProgramGuideReady', obj);\n      }\n    }\n\n    var p = {\n      i_param: {\n        verbose: function verbose() {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          debugLogger.debug('receiver interface log', args);\n        },\n        allowFallback: false,\n        onDone: receiverInterfaceDone\n      },\n      r_param: {\n        host: 'ustream.multicast-receiver-altitudecdn.net',\n        // ask for the program guide\n        maddr: '0',\n        // allow for auto-start from the programGuide\n        // set streamKey to specific video or event identifier to limit\n        // to only that event\n        streamKey: getChannelOrVideoIdFromMediaId(mid),\n        // true to use first to start of any in programGuide, false to\n        // use the first entry matching streamKey\n        multiStream: true,\n        verbose: function verbose() {\n          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          debugLogger.debug('receiver log', args);\n        },\n        // let me know when the receiver connection process is complete\n        onDone: receiverDone,\n        // let me know when the multicast (or unicast) is available\n        onReady: receiverReady,\n        // let me know when the program guide is available\n        onPGReady: receiverProgramGuideReady\n      },\n      o_param: null\n    };\n    atlas_vendor_rampapi__WEBPACK_IMPORTED_MODULE_0__.RcvrInterface.GetQueryParams(p);\n    debugLogger.debug('Create receiver interface', p);\n    return new atlas_vendor_rampapi__WEBPACK_IMPORTED_MODULE_0__.RcvrInterface(p.i_param, p.r_param, p.o_param);\n  });\n}\n/**\n * @param {string} mid\n * @param {Arrray.<URLData>} testURLs\n * @param {{ timeoutInMs: numner=, pingDelayInMs: number= }} options\n * @return {Promise.<URLData>}\n */\n\n\nfunction warmUp(_x, _x2) {\n  return _warmUp.apply(this, arguments);\n}\n\nfunction _warmUp() {\n  _warmUp = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(mid, testURLs) {\n    var options,\n        optionsWithDefaultValues,\n        _args = arguments;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            optionsWithDefaultValues = _objectSpread({\n              timeoutInMs: 1000,\n              pingDelayInMs: 200\n            }, options || {});\n            _context.next = 4;\n            return warmUpRAMPClient(mid);\n\n          case 4:\n            if (!(testURLs.length === 0)) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", []);\n\n          case 6:\n            return _context.abrupt(\"return\", pingMultipleURLs(testURLs, optionsWithDefaultValues));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _warmUp.apply(this, arguments);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../js/atlas/logic/multicast/rampClient.js\n");

/***/ }),

/***/ "../js/atlas/vendor/rampapi.js":
/*!*************************************!*\
  !*** ../js/atlas/vendor/rampapi.js ***!
  \*************************************/
/***/ (function(module) {

eval("/*** IMPORTS FROM imports-loader ***/\n\n(function() {\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n(window[\"RampVersion\"] || (window[\"RampVersion\"] = {}))[\"rampapi.js\"] = \"$Id$ $Change$ $Revision$ $DateTime:20190611201631$\"; //keystore.js\n\n(window['RampVersion'] || (window['RampVersion'] = {}))['keystore.js'] = \"$Id$ $Change$ $Revision$ $DateTime$\";\n!function (ctx) {\n  /*\n  CryptoJS v3.1.2\n  code.google.com/p/crypto-js\n  (c) 2009-2013 by Jeff Mott. All rights reserved.\n  code.google.com/p/crypto-js/wiki/License\n  */\n  var CryptoJS = window.CryptoJS = CryptoJS || function (u, p) {\n    var d = {},\n        l = d.lib = {},\n        s = function s() {},\n        t = l.Base = {\n      extend: function extend(a) {\n        s.prototype = this;\n        var c = new s();\n        a && c.mixIn(a);\n        c.hasOwnProperty(\"init\") || (c.init = function () {\n          c.$super.init.apply(this, arguments);\n        });\n        c.init.prototype = c;\n        c.$super = this;\n        return c;\n      },\n      create: function create() {\n        var a = this.extend();\n        a.init.apply(a, arguments);\n        return a;\n      },\n      init: function init() {},\n      mixIn: function mixIn(a) {\n        for (var c in a) {\n          a.hasOwnProperty(c) && (this[c] = a[c]);\n        }\n\n        a.hasOwnProperty(\"toString\") && (this.toString = a.toString);\n      },\n      clone: function clone() {\n        return this.init.prototype.extend(this);\n      }\n    },\n        r = l.WordArray = t.extend({\n      init: function init(a, c) {\n        a = this.words = a || [];\n        this.sigBytes = c != p ? c : 4 * a.length;\n      },\n      toString: function toString(a) {\n        return (a || v).stringify(this);\n      },\n      concat: function concat(a) {\n        var c = this.words,\n            e = a.words,\n            j = this.sigBytes;\n        a = a.sigBytes;\n        this.clamp();\n        if (j % 4) for (var k = 0; k < a; k++) {\n          c[j + k >>> 2] |= (e[k >>> 2] >>> 24 - 8 * (k % 4) & 255) << 24 - 8 * ((j + k) % 4);\n        } else if (65535 < e.length) for (k = 0; k < a; k += 4) {\n          c[j + k >>> 2] = e[k >>> 2];\n        } else c.push.apply(c, e);\n        this.sigBytes += a;\n        return this;\n      },\n      clamp: function clamp() {\n        var a = this.words,\n            c = this.sigBytes;\n        a[c >>> 2] &= 4294967295 << 32 - 8 * (c % 4);\n        a.length = u.ceil(c / 4);\n      },\n      clone: function clone() {\n        var a = t.clone.call(this);\n        a.words = this.words.slice(0);\n        return a;\n      },\n      random: function random(a) {\n        for (var c = [], e = 0; e < a; e += 4) {\n          c.push(4294967296 * u.random() | 0);\n        }\n\n        return new r.init(c, a);\n      }\n    }),\n        w = d.enc = {},\n        v = w.Hex = {\n      stringify: function stringify(a) {\n        var c = a.words;\n        a = a.sigBytes;\n\n        for (var e = [], j = 0; j < a; j++) {\n          var k = c[j >>> 2] >>> 24 - 8 * (j % 4) & 255;\n          e.push((k >>> 4).toString(16));\n          e.push((k & 15).toString(16));\n        }\n\n        return e.join(\"\");\n      },\n      parse: function parse(a) {\n        for (var c = a.length, e = [], j = 0; j < c; j += 2) {\n          e[j >>> 3] |= parseInt(a.substr(j, 2), 16) << 24 - 4 * (j % 8);\n        }\n\n        return new r.init(e, c / 2);\n      }\n    },\n        b = w.Latin1 = {\n      stringify: function stringify(a) {\n        var c = a.words;\n        a = a.sigBytes;\n\n        for (var e = [], j = 0; j < a; j++) {\n          e.push(String.fromCharCode(c[j >>> 2] >>> 24 - 8 * (j % 4) & 255));\n        }\n\n        return e.join(\"\");\n      },\n      parse: function parse(a) {\n        for (var c = a.length, e = [], j = 0; j < c; j++) {\n          e[j >>> 2] |= (a.charCodeAt(j) & 255) << 24 - 8 * (j % 4);\n        }\n\n        return new r.init(e, c);\n      }\n    },\n        x = w.Utf8 = {\n      stringify: function stringify(a) {\n        try {\n          return decodeURIComponent(escape(b.stringify(a)));\n        } catch (c) {\n          throw Error(\"Malformed UTF-8 data\");\n        }\n      },\n      parse: function parse(a) {\n        return b.parse(unescape(encodeURIComponent(a)));\n      }\n    },\n        q = l.BufferedBlockAlgorithm = t.extend({\n      reset: function reset() {\n        this._data = new r.init();\n        this._nDataBytes = 0;\n      },\n      _append: function _append(a) {\n        \"string\" == typeof a && (a = x.parse(a));\n\n        this._data.concat(a);\n\n        this._nDataBytes += a.sigBytes;\n      },\n      _process: function _process(a) {\n        var c = this._data,\n            e = c.words,\n            j = c.sigBytes,\n            k = this.blockSize,\n            b = j / (4 * k),\n            b = a ? u.ceil(b) : u.max((b | 0) - this._minBufferSize, 0);\n        a = b * k;\n        j = u.min(4 * a, j);\n\n        if (a) {\n          for (var q = 0; q < a; q += k) {\n            this._doProcessBlock(e, q);\n          }\n\n          q = e.splice(0, a);\n          c.sigBytes -= j;\n        }\n\n        return new r.init(q, j);\n      },\n      clone: function clone() {\n        var a = t.clone.call(this);\n        a._data = this._data.clone();\n        return a;\n      },\n      _minBufferSize: 0\n    });\n\n    l.Hasher = q.extend({\n      cfg: t.extend(),\n      init: function init(a) {\n        this.cfg = this.cfg.extend(a);\n        this.reset();\n      },\n      reset: function reset() {\n        q.reset.call(this);\n\n        this._doReset();\n      },\n      update: function update(a) {\n        this._append(a);\n\n        this._process();\n\n        return this;\n      },\n      finalize: function finalize(a) {\n        a && this._append(a);\n        return this._doFinalize();\n      },\n      blockSize: 16,\n      _createHelper: function _createHelper(a) {\n        return function (b, e) {\n          return new a.init(e).finalize(b);\n        };\n      },\n      _createHmacHelper: function _createHmacHelper(a) {\n        return function (b, e) {\n          return new n.HMAC.init(a, e).finalize(b);\n        };\n      }\n    });\n    var n = d.algo = {};\n    return d;\n  }(Math);\n\n  (function () {\n    var u = CryptoJS,\n        p = u.lib.WordArray;\n    u.enc.Base64 = {\n      stringify: function stringify(d) {\n        var l = d.words,\n            p = d.sigBytes,\n            t = this._map;\n        d.clamp();\n        d = [];\n\n        for (var r = 0; r < p; r += 3) {\n          for (var w = (l[r >>> 2] >>> 24 - 8 * (r % 4) & 255) << 16 | (l[r + 1 >>> 2] >>> 24 - 8 * ((r + 1) % 4) & 255) << 8 | l[r + 2 >>> 2] >>> 24 - 8 * ((r + 2) % 4) & 255, v = 0; 4 > v && r + 0.75 * v < p; v++) {\n            d.push(t.charAt(w >>> 6 * (3 - v) & 63));\n          }\n        }\n\n        if (l = t.charAt(64)) for (; d.length % 4;) {\n          d.push(l);\n        }\n        return d.join(\"\");\n      },\n      parse: function parse(d) {\n        var l = d.length,\n            s = this._map,\n            t = s.charAt(64);\n        t && (t = d.indexOf(t), -1 != t && (l = t));\n\n        for (var t = [], r = 0, w = 0; w < l; w++) {\n          if (w % 4) {\n            var v = s.indexOf(d.charAt(w - 1)) << 2 * (w % 4),\n                b = s.indexOf(d.charAt(w)) >>> 6 - 2 * (w % 4);\n            t[r >>> 2] |= (v | b) << 24 - 8 * (r % 4);\n            r++;\n          }\n        }\n\n        return p.create(t, r);\n      },\n      _map: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\"\n    };\n  })();\n\n  (function (u) {\n    function p(b, n, a, c, e, j, k) {\n      b = b + (n & a | ~n & c) + e + k;\n      return (b << j | b >>> 32 - j) + n;\n    }\n\n    function d(b, n, a, c, e, j, k) {\n      b = b + (n & c | a & ~c) + e + k;\n      return (b << j | b >>> 32 - j) + n;\n    }\n\n    function l(b, n, a, c, e, j, k) {\n      b = b + (n ^ a ^ c) + e + k;\n      return (b << j | b >>> 32 - j) + n;\n    }\n\n    function s(b, n, a, c, e, j, k) {\n      b = b + (a ^ (n | ~c)) + e + k;\n      return (b << j | b >>> 32 - j) + n;\n    }\n\n    for (var t = CryptoJS, r = t.lib, w = r.WordArray, v = r.Hasher, r = t.algo, b = [], x = 0; 64 > x; x++) {\n      b[x] = 4294967296 * u.abs(u.sin(x + 1)) | 0;\n    }\n\n    r = r.MD5 = v.extend({\n      _doReset: function _doReset() {\n        this._hash = new w.init([1732584193, 4023233417, 2562383102, 271733878]);\n      },\n      _doProcessBlock: function _doProcessBlock(q, n) {\n        for (var a = 0; 16 > a; a++) {\n          var c = n + a,\n              e = q[c];\n          q[c] = (e << 8 | e >>> 24) & 16711935 | (e << 24 | e >>> 8) & 4278255360;\n        }\n\n        var a = this._hash.words,\n            c = q[n + 0],\n            e = q[n + 1],\n            j = q[n + 2],\n            k = q[n + 3],\n            z = q[n + 4],\n            r = q[n + 5],\n            t = q[n + 6],\n            w = q[n + 7],\n            v = q[n + 8],\n            A = q[n + 9],\n            B = q[n + 10],\n            C = q[n + 11],\n            u = q[n + 12],\n            D = q[n + 13],\n            E = q[n + 14],\n            x = q[n + 15],\n            f = a[0],\n            m = a[1],\n            g = a[2],\n            h = a[3],\n            f = p(f, m, g, h, c, 7, b[0]),\n            h = p(h, f, m, g, e, 12, b[1]),\n            g = p(g, h, f, m, j, 17, b[2]),\n            m = p(m, g, h, f, k, 22, b[3]),\n            f = p(f, m, g, h, z, 7, b[4]),\n            h = p(h, f, m, g, r, 12, b[5]),\n            g = p(g, h, f, m, t, 17, b[6]),\n            m = p(m, g, h, f, w, 22, b[7]),\n            f = p(f, m, g, h, v, 7, b[8]),\n            h = p(h, f, m, g, A, 12, b[9]),\n            g = p(g, h, f, m, B, 17, b[10]),\n            m = p(m, g, h, f, C, 22, b[11]),\n            f = p(f, m, g, h, u, 7, b[12]),\n            h = p(h, f, m, g, D, 12, b[13]),\n            g = p(g, h, f, m, E, 17, b[14]),\n            m = p(m, g, h, f, x, 22, b[15]),\n            f = d(f, m, g, h, e, 5, b[16]),\n            h = d(h, f, m, g, t, 9, b[17]),\n            g = d(g, h, f, m, C, 14, b[18]),\n            m = d(m, g, h, f, c, 20, b[19]),\n            f = d(f, m, g, h, r, 5, b[20]),\n            h = d(h, f, m, g, B, 9, b[21]),\n            g = d(g, h, f, m, x, 14, b[22]),\n            m = d(m, g, h, f, z, 20, b[23]),\n            f = d(f, m, g, h, A, 5, b[24]),\n            h = d(h, f, m, g, E, 9, b[25]),\n            g = d(g, h, f, m, k, 14, b[26]),\n            m = d(m, g, h, f, v, 20, b[27]),\n            f = d(f, m, g, h, D, 5, b[28]),\n            h = d(h, f, m, g, j, 9, b[29]),\n            g = d(g, h, f, m, w, 14, b[30]),\n            m = d(m, g, h, f, u, 20, b[31]),\n            f = l(f, m, g, h, r, 4, b[32]),\n            h = l(h, f, m, g, v, 11, b[33]),\n            g = l(g, h, f, m, C, 16, b[34]),\n            m = l(m, g, h, f, E, 23, b[35]),\n            f = l(f, m, g, h, e, 4, b[36]),\n            h = l(h, f, m, g, z, 11, b[37]),\n            g = l(g, h, f, m, w, 16, b[38]),\n            m = l(m, g, h, f, B, 23, b[39]),\n            f = l(f, m, g, h, D, 4, b[40]),\n            h = l(h, f, m, g, c, 11, b[41]),\n            g = l(g, h, f, m, k, 16, b[42]),\n            m = l(m, g, h, f, t, 23, b[43]),\n            f = l(f, m, g, h, A, 4, b[44]),\n            h = l(h, f, m, g, u, 11, b[45]),\n            g = l(g, h, f, m, x, 16, b[46]),\n            m = l(m, g, h, f, j, 23, b[47]),\n            f = s(f, m, g, h, c, 6, b[48]),\n            h = s(h, f, m, g, w, 10, b[49]),\n            g = s(g, h, f, m, E, 15, b[50]),\n            m = s(m, g, h, f, r, 21, b[51]),\n            f = s(f, m, g, h, u, 6, b[52]),\n            h = s(h, f, m, g, k, 10, b[53]),\n            g = s(g, h, f, m, B, 15, b[54]),\n            m = s(m, g, h, f, e, 21, b[55]),\n            f = s(f, m, g, h, v, 6, b[56]),\n            h = s(h, f, m, g, x, 10, b[57]),\n            g = s(g, h, f, m, t, 15, b[58]),\n            m = s(m, g, h, f, D, 21, b[59]),\n            f = s(f, m, g, h, z, 6, b[60]),\n            h = s(h, f, m, g, C, 10, b[61]),\n            g = s(g, h, f, m, j, 15, b[62]),\n            m = s(m, g, h, f, A, 21, b[63]);\n        a[0] = a[0] + f | 0;\n        a[1] = a[1] + m | 0;\n        a[2] = a[2] + g | 0;\n        a[3] = a[3] + h | 0;\n      },\n      _doFinalize: function _doFinalize() {\n        var b = this._data,\n            n = b.words,\n            a = 8 * this._nDataBytes,\n            c = 8 * b.sigBytes;\n        n[c >>> 5] |= 128 << 24 - c % 32;\n        var e = u.floor(a / 4294967296);\n        n[(c + 64 >>> 9 << 4) + 15] = (e << 8 | e >>> 24) & 16711935 | (e << 24 | e >>> 8) & 4278255360;\n        n[(c + 64 >>> 9 << 4) + 14] = (a << 8 | a >>> 24) & 16711935 | (a << 24 | a >>> 8) & 4278255360;\n        b.sigBytes = 4 * (n.length + 1);\n\n        this._process();\n\n        b = this._hash;\n        n = b.words;\n\n        for (a = 0; 4 > a; a++) {\n          c = n[a], n[a] = (c << 8 | c >>> 24) & 16711935 | (c << 24 | c >>> 8) & 4278255360;\n        }\n\n        return b;\n      },\n      clone: function clone() {\n        var b = v.clone.call(this);\n        b._hash = this._hash.clone();\n        return b;\n      }\n    });\n    t.MD5 = v._createHelper(r);\n    t.HmacMD5 = v._createHmacHelper(r);\n  })(Math);\n\n  (function () {\n    var u = CryptoJS,\n        p = u.lib,\n        d = p.Base,\n        l = p.WordArray,\n        p = u.algo,\n        s = p.EvpKDF = d.extend({\n      cfg: d.extend({\n        keySize: 4,\n        hasher: p.MD5,\n        iterations: 1\n      }),\n      init: function init(d) {\n        this.cfg = this.cfg.extend(d);\n      },\n      compute: function compute(d, r) {\n        for (var p = this.cfg, s = p.hasher.create(), b = l.create(), u = b.words, q = p.keySize, p = p.iterations; u.length < q;) {\n          n && s.update(n);\n          var n = s.update(d).finalize(r);\n          s.reset();\n\n          for (var a = 1; a < p; a++) {\n            n = s.finalize(n), s.reset();\n          }\n\n          b.concat(n);\n        }\n\n        b.sigBytes = 4 * q;\n        return b;\n      }\n    });\n\n    u.EvpKDF = function (d, l, p) {\n      return s.create(p).compute(d, l);\n    };\n  })();\n\n  CryptoJS.lib.Cipher || function (u) {\n    var p = CryptoJS,\n        d = p.lib,\n        l = d.Base,\n        s = d.WordArray,\n        t = d.BufferedBlockAlgorithm,\n        r = p.enc.Base64,\n        w = p.algo.EvpKDF,\n        v = d.Cipher = t.extend({\n      cfg: l.extend(),\n      createEncryptor: function createEncryptor(e, a) {\n        return this.create(this._ENC_XFORM_MODE, e, a);\n      },\n      createDecryptor: function createDecryptor(e, a) {\n        return this.create(this._DEC_XFORM_MODE, e, a);\n      },\n      init: function init(e, a, b) {\n        this.cfg = this.cfg.extend(b);\n        this._xformMode = e;\n        this._key = a;\n        this.reset();\n      },\n      reset: function reset() {\n        t.reset.call(this);\n\n        this._doReset();\n      },\n      process: function process(e) {\n        this._append(e);\n\n        return this._process();\n      },\n      finalize: function finalize(e) {\n        e && this._append(e);\n        return this._doFinalize();\n      },\n      keySize: 4,\n      ivSize: 4,\n      _ENC_XFORM_MODE: 1,\n      _DEC_XFORM_MODE: 2,\n      _createHelper: function _createHelper(e) {\n        return {\n          encrypt: function encrypt(b, k, d) {\n            return (\"string\" == typeof k ? c : a).encrypt(e, b, k, d);\n          },\n          decrypt: function decrypt(b, k, d) {\n            return (\"string\" == typeof k ? c : a).decrypt(e, b, k, d);\n          }\n        };\n      }\n    });\n    d.StreamCipher = v.extend({\n      _doFinalize: function _doFinalize() {\n        return this._process(!0);\n      },\n      blockSize: 1\n    });\n\n    var b = p.mode = {},\n        x = function x(e, a, b) {\n      var c = this._iv;\n      c ? this._iv = u : c = this._prevBlock;\n\n      for (var d = 0; d < b; d++) {\n        e[a + d] ^= c[d];\n      }\n    },\n        q = (d.BlockCipherMode = l.extend({\n      createEncryptor: function createEncryptor(e, a) {\n        return this.Encryptor.create(e, a);\n      },\n      createDecryptor: function createDecryptor(e, a) {\n        return this.Decryptor.create(e, a);\n      },\n      init: function init(e, a) {\n        this._cipher = e;\n        this._iv = a;\n      }\n    })).extend();\n\n    q.Encryptor = q.extend({\n      processBlock: function processBlock(e, a) {\n        var b = this._cipher,\n            c = b.blockSize;\n        x.call(this, e, a, c);\n        b.encryptBlock(e, a);\n        this._prevBlock = e.slice(a, a + c);\n      }\n    });\n    q.Decryptor = q.extend({\n      processBlock: function processBlock(e, a) {\n        var b = this._cipher,\n            c = b.blockSize,\n            d = e.slice(a, a + c);\n        b.decryptBlock(e, a);\n        x.call(this, e, a, c);\n        this._prevBlock = d;\n      }\n    });\n    b = b.CBC = q;\n    q = (p.pad = {}).Pkcs7 = {\n      pad: function pad(a, b) {\n        for (var c = 4 * b, c = c - a.sigBytes % c, d = c << 24 | c << 16 | c << 8 | c, l = [], n = 0; n < c; n += 4) {\n          l.push(d);\n        }\n\n        c = s.create(l, c);\n        a.concat(c);\n      },\n      unpad: function unpad(a) {\n        a.sigBytes -= a.words[a.sigBytes - 1 >>> 2] & 255;\n      }\n    };\n    d.BlockCipher = v.extend({\n      cfg: v.cfg.extend({\n        mode: b,\n        padding: q\n      }),\n      reset: function reset() {\n        v.reset.call(this);\n        var a = this.cfg,\n            b = a.iv,\n            a = a.mode;\n        if (this._xformMode == this._ENC_XFORM_MODE) var c = a.createEncryptor;else c = a.createDecryptor, this._minBufferSize = 1;\n        this._mode = c.call(a, this, b && b.words);\n      },\n      _doProcessBlock: function _doProcessBlock(a, b) {\n        this._mode.processBlock(a, b);\n      },\n      _doFinalize: function _doFinalize() {\n        var a = this.cfg.padding;\n\n        if (this._xformMode == this._ENC_XFORM_MODE) {\n          a.pad(this._data, this.blockSize);\n\n          var b = this._process(!0);\n        } else b = this._process(!0), a.unpad(b);\n\n        return b;\n      },\n      blockSize: 4\n    });\n    var n = d.CipherParams = l.extend({\n      init: function init(a) {\n        this.mixIn(a);\n      },\n      toString: function toString(a) {\n        return (a || this.formatter).stringify(this);\n      }\n    }),\n        b = (p.format = {}).OpenSSL = {\n      stringify: function stringify(a) {\n        var b = a.ciphertext;\n        a = a.salt;\n        return (a ? s.create([1398893684, 1701076831]).concat(a).concat(b) : b).toString(r);\n      },\n      parse: function parse(a) {\n        a = r.parse(a);\n        var b = a.words;\n\n        if (1398893684 == b[0] && 1701076831 == b[1]) {\n          var c = s.create(b.slice(2, 4));\n          b.splice(0, 4);\n          a.sigBytes -= 16;\n        }\n\n        return n.create({\n          ciphertext: a,\n          salt: c\n        });\n      }\n    },\n        a = d.SerializableCipher = l.extend({\n      cfg: l.extend({\n        format: b\n      }),\n      encrypt: function encrypt(a, b, c, d) {\n        d = this.cfg.extend(d);\n        var l = a.createEncryptor(c, d);\n        b = l.finalize(b);\n        l = l.cfg;\n        return n.create({\n          ciphertext: b,\n          key: c,\n          iv: l.iv,\n          algorithm: a,\n          mode: l.mode,\n          padding: l.padding,\n          blockSize: a.blockSize,\n          formatter: d.format\n        });\n      },\n      decrypt: function decrypt(a, b, c, d) {\n        d = this.cfg.extend(d);\n        b = this._parse(b, d.format);\n        return a.createDecryptor(c, d).finalize(b.ciphertext);\n      },\n      _parse: function _parse(a, b) {\n        return \"string\" == typeof a ? b.parse(a, this) : a;\n      }\n    }),\n        p = (p.kdf = {}).OpenSSL = {\n      execute: function execute(a, b, c, d) {\n        d || (d = s.random(8));\n        a = w.create({\n          keySize: b + c\n        }).compute(a, d);\n        c = s.create(a.words.slice(b), 4 * c);\n        a.sigBytes = 4 * b;\n        return n.create({\n          key: a,\n          iv: c,\n          salt: d\n        });\n      }\n    },\n        c = d.PasswordBasedCipher = a.extend({\n      cfg: a.cfg.extend({\n        kdf: p\n      }),\n      encrypt: function encrypt(b, c, d, l) {\n        l = this.cfg.extend(l);\n        d = l.kdf.execute(d, b.keySize, b.ivSize);\n        l.iv = d.iv;\n        b = a.encrypt.call(this, b, c, d.key, l);\n        b.mixIn(d);\n        return b;\n      },\n      decrypt: function decrypt(b, c, d, l) {\n        l = this.cfg.extend(l);\n        c = this._parse(c, l.format);\n        d = l.kdf.execute(d, b.keySize, b.ivSize, c.salt);\n        l.iv = d.iv;\n        return a.decrypt.call(this, b, c, d.key, l);\n      }\n    });\n  }();\n\n  (function () {\n    for (var u = CryptoJS, p = u.lib.BlockCipher, d = u.algo, l = [], s = [], t = [], r = [], w = [], v = [], b = [], x = [], q = [], n = [], a = [], c = 0; 256 > c; c++) {\n      a[c] = 128 > c ? c << 1 : c << 1 ^ 283;\n    }\n\n    for (var e = 0, j = 0, c = 0; 256 > c; c++) {\n      var k = j ^ j << 1 ^ j << 2 ^ j << 3 ^ j << 4,\n          k = k >>> 8 ^ k & 255 ^ 99;\n      l[e] = k;\n      s[k] = e;\n      var z = a[e],\n          F = a[z],\n          G = a[F],\n          y = 257 * a[k] ^ 16843008 * k;\n      t[e] = y << 24 | y >>> 8;\n      r[e] = y << 16 | y >>> 16;\n      w[e] = y << 8 | y >>> 24;\n      v[e] = y;\n      y = 16843009 * G ^ 65537 * F ^ 257 * z ^ 16843008 * e;\n      b[k] = y << 24 | y >>> 8;\n      x[k] = y << 16 | y >>> 16;\n      q[k] = y << 8 | y >>> 24;\n      n[k] = y;\n      e ? (e = z ^ a[a[a[G ^ z]]], j ^= a[a[j]]) : e = j = 1;\n    }\n\n    var H = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54],\n        d = d.AES = p.extend({\n      _doReset: function _doReset() {\n        for (var a = this._key, c = a.words, d = a.sigBytes / 4, a = 4 * ((this._nRounds = d + 6) + 1), e = this._keySchedule = [], j = 0; j < a; j++) {\n          if (j < d) e[j] = c[j];else {\n            var k = e[j - 1];\n            j % d ? 6 < d && 4 == j % d && (k = l[k >>> 24] << 24 | l[k >>> 16 & 255] << 16 | l[k >>> 8 & 255] << 8 | l[k & 255]) : (k = k << 8 | k >>> 24, k = l[k >>> 24] << 24 | l[k >>> 16 & 255] << 16 | l[k >>> 8 & 255] << 8 | l[k & 255], k ^= H[j / d | 0] << 24);\n            e[j] = e[j - d] ^ k;\n          }\n        }\n\n        c = this._invKeySchedule = [];\n\n        for (d = 0; d < a; d++) {\n          j = a - d, k = d % 4 ? e[j] : e[j - 4], c[d] = 4 > d || 4 >= j ? k : b[l[k >>> 24]] ^ x[l[k >>> 16 & 255]] ^ q[l[k >>> 8 & 255]] ^ n[l[k & 255]];\n        }\n      },\n      encryptBlock: function encryptBlock(a, b) {\n        this._doCryptBlock(a, b, this._keySchedule, t, r, w, v, l);\n      },\n      decryptBlock: function decryptBlock(a, c) {\n        var d = a[c + 1];\n        a[c + 1] = a[c + 3];\n        a[c + 3] = d;\n\n        this._doCryptBlock(a, c, this._invKeySchedule, b, x, q, n, s);\n\n        d = a[c + 1];\n        a[c + 1] = a[c + 3];\n        a[c + 3] = d;\n      },\n      _doCryptBlock: function _doCryptBlock(a, b, c, d, e, j, l, f) {\n        for (var m = this._nRounds, g = a[b] ^ c[0], h = a[b + 1] ^ c[1], k = a[b + 2] ^ c[2], n = a[b + 3] ^ c[3], p = 4, r = 1; r < m; r++) {\n          var q = d[g >>> 24] ^ e[h >>> 16 & 255] ^ j[k >>> 8 & 255] ^ l[n & 255] ^ c[p++],\n              s = d[h >>> 24] ^ e[k >>> 16 & 255] ^ j[n >>> 8 & 255] ^ l[g & 255] ^ c[p++],\n              t = d[k >>> 24] ^ e[n >>> 16 & 255] ^ j[g >>> 8 & 255] ^ l[h & 255] ^ c[p++],\n              n = d[n >>> 24] ^ e[g >>> 16 & 255] ^ j[h >>> 8 & 255] ^ l[k & 255] ^ c[p++],\n              g = q,\n              h = s,\n              k = t;\n        }\n\n        q = (f[g >>> 24] << 24 | f[h >>> 16 & 255] << 16 | f[k >>> 8 & 255] << 8 | f[n & 255]) ^ c[p++];\n        s = (f[h >>> 24] << 24 | f[k >>> 16 & 255] << 16 | f[n >>> 8 & 255] << 8 | f[g & 255]) ^ c[p++];\n        t = (f[k >>> 24] << 24 | f[n >>> 16 & 255] << 16 | f[g >>> 8 & 255] << 8 | f[h & 255]) ^ c[p++];\n        n = (f[n >>> 24] << 24 | f[g >>> 16 & 255] << 16 | f[h >>> 8 & 255] << 8 | f[k & 255]) ^ c[p++];\n        a[b] = q;\n        a[b + 1] = s;\n        a[b + 2] = t;\n        a[b + 3] = n;\n      },\n      keySize: 8\n    });\n    u.AES = p._createHelper(d);\n  })();\n\n  var keyStoreObj = ctx['KeyStoreObj'];\n\n  if (!keyStoreObj) {\n    keyStoreObj = ctx['KeyStoreObj'] = function (p_uri, p_key) {\n      this.setUriKey(p_uri, p_key);\n      var EOLN = \"\\r\\n\";\n      this.inlineKeyStore = // dev version of inline keystore\n      '<!-- Remember to update keystore.aes.b64!! -->' + EOLN + '<param name=\"receiverKeyStore1\" value=\"MIIKbgIBAzCCCigGCSqGSIb3DQEHAaCCChkEggoVMIIKETCCBXYGCSqGSIb3DQEHAaCCBWcEggVjMIIFXzCCBVsGCyqGSIb3DQEMCgECoIIE+jCCBPYwKAYKKoZIhvcNAQwBAzAaBBQDOpLRdrTX171DUrMFAAl\" />' + EOLN + '<param name=\"receiverKeyStore2\" value=\"XwcEk0AICBAAEggTI34wIxzZZA9JtzNdAoB69VbEfrSzLtYsmwMY5LX7HIW1JbrD6KbZT7tXZBwm6ngmkzaxCx8rRFv9308I5TLxRq5IXQiFV4zI1AXhAjDuVhauXV9M1vnytAgxgG/QKNMkCX4Bn3ZwkACzSjp\" />' + EOLN + '<param name=\"receiverKeyStore3\" value=\"auWrepxtfTfMrkhplHoSDEW92Eu/WGlQh1Rrfs+i7q8JcP/vNCRX2VL62Cf2arOvs0f3pD/AefMF94lKKvvQhEwaTRKKNJUlAjTqgidr7vr2eX36VvLljQf/3by81akD9T+NUkLYomuBhz40p+UgZV0mGZS5WkC\" />' + EOLN + '<param name=\"receiverKeyStore4\" value=\"uYwuidmxmldisddt5y4VM9zcQHkRQ4hC8BzIl2ZWpOs9GNk5xBbN18M1XtviFqQJgS11Qbq/tCWyRlzuEu/SdDk4Z4tU6RLfw2uq78SR3Ym44Gc/8yQHbymR+ZV8Qut19KuuVzy90Xy8tFV9LBPgwthz5ArnQMs\" />' + EOLN + '<param name=\"receiverKeyStore5\" value=\"cEGcLrgvcxamv9g7RfwPbqACIYxmkJmNXMZcLExvr7c5XCGeDHXTS47m3OgDNcRg3Y22AfqfVhJ/Dp+4MU2W3JV3YYAWggVkM0vqSP1mkU7eEdH6/W47Mspe4ygQxcfFcGmYuHpTvtDjQC7tvzl5C6yS2mENx6O\" />' + EOLN + '<param name=\"receiverKeyStore6\" value=\"xjbfqDSPO5RIJa+5jnr+rQu/ehTMM03X6dcWOKHyMhC3MpJhvjT9fiPMv1cpWDjf6z2HrhCP5K88Z6ZnDgGpx9JC91vYksC0Tx6a7CvyWkEv30hebRonGiZ0uVBDt7sRSEmjGdtYTDK1G9Cvf/mJXe5hja2qSHV\" />' + EOLN + '<param name=\"receiverKeyStore7\" value=\"J+5BrYTJ+kL1NQf2bKajN15Pxzy7GB9sHxSGrMVVqD8AHfOKl+WKyudi88I4uyxcEG9S5GIc+quopogOMIDM6VoZ71oRzyv8JMaAnufiD0tS1oDIjJ5zBW2JwRpG5YABPgDalVxQxywnHkp+VrviS3rfWlPUtF6\" />' + EOLN + '<param name=\"receiverKeyStore8\" value=\"c2lCrrNY6MdqQxH7LfDPZulljW4I85XsIV3b6eMvBDOMnadAeteNiRmMZFHeSM2fLXVwdlNBw57jQpb9ELKIm4TaM1J5jiUSql8qIbl2WbWp+m7RnMmPYXMrQ23eszw14pz6HIDQb4VWmrfzNA6jEW+F1NHgE2U\" />' + EOLN + '<param name=\"receiverKeyStore9\" value=\"47AYaG3XQPD3vzxzNhepMvR+ScqduU/aDnd1MPlLz8nXx8oinLnZlnTqNrrlOr/zu5KAmSsepAPIpCzZcY/ou8j3DvKDx11GaSH84E5BzLsoXoyAIgDtOrEc9cDY9SVqPP5ByDVWJZ6ZP+GuRZGFJAmdWegb/ww\" />' + EOLN + '<param name=\"receiverKeyStore10\" value=\"CTn6a4y5IIUehfppg0+/9rKf8Bc+WGPMTrxlEeM+Lr/KXkPWKrFrQLOIeqNsKeY+hoG568knDpDW0jAxSJ5kE/xPYTe7O3JRWnjvdW22vj6iVaLASv7SHFOwcfsyX9hMr7GftpLoaU8Jbf2YrFXljInGGgUsd+h\" />' + EOLN + '<param name=\"receiverKeyStore11\" value=\"bXMB6nc2HrXbm3wumsbNhhvl3xCevf9tvsp/Ri1FtRf442PJmtP3hKRzgYfScjxGoK37mdIiMvJwrCfJtUEi7s31yzSkfWNia/hN0Gb9wlHD0lSd8exoWJBIa8au05ZMIE2gRrJo2I66nFdkbzcNWSEphxx4hNL\" />' + EOLN + '<param name=\"receiverKeyStore12\" value=\"u3GCUcH6dqRxYxEFg9RZaJejuJaJsqTzOkIrUvd+fC7l9uo+bjqms4FafIoMU4wKQYJKoZIhvcNAQkUMRweGgBrAGUAeQAtAHIAZQBjAGUAaQB2AGUAcgAxMCEGCSqGSIb3DQEJFTEUBBJUaW1lIDE0NTYyNTUx\" />' + EOLN + '<param name=\"receiverKeyStore13\" value=\"NDk1NTYwggSTBgkqhkiG9w0BBwagggSEMIIEgAIBADCCBHkGCSqGSIb3DQEHATAoBgoqhkiG9w0BDAEGMBoEFPOEz7CC8XxoEj1rbZ2srMshjoj8AgIEAICCBEAsRu4btn+yT985zQ3zeJmOYJUePjMHYo/UgdU\" />' + EOLN + '<param name=\"receiverKeyStore14\" value=\"kvbJ5zDOP6yJW+lGolpW2zFIAG7keVodJ7R+oh7GFAcZmzz4ioiD8wDxB1rr2aGfszgfY2EwAdRdqJXp1Ew8u8Wi33vPNyPNv1H+0GPER5jZU0vKS0cL317oFS2G6PNdqfnkdvanJP1UmKCMOkO3jf44OHu0dgA\" />' + EOLN + '<param name=\"receiverKeyStore15\" value=\"OVLSMW2NhcVi/3Yi9QHE8oytc6k2ZYPbCKzIZ2NUranGnH47DzNQwH/7aRbMx8fXpZW6/KYO9iVeTyGPnTzZhT/mtVgKYtOcdDAqTeMmL1+DWor7ON4WneGqzFQ3N7LL0ZtuMEgQdHoGvSZAYm6Z9deWRj7+fH8\" />' + EOLN + '<param name=\"receiverKeyStore16\" value=\"ln/Grd6DTHj2x8TggS2vtyTSD46xu/rE8avzUUG9EFC1kKQZMgi30sEW93G5bOVxZRLuivs/FSfVCfvCJe20UayECpU2OqZ2mIZcJM7ai7O4o23/FltjeK4hZpjQPrzQpDlPymFtCdFNvBDXgHFF/nMcB4j63Fx\" />' + EOLN + '<param name=\"receiverKeyStore17\" value=\"L2dC+F5KC8GizSPF8otdLM9fl1ifA2JEiA+uxxCZTKib27VmuvOEs68CKkNRIIovR8C9mNFKy5ezhutGl8iXngkpRO7oD9d7Xc0IF9T4YvAd4RkYPawGRMZ8HIEVH61pXw0G6Xqn2smVZxM3k0gsD1ssqOqCDUx\" />' + EOLN + '<param name=\"receiverKeyStore18\" value=\"rSB94GMnE2EieE6cVyFFz4swt6FFBeGgyFaIiWkLkcFJCmFQZoRzkCO+bPaAxall4uuJGgRsh+rNq1d3e7MVTuT1xSFTq4N837v1jeMLGWA7N75/Lnl7CosyuMZF3i+yN4aPMEOCeS83Ki561oG7yVvbxEYgK7C\" />' + EOLN + '<param name=\"receiverKeyStore19\" value=\"Kl0HOsr44DYNZ3hvzlwh8WUb+u7xA7TQ/yAQ5UGjKChNiyyo/OBHpxN91RlVDYrUj+5Kq7KNnKzmLkwlh7F46NVDWbHDqHlBfJKUILbthd3O/LpmazRQVbX4/Y5o9KY28azVG2OZeqr5swTn5nWMbFQlUMuS3vS\" />' + EOLN + '<param name=\"receiverKeyStore20\" value=\"MCOANPqAK4cglnIHiX6SpEcRqMR8+RKvkgK3TEoN45KOh98+eK/2rSRTH5GWz9F0/C3VbPBXf/Db5uHxBAfOihnodp78DXFahIvYUf1pYaUuUaw5g0KE3RUBqVSU4fkG6KWcO8+bmBZkRc29AhmAj3iIL7I0l98\" />' + EOLN + '<param name=\"receiverKeyStore21\" value=\"XmHcskpPCE32nQ7A0kpNZ1G+ogaxbLheQFF5FSMrGkyCiWJta+xcrhRQMJWndhesrH0XA5HVSXa80vEU4ZKaTUt2njINsvx7xXotBq/Z3JkPpP0c0oM0x2vHkSXGKFcMWI/CIt28jZZI7Gum0g2pRGHJK2qsNCi\" />' + EOLN + '<param name=\"receiverKeyStore22\" value=\"k66nq/Mj6ThwLRJwIYfSAfnM9En57FRTXGm9xna2mczjrSiZn18DAJ6tgLVf5Cap0LOM9V1z+5tjE0AM+Eb01ZHemqpgBowWU0pP23kjDjQJuoEyHQHwrBkEjYCgDpd4XkeXcQ6ZbFF6ULDA9MCEwCQYFKw4DAh\" />' + EOLN + '<param name=\"receiverKeyStore23\" value=\"oFAAQU5e0Kc96L5kZW9UPpRMKhJtuX0RYEFIzuNUevzDRHBl9LRnGaBbQUhKNRAgIEAA__\" />' + EOLN;\n      this.inlineResponse = \"+NSvU1GrHu/Qj8t1EMlxef7Jw/YQY52IcR3p3vadG0D4t8/aRZE1jjpf0yOdbbmO/daKcDAyErfNkR5rY7VSqa8O7k5KsroE6mxgK5eDrdf7VdNSlTwepXCf8ItzwryDxu3oDovbrq3TfoYBdBiQxy1WcGq0dvQjN6CHBgPdv7872lE3jqGQ3I82ATIMA36rEyalkkhJjz65RgNFbGjJdmekCOGJ85fbxRVcf6M0uKRr9L8Hd+Y/0YoO7Y1mDSJVFoo76/vqwxBgX3uy4VNn1hvPGNZIibJVMtLKwnHlb767oU/6as0nmms4XGKrsM8bRZ64vgnKgcHpPTSadbeUvw8XfZCL+nGdCl5KOvswmaqwZUKdFV/yeYGzOVgvAYDDs14ZPI8Pb6ujk1GOTU1B5HkwEjUyxOVlxzggQz6o7MGK7+ldF1nbHkIDP8H68j9MdOISNdFWZDAj7cBe4wB6UOttKcNpAoejuqszJe+fQzWkBzojU5K+LTvfY+ynHep/MqTXtKooJdB81XjQYd1BXew8yXSPa3gG9Chdgz9pDdvEnhhShYqpv9qcOSNZudDRcp9qbHRJ3ft1Y2RgWbx/ofYfWNyZl0AONMuV+SOi32LcgKLfACmFkQg5afa91aBtlAls6ILBdnc6ufJoaqj46R/g07pzqwemF9PxYCFc5FOPah5Db6YhvQv1k5tNsnoC4udhgIwfa26IVn2LWkLcDpJNdP/lM6lwWT7a7E/e3JwduXI+lOUlwYyokAFXVmDJ0EnXNzSKixIDkTU4hu+TofGiTYLebIJhjxFymYmyq2LBxUm8pkVm63ccvNn+njSt2L763wX+LGqEpikc1NXGVPYNgEU/CxvrNii9tI4QteLcrzyFsQUZsqybSix8tMyTZ+TGWSjt1caZZNToHgfOgL7/1saB2o/V/e+tZTIwDw7K3l1TGwJVDBFW3+wDuh6uy5JOm3CDa+vo6IqYYW08y8bTfntaBUpGLJmwRUvAp8uGEsokVNBYvT/J8mF1Bsmwz8p8l4wytnTEz59ZarTShk7MAwucbUBq6zVd26NTVRVj5uO+NXsfEQu065F+mi5z3CNS8Elt3gipEr3HmlPT2R4+G82g3PF06HUNC1dy46WbUfj0yAFNbyJc9pB73jhhTt4JjObJGdoUKFeBqDqFjDh+YbVvint9Vx4YdMGc6CvMI0nEft7THwR4j8A16oY/fJo9x435vJJqxBuiONwfC3xwOPEGGBBFt27/emS/9MFZBWmBfHRCDoLGV+CEvwSAlRF+BBd83zbI130eVcEg/2Q7Xg6ZB0QuZzBRjuDIp8A9le6cIOJ8VKUH601q+DLl0/U6VFYMI5qm5wx74WNTTiSlxLo4qyvOnec36b7nuq6EkT7bgO0oCiKrOiDlKHLKB425frQDc5HbOFwjhufDEMqHZ3infAsN5gSBbaEZ8nDeGzJrorlUPm1UN1/CxWyVsXrsYPlWzVhFBmf/d81jKwvcinbwKrEU1ARJ6kpKsH0Ayrl5VtxkGX0A8bT9tN8Fpm+8OEhBgZM3XCevK32iicj/QSVGML6pjhyFovf5trExLBo3d4M8hJx8KZfpP1IR/FE6JPfh0NOwM0eSJkjNrlIPU1+JmEX8JiqN944BAO/NFoSNSWM3ShzW9j4h8P4PZW3MZX+GBnZOMBwHGsjAUN+WPEHTQbDoudhZaYm14uoBgsDqaFU+ATplTy2cHI+S66mwx9WeQigwwYwW47+nTwCmIHtaduo4jRGiRiIABHSMTH3uhYKsGxdJozAQNWgNSS9fWW2n9zDpNqGLh7u3N21UoRxclrivxHNDA0DrBey/aLlib9GqE/1X0TbngrnKxFIwVtZ3eurqyUnA3FwDlwvx+5RfDITsalVMIST20chrKx4xiFMP07En8ZOOBRoYbOwkDejZNBo0mB3RSssmb2FoyUb4xyfgpzf56KiFnLbCA9jBmGVvJZ6dcIsT2TDY3kBcDfKmsmNYgfRXRQRsagVOqgCUZCyLXLg1ibv2Odd8+pzW2clDGvDfMyhmog81TQpnTMpaKb7onl2AoJOFc31kcNyDh1xVeac0Gg6oWCk3HYYCf9Pk+j4qBw78Zub8T9zKiq3ONJ3AH8YuvCi9LwI2/Bdmxhp57z45p0xyog0wMErr7XRJsXT8VpU2xIswynTe9eiacSd/NTvSENttNGxS9nTe6ZF85KCcF++ucnzWlRME1LhPwZPN1OTwlp/Fcb5VUEznQRw6QlOZqDbZFPHLejxCXqojpRVQzQVsYMQQA000n2ENQ4XwWanphmIU6khpNPRJ12Kbjyyikh/xt6ZXLLZZhHexXyD4w4FCRXJjl3gM9fenTvjVxC2MksjrPjzcLcLXfYlzcfQfZF8tNsw4YQQUyOWTYMUvU6vnPvr3ODNLqqzFrj9GeZrvuumm78Z+UfLmeo9R6IvAbIYEJX21XUpB6KWWtOGKtoqgTWgXUFLPA0jbm9esRWrrre7TwvUZrz30pvfzzNTF5hU79Re0MuEN9LPcZsAOEeC2ZWbdABZg3oY3MRV5gnrapCsIYIVBPj/h4/+y0bR1KKoELGm0Hu+Un0C4UJtt4RXvjKw4eGbPjxBAZy2/CsBObPQDL/TH5eR9DJx/Jc2pEBZs5oz3VLjz+6v6HrHhXgGt5Emca35iGv7yOr1PFYMFLytnlusrxjmJZiR5QLhJOUp++qiVJuHEBAuhlXqA7SczfDRc7FLZNmBJ6rA3KrJ+jyIVGzSPPpaI/M4eUV8hZ0ESqz03y7WdGlyKWeoiXtecpqOMmA3DBP59fJIcz5W0rGUHp5afOYJolNeq5H8p6tXo/a2HGDaqxmTkleCaFgIVC0JTiMuxv9NNZQn59L8AHsI7iINjL7tfwuU6Rbp2hYTwbr9EP5Ddxe47EwLfVI2JJdaZU4Qii4xyO6DEGPUlI2MMdGFEHB7uvVJZPjGVIgZ0DQsLi9ddPTxTXDy5LceGDHDSN8FtSINcXol0FZvs+3ljTGt3wZpC+zJbVRvh3qYCD9xaocRQ0GO/iAZZh8mme0nyTGK2R6FSXMkL0uDOz7TpCXY9Zx12+Lz/7aDkFLY5PeRkM5UtxEPWa3N5vUuwBaxGJCam61TKqe1FdCgFNlXwR/LEFzTXva+7ep7EWEEaHmgdKxsflwSUOAJyTga0b3xC/ZpPDBo+x/fjUEaqEbAJubKIb7z0PjeXe1z1J7hCAMYVyfasFizV6IyWtoiaH6OHg8lhR8AqEO3sayAnndwqsSdifX3mO3ydvMj0qW1kTIEaeXU/DuCfbTxqjPDcqBivnUeKHCILczXZKwKZlwhjskCSgNF2xXUKszh0IJuKJgvUXrv4IT0J6HAcN3/zMbkN68Jreb1y9qF8JoQ2jnSIzVeOfPUXnPum95TcE8DIz2scDaCNr4Rv9C5g4hyG4LkDRl/ZdQVtPGnF6XCva/9Zvv0wxwZAPkUvO/Wx5a2K02e4sF7VHHQkUe3H/M1+g/68vlGIBagIvxKpb13gSYqA+w982YBt1LqWVQcp5fESAxZE7kgp8aY0IQr1+76LiTVA8jxgj6PwDoAAIUypactfbI7PJU7WB55h/I5cCzju54S0Z9Fr1g71keOyeEQfxklsM1zye+ybJMQFL4h+nXkstP6W2v3vRTyd/PigvMzdRO8M3iztjJY1f0crRPrfttpgbcRb+sW4aMv+c6Q3fB20OUR7Xc2V4cc2ChG6zsKXHe0ZDSM2xKzlW08G5vib6Wyymo+UWA3NP60SniNF4NAdsgdeURBLDSz5YaK+/r10mypsJjlNgu51ejeRqim5dx0fC0bB0LM7ZLeGkL2jgs3vmmprTT3/0ZbpsZWe5ogtFF1vKpEnDeuhbP9L0WvEXsA1zvgvON6BUnkivpR0mr1CJ5VnrY3b2TSTx/CXiFXHYNJisEUY+L5xF7feEagj9f7FWlGoK7oQP437+xlLXhVjAvbwa486Io+mVtsz5Ife2Okq2hDrg/jLlgcAHqH4J96AJCnbSiRI4+W3AhSDruc+JC5O9PYc2fsYR1nrFmewxIcVA6PbmGoTsFf7wWJ4HC29DYKi6MZfsu8wmHH4xsdfkidpzZIZH2i0hM1feBCdzKA0Gt3s0EtVMs17mrxllfVmd82xXxo3Gd8m23pfCjexyFTB4CJoNfPjmKkRCFlf/teuPVnsoqK305JZFBogGZcstGtch4rQZtkLH9OGtpCBFGJravQg2czho2ej7HrbjYQ3uNs7g+sZK4vkdxjd+cgsMeFrrZD+iNCs/H52gi9kJr56wMQoMk73NJxrwaeZeTaSciCmShN3RSLM5jGOPZGf2y8Fue3YeLY3MqWFxm03FAyckqYEp83iRpoHhHrmlyeCK0y7hu7mH44R/HbBTpBlEE2vbnfcEBJvKt7Y4Ml+1b1ooMmfHyrym2XULhTYkC5OKutD8gkeqiPf6dldqg+nZYEnbIHXmwS5kyoLNFqc1obBrJwVNU+oVfSIwUGAYLaX3Qc/Pog4v1yzIc8eGccNQSFv046Ws1qm+q0T0xywP29NMNlfUr6aO7EeRqXRtvW1VQipL4VOB1PWpjJ63lIBjq0DTSuHmJBjY5W/iICAnYDv18z5WvxKYFk5hNX8qp0yI4CRsi15LO1H+cgIvBYYcxZl1LwOGYAR5VxQew2u9INMmkniQjnIc0/gAZLm391Nao6ml4aLUCyGMZht1RTD9RAzKw7s4u2NoGyltgzltJbZP/l6MToD/uNVWik+gAF/S+QFr22Hk+xWJGVAC9LHTnmo138fr56ISWAabe5HkFqIInfMtb9VcqXXm8/IeHs6iSxQwR+FD4QD8TICV7SDAqaXESofwE9JxIozcXo1gc9jmuAcw3orYjwgFigpHzyoLsm9sGNn6bTXQkBrqYkVCGbw1Q07KEYLIeGmKIJk0x70GzYz8pC2xLK1Vn3Cpe1sNsGATuxJMfvLJoqqjrWBg7PE6SeJkbA43N0D+1iTOgiAkQYCCSl/p0QtXtQ7bhe2nRFTAzCI4+H4F8It8JAOK2gcSHyZjGV4LSJmQ0hx6LvB29VTC6RgG1MeGI8OecbxA5xaDx4aa3ygsMvFZjLQK9eohSasLCvKVVfXMBVMbSSVAlCVvq/p8wwi6Ezxb6LEppuRk64j81uKLZaeMJh0IKPmMk/K/4BOGxIjRmUfzVhNJ+Yxi7fogWGO0UH5tei2OTDB75gwijgHxc3TmnUPnDdbm/p3ZCruQNeJt1bfCGrBaHpptwzrInymKmfWZ8Nys7ewhtrB9UiCJZu0jIqb4bPFRxdr7bx4Y4wP+68FqfZD3cEUVkuPksTkhjxymdcrpIBxyZmYyuH3R9xwAV7pXJKLnI332AQN7csueP0c6WxeoDs7m2qGRdhMSObSbh7FgGUF53GwIoai3so5H5TC6jvIYZEEN0CQVpG37BOx79sxvCYzqqF4VV4mAYwSdwq+FUwkS7uA0TihqoU+At13s/oJOsegCGPLuewJLBNwZV4vX5lqa64ND3WbXFr4Wv9hCST0NLb9lRvv3Z2meFlP17Qv0UJSD2bTmeqRhYQodSTaoBLRDRfJ7VYgosIpME68/bOO36t33r9wlv7OLNLY3hZzJfikAWW6LGjBwVgj+rF/FcC0jhqdRGGD5zJ/ipXrl7ZXsosDxinv/tO6/XB2Tjp31T/jMtjhyn97/+n9QkHgZgG/O5MtSHjuI9UaFnAO5rIhUuCzaWQTTNDwk0dlXJRf/ftrBiavnevH4h5TM1mt+rtFsvmkEVp4t8yYggT01WWEHswqftt367OdSvwhjzJKsQNd5fdbw+QHugvYQfzFSfLgYGUUVgj1fh6QIOa02mj7saKbDlT0SIa1mvPxaFqnZ2Q5ktspoVdfSMErlegHACSmfKAG1sgK9YWmqrIjR+qe6mCOldW+X4+kC0J6TG8/HD675cS3fZt3mQoFOZaQGNxxDgDUc5ZoaK6LEmEpRqCvM09lw8/IAq/TL4flDS8Ra0tW2v89BmoWnrNz+iySpjzZXgCGHT3C1CDoqIHni980VYwpmlRTCzwxNJ89bVF6h83tk+KwZp9GoMB8ZS6YHYpIeT9U/qMQdQcnTw9+rCQIjzDf8aNc1cAHFJ+B1qklcpP3KGJMU/t4nE0HmHiiE2JqyFoRjoRWFL5nNPJa2pvsKDCRjDfEbHp6gJQXaLdXURUX063ExN/i5MHXxA6aNHNQ3StlUg3btfKwLg==\"; //replace(/name=\"([^\"]*)\"/g,'name=\\\\\"$1\\\\\"').replace(/value=\"([^\"]*)\"/g,'value=\\\\\"$1\\\\\"').replace(/\\r\\n/g,'\\\\r\\\\n'\n\n      this.keyStore = null;\n      this.onSuccess = null;\n      this.onFailure = null;\n      this.reason = 0; // reason for failure, if set: 1: load error, 2: invalid\n\n      this.log = null;\n    };\n\n    keyStoreObj.prototype = {\n      setUriKey: function setUriKey(p_uri, p_key) {\n        this.URI = typeof p_uri == \"string\" ? p_uri : \"//\" + window.location.host + window.location.pathname.replace(/\\/[^\\/]*$/, \"/\") + \"keystore.aes.b64.txt\";\n        this.key = typeof p_key == 'string' && p_key && p_key != 'default' ? p_key : \"DEADBEEFCAFEBABEDEADBEEFCAFEBABE\";\n      },\n      // end setUriKey\n      load: function load(p_onSuccess, p_onFailure, p_log) {\n        this.log = p_log;\n        this.onSuccess = p_onSuccess;\n        this.onFailure = p_onFailure;\n        var xhr, rv;\n\n        if (!this.URI || this.URI == \"default\" || this.URI == \"inline\") {\n          // empty URI, use inline default\n          rv = this.handler(this.inlineResponse); // to provide key check\n          //this.keyStore = this.inlineKeyStore;\n          //if (this.log) this.log(\"using default keyStore\");\n          //if (this.onSuccess) { this.onSuccess(this); }\n        } else {\n          xhr = new XMLHttpRequest();\n          xhr.addEventListener(\"readystatechange\", this.listener.bind(this), false); //xhr.addEventListener(\"error\", this.errorListener.bind(this, xhr), false);\n\n          xhr.open(\"GET\", this.URI, true);\n          xhr.url = this.URI;\n          xhr.send(null);\n        }\n\n        return rv; // undefined if async, true if successful, false if unsuccessful\n      },\n      // end keyStoreObj.load\n      listener: function listener(p_e) {\n        // this = keyStoreObj, p_e = event\n        var xhr = p_e.target;\n\n        if (xhr.readyState == 4) {\n          // ready\n          if (xhr.status == 200) {\n            // success\n            this.handler(xhr.response);\n          } else {\n            // failure: not handled by errorListener? not 404\n            this.errorListener(xhr, p_e);\n          }\n        } // else not ready\n\n\n        return false;\n      },\n      // end keyStoreObj.listener\n      handler: function handler(p_response) {\n        try {\n          var key = CryptoJS.enc.Hex.parse(this.key);\n          var iv = CryptoJS.enc.Hex.parse('00000000000000000000000000000000');\n          var cipherText = CryptoJS.enc.Base64.parse(p_response.replace(/[\\r\\n]/g, \"\"));\n          var decrypted = CryptoJS.AES.decrypt({\n            ciphertext: cipherText,\n            salt: \"\"\n          }, key, {\n            iv: iv\n          });\n          this.keyStore = String(decrypted.toString(CryptoJS.enc.Utf8));\n        } catch (e) {\n          this.keyStore = \"\";\n        }\n\n        if (this.keyStore.indexOf('receiverKeyStore1') >= 0) {\n          // valid key store\n          this.reason = 0;\n          if (this.log) this.log(\"keyStore loaded and valid\");\n\n          if (this.onSuccess) {\n            this.onSuccess(this);\n          }\n        } else {\n          // bad key store\n          this.reason = 2; // invalid keyStore was loaded\n\n          if (this.log) this.log(\"keyStore loaded but was invalid\");\n\n          if (this.onFailure) {\n            this.onFailure(this);\n          }\n        }\n\n        return !this.reason; // true on success\n      },\n      // end keyStoreObj.handler\n      errorListener: function errorListener(p_xhr, p_e) {\n        this.reason = 1; // load error\n\n        this.status = p_xhr.status; // insight into why it failed\n\n        if (this.log) this.log(\"keyStore: \" + p_xhr.url + \" \" + (p_xhr.status == 0 ? \"connection refused\" : p_xhr.statusText));\n\n        if (this.onFailure) {\n          this.onFailure(this);\n        }\n      } // end keyStoreObj.errorListener\n\n    };\n  }\n}(this); //rcvr.js\n//rcvr.js - standalone multicast receiver detection/connection object\n// - requires keystore.js\n\n(window['RampVersion'] || (window['RampVersion'] = {}))['rcvr.js'] = \"$Id$ $Change$ $Revision$ $DateTime$\"; // first try: r = new Receiver(param);\n// second try: r.start();\n// second try with new maddr: r.setMaddr(maddr); r.start();\n\nfunction Receiver(param) {\n  this.index = Receiver.unique++;\n  var p = param || {};\n  this.verbose = Receiver.Settings.verbose;\n  this.boundListener = this.statusListener.bind(this);\n  this.maddr = null; //p.maddr || p.multicastAddress || '-1'; //239.0.0.1';\n\n  this.keyStoreUri = Receiver.Settings.keyStoreUri;\n  this.keyStoreKey = Receiver.Settings.keyStoreKey;\n  this.streamKey = Receiver.Settings.streamKey;\n  this.multiStream = Receiver.Settings.multiStream;\n  this.nPings = 0;\n  this.time0 = 0;\n  this.lastState = -1;\n  this.lastAction = null;\n  this.lastReason = null;\n  this.lastSegments = 0;\n  this.maxState = 0;\n  this.nRestarts = 0;\n  this.params = Receiver.assign({}, Receiver.Params); // set defaults\n\n  this.params.multicastAddress = Receiver.Settings.maddr;\n  this.params.receiverKeyStore = null;\n  this.options = Receiver.assign({}, Receiver.Options); // callbacks may be set directly, but not through params\n\n  this.onStatus = p.onStatus;\n  this.onStateChange = p.onStateChange;\n  this.onReady = p.onReady;\n  this.onError = p.onError;\n  this.onPGReady = p.onPGReady; // explicit success acquiring program guide\n\n  this.onDone = p.onDone;\n  this.setParams(p);\n} // end Receiver constructor\n\n\nReceiver.unique = 0;\nReceiver.useProtocol = location.protocol == 'https:' ? 'https:' : 'http:';\nReceiver.Callbacks = {\n  onStatus: null,\n  onStateChange: null,\n  onReady: null,\n  onError: null,\n  onPGReady: null,\n  onDone: null\n};\nReceiver.Settings = {\n  // defaults\n  protocol: Receiver.useProtocol,\n  host: Receiver.useProtocol == 'https:' ? 'ramp-demo.multicast-receiver-altitudecdn.net' : '127.0.0.1',\n  port: Receiver.useProtocol == 'https:' ? 12350 : 12345,\n  verbose: false,\n  // can also be a callback\n  maddr: '-1',\n  // '-1' means skip receiver, '0' means try program guide, otherwise expects a real multicast address or resolvable name\n  keyStoreUri: 'default',\n  keyStoreKey: 'default',\n  streamKey: \"\",\n  // if set, look for streamKey in program guide\n  multiStream: false // true means try to start all program guide entries that match streamKey \n\n};\nReceiver.Params = {\n  // defaults\n  multicastAddress: '0',\n  senderSubjectDNSuffix: \"OU=Ramp Multicast Engine Portal,O=Ramp Holdings Inc,L=Boston,ST=MA,C=US\",\n  diagnosticsServer: \"use_sender:18000\",\n  diagnosticsIntervalMs: 15000,\n  bufferMs: 1000,\n  nativeMode: false,\n  dvrDurationMs: 900000,\n  dontOutputDiscontinuitySequence: false,\n  resetDvrOnStreamSwap: true,\n  maintainTimeline: false // non-string boolean would break older one-click receivers\n  //receiverKeyStore added later...\n\n};\nReceiver.Options = {\n  // defaults\n  minSegments: 3,\n  // minimum number of segments to receive before triggering Ready\n  ignoreReady: false,\n  // ignore the receiver readyForPlayer flag (for fewer than 3 segments, usually)\n  monitorStatus: false,\n  // continue to monitor status after Ready is triggered\n  pingTimeMs: 1000,\n  // time between status pings\n  nSegmentPings: 30,\n  // (state 3) number of times to check for enough segments or ready, 0 means infinite\n  maxSegmentTimeMs: 0,\n  // (state 3) amount of time to check for enough segments or ready, 0 means forever\n  maxTime0Ms: 5000,\n  // (state 3) amount of time to allow 0 bytes received, 0 means forever\n  maxTime1Ms: 15000,\n  // (state 3) amount of time to allow 0 segments received, 0 means forever\n  nStartPings: 1,\n  // (state 2) number of times to check that start has completed, 0 means infinite (>0 will allow for a restart attempt)\n  maxStartTimeMs: 0,\n  // (state 2) amount of time to check that start has completed, 0 means forever\n  nRunPings: 2,\n  // (state 1) number of times to check that the receiver is running, 0 means infinite\n  maxRunTimeMs: 0,\n  // (state 1) amount of time to check that the receiver is running, 0 means forever\n  nFailPings: 5,\n  // (state 0) number of times to check for a valid response from the receiver, 0 means infinite\n  maxFailTimeMs: 0,\n  // (state 0) amount of time to check for a valid response from the receiver, 0 means forever\n  nInitPings: 2,\n  // (state 0) like nFailPings but for the initial detection\n  maxInitTimeMs: 0,\n  // (state 0) like maxFailTime but for the initial detection\n  restartTries: 1,\n  // consecutive number of times to attempt to restart the receiver after a failure\n  timeoutMs: 0 // XHR timeout when contacting receiver for status or start\n\n};\n\nReceiver.assign = function () {\n  var dst = arguments[0];\n  var i, j;\n\n  for (i = 1; i < arguments.length; i++) {\n    for (j in arguments[i]) {\n      dst[j] = arguments[i][j];\n    }\n  }\n\n  return dst;\n};\n\nReceiver.prototype = {\n  setParams: function setParams(param, forceStart) {\n    // forceStart true will cause start to be sent regardless of parametere changes\n    var i,\n        j,\n        p = param || {};\n    var firstPass = this.params.receiverKeyStore == null; // Settings\n\n    if (firstPass || typeof p.verbose != 'undefined' && p.verbose !== this.verbose) {\n      if (typeof p.verbose == 'function') {\n        this.verbose = true;\n        this.logger = p.verbose;\n      } else {\n        this.verbose = !!p.verbose;\n        this.logger = console.log.bind(console);\n      }\n    }\n\n    if (firstPass || typeof p.protocol != 'undefined' && p.protocol != this.protocol || typeof p.host != 'undefined' && p.host !== this.host || typeof p.port != 'undefined' && p.port !== this.port) {\n      // host or port or both have changed\n      if (p.protocol) this.protocol = p.protocol;else if (typeof p.protocol != 'undefined' || !this.protocol) this.protocol = Receiver.Settings.protocol; //else keep this.protocol\n\n      if (p.host) this.host = p.host;else if (typeof p.host != 'undefined' || !this.host) this.host = Receiver.Settings.host; //else keep this.host\n\n      if (p.port) this.port = p.port;else if (typeof p.port != 'undefined' || !this.port) this.port = Receiver.Settings.port; //else keep this.port\n\n      this.url = (this.host.match(/^(?:https?):\\/\\//) ? \"\" : this.protocol + '//') + this.host + ':' + this.port; // protocol embedded in host will override the protocol setting\n    }\n\n    if (firstPass || 'streamKey' in p && p.streamKey !== this.streamKey) {\n      this.streamKey = p.streamKey;\n      forceStart = !firstPass;\n    }\n\n    if (firstPass || 'multiStream' in p && p.multiStream !== this.multiStream) {\n      this.multiStream = p.multiStream;\n      forceStart = !firstPass;\n    } // Receiver Params and Options and Callbacks\n\n\n    var c = [0, 0, 0]; // changes\n\n    for (i in p) {\n      if (i in Receiver.Callbacks) {\n        // callback\n        if (p[i] !== this[i]) {\n          this[i] = typeof p[i] == 'function' ? p[i] : Receiver.Callbacks[i];\n          c[2]++;\n        }\n\n        continue;\n      }\n\n      if (i in Receiver.Params) {\n        if (p[i] !== this.params[i]) {\n          switch (_typeof(Receiver.Params[i])) {\n            case 'boolean':\n              // undefined or null will reset \n              this.params[i] = p[i] != undefined ? !!p[i] : Receiver.Params[i];\n              c[0]++;\n              break;\n\n            case 'number':\n              this.params[i] = typeof p[i] == 'number' ? p[i] : Receiver.Params[i]; // Yes, the receiver requires number parameters to be strings! see sendStart\n\n              c[0]++;\n              break;\n\n            case 'string':\n              // empty string,0,undef,null will reset\n              this.params[i] = p[i] || Receiver.Params[i];\n              c[0]++;\n              break;\n          }\n        }\n\n        continue;\n      }\n\n      if (i in Receiver.Options) {\n        if (p[i] !== this.options[i]) {\n          switch (_typeof(Receiver.Options[i])) {\n            case 'boolean':\n              // undefined or null will reset \n              this.options[i] = p[i] != undefined ? !!p[i] : Receiver.Options[i]; // may be redundant during restart as statusUpdate triggers getStatus\n\n              if (i == 'monitorStatus' && !firstPass) this.statusUpdate(this.options[i]);\n              c[1]++;\n              break;\n\n            case 'number':\n              this.options[i] = typeof p[i] == 'number' ? p[i] : Receiver.Options[i];\n              c[1]++;\n              break;\n\n            case 'string':\n              // empty string,0,undef,null will reset\n              this.options[i] = p[i] || Receiver.Options[i];\n              c[1]++;\n              break;\n          }\n        }\n\n        continue;\n      }\n    }\n\n    if (this.maddr == null || 'maddr' in p || 'multicastAddress' in p) {\n      var a = (typeof p.maddr == 'number' ? p.maddr + \"\" : p.maddr) || (typeof p.multicastAddress == 'number' ? p.multicastAddress + \"\" : p.multicastAddress) || Receiver.Settings.maddr;\n\n      if (a != this.maddr) {\n        if (this.maddr != null) forceStart = true; // not first pass\n\n        this.setMaddr(a);\n      }\n    }\n\n    if (firstPass || 'keyStoreUri' in p && p.keyStoreUri != this.keyStoreUri || 'keyStoreKey' in p && p.keyStoreKey != this.keyStoreKey) {\n      // this may cause an automatic start if successful\n      //if (!firstPass) forceStart = true; // not first pass\n      var flag = this.setKeyStore(p.keyStoreUri || Receiver.Settings.keyStoreUri, p.keyStoreKey || Receiver.Settings.keyStoreKey); // flag is undefined when keystore load is async\n      // flag is true when keystore load is sync and successful (onSuccess called)\n      // flag is false when keystore load is sync and unsuccessful (onError called)\n      // in all cases the start should be handled from keyStoreSuccess or not at all\n\n      forceStart = false; // if a new start is needed, call again with forceStart set\n    } else if (c[0] > 0) // or force restart?\n      {\n        // forced restart when any of the receiver parameters change but the maddr does not\n        // maddr change will propagate to a new start if that address has not been used recently\n        // probably should force a new start in change of maddr anyway\n        forceStart = true; // never an issue on firstPass...\n      }\n\n    if (forceStart) this.start(true); // never on firstPass...\n\n    return !!forceStart;\n  },\n  // end Receiver.setParams\n  setMaddr: function setMaddr(maddr) {\n    // to change or initialize the multicast address\n    this.maddr = this.params.multicastAddress = \"\";\n    this.maxState = 0;\n    this.nPings = 0;\n\n    if (maddr == '0' || maddr === 0) {\n      // special indicator to fetch the program guide instead\n      this.maddrStr = \"\";\n      this.maddr = '0'; //this.getProgramGuide(this.onDone); // keystore is not needed for programguide... but it might be needed later\n    } else if (typeof maddr != 'string' || maddr == '-1') // ||\n      //\t\t (!maddr.match(/(?:\\d{1,3}(?:\\.\\d{1,3}){3})/) && // general IPv4\n      //\t\t  !maddr.match(/^\\[?([0-9A-Fa-f]*?:[0-9A-Fa-f]*?:[^\\]\\*$]*)(?:\\]:([\\d]+))?/))) // close to IPv6 (two or more colons)\n      // could also resolvable name...\n      {\n        // not a reasonable address, ignore\n        this.maddr = this.maddrStr = \"\";\n      } else {\n      this.maddrStr = 'maddr=' + maddr + '&';\n      this.maddr = this.params.multicastAddress = maddr;\n    }\n  },\n  // end Receiver.setMaddr\n  setKeyStore: function setKeyStore(uri, key) {\n    // to change or initialize the keystore and call start\n    if (!this.keyStore) {\n      this.keyStore = new window.KeyStoreObj(uri, key);\n    } else {\n      this.keyStore.setUriKey(uri, key);\n    }\n\n    return this.keyStore.load(this.keyStoreSuccess.bind(this), this.keyStoreError.bind(this), this.verbose && this.logger);\n  },\n  // end Receiver.setKeyStore\n  keyStoreSuccess: function keyStoreSuccess(ks) {\n    this.params.receiverKeyStore = ks.keyStore;\n    this.start();\n  },\n  // end Receiver.keyStoreSuccess\n  keyStoreError: function keyStoreError() {\n    this.verbose && this.logger('Receiver[' + this.index + ']: failed to load key store');\n    var o = {\n      state: 0,\n      action: 'fail',\n      reason: 'keystore'\n    };\n    this.obj = o;\n    this.onStateChange && this.onStateChange(this, o);\n    this.onError && this.onError(this, o);\n    this.onDone && this.onDone(this, o);\n  },\n  // end Receiver.keyStoreError\n  getAddressEntry: function getAddressEntry(status) {\n    // this simple method only works for status responses but not start responses\n    if (this.maddrStr) {\n      // fail when trying for program guide\n      var addrEntry = status && status.addresses || {};\n      var k;\n\n      for (k in addrEntry) {\n        if (k) break;\n      }\n\n      return addrEntry[k]; // object or undefined\n    } else return undefined;\n  },\n  // end Receiver.getAddressEntry\n  getStatus: function getStatus(done, success, failure, maddrOverride) {\n    var maddrStr = typeof maddrOverride == 'string' ? maddrOverride ? 'maddr=' + maddrOverride + '&' : \"\" : this.maddrStr;\n    var xhr = new XMLHttpRequest();\n    xhr.addEventListener('load', this.boundListener, false);\n    xhr.addEventListener('error', this.boundListener, false);\n    xhr.addEventListener('abort', this.boundListener, false);\n    xhr.addEventListener('timeout', this.boundListener, false);\n    xhr.open('get', this.url + '/rme/status?' + maddrStr + '_=' + Date.now(), true);\n    xhr.timeout = this.options.timeoutMs;\n    xhr.data = {\n      onDone: done,\n      onSuccess: success,\n      onFailure: failure\n    };\n    xhr.send(null);\n    return false;\n  },\n  // end Receiver.getStatus\n  getProgramGuide: function getProgramGuide(callback) {\n    var xhr = new XMLHttpRequest();\n    xhr.addEventListener('load', this.boundListener, false);\n    xhr.addEventListener('error', this.boundListener, false);\n    xhr.addEventListener('abort', this.boundListener, false);\n    xhr.addEventListener('timeout', this.boundListener, false);\n    xhr.open('get', this.url + '/rme/programGuide?' + '_=' + Date.now(), true);\n    xhr.timeout = this.options.timeoutMs;\n    xhr.data = {\n      onDone: callback\n    };\n    xhr.send(null);\n    return false;\n  },\n  // end Receiver.getProgramGuide\n  programGuideListener: function programGuideListener(type, response) {\n    this.programGuide = response;\n\n    if (window.location.search.indexOf('testPG') > 0) {\n      if (response && response.programs) {\n        response.programs = Receiver.testProgramGuide.programs.concat(response.programs);\n      } else {\n        this.programGuide = response = Receiver.testProgramGuide;\n      }\n    }\n\n    ; // reason 0: no program guide because there is no receiver ... never gets here... probably should\n    // reason 1: no program guide because it is not configured: response = {}\n    // reason 2: empty program guide: response {multicastAddress,programs:[]}\n    // reason 3: populated program guide: response {...,programs:[...]}\n\n    var o = {\n      state: 5,\n      action: 'guide',\n      reason: type == 'load' ? 'success' : 'fail',\n      type: type,\n      resp: response\n    };\n    o.reason = response ? response.programs ? response.programs.length ? 'success' : 'empty' : 'config' : 'receiver';\n    this.obj = o;\n    this.onStateChange && this.onStateChange(this, o);\n    this.lastState = o.state;\n    this.lastAction = o.action;\n    this.lastReason = o.reason; // most likely the only change\n\n    /*always*/\n\n    this.onPGReady && this.onPGReady(this, o);\n\n    if (this.streamKey && // *set or true) asking to start automatically from program guide\n    o.reason == 'success') // got a program guide that is not empty\n      {\n        // check for first matching connection that succeeds\n        this.pgh = new Receiver.ProgramGuideHandler(this, 0); // current receiver, timeout to override options\n        // see this.programGuideFinal below\n      } else {\n      if (o.reason == 'config' || o.reason == 'receiver') this.onError && this.onError(this, o);\n      this.onDone && this.onDone(this, o);\n    }\n  },\n  // end Receiver.programGuideListener\n  programGuideFinal: function programGuideFinal(maddr) {\n    delete this.pgh; // clean up that which is no longer needed\n\n    if (maddr) {\n      // start again with maddr set\n      this.setMaddr(maddr);\n      this.start(true); // may not be necessary to forceStart\n    } else {\n      // end process with error and done\n      var o = {\n        state: 5,\n        action: 'guide',\n        reason: 'program'\n      };\n      this.onError && this.onError(this, o);\n      this.onDone && this.onDone(this, o);\n    }\n  },\n  // end Receiver.programGuideFinal\n  sendStart: function sendStart(callback) {\n    this.lastState = 2; // starting... will cause onReady to be called again in case of restart\n\n    var xhr = new XMLHttpRequest();\n    xhr.addEventListener('load', this.boundListener, false);\n    xhr.addEventListener('error', this.boundListener, false);\n    xhr.addEventListener('abort', this.boundListener, false);\n    xhr.addEventListener('timeout', this.boundListener, false);\n    xhr.open('post', this.url + '/rme/start', true); //?_='+Date.now(), true);\n\n    xhr.timeout = this.options.timeoutMs;\n    xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded; charset=UTF-8\"); // required by Windows Native Receiver\n\n    xhr.data = {\n      wasStart: true,\n      onDone: callback\n    }; // numbers must be strings in the receiver!!!\n\n    var i,\n        params = {};\n\n    for (i in this.params) {\n      params[i] = this.params[i];\n      if (typeof params[i] == 'number') params[i] += \"\";\n    }\n\n    xhr.send(JSON.stringify(params));\n    return false;\n  },\n  // end Receiver.sendStart\n  statusListener: function statusListener(event) {\n    var xhr = event.target;\n    var data = xhr.data;\n    var resp;\n\n    if (event.type == 'load') {\n      try {\n        resp = JSON.parse(xhr.response);\n      } catch (e) {}\n\n      if (resp) {\n        data.onSuccess && data.onSuccess(event.type, resp);\n      } else {\n        // success but bad JSON\n        data.onFailure && data.onFailure(event.type, xhr.response);\n      }\n    } else {\n      // failure: error, timeout, abort\n      data.onFailure && data.onFailure(event.type, xhr.response);\n    }\n\n    data.onDone && data.onDone(event.type, resp || xhr.response);\n    return false;\n  },\n  // end Receiver.statusListener\n  startListener: function startListener(type, response) {\n    // start response contains all active addresses, get status to filter this.maddr\n    this.getStatus(this.pingListener.bind(this));\n  },\n  // end Receiver.startListener\n  start: function start(forceStart) {\n    this.pingTimer && (clearTimeout(this.pingTimer), this.pingTimer = null);\n\n    if (this.maddr) {\n      if (forceStart && this.params.multicastAddress && this.params.multicastAddress != '0') {\n        this.sendStart(this.startListener.bind(this));\n      } else {\n        this.getStatus(this.pingListener.bind(this));\n      }\n    } else {\n      // fail immediately as there is nothing to do\n      // it is possible that these are called during construction!!!\n      var o = {\n        state: 0,\n        action: 'fail',\n        reason: 'maddr'\n      };\n      this.obj = o;\n      this.onStateChange && this.onStateChange(this, o);\n      this.onError && this.onError(this, o);\n      this.onDone && this.onDone(this, o);\n    }\n  },\n  // end Receiver.start\n  pingListener: function pingListener(type, response) {\n    this.nPings++;\n    var elapsed = Date.now() - this.time0;\n    var o = {\n      state: 0,\n      action: null,\n      reason: null,\n      addrEntry: this.getAddressEntry(response),\n      resp: response\n    }; // raw status before processing\n\n    this.onStatus && this.onStatus(this, {\n      type: type,\n      resp: response,\n      addrEntry: o.addrEntry\n    });\n\n    if (type == 'load' && _typeof(response) == 'object') {\n      // possible states:\n      // . not running: response.result!='RME Running'\n      // . . retry for up to A seconds/tries\n      // . running but not started: !addrEntry\n      // . . send start, set flag\n      // . . ping for up to B seconds/tries, optionally retry start after 10 or more seconds\n      // . running and started: addrEntry\n      // . . running, started, but not ready\n      // . . . ping for 0 bytes for up to C seconds/tries\n      // . . . ping for S segments for up to D seconds/tries\n      // . . running, started, and ready: addrEntry.segmentsInPlaylist>=S\n      if (response.result == 'RME Running') {\n        // good response and running\n        if (o.addrEntry) {\n          // running and multicast is started\n          if ((o.addrEntry.readyForPlayer || this.options.ignoreReady) && o.addrEntry.segmentsInPlaylist >= this.options.minSegments) {\n            // multicast has seen the minimum number of segments\n            // multicast is ready for the player\n            o.state = 4; //'ready'\n            // if monitoring: ping again in this.options.pingTimeMs\n\n            o.action = this.options.monitorStatus ? 'ping' : 'stop';\n            o.reason = 'success';\n\n            if (o.state != this.lastState) {\n              o.url = o.addrEntry.multicastUrl;\n              this.obj = o;\n              this.onReady && this.onReady(this, o.addrEntry.multicastUrl, o.addrEntry.format);\n              this.nPings = 0;\n              this.time0 = Date.now();\n              elapsed = 0;\n              this.nRestarts = 0; // clear consecutive restart count\n\n              this.sendReady = false;\n            }\n          } else {\n            // multicast has not yet seen the minimum number of segments or is not ready for player\n            // ping again in this.options.pingTimeMs\n            // allow up to this.options.nSegmentPings\n            // stop if still 0 bytes after this.options.maxTime0Ms\n            // stop if no first segment after this.options.maxTime1Ms\n            o.state = 3; //'segments'\n\n            if (o.state != this.lastState) {\n              this.nPings = 0;\n              this.time0 = Date.now();\n              elapsed = 0;\n            }\n\n            if (o.addrEntry.totalBytesReceived == 0 && this.options.maxTime0Ms > 0 && elapsed >= this.options.maxTime0Ms) {\n              // stop and fail or restart: 0 bytes for too long\n              o.action = 'fail';\n              o.reason = 'maxTime0';\n            } else if (o.addrEntry.segmentsInPlaylist == 0 && this.options.maxTime1Ms > 0 && elapsed >= this.options.maxTime1Ms) {\n              // stop and fail or restart: 0 segments for too long\n              o.action = 'fail';\n              o.reason = 'maxTime1';\n            } else if (this.options.nSegmentPings > 0 && this.nPings >= this.options.nSegmentPings || this.options.maxSegmentTimeMs > 0 && elapsed >= this.options.maxSegmentTimeMs) {\n              // stop and fail or restart: too many pings or too long without enough segments or readyForPlayer\n              o.action = 'fail';\n              o.reason = 'segments';\n            } else {\n              o.action = 'ping';\n              o.reason = 'segments';\n            }\n          }\n        } else {\n          // running but multicast has not started\n          // if start has not been tried or expired then send start\n          // else ping again in this.options.pingTimeMs\n          // allow up to this.options.nStartPings\n          // stop if not started after this.options.maxStartTimeMs\n          if (!this.maddrStr) {\n            // can not start, get program guide instead\n            o.state = 5;\n            o.action = 'guide';\n            o.reason = 'guide';\n          } else {\n            o.state = 2; //'starting'\n\n            if (o.state != this.lastState) {\n              this.nPings = 0;\n              this.time0 = Date.now();\n              elapsed = 0;\n            }\n\n            if (o.state > this.maxState) {\n              // send first start\n              o.action = 'start';\n              o.reason = o.state > this.maxState ? 'first' : 'restart';\n            } else if (this.options.nStartPings > 0 && this.nPings >= this.options.nStartPings || this.options.maxStartTimeMs > 0 && elapsed >= this.options.maxStartTimeMs) {\n              // stop, fail or restart\n              o.action = 'fail';\n              o.reason = 'start';\n            } else {\n              o.action = 'ping';\n              o.reason = 'start';\n            }\n          }\n        }\n      } else {\n        // good response but not running\n        // ping again in this.options.pingTimeMs\n        // allow up to this.options.nRunPings\n        // stop if not running after this.options.maxRunTimeMs\n        o.state = 1; //'not running'\n\n        if (o.state != this.lastState) {\n          this.nPings = 0;\n          this.time0 = Date.now();\n          elapsed = 0;\n        }\n\n        o.reason = 'run';\n\n        if (this.options.nRunPings > 0 && this.nPings >= this.options.nRunPings || this.options.maxRunTimeMs > 0 && elapsed >= this.options.maxRunTimeMs) {\n          // stop, fail\n          o.action = 'fail';\n        } else {\n          o.action = 'ping';\n        }\n      }\n    } else {\n      // possible states:\n      // no response (error,timeout,abort)\n      // bad response (load)\n      // previous state \t\t\t\t\t\taction\n      // . no or bad response\t\t\t\t\t<nPings: try again\n      //\t\t\t\t\t\t\t\t\t\t==nPings, fail\n      // . any state with a valid response\tnow no or bad response\n      //\t\t\t\t\t\t\t\t\t\teither: keep pinging for X tries before failing\n      //\t\t\t\t\t\t\t\t\t\tor: fail immediately\n      //\t\t\t\t\t\t\t\t\t\twith this.option to attept restart\n      // ping again in this.options.pingTimeMs\n      // allow up to this.options.nFailPings or this.options.nInitPings\n      // stop if still failing after this.options.failTimeMs\n      o.state = 0; // 'failed'\n\n      if (o.state != this.lastState) {\n        this.nPings = 0;\n        this.time0 = Date.now();\n        elapsed = 0;\n      }\n\n      if (this.maxState == 0 && (this.options.nInitPings > 0 && this.nPings >= this.options.nInitPings || this.options.maxInitTimeMs > 0 && elapsed >= this.options.maxInitTimeMs) || this.maxState > 0 && (this.options.nFailPings > 0 && this.nPings >= this.options.nFailPings || this.options.maxFailTimeMs > 0 && elapsed >= this.options.maxFailTimeMs)) {\n        // stop, fail\n        o.action = 'fail';\n        o.reason = (this.maxState == 0 ? 'init ' : 'latent ') + type;\n      } else {\n        o.action = 'ping';\n        o.reason = 'response';\n      }\n    }\n\n    if (o.state != this.lastState || o.action != this.lastAction || o.reason != this.lastReason || o.reason == 'segments' && o.addrEntry.segmentsInPlaylist != this.lastSegments) {\n      // state change event\n      this.obj = o;\n      this.onStateChange && this.onStateChange(this, o);\n      this.lastState = o.state;\n      this.lastAction = o.action;\n      this.lastReason = o.reason;\n      o.reason == 'segments' && (this.lastSegments = o.addrEntry.segmentsInPlaylist);\n      if (o.state > this.maxState) this.maxState = o.state; //this.nPings = 0;\n      //this.time0 = Date.now();\n      // call done when detection is over and monitoring begins\n\n      if (o.state == 4 && o.action == 'ping' && this.onDone) this.onDone(this, o);\n    } // action one of: 'ping', 'fail', 'stop', 'start'\n\n\n    if (o.action == 'fail' && o.state > 1 && this.nRestarts < this.options.restartTries) {\n      // failure but receiver is at least running and there are some restart tries left\n      this.nRestarts++;\n      o.action = 'start';\n      this.obj = o;\n      this.onStateChange && this.onStateChange(this, o);\n      this.lastAction = o.action;\n    }\n\n    this.verbose && this.logger('Receiver[' + this.index + ']: state:' + o.state + ' action:' + o.action + ' reason:' + o.reason, o.addrEntry ? o.addrEntry.totalBytesReceived + ' bytes, ' + o.addrEntry.segmentsInPlaylist + ' segments' : \"\");\n\n    switch (o.action) {\n      case 'ping':\n        this.pingTimer = setTimeout(this.start.bind(this), this.options.pingTimeMs); // this.getStatus(this.pingListener.bind(this));\n\n        break;\n\n      case 'start':\n        this.sendStart(this.startListener.bind(this));\n        break;\n\n      case 'guide':\n        this.getProgramGuide(this.programGuideListener.bind(this));\n        break;\n\n      case 'fail':\n        if (!this.maddrStr) {\n          this.programGuideListener(); // finish program guide part instead?\n\n          break;\n        }\n\n        this.obj = o;\n        this.onError && this.onError(this, o);\n\n      default:\n        this.onDone && this.onDone(this, o);\n        break;\n    }\n\n    return false;\n  },\n  // end Receiver.pingListener\n  statusUpdate: function statusUpdate(flag) {\n    // no flag: toggle, true flag: turn on, false flag: turn off\n    // any other value will cause status to be hit just once\n    this.options.monitorStatus = typeof flag == 'undefined' ? !this.options.monitorStatus : typeof flag == 'boolean' ? flag : this.options.monitorStatus;\n    if (!this.pingTimer && this.options.monitorStatus) this.pingTimer = setTimeout(this.start.bind(this), this.options.pingTimeMs);\n    return this.options.monitorStatus;\n  },\n  // end Receiver.statusUpdate\n  fullStatus: function fullStatus(onDone, onSuccess, onFailure) {\n    // get status without specifying a multicast address to get everything the receiver is doing\n    this.getStatus(onDone, onSuccess, onFailure, \"\");\n  },\n  // end Receiver.fullStatus\n  interpretResponse: function interpretResponse(obj) {\n    // where obj is the second parameter to onDone\n    var rv;\n\n    if (obj && obj.state >= 0 && obj.state < Receiver.states.length) {\n      rv = Receiver.states[obj.state];\n      rv = rv[obj.action] && rv[obj.action][obj.reason.replace(/ .*/, \"\")] || \"\";\n\n      if (obj.state == 3 && rv.indexOf('SEG') >= 0) {\n        var s = rv.split('SEG');\n        rv = s[0] + obj.addrEntry.segmentsInPlaylist + s[1] + this.options.minSegments + s[2];\n      }\n    }\n\n    return rv;\n  } // end Receiver.prototype.interpretResponse\n\n}; // end Receiver.prototype\n\nReceiver.states = [// index by state, check for action, check for reason\n{\n  // state = 0: detection\n  core: 'not detected',\n  fail: {\n    keystore: 'failed to load keystore',\n    maddr: 'did not attempt to detect receiver',\n    init: 'failed to detect receiver during initial attempt',\n    latent: 'failed to detect receiver after previous detection',\n    other: 'failed to detect receiver'\n  },\n  ping: {\n    response: 'receiver was not detected on this try'\n  }\n}, {\n  // state = 1: detected but not running\n  core: 'detected but not running',\n  fail: {\n    run: 'receiver was detected but is not running'\n  },\n  ping: {\n    run: 'receiver was detected but is not yet running'\n  }\n}, {\n  // state = 2: running but not started\n  core: 'running but not started',\n  fail: {\n    start: 'receiver has failed to start'\n  },\n  start: {\n    first: 'starting the receiver for the first time',\n    restart: 'restarting the receiver',\n    // never\n    start: 'restarting the receiver'\n  },\n  ping: {\n    start: 'starting the receiver'\n  }\n}, {\n  // state = 3: started but not ready\n  core: 'started but not ready',\n  fail: {\n    segments: 'receiver did not receive enough segments within supplied limits',\n    maxTime0: 'receiver did not receive any bytes within supplied limits',\n    maxTime1: 'receiver did not receive any segments within supplied limits'\n  },\n  start: {\n    segments: 'receiver has not received enough segments within supplied limits, restarting',\n    maxTime0: 'receiver has not received any bytes within supplied limits, restarting',\n    maxTime1: 'receiver has not received any segments within supplied limits, restarting'\n  },\n  ping: {\n    segments: 'receiver has received SEG out of SEG required segments'\n  }\n}, {\n  // state = 4: ready\n  core: 'ready',\n  ping: {\n    success: 'receiver is ready, monitoring status'\n  },\n  stop: {\n    success: 'receiver is ready, monitoring has stopped'\n  }\n}, {\n  // state = 5: program guide\n  core: 'program guide',\n  guide: {\n    guide: 'receiver is checking for a program guide',\n    fail: 'receiver has failed to supply a program guide',\n    success: 'receiver has supplied a program guide',\n    empty: 'program guide contains no programs',\n    config: 'program guide feature is not configured',\n    receiver: 'no program guide, receiver was not detected',\n    program: 'no matching program was found'\n  }\n}];\nReceiver.testProgramGuide = {\n  multicastAddress: \"239.11.0.1:12345/0\",\n  programs: [{\n    guid: 'test',\n    multicastAddress: '239.55.0.20/64'\n  }, {\n    guid: 'test',\n    multicastAddress: '239.55.0.10/64'\n  }, {\n    guid: 'test',\n    multicastAddress: '239.55.0.1/64'\n  }, {\n    guid: 'test',\n    multicastAddress: '239.11.22.33/64'\n  }]\n};\n\nReceiver.ProgramGuideHandler = function (rcvr, timeoutMs) {\n  // expects that rcvr has programGuide and maddr=0 and streamKey is set or true\n  // calls back to parent rcvr.programGuideFinal when complete\n  this.rcvr = rcvr;\n  this.timeoutMs = timeoutMs || 0; // 0 wait forever, otherwise Msec from last response\n\n  this.maddr = []; // get count first\n\n  this.instance = []; // new receiver instances as needed\n\n  this.done = false;\n  this.expected = 0;\n  this.completed = 0; // parse program guide\n\n  var i,\n      p,\n      found,\n      pg = rcvr.programGuide;\n\n  if (pg && pg.programs.length) {\n    p = pg.programs;\n\n    for (i = 0; i < p.length; i++) {\n      found = false; // program entries differ by type\n      // - legacy pattern-triggered program guide entry\n      // - - programType = 0\n      // - - triggerPattern has matchable string\n      // - legacy network readiness program guide entry\n      // - - programType = 1\n      // - - guid has matchable string\n      // - generic program guide entry\n      // - - may have programTypeName but no programType field\n      // - - guid has a matchable string\n      // - - triggerRegExp has another matchable string\n      // - key server entry\n      // - - special case, not a real program\n      // - - indicated by multicastAddress=='!global' and keys field\n\n      if (rcvr.streamKey === true || rcvr.streamKey === 'true') {\n        // all programs are eligible when streamKey is simply true\n        found = 'multicastAddress' in p[i] && p[i].multicastAddress != '!global';\n      } else if (p[i].programType === 0) // Pattern-triggered legacy\n        {\n          // look for streamKey in p[i].triggerPattern\n          found = 'triggerPattern' in p[i] && p[i].triggerPattern.indexOf(rcvr.streamKey) >= 0;\n        } else if (p[i].programType === 1) // NRT legacy\n        {\n          // look for streamKey as guid\n          found = 'guid' in p[i] && p[i].guid == rcvr.streamKey;\n        } else // generic program guide\n        {\n          // look for streamKey as guid or in p[i].triggerRegExp\n          //if (p[i].programTypeName==\"Microsoft Stream\")\n          // which should have precedence?\n          found = 'guid' in p[i] && p[i].guid == rcvr.streamKey || 'triggerRegExp' in p[i] && p[i].triggerRegExp.indexOf(rcvr.streamKey) >= 0;\n        }\n\n      if (found && 'multicastAddress' in p[i]) {\n        // found a matching entry\n        // Microsoft Stream: p[i].manifests && p[i].manifests.length suggests stream is running and does not need to be triggered in Altimeter\n        if (this.maddr.length == 0 || rcvr.multiStream) {\n          // first match or trying multiple matches\n          this.maddr.push(p[i].multicastAddress.replace(/\\/\\d*/, \"\"));\n        }\n      }\n    }\n\n    this.expected = this.maddr.length;\n\n    for (i = 0; i < this.maddr.length; i++) {\n      this.addInstance(rcvr, this.maddr[i]); // starts immediately\n    }\n  }\n\n  if (this.instance.length == 0) setTimeout(this.final.bind(this), 100);else if (this.timeoutMs) this.timer = setTimeout(this.final.bind(this), this.timeoutMs); // override timeout\n  // else only use async events \n}; // end programGuideHandler constructor\n\n\nReceiver.ProgramGuideHandler.prototype = {\n  addInstance: function addInstance(rcvr, maddr) {\n    var param = {\n      protocol: rcvr.protocol,\n      host: rcvr.host,\n      port: rcvr.port,\n      verbose: rcvr.verbose ? rcvr.logger || rcvr.verbose : false,\n      maddr: maddr,\n      keyStoreUri: rcvr.keyStoreUri,\n      keyStoreKey: rcvr.keyStoreKey,\n      multiStream: false,\n      streamKey: null,\n      options: {}\n    };\n    Receiver.assign(param.options, rcvr.options);\n    param.onDone = this.instanceDone.bind(this, this.instance.length);\n    this.instance.push(new Receiver(param));\n  },\n  // end addInstance\n  instanceDone: function instanceDone(index, rcvr, obj) {\n    if (this.timer) {\n      clearTimeout(this.timer);\n      this.timer = null;\n    }\n\n    this.completed++;\n    this.instance[index]._done = true;\n\n    if (!this.done) {\n      if (obj.state == 4) {\n        // first success wins\n        this.final(index);\n      } else if (this.completed >= this.expected) {\n        // no more to wait for and none succeeded\n        this.final();\n      } else if (this.timeoutMs) {\n        // restart override timer\n        this.timer = setTimeout(this.final.bind(this), this.timeoutMs);\n      }\n    }\n  },\n  // end instanceDone\n  final: function final(index) {\n    this.done = true; // a successful multicast address or nothing\n\n    this.rcvr.programGuideFinal(typeof index == 'number' ? this.instance[index].params.multicastAddress : null);\n    var i, k;\n\n    for (i = 0; i < this.instance.length; i++) {\n      // stop remaining instances...\n      k = this.instance[i];\n\n      if (i != index && !k._done) {\n        k.maddr = \"\";\n        k.start();\n      }\n    }\n  } // end final\n\n}; //iptools.js\n// iptools.js\n\n(window['RampVersion'] || (window['RampVersion'] = {}))['iptools.js'] = \"$Id$ $Change$ $Revision$ $DateTime$\"; // IPTools: derived from node.js versions of ipaddr,ip6,range_check and tested but missing some features as compared to github version\n//https://github.com/whitequark/ipaddr.js/blob/master/lib/ipaddr.js\n\n!function () {\n  // 'this' is the context in which this function executes\n  var ctx = this,\n      ipt;\n\n  if (!ctx.IPTools) {\n    ctx.IPTools = {};\n  }\n\n  ipt = ctx.IPTools;\n\n  if (!ipt.ipaddr) {\n    var ipa = ipt.ipaddr = {};\n\n    ipa.matchCIDR = function (first, second, partSize, cidrBits) {\n      var part, shift;\n\n      if (first.length !== second.length) {\n        throw new Error(\"ipaddr: cannot match CIDR for objects with different lengths\");\n      }\n\n      part = 0;\n\n      while (cidrBits > 0) {\n        shift = partSize - cidrBits;\n\n        if (shift < 0) {\n          shift = 0;\n        }\n\n        if (first[part] >> shift !== second[part] >> shift) {\n          return false;\n        }\n\n        cidrBits -= partSize;\n        part += 1;\n      }\n\n      return true;\n    };\n\n    ipa.subnetMatch = function (address, rangeList, defaultName) {\n      var rangeName, rangeSubnets, subnet, _i, _len;\n\n      if (defaultName == null) {\n        defaultName = 'unicast';\n      }\n\n      for (rangeName in rangeList) {\n        rangeSubnets = rangeList[rangeName];\n\n        if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {\n          rangeSubnets = [rangeSubnets];\n        }\n\n        for (_i = 0, _len = rangeSubnets.length; _i < _len; _i++) {\n          subnet = rangeSubnets[_i]; //if (address.match.apply(address, subnet))\n\n          if (address.match(subnet)) {\n            return rangeName;\n          }\n        }\n      }\n\n      return defaultName;\n    };\n\n    ipa.IPv4 = function (octets) {\n      var octet, _i, _len;\n\n      if (octets.length !== 4) {\n        throw new Error(\"ipaddr: ipv4 octet count should be 4\");\n      }\n\n      for (_i = 0, _len = octets.length; _i < _len; _i++) {\n        octet = octets[_i];\n\n        if (!(0 <= octet && octet <= 255)) {\n          throw new Error(\"ipaddr: ipv4 octet should fit in 8 bits\");\n        }\n      }\n\n      this.octets = octets;\n    };\n\n    ipa.IPv4.prototype = {\n      kind: function kind() {\n        return 'ipv4';\n      },\n      toString: function toString() {\n        return this.octets.join(\".\");\n      },\n      toByteArray: function toByteArray() {\n        return this.octets.slice(0);\n      },\n      match: function match(other, cidrRange) {\n        var _ref;\n\n        if (cidrRange === void 0) {\n          _ref = other, other = _ref[0], cidrRange = _ref[1];\n        }\n\n        if (other.kind() !== 'ipv4') {\n          throw new Error(\"ipaddr: cannot match ipv4 address with non-ipv4 one\");\n        }\n\n        return ctx.IPTools.ipaddr.matchCIDR(this.octets, other.octets, 8, cidrRange);\n      },\n      range: function range() {\n        return ctx.IPTools.ipaddr.subnetMatch(this, ctx.IPTools.ipaddr.IPv4.SpecialRanges);\n      },\n      toIPv4MappedAddress: function toIPv4MappedAddress() {\n        return ctx.IPTools.ipaddr.IPv6.parse(\"::ffff:\" + this.toString());\n      },\n      prefixLengthFromSubnetMask: function prefixLengthFromSubnetMask() {\n        var cidr, i, octet, stop, zeros, zerotable, _i;\n\n        zerotable = {\n          0: 8,\n          128: 7,\n          192: 6,\n          224: 5,\n          240: 4,\n          248: 3,\n          252: 2,\n          254: 1,\n          255: 0\n        };\n        cidr = 0;\n        stop = false;\n\n        for (i = _i = 3; _i >= 0; i = _i += -1) {\n          octet = this.octets[i];\n\n          if (octet in zerotable) {\n            zeros = zerotable[octet];\n\n            if (stop && zeros !== 0) {\n              return null;\n            }\n\n            if (zeros !== 8) {\n              stop = true;\n            }\n\n            cidr += zeros;\n          } else {\n            return null;\n          }\n        }\n\n        return 32 - cidr;\n      }\n    };\n    ipa.IPv4.SpecialRanges = {\n      unspecified: [[new ipa.IPv4([0, 0, 0, 0]), 8]],\n      broadcast: [[new ipa.IPv4([255, 255, 255, 255]), 32]],\n      multicast: [[new ipa.IPv4([224, 0, 0, 0]), 4]],\n      linkLocal: [[new ipa.IPv4([169, 254, 0, 0]), 16]],\n      loopback: [[new ipa.IPv4([127, 0, 0, 0]), 8]],\n      \"private\": [[new ipa.IPv4([10, 0, 0, 0]), 8], [new ipa.IPv4([172, 16, 0, 0]), 12], [new ipa.IPv4([192, 168, 0, 0]), 16]],\n      reserved: [[new ipa.IPv4([192, 0, 0, 0]), 24], [new ipa.IPv4([192, 0, 2, 0]), 24], [new ipa.IPv4([192, 88, 99, 0]), 24], [new ipa.IPv4([198, 51, 100, 0]), 24], [new ipa.IPv4([203, 0, 113, 0]), 24], [new ipa.IPv4([240, 0, 0, 0]), 4]]\n    };\n    ipa.IPv4.Part = \"(0?\\\\d+|0x[a-f0-9]+)\";\n    ipa.IPv4.Regexes = {\n      fourOctet: new RegExp(\"^\" + ipa.IPv4.Part + \"\\\\.\" + ipa.IPv4.Part + \"\\\\.\" + ipa.IPv4.Part + \"\\\\.\" + ipa.IPv4.Part + \"$\", 'i'),\n      longValue: new RegExp(\"^\" + ipa.IPv4.Part + \"$\", 'i')\n    };\n\n    ipa.IPv4.parser = function (string) {\n      var match, parseIntAuto, part, shift, value;\n\n      parseIntAuto = function parseIntAuto(string) {\n        if (string[0] === \"0\" && string[1] !== \"x\") {\n          return parseInt(string, 8);\n        } else {\n          return parseInt(string);\n        }\n      };\n\n      if (match = string.match(ctx.IPTools.ipaddr.IPv4.Regexes.fourOctet)) {\n        return function () {\n          var _i, _len, _ref, _results;\n\n          _ref = match.slice(1, 6);\n          _results = [];\n\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            part = _ref[_i];\n\n            _results.push(parseIntAuto(part));\n          }\n\n          return _results;\n        }();\n      } else if (match = string.match(ctx.IPTools.ipaddr.IPv4.Regexes.longValue)) {\n        value = parseIntAuto(match[1]);\n\n        if (value > 0xffffffff || value < 0) {\n          throw new Error(\"ipaddr: address outside defined range\");\n        }\n\n        return function () {\n          var _i, _results;\n\n          _results = [];\n\n          for (shift = _i = 0; _i <= 24; shift = _i += 8) {\n            _results.push(value >> shift & 0xff);\n          }\n\n          return _results;\n        }().reverse();\n      } else {\n        return null;\n      }\n    };\n\n    ipa.IPv6 = function (parts) {\n      var i, part, _i, _j, _len, _ref;\n\n      if (parts.length === 16) {\n        this.parts = [];\n\n        for (i = _i = 0; _i <= 14; i = _i += 2) {\n          this.parts.push(parts[i] << 8 | parts[i + 1]);\n        }\n      } else if (parts.length === 8) {\n        this.parts = parts;\n      } else {\n        throw new Error(\"ipaddr: ipv6 part count should be 8 or 16\");\n      }\n\n      _ref = this.parts;\n\n      for (_j = 0, _len = _ref.length; _j < _len; _j++) {\n        part = _ref[_j];\n\n        if (!(0 <= part && part <= 0xffff)) {\n          throw new Error(\"ipaddr: ipv6 part should fit in 16 bits\");\n        }\n      }\n    };\n\n    ipa.IPv6.prototype = {\n      kind: function kind() {\n        return 'ipv6';\n      },\n      toString: function toString() {\n        var compactStringParts, part, pushPart, state, stringParts, _i, _len;\n\n        stringParts = function () {\n          var _i, _len, _ref, _results;\n\n          _ref = this.parts;\n          _results = [];\n\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            part = _ref[_i];\n\n            _results.push(part.toString(16));\n          }\n\n          return _results;\n        }.call(this);\n\n        compactStringParts = [];\n\n        pushPart = function pushPart(part) {\n          return compactStringParts.push(part);\n        };\n\n        state = 0;\n\n        for (_i = 0, _len = stringParts.length; _i < _len; _i++) {\n          part = stringParts[_i];\n\n          switch (state) {\n            case 0:\n              if (part === '0') {\n                pushPart('');\n              } else {\n                pushPart(part);\n              }\n\n              state = 1;\n              break;\n\n            case 1:\n              if (part === '0') {\n                state = 2;\n              } else {\n                pushPart(part);\n              }\n\n              break;\n\n            case 2:\n              if (part !== '0') {\n                pushPart('');\n                pushPart(part);\n                state = 3;\n              }\n\n              break;\n\n            case 3:\n              pushPart(part);\n          }\n        }\n\n        if (state === 2) {\n          pushPart('');\n          pushPart('');\n        }\n\n        return compactStringParts.join(\":\");\n      },\n      toByteArray: function toByteArray() {\n        var bytes, part, _i, _len, _ref;\n\n        bytes = [];\n        _ref = this.parts;\n\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          part = _ref[_i];\n          bytes.push(part >> 8);\n          bytes.push(part & 0xff);\n        }\n\n        return bytes;\n      },\n      toNormalizedString: function toNormalizedString() {\n        var part;\n        return function () {\n          var _i, _len, _ref, _results;\n\n          _ref = this.parts;\n          _results = [];\n\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            part = _ref[_i];\n\n            _results.push(part.toString(16));\n          }\n\n          return _results;\n        }.call(this).join(\":\");\n      },\n      match: function match(other, cidrRange) {\n        var _ref;\n\n        if (cidrRange === void 0) {\n          _ref = other, other = _ref[0], cidrRange = _ref[1];\n        }\n\n        if (other.kind() !== 'ipv6') {\n          throw new Error(\"ipaddr: cannot match ipv6 address with non-ipv6 one\");\n        }\n\n        return ctx.IPTools.ipaddr.matchCIDR(this.parts, other.parts, 16, cidrRange);\n      },\n      range: function range() {\n        return ctx.IPTools.ipaddr.subnetMatch(this, ctx.IPTools.ipaddr.IPv6.SpecialRanges);\n      },\n      isIPv4MappedAddress: function isIPv4MappedAddress() {\n        return this.range() === 'ipv4Mapped';\n      },\n      toIPv4Address: function toIPv4Address() {\n        var high, low, _ref;\n\n        if (!this.isIPv4MappedAddress()) {\n          throw new Error(\"ipaddr: trying to convert a generic ipv6 address to ipv4\");\n        }\n\n        _ref = this.parts.slice(-2), high = _ref[0], low = _ref[1];\n        return new ctx.IPTools.ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff]);\n      }\n    };\n    ipa.IPv6.SpecialRanges = {\n      unspecified: [new ipa.IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],\n      linkLocal: [new ipa.IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 0]), 10],\n      multicast: [new ipa.IPv6([0xff00, 0, 0, 0, 0, 0, 0, 0]), 8],\n      loopback: [new ipa.IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],\n      uniqueLocal: [new ipa.IPv6([0xfc00, 0, 0, 0, 0, 0, 0, 0]), 7],\n      ipv4Mapped: [new ipa.IPv6([0, 0, 0, 0, 0, 0xffff, 0, 0]), 96],\n      rfc6145: [new ipa.IPv6([0, 0, 0, 0, 0xffff, 0, 0, 0]), 96],\n      rfc6052: [new ipa.IPv6([0x64, 0xff9b, 0, 0, 0, 0, 0, 0]), 96],\n      '6to4': [new ipa.IPv6([0x2002, 0, 0, 0, 0, 0, 0, 0]), 16],\n      teredo: [new ipa.IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 32],\n      reserved: [[new ipa.IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32]]\n    };\n    ipa.IPv6.Part = \"(?:[0-9a-f]+::?)+\";\n    ipa.IPv6.Regexes = {\n      \"native\": new RegExp(\"^(::)?(\" + ipa.IPv6.Part + \")?([0-9a-f]+)?(::)?$\", 'i'),\n      transitional: new RegExp(\"^((?:\" + ipa.IPv6.Part + \")|(?:::)(?:\" + ipa.IPv6.Part + \")?)\" + (\"\" + ipa.IPv4.Part + \"\\\\.\" + ipa.IPv4.Part + \"\\\\.\" + ipa.IPv4.Part + \"\\\\.\" + ipa.IPv4.Part + \"$\"), 'i')\n    };\n\n    ipa.IPv6.parser = function (string) {\n      var match, octet, octets, parts, _i, _len;\n\n      if (string.match(ctx.IPTools.ipaddr.IPv6.Regexes['native'])) {\n        return ctx.IPTools.ipaddr.expandIPv6(string, 8);\n      } else if (match = string.match(ctx.IPTools.ipaddr.IPv6.Regexes['transitional'])) {\n        parts = ctx.IPTools.ipaddr.expandIPv6(match[1].slice(0, -1), 6);\n\n        if (parts) {\n          octets = [parseInt(match[2]), parseInt(match[3]), parseInt(match[4]), parseInt(match[5])];\n\n          for (_i = 0, _len = octets.length; _i < _len; _i++) {\n            octet = octets[_i];\n\n            if (!(0 <= octet && octet <= 255)) {\n              return null;\n            }\n          }\n\n          parts.push(octets[0] << 8 | octets[1]);\n          parts.push(octets[2] << 8 | octets[3]);\n          return parts;\n        }\n      }\n\n      return null;\n    };\n\n    ipa.expandIPv6 = function (string, parts) {\n      var colonCount, lastColon, part, replacement, replacementCount;\n\n      if (string.indexOf('::') !== string.lastIndexOf('::')) {\n        return null;\n      }\n\n      colonCount = 0;\n      lastColon = -1;\n\n      while ((lastColon = string.indexOf(':', lastColon + 1)) >= 0) {\n        colonCount++;\n      }\n\n      if (string.substr(0, 2) === '::') {\n        colonCount--;\n      }\n\n      if (string.substr(-2, 2) === '::') {\n        colonCount--;\n      }\n\n      if (colonCount > parts) {\n        return null;\n      }\n\n      replacementCount = parts - colonCount;\n      replacement = ':';\n\n      while (replacementCount--) {\n        replacement += '0:';\n      }\n\n      string = string.replace('::', replacement);\n\n      if (string[0] === ':') {\n        string = string.slice(1);\n      }\n\n      if (string[string.length - 1] === ':') {\n        string = string.slice(0, -1);\n      }\n\n      return function () {\n        var _i, _len, _ref, _results;\n\n        _ref = string.split(\":\");\n        _results = [];\n\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          part = _ref[_i];\n\n          _results.push(parseInt(part, 16));\n        }\n\n        return _results;\n      }();\n    };\n\n    ipa.IPv4.isIPv4 = ipa.IPv6.isIPv6 = function (string) {\n      return this.parser(string) !== null;\n    };\n\n    ipa.IPv4.isValid = function (string) {\n      var e;\n\n      try {\n        new this(this.parser(string));\n        return true;\n      } catch (_error) {\n        e = _error;\n        return false;\n      }\n    };\n\n    ipa.IPv4.isValidFourPartDecimal = function (string) {\n      if (ctx.IPTools.ipaddr.IPv4.isValid(string) && string.match(/^\\d+(\\.\\d+){3}$/)) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    ipa.IPv6.isValid = function (string) {\n      var e;\n\n      if (typeof string === \"string\" && string.indexOf(\":\") === -1) {\n        return false;\n      }\n\n      try {\n        new this(this.parser(string));\n        return true;\n      } catch (_error) {\n        e = _error;\n        return false;\n      }\n    };\n\n    ipa.IPv4.parse = ipa.IPv6.parse = function (string) {\n      var parts;\n      parts = this.parser(string);\n\n      if (parts === null) {\n        throw new Error(\"ipaddr: string is not formatted like ip address\");\n      }\n\n      return new this(parts);\n    };\n\n    ipa.IPv4.parseCIDR = function (string) {\n      var maskLength, match;\n\n      if (match = string.match(/^(.+)\\/(\\d+)$/)) {\n        maskLength = parseInt(match[2]);\n\n        if (maskLength >= 0 && maskLength <= 32) {\n          return [this.parse(match[1]), maskLength];\n        }\n      }\n\n      throw new Error(\"ipaddr: string is not formatted like an IPv4 CIDR range\");\n    };\n\n    ipa.IPv6.parseCIDR = function (string) {\n      var maskLength, match;\n\n      if (match = string.match(/^(.+)\\/(\\d+)$/)) {\n        maskLength = parseInt(match[2]);\n\n        if (maskLength >= 0 && maskLength <= 128) {\n          return [this.parse(match[1]), maskLength];\n        }\n      }\n\n      throw new Error(\"ipaddr: string is not formatted like an IPv6 CIDR range\");\n    };\n\n    ipa.isValid = function (string) {\n      return ctx.IPTools.ipaddr.IPv6.isValid(string) || ctx.IPTools.ipaddr.IPv4.isValid(string);\n    };\n\n    ipa.parse = function (string) {\n      if (ctx.IPTools.ipaddr.IPv6.isValid(string)) {\n        return ctx.IPTools.ipaddr.IPv6.parse(string);\n      } else if (ctx.IPTools.ipaddr.IPv4.isValid(string)) {\n        return ctx.IPTools.ipaddr.IPv4.parse(string);\n      } else {\n        throw new Error(\"ipaddr: the address has neither IPv6 nor IPv4 format\");\n      }\n    };\n\n    ipa.parseCIDR = function (string) {\n      var e;\n\n      try {\n        return ctx.IPTools.ipaddr.IPv6.parseCIDR(string);\n      } catch (_error) {\n        e = _error;\n\n        try {\n          return ctx.IPTools.ipaddr.IPv4.parseCIDR(string);\n        } catch (_error) {\n          e = _error;\n          throw new Error(\"ipaddr: the address has neither IPv6 nor IPv4 CIDR format\");\n        }\n      }\n    };\n\n    ipa.fromByteArray = function (bytes) {\n      var length;\n      length = bytes.length;\n\n      if (length === 4) {\n        return new ctx.IPTools.ipaddr.IPv4(bytes);\n      } else if (length === 16) {\n        return new ctx.IPTools.ipaddr.IPv6(bytes);\n      } else {\n        throw new Error(\"ipaddr: the binary input is neither an IPv6 nor IPv4 address\");\n      }\n    };\n\n    ipa.process = function (string) {\n      var addr;\n      addr = this.parse(string);\n\n      if (addr.kind() === 'ipv6' && addr.isIPv4MappedAddress()) {\n        return addr.toIPv4Address();\n      } else {\n        return addr;\n      }\n    };\n  }\n\n  if (!ipt.ip6) {\n    var ip6 = ipt.ip6 = {};\n\n    ip6.normalize = function (a) {\n      if (!this._validate(a)) {\n        return false;\n      }\n\n      var nh = a.split(/\\:\\:/g);\n\n      if (nh.length > 2) {\n        return false;\n      }\n\n      var sections = [];\n\n      if (nh.length == 1) {\n        // full mode\n        sections = a.split(/\\:/g);\n\n        if (sections.length !== 8) {\n          return false;\n        }\n      } else if (nh.length == 2) {\n        // compact mode\n        var n = nh[0];\n        var h = nh[1];\n        var ns = n.split(/\\:/g);\n        var hs = h.split(/\\:/g);\n\n        for (var i in ns) {\n          sections[i] = ns[i];\n        }\n\n        for (var i = hs.length; i > 0; --i) {\n          sections[7 - (hs.length - i)] = hs[i - 1];\n        }\n      }\n\n      for (var i = 0; i < 8; ++i) {\n        if (sections[i] === undefined) {\n          sections[i] = '0000';\n        }\n\n        if (sections[i].length < 4) {\n          sections[i] = '0000'.substring(0, 4 - sections[i].length) + sections[i];\n        }\n      }\n\n      return sections.join(':');\n    };\n\n    ip6.abbreviate = function (a) {\n      if (!this._validate(a)) {\n        return false;\n      }\n\n      a = ip6.normalize(a);\n      a = a.replace(/0000/g, 'g');\n      a = a.replace(/\\:000/g, ':');\n      a = a.replace(/\\:00/g, ':');\n      a = a.replace(/\\:0/g, ':');\n      a = a.replace(/g/g, '0');\n      var sections = a.split(/\\:/g);\n      var zPreviousFlag = false;\n      var zeroStartIndex = -1;\n      var zeroLength = 0;\n      var zStartIndex = -1;\n      var zLength = 0;\n\n      for (var i = 0; i < 8; ++i) {\n        var section = sections[i];\n        var zFlag = section === '0';\n\n        if (zFlag && !zPreviousFlag) {\n          zStartIndex = i;\n        }\n\n        if (!zFlag && zPreviousFlag) {\n          zLength = i - zStartIndex;\n        }\n\n        if (zLength > 1 && zLength > zeroLength) {\n          zeroStartIndex = zStartIndex;\n          zeroLength = zLength;\n        }\n\n        zPreviousFlag = section === '0';\n      }\n\n      if (zPreviousFlag) {\n        zLength = 8 - zStartIndex;\n      }\n\n      if (zLength > 1 && zLength > zeroLength) {\n        zeroStartIndex = zStartIndex;\n        zeroLength = zLength;\n      } //console.log(zeroStartIndex, zeroLength);\n      //console.log(sections);\n\n\n      if (zeroStartIndex >= 0 && zeroLength > 1) {\n        sections.splice(zeroStartIndex, zeroLength, 'g');\n      } //console.log(sections);\n\n\n      a = sections.join(':'); //console.log(a);\n\n      a = a.replace(/\\:g\\:/g, '::');\n      a = a.replace(/\\:g/g, '::');\n      a = a.replace(/g\\:/g, '::');\n      a = a.replace(/g/g, '::'); //console.log(a);\n\n      return a;\n    }; // Basic validation\n\n\n    ip6._validate = function (a) {\n      return /^[a-f0-9\\\\:]+$/ig.test(a);\n    };\n  }\n\n  if (!ipt.ipValidator) {\n    var ipv = ipt.ipValidator = {};\n    ipv.ipaddr = ipt.ipaddr; // dependency\n\n    ipv.ip6 = ipt.ip6; // dependency\n\n    ipv.isIP = function (addr) {\n      return this.ipaddr.isValid(addr);\n    };\n\n    ipv.isRange = function (range) {\n      try {\n        var cidr = this.ipaddr.parseCIDR(range);\n        return true;\n      } catch (e) {\n        return false;\n      }\n    };\n\n    ipv.ver = function (addr) {\n      try {\n        var parse_addr = this.ipaddr.parse(addr);\n        var kind = parse_addr.kind();\n        if (kind == 'ipv4') return 4;else if (kind == 'ipv6') return 6;else return 0; // neither\n      } catch (e) {\n        return 0; // neither\n      }\n    };\n\n    ipv.isV4 = function (addr) {\n      return this.ver(addr) == 4;\n    };\n\n    ipv.isV6 = function (addr) {\n      return this.ver(addr) == 6;\n    };\n\n    ipv.storeIP = function (addr) {\n      try {\n        var parse_addr = this.ipaddr.parse(addr);\n        var kind = parse_addr.kind();\n        if (kind == 'ipv4') return addr; // plain IPv4\n        else if (kind == 'ipv6') {\n          if (parse_addr.isIPv4MappedAddress()) {\n            // convert v4 mapped to v6 to original v4\n            return parse_addr.toIPv4Address().toString();\n          } else {\n            // v6, abbrev.\n            return this.ip6.abbreviate(addr);\n          }\n        } else return null; // invalid IP\n      } catch (e) {\n        return null; // invalid IP\n      }\n    };\n\n    ipv.displayIP = function (addr) {\n      try {\n        var parse_addr = this.ipaddr.parse(addr);\n        var kind = parse_addr.kind();\n\n        if (kind == 'ipv4') //is a plain v4 address\n          {\n            return addr;\n          } else if (kind == 'ipv6') {\n          if (parse_addr.isIPv4MappedAddress()) //convert v4 mapped to v6 addresses to a v4 in it's original format\n            {\n              return parse_addr.toIPv4Address().toString();\n            } else //is a v6, normalize it\n            {\n              return this.ip6.normalize(addr);\n            }\n        } else {\n          return ''; //invalid IP address\n        }\n      } catch (e) {\n        return ''; //invalid IP address\n      }\n    };\n\n    ipv.inRange = function (addr, range) {\n      if (typeof range === 'string') {\n        if (range.indexOf('/') !== -1) {\n          try {\n            var range_data = range.split('/');\n            var parse_addr = this.ipaddr.parse(addr);\n            var parse_range = this.ipaddr.parse(range_data[0]);\n            return parse_addr.match(parse_range, range_data[1]);\n          } catch (err) {\n            return false;\n          }\n        } else {\n          addr = this.isV6(addr) ? this.ip6.normalize(addr) : addr; //v6 normalize addr\n\n          range = this.isV6(range) ? this.ip6.normalize(range) : range; //v6 normalize range\n\n          return this.isIP(range) && addr === range;\n        }\n      } else if (range && _typeof(range) === 'object') //list\n        {\n          for (var check_range in range) {\n            if (this.inRange(addr, range[check_range]) === true) {\n              return true;\n            }\n          }\n\n          return false;\n        } else {\n        return false;\n      }\n    };\n\n    ipv.InRange = ipv.inRange;\n    ipt.range_check = {\n      isIP: ipv.isIP.bind(ipv),\n      isV4: ipv.isV4.bind(ipv),\n      isV6: ipv.isV6.bind(ipv),\n      storeIP: ipv.storeIP.bind(ipv),\n      displayIP: ipv.displayIP.bind(ipv),\n      isRange: ipv.isRange.bind(ipv),\n      inRange: ipv.inRange.bind(ipv),\n      ver: ipv.ver.bind(ipv)\n    }; // alternatives\n\n    ipt.range_check.validIp = ipt.range_check.vaildIp = ipt.range_check.valid_ip = ipt.range_check.vaild_ip = ipt.range_check.isIP;\n    ipt.range_check.searchIP = ipt.range_check.storeIP;\n    ipt.range_check.valid_range = ipt.range_check.validRange = ipt.range_check.isRange;\n    ipt.range_check.in_range = ipt.range_check.inRange;\n  }\n}.call(this); //omnicache.js\n// omnicache.js\n\n(window['RampVersion'] || (window['RampVersion'] = {}))['omnicache.js'] = \"$Id$ $Change$ $Revision$ $DateTime$\"; // General Purpose OmniCache detection\n// Workflow Theory\n// - external entity instantiates a new OmniCacheInterface item as 'oci' with parameters\n// - - fully qualified domain name as 'uri'\n// - - callback to call with rewritten (or not) source uri, source object, or array of source objects\n// - - optional timeout override as 'timeoutMs', default 2000 msec\n// - external entity will call 'oci.rewrite' with source uri, source object, or array of source objects\n// - OmniCacheInterface will call source callback immediately once the detection has succeeded or failed\n// depends on xpromise.js, included here\n\n(function () {\n  var ctx = this;\n\n  if (!(\"XPromise\" in ctx)) {\n    var XPromise = function XPromise(p_executor_f) {\n      // poor man's promise\n      // p_executor_f: function(resolve_f, reject_f)\n      // executor object returns reference to this XPromise\n      // client uses 'then' to register resolve/reject callbacks\n      // callbacks called on success or failure from executor\n      // callbacks may be registered after the fact for immediate call back\n      // callbacks may never be called in indeterminate states\n      this.resolve = function (p_obj) {\n        if (!this.done) {\n          this.done = true;\n          this.stateObj = p_obj;\n          this.stateCall = 'resolve';\n          this.state = 'fulfilled';\n        }\n\n        this.stateCall == 'resolve' && this.emptyList();\n      }; // end resolve\n\n\n      this.reject = function (p_obj) {\n        if (!this.done) {\n          this.done = true;\n          this.stateObj = p_obj;\n          this.stateCall = 'reject';\n          this.state = 'rejected';\n        }\n\n        this.stateCall == 'reject' && this.emptyList();\n      }; // end reject\n\n\n      this.emptyList = function () {\n        // only the chosen state can be emptied, there can be only one state\n        var i,\n            f,\n            a = this[this.stateCall + 'List'];\n\n        if (a) {\n          for (i = a.length - 1; i >= 0; i--) {\n            f = a.shift();\n            f && typeof f == 'function' && f(this.stateObj);\n          }\n        }\n      }; // emptyList\n\n\n      this.then = function (p_resolve_f, p_reject_f) {\n        p_resolve_f && this.resolveList.push(p_resolve_f);\n        p_reject_f && this.rejectList.push(p_reject_f);\n\n        if (this.state != 'pending') {\n          // immediate callback if state is determined\n          this[this.stateCall](this.stateObj);\n        }\n\n        return this; // allow chaining\n      }; // end then\n\n\n      this.state = 'pending';\n      this.stateObj = null;\n      this.stateCall = null;\n      this.done = false;\n      this.resolveList = [];\n      this.rejectList = [];\n      p_executor_f && typeof p_executor_f == 'function' && p_executor_f(this.resolve.bind(this), this.reject.bind(this));\n    }; // end XPromise (poor man's promise)\n\n\n    ctx.XPromise = XPromise; // publish globally\n  } // end if !XPromise\n\n\n  if (!(\"QManager\" in ctx)) {\n    var QManager = function QManager(p_callback, p_method, p_match, p_verbose) {\n      this.callback = p_callback; // called as items are emptied from the queue\n\n      this.method = p_method; // flushing method 0:all, 1:first only, 2:last only\n\n      this.match = typeof p_match == 'boolean' ? p_match : true; // match and remove duplicates on flush\n\n      if (typeof p_verbose == 'function') {\n        this.verbose = true;\n        this.logger = p_verbose;\n      } else {\n        this.verbose = p_verbose;\n        this.logger = console.log.bind(console);\n      }\n\n      this.queue = [];\n\n      this.push = function (p_item) {\n        this.queue.push(p_item);\n      };\n\n      this.pop = function () {\n        return this.queue.pop();\n      };\n\n      this.matchObject = function (p1, p2) {\n        // recursive, initiated from flush\n        var i,\n            found = false;\n\n        var t = _typeof(p1);\n\n        if (t == _typeof(p2)) {\n          // same type\n          if (t == \"object\" && p1 != null) {\n            found = true;\n\n            for (i in p1) {\n              if (!this.matchObject(p1[i], p2[i])) {\n                found = false;\n                break;\n              }\n            }\n          } else {\n            // assume value\n            if (p1 == p2) {\n              // real match, remove queue item\n              found = true;\n            }\n          }\n        }\n\n        return found;\n      }; // end QManager.matchObject\n\n\n      this.flush = function () {\n        var item, i;\n        if (!this.queue.length) return; // nothing to do\n\n        if (this.method) {\n          // first or last\n          if (this.method == 1) {\n            i = 0;\n          } else {\n            i = this.queue.length - 1;\n          }\n\n          item = this.queue.splice(i, 1);\n          this.verbose && this.logger(\"QM callback\", item);\n          this.callback(item);\n          this.queue = []; // empty\n\n          return;\n        } // match types and strings:\n        // typeof q[0] == typeof q[1]\n        // array: each element must match type\n        // object: each field must match type or value\n        // string: each must match value\n\n\n        while (item = this.queue.shift()) {\n          this.verbose && this.logger(\"QM callback\", item);\n          this.callback(item);\n\n          if (this.qflag) {\n            for (i = this.queue.length - 1; i >= 0; i--) {\n              if (this.matchObject(item, this.queue[i])) {\n                this.verbose && this.logger(\"QM removing duplicate\", this.queue[i]);\n                this.queue.splice(i, 1);\n              }\n            }\n          }\n        }\n      }; // end QManager.flush\n\n\n      this.empty = function () {\n        // throw away the contents of the queue without calling back\n        this.verbose && this.logger(\"QM empty\");\n        this.queue.length && (this.queue = []);\n      };\n    }; // end QManager\n\n\n    ctx.QManager = QManager; // publish globally\n  } // end if !QManager\n\n}).call(this); // General Purpose OmniCache detection\n// Workflow Theory\n// - external entity instantiates a new OmniCacheInterface item as 'oci' with parameters\n// - - fully qualified domain name as 'uri'\n// - - callback to call with rewritten (or not) source uri, source object, or array of source objects\n// - - optional timeout override as 'timeoutMs', default 2000 msec\n// - external entity will call 'oci.rewrite' with source uri, source object, or array of source objects\n// - OmniCacheInterface will call source callback immediately once the detection has succeeded or failed\n// depends on xpromise.js\n\n!function (ctx) {\n  var OmniCacheInterface = ctx.OmniCacheInterface = function (p_params) {\n    // p_params:\n    // . uri - Fully-Qualified Domain Name of omnicache server\n    // . [src] - optional function to call with rewritten (or not) sources\n    // . [onSuccess] - optional function to call when an omnicache is found\n    // . [onFailure] - optional function to call when an omnicache is not found\n    // . [onDone] - optional function to call when the omnicache detection is done\n    // . [timeoutMs] - optional override of default timeout of 2000 msec\n    // . [verbose] - optional flag to increase debug messaging   true, [false] or function\n    // . [qmethod] - optional value to indicate queue disposition method: [0=all], 1=first, 2=last\n    // . [qflag] - optional flag to remove duplicate queue entries [true], false\n    // . [filter] - optional parameter to override the array of cacheable extensions, default: [\"png\", \"jpg\", \"mpd\", \"mp4\", \"m3u8\"]; // reverse order of precedence\n    var params = p_params || {};\n    this.re4cache = new RegExp(\"^https?://[^/]+/http(?:https|s)?/\"); // /http/, /https/, /httphttps/\n\n    this.resp = null;\n    this.done = false;\n    this.ipRangeStr = \"\";\n    this.uriStr = \"\"; //\t\tif (typeof params.ipRange =='string')\n    //\t\t{ // comma-separated list of IPs allowed to access, empty means all are allowed\n    //\t\t\tthis.ipRange = params.ipRange.split(',');\n    //\t\t}\n    //\t\telse\n    //\t\t{\n    //\t\t\tthis.ipRange = [];\n    //\t\t}\n    //\t\tthis.ipExclude = typeof params.ipExclude == 'boolean'?params.ipExclude:true; // range of IPs to be excluded rather than included\n\n    this.filter = params.filter || []; //\"mpd\", \"mp4\", \"m3u8\"]; // these extensions are cacheable, reverse order of precedence\n    //this.queue = [];\n\n    this.qmethod = params.qmethod; // whole queue:0, first only:1, last only:2\n\n    this.qflag = params.qflag; // true: remove later matching entries\n    //\t\tif (typeof params.verbose=='function')\n    //\t\t{\n    //\t\t\tthis.verbose = true;\n    //\t\t\tthis.logger = params.verbose;\n    //\t\t}\n    //\t\telse\n    //\t\t{\n    //\t\t\tthis.verbose = !!params.verbose;\n    //\t\t\tthis.logger = console.log.bind(console);\n    //\t\t}\n\n    this.q = new ctx.QManager(this.rewrite.bind(this), this.qmethod, this.qflag, params.verbose); //\t\tthis.timeoutMs = (params.timeoutMs && isFinite(params.timeoutMs))?params.timeoutMs:2000;\n    //\t\tthis.src = params.src;\n\n    this.onSuccess = params.onSuccess;\n    this.onFailure = params.onFailure;\n    this.onDone = params.onDone;\n    this.directMod = true; // modify an object directly or pass as new, no option for now\n    //\t\tif (params.uri && typeof params.uri==\"string\")\n    //\t\t{ // specify uri as https://, http://, or //, otherwise // will be prepended\n    //\t\t\tthis.uri = (params.uri.match(\"^(?:https?:)?//\")?\"\":\"//\")+params.uri;\n    //\t\t\tthis.uri = this.uri.replace(new RegExp(\"^//\"), location.protocol+\"//\");\n    //\t\t\tthis.uri = this.uri.replace(/\\/+$/,\"\"); // no trailing delimiters\n    //\t\t\tthis.promise = this.start();\n    //\t\t\tthis.promise.then(this.onResolve.bind(this), this.onReject.bind(this));\n    //\t\t}\n    //\t\telse\n    //\t\t{ // fail: did not provide an omnicache uri\n    //\t\t\tthis.done = true;\n    //\t\t\tthis.onReject();\n    //\t\t\t//this.onFailure && this.onFailure();\n    //\t\t\t//this.onDone && this.onDone();\n    //\t\t}\n\n    this.setParams(params);\n  }; // end OmniCacheInterface\n\n\n  OmniCacheInterface.Callbacks = {\n    onSuccess: true,\n    onFailure: true,\n    onDone: true\n  };\n  OmniCacheInterface.Defaults = {\n    uri: \"\",\n    ipRange: \"\",\n    ipExclude: true,\n    verbose: false,\n    src: function src() {},\n    // no-op anonymous\n    timeoutMs: 2000\n  };\n  OmniCacheInterface.prototype = {\n    setParams: function setParams(p_params) {\n      // update a subset of parameters (during or) after construction\n      var i,\n          params = p_params || {};\n      var changed = 0;\n      var firstPass = !this.ipRange;\n\n      if (firstPass || 'ipRange' in params && params.ipRange !== this.ipRangeStr) {\n        if (typeof params.ipRange == 'string' && params.ipRange != OmniCacheInterface.Defaults.ipRange) {\n          // comma-separated list of IPs allowed to access, empty means all are allowed\n          this.ipRangeStr = params.ipRange;\n          this.ipRange = params.ipRange.split(',');\n        } else {\n          this.ipRangeStr = OmniCacheInterface.Defaults.ipRange;\n          this.ipRange = [];\n        }\n\n        changed++;\n      }\n\n      if (firstPass || 'ipExclude' in params && params.ipExclude !== this.ipExclude) {\n        this.ipExclude = typeof params.ipExclude != 'undefined' ? !!params.ipExclude : OmniCacheInterface.Defaults.ipExclude; // range of IPs to be excluded rather than included\n\n        changed++;\n      }\n\n      for (i in OmniCacheInterface.Callbacks) {\n        if (i in p_params && (typeof p_params[i] == 'function' || p_params[i] === null)) this[i] = p_params[i];\n      }\n\n      if (firstPass || 'verbose' in params) {\n        if (typeof params.verbose == 'function') {\n          this.verbose = true;\n          this.logger = params.verbose;\n        } else {\n          this.verbose = typeof params.verbose != 'undefined' ? !!params.verbose : OmniCacheInterface.Defaults.verbose;\n          this.logger = console.log.bind(console);\n        }\n      }\n\n      if (firstPass || 'timeoutMs' in params) {\n        this.timeoutMs = params.timeoutMs && isFinite(params.timeoutMs) ? params.timeoutMs : OmniCacheInterface.Defaults.timeoutMs;\n      }\n\n      if (firstPass || 'src' in params && params.src !== this.src) {\n        this.src = typeof params.src == 'function' ? params.src : OmniCacheInterface.Defaults.src;\n        changed++;\n      }\n\n      var calledback = true;\n\n      if (firstPass || 'uri' in params && params.uri !== this.uriStr || params.force) {\n        if (params.uri && typeof params.uri == \"string\" || params.force && this.uriStr) {\n          // specify uri as https://, http://, or //, otherwise // will be prepended\n          this.uriStr = params.uri && typeof params.uri == 'string' ? params.uri : this.uriStr;\n          this.uri = (this.uriStr.match(\"^(?:https?:)?//\") ? \"\" : \"//\") + this.uriStr;\n          this.uri = this.uri.replace(new RegExp(\"^//\"), location.protocol + \"//\");\n          this.uri = this.uri.replace(/\\/+$/, \"\"); // no trailing delimiters\n\n          this.promise = this.start(); // sets this.done=false\n\n          this.promise.then(this.onResolve.bind(this), this.onReject.bind(this)); // some failures will result in callback having been called by this time\n        } else {\n          // fail: did not provide an omnicache uri\n          this.uri = this.uriStr = OmniCacheInterface.Defaults.uri;\n          this.onReject(); // sets this.done=true\n          //this.onFailure && this.onFailure();\n          //this.onDone && this.onDone();\n        }\n      } else if (changed) {\n        // re-use previous uri with new settings\n        if (this.uri) {\n          this.promise = this.start(); // sets this.done = false\n\n          this.promise.then(this.onResolve.bind(this), this.onReject.bind(this));\n        } else {\n          this.onReject(); // sets this.done=true\n        }\n      } else calledback = false;\n\n      return calledback; // true if callback was or will be called, false if just a param update\n    },\n    // end setParams\n    start: function start() {\n      // p_uri: path to try to get to omnicache\n      delete this.resp;\n      this.done = false;\n      var p = new ctx.XPromise(this.xpromise.bind(this));\n\n      if (this.uri) {\n        var xhr = new XMLHttpRequest();\n        var boundListener = this.listener.bind(this);\n\n        if (this.uri.indexOf(\"?\") >= 0) {\n          xhr.uri = \"&\";\n        } else {\n          xhr.uri = \"?\";\n        }\n\n        xhr.uri = this.uri + xhr.uri + \"_=\" + new Date().getTime(); // force local cache miss\n\n        try {\n          xhr.addEventListener(\"readystatechange\", boundListener, false);\n          xhr.addEventListener(\"load\", boundListener, false);\n          xhr.addEventListener(\"error\", boundListener, false);\n          xhr.addEventListener(\"abort\", boundListener, false);\n          xhr.addEventListener(\"timeout\", boundListener, false); // readystatechange will precede load, error, or timeout\n\n          xhr.open(\"get\", xhr.uri, true);\n          xhr.setRequestHeader(\"Accept\", \"application/json\");\n          xhr.timeout = this.timeoutMs;\n          xhr.send(null);\n        } catch (e) {\n          // error in IE on crossdomain/mixed content/pre-flight\n          this.rejector && this.rejector({\n            message: \"xhr failed\"\n          });\n        }\n      } else {\n        this.rejector && this.rejector({\n          message: \"missing URI\"\n        });\n      }\n\n      return p;\n    },\n    // end start\n    listener: function listener(p_e) {\n      if (p_e) {\n        var xhr = p_e.target;\n\n        if (p_e.type == \"readystatechange\") {\n          if (xhr.readyState == 4) {\n            // done\n            var resp;\n\n            try {\n              resp = JSON.parse(xhr.response);\n            } catch (e) {\n              /* bad JSON or not JSON at all */\n            }\n\n            this.resp = resp || {};\n          } // else not ready\n\n        } else {\n          // terminal states\n          var o = {\n            status: xhr.status,\n            resp: this.resp,\n            uri: this.uri\n          };\n          this.done = true;\n          this.logger(\"----> OCI listener: \" + p_e.type);\n\n          switch (p_e.type) {\n            case \"load\":\n              // success\n              // expected response:\n              //{\n              //  \"Ip\": \"###.###.###.###\",\n              //  \"Port\": #####,\n              //  \"Server\": \"OmniCache\",\n              //  \"StatusCode\": 200,\n              //  \"StatusMessage\": \"OK\",\n              //  \"Version\": \"...\"\n              //}\n              if (this.resp && this.resp.Ip) {\n                // loaded with expected field\n                if (this.ipIsAllowed(this.resp.Ip)) {\n                  o.message = 'success';\n                  this.resolver(o);\n                } else {\n                  o.message = 'IP is not in range.';\n                  this.rejector(o);\n                }\n              } else {\n                // loaded but missing expected field\n                o.message = 'failure';\n                this.rejector(o);\n              }\n\n              break;\n\n            case \"error\": // failure\n\n            case \"abort\":\n              // failure\n              o.message = 'failure';\n              this.rejector(o);\n              break;\n\n            case \"timeout\":\n              // a failure?\n              o.message = 'timeout';\n              o.timeout = true;\n              this.rejector(o);\n              break;\n          }\n        }\n      } // else non-event call, like a timer...\n\n    },\n    // end listener\n    ipIsAllowed: function ipIsAllowed(p_ip) {\n      var ipExclude = this.ipExclude;\n      var a = 'IPTools' in window && window.IPTools.ipValidator;\n      var b = this.ipRange.length == 0;\n      var o = a || {\n        inRange: function inRange() {\n          return !ipExclude;\n        }\n      };\n      var inRange = b || o.inRange(p_ip, this.ipRange) ^ this.ipExclude;\n      var c = inRange ^ this.ipExclude; //inRange \texclude \tallow\n      //false\t\tfalse\t\tfalse range is inclusive and not in range\n      //false\t\ttrue\t\ttrue range is exclusive and not in range\n      //true\t\tfalse\t\ttrue range is inclusive and in range\n      //true\t\ttrue \t\tfalse range is exclusive and in range\n      //inRange XOR ipExclude\n\n      if (this.verbose) {\n        // reason 0: !(window['IPTools'] && IPTools.ipValidator) : no IPTools, explicitly allowed\n        // reason 1: this.ipRange.length==0 : no range specified, explicitly allowed\n        // reason 2: in the provided range, ipExclude?'rejected':'accepted'\n        var reason;\n\n        if (!a) {\n          reason = 'Missing IPTools';\n        } else if (b) {\n          reason = 'No IP Range';\n        } else {\n          reason = (c ? 'in' : 'not in') + ' supplied IP ' + (this.ipExclude ? 'exclusion' : 'inclusion') + ' Range';\n        }\n\n        this.logger(\"OCI: Client IP \" + p_ip + ' ' + (inRange ? 'accepted' : 'rejected') + ' - ' + reason, this.ipRange, this.ipExclude);\n      }\n\n      return inRange;\n    },\n    // end ipIsInRange\n    xpromise: function xpromise(p_resolve_f, p_reject_f) {\n      this.resolver = p_resolve_f;\n      this.rejector = p_reject_f;\n    },\n    // end xpromise\n    onResolve: function onResolve(p_obj) {\n      // called by promise when omnicache is detected\n      // prepare for source rewrites\n      this.done = true;\n      this.onSuccess && this.onSuccess(this, p_obj);\n      this.onDone && this.onDone(this, p_obj); // flush the queue of any pending sources\n\n      this.verbose && this.logger(\"OCI onResolve\"); //this.dequeue();\n\n      this.q.flush();\n    },\n    // end onSuccess\n    onReject: function onReject(p_obj) {\n      // called by promise when omnicache is not detected on when no uri is supplied in constructor\n      // prepare for source pass through\n      this.done = true;\n      this.uri = null;\n      p_obj && (p_obj.uri = null);\n      this.onFailure && this.onFailure(this, p_obj);\n      this.onDone && this.onDone(this, p_obj); // flush the queue of any pending sources\n\n      this.verbose && this.logger(\"OCI onReject\"); //this.dequeue();\n\n      this.q.flush();\n    },\n    // end onFailure\n    isCacheable: function isCacheable(p_src) {\n      var rv = false;\n\n      if (p_src) {\n        // requires two checks:\n        // first: the entire URI as it is (allows for query with override extension)\n        // second: the extension of the target without regard to the query or fragment\n        // NOTE: neither is sufficient... this method should not be used\n        if (this.filter.length > 0) {\n          var i,\n              pass = 2;\n\n          for (pass = 2; pass > 0; pass--) {\n            for (i = this.filter.length - 1; !rv && i >= 0; i--) {\n              rv = p_src.match(this.filter[i] + \"$\") != undefined;\n            }\n\n            if (!rv && pass == 2) {\n              // try again with the target\n              var a = p_src.match(/([^\\?#]*)\\/([^\\/\\?#]+)/);\n              a && (p_src = a[2]) || (pass = 0);\n            } else {\n              pass = 0;\n            }\n          }\n        } else {\n          // no filter, all are allowed\n          rv = true;\n        }\n      }\n\n      return rv;\n    },\n    // end isCacheable\n    isCached: function isCached(p_src) {\n      return p_src && p_src.match(this.re4cache);\n    },\n    // end isCached\n    rewrite: function rewrite(p_sources, p_imm) {\n      // if p_imm is set then immediately return rewritten sources if available\n      // p_sources can be:\n      // - a string\n      // - an object containing at least 'src', may also have 'callback', other fields ok\n      // - on array of objects as above\n      this.verbose && this.logger(\"OCI rewrite\", p_sources);\n\n      if (p_sources) {\n        if (!this.done) {\n          // not ready, save to queue and return\n          this.verbose && this.logger(\"... queued\"); //this.queue.push(p_sources);\n\n          this.q.push(p_sources); // QManager version\n\n          return;\n        }\n\n        var i, srcarr, state, isVideo, scheme; // p_sources could be a string, single object, or an array of objects\n\n        if (typeof p_sources == \"string\") {\n          state = 2;\n          srcarr = [{\n            src: p_sources\n          }];\n        } else if (p_sources instanceof Array) {\n          state = 0;\n          srcarr = p_sources;\n        } else {\n          state = 1;\n          srcarr = [p_sources];\n        } // assumed to be an object\n\n\n        var re4match = new RegExp(\"^//\");\n        var re4scheme = new RegExp(\"^(?:(https?):)?(//)?\");\n        var isCached = false,\n            isCacheable = false,\n            changed;\n\n        for (i = 0; i < srcarr.length; i++) {\n          // filtering options\n          // . default: video of type m3u8 or mp4 only\n          // . extended: mpd video, jpg images, maybe even png images\n          // . or custom filter\n          // . or no filter\n          isCacheable = this.isCacheable(srcarr[i].src); //isVideo = (srcarr[i].src && (srcarr[i].src.indexOf('.m3u8')>=0 || srcarr[i].src.indexOf('.mp4')>=0));\n\n          changed = false;\n          isCached = this.isCached(srcarr[i].src);\n\n          if (this.uri && isCacheable && !isCached) {\n            this.verbose && this.logger(\"OmniCache src was: \" + srcarr[i].src);\n            changed = true; // new method: any omnicache handles sources regardless of scheme\n\n            scheme = srcarr[i].src.match(re4scheme); // http://, https://, //, or undefined\n            // [\"http://\" , \"http\"   , \"//\"     ]: use scheme[1]\n            // [\"https://\", \"https\"  , \"//\"     ]: use scheme[1]\n            // [\"//\"      , undefined, \"//\"     ]: use httphttps\n            // [\"\"        , undefined, undefined]: use httphttps\n\n            if (scheme[1]) {\n              scheme = \"/\" + scheme[1] + \"/\";\n            } else {\n              scheme = \"/httphttps/\";\n            } // QUESTION: here we are modifying the original object (except single string)...\n            // ... is that what we want?\n\n\n            srcarr[i].src = srcarr[i].src.replace(re4scheme, this.uri + scheme); // old method: match protocols/schemes of omnicache and sources\n            //if (this.uri.match(/^http:/) && srcarr[i].src.match(/^http:/))\n            //{\n            //\tsrcarr[i].src = srcarr[i].src.replace('http://', this.uri+'/http/');\n            //}\n            //else if (this.uri.match(/^https:/) && srcarr[i].src.match(/^https:/))\n            //{\n            //\tsrcarr[i].src = srcarr[i].src.replace('https://', this.uri+'/https/');\n            //}\n            //else if (this.uri.match(re4match) && srcarr[i].src.match(re4match))\n            //{\n            //\tsrcarr[i].src = srcarr[i].src.replace('//', this.uri+'/httphttps/');\n            //}\n            //else changed = false;\n          } else {\n            this.verbose && this.logger(\"OmniCache:\" + (this.uri ? (isCacheable ? \"\" : \" not\") + \" cacheable\" + (isCached ? \"\" : \" not\") + \" cached\" : \"no uri\"));\n          }\n\n          if (this.verbose) {\n            if (!changed) this.logger(\".... unchanged: \" + (srcarr[i].src || \"undefined\"));else this.logger(\".... updated to OmniCache: \" + srcarr[i].src);\n          }\n\n          srcarr[i].callback && srcarr[i].callback(srcarr[i]); // special singular-object callback\n        } // passing an array results in each member coming back in turn in some cases, array of 1 will cause infinite loop\n        // pass back the same way it is passed in\n\n\n        var rv = state ? state == 1 ? srcarr[0] : srcarr[0].src : srcarr;\n        this.src && this.src(rv);\n        return p_imm && rv;\n      } // default: return undefined\n\n    } // end rewrite\n\n  }; // end OmniCacheInterface.prototype\n}(this); //rcvrInterface.js\n\n(window['RampVersion'] || (window['RampVersion'] = {}))['rcvrInterface.js'] = \"$Id$ $Change$ $Revision$ $DateTime$\"; // parameter and flow manager for rcvr.js\n\n!function (context) {\n  if (!context['queryToObject']) {\n    // could be replaced with some other implementation prior to this\n    context.queryToObject = function (p_query, p_useArrays, p_obj) {\n      // set p_useArrays to true if you want to keep duplicates, otherwise duplicates override\n      // supply p_obj to add to an existing object\n      // 'param' without '=' is boolean true\n      // '!param' without '=' is boolean false\n      var Q = p_obj || {};\n\n      if (!p_query || p_query == \"\") {\n        return Q;\n      }\n\n      var B,\n          A = p_query.split(\"&\");\n      var i, j, k;\n\n      for (i = 0; i < A.length; i++) {\n        //B = A[i].split(\"=\");\n        //B[0] = decodeURIComponent(B[0]);\n        //B[1] = decodeURIComponent(B[1]);\n        k = j = A[i].indexOf('='); // split at the first =, if any\n\n        j + 1 || (j = A[i].length);\n        B = [decodeURIComponent(A[i].substring(0, j)), decodeURIComponent(A[i].substring(j + 1))];\n\n        if (k < 0) {\n          // no '=', take as boolean\n          B[1] = B[0].charAt(0) != '!';\n          B[1] || (B[0] = B[0].substring(1));\n        } else if (B[1] == \"true\") {\n          B[1] = true;\n        } else if (B[1] == \"false\") {\n          B[1] = false;\n        } // positive integers will be converted to numbers\n        // other numbers shall remain as strings\n        else if (B[1].replace(/^\\d+$/, \"\") == \"\") {\n          B[1] = parseInt(B[1]);\n        }\n\n        if (!p_useArrays || typeof Q[B[0]] == \"undefined\") {\n          // first occurence OR override\n          Q[B[0]] = B[1];\n        } else if (_typeof(Q[B[0]]) != \"object\") {\n          // second occurence\n          Q[B[0]] = [Q[B[0]], B[1]];\n        } else {\n          // third or greater occurence\n          Q[B[0]].push(B[1]);\n        }\n      }\n\n      return Q;\n    }; // end queryToObject\n\n  }\n}(this);\n\nvar RcvrInterface = function RcvrInterface(p_i_param, p_r_param, p_o_param) {\n  // p_i_param: interface parameters\n  // p_r_param: receiver parameters\n  // p_o_param: omnicache parameters\n  // overrides and simplifies callbacks?\n  // handles fallback\n  // applies fallback to omnicache\n  this.param = {};\n  this.state = 0; // multicast:\n  // - multicast not requested (maddr=='-1')\n  // - bit 0: multicast requested (maddr==<specifier>)\n  // - bit 1: multicast succeeded\n  // - bit 2: program guide requested (maddr=='0')\n  // - bit 3: program guide received\n  // - bit 4: fallback enabled and supplied\n  // - bit 5: fallback applied\n  // - bit 6: vdmsServers fallback enabled and supplied\n  // - bit 7: vdmsServers fallback appiled\n  // omnicache:\n  // - bit 10: omnicache requested (uri==<specifier>)\n  // - bit 11: omnicache succeeded\n  // - bit 12: omnicache-specific fallback enabled and supplied\n  // - bit 13: omnicache-specific fallback applied\n\n  this.omnicache = null;\n  this.ocReady = false;\n  this.ocParams = {};\n  this.setParams(p_i_param, p_r_param, p_o_param);\n}; // end RcvrInterface constructor\n\n\nRcvrInterface.State = {\n  MC_REQUESTED: 1,\n  MC_SUCCEEDED: 2,\n  MC_GROUP: 3,\n  PG_REQUESTED: 4,\n  PG_SUCCEEDED: 8,\n  PG_GROUP: 12,\n  MC_ALL: 15,\n  FB_SUPPLIED: 16,\n  FB_APPLIED: 32,\n  FB_GROUP: 48,\n  VS_SUPPLIED: 64,\n  VS_APPLIED: 128,\n  VS_GROUP: 192,\n  OC_REQUESTED: 1024,\n  OC_SUCCEEDED: 2048,\n  OC_GROUP: 3072,\n  OF_SUPPLIED: 4096,\n  OF_APPLIED: 8192,\n  OF_GROUP: 12288,\n  OC_APPLIED: 16384\n};\nRcvrInterface.Defaults = {\n  verbose: false,\n  allowFallback: false,\n  allowVdmsFallback: false,\n  vdmsServers: \"\",\n  fallbackUrl: \"\",\n  fallbackType: \"\",\n  omnicacheFallbackUrl: \"\",\n  omnicacheFallbackType: \"\"\n}; // end RcvrInterface.Defaults\n\nRcvrInterface.GetDefaults = function (useQuery, i_p, r_p, o_p) {\n  // returns an object with components ready for setParams instance\n  // useQuery true to pull overrides from the page query\n  // i_p for interface presets (after defaults, before query)\n  // r_p for receiver presets\n  // o_p for omnicache presets\n  var o = {\n    i_param: Receiver.assign({}, RcvrInterface.Defaults, i_p),\n    r_param: Receiver.assign({}, Receiver.Settings, Receiver.Params, Receiver.Options, r_p),\n    o_param: Receiver.assign({}, window.OmniCacheInterface.Defaults, o_p)\n  };\n\n  if (useQuery) {\n    // override defaults from URL query\n    RcvrInterface.GetQueryParams(o, o, _typeof(useQuery) == 'object' ? useQuery : undefined);\n  }\n\n  return o;\n}; // end RcvrInterface.GetDefaults\n\n\nRcvrInterface.GetQueryParams = function (obj, temp, p_q) {\n  // updates obj assuming it is of the form {i_param:{},r_param:{},o_param:{}}\n  // otherwise returns a new object\n  // temp is an object to use as a template, otherwise the GetDefaults result will be used\n  // p_q optional passed in query object\n  var p = obj && obj.i_param ? obj : {};\n  p.i_param || (p.i_param = {});\n  p.r_param || (p.r_param = {});\n  p.o_param || (p.o_param = {});\n  var d = temp || RcvrInterface.GetDefaults(false); // defaults as template\n\n  var i,\n      prefix,\n      k,\n      q = p_q || window.queryToObject(location.search.substr(1), false); // prefixed: provided by this interface (i_,r_,o_)\n  // unprefixed: old-style usage, first match wins\n\n  for (i in q) {\n    prefix = i.match(/^([iro]_)/);\n\n    if (prefix) {\n      k = i.substring(2);\n      prefix = prefix[1];\n    } else {\n      k = i;\n    }\n\n    if ((!prefix || prefix == 'i_') && k in d.i_param && _typeof(q[i]) == _typeof(d.i_param[k])) {\n      p.i_param[k] = q[i];\n      continue;\n    }\n\n    if ((!prefix || prefix == 'r_') && k in d.r_param && _typeof(q[i]) == _typeof(d.r_param[k])) {\n      p.r_param[k] = q[i];\n      continue;\n    } else if (k == 'maddr' || k == 'multicastAddress' && q[i] === 0) {\n      // maddr/multicastAddress is a special case where it can be an integer but is stored as a string\n      p.r_param[k] = \"\" + q[i];\n      continue;\n    } else if (k == 'streamKey' && q[i] === true) {\n      // special case where streamKey is a boolean to grab any stream from the program guide\n      p.r_param[k] = q[i];\n    }\n\n    if ((!prefix || prefix == 'o_') && k in d.o_param && _typeof(q[i]) == _typeof(d.o_param[k])) {\n      p.o_param[k] = q[i];\n      continue;\n    }\n  }\n\n  return p;\n}; // end RcvrInterface.GetQueryParams\n\n\nRcvrInterface.prototype = {\n  setParams: function setParams(p_i_param, p_r_param, p_o_param) {\n    // update parameters after construction\n    // interface parameters\n    var firstPass = typeof this.verbose == 'undefined';\n    var i,\n        i_p = p_i_param || {};\n\n    if (firstPass || typeof i_p.verbose != 'undefined' && i_p.verbose !== this.verbose) {\n      if (typeof i_p.verbose == 'function') {\n        this.verbose = true;\n        this.logger = i_p.verbose;\n      } else {\n        this.verbose = !!i_p.verbose;\n        this.logger = console.log.bind(console);\n      }\n    }\n\n    if (firstPass || typeof i_p.onDone == 'function' && i_p.onDone !== this.onDone) {\n      this.onDone = i_p.onDone;\n    }\n\n    var bfield = ['allowFallback', 'allowVdmsFallback'];\n    var dfield = ['fallbackUrl', 'fallbackType', 'vdmsServers', 'omnicacheFallbackUrl', 'omnicacheFallbackType'];\n\n    for (i = bfield.length - 1; i >= 0; i--) {\n      if (firstPass || bfield[i] in i_p) {\n        this[bfield[i]] = typeof i_p[bfield[i]] != 'undefined' ? !!i_p[bfield[i]] : RcvrInterface.Defaults[bfield[i]];\n      }\n    }\n\n    for (i = dfield.length - 1; i >= 0; i--) {\n      if (firstPass || dfield[i] in i_p && i_p[dfield[i]] != this[dfield[i]]) {\n        this[dfield[i]] = typeof i_p[dfield[i]] != 'undefined' ? i_p[dfield[i]] : RcvrInterface.Defaults[dfield[i]];\n      }\n    } // allowFallback && fallbackUrl\n\n\n    var flag = this.allowFallback && this.fallbackUrl ? RcvrInterface.State.FB_SUPPLIED : 0;\n    this.state = this.state & ~RcvrInterface.State.FB_GROUP | flag; // allowVdmsFallback && vdmsServers\n    // must turn on allowVdmsFallback if vdmsServers is supplied... legacy\n\n    if (this.vdmsServers) {\n      if (typeof this.vdmsServers == 'string') {\n        // assume comma-separated list\n        this.vdmsServers = this.vdmsServers.split(',');\n        this.allowVdmsFallback = true;\n      }\n\n      if (!Array.isArray(this.vdmsServers) || this.vdmsServers.length == 0) {\n        this.vdmsServers = null;\n        this.allowVdmsFallback = false;\n      }\n    }\n\n    flag = this.allowVdmsFallback && this.vdmsServers ? RcvrInterface.State.VS_SUPPLIED : 0;\n    this.state = this.state & ~RcvrInterface.State.VS_GROUP | flag; // allowFallback && omnicacheFallbackUrl\n\n    flag = this.allowFallback && this.omnicacheFallbackUrl ? RcvrInterface.State.OF_SUPPLIED : 0;\n    this.state = this.state & ~RcvrInterface.State.OF_GROUP | flag; // receiver parameters\n\n    Receiver.assign(this.param, p_r_param);\n    if (typeof p_r_param.onDone == 'function' || p_r_param.onDone === null) this.onRcvrDone = p_r_param.onDone;\n    this.param.onDone = this.onDoneIntercept.bind(this);\n    if (typeof p_r_param.onReady == 'function' || p_r_param.onReady === null) this.onRcvrReady = p_r_param.onReady;\n    this.param.onReady = this.onReadyIntercept.bind(this);\n    if (typeof p_r_param.onPGReady == 'function' || p_r_param.onPGReady === null) this.onRcvrPGReady = p_r_param.onPGReady;\n    this.param.onPGReady = this.onPGReadyIntercept.bind(this);\n    if (typeof p_r_param.onStateChange == 'function' || p_r_param.onStateChange === null) this.onRcvrStateChange = p_r_param.onStateChange;\n    this.param.onStateChange = this.onStateChangeIntercept.bind(this); // maddr/multicastAddress\n\n    flag = this.param.maddr === 0 ? '0' : this.param.maddr || this.param.multicastAddress || '-1';\n    flag = flag == '-1' ? 0 : flag == '0' ? RcvrInterface.State.PG_REQUESTED : RcvrInterface.State.MC_REQUESTED;\n    this.state = this.state & ~RcvrInterface.State.MC_ALL | flag; // omnicache parameters\n    // - if omnicache uri is new then it must be updated first\n    // firstPass flow:\n    // - try to detect omnicache\n    // - - fail directly -> omnicacheListener\n    // - - fail indirectly -> omnicacheListener\n    // - - succeed indirectly -> omnicacheListener\n    // - omnicacheListener calls init\n    // - init creates a new rcvr object and begins receiver detection\n    // second pass flow\n    // - change in omnicache ipRange,ipExclude,srcFunc, or uri will trigger a new init\n    // - change in several rcvr params will force a restart \n\n    this.setOmniCache(p_o_param);\n  },\n  // end RcvrInterface.prototype.setParams\n  statusUpdate: function statusUpdate(flag) {\n    // direct call into rcvr to toggle monitorStatus immediately\n    this.rcvr && this.rcvr.statusUpdate(flag);\n  },\n  // end statusUpdate\n  fullStatus: function fullStatus(onDone, onSuccess, onFailure) {\n    // direct call into rcvr to get the full status\n    if (this.rcvr) {\n      this.rcvr.fullStatus(onDone, onSuccess, onFailure);\n    } else {\n      // (type, response)\n      onFailure && onFailure();\n      onDone && onDone();\n    }\n  },\n  // end fullStatus\n  init: function init() {\n    if (this.rcvr) {\n      // restart\n      var forceStart = false;\n      /*if (this.newParams)*/\n\n      forceStart = this.rcvr.setParams(this.param, true);\n      if (!forceStart) this.rcvr.start();\n    } else {\n      // first start\n      this.rcvr = new Receiver(this.param);\n    } //this.newParams = false;\n\n  },\n  // end RcvrInterface.prototype.init\n  setOmniCache: function setOmniCache(p_o_param) {\n    var rv = false; // NOTE: can set p_o_params.force=true with uri set to re-do detection\n\n    Receiver.assign(this.ocParams, p_o_param);\n    var flag = this.ocParams.uri ? RcvrInterface.State.OC_REQUESTED : 0;\n    this.state = this.state & ~RcvrInterface.State.OC_GROUP | flag;\n    this.state = this.state & ~RcvrInterface.State.OC_APPLIED;\n    this.ocParams.onDone = this.omnicacheListener.bind(this);\n\n    if (this.omnicache) {\n      // already connected to an OmniCacheInterface instance\n      if (!this.omnicache.setParams(this.ocParams)) {\n        // did not call callback, call init directly\n        this.init();\n      } else {\n        // new detection will result in indirect call to init\n        rv = true;\n      }\n    } else if (this.ocParams.uri && 'OmniCacheInterface' in window) {\n      // set or override omnicache parameters\n      //this.omnicacheParams =\n      //{\n      //\turi:\n      //\tverbose:\n      //\tipRange:\n      //\tipExclude:\n      //\ttimeout:\n      //};\n      this.omnicache = new window.OmniCacheInterface(this.ocParams);\n      rv = true;\n    } else {\n      // no params, no uri, or no OmniCacheInterface object\n      this.omnicacheListener();\n    }\n\n    return rv; // true when async detection is taking place\n  },\n  // end RcvrInterface.prototype.setOmniCache\n  omnicacheListener: function omnicacheListener(o) {\n    this.ocReady = !!(o && o.uri);\n\n    if (this.ocReady) {\n      this.state |= RcvrInterface.State.OC_SUCCEEDED;\n    } else {// failure within OmniCacheInterface: o.uri = this.omnicache.uri = null\n      // failure outside: o = null\n    }\n\n    this.init();\n  },\n  // end RcvrInterface.prototype.omnicacheListener \n  onDoneIntercept: function onDoneIntercept(rcvr, r_obj) {\n    // handles onDone from Receiver object before passing it on to configured handler\n    // r_obj: {state:,action:,reason:,[addrEntry:]}\n    // state \taction \t\treason \t\t\n    // 5 \t\tguide\t\tsuccess/fail\n    // 0 \t\tfail \t\tinit/latent/maddr\n    // 1 \t\tfail \t\trun\n    // 2 \t\tfail \t\tstart\n    // 3\t\tfail \t\tmaxTime0/maxTime1/segments\n    this.rcvr || (this.rcvr = rcvr); // may not have been set yet in init!\n\n    if (r_obj.state < 5 && !(this.state & RcvrInterface.State.MC_REQUESTED)) this.state |= RcvrInterface.State.MC_REQUESTED; // may have been changed after thie first pass\n\n    this.onRcvrDone && this.onRcvrDone(rcvr, r_obj);\n    var fail = r_obj.action == 'fail' || r_obj.action == 'guide' && (r_obj.reason == 'config' || r_obj.reason == 'receiver');\n\n    if (fail && this.allowFallback) {\n      // .. assume this.fallbackUrl is set and to be used:\n      this.fallbackProtocol(this.allowFallback, this.allowVdmsFallback);\n    } else {\n      // call supplied onDone\n      this.obj = r_obj; // same as this.rcvr.obj, in theory\n\n      this.onDone && this.onDone(this, r_obj);\n    }\n  },\n  // end RcvrInterface.prototype.onDoneIntercept\n  onReadyIntercept: function onReadyIntercept(rcvr, url, format) {\n    // only occurs on success\n    this.state |= RcvrInterface.State.MC_SUCCEEDED | RcvrInterface.State.MC_REQUESTED;\n    this.onRcvrReady && this.onRcvrReady(rcvr, url, format);\n  },\n  // end RcvrInterface.prototype.onReadyIntercept\n  onPGReadyIntercept: function onPGReadyIntercept(rcvr, obj) {\n    if (obj.reason == 'success' || obj.reason == 'empty') {\n      this.state |= RcvrInterface.State.PG_SUCCEEDED;\n    }\n\n    this.onRcvrPGReady && this.onRcvrPGReady(rcvr, obj);\n  },\n  // end RcvrInterface.prototype.onPGReadyIntercept\n  onStateChangeIntercept: function onStateChangeIntercept(rcvr, obj) {\n    this.rcvr || (this.rcvr = rcvr); // in case callback is called during construction\n\n    this.onRcvrStateChange && this.onRcvrStateChange(rcvr, obj);\n  },\n  // end RcvrInterface.prototype.onStateChangeIntercept\n  fallbackProtocol: function fallbackProtocol(allowFallback, allowVdmsFallback) {\n    if (allowFallback) {\n      // attempt fallback work flow\n      var o = {\n        state: 6,\n        action: 'fallback',\n        reason: undefined,\n        url: undefined,\n        type: undefined\n      }; // omnicache fallbackUrl before vdmsServers before fallbackUrl\n\n      if (this.ocReady && this.omnicacheFallbackUrl) {\n        o.url = this.omnicacheFallbackUrl;\n        o.type = this.omnicacheFallbackType;\n        o.reason = 'omnicache';\n        this.state |= RcvrInterface.State.OF_APPLIED;\n      } else if (allowVdmsFallback && this.vdmsServers && this.attemptVdmsFallback()) {\n        // attemptVdmsFallback will return false on missing or empty vdmsServers\n        // else will return true and re-call fallbackProtocol on failure\n        // or handle success in its listener\n        o.reason = 'vdms';\n        return;\n      } else {\n        o.url = this.fallbackUrl;\n        o.type = this.fallbackType;\n        o.reason = 'direct';\n        this.state |= RcvrInterface.State.FB_APPLIED;\n      }\n\n      if (this.ocReady && o.url) {\n        this.state |= RcvrInterface.State.OC_APPLIED;\n        o.url = this.omnicache.rewrite(o.url, true);\n      }\n\n      this.obj = o; // as opposed to this.rcvr.obj ... last rcvr state\n\n      this.onRcvrStateChange && this.onRcvrStateChange(this, o); // use local onReady as param.onReady is onReadyIntercept\n\n      o.url && this.onRcvrReady && this.onRcvrReady(this, o.url, o.type);\n      this.onDone && this.onDone(this, o);\n    } //else continue with failure instead of fallback\n\n  },\n  // end RcvrInterface.prototype.fallbackProtocol\n  attemptVdmsFallback: function attemptVdmsFallback() {\n    var rv = false;\n\n    if (Array.isArray(this.vdmsServers) && this.vdmsServers.length) {\n      var url = this.vdmsServers[Math.floor(Math.random() * this.vdmsServers.length)].replace(/[\\/]*$/, \"/rest/services/getunicast?multicastAddress=\" + this.params.multicastAddress);\n      var xhr = new XMLHttpRequest();\n      xhr.addEventListener('readystatechange', this.attemptVdmsListener.bind(this), false);\n      xhr.open('get', url, true);\n      xhr.send(null);\n      rv = true;\n    }\n\n    return rv;\n  },\n  // end RcvrInterface.prototype.attemptVdmsFallback\n  attemptVdmsListener: function attemptVdmsListener(event) {\n    var resp,\n        xhr = event.target;\n\n    if (xhr.readyState == 4) {\n      if (xhr.status == 200) {\n        try {\n          resp = JSON.parse(xhr.response);\n          if (typeof resp == 'string') resp = JSON.parse(resp);\n        } catch (e) {}\n\n        if (resp && resp.sourceUri) {\n          this.state |= RcvrInterface.State.VS_APPLIED;\n          this.vdmsFallbackUrl = resp.sourceUri;\n\n          if (this.ocReady) {\n            this.state |= RcvrInterface.State.OC_APPLIED;\n            resp.sourceUri = this.omnicache.rewrite(resp.sourceUri, true);\n          }\n\n          var o = {\n            state: 6,\n            action: 'fallback',\n            reason: 'vdms',\n            url: resp.sourceUri,\n            resp: resp,\n            type: resp.sourceFormat\n          };\n          this.onRcvrStateChange && this.onRcvrStateChange(this, o);\n          this.onRcvrReady && this.onRcvrReady(this, resp.sourceUri, resp.sourceFormat);\n          this.onDone && this.onDone(this, o);\n        } else {\n          // no vdms source for fallback, go with direct\n          this.fallbackProtocol(true, false);\n        }\n      }\n    }\n  },\n  // end RcvrInterface.prototype.attemptVdmsListener\n  interpretResponse: function interpretResponse(obj) {\n    // where obj is the second parameter to onDone\n    var rv;\n\n    if (obj && obj.state >= 0) {\n      if (obj.state < Receiver.states.length) {\n        rv = this.rcvr.interpretResponse(obj);\n      } else {\n        rv = RcvrInterface.states[obj.state - Receiver.states.length];\n        rv = rv[obj.action] && rv[obj.action][obj.reason.replace(/ .*/, \"\")] || \"\";\n      }\n    }\n\n    return rv;\n  },\n  // end RcvrInterface.prototype.interpretResponse\n  interpretState: function interpretState(obj) {\n    // multicast:\n    // - multicast not requested (maddr=='-1')\n    // - bit 0: multicast requested (maddr==<specifier>)\n    // - bit 1: multicast succeeded\n    // - bit 2: program guide requested (maddr=='0')\n    // - bit 3: program guide received\n    // - bit 4: fallback enabled and supplied\n    // - bit 5: fallback applied\n    // - bit 6: vdmsServers fallback enabled and supplied\n    // - bit 7: vdmsServers fallback applied\n    // omnicache:\n    // - bit 10: omnicache requested (uri==<specifier>)\n    // - bit 11: omnicache succeeded\n    // - bit 12: omnicache-specific fallback enabled and supplied\n    // - bit 13: omnicache-specific fallback applied\n    // - bit 14: omnicache applied to fallback\n    var str = \"\",\n        RIS = RcvrInterface.State;\n    obj || (obj = this.rcvr.obj); // multicast (not )requested( and succeeded with this.rcvr.param.multicastAddress)\n\n    if (this.state & RIS.MC_REQUESTED) {\n      str += 'Multicast was requested for ' + this.rcvr.params.multicastAddress + '.\\n' + 'Multicast ' + (this.state & RIS.MC_SUCCEEDED ? 'succeeded.\\n' : 'failed (' + obj.reason + ').\\n');\n    } else {\n      str += 'Multicast was not requested.\\n';\n    }\n\n    if (this.state & RIS.PG_REQUESTED) {\n      str += 'Program Guide was requested.\\n' + 'Program Guide ' + (this.state & RIS.PG_SUCCEEDED ? obj.reason == 'empty' ? 'is empty\\n' : 'succeeded.\\n' : 'failed (' + obj.reason + ').\\n');\n    } else {\n      str += 'Program Guide was not requested.\\n';\n    }\n\n    if (this.state & RIS.FB_SUPPLIED) {\n      str += 'Fallback was allowed and supplied. (' + this.fallbackUrl + ').\\n';\n\n      if (this.state & RIS.FB_APPLIED) {\n        str += 'Fallback was applied as source' + (this.state & RIS.OC_APPLIED ? ' via OmniCache' : \"\") + '.\\n'; // what is the URL as applied via OmniCache?\n      } else {\n        str += 'Fallback was not applied as source.\\n';\n      }\n    } else {\n      str += 'Fallback was ' + (this.allowFallback ? 'allowed but not supplied' : 'not allowed') + '.\\n';\n    }\n\n    if (this.state & RIS.VS_SUPPLIED) {\n      str += 'VDMS fallback was allowed and supplied (' + this.vdmsFallbackUrl + ').\\n';\n\n      if (this.state & RIS.VS_APPLIED) {\n        str += 'VDMS fallback was applied as source' + (this.state & RIS.OC_APPLIED ? ' via OmniCache' : \"\") + '.\\n'; // what is the URL as applied via OmniCache?\n      } else {\n        str += 'VDMS fallback was not applied as source.\\n';\n      }\n    } else {\n      str += 'VDMS fallback was ' + (this.allowVdmsFallback ? 'allowed but not supplied' : 'not allowed') + '.\\n';\n    }\n\n    if (this.state & RIS.OC_REQUESTED) {\n      str += 'OmniCache was requested (' + this.ocParams.uri + ').\\n' + 'OmniCache was ' + (this.state & RIS.OC_SUCCEEDED ? 'detected' : 'not detected') + '.\\n';\n    } else {\n      str += 'OmniCache was not requested.\\n';\n    }\n\n    if (this.state & RIS.OF_SUPPLIED) {\n      str += 'OmniCache-specific Fallback was allowed and supplied. (' + this.omnicacheFallbackUrl + ')\\n';\n\n      if (this.state & RIS.OF_APPLIED) {\n        str += 'OmniCache-specific Fallback was applied as source' + (this.state & RIS.OC_APPLIED ? ' via OmniCache' : \"\") + '.\\n'; // what is the URL as applied via OmniCache?\n      } else {\n        str += 'OmniCache-specific Fallback was not applied as source.\\n';\n      }\n    } else {\n      str += 'OmniCache-specific Fallback was ' + (this.allowFallback ? 'allowed but not supplied' : 'not allowed') + '.\\n';\n    }\n\n    return str;\n  } // end RcvrInterface.prototype.interpretState\n\n}; // end RcvrInterface.prototype\n\n/*\nonStateChange(), onDone()...\n{\n\tstate \taction \t\treason \t\taddrEntry \tresp \turl\n\t6\t\tfallback \tdirect \t\tnull\t\t\t\tnull/empty/url\n\t6\t\tfallback \tvdms \t\tnull\t\t\t\tnull/empty/url\n\t6 \t\tfallback \tomnicache \tnull\t\t\t\tnull/empty/url\n\t5 \t\tguide \t\tguide \t\tnull\n\t5 \t\tguide \t\tsuccess\t\tnull\t\tpg\n\t5 \t\tguide \t\tempty\t\tnull\t\tpg with empty programs\n\t5 \t\tguide \t\treceiver\tnull\t\tno pg\n\t5 \t\tguide \t\tconfig\t\tnull\t\tno pg\n\t4 \t\tping \t\tsuccess \tpopulated\n\t4 \t\tstop \t\tsuccess \tpopulated\n\t3 \t\tfail \t\tmaxTime0 \tpopulated\n\t3 \t\tstart \t\tmaxTime0 \tpopulated // changed from fail for retry\n\t3 \t\tfail \t\tmaxTime1 \tpopulated\n\t3 \t\tstart \t\tmaxTime1 \tpopulated // changed from fail for retry\n\t3 \t\tfail \t\tsegments \tpopulated\n\t3 \t\tstart \t\tsegments \tpopulated // changed from fail for retry\n\t3 \t\tping \t\tsegments \tpopulated\n\t2 \t\tstart \t\tfirst \t\tnull\n\t2 \t\tstart \t\trestart \tnull\n\t2 \t\tfail \t\tstart \t\tnull\n\t2 \t\tstart \t\tstart \t\tnull // changed from fail for retry\n\t2 \t\tping \t\tstart \t\tnull\n\t1 \t\tfail \t\trun \t\tnull\n\t1 \t\tping \t\trun \t\tnull\n\t0 \t\tfail \t\tkeystore\n\t0\t\tfail \t\tmaddr \t\tnull\t// no maddr supplied, not even \"0\"\n\t0 \t\tfail \t\tinit <> \tnull\n\t0 \t\tfail \t\tlatent <>\tnull\n\t0 \t\tping \t\tresponse \tnull\n*/\n\nRcvrInterface.states = [// index by state, check for action, check for reason\n{\n  // state = 6: fallback\n  core: 'fallback',\n  fallback: {\n    vdms: 'using Altimeter-configured fallback source',\n    direct: 'using directly-configured fallback source',\n    omnicache: 'using OmniCache-specific fallback source'\n  }\n}];\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = {\n  RcvrInterface,\n  Receiver,\n  OmniCacheInterface\n};\n\n}.call(window));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../js/atlas/vendor/rampapi.js\n");

/***/ })

}]);