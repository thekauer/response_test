"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkustreamPlayer"] = self["webpackChunkustreamPlayer"] || []).push([["decoder-a"],{

/***/ "../js/atlas/logic/slideDeck/slideDecoder.worker.js":
/*!**********************************************************!*\
  !*** ../js/atlas/logic/slideDeck/slideDecoder.worker.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Worker_fn; }\n/* harmony export */ });\n/* harmony import */ var _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !!../../../../node_modules/worker-loader/dist/runtime/inline.js */ \"../node_modules/worker-loader/dist/runtime/inline.js\");\n/* harmony import */ var _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\nfunction Worker_fn() {\n  return _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0___default()(\"/*\\n * ATTENTION: An \\\"eval-source-map\\\" devtool has been used.\\n * This devtool is neither made for production nor for readable output files.\\n * It uses \\\"eval()\\\" calls to create a separate source file with attached SourceMaps in the browser devtools.\\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\\n * or disable the default devtool with \\\"devtool: false\\\".\\n * If you are looking for production-ready output files, see mode: \\\"production\\\" (https://webpack.js.org/configuration/mode/).\\n */\\n/******/ (function() { // webpackBootstrap\\n/******/ \\tvar __webpack_modules__ = ({\\n\\n/***/ \\\"../node_modules/babel-loader/lib/index.js??ruleSet[1].rules[3]!../js/atlas/logic/slideDeck/slideDecoder.worker.js\\\":\\n/*!*************************************************************************************************************************!*\\\\\\n  !*** ../node_modules/babel-loader/lib/index.js??ruleSet[1].rules[3]!../js/atlas/logic/slideDeck/slideDecoder.worker.js ***!\\n  \\\\*************************************************************************************************************************/\\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony import */ var slidecode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! slidecode */ \\\\\\\"../node_modules/slidecode/dist/slidecode.js\\\\\\\");\\\\n/* harmony import */ var slidecode__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(slidecode__WEBPACK_IMPORTED_MODULE_0__);\\\\n\\\\n/**\\\\n * @param {string} url\\\\n * @param {Function(?Error, ?ArrayBuffer)} cb\\\\n */\\\\n\\\\nfunction getBinary(url, cb) {\\\\n  var req = new XMLHttpRequest();\\\\n  req.open('GET', url, true);\\\\n  req.responseType = 'arraybuffer';\\\\n  req.addEventListener('load', function () {\\\\n    var buffer = req.response;\\\\n    cb(null, buffer);\\\\n  });\\\\n  req.addEventListener('error', function () {\\\\n    cb(new Error(\\\\\\\"Failed to fetch (\\\\\\\".concat(req.statusText, \\\\\\\" \\\\\\\").concat(req.status, \\\\\\\")\\\\\\\")));\\\\n  });\\\\n  req.send();\\\\n}\\\\n/**\\\\n * @param {string} url\\\\n * @param {string} secret\\\\n * @param {Function(?Error, ?ArrayBuffer)} cb\\\\n */\\\\n\\\\n\\\\nfunction decodeImage(url, secret, cb) {\\\\n  getBinary(url, function (err, buffer) {\\\\n    if (err) {\\\\n      cb(err);\\\\n      return;\\\\n    }\\\\n\\\\n    if (!secret) {\\\\n      cb(null, buffer);\\\\n      return;\\\\n    }\\\\n\\\\n    var byteArray = new Uint8Array(buffer);\\\\n    slidecode__WEBPACK_IMPORTED_MODULE_0___default()(byteArray, secret, function (err, decodedByteArray) {\\\\n      if (err) {\\\\n        cb(err);\\\\n        return;\\\\n      }\\\\n\\\\n      cb(null, decodedByteArray.buffer);\\\\n    }, {\\\\n      skipBlob: true\\\\n    });\\\\n  });\\\\n}\\\\n\\\\nself.addEventListener('message', function (_ref) {\\\\n  var data = _ref.data;\\\\n  var url = data.url,\\\\n      _data$secret = data.secret,\\\\n      secret = _data$secret === void 0 ? null : _data$secret;\\\\n  decodeImage(url, secret, function (err, buffer) {\\\\n    if (err) {\\\\n      self.postMessage({\\\\n        url: url,\\\\n        error: err.message,\\\\n        buffer: null\\\\n      });\\\\n      return;\\\\n    }\\\\n\\\\n    self.postMessage({\\\\n      url: url,\\\\n      error: null,\\\\n      buffer: buffer\\\\n    }, [buffer]);\\\\n  });\\\\n});//# sourceURL=[module]\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"../node_modules/slidecode/dist/slidecode.js\\\":\\n/*!***************************************************!*\\\\\\n  !*** ../node_modules/slidecode/dist/slidecode.js ***!\\n  \\\\***************************************************/\\n/***/ (function(module, exports) {\\n\\neval(\\\"var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (()=>{return t={447:(t,e,r)=>{var n=r(832),i=function(t,e,r,n){if(t)return r(t);if(n&&n.skipBlob)r(null,e);else{var i=new Blob([e],{type:\\\\\\\"image/jpeg\\\\\\\"});r(null,URL.createObjectURL(i))}};t.exports=function(t,e,r,o){var s=t.subarray(0,16),u=t.subarray(16),a=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;i(t,e,r,o)};!function(t,e){if(\\\\\\\"function\\\\\\\"!=typeof TextEncoder){var r=new FileReader;r.onload=function(){var t=new Uint8Array(this.result);e(t)},r.readAsArrayBuffer(new Blob([t]))}else{var n=new TextEncoder(\\\\\\\"utf-8\\\\\\\");e(n.encode(t))}}(e,(function(t){var e=o&&o.skipNativeCrypto;\\\\\\\"undefined\\\\\\\"!=typeof crypto&&crypto.subtle&&!e?function(t,e,r,n){crypto.subtle.importKey(\\\\\\\"raw\\\\\\\",e,{name:\\\\\\\"AES-CBC\\\\\\\"},!1,[\\\\\\\"decrypt\\\\\\\"]).then((function(e){return crypto.subtle.decrypt({name:\\\\\\\"AES-CBC\\\\\\\",iv:r},e,t)})).then((function(t){n(null,new Uint8Array(t))})).catch((function(t){n(t)}))}(u,t,s,a):function(t,e,r,i){i(null,n.AES_CBC.decrypt(t,e,!0,r))}(u,t,s,a)}))}},832:function(t,e){var r,n,i,o;function s(t,e){if(\\\\\\\"function\\\\\\\"!=typeof e&&null!==e)throw new TypeError(\\\\\\\"Super expression must either be null or a function\\\\\\\");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,\\\\\\\"prototype\\\\\\\",{writable:!1}),e&&u(t,e)}function u(t,e){return u=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},u(t,e)}function a(t){var e=function(){if(\\\\\\\"undefined\\\\\\\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\\\\\\\"function\\\\\\\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=f(t);if(e){var i=f(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return c(this,r)}}function c(t,e){if(e&&(\\\\\\\"object\\\\\\\"===y(e)||\\\\\\\"function\\\\\\\"==typeof e))return e;if(void 0!==e)throw new TypeError(\\\\\\\"Derived constructors may only return object or undefined\\\\\\\");return function(t){if(void 0===t)throw new ReferenceError(\\\\\\\"this hasn't been initialised - super() hasn't been called\\\\\\\");return t}(t)}function f(t){return f=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},f(t)}function l(t,e){if(!(t instanceof e))throw new TypeError(\\\\\\\"Cannot call a class as a function\\\\\\\")}function h(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,\\\\\\\"value\\\\\\\"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function p(t,e,r){return e&&h(t.prototype,e),r&&h(t,r),Object.defineProperty(t,\\\\\\\"prototype\\\\\\\",{writable:!1}),t}function y(t){return y=\\\\\\\"function\\\\\\\"==typeof Symbol&&\\\\\\\"symbol\\\\\\\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\\\\\\\"function\\\\\\\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\\\\\\\"symbol\\\\\\\":typeof t},y(t)\\\\n/*! asmCrypto v0.21.0, (c) 2018 asmCrypto.js, opensource.org/licenses/MIT */}o=function(t){\\\\\\\"use strict\\\\\\\";function e(){var t=Error.apply(this,arguments);this.message=t.message,this.stack=t.stack}function r(){var t=Error.apply(this,arguments);this.message=t.message,this.stack=t.stack}function n(){var t=Error.apply(this,arguments);this.message=t.message,this.stack=t.stack}e.prototype=Object.create(Error.prototype,{name:{value:\\\\\\\"IllegalStateError\\\\\\\"}}),r.prototype=Object.create(Error.prototype,{name:{value:\\\\\\\"IllegalArgumentError\\\\\\\"}}),n.prototype=Object.create(Error.prototype,{name:{value:\\\\\\\"SecurityError\\\\\\\"}});\\\\n/**\\\\n   * @file {@link http://asmjs.org Asm.js} implementation of the {@link https://en.wikipedia.org/wiki/Advanced_Encryption_Standard Advanced Encryption Standard}.\\\\n   * @author Artem S Vybornov <vybornov@gmail.com>\\\\n   * @license MIT\\\\n   */\\\\nvar i=function(){var t,e,r,n,i,o,s=!1;function u(r,n){var i=t[(e[r]+e[n])%255];return 0!==r&&0!==n||(i=0),i}function a(){function a(r){var n,i,o;for(i=o=function(r){var n=t[255-e[r]];return 0===r&&(n=0),n}(r),n=0;n<4;n++)o^=i=255&(i<<1|i>>>7);return o^=99}s||function(){t=[],e=[];var r,n,i=1;for(r=0;r<255;r++)t[r]=i,n=128&i,i<<=1,i&=255,128===n&&(i^=27),i^=t[r],e[t[r]]=r;t[255]=t[0],e[0]=0,s=!0}(),r=[],n=[],i=[[],[],[],[]],o=[[],[],[],[]];for(var c=0;c<256;c++){var f=a(c);r[c]=f,n[f]=c,i[0][c]=u(2,f)<<24|f<<16|f<<8|u(3,f),o[0][f]=u(14,c)<<24|u(9,c)<<16|u(13,c)<<8|u(11,c);for(var l=1;l<4;l++)i[l][c]=i[l-1][c]>>>8|i[l-1][c]<<24,o[l][f]=o[l-1][f]>>>8|o[l-1][f]<<24}}var c=function(t,e){a();var s=new Uint32Array(e);s.set(r,512),s.set(n,768);for(var u=0;u<4;u++)s.set(i[u],4096+1024*u>>2),s.set(o[u],8192+1024*u>>2);var c=function(t,e,r){\\\\\\\"use asm\\\\\\\";var n=0,i=0,o=0,s=0,u=0,a=0,c=0,f=0,l=0,h=0,p=0,y=0,v=0,d=0,w=0,_=0,E=0,g=0,A=0,b=0,m=0;var x=new t.Uint32Array(r),S=new t.Uint8Array(r);function k(t,e,r,u,a,c,f,l){t=t|0;e=e|0;r=r|0;u=u|0;a=a|0;c=c|0;f=f|0;l=l|0;var h=0,p=0,y=0,v=0,d=0,w=0,_=0,E=0;h=r|0x400,p=r|0x800,y=r|0xc00;a=a^x[(t|0)>>2],c=c^x[(t|4)>>2],f=f^x[(t|8)>>2],l=l^x[(t|12)>>2];for(E=16;(E|0)<=u<<4;E=E+16|0){v=x[(r|a>>22&1020)>>2]^x[(h|c>>14&1020)>>2]^x[(p|f>>6&1020)>>2]^x[(y|l<<2&1020)>>2]^x[(t|E|0)>>2],d=x[(r|c>>22&1020)>>2]^x[(h|f>>14&1020)>>2]^x[(p|l>>6&1020)>>2]^x[(y|a<<2&1020)>>2]^x[(t|E|4)>>2],w=x[(r|f>>22&1020)>>2]^x[(h|l>>14&1020)>>2]^x[(p|a>>6&1020)>>2]^x[(y|c<<2&1020)>>2]^x[(t|E|8)>>2],_=x[(r|l>>22&1020)>>2]^x[(h|a>>14&1020)>>2]^x[(p|c>>6&1020)>>2]^x[(y|f<<2&1020)>>2]^x[(t|E|12)>>2];a=v,c=d,f=w,l=_}n=x[(e|a>>22&1020)>>2]<<24^x[(e|c>>14&1020)>>2]<<16^x[(e|f>>6&1020)>>2]<<8^x[(e|l<<2&1020)>>2]^x[(t|E|0)>>2],i=x[(e|c>>22&1020)>>2]<<24^x[(e|f>>14&1020)>>2]<<16^x[(e|l>>6&1020)>>2]<<8^x[(e|a<<2&1020)>>2]^x[(t|E|4)>>2],o=x[(e|f>>22&1020)>>2]<<24^x[(e|l>>14&1020)>>2]<<16^x[(e|a>>6&1020)>>2]<<8^x[(e|c<<2&1020)>>2]^x[(t|E|8)>>2],s=x[(e|l>>22&1020)>>2]<<24^x[(e|a>>14&1020)>>2]<<16^x[(e|c>>6&1020)>>2]<<8^x[(e|f<<2&1020)>>2]^x[(t|E|12)>>2]}function C(t,e,r,n){t=t|0;e=e|0;r=r|0;n=n|0;k(0x0000,0x0800,0x1000,m,t,e,r,n)}function U(t,e,r,n){t=t|0;e=e|0;r=r|0;n=n|0;var o=0;k(0x0400,0x0c00,0x2000,m,t,n,r,e);o=i,i=s,s=o}function O(t,e,r,l){t=t|0;e=e|0;r=r|0;l=l|0;k(0x0000,0x0800,0x1000,m,u^t,a^e,c^r,f^l);u=n,a=i,c=o,f=s}function B(t,e,r,l){t=t|0;e=e|0;r=r|0;l=l|0;var h=0;k(0x0400,0x0c00,0x2000,m,t,l,r,e);h=i,i=s,s=h;n=n^u,i=i^a,o=o^c,s=s^f;u=t,a=e,c=r,f=l}function D(t,e,r,l){t=t|0;e=e|0;r=r|0;l=l|0;k(0x0000,0x0800,0x1000,m,u,a,c,f);u=n=n^t,a=i=i^e,c=o=o^r,f=s=s^l}function T(t,e,r,l){t=t|0;e=e|0;r=r|0;l=l|0;k(0x0000,0x0800,0x1000,m,u,a,c,f);n=n^t,i=i^e,o=o^r,s=s^l;u=t,a=e,c=r,f=l}function P(t,e,r,l){t=t|0;e=e|0;r=r|0;l=l|0;k(0x0000,0x0800,0x1000,m,u,a,c,f);u=n,a=i,c=o,f=s;n=n^t,i=i^e,o=o^r,s=s^l}function j(t,e,r,u){t=t|0;e=e|0;r=r|0;u=u|0;k(0x0000,0x0800,0x1000,m,l,h,p,y);y=~_&y|_&y+1;p=~w&p|w&p+((y|0)==0);h=~d&h|d&h+((p|0)==0);l=~v&l|v&l+((h|0)==0);n=n^t;i=i^e;o=o^r;s=s^u}function R(t,e,r,n){t=t|0;e=e|0;r=r|0;n=n|0;var i=0,o=0,s=0,l=0,h=0,p=0,y=0,v=0,d=0,w=0;t=t^u,e=e^a,r=r^c,n=n^f;i=E|0,o=g|0,s=A|0,l=b|0;for(;(d|0)<128;d=d+1|0){if(i>>>31){h=h^t,p=p^e,y=y^r,v=v^n}i=i<<1|o>>>31,o=o<<1|s>>>31,s=s<<1|l>>>31,l=l<<1;w=n&1;n=n>>>1|r<<31,r=r>>>1|e<<31,e=e>>>1|t<<31,t=t>>>1;if(w)t=t^0xe1000000}u=h,a=p,c=y,f=v}function z(t){t=t|0;m=t}function q(t,e,r,u){t=t|0;e=e|0;r=r|0;u=u|0;n=t,i=e,o=r,s=u}function H(t,e,r,n){t=t|0;e=e|0;r=r|0;n=n|0;u=t,a=e,c=r,f=n}function L(t,e,r,n){t=t|0;e=e|0;r=r|0;n=n|0;l=t,h=e,p=r,y=n}function F(t,e,r,n){t=t|0;e=e|0;r=r|0;n=n|0;v=t,d=e,w=r,_=n}function I(t,e,r,n){t=t|0;e=e|0;r=r|0;n=n|0;y=~_&y|_&n,p=~w&p|w&r,h=~d&h|d&e,l=~v&l|v&t}function M(t){t=t|0;if(t&15)return-1;S[t|0]=n>>>24,S[t|1]=n>>>16&255,S[t|2]=n>>>8&255,S[t|3]=n&255,S[t|4]=i>>>24,S[t|5]=i>>>16&255,S[t|6]=i>>>8&255,S[t|7]=i&255,S[t|8]=o>>>24,S[t|9]=o>>>16&255,S[t|10]=o>>>8&255,S[t|11]=o&255,S[t|12]=s>>>24,S[t|13]=s>>>16&255,S[t|14]=s>>>8&255,S[t|15]=s&255;return 16}function N(t){t=t|0;if(t&15)return-1;S[t|0]=u>>>24,S[t|1]=u>>>16&255,S[t|2]=u>>>8&255,S[t|3]=u&255,S[t|4]=a>>>24,S[t|5]=a>>>16&255,S[t|6]=a>>>8&255,S[t|7]=a&255,S[t|8]=c>>>24,S[t|9]=c>>>16&255,S[t|10]=c>>>8&255,S[t|11]=c&255,S[t|12]=f>>>24,S[t|13]=f>>>16&255,S[t|14]=f>>>8&255,S[t|15]=f&255;return 16}function V(){C(0,0,0,0);E=n,g=i,A=o,b=s}function K(t,e,r){t=t|0;e=e|0;r=r|0;var u=0;if(e&15)return-1;while((r|0)>=16){Z[t&7](S[e|0]<<24|S[e|1]<<16|S[e|2]<<8|S[e|3],S[e|4]<<24|S[e|5]<<16|S[e|6]<<8|S[e|7],S[e|8]<<24|S[e|9]<<16|S[e|10]<<8|S[e|11],S[e|12]<<24|S[e|13]<<16|S[e|14]<<8|S[e|15]);S[e|0]=n>>>24,S[e|1]=n>>>16&255,S[e|2]=n>>>8&255,S[e|3]=n&255,S[e|4]=i>>>24,S[e|5]=i>>>16&255,S[e|6]=i>>>8&255,S[e|7]=i&255,S[e|8]=o>>>24,S[e|9]=o>>>16&255,S[e|10]=o>>>8&255,S[e|11]=o&255,S[e|12]=s>>>24,S[e|13]=s>>>16&255,S[e|14]=s>>>8&255,S[e|15]=s&255;u=u+16|0,e=e+16|0,r=r-16|0}return u|0}function G(t,e,r){t=t|0;e=e|0;r=r|0;var n=0;if(e&15)return-1;while((r|0)>=16){J[t&1](S[e|0]<<24|S[e|1]<<16|S[e|2]<<8|S[e|3],S[e|4]<<24|S[e|5]<<16|S[e|6]<<8|S[e|7],S[e|8]<<24|S[e|9]<<16|S[e|10]<<8|S[e|11],S[e|12]<<24|S[e|13]<<16|S[e|14]<<8|S[e|15]);n=n+16|0,e=e+16|0,r=r-16|0}return n|0}var Z=[C,U,O,B,D,T,P,j];var J=[O,R];return{set_rounds:z,set_state:q,set_iv:H,set_nonce:L,set_mask:F,set_counter:I,get_state:M,get_iv:N,gcm_init:V,cipher:K,mac:G}}({Uint8Array,Uint32Array},t,e);return c.set_key=function(t,e,n,i,u,a,f,l,h){var p=s.subarray(0,60),y=s.subarray(256,316);p.set([e,n,i,u,a,f,l,h]);for(var v=t,d=1;v<4*t+28;v++){var w=p[v-1];(v%t==0||8===t&&v%t==4)&&(w=r[w>>>24]<<24^r[w>>>16&255]<<16^r[w>>>8&255]<<8^r[255&w]),v%t==0&&(w=w<<8^w>>>24^d<<24,d=d<<1^(128&d?27:0)),p[v]=p[v-t]^w}for(var _=0;_<v;_+=4)for(var E=0;E<4;E++)w=p[v-(4+_)+(4-E)%4],y[_+E]=_<4||_>=v-4?w:o[0][r[w>>>24]]^o[1][r[w>>>16&255]]^o[2][r[w>>>8&255]]^o[3][r[255&w]];c.set_rounds(t+5)},c};return c.ENC={ECB:0,CBC:2,CFB:4,OFB:6,CTR:7},c.DEC={ECB:1,CBC:3,CFB:5,OFB:6,CTR:7},c.MAC={CBC:0,GCM:1},c.HEAP_DATA=16384,c}(),o=new Uint8Array(1048576),u=i(null,o.buffer);function c(t){return t instanceof Uint8Array}function f(t,e,r,n,i){var o=t.length-e,s=o<i?o:i;return t.set(r.subarray(n,n+s),e),s}var h=function(t){s(r,t);var e=a(r);function r(t){var n,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,o=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],s=arguments.length>3?arguments[3]:void 0,u=arguments.length>4?arguments[4]:void 0;return l(this,r),(n=e.call(this,t,i,o,s,u)).mode=\\\\\\\"CBC\\\\\\\",n.BLOCK_SIZE=16,n}return p(r,[{key:\\\\\\\"encrypt\\\\\\\",value:function(t){return this.AES_Encrypt_finish(t)}},{key:\\\\\\\"decrypt\\\\\\\",value:function(t){return this.AES_Decrypt_finish(t)}}]),r}(function(){function t(e,r,n,o,s){l(this,t),this.nonce=null,this.counter=0,this.counterSize=0,this.heap=function(t,e,r){var n=e?e.byteLength:r||65536;if(4095&n||n<=0)throw new Error(\\\\\\\"heap size must be a positive integer and a multiple of 4096\\\\\\\");return e||new t(new ArrayBuffer(n))}(Uint8Array,o).subarray(i.HEAP_DATA),this.asm=s||i(null,this.heap.buffer),this.mode=null,this.key=null,this.AES_reset(e,r,n)}return p(t,[{key:\\\\\\\"AES_set_key\\\\\\\",value:function(t){if(void 0!==t){if(!c(t))throw new TypeError(\\\\\\\"unexpected key type\\\\\\\");var e=t.length;if(16!==e&&24!==e&&32!==e)throw new r(\\\\\\\"illegal key size\\\\\\\");var n=new DataView(t.buffer,t.byteOffset,t.byteLength);this.asm.set_key(e>>2,n.getUint32(0),n.getUint32(4),n.getUint32(8),n.getUint32(12),e>16?n.getUint32(16):0,e>16?n.getUint32(20):0,e>24?n.getUint32(24):0,e>24?n.getUint32(28):0),this.key=t}else if(!this.key)throw new Error(\\\\\\\"key is required\\\\\\\")}},{key:\\\\\\\"AES_CTR_set_options\\\\\\\",value:function(t,e,n){if(void 0!==n){if(n<8||n>48)throw new r(\\\\\\\"illegal counter size\\\\\\\");this.counterSize=n;var i=Math.pow(2,n)-1;this.asm.set_mask(0,0,i/4294967296|0,0|i)}else this.counterSize=n=48,this.asm.set_mask(0,0,65535,4294967295);if(void 0===t)throw new Error(\\\\\\\"nonce is required\\\\\\\");if(!c(t))throw new TypeError(\\\\\\\"unexpected nonce type\\\\\\\");var o=t.length;if(!o||o>16)throw new r(\\\\\\\"illegal nonce size\\\\\\\");this.nonce=t;var s=new DataView(new ArrayBuffer(16));if(new Uint8Array(s.buffer).set(t),this.asm.set_nonce(s.getUint32(0),s.getUint32(4),s.getUint32(8),s.getUint32(12)),void 0!==e){if(\\\\\\\"number\\\\\\\"!=typeof e)throw new TypeError(\\\\\\\"unexpected counter type\\\\\\\");if(e<0||e>=Math.pow(2,n))throw new r(\\\\\\\"illegal counter value\\\\\\\");this.counter=e,this.asm.set_counter(0,0,e/4294967296|0,0|e)}else this.counter=0}},{key:\\\\\\\"AES_set_iv\\\\\\\",value:function(t){if(void 0!==t){if(!c(t))throw new TypeError(\\\\\\\"unexpected iv type\\\\\\\");if(16!==t.length)throw new r(\\\\\\\"illegal iv size\\\\\\\");var e=new DataView(t.buffer,t.byteOffset,t.byteLength);this.iv=t,this.asm.set_iv(e.getUint32(0),e.getUint32(4),e.getUint32(8),e.getUint32(12))}else this.iv=null,this.asm.set_iv(0,0,0,0)}},{key:\\\\\\\"AES_set_padding\\\\\\\",value:function(t){this.padding=void 0===t||!!t}},{key:\\\\\\\"AES_reset\\\\\\\",value:function(t,e,r){return this.result=null,this.pos=0,this.len=0,this.AES_set_key(t),this.AES_set_iv(e),this.AES_set_padding(r),this}},{key:\\\\\\\"AES_Encrypt_process\\\\\\\",value:function(t){if(!c(t))throw new TypeError(\\\\\\\"data isn't of expected type\\\\\\\");for(var e=this.asm,r=this.heap,n=i.ENC[this.mode],o=i.HEAP_DATA,s=this.pos,u=this.len,a=0,l=t.length||0,h=0,p=0,y=new Uint8Array(u+l&-16);l>0;)u+=p=f(r,s+u,t,a,l),a+=p,l-=p,(p=e.cipher(n,o+s,u))&&y.set(r.subarray(s,s+p),h),h+=p,p<u?(s+=p,u-=p):(s=0,u=0);return this.result=y,this.pos=s,this.len=u,this}},{key:\\\\\\\"AES_Encrypt_finish\\\\\\\",value:function(t){var e=null,n=0;void 0!==t&&(n=(e=this.AES_Encrypt_process(t).result).length);var o=this.asm,s=this.heap,u=i.ENC[this.mode],a=i.HEAP_DATA,c=this.pos,f=this.len,l=16-f%16,h=f;if(this.hasOwnProperty(\\\\\\\"padding\\\\\\\")){if(this.padding){for(var p=0;p<l;++p)s[c+f+p]=l;h=f+=l}else if(f%16)throw new r(\\\\\\\"data length must be a multiple of the block size\\\\\\\")}else f+=l;var y=new Uint8Array(n+h);return n&&y.set(e),f&&o.cipher(u,a+c,f),h&&y.set(s.subarray(c,c+h),n),this.result=y,this.pos=0,this.len=0,this}},{key:\\\\\\\"AES_Decrypt_process\\\\\\\",value:function(t){if(!c(t))throw new TypeError(\\\\\\\"data isn't of expected type\\\\\\\");var e=this.asm,r=this.heap,n=i.DEC[this.mode],o=i.HEAP_DATA,s=this.pos,u=this.len,a=0,l=t.length||0,h=0,p=u+l&-16,y=0,v=0;this.padding&&(p-=y=u+l-p||16);for(var d=new Uint8Array(p);l>0;)u+=v=f(r,s+u,t,a,l),a+=v,l-=v,(v=e.cipher(n,o+s,u-(l?0:y)))&&d.set(r.subarray(s,s+v),h),h+=v,v<u?(s+=v,u-=v):(s=0,u=0);return this.result=d,this.pos=s,this.len=u,this}},{key:\\\\\\\"AES_Decrypt_finish\\\\\\\",value:function(t){var e=null,o=0;void 0!==t&&(o=(e=this.AES_Decrypt_process(t).result).length);var s=this.asm,u=this.heap,a=i.DEC[this.mode],c=i.HEAP_DATA,f=this.pos,l=this.len,h=l;if(l>0){if(l%16){if(this.hasOwnProperty(\\\\\\\"padding\\\\\\\"))throw new r(\\\\\\\"data length must be a multiple of the block size\\\\\\\");l+=16-l%16}if(s.cipher(a,c+f,l),this.hasOwnProperty(\\\\\\\"padding\\\\\\\")&&this.padding){var p=u[f+h-1];if(p<1||p>16||p>h)throw new n(\\\\\\\"bad padding\\\\\\\");for(var y=0,v=p;v>1;v--)y|=p^u[f+h-v];if(y)throw new n(\\\\\\\"bad padding\\\\\\\");h-=p}}var d=new Uint8Array(o+h);return o>0&&d.set(e),h>0&&d.set(u.subarray(f,f+h),o),this.result=d,this.pos=0,this.len=0,this}}]),t}()),y=function(t){s(r,t);var e=a(r);function r(t,n,i,o,s){return l(this,r),e.call(this,t,n,i,o,s)}return p(r,[{key:\\\\\\\"reset\\\\\\\",value:function(t){return this.AES_reset(t,null,!0)}},{key:\\\\\\\"process\\\\\\\",value:function(t){return this.AES_Encrypt_process(t)}},{key:\\\\\\\"finish\\\\\\\",value:function(t){return this.AES_Encrypt_finish(t)}}]),r}(h),v=function(t){s(r,t);var e=a(r);function r(t,n,i,o,s){return l(this,r),e.call(this,t,n,i,o,s)}return p(r,[{key:\\\\\\\"reset\\\\\\\",value:function(t){return this.AES_reset(t,null,!0)}},{key:\\\\\\\"process\\\\\\\",value:function(t){return this.AES_Decrypt_process(t)}},{key:\\\\\\\"finish\\\\\\\",value:function(t){return this.AES_Decrypt_finish(t)}}]),r}(h);h.encrypt=function(t,e,r,n){if(void 0===t)throw new SyntaxError(\\\\\\\"data required\\\\\\\");if(void 0===e)throw new SyntaxError(\\\\\\\"key required\\\\\\\");return new h(e,n,r,o,u).encrypt(t).result},h.decrypt=function(t,e,r,n){if(void 0===t)throw new SyntaxError(\\\\\\\"data required\\\\\\\");if(void 0===e)throw new SyntaxError(\\\\\\\"key required\\\\\\\");return new h(e,n,r,o,u).decrypt(t).result},t.IllegalStateError=e,t.IllegalArgumentError=r,t.SecurityError=n,t.AES_CBC=h,t.AES_CBC_Encrypt=y,t.AES_CBC_Decrypt=v,Object.defineProperty(t,\\\\\\\"__esModule\\\\\\\",{value:!0})},\\\\\\\"object\\\\\\\"===y(e)?o(e):(n=[e],void 0===(i=\\\\\\\"function\\\\\\\"==typeof(r=o)?r.apply(e,n):r)||(t.exports=i))}},e={},r=function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,r),o.exports}(447),r;var t,e,r}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\\\\n\\\\t\\\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\n//# sourceURL=webpack-internal:///../node_modules/slidecode/dist/slidecode.js\\\\n\\\");\\n\\n/***/ })\\n\\n/******/ \\t});\\n/************************************************************************/\\n/******/ \\t// The module cache\\n/******/ \\tvar __webpack_module_cache__ = {};\\n/******/ \\t\\n/******/ \\t// The require function\\n/******/ \\tfunction __webpack_require__(moduleId) {\\n/******/ \\t\\t// Check if module is in cache\\n/******/ \\t\\tvar cachedModule = __webpack_module_cache__[moduleId];\\n/******/ \\t\\tif (cachedModule !== undefined) {\\n/******/ \\t\\t\\treturn cachedModule.exports;\\n/******/ \\t\\t}\\n/******/ \\t\\t// Create a new module (and put it into the cache)\\n/******/ \\t\\tvar module = __webpack_module_cache__[moduleId] = {\\n/******/ \\t\\t\\t// no module.id needed\\n/******/ \\t\\t\\t// no module.loaded needed\\n/******/ \\t\\t\\texports: {}\\n/******/ \\t\\t};\\n/******/ \\t\\n/******/ \\t\\t// Execute the module function\\n/******/ \\t\\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\\n/******/ \\t\\n/******/ \\t\\t// Return the exports of the module\\n/******/ \\t\\treturn module.exports;\\n/******/ \\t}\\n/******/ \\t\\n/************************************************************************/\\n/******/ \\t/* webpack/runtime/compat get default export */\\n/******/ \\t!function() {\\n/******/ \\t\\t// getDefaultExport function for compatibility with non-harmony modules\\n/******/ \\t\\t__webpack_require__.n = function(module) {\\n/******/ \\t\\t\\tvar getter = module && module.__esModule ?\\n/******/ \\t\\t\\t\\tfunction() { return module['default']; } :\\n/******/ \\t\\t\\t\\tfunction() { return module; };\\n/******/ \\t\\t\\t__webpack_require__.d(getter, { a: getter });\\n/******/ \\t\\t\\treturn getter;\\n/******/ \\t\\t};\\n/******/ \\t}();\\n/******/ \\t\\n/******/ \\t/* webpack/runtime/define property getters */\\n/******/ \\t!function() {\\n/******/ \\t\\t// define getter functions for harmony exports\\n/******/ \\t\\t__webpack_require__.d = function(exports, definition) {\\n/******/ \\t\\t\\tfor(var key in definition) {\\n/******/ \\t\\t\\t\\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\\n/******/ \\t\\t\\t\\t\\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\\n/******/ \\t\\t\\t\\t}\\n/******/ \\t\\t\\t}\\n/******/ \\t\\t};\\n/******/ \\t}();\\n/******/ \\t\\n/******/ \\t/* webpack/runtime/hasOwnProperty shorthand */\\n/******/ \\t!function() {\\n/******/ \\t\\t__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }\\n/******/ \\t}();\\n/******/ \\t\\n/******/ \\t/* webpack/runtime/make namespace object */\\n/******/ \\t!function() {\\n/******/ \\t\\t// define __esModule on exports\\n/******/ \\t\\t__webpack_require__.r = function(exports) {\\n/******/ \\t\\t\\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\n/******/ \\t\\t\\t\\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\\n/******/ \\t\\t\\t}\\n/******/ \\t\\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n/******/ \\t\\t};\\n/******/ \\t}();\\n/******/ \\t\\n/************************************************************************/\\n/******/ \\t\\n/******/ \\t// startup\\n/******/ \\t// Load entry module and return exports\\n/******/ \\t// This entry module can't be inlined because the eval-source-map devtool is used.\\n/******/ \\tvar __webpack_exports__ = __webpack_require__(\\\"../node_modules/babel-loader/lib/index.js??ruleSet[1].rules[3]!../js/atlas/logic/slideDeck/slideDecoder.worker.js\\\");\\n/******/ \\t\\n/******/ })()\\n;\", \"Worker\", undefined, undefined);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../js/atlas/logic/slideDeck/slideDecoder.worker.js\n");

/***/ })

}]);