/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkustreamPlayer"] = self["webpackChunkustreamPlayer"] || []).push([["hlsjs"],{

/***/ "../js/cronus/consts.js":
/*!******************************!*\
  !*** ../js/cronus/consts.js ***!
  \******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CAPTION_OFFSET\": function() { return /* binding */ CAPTION_OFFSET; },\n/* harmony export */   \"SEEK_TO_LIVE_THRESHOLD\": function() { return /* binding */ SEEK_TO_LIVE_THRESHOLD; },\n/* harmony export */   \"SLOW_DOWNLOAD_TRESHOLD\": function() { return /* binding */ SLOW_DOWNLOAD_TRESHOLD; },\n/* harmony export */   \"STATS_UPDATE_THRESHOLD\": function() { return /* binding */ STATS_UPDATE_THRESHOLD; },\n/* harmony export */   \"TIMEUPDATE_THRESHOLD\": function() { return /* binding */ TIMEUPDATE_THRESHOLD; },\n/* harmony export */   \"USE_CUSTOM_CAPTION_RENDERER\": function() { return /* binding */ USE_CUSTOM_CAPTION_RENDERER; }\n/* harmony export */ });\n// We do not update the store if the difference between the current and the\n// previous `video.currentTime` is less than this value.\nvar TIMEUPDATE_THRESHOLD = 0.5; // sec\n\nvar STATS_UPDATE_THRESHOLD = 1; // sec\n\nvar SLOW_DOWNLOAD_TRESHOLD = 5; // sec\n\nvar CAPTION_OFFSET = -4;\nvar SEEK_TO_LIVE_THRESHOLD = 0.5; // sec\n\nvar USE_CUSTOM_CAPTION_RENDERER = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL2NvbnN0cy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ08sSUFBTUEsb0JBQW9CLEdBQUcsR0FBN0IsRUFBa0M7O0FBRWxDLElBQU1DLHNCQUFzQixHQUFHLENBQS9CLEVBQWtDOztBQUVsQyxJQUFNQyxzQkFBc0IsR0FBRyxDQUEvQixFQUFrQzs7QUFFbEMsSUFBTUMsY0FBYyxHQUFHLENBQUMsQ0FBeEI7QUFFQSxJQUFNQyxzQkFBc0IsR0FBRyxHQUEvQixFQUFvQzs7QUFFcEMsSUFBTUMsMkJBQTJCLEdBQUcsSUFBcEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy9jb25zdHMuanM/MzkzZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXZSBkbyBub3QgdXBkYXRlIHRoZSBzdG9yZSBpZiB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBjdXJyZW50IGFuZCB0aGVcbi8vIHByZXZpb3VzIGB2aWRlby5jdXJyZW50VGltZWAgaXMgbGVzcyB0aGFuIHRoaXMgdmFsdWUuXG5leHBvcnQgY29uc3QgVElNRVVQREFURV9USFJFU0hPTEQgPSAwLjU7IC8vIHNlY1xuXG5leHBvcnQgY29uc3QgU1RBVFNfVVBEQVRFX1RIUkVTSE9MRCA9IDE7IC8vIHNlY1xuXG5leHBvcnQgY29uc3QgU0xPV19ET1dOTE9BRF9UUkVTSE9MRCA9IDU7IC8vIHNlY1xuXG5leHBvcnQgY29uc3QgQ0FQVElPTl9PRkZTRVQgPSAtNDtcblxuZXhwb3J0IGNvbnN0IFNFRUtfVE9fTElWRV9USFJFU0hPTEQgPSAwLjU7IC8vIHNlY1xuXG5leHBvcnQgY29uc3QgVVNFX0NVU1RPTV9DQVBUSU9OX1JFTkRFUkVSID0gdHJ1ZTtcbiJdLCJuYW1lcyI6WyJUSU1FVVBEQVRFX1RIUkVTSE9MRCIsIlNUQVRTX1VQREFURV9USFJFU0hPTEQiLCJTTE9XX0RPV05MT0FEX1RSRVNIT0xEIiwiQ0FQVElPTl9PRkZTRVQiLCJTRUVLX1RPX0xJVkVfVEhSRVNIT0xEIiwiVVNFX0NVU1RPTV9DQVBUSU9OX1JFTkRFUkVSIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/consts.js\n");

/***/ }),

/***/ "../js/cronus/embedApi/events.js":
/*!***************************************!*\
  !*** ../js/cronus/embedApi/events.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"COMMANDS\": function() { return /* binding */ COMMANDS; },\n/* harmony export */   \"ERRORS\": function() { return /* binding */ ERRORS; },\n/* harmony export */   \"EVENTS\": function() { return /* binding */ EVENTS; },\n/* harmony export */   \"PROPERTIES\": function() { return /* binding */ PROPERTIES; }\n/* harmony export */ });\n/**\n * Embed api docs:\n * https://github.ibm.com/ustream-web-player/ustream-embedapi\n */\n\n/**\n * viewer.addListener(<EVENT>, callback)\n */\nvar EVENTS = Object.freeze({\n  audio: 'audio',\n  cc: 'cc',\n  content: 'content',\n  contentAvailable: 'contentAvailable',\n  duration: 'duration',\n  error: 'error',\n  finished: 'finished',\n  live: 'live',\n  liveCtaUpdate: 'liveCtaUpdate',\n  mediaReject: 'mediaReject',\n  meta: 'meta',\n  playing: 'playing',\n  poll: 'poll',\n  quality: 'quality',\n  ready: 'ready',\n  size: 'size',\n  seekStarted: 'seekStarted',\n  seekCompleted: 'seekCompleted',\n  share: 'share',\n  theaterMode: 'theaterMode',\n  thumbnail: 'thumbnail',\n  title: 'title',\n  trimmedDuration: 'trimmedDuration'\n});\n/**\n * viewer.callMethod(<COMMAND>, args)\n */\n\nvar COMMANDS = Object.freeze({\n  audio: 'audio',\n  cc: 'cc',\n  load: 'load',\n  pause: 'pause',\n  play: 'play',\n  probe: 'probe',\n  pollAnswer: 'pollAnswer',\n  pollTracking: 'pollTracking',\n  quality: 'quality',\n  seek: 'seek',\n  setExternalVtt: 'setExternalVtt',\n  setTitleVisibility: 'setTitleVisibility',\n  stop: 'stop',\n  theater: 'theater',\n  volume: 'volume',\n  sendLog: 'sendLog',\n  webkitEnterFullscreen: 'webkitEnterFullscreen'\n});\n/**\n * viewer.getProperty(<PROPERTY>, callback)\n */\n\nvar PROPERTIES = Object.freeze({\n  allTimeTotalViewers: 'allTimeTotalViewers',\n  content: 'content',\n  duration: 'duration',\n  playingContent: 'playingContent',\n  progress: 'progress',\n  stats: 'stats',\n  trimmedDuration: 'trimmedDuration',\n  viewers: 'viewers',\n  volume: 'volume'\n});\nvar ERRORS = Object.freeze({\n  autoplayRejected: 'autoplayRejected',\n  webkitEnterFullscreenRejected: 'webkitEnterFullscreenRejected'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDQyxNQUFQLENBQWM7QUFDbEM4QyxFQUFBQSxnQkFBZ0IsRUFBRSxrQkFEZ0I7QUFFbENDLEVBQUFBLDZCQUE2QixFQUFFO0FBRkcsQ0FBZCxDQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvZW1iZWRBcGkvZXZlbnRzLmpzPzMxNjMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFbWJlZCBhcGkgZG9jczpcbiAqIGh0dHBzOi8vZ2l0aHViLmlibS5jb20vdXN0cmVhbS13ZWItcGxheWVyL3VzdHJlYW0tZW1iZWRhcGlcbiAqL1xuXG4vKipcbiAqIHZpZXdlci5hZGRMaXN0ZW5lcig8RVZFTlQ+LCBjYWxsYmFjaylcbiAqL1xuZXhwb3J0IGNvbnN0IEVWRU5UUyA9IE9iamVjdC5mcmVlemUoe1xuICBhdWRpbzogJ2F1ZGlvJyxcbiAgY2M6ICdjYycsXG4gIGNvbnRlbnQ6ICdjb250ZW50JyxcbiAgY29udGVudEF2YWlsYWJsZTogJ2NvbnRlbnRBdmFpbGFibGUnLFxuICBkdXJhdGlvbjogJ2R1cmF0aW9uJyxcbiAgZXJyb3I6ICdlcnJvcicsXG4gIGZpbmlzaGVkOiAnZmluaXNoZWQnLFxuICBsaXZlOiAnbGl2ZScsXG4gIGxpdmVDdGFVcGRhdGU6ICdsaXZlQ3RhVXBkYXRlJyxcbiAgbWVkaWFSZWplY3Q6ICdtZWRpYVJlamVjdCcsXG4gIG1ldGE6ICdtZXRhJyxcbiAgcGxheWluZzogJ3BsYXlpbmcnLFxuICBwb2xsOiAncG9sbCcsXG4gIHF1YWxpdHk6ICdxdWFsaXR5JyxcbiAgcmVhZHk6ICdyZWFkeScsXG4gIHNpemU6ICdzaXplJyxcbiAgc2Vla1N0YXJ0ZWQ6ICdzZWVrU3RhcnRlZCcsXG4gIHNlZWtDb21wbGV0ZWQ6ICdzZWVrQ29tcGxldGVkJyxcbiAgc2hhcmU6ICdzaGFyZScsXG4gIHRoZWF0ZXJNb2RlOiAndGhlYXRlck1vZGUnLFxuICB0aHVtYm5haWw6ICd0aHVtYm5haWwnLFxuICB0aXRsZTogJ3RpdGxlJyxcbiAgdHJpbW1lZER1cmF0aW9uOiAndHJpbW1lZER1cmF0aW9uJyxcbn0pO1xuXG4vKipcbiAqIHZpZXdlci5jYWxsTWV0aG9kKDxDT01NQU5EPiwgYXJncylcbiAqL1xuZXhwb3J0IGNvbnN0IENPTU1BTkRTID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGF1ZGlvOiAnYXVkaW8nLFxuICBjYzogJ2NjJyxcbiAgbG9hZDogJ2xvYWQnLFxuICBwYXVzZTogJ3BhdXNlJyxcbiAgcGxheTogJ3BsYXknLFxuICBwcm9iZTogJ3Byb2JlJyxcbiAgcG9sbEFuc3dlcjogJ3BvbGxBbnN3ZXInLFxuICBwb2xsVHJhY2tpbmc6ICdwb2xsVHJhY2tpbmcnLFxuICBxdWFsaXR5OiAncXVhbGl0eScsXG4gIHNlZWs6ICdzZWVrJyxcbiAgc2V0RXh0ZXJuYWxWdHQ6ICdzZXRFeHRlcm5hbFZ0dCcsXG4gIHNldFRpdGxlVmlzaWJpbGl0eTogJ3NldFRpdGxlVmlzaWJpbGl0eScsXG4gIHN0b3A6ICdzdG9wJyxcbiAgdGhlYXRlcjogJ3RoZWF0ZXInLFxuICB2b2x1bWU6ICd2b2x1bWUnLFxuICBzZW5kTG9nOiAnc2VuZExvZycsXG4gIHdlYmtpdEVudGVyRnVsbHNjcmVlbjogJ3dlYmtpdEVudGVyRnVsbHNjcmVlbicsXG59KTtcblxuLyoqXG4gKiB2aWV3ZXIuZ2V0UHJvcGVydHkoPFBST1BFUlRZPiwgY2FsbGJhY2spXG4gKi9cbmV4cG9ydCBjb25zdCBQUk9QRVJUSUVTID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGFsbFRpbWVUb3RhbFZpZXdlcnM6ICdhbGxUaW1lVG90YWxWaWV3ZXJzJyxcbiAgY29udGVudDogJ2NvbnRlbnQnLFxuICBkdXJhdGlvbjogJ2R1cmF0aW9uJyxcbiAgcGxheWluZ0NvbnRlbnQ6ICdwbGF5aW5nQ29udGVudCcsXG4gIHByb2dyZXNzOiAncHJvZ3Jlc3MnLFxuICBzdGF0czogJ3N0YXRzJyxcbiAgdHJpbW1lZER1cmF0aW9uOiAndHJpbW1lZER1cmF0aW9uJyxcbiAgdmlld2VyczogJ3ZpZXdlcnMnLFxuICB2b2x1bWU6ICd2b2x1bWUnLFxufSk7XG5cbmV4cG9ydCBjb25zdCBFUlJPUlMgPSBPYmplY3QuZnJlZXplKHtcbiAgYXV0b3BsYXlSZWplY3RlZDogJ2F1dG9wbGF5UmVqZWN0ZWQnLFxuICB3ZWJraXRFbnRlckZ1bGxzY3JlZW5SZWplY3RlZDogJ3dlYmtpdEVudGVyRnVsbHNjcmVlblJlamVjdGVkJyxcbn0pO1xuIl0sIm5hbWVzIjpbIkVWRU5UUyIsIk9iamVjdCIsImZyZWV6ZSIsImF1ZGlvIiwiY2MiLCJjb250ZW50IiwiY29udGVudEF2YWlsYWJsZSIsImR1cmF0aW9uIiwiZXJyb3IiLCJmaW5pc2hlZCIsImxpdmUiLCJsaXZlQ3RhVXBkYXRlIiwibWVkaWFSZWplY3QiLCJtZXRhIiwicGxheWluZyIsInBvbGwiLCJxdWFsaXR5IiwicmVhZHkiLCJzaXplIiwic2Vla1N0YXJ0ZWQiLCJzZWVrQ29tcGxldGVkIiwic2hhcmUiLCJ0aGVhdGVyTW9kZSIsInRodW1ibmFpbCIsInRpdGxlIiwidHJpbW1lZER1cmF0aW9uIiwiQ09NTUFORFMiLCJsb2FkIiwicGF1c2UiLCJwbGF5IiwicHJvYmUiLCJwb2xsQW5zd2VyIiwicG9sbFRyYWNraW5nIiwic2VlayIsInNldEV4dGVybmFsVnR0Iiwic2V0VGl0bGVWaXNpYmlsaXR5Iiwic3RvcCIsInRoZWF0ZXIiLCJ2b2x1bWUiLCJzZW5kTG9nIiwid2Via2l0RW50ZXJGdWxsc2NyZWVuIiwiUFJPUEVSVElFUyIsImFsbFRpbWVUb3RhbFZpZXdlcnMiLCJwbGF5aW5nQ29udGVudCIsInByb2dyZXNzIiwic3RhdHMiLCJ2aWV3ZXJzIiwiRVJST1JTIiwiYXV0b3BsYXlSZWplY3RlZCIsIndlYmtpdEVudGVyRnVsbHNjcmVlblJlamVjdGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/embedApi/events.js\n");

/***/ }),

/***/ "../js/cronus/embedApi/helpers.js":
/*!****************************************!*\
  !*** ../js/cronus/embedApi/helpers.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"areSameHost\": function() { return /* binding */ areSameHost; },\n/* harmony export */   \"getHost\": function() { return /* binding */ getHost; },\n/* harmony export */   \"getOrigin\": function() { return /* binding */ getOrigin; },\n/* harmony export */   \"parseData\": function() { return /* binding */ parseData; },\n/* harmony export */   \"toBoolean\": function() { return /* binding */ toBoolean; },\n/* harmony export */   \"toFloat\": function() { return /* binding */ toFloat; },\n/* harmony export */   \"toNumber\": function() { return /* binding */ toNumber; }\n/* harmony export */ });\n/* harmony import */ var player_utils_number_isNaN__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! player-utils/number/isNaN */ \"../node_modules/player-utils/number/isNaN.js\");\n\n/**\n * @param {string} url\n * @return {string}\n */\n\nfunction getHost(url) {\n  try {\n    return new URL(url).host;\n  } catch (e) {\n    return '';\n  }\n}\n/**\n * @param {string} url\n * @return {string}\n */\n\nfunction getOrigin(url) {\n  try {\n    return new URL(url).origin;\n  } catch (e) {\n    return '';\n  }\n}\n/**\n * @param {string} data\n * @return {object}\n */\n\nfunction parseData(data) {\n  try {\n    return JSON.parse(data);\n  } catch (error) {\n    return {};\n  }\n}\n/**\n * @param {string} one\n * @param {string} other\n * @return {boolean}\n */\n\nfunction areSameHost(one, other) {\n  return getHost(one) === getHost(other);\n}\n/**\n * @param {*} arg\n * @returns {{ error: boolean, value: number|undefined }}\n */\n\nfunction toFloat(arg) {\n  var value = parseFloat(arg);\n\n  if ((0,player_utils_number_isNaN__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value) || !Number.isFinite(value)) {\n    return {\n      error: true,\n      value: undefined\n    };\n  }\n\n  return {\n    error: false,\n    value: value\n  };\n}\n/**\n * @param {*} arg\n * @returns {{ error: boolean, value: number|undefined }}\n */\n\nfunction toNumber(arg) {\n  var value = parseInt(arg, 10);\n\n  if ((0,player_utils_number_isNaN__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value)) {\n    return {\n      error: true,\n      value: undefined\n    };\n  }\n\n  return {\n    error: false,\n    value: value\n  };\n}\n/**\n * @param {*} arg\n * @returns {{ error: boolean, value: boolean|undefined }}\n */\n\nfunction toBoolean(arg) {\n  if (typeof arg === 'boolean') {\n    return {\n      error: false,\n      value: arg\n    };\n  }\n\n  if (arg === 'true' || arg === 'false' || arg === '') {\n    return {\n      error: false,\n      value: arg === 'true'\n    };\n  }\n\n  var _toNumber = toNumber(arg),\n      error = _toNumber.error,\n      value = _toNumber.value;\n\n  if (!error && (value === 1 || value === 0)) {\n    return {\n      error: false,\n      value: !!value\n    };\n  }\n\n  return {\n    error: error,\n    value: undefined\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFlQSxLQUFmOztBQUNBLE1BQUksQ0FBQ04sS0FBRCxLQUFXTSxLQUFLLEtBQUssQ0FBVixJQUFlQSxLQUFLLEtBQUssQ0FBcEMsQ0FBSixFQUE0QztBQUMxQyxXQUFPO0FBQUVOLE1BQUFBLEtBQUssRUFBRSxLQUFUO0FBQWdCTSxNQUFBQSxLQUFLLEVBQUUsQ0FBQyxDQUFDQTtBQUF6QixLQUFQO0FBQ0Q7O0FBRUQsU0FBTztBQUFFTixJQUFBQSxLQUFLLEVBQUxBLEtBQUY7QUFBU00sSUFBQUEsS0FBSyxFQUFFSTtBQUFoQixHQUFQO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy9lbWJlZEFwaS9oZWxwZXJzLmpzP2QzOTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGlzTmFOIGZyb20gJ3BsYXllci11dGlscy9udW1iZXIvaXNOYU4nO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEhvc3QodXJsKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIG5ldyBVUkwodXJsKS5ob3N0O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3JpZ2luKHVybCkge1xuICB0cnkge1xuICAgIHJldHVybiBuZXcgVVJMKHVybCkub3JpZ2luO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGRhdGFcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRGF0YShkYXRhKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG9uZVxuICogQHBhcmFtIHtzdHJpbmd9IG90aGVyXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXJlU2FtZUhvc3Qob25lLCBvdGhlcikge1xuICByZXR1cm4gZ2V0SG9zdChvbmUpID09PSBnZXRIb3N0KG90aGVyKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geyp9IGFyZ1xuICogQHJldHVybnMge3sgZXJyb3I6IGJvb2xlYW4sIHZhbHVlOiBudW1iZXJ8dW5kZWZpbmVkIH19XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0Zsb2F0KGFyZykge1xuICBjb25zdCB2YWx1ZSA9IHBhcnNlRmxvYXQoYXJnKTtcbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCAhTnVtYmVyLmlzRmluaXRlKHZhbHVlKSkge1xuICAgIHJldHVybiB7IGVycm9yOiB0cnVlLCB2YWx1ZTogdW5kZWZpbmVkIH07XG4gIH1cbiAgcmV0dXJuIHsgZXJyb3I6IGZhbHNlLCB2YWx1ZSB9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Kn0gYXJnXG4gKiBAcmV0dXJucyB7eyBlcnJvcjogYm9vbGVhbiwgdmFsdWU6IG51bWJlcnx1bmRlZmluZWQgfX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvTnVtYmVyKGFyZykge1xuICBjb25zdCB2YWx1ZSA9IHBhcnNlSW50KGFyZywgMTApO1xuICBpZiAoaXNOYU4odmFsdWUpKSB7XG4gICAgcmV0dXJuIHsgZXJyb3I6IHRydWUsIHZhbHVlOiB1bmRlZmluZWQgfTtcbiAgfVxuICByZXR1cm4geyBlcnJvcjogZmFsc2UsIHZhbHVlIH07XG59XG5cbi8qKlxuICogQHBhcmFtIHsqfSBhcmdcbiAqIEByZXR1cm5zIHt7IGVycm9yOiBib29sZWFuLCB2YWx1ZTogYm9vbGVhbnx1bmRlZmluZWQgfX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvQm9vbGVhbihhcmcpIHtcbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdib29sZWFuJykge1xuICAgIHJldHVybiB7IGVycm9yOiBmYWxzZSwgdmFsdWU6IGFyZyB9O1xuICB9XG5cbiAgaWYgKGFyZyA9PT0gJ3RydWUnIHx8IGFyZyA9PT0gJ2ZhbHNlJyB8fCBhcmcgPT09ICcnKSB7XG4gICAgcmV0dXJuIHsgZXJyb3I6IGZhbHNlLCB2YWx1ZTogYXJnID09PSAndHJ1ZScgfTtcbiAgfVxuXG4gIGNvbnN0IHsgZXJyb3IsIHZhbHVlIH0gPSB0b051bWJlcihhcmcpO1xuICBpZiAoIWVycm9yICYmICh2YWx1ZSA9PT0gMSB8fCB2YWx1ZSA9PT0gMCkpIHtcbiAgICByZXR1cm4geyBlcnJvcjogZmFsc2UsIHZhbHVlOiAhIXZhbHVlIH07XG4gIH1cblxuICByZXR1cm4geyBlcnJvciwgdmFsdWU6IHVuZGVmaW5lZCB9O1xufVxuIl0sIm5hbWVzIjpbImlzTmFOIiwiZ2V0SG9zdCIsInVybCIsIlVSTCIsImhvc3QiLCJlIiwiZ2V0T3JpZ2luIiwib3JpZ2luIiwicGFyc2VEYXRhIiwiZGF0YSIsIkpTT04iLCJwYXJzZSIsImVycm9yIiwiYXJlU2FtZUhvc3QiLCJvbmUiLCJvdGhlciIsInRvRmxvYXQiLCJhcmciLCJ2YWx1ZSIsInBhcnNlRmxvYXQiLCJOdW1iZXIiLCJpc0Zpbml0ZSIsInVuZGVmaW5lZCIsInRvTnVtYmVyIiwicGFyc2VJbnQiLCJ0b0Jvb2xlYW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/embedApi/helpers.js\n");

/***/ }),

/***/ "../js/cronus/embedApi/index.js":
/*!**************************************!*\
  !*** ../js/cronus/embedApi/index.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"COMMANDS\": function() { return /* reexport safe */ cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_0__.COMMANDS; },\n/* harmony export */   \"ERRORS\": function() { return /* reexport safe */ cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_0__.ERRORS; },\n/* harmony export */   \"EVENTS\": function() { return /* reexport safe */ cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_0__.EVENTS; },\n/* harmony export */   \"PROPERTIES\": function() { return /* reexport safe */ cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_0__.PROPERTIES; },\n/* harmony export */   \"init\": function() { return /* binding */ init; },\n/* harmony export */   \"reset\": function() { return /* binding */ reset; },\n/* harmony export */   \"sendEvent\": function() { return /* binding */ sendEvent; },\n/* harmony export */   \"sendProperty\": function() { return /* binding */ sendProperty; }\n/* harmony export */ });\n/* harmony import */ var cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/embedApi/events */ \"../js/cronus/embedApi/events.js\");\n/* harmony import */ var cronus_embedApi_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/embedApi/helpers */ \"../js/cronus/embedApi/helpers.js\");\n/* harmony import */ var cronus_embedApi_proxy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/embedApi/proxy */ \"../js/cronus/embedApi/proxy.js\");\n/* harmony import */ var cronus_store__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/store */ \"../js/cronus/store/index.js\");\n/* harmony import */ var shared_lib_logger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! shared/lib/logger */ \"../js/shared/lib/logger/index.js\");\n/* harmony import */ var cronus_store_selectors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cronus/store/selectors */ \"../js/cronus/store/selectors/index.js\");\n/* harmony import */ var cronus_config_initial__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! cronus/config/initial */ \"../js/cronus/config/initial.js\");\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\nvar dependencies = null;\nvar inited = false;\nvar apiTargetOrigin;\nvar apiTargetOriginKey = 'api-target-origin';\nvar unsubsribe = {};\nvar debugLogger = (0,shared_lib_logger__WEBPACK_IMPORTED_MODULE_4__.createLoggerForModule)('cronus/embedApi');\n\nfunction onMessage(e) {\n  var origin = e.origin;\n  var _window = window,\n      location = _window.location;\n  var currentReferrer = document.referrer || location.href;\n\n  if (!currentReferrer) {\n    debugLogger.debug('message event handler error: no referrer ');\n    return;\n  }\n\n  if (origin === getTargetOrigin(currentReferrer) || (0,cronus_embedApi_helpers__WEBPACK_IMPORTED_MODULE_1__.areSameHost)(origin, location.href)) {\n    var data = (0,cronus_embedApi_helpers__WEBPACK_IMPORTED_MODULE_1__.parseData)(e.data);\n\n    if (data.cmd) {\n      debugLogger.debug('message event received ', [e.origin, data]);\n      (0,cronus_embedApi_proxy__WEBPACK_IMPORTED_MODULE_2__.onEmbedApiRequest)(data, dependencies);\n    }\n  }\n}\n\nfunction initEventHandlers() {\n  unsubsribe.title = cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.subscribe('content.title', function (title) {\n    if (typeof title === 'string') {\n      sendEvent(cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_0__.EVENTS.title, title);\n    }\n  });\n  unsubsribe.thumbnails = cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.subscribe('content.thumbnails', function (thumbnail) {\n    return sendEvent(cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_0__.EVENTS.thumbnail, thumbnail);\n  });\n  unsubsribe.mediaId = cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.subscribe('content.mediaId', function () {\n    var _getMediaIdAsArray = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_5__.getMediaIdAsArray)(cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.getState()),\n        _getMediaIdAsArray2 = _slicedToArray(_getMediaIdAsArray, 2),\n        type = _getMediaIdAsArray2[0],\n        id = _getMediaIdAsArray2[1];\n\n    if (type) {\n      sendEvent(cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_0__.EVENTS.content, [type, parseInt(id, 10)]);\n    }\n  });\n  unsubsribe.duration = cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.subscribe('content.duration', function (duration) {\n    if (typeof duration === 'number' && Number.isFinite(duration)) {\n      sendEvent(cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_0__.EVENTS.duration, duration);\n    }\n  });\n  unsubsribe.trimmedDuration = cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.subscribe('content.trimmedDuration', function (trimmedDuration) {\n    if (typeof trimmedDuration === 'number' && Number.isFinite(trimmedDuration)) {\n      sendEvent(cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_0__.EVENTS.trimmedDuration, trimmedDuration);\n    }\n  });\n  unsubsribe.liveStatus = cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.subscribe('content.liveStatus', function (liveStatus) {\n    if (liveStatus !== undefined) {\n      sendEvent(cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_0__.EVENTS.live, liveStatus);\n    }\n  });\n  unsubsribe.size = cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.subscribe('player.playerSize', function (size) {\n    return sendEvent(cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_0__.EVENTS.size, [size.width, size.height]);\n  });\n  unsubsribe.share = cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.subscribe('share', function (share) {\n    return sendEvent(cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_0__.EVENTS.share, share);\n  });\n  unsubsribe.liveCTA = cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.subscribe('liveCTA', function (liveCTA) {\n    return sendEvent(cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_0__.EVENTS.liveCtaUpdate, liveCTA);\n  });\n  unsubsribe.qualities = cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.subscribe('qos.qualities', function () {\n    sendEvent(cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_0__.EVENTS.quality, (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_5__.getEmbedAPIQualities)(cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.getState()));\n  });\n  unsubsribe.qualitySelected = cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.subscribe('qos.selectedId', function () {\n    sendEvent(cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_0__.EVENTS.quality, (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_5__.getEmbedAPIQualities)(cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.getState()));\n  });\n}\n\nfunction resetEventHandlers() {\n  Object.values(unsubsribe).forEach(function (callback) {\n    return callback();\n  });\n}\n/**\n * @param {string} target\n * @returns {string}\n */\n\n\nfunction getTargetOrigin(target) {\n  if (apiTargetOrigin) {\n    return apiTargetOrigin;\n  }\n\n  return (0,cronus_embedApi_helpers__WEBPACK_IMPORTED_MODULE_1__.getOrigin)(target);\n}\n\nfunction send(type) {\n  return function (key, data) {\n    var target = document.referrer || window.location.href;\n    var targetWindow = window.parent;\n\n    if (window === window.parent || /^(\\/internal)?\\/combined-embed\\//.test(window.location.pathname)) {\n      target = window.location.href;\n      targetWindow = window;\n    }\n\n    if (!target) {\n      return;\n    }\n\n    var targetOrigin = getTargetOrigin(target);\n\n    if (!targetOrigin) {\n      return;\n    }\n\n    if (key !== 'progress') {\n      debugLogger.debug(type === 'property' ? 'send property' : 'send event', [key, data]);\n    }\n\n    var object = _defineProperty({}, type, _defineProperty({}, key, data));\n\n    targetWindow.postMessage(JSON.stringify(object), targetOrigin);\n  };\n}\n\nfunction init(options) {\n  if (inited) {\n    reset();\n  }\n\n  dependencies = options;\n  initEventHandlers();\n\n  if ((0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_6__.getInitialConfig)(apiTargetOriginKey)) {\n    var apiTarget = decodeURIComponent((0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_6__.getInitialConfig)(apiTargetOriginKey));\n\n    try {\n      var apiUrl = new URL(apiTarget);\n      apiTargetOrigin = apiUrl.origin;\n    } catch (e) {\n      debugLogger.error('api-target-origin is not a valid URL');\n    }\n  }\n\n  window.addEventListener('message', onMessage);\n  inited = true;\n}\nfunction reset() {\n  resetEventHandlers();\n  window.removeEventListener('message', onMessage);\n  dependencies = null;\n  inited = false;\n}\n\nvar sendEvent = send('event');\nvar sendProperty = send('property');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../js/cronus/embedApi/index.js\n");

/***/ }),

/***/ "../js/cronus/embedApi/proxy.js":
/*!**************************************!*\
  !*** ../js/cronus/embedApi/proxy.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"onEmbedApiRequest\": function() { return /* binding */ onEmbedApiRequest; }\n/* harmony export */ });\n/* harmony import */ var player_utils_number_clamp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! player-utils/number/clamp */ \"../node_modules/player-utils/number/clamp.js\");\n/* harmony import */ var player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! player-utils/object/get */ \"../node_modules/player-utils/object/get.js\");\n/* harmony import */ var cronus_embedApi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/embedApi */ \"../js/cronus/embedApi/index.js\");\n/* harmony import */ var cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/embedApi/events */ \"../js/cronus/embedApi/events.js\");\n/* harmony import */ var cronus_embedApi_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! cronus/embedApi/helpers */ \"../js/cronus/embedApi/helpers.js\");\n/* harmony import */ var cronus_store__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cronus/store */ \"../js/cronus/store/index.js\");\n/* harmony import */ var shared_store_actions_settings__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! shared/store/actions/settings */ \"../js/shared/store/actions/settings.js\");\n/* harmony import */ var shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! shared/store/actions/playback */ \"../js/shared/store/actions/playback.js\");\n/* harmony import */ var cronus_store_actions_content__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! cronus/store/actions/content */ \"../js/cronus/store/actions/content.js\");\n/* harmony import */ var shared_store_actions_externalVtt__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! shared/store/actions/externalVtt */ \"../js/shared/store/actions/externalVtt.js\");\n/* harmony import */ var shared_store_actions_content__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! shared/store/actions/content */ \"../js/shared/store/actions/content.js\");\n/* harmony import */ var shared_store_actions_player__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! shared/store/actions/player */ \"../js/shared/store/actions/player.js\");\n/* harmony import */ var shared_store_selectors__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! shared/store/selectors */ \"../js/shared/store/selectors/index.js\");\n/* harmony import */ var cronus_store_selectors__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! cronus/store/selectors */ \"../js/cronus/store/selectors/index.js\");\n/* harmony import */ var shared_logic_progressHistory__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! shared/logic/progressHistory */ \"../js/shared/logic/progressHistory.js\");\n/* harmony import */ var cronus_logic_seekPosition__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! cronus/logic/seekPosition */ \"../js/cronus/logic/seekPosition.js\");\n/* harmony import */ var shared_logic_logsender__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! shared/logic/logsender */ \"../js/shared/logic/logsender.js\");\n/* harmony import */ var shared_lib_logger__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! shared/lib/logger */ \"../js/shared/lib/logger/index.js\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar debugLogger = (0,shared_lib_logger__WEBPACK_IMPORTED_MODULE_17__.createLoggerForModule)('embedApi/proxy');\n\nfunction onPropertyRequest(data) {\n  switch (data.cmd) {\n    case cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__.PROPERTIES.volume:\n      {\n        var _data$args = _slicedToArray(data.args, 1),\n            arg = _data$args[0];\n\n        if (arg === null || arg === undefined) {\n          var volume = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(cronus_store__WEBPACK_IMPORTED_MODULE_5__.wrappedStore.getState(), 'player.volume', 0);\n          (0,cronus_embedApi__WEBPACK_IMPORTED_MODULE_2__.sendProperty)(data.cmd, volume);\n        }\n\n        break;\n      }\n\n    case cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__.PROPERTIES.duration:\n      {\n        var duration = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(cronus_store__WEBPACK_IMPORTED_MODULE_5__.wrappedStore.getState(), 'content.duration', 0);\n        (0,cronus_embedApi__WEBPACK_IMPORTED_MODULE_2__.sendProperty)(data.cmd, duration);\n        break;\n      }\n\n    case cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__.PROPERTIES.trimmedDuration:\n      {\n        var trimmedDuration = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(cronus_store__WEBPACK_IMPORTED_MODULE_5__.wrappedStore.getState(), 'content.trimmedDuration', 0);\n        (0,cronus_embedApi__WEBPACK_IMPORTED_MODULE_2__.sendProperty)(data.cmd, trimmedDuration);\n        break;\n      }\n\n    case cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__.PROPERTIES.viewers:\n      {\n        var viewers = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(cronus_store__WEBPACK_IMPORTED_MODULE_5__.wrappedStore.getState(), 'viewers.viewers');\n        (0,cronus_embedApi__WEBPACK_IMPORTED_MODULE_2__.sendProperty)(data.cmd, viewers || 0);\n        break;\n      }\n\n    case cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__.PROPERTIES.allTimeTotalViewers:\n      {\n        var allTimeTotalViewers = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(cronus_store__WEBPACK_IMPORTED_MODULE_5__.wrappedStore.getState(), 'viewers.allTimeTotal');\n        (0,cronus_embedApi__WEBPACK_IMPORTED_MODULE_2__.sendProperty)(data.cmd, allTimeTotalViewers || 0);\n        break;\n      }\n\n    case cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__.PROPERTIES.content:\n      {\n        var _getMediaIdAsArray = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_13__.getMediaIdAsArray)(cronus_store__WEBPACK_IMPORTED_MODULE_5__.wrappedStore.getState()),\n            _getMediaIdAsArray2 = _slicedToArray(_getMediaIdAsArray, 2),\n            type = _getMediaIdAsArray2[0],\n            id = _getMediaIdAsArray2[1];\n\n        if (type) {\n          (0,cronus_embedApi__WEBPACK_IMPORTED_MODULE_2__.sendProperty)(data.cmd, [type, parseInt(id, 10)]);\n        } else {\n          (0,cronus_embedApi__WEBPACK_IMPORTED_MODULE_2__.sendProperty)(data.cmd, []);\n        }\n\n        break;\n      }\n\n    case cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__.PROPERTIES.playingContent:\n      {\n        var _getActiveMediaIdAsOb = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_13__.getActiveMediaIdAsObject)(cronus_store__WEBPACK_IMPORTED_MODULE_5__.wrappedStore.getState()),\n            _type = _getActiveMediaIdAsOb.type,\n            _id = _getActiveMediaIdAsOb.id;\n\n        if (_type) {\n          (0,cronus_embedApi__WEBPACK_IMPORTED_MODULE_2__.sendProperty)(data.cmd, [_type, parseInt(_id, 10)]);\n        } else {\n          (0,cronus_embedApi__WEBPACK_IMPORTED_MODULE_2__.sendProperty)(data.cmd, []);\n        }\n\n        break;\n      }\n\n    case cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__.PROPERTIES.progress:\n      {\n        var state = cronus_store__WEBPACK_IMPORTED_MODULE_5__.wrappedStore.getState();\n        var liveStatus = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_13__.getLiveStatus)(state);\n\n        if (liveStatus) {\n          (0,cronus_embedApi__WEBPACK_IMPORTED_MODULE_2__.sendProperty)(data.cmd, 0);\n          return;\n        }\n\n        var currentTime = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_12__.getCurrentTime)(cronus_store__WEBPACK_IMPORTED_MODULE_5__.wrappedStore.getState());\n        var relativePosition = (0,cronus_logic_seekPosition__WEBPACK_IMPORTED_MODULE_15__.getRelativeSeekPositionInMs)(currentTime * 1000) / 1000;\n        (0,cronus_embedApi__WEBPACK_IMPORTED_MODULE_2__.sendProperty)(data.cmd, parseFloat(relativePosition.toFixed(3)));\n        break;\n      }\n\n    case cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__.PROPERTIES.stats:\n      {\n        var stats = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_12__.getFormattedStats)(cronus_store__WEBPACK_IMPORTED_MODULE_5__.wrappedStore.getState());\n        (0,cronus_embedApi__WEBPACK_IMPORTED_MODULE_2__.sendProperty)(data.cmd, stats);\n        break;\n      }\n\n    default:\n      break;\n  }\n}\n\nfunction onCommandRequest(data, dependencies) {\n  var ui = dependencies.ui,\n      playback = dependencies.playback;\n\n  switch (data.cmd) {\n    case cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__.COMMANDS.probe:\n      {\n        var ready = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_12__.isReady)(cronus_store__WEBPACK_IMPORTED_MODULE_5__.wrappedStore.getState());\n\n        if (ready) {\n          (0,cronus_embedApi__WEBPACK_IMPORTED_MODULE_2__.sendEvent)(cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__.EVENTS.ready, true);\n        }\n\n        break;\n      }\n\n    case cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__.COMMANDS.play:\n      {\n        var state = cronus_store__WEBPACK_IMPORTED_MODULE_5__.wrappedStore.getState();\n        var canPlay = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_13__.getCanPlay)(state);\n\n        if (canPlay) {\n          playback.play();\n        } else {\n          cronus_store__WEBPACK_IMPORTED_MODULE_5__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_7__.togglePlaying)(true));\n        }\n\n        break;\n      }\n\n    case cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__.COMMANDS.pause:\n      {\n        playback.pause();\n        break;\n      }\n\n    case cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__.COMMANDS.stop:\n      {\n        playback.pause();\n        playback.seek((0,cronus_logic_seekPosition__WEBPACK_IMPORTED_MODULE_15__.getAbsoluteSeekPositionInSec)(0));\n        break;\n      }\n\n    case cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__.COMMANDS.volume:\n      {\n        var _data$args2 = _slicedToArray(data.args, 1),\n            volume = _data$args2[0];\n\n        var _toNumber = (0,cronus_embedApi_helpers__WEBPACK_IMPORTED_MODULE_4__.toNumber)(volume),\n            error = _toNumber.error,\n            value = _toNumber.value;\n\n        if (!error) {\n          cronus_store__WEBPACK_IMPORTED_MODULE_5__.wrappedStore.dispatch((0,shared_store_actions_player__WEBPACK_IMPORTED_MODULE_11__.setVolume)((0,player_utils_number_clamp__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value, {\n            lower: 0,\n            upper: 100\n          })));\n        }\n\n        break;\n      }\n\n    case cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__.COMMANDS.seek:\n      {\n        var _data$args3 = _slicedToArray(data.args, 1),\n            position = _data$args3[0];\n\n        var _toFloat = (0,cronus_embedApi_helpers__WEBPACK_IMPORTED_MODULE_4__.toFloat)(position),\n            _error = _toFloat.error,\n            _value = _toFloat.value;\n\n        if (!_error) {\n          var relativeSeekTimeInSec = (0,player_utils_number_clamp__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_value, {\n            lower: 0\n          });\n          var absoluteSeekTimeInSec = (0,cronus_logic_seekPosition__WEBPACK_IMPORTED_MODULE_15__.getAbsoluteSeekPositionInSec)(relativeSeekTimeInSec);\n\n          if ((0,cronus_logic_seekPosition__WEBPACK_IMPORTED_MODULE_15__.isSeekAvailable)()) {\n            playback.seek(absoluteSeekTimeInSec);\n            cronus_store__WEBPACK_IMPORTED_MODULE_5__.wrappedStore.dispatch((0,cronus_store_actions_content__WEBPACK_IMPORTED_MODULE_8__.setInitialSeekTimeInMs)());\n          } else {\n            cronus_store__WEBPACK_IMPORTED_MODULE_5__.wrappedStore.dispatch((0,cronus_store_actions_content__WEBPACK_IMPORTED_MODULE_8__.setInitialApiSeekTimeInMs)(relativeSeekTimeInSec * 1000));\n          }\n\n          var _getActiveMediaIdAsOb2 = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_13__.getActiveMediaIdAsObject)(cronus_store__WEBPACK_IMPORTED_MODULE_5__.wrappedStore.getState()),\n              id = _getActiveMediaIdAsOb2.id;\n\n          shared_logic_progressHistory__WEBPACK_IMPORTED_MODULE_14__[\"default\"].removeProgressForVideoId(id);\n        }\n\n        break;\n      }\n\n    case cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__.COMMANDS.load:\n      {\n        var _data$args4 = _slicedToArray(data.args, 2),\n            type = _data$args4[0],\n            _id2 = _data$args4[1];\n\n        var mediaType = type === 'video' ? shared_store_actions_content__WEBPACK_IMPORTED_MODULE_10__.MEDIA_TYPES.recorded : shared_store_actions_content__WEBPACK_IMPORTED_MODULE_10__.MEDIA_TYPES.live;\n        var mediaId = \"\".concat(type === 'channel' ? type : 'recorded', \".\").concat(_id2);\n        cronus_store__WEBPACK_IMPORTED_MODULE_5__.wrappedStore.dispatch((0,cronus_store_actions_content__WEBPACK_IMPORTED_MODULE_8__.setMediaChange)({\n          mediaId: mediaId,\n          mediaType: mediaType\n        }));\n        break;\n      }\n\n    case cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__.COMMANDS.quality:\n      {\n        var _data$args5 = _slicedToArray(data.args, 1),\n            qualityId = _data$args5[0];\n\n        var _toNumber2 = (0,cronus_embedApi_helpers__WEBPACK_IMPORTED_MODULE_4__.toNumber)(qualityId),\n            _error2 = _toNumber2.error,\n            _value2 = _toNumber2.value;\n\n        if (!_error2) {\n          playback.setQuality(_value2);\n        }\n\n        break;\n      }\n\n    case cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__.COMMANDS.pollAnswer:\n      {\n        var _data$args6 = _slicedToArray(data.args, 1),\n            answerData = _data$args6[0];\n\n        ui.setPollAnswer(answerData);\n        break;\n      }\n\n    case cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__.COMMANDS.pollTracking:\n      {\n        var _data$args7 = _slicedToArray(data.args, 1),\n            trackingData = _data$args7[0];\n\n        ui.setPollTracking(trackingData);\n        break;\n      }\n\n    case cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__.COMMANDS.theater:\n      {\n        var _data$args8 = _slicedToArray(data.args, 1),\n            visible = _data$args8[0];\n\n        var _toBoolean = (0,cronus_embedApi_helpers__WEBPACK_IMPORTED_MODULE_4__.toBoolean)(visible),\n            _error3 = _toBoolean.error,\n            _value3 = _toBoolean.value;\n\n        if (!_error3) {\n          cronus_store__WEBPACK_IMPORTED_MODULE_5__.wrappedStore.dispatch((0,shared_store_actions_player__WEBPACK_IMPORTED_MODULE_11__.toggleTheaterMode)({\n            visible: _value3\n          }));\n        }\n\n        break;\n      }\n\n    case cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__.COMMANDS.requestWebkitEnterFullscreen:\n      {\n        playback.webkitEnterFullscreen();\n        break;\n      }\n\n    case cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__.COMMANDS.setTitleVisibility:\n      {\n        var _data$args9 = _slicedToArray(data.args, 1),\n            _visible = _data$args9[0];\n\n        var _toBoolean2 = (0,cronus_embedApi_helpers__WEBPACK_IMPORTED_MODULE_4__.toBoolean)(_visible),\n            _error4 = _toBoolean2.error,\n            _value4 = _toBoolean2.value;\n\n        if (!_error4) {\n          cronus_store__WEBPACK_IMPORTED_MODULE_5__.wrappedStore.dispatch((0,shared_store_actions_settings__WEBPACK_IMPORTED_MODULE_6__.toggleTitleVisibility)(_value4));\n        }\n\n        break;\n      }\n\n    case cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__.COMMANDS.setExternalVtt:\n      {\n        var _data$args10 = _slicedToArray(data.args, 1),\n            _data$args10$ = _slicedToArray(_data$args10[0], 1),\n            cues = _data$args10$[0].forVTTCue;\n\n        cronus_store__WEBPACK_IMPORTED_MODULE_5__.wrappedStore.dispatch((0,shared_store_actions_externalVtt__WEBPACK_IMPORTED_MODULE_9__.addExternalVtt)(cues));\n        break;\n      }\n\n    case cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__.COMMANDS.cc:\n      {\n        var _data$args11 = _slicedToArray(data.args, 1),\n            closedCaptionId = _data$args11[0];\n\n        var _toNumber3 = (0,cronus_embedApi_helpers__WEBPACK_IMPORTED_MODULE_4__.toNumber)(closedCaptionId),\n            _error5 = _toNumber3.error,\n            _value5 = _toNumber3.value;\n\n        if (!_error5) {\n          cronus_store__WEBPACK_IMPORTED_MODULE_5__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_7__.selectClosedCaption)(_value5));\n        }\n\n        break;\n      }\n\n    case cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__.COMMANDS.audio:\n      {\n        var _data$args12 = _slicedToArray(data.args, 1),\n            audioId = _data$args12[0];\n\n        var _toNumber4 = (0,cronus_embedApi_helpers__WEBPACK_IMPORTED_MODULE_4__.toNumber)(audioId),\n            _error6 = _toNumber4.error,\n            _value6 = _toNumber4.value;\n\n        if (!_error6) {\n          cronus_store__WEBPACK_IMPORTED_MODULE_5__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_7__.selectAudio)(_value6));\n        }\n\n        break;\n      }\n\n    case cronus_embedApi_events__WEBPACK_IMPORTED_MODULE_3__.COMMANDS.sendLog:\n      {\n        ui.setLogSendingStarted();\n        (0,shared_logic_logsender__WEBPACK_IMPORTED_MODULE_16__[\"default\"])({\n          onProgress: ui.setLogSendingProgress\n        }).then(function (logId) {\n          ui.setLogSendingCompleted(logId);\n        }).catch(function (e) {\n          debugLogger.error(e.message);\n          ui.setLogSendingCompleted();\n        });\n        break;\n      }\n\n    default:\n      break;\n  }\n}\n\nfunction onEmbedApiRequest(data, dependencies) {\n  onCommandRequest(data, dependencies);\n  onPropertyRequest(data);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../js/cronus/embedApi/proxy.js\n");

/***/ }),

/***/ "../js/cronus/env/index.js":
/*!*********************************!*\
  !*** ../js/cronus/env/index.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! player-utils/object/get */ \"../node_modules/player-utils/object/get.js\");\n/* harmony import */ var shared_data_exposedVars__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/data/exposedVars */ \"../js/shared/data/exposedVars.js\");\n/* harmony import */ var cronus_config_initial__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/config/initial */ \"../js/cronus/config/initial.js\");\n/* harmony import */ var shared_data_domainMapping__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! shared/data/domainMapping */ \"../js/shared/data/domainMapping.js\");\n\n\n\n\n\nfunction isVid() {\n  return (0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_2__.getInitialConfig)('contentType') === 'video';\n}\n\nfunction isCid() {\n  return (0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_2__.getInitialConfig)('contentType') === 'channel';\n}\n\nfunction isHLS() {\n  return false;\n}\n\nfunction getApp() {\n  return isCid() ? 'channel' : 'recorded';\n}\n\nfunction getIdFromPath() {\n  return window.location.pathname.match(/(\\d+)/g)[0];\n}\n\nfunction isEmbed() {\n  return window.location.pathname.includes('/embed/');\n}\n\nfunction getId() {\n  var id = !isEmbed() && shared_data_exposedVars__WEBPACK_IMPORTED_MODULE_1__[\"default\"].player ? shared_data_exposedVars__WEBPACK_IMPORTED_MODULE_1__[\"default\"].player.contentId : getIdFromPath();\n  return parseInt(id, 10);\n}\n/**\n * @param {boolean=} popout\n * @param {boolean=} embed\n * @returns {string}\n */\n\n\nfunction getUrl() {\n  var popout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var embed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var protocol = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(window, 'location.protocol', 'https:');\n  var hostname = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(shared_data_domainMapping__WEBPACK_IMPORTED_MODULE_3__[\"default\"], 'config.contentUrl', 'video.ibm.com');\n  var url = new URL(\"\".concat(protocol, \"//\").concat(hostname));\n  var pathSegments = [{\n    predicate: embed,\n    value: 'embed/'\n  }, {\n    predicate: !embed && isCid(),\n    value: 'channel/'\n  }, {\n    predicate: isVid(),\n    value: 'recorded/'\n  }, {\n    predicate: true,\n    value: getId()\n  }, {\n    predicate: popout,\n    value: '/pop-out'\n  }];\n  url.pathname += pathSegments.filter(function (segment) {\n    return segment.predicate === true;\n  }).map(function (segment) {\n    return segment.value;\n  }).join('');\n  return url.toString();\n}\n\nfunction getMid() {\n  return \"\".concat(getApp(), \".\").concat(getId());\n}\n\nfunction getMidForVideoId(videoId) {\n  return \"recorded.\".concat(videoId);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  isCid: isCid,\n  isVid: isVid,\n  isHLS: isHLS,\n  getUrl: getUrl,\n  getId: getId,\n  getApp: getApp,\n  getMid: getMid,\n  getMidForVideoId: getMidForVideoId\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bkI7QUFDRDs7QUFFRCwrREFBZTtBQUNiaEMsRUFBQUEsS0FBSyxFQUFMQSxLQURhO0FBRWJELEVBQUFBLEtBQUssRUFBTEEsS0FGYTtBQUdiRSxFQUFBQSxLQUFLLEVBQUxBLEtBSGE7QUFJYmMsRUFBQUEsTUFBTSxFQUFOQSxNQUphO0FBS2JMLEVBQUFBLEtBQUssRUFBTEEsS0FMYTtBQU1iUixFQUFBQSxNQUFNLEVBQU5BLE1BTmE7QUFPYjRCLEVBQUFBLE1BQU0sRUFBTkEsTUFQYTtBQVFiQyxFQUFBQSxnQkFBZ0IsRUFBaEJBO0FBUmEsQ0FBZiIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vanMvY3JvbnVzL2Vudi9pbmRleC5qcz85YzNhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXQgZnJvbSAncGxheWVyLXV0aWxzL29iamVjdC9nZXQnO1xuaW1wb3J0IGV4cG9zZWRWYXJzIGZyb20gJ3NoYXJlZC9kYXRhL2V4cG9zZWRWYXJzJztcbmltcG9ydCB7IGdldEluaXRpYWxDb25maWcgfSBmcm9tICdjcm9udXMvY29uZmlnL2luaXRpYWwnO1xuaW1wb3J0IGRvbWFpbk1hcHBpbmcgZnJvbSAnc2hhcmVkL2RhdGEvZG9tYWluTWFwcGluZyc7XG5cbmZ1bmN0aW9uIGlzVmlkKCkge1xuICByZXR1cm4gZ2V0SW5pdGlhbENvbmZpZygnY29udGVudFR5cGUnKSA9PT0gJ3ZpZGVvJztcbn1cblxuZnVuY3Rpb24gaXNDaWQoKSB7XG4gIHJldHVybiBnZXRJbml0aWFsQ29uZmlnKCdjb250ZW50VHlwZScpID09PSAnY2hhbm5lbCc7XG59XG5cbmZ1bmN0aW9uIGlzSExTKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldEFwcCgpIHtcbiAgcmV0dXJuIGlzQ2lkKCkgPyAnY2hhbm5lbCcgOiAncmVjb3JkZWQnO1xufVxuXG5mdW5jdGlvbiBnZXRJZEZyb21QYXRoKCkge1xuICByZXR1cm4gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLm1hdGNoKC8oXFxkKykvZylbMF07XG59XG5cbmZ1bmN0aW9uIGlzRW1iZWQoKSB7XG4gIHJldHVybiB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuaW5jbHVkZXMoJy9lbWJlZC8nKTtcbn1cblxuZnVuY3Rpb24gZ2V0SWQoKSB7XG4gIGNvbnN0IGlkID0gIWlzRW1iZWQoKSAmJiBleHBvc2VkVmFycy5wbGF5ZXIgPyBleHBvc2VkVmFycy5wbGF5ZXIuY29udGVudElkIDogZ2V0SWRGcm9tUGF0aCgpO1xuICByZXR1cm4gcGFyc2VJbnQoaWQsIDEwKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBwb3BvdXRcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IGVtYmVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRVcmwocG9wb3V0ID0gZmFsc2UsIGVtYmVkID0gZmFsc2UpIHtcbiAgY29uc3QgcHJvdG9jb2wgPSBnZXQod2luZG93LCAnbG9jYXRpb24ucHJvdG9jb2wnLCAnaHR0cHM6Jyk7XG4gIGNvbnN0IGhvc3RuYW1lID0gZ2V0KGRvbWFpbk1hcHBpbmcsICdjb25maWcuY29udGVudFVybCcsICd2aWRlby5pYm0uY29tJyk7XG4gIGNvbnN0IHVybCA9IG5ldyBVUkwoYCR7cHJvdG9jb2x9Ly8ke2hvc3RuYW1lfWApO1xuXG4gIGNvbnN0IHBhdGhTZWdtZW50cyA9IFtcbiAgICB7IHByZWRpY2F0ZTogZW1iZWQsIHZhbHVlOiAnZW1iZWQvJyB9LFxuICAgIHsgcHJlZGljYXRlOiAhZW1iZWQgJiYgaXNDaWQoKSwgdmFsdWU6ICdjaGFubmVsLycgfSxcbiAgICB7IHByZWRpY2F0ZTogaXNWaWQoKSwgdmFsdWU6ICdyZWNvcmRlZC8nIH0sXG4gICAgeyBwcmVkaWNhdGU6IHRydWUsIHZhbHVlOiBnZXRJZCgpIH0sXG4gICAgeyBwcmVkaWNhdGU6IHBvcG91dCwgdmFsdWU6ICcvcG9wLW91dCcgfSxcbiAgXTtcblxuICB1cmwucGF0aG5hbWUgKz0gcGF0aFNlZ21lbnRzXG4gICAgLmZpbHRlcigoc2VnbWVudCkgPT4gc2VnbWVudC5wcmVkaWNhdGUgPT09IHRydWUpXG4gICAgLm1hcCgoc2VnbWVudCkgPT4gc2VnbWVudC52YWx1ZSlcbiAgICAuam9pbignJyk7XG5cbiAgcmV0dXJuIHVybC50b1N0cmluZygpO1xufVxuXG5mdW5jdGlvbiBnZXRNaWQoKSB7XG4gIHJldHVybiBgJHtnZXRBcHAoKX0uJHtnZXRJZCgpfWA7XG59XG5cbmZ1bmN0aW9uIGdldE1pZEZvclZpZGVvSWQodmlkZW9JZCkge1xuICByZXR1cm4gYHJlY29yZGVkLiR7dmlkZW9JZH1gO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGlzQ2lkLFxuICBpc1ZpZCxcbiAgaXNITFMsXG4gIGdldFVybCxcbiAgZ2V0SWQsXG4gIGdldEFwcCxcbiAgZ2V0TWlkLFxuICBnZXRNaWRGb3JWaWRlb0lkLFxufTtcbiJdLCJuYW1lcyI6WyJnZXQiLCJleHBvc2VkVmFycyIsImdldEluaXRpYWxDb25maWciLCJkb21haW5NYXBwaW5nIiwiaXNWaWQiLCJpc0NpZCIsImlzSExTIiwiZ2V0QXBwIiwiZ2V0SWRGcm9tUGF0aCIsIndpbmRvdyIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCJtYXRjaCIsImlzRW1iZWQiLCJpbmNsdWRlcyIsImdldElkIiwiaWQiLCJwbGF5ZXIiLCJjb250ZW50SWQiLCJwYXJzZUludCIsImdldFVybCIsInBvcG91dCIsImVtYmVkIiwicHJvdG9jb2wiLCJob3N0bmFtZSIsInVybCIsIlVSTCIsInBhdGhTZWdtZW50cyIsInByZWRpY2F0ZSIsInZhbHVlIiwiZmlsdGVyIiwic2VnbWVudCIsIm1hcCIsImpvaW4iLCJ0b1N0cmluZyIsImdldE1pZCIsImdldE1pZEZvclZpZGVvSWQiLCJ2aWRlb0lkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/env/index.js\n");

/***/ }),

/***/ "../js/cronus/hacks.js":
/*!*****************************!*\
  !*** ../js/cronus/hacks.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BUFFER_CLEAN_UP_FOR_VODS\": function() { return /* binding */ BUFFER_CLEAN_UP_FOR_VODS; },\n/* harmony export */   \"CHECK_BUFFER_BEFORE_DURATION_REDUCTION\": function() { return /* binding */ CHECK_BUFFER_BEFORE_DURATION_REDUCTION; },\n/* harmony export */   \"FIX_NEGATIVE_AUDIO_OFFSET\": function() { return /* binding */ FIX_NEGATIVE_AUDIO_OFFSET; },\n/* harmony export */   \"FIX_VTT_DESYNC\": function() { return /* binding */ FIX_VTT_DESYNC; },\n/* harmony export */   \"HANDLE_DUPLICATE_AUDIO_RENDITIONS\": function() { return /* binding */ HANDLE_DUPLICATE_AUDIO_RENDITIONS; },\n/* harmony export */   \"HANDLE_EMPTY_HEADER_FILES\": function() { return /* binding */ HANDLE_EMPTY_HEADER_FILES; },\n/* harmony export */   \"HANDLE_MISSING_ENDLIST\": function() { return /* binding */ HANDLE_MISSING_ENDLIST; },\n/* harmony export */   \"HANDLE_MISSING_EXT_X_MAP\": function() { return /* binding */ HANDLE_MISSING_EXT_X_MAP; },\n/* harmony export */   \"RELOAD_AFTER_LEVEL_LOAD_ERROR\": function() { return /* binding */ RELOAD_AFTER_LEVEL_LOAD_ERROR; },\n/* harmony export */   \"REMOVE_EMPTY_VTT_LINES\": function() { return /* binding */ REMOVE_EMPTY_VTT_LINES; },\n/* harmony export */   \"REMOVE_EXTRA_TIMESTAMP_LINES\": function() { return /* binding */ REMOVE_EXTRA_TIMESTAMP_LINES; },\n/* harmony export */   \"SET_VTT_LINE_HEIGHT\": function() { return /* binding */ SET_VTT_LINE_HEIGHT; }\n/* harmony export */ });\n/* harmony import */ var ustream_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ustream-env */ \"../node_modules/ustream-env/dist/ustream-env.js\");\n/* harmony import */ var ustream_env__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ustream_env__WEBPACK_IMPORTED_MODULE_0__);\n // Sometimes the media manifest for a VOD does not have the #EXT-X-MAP tag.\n// If this flag is enabled, the player will try to guess the URL of the header\n// file.\n// https://issues.ustream-adm.in/browse/WMS-68\n\nvar HANDLE_MISSING_EXT_X_MAP = true; // Sometimes when we are tring to play a live content, the first header request\n// fails with a 404 Not Found HTTP status (previously this was a 200 OK with an\n// empty response).\n// https://issues.ustream-adm.in/browse/MESE-1852\n\nvar HANDLE_EMPTY_HEADER_FILES = true; // Audio renditions are listed twice in the master manifest.\n// Currently by looking at the master manifest there is no client side\n// solution to distinguish between transcoded and original audio renditions.\n// In case of segmented/mp4 this was possible by taking the `transcoded`\n// flag (from the stream module) into consideration.\n// For hls playback we decided to filter out duplicates based on the\n// NAME attribute of the renditions.\n\nvar HANDLE_DUPLICATE_AUDIO_RENDITIONS = true; // Captions with empty text appear in vtt files on live stream\n// https://issues.ustream-adm.in/browse/WMS-734\n\nvar REMOVE_EMPTY_VTT_LINES = true; // https://issues.ustream-adm.in/browse/PLAY-2014\n\nvar FIX_VTT_DESYNC = true; // Right now we cannot adjust the position of the subtitle using hls.js.\n// If this flag is enabled, we parse every vtt fragment and set the line\n// attribute for every cue.\n// https://issues.ustream-adm.in/browse/PLAY-1958\n\nvar SET_VTT_LINE_HEIGHT = true; // The #EXT-X-ENDLIST tag is missing when live stream ends.\n// If this flag is enabled, the player will dispatch an `ended` event when the\n// channel is offline and the playback stalled.\n// https://issues.ustream-adm.in/browse/CTRLLAYER-1788\n// https://issues.ustream-adm.in/browse/CTRLLAYER-1330\n\nvar HANDLE_MISSING_ENDLIST = true; // Open the following recorded: https://www.ustream.tv/recorded/121759544\n// After Firefox has appended the first audio and video chunk, the source\n// buffer for the audio looks like this:\n// [{ start: 0, end: 6.014 },\n//  { start: 4294.944296, end: 4294.967296 }]\n// According to the media playlist, the video tag duration should be 140.064\n// sec.\n// When hls.js tries to set the duration, Firefox will throw the following\n// error: \"Uncaught DOMException: An attempt was made to use an object that is\n// not, or is no longer, usable\"\n\nvar CHECK_BUFFER_BEFORE_DURATION_REDUCTION = (ustream_env__WEBPACK_IMPORTED_MODULE_0___default().ff); // Because of this Firefox issue:\n// https://github.com/video-dev/hls.js/issues/3457 we have to force hls.js to\n// periodically clean up the buffer on VODs (like it does on live playback).\n// We don't need this hack on the v1.x.x hls.js branch.\n// https://issues.ustream-adm.in/browse/PLAY-2222\n\nvar BUFFER_CLEAN_UP_FOR_VODS = (ustream_env__WEBPACK_IMPORTED_MODULE_0___default().ff); // If live playlist have videos of different qualities, in many cases the master\n// playlist has levels which do not exist for the video. When you select such a quality,\n// the following error is thrown: \"level controller, levelLoadError, retry in 1000 ms\"\n// Hls.js will try to reload the playlist for the level infinitely.\n// As a solution the master manifest has to be reloaded, and hlsInstance.startLoad call is needed\n// for recovery.\n// https://issues.ustream-adm.in/browse/PLAY-2117\n\nvar RELOAD_AFTER_LEVEL_LOAD_ERROR = true; // Re-uploading a generated vtt file results in a corrupt vtt file which has a null character and\n// one or two extra X-TIMESTAMP-MAP lines. This makes hls js vtt parser missing captions.\n// In order to parse all captions, we have to filter out these extra lines.\n// https://issues.ustream-adm.in/browse/CORE-2113\n// https://issues.ustream-adm.in/browse/CORE-2902\n\nvar REMOVE_EXTRA_TIMESTAMP_LINES = true; // Sometimes hls.js uses a negative baseMediaDecodeTime for the first audio\n// chunk\n// This hack will not work with hls.js v1.x.\n// https://issues.ustream-adm.in/browse/PLAY-2223\n\nvar FIX_NEGATIVE_AUDIO_OFFSET = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL2hhY2tzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ08sSUFBTUMsd0JBQXdCLEdBQUcsSUFBakMsRUFFUDtBQUNBO0FBQ0E7QUFDQTs7QUFDTyxJQUFNQyx5QkFBeUIsR0FBRyxJQUFsQyxFQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNPLElBQU1DLGlDQUFpQyxHQUFHLElBQTFDLEVBRVA7QUFDQTs7QUFDTyxJQUFNQyxzQkFBc0IsR0FBRyxJQUEvQixFQUVQOztBQUNPLElBQU1DLGNBQWMsR0FBRyxJQUF2QixFQUVQO0FBQ0E7QUFDQTtBQUNBOztBQUNPLElBQU1DLG1CQUFtQixHQUFHLElBQTVCLEVBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDTyxJQUFNQyxzQkFBc0IsR0FBRyxJQUEvQixFQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNPLElBQU1DLHNDQUFzQyxHQUFHUix1REFBL0MsRUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNPLElBQU1VLHdCQUF3QixHQUFHVix1REFBakMsRUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDTyxJQUFNVyw2QkFBNkIsR0FBRyxJQUF0QyxFQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ08sSUFBTUMsNEJBQTRCLEdBQUcsSUFBckMsRUFFUDtBQUNBO0FBQ0E7QUFDQTs7QUFDTyxJQUFNQyx5QkFBeUIsR0FBRyxJQUFsQyIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vanMvY3JvbnVzL2hhY2tzLmpzP2NhYzQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGVudiBmcm9tICd1c3RyZWFtLWVudic7XG5cbi8vIFNvbWV0aW1lcyB0aGUgbWVkaWEgbWFuaWZlc3QgZm9yIGEgVk9EIGRvZXMgbm90IGhhdmUgdGhlICNFWFQtWC1NQVAgdGFnLlxuLy8gSWYgdGhpcyBmbGFnIGlzIGVuYWJsZWQsIHRoZSBwbGF5ZXIgd2lsbCB0cnkgdG8gZ3Vlc3MgdGhlIFVSTCBvZiB0aGUgaGVhZGVyXG4vLyBmaWxlLlxuLy8gaHR0cHM6Ly9pc3N1ZXMudXN0cmVhbS1hZG0uaW4vYnJvd3NlL1dNUy02OFxuZXhwb3J0IGNvbnN0IEhBTkRMRV9NSVNTSU5HX0VYVF9YX01BUCA9IHRydWU7XG5cbi8vIFNvbWV0aW1lcyB3aGVuIHdlIGFyZSB0cmluZyB0byBwbGF5IGEgbGl2ZSBjb250ZW50LCB0aGUgZmlyc3QgaGVhZGVyIHJlcXVlc3Rcbi8vIGZhaWxzIHdpdGggYSA0MDQgTm90IEZvdW5kIEhUVFAgc3RhdHVzIChwcmV2aW91c2x5IHRoaXMgd2FzIGEgMjAwIE9LIHdpdGggYW5cbi8vIGVtcHR5IHJlc3BvbnNlKS5cbi8vIGh0dHBzOi8vaXNzdWVzLnVzdHJlYW0tYWRtLmluL2Jyb3dzZS9NRVNFLTE4NTJcbmV4cG9ydCBjb25zdCBIQU5ETEVfRU1QVFlfSEVBREVSX0ZJTEVTID0gdHJ1ZTtcblxuLy8gQXVkaW8gcmVuZGl0aW9ucyBhcmUgbGlzdGVkIHR3aWNlIGluIHRoZSBtYXN0ZXIgbWFuaWZlc3QuXG4vLyBDdXJyZW50bHkgYnkgbG9va2luZyBhdCB0aGUgbWFzdGVyIG1hbmlmZXN0IHRoZXJlIGlzIG5vIGNsaWVudCBzaWRlXG4vLyBzb2x1dGlvbiB0byBkaXN0aW5ndWlzaCBiZXR3ZWVuIHRyYW5zY29kZWQgYW5kIG9yaWdpbmFsIGF1ZGlvIHJlbmRpdGlvbnMuXG4vLyBJbiBjYXNlIG9mIHNlZ21lbnRlZC9tcDQgdGhpcyB3YXMgcG9zc2libGUgYnkgdGFraW5nIHRoZSBgdHJhbnNjb2RlZGBcbi8vIGZsYWcgKGZyb20gdGhlIHN0cmVhbSBtb2R1bGUpIGludG8gY29uc2lkZXJhdGlvbi5cbi8vIEZvciBobHMgcGxheWJhY2sgd2UgZGVjaWRlZCB0byBmaWx0ZXIgb3V0IGR1cGxpY2F0ZXMgYmFzZWQgb24gdGhlXG4vLyBOQU1FIGF0dHJpYnV0ZSBvZiB0aGUgcmVuZGl0aW9ucy5cbmV4cG9ydCBjb25zdCBIQU5ETEVfRFVQTElDQVRFX0FVRElPX1JFTkRJVElPTlMgPSB0cnVlO1xuXG4vLyBDYXB0aW9ucyB3aXRoIGVtcHR5IHRleHQgYXBwZWFyIGluIHZ0dCBmaWxlcyBvbiBsaXZlIHN0cmVhbVxuLy8gaHR0cHM6Ly9pc3N1ZXMudXN0cmVhbS1hZG0uaW4vYnJvd3NlL1dNUy03MzRcbmV4cG9ydCBjb25zdCBSRU1PVkVfRU1QVFlfVlRUX0xJTkVTID0gdHJ1ZTtcblxuLy8gaHR0cHM6Ly9pc3N1ZXMudXN0cmVhbS1hZG0uaW4vYnJvd3NlL1BMQVktMjAxNFxuZXhwb3J0IGNvbnN0IEZJWF9WVFRfREVTWU5DID0gdHJ1ZTtcblxuLy8gUmlnaHQgbm93IHdlIGNhbm5vdCBhZGp1c3QgdGhlIHBvc2l0aW9uIG9mIHRoZSBzdWJ0aXRsZSB1c2luZyBobHMuanMuXG4vLyBJZiB0aGlzIGZsYWcgaXMgZW5hYmxlZCwgd2UgcGFyc2UgZXZlcnkgdnR0IGZyYWdtZW50IGFuZCBzZXQgdGhlIGxpbmVcbi8vIGF0dHJpYnV0ZSBmb3IgZXZlcnkgY3VlLlxuLy8gaHR0cHM6Ly9pc3N1ZXMudXN0cmVhbS1hZG0uaW4vYnJvd3NlL1BMQVktMTk1OFxuZXhwb3J0IGNvbnN0IFNFVF9WVFRfTElORV9IRUlHSFQgPSB0cnVlO1xuXG4vLyBUaGUgI0VYVC1YLUVORExJU1QgdGFnIGlzIG1pc3Npbmcgd2hlbiBsaXZlIHN0cmVhbSBlbmRzLlxuLy8gSWYgdGhpcyBmbGFnIGlzIGVuYWJsZWQsIHRoZSBwbGF5ZXIgd2lsbCBkaXNwYXRjaCBhbiBgZW5kZWRgIGV2ZW50IHdoZW4gdGhlXG4vLyBjaGFubmVsIGlzIG9mZmxpbmUgYW5kIHRoZSBwbGF5YmFjayBzdGFsbGVkLlxuLy8gaHR0cHM6Ly9pc3N1ZXMudXN0cmVhbS1hZG0uaW4vYnJvd3NlL0NUUkxMQVlFUi0xNzg4XG4vLyBodHRwczovL2lzc3Vlcy51c3RyZWFtLWFkbS5pbi9icm93c2UvQ1RSTExBWUVSLTEzMzBcbmV4cG9ydCBjb25zdCBIQU5ETEVfTUlTU0lOR19FTkRMSVNUID0gdHJ1ZTtcblxuLy8gT3BlbiB0aGUgZm9sbG93aW5nIHJlY29yZGVkOiBodHRwczovL3d3dy51c3RyZWFtLnR2L3JlY29yZGVkLzEyMTc1OTU0NFxuLy8gQWZ0ZXIgRmlyZWZveCBoYXMgYXBwZW5kZWQgdGhlIGZpcnN0IGF1ZGlvIGFuZCB2aWRlbyBjaHVuaywgdGhlIHNvdXJjZVxuLy8gYnVmZmVyIGZvciB0aGUgYXVkaW8gbG9va3MgbGlrZSB0aGlzOlxuLy8gW3sgc3RhcnQ6IDAsIGVuZDogNi4wMTQgfSxcbi8vICB7IHN0YXJ0OiA0Mjk0Ljk0NDI5NiwgZW5kOiA0Mjk0Ljk2NzI5NiB9XVxuLy8gQWNjb3JkaW5nIHRvIHRoZSBtZWRpYSBwbGF5bGlzdCwgdGhlIHZpZGVvIHRhZyBkdXJhdGlvbiBzaG91bGQgYmUgMTQwLjA2NFxuLy8gc2VjLlxuLy8gV2hlbiBobHMuanMgdHJpZXMgdG8gc2V0IHRoZSBkdXJhdGlvbiwgRmlyZWZveCB3aWxsIHRocm93IHRoZSBmb2xsb3dpbmdcbi8vIGVycm9yOiBcIlVuY2F1Z2h0IERPTUV4Y2VwdGlvbjogQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byB1c2UgYW4gb2JqZWN0IHRoYXQgaXNcbi8vIG5vdCwgb3IgaXMgbm8gbG9uZ2VyLCB1c2FibGVcIlxuZXhwb3J0IGNvbnN0IENIRUNLX0JVRkZFUl9CRUZPUkVfRFVSQVRJT05fUkVEVUNUSU9OID0gZW52LmZmO1xuXG4vLyBCZWNhdXNlIG9mIHRoaXMgRmlyZWZveCBpc3N1ZTpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlby1kZXYvaGxzLmpzL2lzc3Vlcy8zNDU3IHdlIGhhdmUgdG8gZm9yY2UgaGxzLmpzIHRvXG4vLyBwZXJpb2RpY2FsbHkgY2xlYW4gdXAgdGhlIGJ1ZmZlciBvbiBWT0RzIChsaWtlIGl0IGRvZXMgb24gbGl2ZSBwbGF5YmFjaykuXG4vLyBXZSBkb24ndCBuZWVkIHRoaXMgaGFjayBvbiB0aGUgdjEueC54IGhscy5qcyBicmFuY2guXG4vLyBodHRwczovL2lzc3Vlcy51c3RyZWFtLWFkbS5pbi9icm93c2UvUExBWS0yMjIyXG5leHBvcnQgY29uc3QgQlVGRkVSX0NMRUFOX1VQX0ZPUl9WT0RTID0gZW52LmZmO1xuXG4vLyBJZiBsaXZlIHBsYXlsaXN0IGhhdmUgdmlkZW9zIG9mIGRpZmZlcmVudCBxdWFsaXRpZXMsIGluIG1hbnkgY2FzZXMgdGhlIG1hc3RlclxuLy8gcGxheWxpc3QgaGFzIGxldmVscyB3aGljaCBkbyBub3QgZXhpc3QgZm9yIHRoZSB2aWRlby4gV2hlbiB5b3Ugc2VsZWN0IHN1Y2ggYSBxdWFsaXR5LFxuLy8gdGhlIGZvbGxvd2luZyBlcnJvciBpcyB0aHJvd246IFwibGV2ZWwgY29udHJvbGxlciwgbGV2ZWxMb2FkRXJyb3IsIHJldHJ5IGluIDEwMDAgbXNcIlxuLy8gSGxzLmpzIHdpbGwgdHJ5IHRvIHJlbG9hZCB0aGUgcGxheWxpc3QgZm9yIHRoZSBsZXZlbCBpbmZpbml0ZWx5LlxuLy8gQXMgYSBzb2x1dGlvbiB0aGUgbWFzdGVyIG1hbmlmZXN0IGhhcyB0byBiZSByZWxvYWRlZCwgYW5kIGhsc0luc3RhbmNlLnN0YXJ0TG9hZCBjYWxsIGlzIG5lZWRlZFxuLy8gZm9yIHJlY292ZXJ5LlxuLy8gaHR0cHM6Ly9pc3N1ZXMudXN0cmVhbS1hZG0uaW4vYnJvd3NlL1BMQVktMjExN1xuZXhwb3J0IGNvbnN0IFJFTE9BRF9BRlRFUl9MRVZFTF9MT0FEX0VSUk9SID0gdHJ1ZTtcblxuLy8gUmUtdXBsb2FkaW5nIGEgZ2VuZXJhdGVkIHZ0dCBmaWxlIHJlc3VsdHMgaW4gYSBjb3JydXB0IHZ0dCBmaWxlIHdoaWNoIGhhcyBhIG51bGwgY2hhcmFjdGVyIGFuZFxuLy8gb25lIG9yIHR3byBleHRyYSBYLVRJTUVTVEFNUC1NQVAgbGluZXMuIFRoaXMgbWFrZXMgaGxzIGpzIHZ0dCBwYXJzZXIgbWlzc2luZyBjYXB0aW9ucy5cbi8vIEluIG9yZGVyIHRvIHBhcnNlIGFsbCBjYXB0aW9ucywgd2UgaGF2ZSB0byBmaWx0ZXIgb3V0IHRoZXNlIGV4dHJhIGxpbmVzLlxuLy8gaHR0cHM6Ly9pc3N1ZXMudXN0cmVhbS1hZG0uaW4vYnJvd3NlL0NPUkUtMjExM1xuLy8gaHR0cHM6Ly9pc3N1ZXMudXN0cmVhbS1hZG0uaW4vYnJvd3NlL0NPUkUtMjkwMlxuZXhwb3J0IGNvbnN0IFJFTU9WRV9FWFRSQV9USU1FU1RBTVBfTElORVMgPSB0cnVlO1xuXG4vLyBTb21ldGltZXMgaGxzLmpzIHVzZXMgYSBuZWdhdGl2ZSBiYXNlTWVkaWFEZWNvZGVUaW1lIGZvciB0aGUgZmlyc3QgYXVkaW9cbi8vIGNodW5rXG4vLyBUaGlzIGhhY2sgd2lsbCBub3Qgd29yayB3aXRoIGhscy5qcyB2MS54LlxuLy8gaHR0cHM6Ly9pc3N1ZXMudXN0cmVhbS1hZG0uaW4vYnJvd3NlL1BMQVktMjIyM1xuZXhwb3J0IGNvbnN0IEZJWF9ORUdBVElWRV9BVURJT19PRkZTRVQgPSB0cnVlO1xuIl0sIm5hbWVzIjpbImVudiIsIkhBTkRMRV9NSVNTSU5HX0VYVF9YX01BUCIsIkhBTkRMRV9FTVBUWV9IRUFERVJfRklMRVMiLCJIQU5ETEVfRFVQTElDQVRFX0FVRElPX1JFTkRJVElPTlMiLCJSRU1PVkVfRU1QVFlfVlRUX0xJTkVTIiwiRklYX1ZUVF9ERVNZTkMiLCJTRVRfVlRUX0xJTkVfSEVJR0hUIiwiSEFORExFX01JU1NJTkdfRU5ETElTVCIsIkNIRUNLX0JVRkZFUl9CRUZPUkVfRFVSQVRJT05fUkVEVUNUSU9OIiwiZmYiLCJCVUZGRVJfQ0xFQU5fVVBfRk9SX1ZPRFMiLCJSRUxPQURfQUZURVJfTEVWRUxfTE9BRF9FUlJPUiIsIlJFTU9WRV9FWFRSQV9USU1FU1RBTVBfTElORVMiLCJGSVhfTkVHQVRJVkVfQVVESU9fT0ZGU0VUIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/hacks.js\n");

/***/ }),

/***/ "../js/cronus/index.js":
/*!*****************************!*\
  !*** ../js/cronus/index.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var hls_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hls.js */ \"../node_modules/hls.js/dist/hls.js\");\n/* harmony import */ var hls_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(hls_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var player_utils_video_playbackQuality__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! player-utils/video/playbackQuality */ \"../node_modules/player-utils/video/playbackQuality.js\");\n/* harmony import */ var player_utils_object_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! player-utils/object/get */ \"../node_modules/player-utils/object/get.js\");\n/* harmony import */ var player_utils_object_pick__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! player-utils/object/pick */ \"../node_modules/player-utils/object/pick.js\");\n/* harmony import */ var close_to_realtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! close-to-realtime */ \"../node_modules/close-to-realtime/dist/close-to-realtime.min.js\");\n/* harmony import */ var close_to_realtime__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(close_to_realtime__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var cronus_playback__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cronus/playback */ \"../js/cronus/playback/index.js\");\n/* harmony import */ var cronus_playback_debug__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! cronus/playback/debug */ \"../js/cronus/playback/debug.js\");\n/* harmony import */ var cronus_ums__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! cronus/ums */ \"../js/cronus/ums/index.js\");\n/* harmony import */ var cronus_env__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! cronus/env */ \"../js/cronus/env/index.js\");\n/* harmony import */ var ustream_env__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ustream-env */ \"../node_modules/ustream-env/dist/ustream-env.js\");\n/* harmony import */ var ustream_env__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(ustream_env__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var cronus_tracking__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! cronus/tracking */ \"../js/cronus/tracking/index.js\");\n/* harmony import */ var cronus_reporting__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! cronus/reporting */ \"../js/cronus/reporting/index.js\");\n/* harmony import */ var shared_store_actions_content__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! shared/store/actions/content */ \"../js/shared/store/actions/content.js\");\n/* harmony import */ var cronus_store_actions_content__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! cronus/store/actions/content */ \"../js/cronus/store/actions/content.js\");\n/* harmony import */ var cronus_store_actions_qos__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! cronus/store/actions/qos */ \"../js/cronus/store/actions/qos.js\");\n/* harmony import */ var cronus_store_actions_tracking__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! cronus/store/actions/tracking */ \"../js/cronus/store/actions/tracking.js\");\n/* harmony import */ var cronus_store_actions_reset__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! cronus/store/actions/reset */ \"../js/cronus/store/actions/reset.js\");\n/* harmony import */ var cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! cronus/store/selectors */ \"../js/cronus/store/selectors/index.js\");\n/* harmony import */ var shared_store_selectors__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! shared/store/selectors */ \"../js/shared/store/selectors/index.js\");\n/* harmony import */ var shared_logic_getDefaultLanguage__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! shared/logic/getDefaultLanguage */ \"../js/shared/logic/getDefaultLanguage.js\");\n/* harmony import */ var shared_ui_lib_getEmbedSize__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! shared/ui/lib/getEmbedSize */ \"../js/shared/ui/lib/getEmbedSize.js\");\n/* harmony import */ var cronus_store__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! cronus/store */ \"../js/cronus/store/index.js\");\n/* harmony import */ var shared_data_exposedVars__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! shared/data/exposedVars */ \"../js/shared/data/exposedVars.js\");\n/* harmony import */ var shared_data_domainMapping__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! shared/data/domainMapping */ \"../js/shared/data/domainMapping.js\");\n/* harmony import */ var shared_logic_logsender__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! shared/logic/logsender */ \"../js/shared/logic/logsender.js\");\n/* harmony import */ var shared_logic_poll__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! shared/logic/poll */ \"../js/shared/logic/poll.js\");\n/* harmony import */ var shared_ui__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! shared/ui */ \"../js/shared/ui/index.js\");\n/* harmony import */ var shared_ui_events__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! shared/ui/events */ \"../js/shared/ui/events.js\");\n/* harmony import */ var cronus_config_initial__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! cronus/config/initial */ \"../js/cronus/config/initial.js\");\n/* harmony import */ var shared_lib_logger__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! shared/lib/logger */ \"../js/shared/lib/logger/index.js\");\n/* harmony import */ var cronus_logic_captionSearchService__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! cronus/logic/captionSearchService */ \"../js/cronus/logic/captionSearchService.js\");\n/* harmony import */ var cronus_logic_slideDeck_slideDeckHandler__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! cronus/logic/slideDeck/slideDeckHandler */ \"../js/cronus/logic/slideDeck/slideDeckHandler.js\");\n/* harmony import */ var cronus_logic_advert__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! cronus/logic/advert */ \"../js/cronus/logic/advert/index.js\");\n/* harmony import */ var cronus_embedApi__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! cronus/embedApi */ \"../js/cronus/embedApi/index.js\");\n/* harmony import */ var cronus_logic_offairContent__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! cronus/logic/offairContent */ \"../js/cronus/logic/offairContent.js\");\n/* harmony import */ var cronus_logic_liveStatus__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! cronus/logic/liveStatus */ \"../js/cronus/logic/liveStatus.js\");\n/* harmony import */ var shared_store_actions_debug__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! shared/store/actions/debug */ \"../js/shared/store/actions/debug.js\");\n/* harmony import */ var shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! shared/ui/components/DebugOverlayConsts */ \"../js/shared/ui/components/DebugOverlayConsts.js\");\n/* harmony import */ var shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! shared/store/actions/playback */ \"../js/shared/store/actions/playback.js\");\n/* harmony import */ var cronus_logic_lock_hashHelper__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! cronus/logic/lock/hashHelper */ \"../js/cronus/logic/lock/hashHelper.js\");\n/* harmony import */ var cronus_logic_lock_lockManager__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! cronus/logic/lock/lockManager */ \"../js/cronus/logic/lock/lockManager.js\");\n/* harmony import */ var shared_store_actions_ums__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! shared/store/actions/ums */ \"../js/shared/store/actions/ums.js\");\n/* harmony import */ var shared_consts__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! shared/consts */ \"../js/shared/consts.js\");\n/* harmony import */ var shared_store_actions_provider__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! shared/store/actions/provider */ \"../js/shared/store/actions/provider.js\");\n/* harmony import */ var shared_lib_util_getXHRErrorReason__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! shared/lib/util/getXHRErrorReason */ \"../js/shared/lib/util/getXHRErrorReason.js\");\n/* harmony import */ var shared_logic_progressHistory__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! shared/logic/progressHistory */ \"../js/shared/logic/progressHistory.js\");\n/* harmony import */ var cronus_logic_seekPosition__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! cronus/logic/seekPosition */ \"../js/cronus/logic/seekPosition.js\");\n/* harmony import */ var can_autoplay__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! can-autoplay */ \"../node_modules/can-autoplay/build/can-autoplay.es.js\");\n/* harmony import */ var cronus_logic_privacy_privacyCookieChecker__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! cronus/logic/privacy/privacyCookieChecker */ \"../js/cronus/logic/privacy/privacyCookieChecker.js\");\n/* harmony import */ var cronus_polyfills__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! cronus/polyfills */ \"../js/cronus/polyfills/index.js\");\n/* harmony import */ var cronus_hacks__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! cronus/hacks */ \"../js/cronus/hacks.js\");\n/* harmony import */ var shared_store_actions_player__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! shared/store/actions/player */ \"../js/shared/store/actions/player.js\");\n/* harmony import */ var shared_store_actions_captionSearch__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! shared/store/actions/captionSearch */ \"../js/shared/store/actions/captionSearch.js\");\n/* harmony import */ var shared_logic_assistedReporting__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! shared/logic/assistedReporting */ \"../js/shared/logic/assistedReporting.js\");\n/* harmony import */ var shared_data_referrer__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! shared/data/referrer */ \"../js/shared/data/referrer.js\");\n/* harmony import */ var shared_logic_browserOldNotification__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! shared/logic/browserOldNotification */ \"../js/shared/logic/browserOldNotification.js\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar debugLogger = (0,shared_lib_logger__WEBPACK_IMPORTED_MODULE_29__.createLoggerForModule)('index');\nvar ui;\nvar $video = null;\nvar downloadErrors = {};\nvar trimSet = false;\nvar reloadAfterLevelLoadError = true;\n\nvar stopWatchingVideoPlaybackQuality = function stopWatchingVideoPlaybackQuality() {};\n\nvar visitedProviders = [];\n\nfunction initAssistedReporting() {\n  var timeouts = {\n    recovery: 5 * 1000\n  };\n  shared_logic_assistedReporting__WEBPACK_IMPORTED_MODULE_53__.init(close_to_realtime__WEBPACK_IMPORTED_MODULE_4___default().playerState.get(), function (stalled) {\n    if (stalled) {\n      cronus_store__WEBPACK_IMPORTED_MODULE_21__[\"default\"].dispatch((0,shared_store_actions_player__WEBPACK_IMPORTED_MODULE_51__.showNotification)(shared_store_actions_player__WEBPACK_IMPORTED_MODULE_51__.NOTIFICATION_TYPES.assistedReporting));\n    } else {\n      cronus_store__WEBPACK_IMPORTED_MODULE_21__[\"default\"].dispatch((0,shared_store_actions_player__WEBPACK_IMPORTED_MODULE_51__.hideNotification)(shared_store_actions_player__WEBPACK_IMPORTED_MODULE_51__.NOTIFICATION_TYPES.assistedReporting));\n    }\n  }, timeouts);\n}\n\nclose_to_realtime__WEBPACK_IMPORTED_MODULE_4___default().logger.onLog(function (_ref) {\n  var type = _ref.type,\n      module = _ref.module,\n      message = _ref.message,\n      data = _ref.data;\n  shared_lib_logger__WEBPACK_IMPORTED_MODULE_29__[\"default\"].log({\n    level: type,\n    source: module,\n    line: message,\n    data: data\n  });\n});\n\nfunction initCRT() {\n  var mediaType = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getMediaType)(cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState());\n  var timeouts = {\n    waiting: mediaType === shared_store_actions_content__WEBPACK_IMPORTED_MODULE_12__.MEDIA_TYPES.live ? 10 * 1000 : 20 * 1000,\n    stalled: 10 * 1000\n  };\n  close_to_realtime__WEBPACK_IMPORTED_MODULE_4___default().playerState.init(timeouts);\n  var crtHost = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(shared_data_domainMapping__WEBPACK_IMPORTED_MODULE_23__[\"default\"], 'config.crt', 'crt-event-ingest.services.video.ibm.com');\n  close_to_realtime__WEBPACK_IMPORTED_MODULE_4___default().sender.init({\n    ingestURL: \"https://\".concat(crtHost, \"/ingest\"),\n    clockSyncURL: \"https://\".concat(crtHost, \"/time\"),\n    getEnv: function getEnv() {\n      /**\n       * @param {?Object|undefined} track\n       * @returns {Object}\n       */\n      function getTrackRelatedInfo(track) {\n        var _pick = (0,player_utils_object_pick__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(track, ['label', 'language', 'country']),\n            label = _pick.label,\n            language = _pick.language,\n            country = _pick.country;\n\n        if (!label || !language || !country) {\n          return {};\n        }\n\n        return {\n          languageCode: \"\".concat(language, \"-\").concat(country),\n          name: label\n        };\n      }\n\n      var state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n\n      var playbackState = function () {\n        var STATES = (close_to_realtime__WEBPACK_IMPORTED_MODULE_4___default().playerState.STATES);\n\n        switch (close_to_realtime__WEBPACK_IMPORTED_MODULE_4___default().playerState.get().state) {\n          case STATES.playing:\n            return 'playing';\n\n          case STATES.buffering:\n          case STATES.stalled:\n            return 'buffering';\n\n          case STATES.init:\n          case STATES.waiting:\n          case STATES.ready:\n          default:\n            return 'stopped';\n        }\n      }();\n\n      var selectedClosedCaption = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_18__.getSelectedSubtitleTrack)(state);\n\n      var _getTrackRelatedInfo = getTrackRelatedInfo(selectedClosedCaption),\n          closedCaptionLanguageCode = _getTrackRelatedInfo.languageCode,\n          closedCaptionName = _getTrackRelatedInfo.name;\n\n      var selectedAudio = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_18__.getSelectedAudioTrack)(state);\n\n      var _getTrackRelatedInfo2 = getTrackRelatedInfo(selectedAudio),\n          audioLanguageCode = _getTrackRelatedInfo2.languageCode,\n          audioName = _getTrackRelatedInfo2.name;\n\n      var resolution = function () {\n        var _getVideoSize = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_18__.getVideoSize)(state),\n            width = _getVideoSize.width,\n            height = _getVideoSize.height;\n\n        if (width && height) {\n          return \"\".concat(width, \"x\").concat(height);\n        }\n\n        return undefined;\n      }();\n\n      var mid = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getActiveMediaId)(state) || (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getMediaId)(state);\n      var liveUms = cronus_ums__WEBPACK_IMPORTED_MODULE_7__[\"default\"].getInstance(mid);\n\n      var _pick2 = (0,player_utils_object_pick__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(liveUms, ['rpin', 'rsid', 'appId', 'appVersion']),\n          rpin = _pick2.rpin,\n          rsid = _pick2.rsid,\n          appId = _pick2.appId,\n          appVersion = _pick2.appVersion;\n\n      var framerate = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state, 'debug.frameRate');\n\n      if (framerate === 'N/A') {\n        framerate = 0;\n      }\n\n      var flotConnectionTime = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getUmsConnectionConnectedTime)(state) - (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getUmsConnectionStartTime)(state);\n      var firstStreamModuleTime = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getStreamModuleReceivedTime)(state) - (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getUmsConnectionConnectedTime)(state);\n      var firstFrameTime = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getFirstFrameTime)(state) - (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getStreamModuleReceivedTime)(state);\n      var playbackMedia = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state, 'content.sourceMedia');\n      var authToken = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_18__.getViewerAuthToken)(state) || (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_18__.getHash)(state);\n      return {\n        playbackState: playbackState,\n        mediaType: [shared_store_actions_content__WEBPACK_IMPORTED_MODULE_12__.MEDIA_TYPES.recorded, shared_store_actions_content__WEBPACK_IMPORTED_MODULE_12__.MEDIA_TYPES.offairVideo].includes((0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getMediaType)(state)) ? 'recorded' : 'live',\n        mediaId: (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(mid.split('.'), '1', playbackMedia),\n        playbackMedia: playbackMedia,\n        rpin: rpin,\n        rsid: rsid,\n        pageUrl: shared_data_referrer__WEBPACK_IMPORTED_MODULE_54__[\"default\"],\n        appId: appId,\n        appVersion: appVersion,\n        userAgent: navigator.userAgent,\n        buildNumber: shared_consts__WEBPACK_IMPORTED_MODULE_42__[\"default\"].BUILD_NUMBER,\n        playbackVersion: \"\".concat(cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].version(), \" (Hls.js)\"),\n        cdnProviderName: (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getCurrentProviderType)(state),\n        cdnServerHost: (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getCurrentProviderHost)(state),\n        authToken: authToken,\n        resolution: resolution,\n        framerate: framerate,\n        bitrate: (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state, 'qos.stats.bitrate', 0),\n        audioLanguageCode: audioLanguageCode,\n        audioName: audioName,\n        closedCaptionLanguageCode: closedCaptionLanguageCode,\n        closedCaptionName: closedCaptionName,\n        speed: (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_18__.getPlaybackSpeed)(state),\n        position: (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_18__.getCurrentTime)(state) * 1000,\n        flotConnectionTime: flotConnectionTime || 0,\n        firstStreamModuleTime: firstStreamModuleTime || 0,\n        firstFrameTime: firstFrameTime || 0\n      };\n    }\n  });\n  close_to_realtime__WEBPACK_IMPORTED_MODULE_4___default().watcher.init(close_to_realtime__WEBPACK_IMPORTED_MODULE_4___default().playerState.get(), close_to_realtime__WEBPACK_IMPORTED_MODULE_4___default().sender.get());\n}\n\nfunction destroyCRT() {\n  close_to_realtime__WEBPACK_IMPORTED_MODULE_4___default().watcher.destroy();\n  close_to_realtime__WEBPACK_IMPORTED_MODULE_4___default().sender.destroy();\n  close_to_realtime__WEBPACK_IMPORTED_MODULE_4___default().playerState.destroy();\n}\n/**\n * @returns {undefined|string}\n */\n\n\nfunction getMasterPlaylist() {\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n  return (0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_28__.getInitialConfig)('directHlsUri') || (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getMasterPlaylistURL)(state);\n}\n/**\n * @returns {Promise}\n */\n\n\nfunction callPlaybackLoad() {\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n  var masterPlaylist = getMasterPlaylist();\n  var providerQueryParam = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getProviderQueryParam)(state);\n  var provider = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getCurrentProvider)(state);\n  return cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].load({\n    masterPlaylist: masterPlaylist,\n    providerQueryParam: providerQueryParam,\n    provider: provider\n  });\n}\n\nfunction getTrimmedDurationInMillisec() {\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n  var trimmedDuration = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_18__.getTrimmedDuration)(state);\n\n  if (trimmedDuration === undefined) {\n    return undefined;\n  }\n\n  return trimmedDuration * 1000;\n}\n\nfunction isContentPlayable() {\n  return (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getActiveMediaId)(cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState()) !== undefined;\n}\n\nfunction onNetworkChange() {\n  var qualities = cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getQualities();\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,cronus_store_actions_qos__WEBPACK_IMPORTED_MODULE_14__.setQualities)(qualities));\n}\n\nfunction onPlaybackInfo(_ref2) {\n  var width = _ref2.width,\n      height = _ref2.height,\n      videoCodec = _ref2.videoCodec,\n      audioCodec = _ref2.audioCodec;\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_38__.setCodecInfo)({\n    width: width,\n    height: height,\n    videoCodec: videoCodec,\n    audioCodec: audioCodec\n  }));\n}\n\nfunction onKeyframeInterval(keyFrameInterval) {\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_debug__WEBPACK_IMPORTED_MODULE_36__.addKeyFrameDiagnostics)({\n    keyFrameInterval: keyFrameInterval\n  }));\n}\n\nfunction isQualityAlreadyActive() {\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n  var selectedId = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getSelectedQualityId)(state);\n  var activeQuality = cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getQualities().find(function (track) {\n    return track.active;\n  });\n  return activeQuality && selectedId === activeQuality.id;\n}\n\nfunction onQualitySelect() {\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n\n  if (!(0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.isAutoQualitySelected)(state) && !isQualityAlreadyActive()) {\n    cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,cronus_store_actions_qos__WEBPACK_IMPORTED_MODULE_14__.setQualityLoading)(true));\n  }\n\n  onQualityUpdate();\n}\n\nfunction onQualityUpdate() {\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n  ui.setQuality((0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getQualities)(state));\n}\n\nfunction onQualityChangeEnd() {\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,cronus_store_actions_qos__WEBPACK_IMPORTED_MODULE_14__.setQualityLoading)(false));\n}\n\nfunction onAudioChangeEnd() {\n  if (ui) {\n    ui.setAudioLoading(false);\n  }\n}\n\nfunction onLoadingChange(loading) {\n  if (!ui) {\n    return;\n  }\n\n  ui.setLoading(loading);\n}\n\nfunction onPlaybackEndedUiCallback() {\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_38__.setEnded)(true));\n}\n\nfunction onPlaybackEnded(ended) {\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n  var mediaType = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getMediaType)(state);\n\n  if (ended && mediaType !== shared_store_actions_content__WEBPACK_IMPORTED_MODULE_12__.MEDIA_TYPES.live) {\n    var _getActiveMediaIdAsOb = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getActiveMediaIdAsObject)(state),\n        id = _getActiveMediaIdAsOb.id;\n\n    shared_logic_progressHistory__WEBPACK_IMPORTED_MODULE_45__[\"default\"].removeProgressForVideoId(id);\n\n    if (mediaType === shared_store_actions_content__WEBPACK_IMPORTED_MODULE_12__.MEDIA_TYPES.offairVideo && cronus_logic_offairContent__WEBPACK_IMPORTED_MODULE_34__[\"default\"].hasNextVideo()) {\n      cronus_logic_offairContent__WEBPACK_IMPORTED_MODULE_34__[\"default\"].nextOffairVideo();\n    } else {\n      if (!(0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_28__.getInitialConfig)('disableEosSeek')) {\n        var trimBoundaries = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_18__.getTrimBoundariesInSec)(state);\n        var startPosition = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(trimBoundaries, 'start', 0);\n        cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].seek(startPosition);\n      } // We should pause the playback, because maybe it's not a normal video\n      // tag ended event just the end of the trim.\n\n\n      cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].pause();\n    }\n  }\n}\n/**\n * @param {object} networkErrorData\n * @returns {boolean}\n */\n\n\nfunction isNetworkErrorComingFromTheCurrentProvider(networkErrorData) {\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n  var currentProvider = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getCurrentProvider)(state);\n\n  if (!currentProvider) {\n    return false;\n  } // We don't have the `networkDetails` property if it was a timeout related\n  // error\n\n\n  var segmentURL = networkErrorData.networkDetails ? (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(networkErrorData, 'networkDetails.responseURL') : (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(networkErrorData, 'frag.loader.context.url');\n\n  try {\n    var parser = new URL(segmentURL);\n    var protocolAndHost = \"\".concat(parser.protocol, \"//\").concat(parser.host);\n    var currentProviderURL = currentProvider.url;\n    return currentProviderURL.includes(protocolAndHost);\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * @param {object} networkErrorData\n */\n\n\nfunction handleSegmentTimeoutError(networkErrorData) {\n  var offline = !window.navigator.onLine;\n\n  if (offline) {\n    return;\n  }\n\n  if (!isNetworkErrorComingFromTheCurrentProvider(networkErrorData)) {\n    return;\n  }\n\n  changeProvider({\n    reason: 'server error'\n  });\n}\n/**\n * @param {object} networkErrorData\n */\n\n\nfunction handleSegmentDownloadError(networkErrorData) {\n  if (!isNetworkErrorComingFromTheCurrentProvider(networkErrorData)) {\n    return;\n  }\n\n  var response = networkErrorData.response;\n  var notFound = response.code >= 400 && response.code <= 499;\n\n  if (notFound) {\n    var state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n    var currentProviderURL = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_2__[\"default\"])((0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getCurrentProvider)(state), 'url');\n\n    if (!Object.prototype.hasOwnProperty.call(downloadErrors, currentProviderURL)) {\n      downloadErrors[currentProviderURL] = 0;\n    }\n\n    downloadErrors[currentProviderURL] += 1;\n\n    if (downloadErrors[currentProviderURL] >= 5) {\n      downloadErrors[currentProviderURL] = 0;\n      changeProvider({\n        reason: 'multiple segment not found error'\n      });\n    }\n\n    return;\n  }\n\n  var serverError = response.code === 0 || response.code >= 500 && response.code <= 599;\n\n  if (serverError) {\n    changeProvider({\n      reason: 'server error'\n    });\n  }\n}\n/**\n * https://github.com/video-dev/hls.js/blob/master/docs/API.md#network-errors\n *\n * @param {object} data\n */\n\n\nfunction handleNetworkError(_x) {\n  return _handleNetworkError.apply(this, arguments);\n}\n\nfunction _handleNetworkError() {\n  _handleNetworkError = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(data) {\n    var mediaId;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            mediaId = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getMediaIdAsObject)(cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState());\n            _context.t0 = data.details;\n            _context.next = _context.t0 === (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorDetails.FRAG_LOAD_TIMEOUT) ? 4 : _context.t0 === (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorDetails.FRAG_LOAD_ERROR) ? 6 : _context.t0 === (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorDetails.LEVEL_LOAD_ERROR) ? 9 : 17;\n            break;\n\n          case 4:\n            handleSegmentTimeoutError(data);\n            return _context.abrupt(\"break\", 18);\n\n          case 6:\n            handleSegmentDownloadError(data);\n            cronus_reporting__WEBPACK_IMPORTED_MODULE_11__[\"default\"].aggregate(cronus_reporting__WEBPACK_IMPORTED_MODULE_11__[\"default\"].TYPES.error, {\n              mediaId: mediaId,\n              type: 'segmentNotFound',\n              details: {\n                url: (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(data, 'networkDetails.responseURL', ''),\n                status: (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(data, 'response.code', -1),\n                reason: (0,shared_lib_util_getXHRErrorReason__WEBPACK_IMPORTED_MODULE_44__[\"default\"])(data.networkDetails)\n              }\n            });\n            return _context.abrupt(\"break\", 18);\n\n          case 9:\n            if (!(reloadAfterLevelLoadError && cronus_hacks__WEBPACK_IMPORTED_MODULE_50__.RELOAD_AFTER_LEVEL_LOAD_ERROR)) {\n              _context.next = 16;\n              break;\n            }\n\n            cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].unload();\n            _context.next = 13;\n            return callPlaybackLoad();\n\n          case 13:\n            cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].startLoad();\n\n            if ((0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.isPlaying)(cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState())) {\n              cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].play();\n            }\n\n            reloadAfterLevelLoadError = false;\n\n          case 16:\n            return _context.abrupt(\"break\", 18);\n\n          case 17:\n            cronus_reporting__WEBPACK_IMPORTED_MODULE_11__[\"default\"].aggregate(cronus_reporting__WEBPACK_IMPORTED_MODULE_11__[\"default\"].TYPES.error, {\n              mediaId: mediaId,\n              type: data.details\n            });\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _handleNetworkError.apply(this, arguments);\n}\n\nfunction handleBufferStalledError() {\n  // The playback won't start if the initial gap is longer than 2 sec.\n  // https://github.com/video-dev/hls.js/blob/master/src/controller/gap-controller.js#L7\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n  var _$video = $video,\n      buffered = _$video.buffered;\n\n  if (!(0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getFirstTimeUpdateReceived)(state) && buffered.length > 0) {\n    var bufferStart = buffered.start(0);\n    debugLogger.info('initial gap recovery', {\n      bufferStart: bufferStart\n    });\n    cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].seek(bufferStart);\n  }\n}\n/**\n * https://github.com/video-dev/hls.js/blob/master/docs/API.md#media-errors\n *\n * @param {object} data\n */\n\n\nfunction handleMediaError(data) {\n  switch (data.details) {\n    // raised when manifest only contains quality level with codecs incompatible with MediaSource Engine.\n    case (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorDetails.MANIFEST_INCOMPATIBLE_CODECS_ERROR):\n      handleNotSupportedError();\n      break;\n\n    case (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorDetails.BUFFER_STALLED_ERROR):\n      {\n        handleBufferStalledError();\n        break;\n      }\n    // no default\n  }\n}\n/**\n * https://github.com/video-dev/hls.js/blob/master/docs/API.md#mux-errors\n *\n * @param {object} data\n */\n\n\nfunction handleMuxError(data) {// TODO\n}\n/**\n * https://github.com/video-dev/hls.js/blob/master/docs/API.md#other-errors\n *\n * @param {object} data\n */\n\n\nfunction handleOtherError(data) {// TODO\n}\n/**\n * https://github.com/video-dev/hls.js/blob/master/docs/API.md#errors\n *\n * @param {string} event\n * @param {object} data\n */\n\n\nfunction onError(event, data) {\n  debugLogger.error('hls.js error', data);\n  saveDebugOverlayRelatedErrors(data);\n  reportError(data);\n\n  switch (data.type) {\n    case (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorTypes.NETWORK_ERROR):\n      return handleNetworkError(data);\n\n    case (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorTypes.MEDIA_ERROR):\n      return handleMediaError(data);\n\n    case (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorTypes.MUX_ERROR):\n      return handleMuxError(data);\n\n    case (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorTypes.OTHER_ERROR):\n      return handleOtherError(data);\n    // no default\n  }\n}\n/**\n * @param {object} data\n */\n\n\nfunction reportError(data) {\n  switch (data.details) {\n    case (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorDetails.MANIFEST_PARSING_ERROR):\n      {\n        cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].TYPES.manifestParsingError);\n        break;\n      }\n\n    case (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorDetails.LEVEL_EMPTY_ERROR):\n      {\n        cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].TYPES.manifestEmptyError);\n        break;\n      }\n\n    case (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorDetails.MANIFEST_LOAD_TIMEOUT):\n    case (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorDetails.LEVEL_LOAD_TIMEOUT):\n    case (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT):\n      {\n        cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].TYPES.manifestLoadingTimeout, {\n          errorDetail: data.details\n        });\n        break;\n      }\n\n    case (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorDetails.MANIFEST_LOAD_ERROR):\n    case (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorDetails.LEVEL_LOAD_ERROR):\n    case (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorDetails.AUDIO_TRACK_LOAD_ERROR):\n      {\n        var response = data.response;\n        cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].TYPES.manifestLoadingError, {\n          errorCode: response.code,\n          errorMessage: response.text,\n          errorDetail: data.details\n        });\n        break;\n      }\n\n    case (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorDetails.FRAG_LOAD_ERROR):\n      {\n        var _response = data.response;\n        cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].TYPES.segmentLoadingError, {\n          errorCode: _response.code,\n          errorMessage: _response.text\n        });\n        break;\n      }\n\n    case (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorDetails.FRAG_LOAD_TIMEOUT):\n      {\n        cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].TYPES.segmentLoadingTimeout);\n        break;\n      }\n\n    case (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorDetails.FRAG_PARSING_ERROR):\n      {\n        var _data$reason = data.reason,\n            reason = _data$reason === void 0 ? '' : _data$reason;\n        cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].TYPES.segmentParsingError, {\n          reason: reason\n        });\n        break;\n      }\n    // no default\n  }\n}\n/**\n * @param {object} data\n */\n\n\nfunction saveDebugOverlayRelatedErrors(data) {\n  switch (data.details) {\n    case (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorDetails.MANIFEST_PARSING_ERROR):\n      {\n        cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_debug__WEBPACK_IMPORTED_MODULE_36__.addPlaybackError)({\n          level: shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_37__.STATUS.ERROR,\n          timeStamp: Date.now(),\n          msg: 'Manifest parse error'\n        }));\n        break;\n      }\n\n    case (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorDetails.LEVEL_EMPTY_ERROR):\n      {\n        cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_debug__WEBPACK_IMPORTED_MODULE_36__.addPlaybackWarning)({\n          level: shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_37__.STATUS.WARNING,\n          timeStamp: Date.now(),\n          msg: 'Manifest parse error (empty manifest)'\n        }));\n        break;\n      }\n\n    case (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorDetails.MANIFEST_LOAD_TIMEOUT):\n    case (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorDetails.LEVEL_LOAD_TIMEOUT):\n    case (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT):\n      {\n        cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_debug__WEBPACK_IMPORTED_MODULE_36__.addPlaybackError)({\n          level: shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_37__.STATUS.ERROR,\n          timeStamp: Date.now(),\n          msg: 'Manifest loading error (timeout)'\n        }));\n        break;\n      }\n\n    case (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorDetails.MANIFEST_LOAD_ERROR):\n    case (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorDetails.LEVEL_LOAD_ERROR):\n    case (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorDetails.AUDIO_TRACK_LOAD_ERROR):\n      {\n        var response = data.response;\n        cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_debug__WEBPACK_IMPORTED_MODULE_36__.addPlaybackError)({\n          level: shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_37__.STATUS.ERROR,\n          timeStamp: Date.now(),\n          msg: \"Manifest loading error (\".concat(response.code, \" \").concat(response.text, \")\")\n        }));\n        break;\n      }\n\n    case (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorDetails.FRAG_LOAD_ERROR):\n      {\n        var _response2 = data.response;\n        cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_debug__WEBPACK_IMPORTED_MODULE_36__.addPlaybackWarning)({\n          level: shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_37__.STATUS.WARNING,\n          timeStamp: Date.now(),\n          msg: \"Segment loading error (\".concat(_response2.code, \" \").concat(_response2.text, \")\")\n        }));\n        break;\n      }\n\n    case (hls_js__WEBPACK_IMPORTED_MODULE_0___default().ErrorDetails.FRAG_LOAD_TIMEOUT):\n      {\n        cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_debug__WEBPACK_IMPORTED_MODULE_36__.addPlaybackWarning)({\n          level: shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_37__.STATUS.WARNING,\n          timeStamp: Date.now(),\n          msg: 'Segment loading error (timeout)'\n        }));\n        break;\n      }\n    // no default\n  }\n}\n\nfunction onDownload(frag) {\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n  var currentProviderURL = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_2__[\"default\"])((0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getCurrentProvider)(state), 'url');\n  downloadErrors[currentProviderURL] = 0;\n}\n\nfunction handleNotSupportedError() {\n  cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].TYPES.unsupportedContent);\n  cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].unload();\n  downloadErrors = {};\n  trimSet = false;\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,cronus_store_actions_reset__WEBPACK_IMPORTED_MODULE_16__.reset)());\n  ui.setContentAvailable(false);\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_ums__WEBPACK_IMPORTED_MODULE_41__.setLockInfo)({\n    type: 'unsupported'\n  }));\n}\n\nfunction selectProvider(provider) {\n  if (!visitedProviders.includes(provider.url)) {\n    visitedProviders.push(provider.url);\n  }\n\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_provider__WEBPACK_IMPORTED_MODULE_43__.setCurrentProvider)(provider));\n}\n/**\n * @param {{ reason: string= }} args\n */\n\n\nfunction changeProvider(_ref3) {\n  var _ref3$reason = _ref3.reason,\n      reason = _ref3$reason === void 0 ? 'unknown' : _ref3$reason;\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n  var availableProviders = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getAvailableProviders)(state);\n\n  if (availableProviders.length < 2) {\n    return;\n  }\n\n  var currentProvider = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getCurrentProvider)(state);\n  cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].TYPES.providerChange, {\n    reason: reason,\n    provider: (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(currentProvider, 'url')\n  });\n  var currentIndex = availableProviders.findIndex(function (_ref4) {\n    var url = _ref4.url;\n    return url === (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(currentProvider, 'url');\n  });\n  var nextUntriedIndex = availableProviders.findIndex(function (provider, index) {\n    return index !== currentIndex && !visitedProviders.includes(provider.url);\n  });\n  var nextIndex;\n\n  if (nextUntriedIndex !== -1) {\n    nextIndex = nextUntriedIndex;\n  } else {\n    nextIndex = (currentIndex + 1) % availableProviders.length;\n  }\n\n  selectProvider(availableProviders[nextIndex]);\n}\n\nfunction createVideoTag() {\n  if ($video) {\n    // IE11 does not support the `$video.remove()` method.\n    // https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove\n    $video.parentNode.removeChild($video);\n  }\n\n  $video = document.createElement('video');\n  document.querySelector('#ViewerContainer').appendChild($video);\n}\n\nfunction onVideoTagDecodeError() {\n  return _onVideoTagDecodeError.apply(this, arguments);\n}\n\nfunction _onVideoTagDecodeError() {\n  _onVideoTagDecodeError = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].unload();\n            _context2.next = 3;\n            return callPlaybackLoad();\n\n          case 3:\n            cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].play();\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _onVideoTagDecodeError.apply(this, arguments);\n}\n\nfunction initPlayback() {\n  downloadErrors = {};\n  cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].init($video, {\n    onNetworkChange: onNetworkChange,\n    onPlaybackInfo: onPlaybackInfo,\n    onKeyframeInterval: onKeyframeInterval,\n    onQualityChangeEnd: onQualityChangeEnd,\n    onAudioChangeEnd: onAudioChangeEnd,\n    onLoadingChange: onLoadingChange,\n    onError: onError,\n    onDownload: onDownload,\n    onVideoTagDecodeError: onVideoTagDecodeError\n  });\n}\n\nfunction getUrl(isPopout, isEmbed) {\n  var url = new URL(cronus_env__WEBPACK_IMPORTED_MODULE_8__[\"default\"].getUrl(isPopout, isEmbed));\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n  var mediaType = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getMediaType)(state);\n\n  if (isPopout && mediaType !== shared_store_actions_content__WEBPACK_IMPORTED_MODULE_12__.MEDIA_TYPES.live) {\n    var currentTimeInSec = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_18__.getCurrentTime)(cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState());\n    var relativePositionInMs = (0,cronus_logic_seekPosition__WEBPACK_IMPORTED_MODULE_46__.getRelativeSeekPositionInMs)(currentTimeInSec * 1000);\n    var to = Math.ceil(relativePositionInMs / 1000);\n\n    if (to > 0) {\n      url.hash = \"to\".concat(to);\n    }\n  }\n\n  return url.toString();\n}\n\nfunction trackLogSending(logId) {\n  var _crt$sender$get;\n\n  var logSendingFromAssistedReport = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'other';\n  cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].transport({\n    message: 'Troubleshoot playback issue sent',\n    data: {\n      category: 'Troubleshoot Playback Issue',\n      item: 'troubleshoot playback issue',\n      action: 'send',\n      issue_type: reason || 'other',\n      assisted_reporting_shown: logSendingFromAssistedReport\n    }\n  }).send();\n\n  var _ref5 = function () {\n    var match = reason.match(/(other): (.*)/);\n\n    if (!match) {\n      return {\n        type: reason,\n        text: ''\n      };\n    }\n\n    var _match = _slicedToArray(match, 3),\n        type = _match[1],\n        text = _match[2];\n\n    return {\n      type: type,\n      text: text\n    };\n  }(),\n      errorType = _ref5.type,\n      errorText = _ref5.text;\n\n  (_crt$sender$get = close_to_realtime__WEBPACK_IMPORTED_MODULE_4___default().sender.get()) === null || _crt$sender$get === void 0 ? void 0 : _crt$sender$get.send((close_to_realtime__WEBPACK_IMPORTED_MODULE_4___default().sender.EVENTS.error), {\n    errorType: errorType,\n    errorText: errorText,\n    logId: logId\n  });\n}\n\nfunction init() {\n  debugLogger.debug('environment variables', (ustream_env__WEBPACK_IMPORTED_MODULE_9___default()), true);\n  debugLogger.debug('playback type selected', {\n    playerVersion: shared_consts__WEBPACK_IMPORTED_MODULE_42__[\"default\"].BUILD_NUMBER,\n    playbackType: 'hls.js',\n    playbackVersion: cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].version()\n  }, true);\n  cronus_playback_debug__WEBPACK_IMPORTED_MODULE_6__.init();\n  shared_logic_progressHistory__WEBPACK_IMPORTED_MODULE_45__[\"default\"].init('hlsjs');\n  cronus_logic_slideDeck_slideDeckHandler__WEBPACK_IMPORTED_MODULE_31__[\"default\"].init();\n  cronus_logic_offairContent__WEBPACK_IMPORTED_MODULE_34__[\"default\"].init();\n  cronus_logic_liveStatus__WEBPACK_IMPORTED_MODULE_35__[\"default\"].init();\n  cronus_logic_lock_lockManager__WEBPACK_IMPORTED_MODULE_40__.init();\n  cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].init();\n  cronus_reporting__WEBPACK_IMPORTED_MODULE_11__[\"default\"].init();\n\n  var _getEmbedSize = (0,shared_ui_lib_getEmbedSize__WEBPACK_IMPORTED_MODULE_20__[\"default\"])(),\n      _getEmbedSize2 = _slicedToArray(_getEmbedSize, 2),\n      width = _getEmbedSize2[0],\n      height = _getEmbedSize2[1];\n\n  cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].TYPES.initialLoadingStarted, {\n    width: width,\n    height: height\n  });\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,cronus_store_actions_tracking__WEBPACK_IMPORTED_MODULE_15__.setInitialLoadingTime)(performance.now()));\n  ui = new shared_ui__WEBPACK_IMPORTED_MODULE_26__[\"default\"]({\n    reduxStore: cronus_store__WEBPACK_IMPORTED_MODULE_21__[\"default\"],\n    wrappedStore: cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore,\n    exposedVars: shared_data_exposedVars__WEBPACK_IMPORTED_MODULE_22__[\"default\"],\n    domainMapping: shared_data_domainMapping__WEBPACK_IMPORTED_MODULE_23__[\"default\"],\n    playbackVersion: \"\".concat(cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].version(), \" (Hls.js)\"),\n    getUrl: getUrl,\n    getId: cronus_env__WEBPACK_IMPORTED_MODULE_8__[\"default\"].getId,\n    getApp: cronus_env__WEBPACK_IMPORTED_MODULE_8__[\"default\"].getApp,\n    isHLS: cronus_env__WEBPACK_IMPORTED_MODULE_8__[\"default\"].isHLS,\n    isCid: cronus_env__WEBPACK_IMPORTED_MODULE_8__[\"default\"].isCid,\n    isVid: cronus_env__WEBPACK_IMPORTED_MODULE_8__[\"default\"].isVid,\n    isLive: function isLive() {\n      var state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n      return (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getLiveStatus)(state);\n    },\n    isContentPlayable: isContentPlayable,\n    getAbsoluteSeekPositionInMs: cronus_logic_seekPosition__WEBPACK_IMPORTED_MODULE_46__.getAbsoluteSeekPositionInMs,\n    getRelativeSeekPositionInMs: cronus_logic_seekPosition__WEBPACK_IMPORTED_MODULE_46__.getRelativeSeekPositionInMs,\n    getTrimmedDurationInMillisec: getTrimmedDurationInMillisec,\n    searchCaptions: cronus_logic_captionSearchService__WEBPACK_IMPORTED_MODULE_30__.searchCaptions,\n    saveHashToLocalStorage: cronus_logic_lock_hashHelper__WEBPACK_IMPORTED_MODULE_39__[\"default\"].saveHashToLocalStorage,\n    getHashFromLocalStorage: cronus_logic_lock_hashHelper__WEBPACK_IMPORTED_MODULE_39__[\"default\"].getHashFromLocalStorage,\n    isPollAnswered: shared_logic_poll__WEBPACK_IMPORTED_MODULE_25__[\"default\"].isAnswered,\n    setHighlight: function setHighlight() {// We don't need to implement this function in hls.js/cronus\n    },\n    getByContent: function getByContent(key) {\n      switch (key) {\n        case 'startAt':\n          return (0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_28__.getInitialConfig)('to');\n\n        default:\n          return undefined;\n      }\n    },\n    getCutStart: function getCutStart() {\n      var state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n      var trimBoundaries = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_18__.getTrimBoundariesInSec)(state);\n      return (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(trimBoundaries, 'start', 0);\n    },\n    getPlayerState: function getPlayerState() {\n      var playerStateInstance = close_to_realtime__WEBPACK_IMPORTED_MODULE_4___default().playerState.get();\n\n      if (!playerStateInstance) {\n        return undefined;\n      }\n\n      return playerStateInstance.state;\n    },\n    getInitialConfig: function getInitialConfig(flag) {\n      return (0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_28__.getInitialConfig)(flag);\n    }\n  });\n  cronus_logic_privacy_privacyCookieChecker__WEBPACK_IMPORTED_MODULE_48__[\"default\"].startCheck();\n  cronus_embedApi__WEBPACK_IMPORTED_MODULE_33__.init({\n    ui: ui,\n    playback: cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"]\n  });\n  cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].TYPES.initialLoadingCompleted);\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.subscribe('qos.selectedId', onQualitySelect);\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.subscribe('qos.qualities', onQualityUpdate);\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.subscribe('content.mediaType', onMediaTypeChange);\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.subscribe('content.mediaId', onMediaIdChange);\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.subscribe('playback.ended', onPlaybackEnded);\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.subscribe('playback.selectedClosedCaption', onSubtitleSelect);\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.subscribe('playback.audioTracks', onAudioTracks);\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.subscribe('playback.selectedAudio', onAudioSelect);\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.subscribe('content.currentOffairVideoId', onOffairVideoChange);\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.subscribe('provider', onProviderDataChange);\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.subscribe('content.liveStatus', onProviderDataChange);\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.subscribe('playback.currentTime', onCurrentTime);\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.subscribe('playback.videoTagDuration', onVideoTagDuration);\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.subscribe('playback.canPlay', onCanPlay);\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.subscribe('provider.contentAccess.masterPlaylist', onMasterPlaylist);\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.subscribe('playback.videoTrackDisabled', onVideoTrackDisabled);\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.subscribe('playback.firstTimeUpdateReceived', onFirstTimeUpdateReceived);\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.subscribe('playback.playing', onPlaying);\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.subscribe('playback.isBufferEmpty', function (state) {\n    var playerStateInstance = close_to_realtime__WEBPACK_IMPORTED_MODULE_4___default().playerState.get();\n\n    if (playerStateInstance) {\n      playerStateInstance.setProps({\n        waiting: state\n      });\n    }\n  });\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.subscribe('playback.selectedAudio', onAudioOrCaptionChange);\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.subscribe('playback.selectedClosedCaption', onAudioOrCaptionChange);\n  ui.addEventListener(shared_ui_events__WEBPACK_IMPORTED_MODULE_27__[\"default\"].COMMAND.play, function () {\n    return tryPlayAds({\n      autoplay: true\n    });\n  });\n  ui.addEventListener(shared_ui_events__WEBPACK_IMPORTED_MODULE_27__[\"default\"].COMMAND.playScreenClicked, function () {\n    return tryPlayAds({\n      autoplay: false\n    });\n  });\n  ui.addEventListener(shared_ui_events__WEBPACK_IMPORTED_MODULE_27__[\"default\"].COMMAND.pause, function () {\n    cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].pause();\n  });\n  ui.addEventListener(shared_ui_events__WEBPACK_IMPORTED_MODULE_27__[\"default\"].COMMAND.seek, function (_ref6) {\n    var _ref6$detail = _ref6.detail,\n        position = _ref6$detail.position,\n        initiator = _ref6$detail.initiator;\n\n    var _position = _slicedToArray(position, 1),\n        to = _position[0];\n\n    cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].seek(to, initiator);\n    var state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n    var fromInSec = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_18__.getProgress)(state) * (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_18__.getTrimmedDuration)(state);\n    var toInSec = (0,cronus_logic_seekPosition__WEBPACK_IMPORTED_MODULE_46__.getRelativeSeekPositionInMs)(to * 1000) / 1000;\n    cronus_reporting__WEBPACK_IMPORTED_MODULE_11__[\"default\"].sendWithDelay(cronus_reporting__WEBPACK_IMPORTED_MODULE_11__[\"default\"].TYPES.seek, {\n      fromInSec: fromInSec,\n      toInSec: toInSec\n    }, 1000);\n  });\n  ui.addEventListener(shared_ui_events__WEBPACK_IMPORTED_MODULE_27__[\"default\"].COMMAND.qualityChange, function (_ref7) {\n    var qualityId = _ref7.detail.qualityId;\n    cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].setQuality(qualityId);\n  });\n  ui.addEventListener(shared_ui_events__WEBPACK_IMPORTED_MODULE_27__[\"default\"].COMMAND.theaterMode, function (_ref8) {\n    var enabled = _ref8.detail.enabled;\n    cronus_embedApi__WEBPACK_IMPORTED_MODULE_33__.sendEvent(cronus_embedApi__WEBPACK_IMPORTED_MODULE_33__.EVENTS.theaterMode, enabled);\n  });\n  ui.addEventListener(shared_ui_events__WEBPACK_IMPORTED_MODULE_27__[\"default\"].COMMAND.poll, function (_ref9) {\n    var pollData = _ref9.detail;\n    cronus_embedApi__WEBPACK_IMPORTED_MODULE_33__.sendEvent(cronus_embedApi__WEBPACK_IMPORTED_MODULE_33__.EVENTS.poll, pollData);\n  });\n  ui.addEventListener(shared_ui_events__WEBPACK_IMPORTED_MODULE_27__[\"default\"].COMMAND.sendLog, function (_ref10) {\n    var _ref10$detail = _ref10.detail,\n        reason = _ref10$detail.reason,\n        logSendingFromAssistedReporting = _ref10$detail.logSendingFromAssistedReporting;\n    debugLogger.info('Report playback issue', {\n      reason: reason\n    });\n    ui.setLogSendingStarted();\n    (0,shared_logic_logsender__WEBPACK_IMPORTED_MODULE_24__[\"default\"])({\n      onProgress: ui.setLogSendingProgress\n    }).then(function (logId) {\n      ui.setLogSendingCompleted(logId);\n      trackLogSending(logId, logSendingFromAssistedReporting, reason);\n    }).catch(function (e) {\n      debugLogger.error(e.message);\n      ui.setLogSendingCompleted();\n    });\n  });\n  ui.addEventListener(shared_ui_events__WEBPACK_IMPORTED_MODULE_27__[\"default\"].COMMAND.videoFinished, onPlaybackEndedUiCallback);\n  ui.addEventListener(shared_ui_events__WEBPACK_IMPORTED_MODULE_27__[\"default\"].COMMAND.sendPollAnswer, function (_ref11) {\n    var data = _ref11.detail;\n    var currMediaId = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getActiveMediaId)(cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState());\n    var currConnection = cronus_ums__WEBPACK_IMPORTED_MODULE_7__[\"default\"].getInstance(currMediaId);\n    currConnection.send('api/poll/vote', [data]);\n    shared_logic_poll__WEBPACK_IMPORTED_MODULE_25__[\"default\"].setPollAnswered(data.pollInstanceId);\n  });\n  ui.addEventListener(shared_ui_events__WEBPACK_IMPORTED_MODULE_27__[\"default\"].REPORT.centralLog, function (_ref12) {\n    var _ref12$detail = _ref12.detail,\n        message = _ref12$detail.message,\n        data = _ref12$detail.data;\n    cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].transport({\n      message: message,\n      data: data\n    }).send();\n  });\n  ui.addEventListener(shared_ui_events__WEBPACK_IMPORTED_MODULE_27__[\"default\"].COMMAND.setCaptionPosition, function (_ref13) {\n    var captionPosition = _ref13.detail.captionPosition;\n    cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].setCCPosition(captionPosition);\n  });\n  var mediaId = cronus_env__WEBPACK_IMPORTED_MODULE_8__[\"default\"].getMid();\n  var mediaType = cronus_env__WEBPACK_IMPORTED_MODULE_8__[\"default\"].isVid() ? shared_store_actions_content__WEBPACK_IMPORTED_MODULE_12__.MEDIA_TYPES.recorded : shared_store_actions_content__WEBPACK_IMPORTED_MODULE_12__.MEDIA_TYPES.live;\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,cronus_store_actions_content__WEBPACK_IMPORTED_MODULE_13__.setMediaChange)({\n    mediaType: mediaType,\n    mediaId: mediaId\n  }));\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_38__.setReady)(true));\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.subscribe('ums.password', onPasswordChanged);\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.subscribe('ums.hash', onHashChanged);\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.subscribe('ums.lock.type', function (lockType) {\n    if (lockType) {\n      shared_logic_assistedReporting__WEBPACK_IMPORTED_MODULE_53__.destroy();\n      destroyCRT();\n    }\n  });\n  cronus_embedApi__WEBPACK_IMPORTED_MODULE_33__.sendEvent(cronus_embedApi__WEBPACK_IMPORTED_MODULE_33__.EVENTS.ready, true);\n  /** @returns {Promose<string, Error>} */\n\n  window.sendPlayerLog = function () {\n    ui.setLogSendingStarted();\n    return (0,shared_logic_logsender__WEBPACK_IMPORTED_MODULE_24__[\"default\"])({\n      onProgress: ui.setLogSendingProgress\n    }).then(function (logId) {\n      ui.setLogSendingCompleted(logId);\n      trackLogSending(logId);\n      return logId;\n    }).catch(function (e) {\n      debugLogger.error(e.message);\n      ui.setLogSendingCompleted();\n      throw e;\n    });\n  };\n\n  if ((0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_28__.getInitialConfig)('findText')) {\n    cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_captionSearch__WEBPACK_IMPORTED_MODULE_52__.setSearchText)(decodeURIComponent((0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_28__.getInitialConfig)('findText'))));\n    cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_captionSearch__WEBPACK_IMPORTED_MODULE_52__.toggleCaptionSearchPanel)(true));\n  }\n\n  if ((0,shared_logic_browserOldNotification__WEBPACK_IMPORTED_MODULE_55__.shouldShowOldBrowserNotification)()) {\n    cronus_store__WEBPACK_IMPORTED_MODULE_21__[\"default\"].dispatch((0,shared_store_actions_player__WEBPACK_IMPORTED_MODULE_51__.showNotification)(shared_store_actions_player__WEBPACK_IMPORTED_MODULE_51__.NOTIFICATION_TYPES.oldBrowser));\n  }\n}\n\nfunction onSubtitleSelect(selectedId) {\n  if (selectedId < 0) {\n    cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].disableSubtitles();\n    return;\n  }\n\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n  var selectedSubtitle = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_18__.getSubtitleTrackById)(state, selectedId);\n\n  if (!selectedSubtitle) {\n    return;\n  }\n\n  var id = selectedSubtitle.id;\n  cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].setSubtitleTrack(id);\n}\n\nfunction onAudioTracks() {\n  var defaultLang = (0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_28__.getInitialConfig)('defaultlang');\n\n  if (!defaultLang) {\n    return;\n  }\n\n  var audioTracks = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_18__.getAudioTracks)(cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState());\n  var defaultAudio = (0,shared_logic_getDefaultLanguage__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(audioTracks, defaultLang);\n\n  if (!defaultAudio) {\n    return;\n  }\n\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_38__.selectAudio)(defaultAudio.id));\n}\n\nfunction onAudioSelect(selectedId) {\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n  var selectedAudio = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_18__.getAudioTrackById)(state, selectedId);\n\n  if (!selectedAudio) {\n    return;\n  }\n\n  if (ui) {\n    ui.setAudioLoading(true);\n  }\n\n  var id = selectedAudio.id;\n  cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].setAudioTrack(id);\n}\n\nfunction onMediaTypeChange(newMediaType, prevMediaType) {\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n  var mediaId = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getMediaId)(state);\n  var offairContent = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState().content.offairContent;\n  debugLogger.debug('onMediaTypeChange', {\n    newMediaType: newMediaType,\n    mediaId: mediaId,\n    offairContent: offairContent\n  });\n  cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].unload();\n  downloadErrors = {};\n  trimSet = false;\n  ui.stopSlideShow();\n\n  if ([shared_store_actions_content__WEBPACK_IMPORTED_MODULE_12__.MEDIA_TYPES.offairVideo, shared_store_actions_content__WEBPACK_IMPORTED_MODULE_12__.MEDIA_TYPES.recorded, shared_store_actions_content__WEBPACK_IMPORTED_MODULE_12__.MEDIA_TYPES.live].includes(newMediaType)) {\n    initCRT();\n    initAssistedReporting();\n  } else {\n    shared_logic_assistedReporting__WEBPACK_IMPORTED_MODULE_53__.destroy();\n    destroyCRT();\n  }\n\n  switch (newMediaType) {\n    case shared_store_actions_content__WEBPACK_IMPORTED_MODULE_12__.MEDIA_TYPES.offairSlide:\n      cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,cronus_store_actions_reset__WEBPACK_IMPORTED_MODULE_16__.reset)(cronus_store_actions_reset__WEBPACK_IMPORTED_MODULE_16__.RESET_TYPES.offAir));\n      ui.startSlideShow(offairContent.pictures);\n      cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].TYPES.offairContentDisplayed, {\n        offairContentType: 'image'\n      });\n      break;\n\n    case shared_store_actions_content__WEBPACK_IMPORTED_MODULE_12__.MEDIA_TYPES.offairVideo:\n      cronus_logic_offairContent__WEBPACK_IMPORTED_MODULE_34__[\"default\"].nextOffairVideo();\n      cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].TYPES.offairContentDisplayed, {\n        offairContentType: 'video'\n      });\n      break;\n\n    case shared_store_actions_content__WEBPACK_IMPORTED_MODULE_12__.MEDIA_TYPES.offairScreen:\n      cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,cronus_store_actions_reset__WEBPACK_IMPORTED_MODULE_16__.reset)(cronus_store_actions_reset__WEBPACK_IMPORTED_MODULE_16__.RESET_TYPES.offAir));\n      cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_ums__WEBPACK_IMPORTED_MODULE_41__.setLockInfo)({\n        type: 'offair'\n      }));\n      ui.setContentAvailable(false);\n      break;\n\n    case shared_store_actions_content__WEBPACK_IMPORTED_MODULE_12__.MEDIA_TYPES.live:\n      if (mediaId && prevMediaType) {\n        // if there is connection to offair video, we have to destroy it\n        cronus_ums__WEBPACK_IMPORTED_MODULE_7__[\"default\"].destroyAllOthers(mediaId);\n\n        if (prevMediaType === shared_store_actions_content__WEBPACK_IMPORTED_MODULE_12__.MEDIA_TYPES.offairVideo || prevMediaType === shared_store_actions_content__WEBPACK_IMPORTED_MODULE_12__.MEDIA_TYPES.offairScreen || prevMediaType === shared_store_actions_content__WEBPACK_IMPORTED_MODULE_12__.MEDIA_TYPES.offairImage || prevMediaType === shared_store_actions_content__WEBPACK_IMPORTED_MODULE_12__.MEDIA_TYPES.offairSlide) {\n          loadNewMedia(mediaId, true);\n          cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_38__.togglePlaying)(true));\n          checkAutoplay();\n        } else {\n          loadNewMedia(mediaId);\n        }\n      }\n\n      cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_ums__WEBPACK_IMPORTED_MODULE_41__.setLockInfo)({\n        type: ''\n      }));\n      break;\n\n    default:\n      break;\n  }\n}\n\nfunction onMediaIdChange(newMediaId, prevMediaId) {\n  debugLogger.debug(\"media id change from:\".concat(prevMediaId, \" to:\").concat(newMediaId));\n\n  if (prevMediaId !== null) {\n    cronus_ums__WEBPACK_IMPORTED_MODULE_7__[\"default\"].destroyAll();\n    cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].reset();\n    cronus_logic_advert__WEBPACK_IMPORTED_MODULE_32__[\"default\"].reset();\n    cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].unload();\n  }\n\n  initCRT();\n  initAssistedReporting();\n  loadHashDataFromLocalStorage();\n  loadNewMedia(newMediaId);\n}\n\nfunction onOffairVideoChange(currentOffairVideoId) {\n  var offairContent = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState().content.offairContent;\n\n  if (currentOffairVideoId) {\n    var index = offairContent.videos.indexOf(currentOffairVideoId);\n    var previousOffairVideoId = offairContent.videos[index - 1];\n    debugLogger.debug(\"offair video change from:\".concat(previousOffairVideoId, \" to:\").concat(currentOffairVideoId));\n\n    if (previousOffairVideoId) {\n      cronus_ums__WEBPACK_IMPORTED_MODULE_7__[\"default\"].destroy(cronus_env__WEBPACK_IMPORTED_MODULE_8__[\"default\"].getMidForVideoId(previousOffairVideoId));\n    }\n\n    cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].TYPES.offairContentChanged, {\n      prevId: previousOffairVideoId,\n      nextId: currentOffairVideoId\n    });\n    cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].unload();\n    loadNewMedia(cronus_env__WEBPACK_IMPORTED_MODULE_8__[\"default\"].getMidForVideoId(currentOffairVideoId), true);\n    cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_38__.togglePlaying)(true));\n    initCRT();\n    initAssistedReporting();\n    cronus_embedApi__WEBPACK_IMPORTED_MODULE_33__.sendEvent(cronus_embedApi__WEBPACK_IMPORTED_MODULE_33__.EVENTS.content, ['recorded', parseInt(currentOffairVideoId, 10)]);\n  }\n}\n\nfunction onHashChanged(hash) {\n  if (!hash) {\n    return;\n  }\n\n  retry();\n}\n\nfunction onPasswordChanged(password) {\n  if (!password) {\n    return;\n  }\n\n  retry();\n}\n\nfunction loadHashDataFromLocalStorage() {\n  var hashFromLocalStorage = cronus_logic_lock_hashHelper__WEBPACK_IMPORTED_MODULE_39__[\"default\"].getHashFromLocalStorage();\n\n  if (hashFromLocalStorage) {\n    cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_ums__WEBPACK_IMPORTED_MODULE_41__.addHash)(hashFromLocalStorage));\n  }\n\n  var passwordFromLocalStorage = cronus_logic_lock_hashHelper__WEBPACK_IMPORTED_MODULE_39__[\"default\"].getPasswordFromSessionStorage();\n\n  if (passwordFromLocalStorage) {\n    cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_ums__WEBPACK_IMPORTED_MODULE_41__.addPassword)(passwordFromLocalStorage));\n  }\n}\n\nfunction retry() {\n  cronus_ums__WEBPACK_IMPORTED_MODULE_7__[\"default\"].destroyAll();\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n  var mediaId = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getMediaId)(state);\n  debugLogger.debug(\"retry loading media id \".concat(mediaId));\n  loadNewMedia(mediaId);\n}\n\nfunction onProviderDataChange() {\n  return _onProviderDataChange.apply(this, arguments);\n}\n\nfunction _onProviderDataChange() {\n  _onProviderDataChange = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n    var state, availableProviders, currentProvider, forcedUrl, forcedProvider, _availableProviders, firstProvider, masterPlaylist, qualities, subtitleTracks, audioTracks;\n\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n            availableProviders = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getAvailableProviders)(state); // We don't have the cdnConfig module or the sdcdn or the multicast lib is\n            // not ready\n\n            if (!(availableProviders.length === 0)) {\n              _context3.next = 4;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 4:\n            currentProvider = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getCurrentProvider)(state);\n            forcedUrl = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getForcedUrl)(state);\n\n            if (!(forcedUrl && forcedUrl !== (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(currentProvider, 'url'))) {\n              _context3.next = 11;\n              break;\n            }\n\n            forcedProvider = availableProviders.find(function (_ref16) {\n              var url = _ref16.url;\n              return url === forcedUrl;\n            });\n\n            if (!forcedProvider) {\n              _context3.next = 11;\n              break;\n            }\n\n            selectProvider(forcedProvider);\n            return _context3.abrupt(\"return\");\n\n          case 11:\n            if (!(!currentProvider || !availableProviders.some(function (_ref17) {\n              var url = _ref17.url;\n              return url === currentProvider.url;\n            }))) {\n              _context3.next = 15;\n              break;\n            }\n\n            _availableProviders = _slicedToArray(availableProviders, 1), firstProvider = _availableProviders[0];\n            selectProvider(firstProvider);\n            return _context3.abrupt(\"return\");\n\n          case 15:\n            masterPlaylist = getMasterPlaylist();\n\n            if (masterPlaylist) {\n              _context3.next = 18;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 18:\n            if (cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getCurrentProvider()) {\n              _context3.next = 31;\n              break;\n            }\n\n            _context3.next = 21;\n            return callPlaybackLoad();\n\n          case 21:\n            cronus_reporting__WEBPACK_IMPORTED_MODULE_11__[\"default\"].aggregate(cronus_reporting__WEBPACK_IMPORTED_MODULE_11__[\"default\"].TYPES.providerChange, {\n              cdnProviderType: (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getCurrentProviderType)(state),\n              cdnProviderHostname: (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getCurrentProviderHost)(state)\n            });\n            cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_content__WEBPACK_IMPORTED_MODULE_12__.setStreamInfo)({\n              format: 'mp4/segmented',\n              url: masterPlaylist.split('?')[0]\n            }));\n            qualities = cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getQualities();\n            cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,cronus_store_actions_qos__WEBPACK_IMPORTED_MODULE_14__.setQualities)(qualities));\n            subtitleTracks = cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getSubtitleTracks();\n\n            if (subtitleTracks && subtitleTracks.length > 0) {\n              cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_38__.setClosedCaptionTracks)(subtitleTracks));\n            }\n\n            audioTracks = cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getAudioTracks();\n\n            if (audioTracks && audioTracks.length > 0) {\n              cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_38__.setAudioTracks)(audioTracks));\n            }\n\n            checkAutoplay();\n            return _context3.abrupt(\"return\");\n\n          case 31:\n            if (!(0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.areTheSameProviders)(cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getCurrentProvider(), currentProvider)) {\n              _context3.next = 33;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 33:\n            cronus_reporting__WEBPACK_IMPORTED_MODULE_11__[\"default\"].aggregate(cronus_reporting__WEBPACK_IMPORTED_MODULE_11__[\"default\"].TYPES.providerChange, {\n              cdnProviderType: (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getCurrentProviderType)(state),\n              cdnProviderHostname: (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getCurrentProviderHost)(state)\n            });\n            cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].changeProvider(currentProvider);\n\n          case 35:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _onProviderDataChange.apply(this, arguments);\n}\n\nfunction onVideoTagDuration() {\n  if (trimSet) {\n    return;\n  }\n\n  cronus_embedApi__WEBPACK_IMPORTED_MODULE_33__.sendEvent(cronus_embedApi__WEBPACK_IMPORTED_MODULE_33__.EVENTS.contentAvailable, true);\n  setTrim();\n}\n\nfunction onCanPlay() {\n  if (trimSet) {\n    return;\n  }\n\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n  var canPlay = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getCanPlay)(state);\n\n  if (canPlay) {\n    setTrim();\n  }\n}\n\nfunction setTrim() {\n  if (!(0,cronus_logic_seekPosition__WEBPACK_IMPORTED_MODULE_46__.isSeekAvailable)()) {\n    return;\n  }\n\n  trimSet = true;\n  ui.setDuration();\n  ui.setContentAvailable(true);\n} // The token is generated per client based on MediaType, MediaId, Host and if\n// available PlayerId. If the player disconnects then the HLS main playlist\n// will send back Forbidden message and a new connection is needed due to that\n// fact the given token will be removed after the disconnect.\n// https://wiki.ustream-adm.in/pages/viewpage.action?pageId=78544954\n\n\nfunction handleTokenChange() {\n  return _handleTokenChange.apply(this, arguments);\n}\n\nfunction _handleTokenChange() {\n  _handleTokenChange = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n    var state, masterPlaylist, source;\n    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n            masterPlaylist = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getMasterPlaylistURL)(state);\n            source = cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getSource();\n            debugLogger.info('The token query parameter in the master manifest URL has changed', {\n              currentMasterPlaylist: source,\n              nextMasterPlaylist: masterPlaylist\n            });\n            cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].saveSeekPosition();\n            cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].unload();\n            _context4.next = 8;\n            return callPlaybackLoad();\n\n          case 8:\n            if ((0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.isPlaying)(state)) {\n              cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].play();\n            }\n\n          case 9:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _handleTokenChange.apply(this, arguments);\n}\n\nfunction handleStreamSwitch() {\n  return _handleStreamSwitch.apply(this, arguments);\n}\n\nfunction _handleStreamSwitch() {\n  _handleStreamSwitch = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n    var state, masterPlaylist, source;\n    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n            masterPlaylist = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getMasterPlaylistURL)(state);\n            source = cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getSource();\n            debugLogger.info('Stream switch detected', {\n              currentMasterPlaylist: source,\n              nextMasterPlaylist: masterPlaylist\n            });\n            cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].unload();\n            _context5.next = 7;\n            return callPlaybackLoad();\n\n          case 7:\n            if ((0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.isPlaying)(state)) {\n              cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].play();\n            }\n\n          case 8:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _handleStreamSwitch.apply(this, arguments);\n}\n\nfunction onMasterPlaylist() {\n  return _onMasterPlaylist.apply(this, arguments);\n}\n\nfunction _onMasterPlaylist() {\n  _onMasterPlaylist = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n    var state, masterPlaylist, source, tokenChanged, sourceChanged;\n    return regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            if (!(0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_28__.getInitialConfig)('directHlsUri')) {\n              _context6.next = 2;\n              break;\n            }\n\n            return _context6.abrupt(\"return\");\n\n          case 2:\n            state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n            masterPlaylist = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getMasterPlaylistURL)(state);\n            source = cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getSource();\n\n            if (!(!masterPlaylist || !source)) {\n              _context6.next = 7;\n              break;\n            }\n\n            return _context6.abrupt(\"return\");\n\n          case 7:\n            tokenChanged = !(0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.checkTokenEquality)(state, source);\n\n            if (!tokenChanged) {\n              _context6.next = 12;\n              break;\n            }\n\n            _context6.next = 11;\n            return handleTokenChange();\n\n          case 11:\n            return _context6.abrupt(\"return\");\n\n          case 12:\n            sourceChanged = !(0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.checkSourceChannelEquality)(state, source);\n\n            if (!sourceChanged) {\n              _context6.next = 16;\n              break;\n            }\n\n            _context6.next = 16;\n            return handleStreamSwitch();\n\n          case 16:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _onMasterPlaylist.apply(this, arguments);\n}\n\nfunction onVideoTrackDisabled() {\n  return _onVideoTrackDisabled.apply(this, arguments);\n}\n\nfunction _onVideoTrackDisabled() {\n  _onVideoTrackDisabled = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n    var isAudioOnly, selectedQualityId, selectedSubtitleId, selectedAudioId;\n    return regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            if (cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getSource()) {\n              _context7.next = 2;\n              break;\n            }\n\n            return _context7.abrupt(\"return\");\n\n          case 2:\n            isAudioOnly = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_18__.isVideoTrackDisabled)(cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState());\n            cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_content__WEBPACK_IMPORTED_MODULE_12__.toggleAudioOnly)(isAudioOnly));\n            cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].saveSeekPosition();\n            selectedQualityId = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getSelectedQualityId)(cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState());\n\n            if (selectedQualityId > -1) {\n              cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].saveQuality(selectedQualityId);\n            }\n\n            selectedSubtitleId = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_18__.getSelectedClosedCaptionId)(cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState());\n\n            if (selectedSubtitleId > -1) {\n              cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].saveSubtitle(selectedSubtitleId);\n            }\n\n            selectedAudioId = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_18__.getSelectedAudioTrackId)(cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState());\n\n            if (selectedAudioId > -1) {\n              cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].saveAudio();\n            }\n\n            cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].unload();\n            _context7.next = 14;\n            return callPlaybackLoad();\n\n          case 14:\n            if ((0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.isPlaying)(cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState())) {\n              cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].play();\n            }\n\n          case 15:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _onVideoTrackDisabled.apply(this, arguments);\n}\n\nfunction onFirstTimeUpdateReceived() {\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n\n  if ((0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getFirstTimeUpdateReceived)(state)) {\n    var now = performance.now();\n    cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,cronus_store_actions_tracking__WEBPACK_IMPORTED_MODULE_15__.setFirstFrameTime)(now));\n    cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_10__[\"default\"].TYPES.firstTimeUpdate, {\n      autoplay: !!(0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_28__.getInitialConfig)('autoplay'),\n      timeSpentFromInit: now - (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getInitialLoadingTime)(state),\n      timeSpent: now - (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getStreamModuleReceivedTime)(state)\n    });\n  }\n}\n\nfunction onPlaying() {\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n  var playerStateInstance = close_to_realtime__WEBPACK_IMPORTED_MODULE_4___default().playerState.get();\n\n  if (playerStateInstance) {\n    playerStateInstance.setProps({\n      playing: (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.isPlaying)(state)\n    });\n\n    if ((0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.isPlaying)(state) && state.playback.isBufferEmpty) {\n      playerStateInstance.setProps({\n        waiting: true\n      });\n    }\n  }\n}\n\nfunction onAudioOrCaptionChange() {\n  var sender = close_to_realtime__WEBPACK_IMPORTED_MODULE_4___default().sender.get();\n\n  if (sender && sender.firstStartEvent) {\n    var state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n    var closedCaptionTracks = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state, 'playback.closedCaptionTracks', []);\n    var audioTracks = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state, 'playback.audioTracks', []);\n\n    if (closedCaptionTracks.length > 0 || audioTracks.length > 0) {\n      sender.send((close_to_realtime__WEBPACK_IMPORTED_MODULE_4___default().sender.EVENTS.heartbeat));\n    }\n  }\n}\n\nfunction onCurrentTime() {\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState();\n  var progress = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_18__.getProgress)(state);\n  ui.setProgress(progress);\n  var playerStateInstance = close_to_realtime__WEBPACK_IMPORTED_MODULE_4___default().playerState.get();\n\n  if (playerStateInstance) {\n    playerStateInstance.setProps({\n      currentTime: (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_18__.getCurrentTime)(state)\n    });\n  }\n\n  if (cronus_hacks__WEBPACK_IMPORTED_MODULE_50__.HANDLE_MISSING_ENDLIST) {\n    if ((0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getMediaType)(state) === shared_store_actions_content__WEBPACK_IMPORTED_MODULE_12__.MEDIA_TYPES.live && (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getChannelContentAvailable)(state) === false && !(0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getEnded)(state)) {\n      var _$video2 = $video,\n          buffered = _$video2.buffered,\n          currentTime = _$video2.currentTime;\n\n      if (buffered.length > 0) {\n        var lastBufferedPosition = buffered.end(buffered.length - 1);\n        var stalled = currentTime >= lastBufferedPosition - 0.2;\n\n        if (stalled) {\n          cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_38__.setEnded)(true));\n        }\n      }\n    }\n  }\n}\n/**\n * @param {MediaId} mediaId - \"recorded.118528001\"\n * @param {boolean=} isOffAir\n */\n\n\nfunction loadNewMedia(newMediaId) {\n  var isOffAir = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  debugLogger.info('load media', {\n    mediaId: newMediaId\n  }, true);\n  cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].destroy();\n  createVideoTag();\n  initPlayback();\n  stopWatchingVideoPlaybackQuality();\n  stopWatchingVideoPlaybackQuality = (0,player_utils_video_playbackQuality__WEBPACK_IMPORTED_MODULE_1__[\"default\"])($video, function (info) {\n    cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_debug__WEBPACK_IMPORTED_MODULE_36__.addFrameAndDropRate)(info));\n  });\n  ui.setContentAvailable(false);\n  ui.setContentUpdate();\n  downloadErrors = {};\n  trimSet = false;\n  var resetType = isOffAir ? cronus_store_actions_reset__WEBPACK_IMPORTED_MODULE_16__.RESET_TYPES.offAir : cronus_store_actions_reset__WEBPACK_IMPORTED_MODULE_16__.RESET_TYPES.mediaChange;\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,cronus_store_actions_reset__WEBPACK_IMPORTED_MODULE_16__.reset)(resetType));\n  cronus_ums__WEBPACK_IMPORTED_MODULE_7__[\"default\"].init(newMediaId);\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_ums__WEBPACK_IMPORTED_MODULE_41__.setUmsInfo)({\n    umsInfo: cronus_ums__WEBPACK_IMPORTED_MODULE_7__[\"default\"].getInfo(newMediaId)\n  }));\n}\n\nfunction onPrivacyCookieChanged() {\n  cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_38__.togglePlaying)(true));\n  checkAutoplay();\n}\n\nfunction checkAutoplay() {\n  var playing = cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState().playback.playing;\n  debugLogger.debug('checkAutoplay', {\n    playing: playing\n  });\n  var playerStateInstance = close_to_realtime__WEBPACK_IMPORTED_MODULE_4___default().playerState.get();\n\n  if (playerStateInstance) {\n    playerStateInstance.setProps({\n      contentAvailable: true\n    });\n\n    if (playing) {\n      playerStateInstance.setProps({\n        playing: true\n      });\n    }\n  }\n\n  ui.setContentAvailable(true);\n\n  if (!cronus_logic_privacy_privacyCookieChecker__WEBPACK_IMPORTED_MODULE_48__[\"default\"].canStartAutoplay()) {\n    debugLogger.debug('autoplay not allowed from privacy cookie settings');\n    cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_38__.togglePlaying)(false));\n    ui.showPlayScreen();\n    cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.subscribe('privacy.ibmCookie', onPrivacyCookieChanged);\n    return;\n  }\n\n  var volume = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_17__.getVolume)(cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.getState());\n  var autoplayMuted = !volume;\n\n  if (playing) {\n    can_autoplay__WEBPACK_IMPORTED_MODULE_47__[\"default\"].video({\n      muted: autoplayMuted,\n      timeout: 500\n    }).then(function (_ref14) {\n      var result = _ref14.result,\n          error = _ref14.error;\n\n      if (result === true) {\n        // Can auto-play\n        tryPlayAds({\n          autoplay: true\n        });\n      } else {\n        // Cannot auto-play\n        debugLogger.debug('autoplay not allowed in browser', (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(error, 'message'));\n        cronus_store__WEBPACK_IMPORTED_MODULE_21__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_38__.togglePlaying)(false));\n        ui.showPlayScreen();\n      }\n    });\n    return;\n  } // no autoplay, show ui\n\n\n  ui.showPlayScreen();\n}\n\nfunction tryPlayAds(_x2) {\n  return _tryPlayAds.apply(this, arguments);\n}\n\nfunction _tryPlayAds() {\n  _tryPlayAds = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(_ref15) {\n    var autoplay, options;\n    return regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            autoplay = _ref15.autoplay;\n            cronus_logic_privacy_privacyCookieChecker__WEBPACK_IMPORTED_MODULE_48__[\"default\"].stopCheck();\n\n            if (cronus_logic_advert__WEBPACK_IMPORTED_MODULE_32__[\"default\"].isInitialized()) {\n              _context8.next = 7;\n              break;\n            }\n\n            options = {\n              ui: ui,\n              videoTag: $video,\n              adContainerId: 'AdHolder',\n              autoplay: autoplay\n            };\n            _context8.next = 6;\n            return cronus_logic_advert__WEBPACK_IMPORTED_MODULE_32__[\"default\"].init(options);\n\n          case 6:\n            return _context8.abrupt(\"return\");\n\n          case 7:\n            cronus_playback__WEBPACK_IMPORTED_MODULE_5__[\"default\"].play();\n\n          case 8:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _tryPlayAds.apply(this, arguments);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  init: init\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../js/cronus/index.js\n");

/***/ }),

/***/ "../js/cronus/logic/advert/consts.js":
/*!*******************************************!*\
  !*** ../js/cronus/logic/advert/consts.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  positions: {\n    PRE: 'pre',\n    MID: 'mid',\n    POST: 'post'\n  },\n  providers: {\n    DELAY: 'delay',\n    GOOGLE: 'googleads'\n  },\n  AD_REQUEST_TIMEOUT: 30 * 1000,\n  AD_START_TIMEOUT: 30 * 1000,\n  DEFAULT_PARTNER_DELAY: 15 * 60 * 1000\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL2xvZ2ljL2FkdmVydC9jb25zdHMuanMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLCtEQUFlO0FBQ2JBLEVBQUFBLFNBQVMsRUFBRTtBQUNUQyxJQUFBQSxHQUFHLEVBQUUsS0FESTtBQUVUQyxJQUFBQSxHQUFHLEVBQUUsS0FGSTtBQUdUQyxJQUFBQSxJQUFJLEVBQUU7QUFIRyxHQURFO0FBT2JDLEVBQUFBLFNBQVMsRUFBRTtBQUNUQyxJQUFBQSxLQUFLLEVBQUUsT0FERTtBQUVUQyxJQUFBQSxNQUFNLEVBQUU7QUFGQyxHQVBFO0FBV2JDLEVBQUFBLGtCQUFrQixFQUFFLEtBQUssSUFYWjtBQVliQyxFQUFBQSxnQkFBZ0IsRUFBRSxLQUFLLElBWlY7QUFhYkMsRUFBQUEscUJBQXFCLEVBQUUsS0FBSyxFQUFMLEdBQVU7QUFicEIsQ0FBZiIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vanMvY3JvbnVzL2xvZ2ljL2FkdmVydC9jb25zdHMuanM/NjlmMyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gIHBvc2l0aW9uczoge1xuICAgIFBSRTogJ3ByZScsXG4gICAgTUlEOiAnbWlkJyxcbiAgICBQT1NUOiAncG9zdCcsXG4gIH0sXG5cbiAgcHJvdmlkZXJzOiB7XG4gICAgREVMQVk6ICdkZWxheScsXG4gICAgR09PR0xFOiAnZ29vZ2xlYWRzJyxcbiAgfSxcbiAgQURfUkVRVUVTVF9USU1FT1VUOiAzMCAqIDEwMDAsXG4gIEFEX1NUQVJUX1RJTUVPVVQ6IDMwICogMTAwMCxcbiAgREVGQVVMVF9QQVJUTkVSX0RFTEFZOiAxNSAqIDYwICogMTAwMCxcbn07XG4iXSwibmFtZXMiOlsicG9zaXRpb25zIiwiUFJFIiwiTUlEIiwiUE9TVCIsInByb3ZpZGVycyIsIkRFTEFZIiwiR09PR0xFIiwiQURfUkVRVUVTVF9USU1FT1VUIiwiQURfU1RBUlRfVElNRU9VVCIsIkRFRkFVTFRfUEFSVE5FUl9ERUxBWSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/logic/advert/consts.js\n");

/***/ }),

/***/ "../js/cronus/logic/advert/helpers.js":
/*!********************************************!*\
  !*** ../js/cronus/logic/advert/helpers.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isOnIbm\": function() { return /* binding */ isOnIbm; },\n/* harmony export */   \"isOnUstream\": function() { return /* binding */ isOnUstream; }\n/* harmony export */ });\n/**\n * @param {string} referrer\n * @return {boolean}\n */\nfunction isOnUstream(referrer) {\n  var result;\n\n  try {\n    var url = new URL(referrer);\n    result = /ustream\\.tv(?:\\.lh)?$/.test(url.hostname);\n  } catch (e) {\n    result = false;\n  }\n\n  return result;\n}\n/**\n * @param {string} referrer\n * @return {boolean}\n */\n\nfunction isOnIbm(referrer) {\n  var result;\n\n  try {\n    var url = new URL(referrer);\n    result = /ibm\\.com$/.test(url.hostname);\n  } catch (e) {\n    result = false;\n  }\n\n  return result;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL2xvZ2ljL2FkdmVydC9oZWxwZXJzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTQSxXQUFULENBQXFCQyxRQUFyQixFQUErQjtBQUNwQyxNQUFJQyxNQUFKOztBQUVBLE1BQUk7QUFDRixRQUFNQyxHQUFHLEdBQUcsSUFBSUMsR0FBSixDQUFRSCxRQUFSLENBQVo7QUFDQUMsSUFBQUEsTUFBTSxHQUFHLHdCQUF3QkcsSUFBeEIsQ0FBNkJGLEdBQUcsQ0FBQ0csUUFBakMsQ0FBVDtBQUNELEdBSEQsQ0FHRSxPQUFPQyxDQUFQLEVBQVU7QUFDVkwsSUFBQUEsTUFBTSxHQUFHLEtBQVQ7QUFDRDs7QUFFRCxTQUFPQSxNQUFQO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFDTyxTQUFTTSxPQUFULENBQWlCUCxRQUFqQixFQUEyQjtBQUNoQyxNQUFJQyxNQUFKOztBQUVBLE1BQUk7QUFDRixRQUFNQyxHQUFHLEdBQUcsSUFBSUMsR0FBSixDQUFRSCxRQUFSLENBQVo7QUFDQUMsSUFBQUEsTUFBTSxHQUFHLFlBQVlHLElBQVosQ0FBaUJGLEdBQUcsQ0FBQ0csUUFBckIsQ0FBVDtBQUNELEdBSEQsQ0FHRSxPQUFPQyxDQUFQLEVBQVU7QUFDVkwsSUFBQUEsTUFBTSxHQUFHLEtBQVQ7QUFDRDs7QUFFRCxTQUFPQSxNQUFQO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy9sb2dpYy9hZHZlcnQvaGVscGVycy5qcz83YjcwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHJlZmVycmVyXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNPblVzdHJlYW0ocmVmZXJyZXIpIHtcbiAgbGV0IHJlc3VsdDtcblxuICB0cnkge1xuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwocmVmZXJyZXIpO1xuICAgIHJlc3VsdCA9IC91c3RyZWFtXFwudHYoPzpcXC5saCk/JC8udGVzdCh1cmwuaG9zdG5hbWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmVzdWx0ID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWZlcnJlclxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzT25JYm0ocmVmZXJyZXIpIHtcbiAgbGV0IHJlc3VsdDtcblxuICB0cnkge1xuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwocmVmZXJyZXIpO1xuICAgIHJlc3VsdCA9IC9pYm1cXC5jb20kLy50ZXN0KHVybC5ob3N0bmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXN1bHQgPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4iXSwibmFtZXMiOlsiaXNPblVzdHJlYW0iLCJyZWZlcnJlciIsInJlc3VsdCIsInVybCIsIlVSTCIsInRlc3QiLCJob3N0bmFtZSIsImUiLCJpc09uSWJtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/logic/advert/helpers.js\n");

/***/ }),

/***/ "../js/cronus/logic/advert/index.js":
/*!******************************************!*\
  !*** ../js/cronus/logic/advert/index.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var shared_lib_loaderPromise__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/lib/loaderPromise */ \"../js/shared/lib/loaderPromise.js\");\n/* harmony import */ var cronus_playback__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/playback */ \"../js/cronus/playback/index.js\");\n/* harmony import */ var shared_store_actions_ads__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/store/actions/ads */ \"../js/shared/store/actions/ads.js\");\n/* harmony import */ var cronus_store_actions_ads__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/store/actions/ads */ \"../js/cronus/store/actions/ads.js\");\n/* harmony import */ var cronus_store__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! cronus/store */ \"../js/cronus/store/index.js\");\n/* harmony import */ var cronus_logic_advert_ruleset__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cronus/logic/advert/ruleset */ \"../js/cronus/logic/advert/ruleset.js\");\n/* harmony import */ var shared_lib_logger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! shared/lib/logger */ \"../js/shared/lib/logger/index.js\");\n/* harmony import */ var cronus_store_selectors__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! cronus/store/selectors */ \"../js/cronus/store/selectors/index.js\");\n/* harmony import */ var shared_store_selectors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! shared/store/selectors */ \"../js/shared/store/selectors/index.js\");\n/* harmony import */ var cronus_logic_privacy_privacyCookieChecker__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! cronus/logic/privacy/privacyCookieChecker */ \"../js/cronus/logic/privacy/privacyCookieChecker.js\");\n/* harmony import */ var shared_data_exposedVars__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! shared/data/exposedVars */ \"../js/shared/data/exposedVars.js\");\n/* harmony import */ var cronus_tracking__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! cronus/tracking */ \"../js/cronus/tracking/index.js\");\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n/* global google */\n\n\n\n\n\n\n\n\n\n\n\n\nvar debugLogger = (0,shared_lib_logger__WEBPACK_IMPORTED_MODULE_6__.createLoggerForModule)('cronus/advert');\nvar sdkUrl = '//imasdk.googleapis.com/js/sdkloader/ima3.js';\nvar dependencies = null;\nvar adDisplayContainer = null;\nvar adsLoader = null;\nvar adsManager = null;\nvar containerInitialized = false;\nvar initialized = false;\n\nfunction onSdkLoadSuccess() {\n  debugLogger.debug('sdk loaded');\n}\n\nfunction onSdkLoadError() {\n  throw new Error('sdk load failed');\n}\n\nfunction onAdsManagerLoaded(videoTag, adsManagerLoadedEvent) {\n  // Get the ads manager.\n  adsManager = adsManagerLoadedEvent.getAdsManager(videoTag); // See API reference for contentPlayback\n  // Add listeners to the required events.\n\n  adsManager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, onAdError);\n  adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED, onContentPauseRequested);\n  adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED, onContentResumeRequested);\n  adsManager.addEventListener(google.ima.AdEvent.Type.STARTED, onAdStarted);\n  adsManager.addEventListener(google.ima.AdEvent.Type.COMPLETE, onAdComplete);\n\n  try {\n    var _getPlayerSize = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_8__.getPlayerSize)(cronus_store__WEBPACK_IMPORTED_MODULE_4__.wrappedStore.getState()),\n        width = _getPlayerSize.width,\n        height = _getPlayerSize.height; // Initialize the ads manager. Ad rules playlist will start at this time.\n\n\n    adsManager.init(width, height, google.ima.ViewMode.NORMAL); // Call start to show ads. Single video and overlay ads will\n    // start at this time; this call will be ignored for ad rules, as ad rules\n    // ads start when the adsManager is initialized.\n\n    adsManager.start();\n  } catch (adError) {\n    // An error may be thrown if there was a problem with the VAST response.\n    // Play content here, because we won't be getting an ad.\n    cronus_store__WEBPACK_IMPORTED_MODULE_4__.wrappedStore.dispatch((0,shared_store_actions_ads__WEBPACK_IMPORTED_MODULE_2__.setAdsPlaying)(false));\n    var _dependencies = dependencies,\n        ui = _dependencies.ui;\n    ui.setAdvertVisibility(false);\n    cronus_playback__WEBPACK_IMPORTED_MODULE_1__[\"default\"].play();\n  }\n}\n\nfunction onContentPauseRequested() {\n  // This function is where you should setup UI for showing ads (e.g.\n  // display ad timer countdown, disable seeking, etc.)\n  var _dependencies2 = dependencies,\n      ui = _dependencies2.ui;\n  cronus_store__WEBPACK_IMPORTED_MODULE_4__.wrappedStore.dispatch((0,shared_store_actions_ads__WEBPACK_IMPORTED_MODULE_2__.setAdsPlaying)(true));\n  ui.setAdvertVisibility(true);\n  cronus_playback__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pause();\n}\n\nfunction onContentResumeRequested() {\n  // This function is where you should ensure that your UI is ready\n  // to play content.\n  resumeContent();\n} // An event listener to tell the SDK that our content video\n// is completed so the SDK can play any post-roll ads.\n\n\nfunction contentEndedListener() {\n  if (adsLoader) {\n    adsLoader.contentComplete();\n  }\n}\n\nfunction onAdError(adErrorEvent) {\n  // Handle the error logging and destroy the AdsManager\n  debugLogger.debug('onAdError', adErrorEvent.getError());\n\n  if (adsManager) {\n    adsManager.destroy();\n  }\n\n  resumeContent();\n}\n\nfunction resumeContent() {\n  cronus_store__WEBPACK_IMPORTED_MODULE_4__.wrappedStore.dispatch((0,shared_store_actions_ads__WEBPACK_IMPORTED_MODULE_2__.setAdsPlaying)(false));\n  var _dependencies3 = dependencies,\n      ui = _dependencies3.ui;\n  ui.setAdvertVisibility(false);\n  cronus_playback__WEBPACK_IMPORTED_MODULE_1__[\"default\"].play();\n}\n/**\n * @param {boolean} autoplay Whether the content and the ad will be autoplayed or whether it will be started by a user action.\n */\n\n\nfunction requestAd(autoplay) {\n  var ad = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_7__.getCurrentAd)(cronus_store__WEBPACK_IMPORTED_MODULE_4__.wrappedStore.getState());\n\n  if (!ad || !ad.adTag) {\n    return;\n  }\n\n  var _getPlayerSize2 = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_8__.getPlayerSize)(cronus_store__WEBPACK_IMPORTED_MODULE_4__.wrappedStore.getState()),\n      width = _getPlayerSize2.width,\n      height = _getPlayerSize2.height;\n\n  var volume = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_7__.getVolume)(cronus_store__WEBPACK_IMPORTED_MODULE_4__.wrappedStore.getState()); // Request video ads.\n\n  var adsRequest = new google.ima.AdsRequest();\n  adsRequest.adTagUrl = ad.adTag; // Specify the linear and nonlinear slot sizes. This helps the SDK to\n  // select the correct creative if multiple are returned.\n\n  adsRequest.linearAdSlotWidth = width;\n  adsRequest.linearAdSlotHeight = height;\n  adsRequest.nonLinearAdSlotWidth = width;\n  adsRequest.nonLinearAdSlotHeight = height;\n  adsRequest.setAdWillAutoPlay(autoplay);\n  adsRequest.setAdWillPlayMuted(!volume);\n  adsLoader.requestAds(adsRequest);\n}\n\nfunction loadRuleset() {\n  return _loadRuleset.apply(this, arguments);\n}\n\nfunction _loadRuleset() {\n  _loadRuleset = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    var _wrappedStore$getStat, mediaType, countryCode, _getActiveMediaIdAsOb, id, result, parsedRuleset;\n\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _wrappedStore$getStat = cronus_store__WEBPACK_IMPORTED_MODULE_4__.wrappedStore.getState().content, mediaType = _wrappedStore$getStat.mediaType, countryCode = _wrappedStore$getStat.countryCode;\n            _getActiveMediaIdAsOb = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_7__.getActiveMediaIdAsObject)(cronus_store__WEBPACK_IMPORTED_MODULE_4__.wrappedStore.getState()), id = _getActiveMediaIdAsOb.id;\n            _context.next = 4;\n            return cronus_logic_advert_ruleset__WEBPACK_IMPORTED_MODULE_5__[\"default\"].load({\n              mediaId: id,\n              mediaType: mediaType,\n              countryCode: countryCode\n            });\n\n          case 4:\n            result = _context.sent;\n\n            if (cronus_logic_advert_ruleset__WEBPACK_IMPORTED_MODULE_5__[\"default\"].hasRulesetAds(result)) {\n              _context.next = 7;\n              break;\n            }\n\n            throw new Error('there is no ruleset in the result');\n\n          case 7:\n            parsedRuleset = cronus_logic_advert_ruleset__WEBPACK_IMPORTED_MODULE_5__[\"default\"].parse(result);\n            cronus_store__WEBPACK_IMPORTED_MODULE_4__.wrappedStore.dispatch((0,cronus_store_actions_ads__WEBPACK_IMPORTED_MODULE_3__.setRuleset)(parsedRuleset));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadRuleset.apply(this, arguments);\n}\n\nfunction loadSdk() {\n  return _loadSdk.apply(this, arguments);\n}\n\nfunction _loadSdk() {\n  _loadSdk = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return shared_lib_loaderPromise__WEBPACK_IMPORTED_MODULE_0__[\"default\"].js(sdkUrl).then(onSdkLoadSuccess, onSdkLoadError);\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _loadSdk.apply(this, arguments);\n}\n\nfunction isEnabled() {\n  var enabled = cronus_store__WEBPACK_IMPORTED_MODULE_4__.wrappedStore.getState().ads.enabled;\n  return cronus_logic_privacy_privacyCookieChecker__WEBPACK_IMPORTED_MODULE_9__[\"default\"].areAdsEnabled() && enabled && !shared_data_exposedVars__WEBPACK_IMPORTED_MODULE_10__[\"default\"].isDashboard;\n}\n\nfunction init(_x) {\n  return _init.apply(this, arguments);\n}\n\nfunction _init() {\n  _init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(options) {\n    var videoTag, adContainerId, autoplay;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            videoTag = options.videoTag, adContainerId = options.adContainerId, autoplay = options.autoplay;\n            dependencies = options;\n            initialized = true;\n\n            if (isEnabled()) {\n              _context3.next = 7;\n              break;\n            }\n\n            destroy();\n            resumeContent();\n            return _context3.abrupt(\"return\");\n\n          case 7:\n            cronus_playback__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pause();\n            _context3.prev = 8;\n            _context3.next = 11;\n            return loadRuleset();\n\n          case 11:\n            _context3.next = 13;\n            return loadSdk();\n\n          case 13:\n            cronus_store__WEBPACK_IMPORTED_MODULE_4__.wrappedStore.subscribe('playback.ended', contentEndedListener);\n\n            if (!containerInitialized) {\n              initContainer(videoTag, adContainerId);\n            }\n\n            requestAd(autoplay);\n            _context3.next = 23;\n            break;\n\n          case 18:\n            _context3.prev = 18;\n            _context3.t0 = _context3[\"catch\"](8);\n            debugLogger.error('there was an error initializing adverts.', _context3.t0);\n            destroy();\n            resumeContent();\n\n          case 23:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[8, 18]]);\n  }));\n  return _init.apply(this, arguments);\n}\n\nfunction destroy() {\n  debugLogger.debug('destroy');\n\n  if (adsManager) {\n    adsManager.removeEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, onAdError);\n    adsManager.removeEventListener(google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED, onContentPauseRequested);\n    adsManager.removeEventListener(google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED, onContentResumeRequested);\n    adsManager.removeEventListener(google.ima.AdEvent.Type.STARTED, onAdStarted);\n    adsManager.removeEventListener(google.ima.AdEvent.Type.COMPLETE, onAdComplete);\n    adsManager.destroy();\n    adsManager = null;\n  }\n\n  if (adsLoader) {\n    adsLoader.removeEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, onAdsManagerLoaded);\n    adsLoader.removeEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, onAdError);\n    adsLoader.destroy();\n    adsLoader = null;\n  }\n\n  if (adDisplayContainer) {\n    adDisplayContainer.destroy();\n    adDisplayContainer = null;\n  }\n\n  containerInitialized = false;\n}\n\nfunction onAdStarted() {\n  cronus_tracking__WEBPACK_IMPORTED_MODULE_11__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_11__[\"default\"].TYPES.prerollStarted);\n}\n\nfunction onAdComplete() {\n  cronus_tracking__WEBPACK_IMPORTED_MODULE_11__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_11__[\"default\"].TYPES.prerollFinished);\n}\n\nfunction initContainer(videoTag, adContainerId) {\n  adDisplayContainer = new google.ima.AdDisplayContainer(document.getElementById(adContainerId), videoTag); // Must be done as the result of a user action on mobile\n\n  adDisplayContainer.initialize(); // Re-use this AdsLoader instance for the entire lifecycle of your page.\n\n  adsLoader = new google.ima.AdsLoader(adDisplayContainer);\n  debugLogger.debug('google IMA sdk version', adsLoader.getVersion()); // Add event listeners\n\n  adsLoader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, onAdsManagerLoaded.bind(null, videoTag), false);\n  adsLoader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, onAdError, false);\n  containerInitialized = true;\n}\n\nfunction isInitialized() {\n  return initialized;\n}\n\nfunction reset() {\n  destroy();\n\n  if (initialized) {\n    cronus_store__WEBPACK_IMPORTED_MODULE_4__.wrappedStore.dispatch((0,shared_store_actions_ads__WEBPACK_IMPORTED_MODULE_2__.setAdsPlaying)(false));\n    var _dependencies4 = dependencies,\n        ui = _dependencies4.ui;\n    ui.setAdvertVisibility(false);\n    initialized = false;\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  init: init,\n  isInitialized: isInitialized,\n  reset: reset\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../js/cronus/logic/advert/index.js\n");

/***/ }),

/***/ "../js/cronus/logic/advert/ruleset.js":
/*!********************************************!*\
  !*** ../js/cronus/logic/advert/ruleset.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! player-utils/object/get */ \"../node_modules/player-utils/object/get.js\");\n/* harmony import */ var shared_data_domainMapping__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/data/domainMapping */ \"../js/shared/data/domainMapping.js\");\n/* harmony import */ var shared_store_actions_content__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/store/actions/content */ \"../js/shared/store/actions/content.js\");\n/* harmony import */ var shared_data_exposedVars__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! shared/data/exposedVars */ \"../js/shared/data/exposedVars.js\");\n/* harmony import */ var shared_data_referrer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! shared/data/referrer */ \"../js/shared/data/referrer.js\");\n/* harmony import */ var cronus_logic_advert_consts__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cronus/logic/advert/consts */ \"../js/cronus/logic/advert/consts.js\");\n/* harmony import */ var cronus_logic_advert_helpers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! cronus/logic/advert/helpers */ \"../js/cronus/logic/advert/helpers.js\");\n/* harmony import */ var cronus_store__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! cronus/store */ \"../js/cronus/store/index.js\");\n/* harmony import */ var cronus_store_selectors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! cronus/store/selectors */ \"../js/cronus/store/selectors/index.js\");\n/* harmony import */ var ustream_env__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ustream-env */ \"../node_modules/ustream-env/dist/ustream-env.js\");\n/* harmony import */ var ustream_env__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(ustream_env__WEBPACK_IMPORTED_MODULE_9__);\n\n\n\n\n\n\n\n\n\n\nvar cdngwUrlPlain = \"http://\".concat(shared_data_domainMapping__WEBPACK_IMPORTED_MODULE_1__[\"default\"].config.cdngwPlain);\nvar cdngwUrlSecure = \"https://\".concat(shared_data_domainMapping__WEBPACK_IMPORTED_MODULE_1__[\"default\"].config.cdngwSecure);\nvar cdngwUrl = (ustream_env__WEBPACK_IMPORTED_MODULE_9___default().ssl) ? cdngwUrlSecure : cdngwUrlPlain;\n\nfunction load(_ref) {\n  var mediaId = _ref.mediaId,\n      mediaType = _ref.mediaType,\n      countryCode = _ref.countryCode;\n  var locale = shared_data_exposedVars__WEBPACK_IMPORTED_MODULE_3__[\"default\"].locale;\n  var getAdvertsParams = {\n    brandId: 1,\n    mediaId: mediaId,\n    mediaType: mediaType === shared_store_actions_content__WEBPACK_IMPORTED_MODULE_2__.MEDIA_TYPES.live ? 'channel' : 'recorded',\n    countryCode: countryCode,\n    locale: locale,\n    device: 'web',\n    pageUrl: encodeURIComponent(shared_data_referrer__WEBPACK_IMPORTED_MODULE_4__[\"default\"])\n  };\n  var getAdvertsUrl = \"\".concat(cdngwUrl, \"/rgwjson/Viewer.getAdverts/\").concat(encodeURIComponent(JSON.stringify(getAdvertsParams)));\n  var options = {\n    mode: 'cors'\n  };\n  return fetch(getAdvertsUrl, options).then(function (response) {\n    if (!response.ok) {\n      throw new Error(\"\".concat(response.status, \" \").concat(response.statusText));\n    }\n\n    return response;\n  }).then(function (response) {\n    return response.json();\n  }).then(function (result) {\n    return result.ads;\n  });\n}\n\nfunction parse(ruleset) {\n  var positions = Object.values(cronus_logic_advert_consts__WEBPACK_IMPORTED_MODULE_5__[\"default\"].positions);\n  var parsedRuleset = {};\n\n  for (var p = 0; p < positions.length; p += 1) {\n    var currentPosition = positions[p];\n\n    if (Object.prototype.hasOwnProperty.call(ruleset, currentPosition) && ruleset[currentPosition].length) {\n      (function () {\n        var rulesInPosition = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(ruleset, currentPosition);\n        var supportedProviders = Object.values(cronus_logic_advert_consts__WEBPACK_IMPORTED_MODULE_5__[\"default\"].providers);\n        var supportedRules = rulesInPosition.filter(function (rule) {\n          return supportedProviders.indexOf(rule.provider) !== -1;\n        });\n        parsedRuleset[currentPosition] = supportedRules.map(function (adRule) {\n          return createAdTagUrl(adRule, ruleset.metadata);\n        });\n      })();\n    } else {\n      parsedRuleset[currentPosition] = [];\n    }\n  }\n\n  return parsedRuleset;\n}\n\nfunction hasRulesetAds(ruleset) {\n  if (!ruleset) {\n    return false;\n  }\n\n  var positions = Object.values(cronus_logic_advert_consts__WEBPACK_IMPORTED_MODULE_5__[\"default\"].positions);\n  return positions.some(function (position) {\n    var rules = ruleset[position] || [];\n    return rules.length > 0;\n  }, []);\n}\n\nfunction createAdTagUrl(adRule, metadata) {\n  if (!adRule.adTag) {\n    return adRule;\n  }\n\n  var adTagReplacedMacros = replaceAdTagMacros(adRule, metadata);\n  var adTagUrl = new URL(adTagReplacedMacros);\n  var npa = (0,cronus_logic_advert_helpers__WEBPACK_IMPORTED_MODULE_6__.isOnIbm)(shared_data_referrer__WEBPACK_IMPORTED_MODULE_4__[\"default\"]) || (0,cronus_logic_advert_helpers__WEBPACK_IMPORTED_MODULE_6__.isOnUstream)(shared_data_referrer__WEBPACK_IMPORTED_MODULE_4__[\"default\"]) || shared_data_referrer__WEBPACK_IMPORTED_MODULE_4__[\"default\"] === 'unknown';\n\n  if (npa) {\n    adTagUrl.searchParams.set('npa', '1');\n  }\n\n  return Object.assign(adRule, {\n    adTag: adTagUrl.href\n  });\n}\n\nfunction replaceAdTagMacros(adRule, metadata) {\n  var cId = shared_data_exposedVars__WEBPACK_IMPORTED_MODULE_3__[\"default\"].cId;\n  var title = cronus_store__WEBPACK_IMPORTED_MODULE_7__.wrappedStore.getState().content.title;\n\n  var _getActiveMediaIdAsOb = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_8__.getActiveMediaIdAsObject)(cronus_store__WEBPACK_IMPORTED_MODULE_7__.wrappedStore.getState()),\n      id = _getActiveMediaIdAsOb.id;\n\n  var mediaType = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_8__.getMediaType)(cronus_store__WEBPACK_IMPORTED_MODULE_7__.wrappedStore.getState());\n  var maxTitleLength = 100;\n  var replacedAdTag = adRule.adTag;\n  replacedAdTag = replaceAdTagWithMacro(replacedAdTag, 'REFERRER', shared_data_referrer__WEBPACK_IMPORTED_MODULE_4__[\"default\"]);\n  replacedAdTag = replaceAdTagWithMacro(replacedAdTag, 'CHANNEL_PAGE_URL', shared_data_referrer__WEBPACK_IMPORTED_MODULE_4__[\"default\"]);\n  replacedAdTag = replaceAdTagWithMacro(replacedAdTag, 'CHANNEL', cId);\n  replacedAdTag = replaceAdTagWithMacro(replacedAdTag, 'CACHE_BREAKER', Math.round(Math.random() * 10000000));\n\n  if (title) {\n    var encodedTrimedTitle = encodeURI(title.substr(0, maxTitleLength));\n    replacedAdTag = replaceAdTagWithMacro(replacedAdTag, 'TITLE', encodedTrimedTitle);\n  }\n\n  if (mediaType !== shared_store_actions_content__WEBPACK_IMPORTED_MODULE_2__.MEDIA_TYPES.live) {\n    replacedAdTag = replaceAdTagWithMacro(replacedAdTag, 'VIDEOID', id);\n  }\n\n  if (metadata) {\n    var metaKeys = Object.keys(metadata);\n    metaKeys.forEach(function (metaKey) {\n      var metaMacro = \"CUSTOM_META-ID\".concat(metaKey);\n      var metaPair = metadata[metaKey];\n      var macroValue = \"\".concat(metaPair.displayName, \"=\").concat(metaPair.value);\n      replacedAdTag = replaceAdTagWithMacro(replacedAdTag, metaMacro, macroValue);\n    });\n  }\n\n  return replacedAdTag;\n}\n\nfunction replaceAdTagWithMacro(adTag, macroKey, macroValue) {\n  if (!macroValue) {\n    return adTag;\n  }\n\n  return adTag.replace(new RegExp(\"__\".concat(macroKey, \"__\"), 'g'), macroValue);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  load: load,\n  hasRulesetAds: hasRulesetAds,\n  parse: parse\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUE4QixHQUE5QixDQUFkLEVBQWtESCxVQUFsRCxDQUFQO0FBQ0Q7O0FBRUQsK0RBQWU7QUFDYnBGLEVBQUFBLElBQUksRUFBSkEsSUFEYTtBQUVia0QsRUFBQUEsYUFBYSxFQUFiQSxhQUZhO0FBR2J4QixFQUFBQSxLQUFLLEVBQUxBO0FBSGEsQ0FBZiIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vanMvY3JvbnVzL2xvZ2ljL2FkdmVydC9ydWxlc2V0LmpzP2JmNWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdldCBmcm9tICdwbGF5ZXItdXRpbHMvb2JqZWN0L2dldCc7XG5pbXBvcnQgZG9tYWluTWFwcGluZyBmcm9tICdzaGFyZWQvZGF0YS9kb21haW5NYXBwaW5nJztcbmltcG9ydCB7IE1FRElBX1RZUEVTIH0gZnJvbSAnc2hhcmVkL3N0b3JlL2FjdGlvbnMvY29udGVudCc7XG5pbXBvcnQgZXhwb3NlZFZhcnMgZnJvbSAnc2hhcmVkL2RhdGEvZXhwb3NlZFZhcnMnO1xuaW1wb3J0IHJlZmVycmVyIGZyb20gJ3NoYXJlZC9kYXRhL3JlZmVycmVyJztcbmltcG9ydCBjb25zdHMgZnJvbSAnY3JvbnVzL2xvZ2ljL2FkdmVydC9jb25zdHMnO1xuaW1wb3J0IHsgaXNPblVzdHJlYW0sIGlzT25JYm0gfSBmcm9tICdjcm9udXMvbG9naWMvYWR2ZXJ0L2hlbHBlcnMnO1xuaW1wb3J0IHsgd3JhcHBlZFN0b3JlIH0gZnJvbSAnY3JvbnVzL3N0b3JlJztcbmltcG9ydCB7IGdldE1lZGlhVHlwZSwgZ2V0QWN0aXZlTWVkaWFJZEFzT2JqZWN0IH0gZnJvbSAnY3JvbnVzL3N0b3JlL3NlbGVjdG9ycyc7XG5pbXBvcnQgZW52IGZyb20gJ3VzdHJlYW0tZW52JztcblxuY29uc3QgY2RuZ3dVcmxQbGFpbiA9IGBodHRwOi8vJHtkb21haW5NYXBwaW5nLmNvbmZpZy5jZG5nd1BsYWlufWA7XG5jb25zdCBjZG5nd1VybFNlY3VyZSA9IGBodHRwczovLyR7ZG9tYWluTWFwcGluZy5jb25maWcuY2RuZ3dTZWN1cmV9YDtcblxuY29uc3QgY2RuZ3dVcmwgPSBlbnYuc3NsID8gY2RuZ3dVcmxTZWN1cmUgOiBjZG5nd1VybFBsYWluO1xuXG5mdW5jdGlvbiBsb2FkKHsgbWVkaWFJZCwgbWVkaWFUeXBlLCBjb3VudHJ5Q29kZSB9KSB7XG4gIGNvbnN0IHsgbG9jYWxlIH0gPSBleHBvc2VkVmFycztcblxuICBjb25zdCBnZXRBZHZlcnRzUGFyYW1zID0ge1xuICAgIGJyYW5kSWQ6IDEsXG4gICAgbWVkaWFJZCxcbiAgICBtZWRpYVR5cGU6IG1lZGlhVHlwZSA9PT0gTUVESUFfVFlQRVMubGl2ZSA/ICdjaGFubmVsJyA6ICdyZWNvcmRlZCcsXG4gICAgY291bnRyeUNvZGUsXG4gICAgbG9jYWxlLFxuICAgIGRldmljZTogJ3dlYicsXG4gICAgcGFnZVVybDogZW5jb2RlVVJJQ29tcG9uZW50KHJlZmVycmVyKSxcbiAgfTtcblxuICBjb25zdCBnZXRBZHZlcnRzVXJsID0gYCR7Y2RuZ3dVcmx9L3Jnd2pzb24vVmlld2VyLmdldEFkdmVydHMvJHtlbmNvZGVVUklDb21wb25lbnQoXG4gICAgSlNPTi5zdHJpbmdpZnkoZ2V0QWR2ZXJ0c1BhcmFtcyksXG4gICl9YDtcbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICBtb2RlOiAnY29ycycsXG4gIH07XG5cbiAgcmV0dXJuIGZldGNoKGdldEFkdmVydHNVcmwsIG9wdGlvbnMpXG4gICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtyZXNwb25zZS5zdGF0dXN9ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9KVxuICAgIC50aGVuKChyZXNwb25zZSkgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgIC50aGVuKChyZXN1bHQpID0+IHJlc3VsdC5hZHMpO1xufVxuXG5mdW5jdGlvbiBwYXJzZShydWxlc2V0KSB7XG4gIGNvbnN0IHBvc2l0aW9ucyA9IE9iamVjdC52YWx1ZXMoY29uc3RzLnBvc2l0aW9ucyk7XG4gIGNvbnN0IHBhcnNlZFJ1bGVzZXQgPSB7fTtcblxuICBmb3IgKGxldCBwID0gMDsgcCA8IHBvc2l0aW9ucy5sZW5ndGg7IHAgKz0gMSkge1xuICAgIGNvbnN0IGN1cnJlbnRQb3NpdGlvbiA9IHBvc2l0aW9uc1twXTtcblxuICAgIGlmIChcbiAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChydWxlc2V0LCBjdXJyZW50UG9zaXRpb24pICYmXG4gICAgICBydWxlc2V0W2N1cnJlbnRQb3NpdGlvbl0ubGVuZ3RoXG4gICAgKSB7XG4gICAgICBjb25zdCBydWxlc0luUG9zaXRpb24gPSBnZXQocnVsZXNldCwgY3VycmVudFBvc2l0aW9uKTtcbiAgICAgIGNvbnN0IHN1cHBvcnRlZFByb3ZpZGVycyA9IE9iamVjdC52YWx1ZXMoY29uc3RzLnByb3ZpZGVycyk7XG4gICAgICBjb25zdCBzdXBwb3J0ZWRSdWxlcyA9IHJ1bGVzSW5Qb3NpdGlvbi5maWx0ZXIoXG4gICAgICAgIChydWxlKSA9PiBzdXBwb3J0ZWRQcm92aWRlcnMuaW5kZXhPZihydWxlLnByb3ZpZGVyKSAhPT0gLTEsXG4gICAgICApO1xuICAgICAgcGFyc2VkUnVsZXNldFtjdXJyZW50UG9zaXRpb25dID0gc3VwcG9ydGVkUnVsZXMubWFwKChhZFJ1bGUpID0+XG4gICAgICAgIGNyZWF0ZUFkVGFnVXJsKGFkUnVsZSwgcnVsZXNldC5tZXRhZGF0YSksXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJzZWRSdWxlc2V0W2N1cnJlbnRQb3NpdGlvbl0gPSBbXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFyc2VkUnVsZXNldDtcbn1cblxuZnVuY3Rpb24gaGFzUnVsZXNldEFkcyhydWxlc2V0KSB7XG4gIGlmICghcnVsZXNldCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHBvc2l0aW9ucyA9IE9iamVjdC52YWx1ZXMoY29uc3RzLnBvc2l0aW9ucyk7XG4gIHJldHVybiBwb3NpdGlvbnMuc29tZSgocG9zaXRpb24pID0+IHtcbiAgICBjb25zdCBydWxlcyA9IHJ1bGVzZXRbcG9zaXRpb25dIHx8IFtdO1xuICAgIHJldHVybiBydWxlcy5sZW5ndGggPiAwO1xuICB9LCBbXSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFkVGFnVXJsKGFkUnVsZSwgbWV0YWRhdGEpIHtcbiAgaWYgKCFhZFJ1bGUuYWRUYWcpIHtcbiAgICByZXR1cm4gYWRSdWxlO1xuICB9XG5cbiAgY29uc3QgYWRUYWdSZXBsYWNlZE1hY3JvcyA9IHJlcGxhY2VBZFRhZ01hY3JvcyhhZFJ1bGUsIG1ldGFkYXRhKTtcbiAgY29uc3QgYWRUYWdVcmwgPSBuZXcgVVJMKGFkVGFnUmVwbGFjZWRNYWNyb3MpO1xuXG4gIGNvbnN0IG5wYSA9IGlzT25JYm0ocmVmZXJyZXIpIHx8IGlzT25Vc3RyZWFtKHJlZmVycmVyKSB8fCByZWZlcnJlciA9PT0gJ3Vua25vd24nO1xuXG4gIGlmIChucGEpIHtcbiAgICBhZFRhZ1VybC5zZWFyY2hQYXJhbXMuc2V0KCducGEnLCAnMScpO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYWRSdWxlLCB7XG4gICAgYWRUYWc6IGFkVGFnVXJsLmhyZWYsXG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlQWRUYWdNYWNyb3MoYWRSdWxlLCBtZXRhZGF0YSkge1xuICBjb25zdCB7IGNJZCB9ID0gZXhwb3NlZFZhcnM7XG4gIGNvbnN0IHsgdGl0bGUgfSA9IHdyYXBwZWRTdG9yZS5nZXRTdGF0ZSgpLmNvbnRlbnQ7XG4gIGNvbnN0IHsgaWQgfSA9IGdldEFjdGl2ZU1lZGlhSWRBc09iamVjdCh3cmFwcGVkU3RvcmUuZ2V0U3RhdGUoKSk7XG4gIGNvbnN0IG1lZGlhVHlwZSA9IGdldE1lZGlhVHlwZSh3cmFwcGVkU3RvcmUuZ2V0U3RhdGUoKSk7XG5cbiAgY29uc3QgbWF4VGl0bGVMZW5ndGggPSAxMDA7XG5cbiAgbGV0IHJlcGxhY2VkQWRUYWcgPSBhZFJ1bGUuYWRUYWc7XG4gIHJlcGxhY2VkQWRUYWcgPSByZXBsYWNlQWRUYWdXaXRoTWFjcm8ocmVwbGFjZWRBZFRhZywgJ1JFRkVSUkVSJywgcmVmZXJyZXIpO1xuICByZXBsYWNlZEFkVGFnID0gcmVwbGFjZUFkVGFnV2l0aE1hY3JvKHJlcGxhY2VkQWRUYWcsICdDSEFOTkVMX1BBR0VfVVJMJywgcmVmZXJyZXIpO1xuICByZXBsYWNlZEFkVGFnID0gcmVwbGFjZUFkVGFnV2l0aE1hY3JvKHJlcGxhY2VkQWRUYWcsICdDSEFOTkVMJywgY0lkKTtcbiAgcmVwbGFjZWRBZFRhZyA9IHJlcGxhY2VBZFRhZ1dpdGhNYWNybyhcbiAgICByZXBsYWNlZEFkVGFnLFxuICAgICdDQUNIRV9CUkVBS0VSJyxcbiAgICBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMCksXG4gICk7XG5cbiAgaWYgKHRpdGxlKSB7XG4gICAgY29uc3QgZW5jb2RlZFRyaW1lZFRpdGxlID0gZW5jb2RlVVJJKHRpdGxlLnN1YnN0cigwLCBtYXhUaXRsZUxlbmd0aCkpO1xuICAgIHJlcGxhY2VkQWRUYWcgPSByZXBsYWNlQWRUYWdXaXRoTWFjcm8ocmVwbGFjZWRBZFRhZywgJ1RJVExFJywgZW5jb2RlZFRyaW1lZFRpdGxlKTtcbiAgfVxuXG4gIGlmIChtZWRpYVR5cGUgIT09IE1FRElBX1RZUEVTLmxpdmUpIHtcbiAgICByZXBsYWNlZEFkVGFnID0gcmVwbGFjZUFkVGFnV2l0aE1hY3JvKHJlcGxhY2VkQWRUYWcsICdWSURFT0lEJywgaWQpO1xuICB9XG5cbiAgaWYgKG1ldGFkYXRhKSB7XG4gICAgY29uc3QgbWV0YUtleXMgPSBPYmplY3Qua2V5cyhtZXRhZGF0YSk7XG5cbiAgICBtZXRhS2V5cy5mb3JFYWNoKChtZXRhS2V5KSA9PiB7XG4gICAgICBjb25zdCBtZXRhTWFjcm8gPSBgQ1VTVE9NX01FVEEtSUQke21ldGFLZXl9YDtcbiAgICAgIGNvbnN0IG1ldGFQYWlyID0gbWV0YWRhdGFbbWV0YUtleV07XG4gICAgICBjb25zdCBtYWNyb1ZhbHVlID0gYCR7bWV0YVBhaXIuZGlzcGxheU5hbWV9PSR7bWV0YVBhaXIudmFsdWV9YDtcblxuICAgICAgcmVwbGFjZWRBZFRhZyA9IHJlcGxhY2VBZFRhZ1dpdGhNYWNybyhyZXBsYWNlZEFkVGFnLCBtZXRhTWFjcm8sIG1hY3JvVmFsdWUpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHJlcGxhY2VkQWRUYWc7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VBZFRhZ1dpdGhNYWNybyhhZFRhZywgbWFjcm9LZXksIG1hY3JvVmFsdWUpIHtcbiAgaWYgKCFtYWNyb1ZhbHVlKSB7XG4gICAgcmV0dXJuIGFkVGFnO1xuICB9XG5cbiAgcmV0dXJuIGFkVGFnLnJlcGxhY2UobmV3IFJlZ0V4cChgX18ke21hY3JvS2V5fV9fYCwgJ2cnKSwgbWFjcm9WYWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbG9hZCxcbiAgaGFzUnVsZXNldEFkcyxcbiAgcGFyc2UsXG59O1xuIl0sIm5hbWVzIjpbImdldCIsImRvbWFpbk1hcHBpbmciLCJNRURJQV9UWVBFUyIsImV4cG9zZWRWYXJzIiwicmVmZXJyZXIiLCJjb25zdHMiLCJpc09uVXN0cmVhbSIsImlzT25JYm0iLCJ3cmFwcGVkU3RvcmUiLCJnZXRNZWRpYVR5cGUiLCJnZXRBY3RpdmVNZWRpYUlkQXNPYmplY3QiLCJlbnYiLCJjZG5nd1VybFBsYWluIiwiY29uZmlnIiwiY2RuZ3dQbGFpbiIsImNkbmd3VXJsU2VjdXJlIiwiY2RuZ3dTZWN1cmUiLCJjZG5nd1VybCIsInNzbCIsImxvYWQiLCJtZWRpYUlkIiwibWVkaWFUeXBlIiwiY291bnRyeUNvZGUiLCJsb2NhbGUiLCJnZXRBZHZlcnRzUGFyYW1zIiwiYnJhbmRJZCIsImxpdmUiLCJkZXZpY2UiLCJwYWdlVXJsIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZ2V0QWR2ZXJ0c1VybCIsIkpTT04iLCJzdHJpbmdpZnkiLCJvcHRpb25zIiwibW9kZSIsImZldGNoIiwidGhlbiIsInJlc3BvbnNlIiwib2siLCJFcnJvciIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJqc29uIiwicmVzdWx0IiwiYWRzIiwicGFyc2UiLCJydWxlc2V0IiwicG9zaXRpb25zIiwiT2JqZWN0IiwidmFsdWVzIiwicGFyc2VkUnVsZXNldCIsInAiLCJsZW5ndGgiLCJjdXJyZW50UG9zaXRpb24iLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJydWxlc0luUG9zaXRpb24iLCJzdXBwb3J0ZWRQcm92aWRlcnMiLCJwcm92aWRlcnMiLCJzdXBwb3J0ZWRSdWxlcyIsImZpbHRlciIsInJ1bGUiLCJpbmRleE9mIiwicHJvdmlkZXIiLCJtYXAiLCJhZFJ1bGUiLCJjcmVhdGVBZFRhZ1VybCIsIm1ldGFkYXRhIiwiaGFzUnVsZXNldEFkcyIsInNvbWUiLCJwb3NpdGlvbiIsInJ1bGVzIiwiYWRUYWciLCJhZFRhZ1JlcGxhY2VkTWFjcm9zIiwicmVwbGFjZUFkVGFnTWFjcm9zIiwiYWRUYWdVcmwiLCJVUkwiLCJucGEiLCJzZWFyY2hQYXJhbXMiLCJzZXQiLCJhc3NpZ24iLCJocmVmIiwiY0lkIiwidGl0bGUiLCJnZXRTdGF0ZSIsImNvbnRlbnQiLCJpZCIsIm1heFRpdGxlTGVuZ3RoIiwicmVwbGFjZWRBZFRhZyIsInJlcGxhY2VBZFRhZ1dpdGhNYWNybyIsIk1hdGgiLCJyb3VuZCIsInJhbmRvbSIsImVuY29kZWRUcmltZWRUaXRsZSIsImVuY29kZVVSSSIsInN1YnN0ciIsIm1ldGFLZXlzIiwia2V5cyIsImZvckVhY2giLCJtZXRhS2V5IiwibWV0YU1hY3JvIiwibWV0YVBhaXIiLCJtYWNyb1ZhbHVlIiwiZGlzcGxheU5hbWUiLCJ2YWx1ZSIsIm1hY3JvS2V5IiwicmVwbGFjZSIsIlJlZ0V4cCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/logic/advert/ruleset.js\n");

/***/ }),

/***/ "../js/cronus/logic/captionSearchService.js":
/*!**************************************************!*\
  !*** ../js/cronus/logic/captionSearchService.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"searchCaptions\": function() { return /* binding */ searchCaptions; }\n/* harmony export */ });\n/* harmony import */ var shared_lib_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/lib/logger */ \"../js/shared/lib/logger/index.js\");\n/* harmony import */ var shared_store_actions_captionSearch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/store/actions/captionSearch */ \"../js/shared/store/actions/captionSearch.js\");\n/* harmony import */ var cronus_store_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/store/selectors */ \"../js/cronus/store/selectors/index.js\");\n/* harmony import */ var cronus_store__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/store */ \"../js/cronus/store/index.js\");\n/* harmony import */ var shared_data_domainMapping__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! shared/data/domainMapping */ \"../js/shared/data/domainMapping.js\");\n\n\n\n\n\nvar domain = shared_data_domainMapping__WEBPACK_IMPORTED_MODULE_4__[\"default\"].config.api || shared_data_domainMapping__WEBPACK_IMPORTED_MODULE_4__[\"default\"].fallbackConfig.api;\nvar debugLogger = (0,shared_lib_logger__WEBPACK_IMPORTED_MODULE_0__.createLoggerForModule)('logic/captionSearchService');\n\nfunction getUrl(searchText) {\n  var url = new URL(\"https://\".concat(domain));\n\n  var _getActiveMediaIdAsOb = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_2__.getActiveMediaIdAsObject)(cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.getState()),\n      id = _getActiveMediaIdAsOb.id;\n\n  url.pathname = \"videos/\".concat(id, \"/captions/search.json\");\n  url.searchParams.set('q', prepareSearchText(searchText));\n  url.searchParams.set('highlight', true);\n  return url.toString();\n}\n\nfunction searchOnSuccess(result) {\n  debugLogger.debug('searchOnSuccess', result.caption_matches);\n  cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.dispatch((0,shared_store_actions_captionSearch__WEBPACK_IMPORTED_MODULE_1__.setSearchResult)(result.caption_matches));\n}\n\nfunction searchOnError(error) {\n  debugLogger.error('searchOnError', error);\n  cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.dispatch((0,shared_store_actions_captionSearch__WEBPACK_IMPORTED_MODULE_1__.setSearchResult)());\n}\n\nfunction prepareSearchText(searchText) {\n  return searchText.replace(/\\s/g, '+');\n}\n\nfunction sendSearchRequest(searchText, bearerToken) {\n  var xhr = new XMLHttpRequest();\n\n  function onLoad() {\n    if (xhr.status === 200) {\n      try {\n        var data = JSON.parse(xhr.responseText);\n        onSuccess(data);\n      } catch (e) {\n        searchOnError('Response JSON parse failed');\n      }\n    } else {\n      onXhrError();\n    }\n  }\n\n  function onXhrError() {\n    var msg = \"\".concat(xhr.status, \" \").concat(xhr.statusText);\n    return searchOnError(msg);\n  }\n\n  function onSuccess(data) {\n    return searchOnSuccess(data);\n  }\n\n  xhr.addEventListener('load', onLoad);\n  xhr.addEventListener('error', onXhrError);\n  xhr.open('GET', getUrl(searchText), true\n  /* async */\n  );\n  xhr.setRequestHeader('Authorization', \"Bearer \".concat(bearerToken));\n  xhr.send();\n}\n/**\n * @param {string} searchText\n * @param {Object} module\n */\n\n\nfunction searchCaptions(searchText, module) {\n  if (!module) {\n    debugLogger.error('There is no module for search api');\n    return;\n  }\n\n  if (typeof module.token === 'undefined') {\n    debugLogger.error('There is no token for search api.');\n    return;\n  }\n\n  var token = module.token;\n\n  if (!searchText) {\n    searchOnError('Cannot call search api with empty search text.');\n    return;\n  }\n\n  sendSearchRequest(searchText, token);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL2xvZ2ljL2NhcHRpb25TZWFyY2hTZXJ2aWNlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSxJQUFNSyxNQUFNLEdBQUdELDRFQUFBLElBQTRCQSxvRkFBM0M7QUFDQSxJQUFNSyxXQUFXLEdBQUdULHdFQUFxQixDQUFDLDRCQUFELENBQXpDOztBQUVBLFNBQVNVLE1BQVQsQ0FBZ0JDLFVBQWhCLEVBQTRCO0FBQzFCLE1BQU1DLEdBQUcsR0FBRyxJQUFJQyxHQUFKLG1CQUFtQlIsTUFBbkIsRUFBWjs7QUFFQSw4QkFBZUgsZ0ZBQXdCLENBQUNDLCtEQUFBLEVBQUQsQ0FBdkM7QUFBQSxNQUFRWSxFQUFSLHlCQUFRQSxFQUFSOztBQUVBSCxFQUFBQSxHQUFHLENBQUNJLFFBQUosb0JBQXlCRCxFQUF6QjtBQUNBSCxFQUFBQSxHQUFHLENBQUNLLFlBQUosQ0FBaUJDLEdBQWpCLENBQXFCLEdBQXJCLEVBQTBCQyxpQkFBaUIsQ0FBQ1IsVUFBRCxDQUEzQztBQUNBQyxFQUFBQSxHQUFHLENBQUNLLFlBQUosQ0FBaUJDLEdBQWpCLENBQXFCLFdBQXJCLEVBQWtDLElBQWxDO0FBRUEsU0FBT04sR0FBRyxDQUFDUSxRQUFKLEVBQVA7QUFDRDs7QUFFRCxTQUFTQyxlQUFULENBQXlCQyxNQUF6QixFQUFpQztBQUMvQmIsRUFBQUEsV0FBVyxDQUFDYyxLQUFaLENBQWtCLGlCQUFsQixFQUFxQ0QsTUFBTSxDQUFDRSxlQUE1QztBQUNBckIsRUFBQUEsK0RBQUEsQ0FBc0JGLG1GQUFlLENBQUNxQixNQUFNLENBQUNFLGVBQVIsQ0FBckM7QUFDRDs7QUFFRCxTQUFTRSxhQUFULENBQXVCQyxLQUF2QixFQUE4QjtBQUM1QmxCLEVBQUFBLFdBQVcsQ0FBQ2tCLEtBQVosQ0FBa0IsZUFBbEIsRUFBbUNBLEtBQW5DO0FBQ0F4QixFQUFBQSwrREFBQSxDQUFzQkYsbUZBQWUsRUFBckM7QUFDRDs7QUFFRCxTQUFTa0IsaUJBQVQsQ0FBMkJSLFVBQTNCLEVBQXVDO0FBQ3JDLFNBQU9BLFVBQVUsQ0FBQ2lCLE9BQVgsQ0FBbUIsS0FBbkIsRUFBMEIsR0FBMUIsQ0FBUDtBQUNEOztBQUVELFNBQVNDLGlCQUFULENBQTJCbEIsVUFBM0IsRUFBdUNtQixXQUF2QyxFQUFvRDtBQUNsRCxNQUFNQyxHQUFHLEdBQUcsSUFBSUMsY0FBSixFQUFaOztBQUVBLFdBQVNDLE1BQVQsR0FBa0I7QUFDaEIsUUFBSUYsR0FBRyxDQUFDRyxNQUFKLEtBQWUsR0FBbkIsRUFBd0I7QUFDdEIsVUFBSTtBQUNGLFlBQU1DLElBQUksR0FBR0MsSUFBSSxDQUFDQyxLQUFMLENBQVdOLEdBQUcsQ0FBQ08sWUFBZixDQUFiO0FBQ0FDLFFBQUFBLFNBQVMsQ0FBQ0osSUFBRCxDQUFUO0FBQ0QsT0FIRCxDQUdFLE9BQU9LLENBQVAsRUFBVTtBQUNWZCxRQUFBQSxhQUFhLENBQUMsNEJBQUQsQ0FBYjtBQUNEO0FBQ0YsS0FQRCxNQU9PO0FBQ0xlLE1BQUFBLFVBQVU7QUFDWDtBQUNGOztBQUVELFdBQVNBLFVBQVQsR0FBc0I7QUFDcEIsUUFBTUMsR0FBRyxhQUFNWCxHQUFHLENBQUNHLE1BQVYsY0FBb0JILEdBQUcsQ0FBQ1ksVUFBeEIsQ0FBVDtBQUNBLFdBQU9qQixhQUFhLENBQUNnQixHQUFELENBQXBCO0FBQ0Q7O0FBRUQsV0FBU0gsU0FBVCxDQUFtQkosSUFBbkIsRUFBeUI7QUFDdkIsV0FBT2QsZUFBZSxDQUFDYyxJQUFELENBQXRCO0FBQ0Q7O0FBRURKLEVBQUFBLEdBQUcsQ0FBQ2EsZ0JBQUosQ0FBcUIsTUFBckIsRUFBNkJYLE1BQTdCO0FBQ0FGLEVBQUFBLEdBQUcsQ0FBQ2EsZ0JBQUosQ0FBcUIsT0FBckIsRUFBOEJILFVBQTlCO0FBQ0FWLEVBQUFBLEdBQUcsQ0FBQ2MsSUFBSixDQUFTLEtBQVQsRUFBZ0JuQyxNQUFNLENBQUNDLFVBQUQsQ0FBdEIsRUFBb0M7QUFBSztBQUF6QztBQUNBb0IsRUFBQUEsR0FBRyxDQUFDZSxnQkFBSixDQUFxQixlQUFyQixtQkFBZ0RoQixXQUFoRDtBQUVBQyxFQUFBQSxHQUFHLENBQUNnQixJQUFKO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU0MsY0FBVCxDQUF3QnJDLFVBQXhCLEVBQW9Dc0MsTUFBcEMsRUFBNEM7QUFDakQsTUFBSSxDQUFDQSxNQUFMLEVBQWE7QUFDWHhDLElBQUFBLFdBQVcsQ0FBQ2tCLEtBQVosQ0FBa0IsbUNBQWxCO0FBQ0E7QUFDRDs7QUFFRCxNQUFJLE9BQU9zQixNQUFNLENBQUNDLEtBQWQsS0FBd0IsV0FBNUIsRUFBeUM7QUFDdkN6QyxJQUFBQSxXQUFXLENBQUNrQixLQUFaLENBQWtCLG1DQUFsQjtBQUNBO0FBQ0Q7O0FBRUQsTUFBUXVCLEtBQVIsR0FBa0JELE1BQWxCLENBQVFDLEtBQVI7O0FBRUEsTUFBSSxDQUFDdkMsVUFBTCxFQUFpQjtBQUNmZSxJQUFBQSxhQUFhLENBQUMsZ0RBQUQsQ0FBYjtBQUNBO0FBQ0Q7O0FBRURHLEVBQUFBLGlCQUFpQixDQUFDbEIsVUFBRCxFQUFhdUMsS0FBYixDQUFqQjtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvbG9naWMvY2FwdGlvblNlYXJjaFNlcnZpY2UuanM/MzFkNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVMb2dnZXJGb3JNb2R1bGUgfSBmcm9tICdzaGFyZWQvbGliL2xvZ2dlcic7XG5pbXBvcnQgeyBzZXRTZWFyY2hSZXN1bHQgfSBmcm9tICdzaGFyZWQvc3RvcmUvYWN0aW9ucy9jYXB0aW9uU2VhcmNoJztcbmltcG9ydCB7IGdldEFjdGl2ZU1lZGlhSWRBc09iamVjdCB9IGZyb20gJ2Nyb251cy9zdG9yZS9zZWxlY3RvcnMnO1xuaW1wb3J0IHsgd3JhcHBlZFN0b3JlIH0gZnJvbSAnY3JvbnVzL3N0b3JlJztcbmltcG9ydCBkb21haW5NYXBwaW5nIGZyb20gJ3NoYXJlZC9kYXRhL2RvbWFpbk1hcHBpbmcnO1xuXG5jb25zdCBkb21haW4gPSBkb21haW5NYXBwaW5nLmNvbmZpZy5hcGkgfHwgZG9tYWluTWFwcGluZy5mYWxsYmFja0NvbmZpZy5hcGk7XG5jb25zdCBkZWJ1Z0xvZ2dlciA9IGNyZWF0ZUxvZ2dlckZvck1vZHVsZSgnbG9naWMvY2FwdGlvblNlYXJjaFNlcnZpY2UnKTtcblxuZnVuY3Rpb24gZ2V0VXJsKHNlYXJjaFRleHQpIHtcbiAgY29uc3QgdXJsID0gbmV3IFVSTChgaHR0cHM6Ly8ke2RvbWFpbn1gKTtcblxuICBjb25zdCB7IGlkIH0gPSBnZXRBY3RpdmVNZWRpYUlkQXNPYmplY3Qod3JhcHBlZFN0b3JlLmdldFN0YXRlKCkpO1xuXG4gIHVybC5wYXRobmFtZSA9IGB2aWRlb3MvJHtpZH0vY2FwdGlvbnMvc2VhcmNoLmpzb25gO1xuICB1cmwuc2VhcmNoUGFyYW1zLnNldCgncScsIHByZXBhcmVTZWFyY2hUZXh0KHNlYXJjaFRleHQpKTtcbiAgdXJsLnNlYXJjaFBhcmFtcy5zZXQoJ2hpZ2hsaWdodCcsIHRydWUpO1xuXG4gIHJldHVybiB1cmwudG9TdHJpbmcoKTtcbn1cblxuZnVuY3Rpb24gc2VhcmNoT25TdWNjZXNzKHJlc3VsdCkge1xuICBkZWJ1Z0xvZ2dlci5kZWJ1Zygnc2VhcmNoT25TdWNjZXNzJywgcmVzdWx0LmNhcHRpb25fbWF0Y2hlcyk7XG4gIHdyYXBwZWRTdG9yZS5kaXNwYXRjaChzZXRTZWFyY2hSZXN1bHQocmVzdWx0LmNhcHRpb25fbWF0Y2hlcykpO1xufVxuXG5mdW5jdGlvbiBzZWFyY2hPbkVycm9yKGVycm9yKSB7XG4gIGRlYnVnTG9nZ2VyLmVycm9yKCdzZWFyY2hPbkVycm9yJywgZXJyb3IpO1xuICB3cmFwcGVkU3RvcmUuZGlzcGF0Y2goc2V0U2VhcmNoUmVzdWx0KCkpO1xufVxuXG5mdW5jdGlvbiBwcmVwYXJlU2VhcmNoVGV4dChzZWFyY2hUZXh0KSB7XG4gIHJldHVybiBzZWFyY2hUZXh0LnJlcGxhY2UoL1xccy9nLCAnKycpO1xufVxuXG5mdW5jdGlvbiBzZW5kU2VhcmNoUmVxdWVzdChzZWFyY2hUZXh0LCBiZWFyZXJUb2tlbikge1xuICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICBmdW5jdGlvbiBvbkxvYWQoKSB7XG4gICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgIG9uU3VjY2VzcyhkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgc2VhcmNoT25FcnJvcignUmVzcG9uc2UgSlNPTiBwYXJzZSBmYWlsZWQnKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb25YaHJFcnJvcigpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uWGhyRXJyb3IoKSB7XG4gICAgY29uc3QgbXNnID0gYCR7eGhyLnN0YXR1c30gJHt4aHIuc3RhdHVzVGV4dH1gO1xuICAgIHJldHVybiBzZWFyY2hPbkVycm9yKG1zZyk7XG4gIH1cblxuICBmdW5jdGlvbiBvblN1Y2Nlc3MoZGF0YSkge1xuICAgIHJldHVybiBzZWFyY2hPblN1Y2Nlc3MoZGF0YSk7XG4gIH1cblxuICB4aHIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIG9uTG9hZCk7XG4gIHhoci5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIG9uWGhyRXJyb3IpO1xuICB4aHIub3BlbignR0VUJywgZ2V0VXJsKHNlYXJjaFRleHQpLCB0cnVlIC8qIGFzeW5jICovKTtcbiAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7YmVhcmVyVG9rZW59YCk7XG5cbiAgeGhyLnNlbmQoKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VhcmNoVGV4dFxuICogQHBhcmFtIHtPYmplY3R9IG1vZHVsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2VhcmNoQ2FwdGlvbnMoc2VhcmNoVGV4dCwgbW9kdWxlKSB7XG4gIGlmICghbW9kdWxlKSB7XG4gICAgZGVidWdMb2dnZXIuZXJyb3IoJ1RoZXJlIGlzIG5vIG1vZHVsZSBmb3Igc2VhcmNoIGFwaScpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0eXBlb2YgbW9kdWxlLnRva2VuID09PSAndW5kZWZpbmVkJykge1xuICAgIGRlYnVnTG9nZ2VyLmVycm9yKCdUaGVyZSBpcyBubyB0b2tlbiBmb3Igc2VhcmNoIGFwaS4nKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB7IHRva2VuIH0gPSBtb2R1bGU7XG5cbiAgaWYgKCFzZWFyY2hUZXh0KSB7XG4gICAgc2VhcmNoT25FcnJvcignQ2Fubm90IGNhbGwgc2VhcmNoIGFwaSB3aXRoIGVtcHR5IHNlYXJjaCB0ZXh0LicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHNlbmRTZWFyY2hSZXF1ZXN0KHNlYXJjaFRleHQsIHRva2VuKTtcbn1cbiJdLCJuYW1lcyI6WyJjcmVhdGVMb2dnZXJGb3JNb2R1bGUiLCJzZXRTZWFyY2hSZXN1bHQiLCJnZXRBY3RpdmVNZWRpYUlkQXNPYmplY3QiLCJ3cmFwcGVkU3RvcmUiLCJkb21haW5NYXBwaW5nIiwiZG9tYWluIiwiY29uZmlnIiwiYXBpIiwiZmFsbGJhY2tDb25maWciLCJkZWJ1Z0xvZ2dlciIsImdldFVybCIsInNlYXJjaFRleHQiLCJ1cmwiLCJVUkwiLCJnZXRTdGF0ZSIsImlkIiwicGF0aG5hbWUiLCJzZWFyY2hQYXJhbXMiLCJzZXQiLCJwcmVwYXJlU2VhcmNoVGV4dCIsInRvU3RyaW5nIiwic2VhcmNoT25TdWNjZXNzIiwicmVzdWx0IiwiZGVidWciLCJjYXB0aW9uX21hdGNoZXMiLCJkaXNwYXRjaCIsInNlYXJjaE9uRXJyb3IiLCJlcnJvciIsInJlcGxhY2UiLCJzZW5kU2VhcmNoUmVxdWVzdCIsImJlYXJlclRva2VuIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvbkxvYWQiLCJzdGF0dXMiLCJkYXRhIiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2VUZXh0Iiwib25TdWNjZXNzIiwiZSIsIm9uWGhyRXJyb3IiLCJtc2ciLCJzdGF0dXNUZXh0IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsInNlYXJjaENhcHRpb25zIiwibW9kdWxlIiwidG9rZW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/logic/captionSearchService.js\n");

/***/ }),

/***/ "../js/cronus/logic/initialSeek.js":
/*!*****************************************!*\
  !*** ../js/cronus/logic/initialSeek.js ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getInitialSeekTimeInMs\": function() { return /* binding */ getInitialSeekTimeInMs; },\n/* harmony export */   \"isInitialSeekSupported\": function() { return /* binding */ isInitialSeekSupported; }\n/* harmony export */ });\n/* harmony import */ var shared_store_actions_content__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/store/actions/content */ \"../js/shared/store/actions/content.js\");\n/* harmony import */ var shared_data_exposedVars__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/data/exposedVars */ \"../js/shared/data/exposedVars.js\");\n/* harmony import */ var cronus_store_selectors_content__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/store/selectors/content */ \"../js/cronus/store/selectors/content.js\");\n/* harmony import */ var shared_logic_progressHistory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! shared/logic/progressHistory */ \"../js/shared/logic/progressHistory.js\");\n/* harmony import */ var shared_consts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! shared/consts */ \"../js/shared/consts.js\");\n\n\n\n\n\nfunction isInitialSeekSupported(mediaType) {\n  return !(mediaType !== shared_store_actions_content__WEBPACK_IMPORTED_MODULE_0__.MEDIA_TYPES.recorded && mediaType !== shared_store_actions_content__WEBPACK_IMPORTED_MODULE_0__.MEDIA_TYPES.offairVideo || shared_data_exposedVars__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isDashboard);\n}\nfunction getInitialSeekTimeInMs(contentState) {\n  var mediaType = contentState.mediaType,\n      initialSeekTimeInMs = contentState.initialSeekTimeInMs;\n\n  if (!isInitialSeekSupported(mediaType)) {\n    return undefined;\n  }\n\n  if (initialSeekTimeInMs) {\n    return initialSeekTimeInMs; // already set\n  }\n\n  var _getActiveMediaIdAsOb = (0,cronus_store_selectors_content__WEBPACK_IMPORTED_MODULE_2__.getActiveMediaIdAsObject)({\n    content: contentState\n  }),\n      id = _getActiveMediaIdAsOb.id;\n\n  var progressInfo = shared_logic_progressHistory__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getSavedProgressToVideoId(id);\n\n  if (!progressInfo) {\n    return undefined;\n  }\n\n  var progress = progressInfo.progress;\n  return progress - shared_consts__WEBPACK_IMPORTED_MODULE_4__[\"default\"].CONTINUE_WATCHING_OFFSET_IN_MS;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL2xvZ2ljL2luaXRpYWxTZWVrLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRU8sU0FBU0ssc0JBQVQsQ0FBZ0NDLFNBQWhDLEVBQTJDO0FBQ2hELFNBQU8sRUFDSkEsU0FBUyxLQUFLTiw4RUFBZCxJQUFzQ00sU0FBUyxLQUFLTixpRkFBckQsSUFDQUMsMkVBRkssQ0FBUDtBQUlEO0FBRU0sU0FBU1Msc0JBQVQsQ0FBZ0NDLFlBQWhDLEVBQThDO0FBQ25ELE1BQVFMLFNBQVIsR0FBMkNLLFlBQTNDLENBQVFMLFNBQVI7QUFBQSxNQUFtQk0sbUJBQW5CLEdBQTJDRCxZQUEzQyxDQUFtQkMsbUJBQW5COztBQUVBLE1BQUksQ0FBQ1Asc0JBQXNCLENBQUNDLFNBQUQsQ0FBM0IsRUFBd0M7QUFDdEMsV0FBT08sU0FBUDtBQUNEOztBQUVELE1BQUlELG1CQUFKLEVBQXlCO0FBQ3ZCLFdBQU9BLG1CQUFQLENBRHVCLENBQ0s7QUFDN0I7O0FBRUQsOEJBQWVWLHdGQUF3QixDQUFDO0FBQUVZLElBQUFBLE9BQU8sRUFBRUg7QUFBWCxHQUFELENBQXZDO0FBQUEsTUFBUUksRUFBUix5QkFBUUEsRUFBUjs7QUFDQSxNQUFNQyxZQUFZLEdBQUdiLDhGQUFBLENBQTBDWSxFQUExQyxDQUFyQjs7QUFFQSxNQUFJLENBQUNDLFlBQUwsRUFBbUI7QUFDakIsV0FBT0gsU0FBUDtBQUNEOztBQUVELE1BQVFLLFFBQVIsR0FBcUJGLFlBQXJCLENBQVFFLFFBQVI7QUFFQSxTQUFPQSxRQUFRLEdBQUdkLG9GQUFsQjtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvbG9naWMvaW5pdGlhbFNlZWsuanM/NmQ2NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNRURJQV9UWVBFUyB9IGZyb20gJ3NoYXJlZC9zdG9yZS9hY3Rpb25zL2NvbnRlbnQnO1xuaW1wb3J0IGV4cG9zZWRWYXJzIGZyb20gJ3NoYXJlZC9kYXRhL2V4cG9zZWRWYXJzJztcbmltcG9ydCB7IGdldEFjdGl2ZU1lZGlhSWRBc09iamVjdCB9IGZyb20gJ2Nyb251cy9zdG9yZS9zZWxlY3RvcnMvY29udGVudCc7XG5pbXBvcnQgcHJvZ3Jlc3NIaXN0b3J5IGZyb20gJ3NoYXJlZC9sb2dpYy9wcm9ncmVzc0hpc3RvcnknO1xuaW1wb3J0IGNvbnN0cyBmcm9tICdzaGFyZWQvY29uc3RzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzSW5pdGlhbFNlZWtTdXBwb3J0ZWQobWVkaWFUeXBlKSB7XG4gIHJldHVybiAhKFxuICAgIChtZWRpYVR5cGUgIT09IE1FRElBX1RZUEVTLnJlY29yZGVkICYmIG1lZGlhVHlwZSAhPT0gTUVESUFfVFlQRVMub2ZmYWlyVmlkZW8pIHx8XG4gICAgZXhwb3NlZFZhcnMuaXNEYXNoYm9hcmRcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEluaXRpYWxTZWVrVGltZUluTXMoY29udGVudFN0YXRlKSB7XG4gIGNvbnN0IHsgbWVkaWFUeXBlLCBpbml0aWFsU2Vla1RpbWVJbk1zIH0gPSBjb250ZW50U3RhdGU7XG5cbiAgaWYgKCFpc0luaXRpYWxTZWVrU3VwcG9ydGVkKG1lZGlhVHlwZSkpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKGluaXRpYWxTZWVrVGltZUluTXMpIHtcbiAgICByZXR1cm4gaW5pdGlhbFNlZWtUaW1lSW5NczsgLy8gYWxyZWFkeSBzZXRcbiAgfVxuXG4gIGNvbnN0IHsgaWQgfSA9IGdldEFjdGl2ZU1lZGlhSWRBc09iamVjdCh7IGNvbnRlbnQ6IGNvbnRlbnRTdGF0ZSB9KTtcbiAgY29uc3QgcHJvZ3Jlc3NJbmZvID0gcHJvZ3Jlc3NIaXN0b3J5LmdldFNhdmVkUHJvZ3Jlc3NUb1ZpZGVvSWQoaWQpO1xuXG4gIGlmICghcHJvZ3Jlc3NJbmZvKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGNvbnN0IHsgcHJvZ3Jlc3MgfSA9IHByb2dyZXNzSW5mbztcblxuICByZXR1cm4gcHJvZ3Jlc3MgLSBjb25zdHMuQ09OVElOVUVfV0FUQ0hJTkdfT0ZGU0VUX0lOX01TO1xufVxuIl0sIm5hbWVzIjpbIk1FRElBX1RZUEVTIiwiZXhwb3NlZFZhcnMiLCJnZXRBY3RpdmVNZWRpYUlkQXNPYmplY3QiLCJwcm9ncmVzc0hpc3RvcnkiLCJjb25zdHMiLCJpc0luaXRpYWxTZWVrU3VwcG9ydGVkIiwibWVkaWFUeXBlIiwicmVjb3JkZWQiLCJvZmZhaXJWaWRlbyIsImlzRGFzaGJvYXJkIiwiZ2V0SW5pdGlhbFNlZWtUaW1lSW5NcyIsImNvbnRlbnRTdGF0ZSIsImluaXRpYWxTZWVrVGltZUluTXMiLCJ1bmRlZmluZWQiLCJjb250ZW50IiwiaWQiLCJwcm9ncmVzc0luZm8iLCJnZXRTYXZlZFByb2dyZXNzVG9WaWRlb0lkIiwicHJvZ3Jlc3MiLCJDT05USU5VRV9XQVRDSElOR19PRkZTRVRfSU5fTVMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/logic/initialSeek.js\n");

/***/ }),

/***/ "../js/cronus/logic/liveStatus.js":
/*!****************************************!*\
  !*** ../js/cronus/logic/liveStatus.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var cronus_store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/store */ \"../js/cronus/store/index.js\");\n/* harmony import */ var shared_store_actions_content__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/store/actions/content */ \"../js/shared/store/actions/content.js\");\n/* harmony import */ var cronus_store_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/store/selectors */ \"../js/cronus/store/selectors/index.js\");\n\n\n\nvar offlineStatusReceived = false;\n\nfunction onContentAvailableChanged() {\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_0__.wrappedStore.getState();\n  var liveStatus = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_2__.getLiveStatus)(state);\n  var channelContentAvailable = state.content.channelContentAvailable;\n\n  if (channelContentAvailable) {\n    cronus_store__WEBPACK_IMPORTED_MODULE_0__.wrappedStore.dispatch((0,shared_store_actions_content__WEBPACK_IMPORTED_MODULE_1__.setLiveStatus)(true));\n  } else if (liveStatus === undefined) {\n    cronus_store__WEBPACK_IMPORTED_MODULE_0__.wrappedStore.dispatch((0,shared_store_actions_content__WEBPACK_IMPORTED_MODULE_1__.setLiveStatus)(false)); // initial offline channel loading\n  } else {\n    offlineStatusReceived = true;\n  }\n}\n\nfunction onPlaybackEnded() {\n  var mediaType = cronus_store__WEBPACK_IMPORTED_MODULE_0__.wrappedStore.getState().content.mediaType;\n\n  if (mediaType !== shared_store_actions_content__WEBPACK_IMPORTED_MODULE_1__.MEDIA_TYPES.live) {\n    return;\n  }\n\n  if (offlineStatusReceived) {\n    cronus_store__WEBPACK_IMPORTED_MODULE_0__.wrappedStore.dispatch((0,shared_store_actions_content__WEBPACK_IMPORTED_MODULE_1__.setLiveStatus)(false));\n  }\n\n  offlineStatusReceived = false;\n}\n\nfunction onMediaIdChanged() {\n  offlineStatusReceived = false;\n}\n\nfunction init() {\n  cronus_store__WEBPACK_IMPORTED_MODULE_0__.wrappedStore.subscribe('content.channelContentAvailable', onContentAvailableChanged);\n  cronus_store__WEBPACK_IMPORTED_MODULE_0__.wrappedStore.subscribe('content.mediaId', onMediaIdChanged);\n  cronus_store__WEBPACK_IMPORTED_MODULE_0__.wrappedStore.subscribe('playback.ended', onPlaybackEnded);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  init: init\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL2xvZ2ljL2xpdmVTdGF0dXMuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUVBLElBQUlJLHFCQUFxQixHQUFHLEtBQTVCOztBQUVBLFNBQVNDLHlCQUFULEdBQXFDO0FBQ25DLE1BQU1DLEtBQUssR0FBR04sK0RBQUEsRUFBZDtBQUNBLE1BQU1RLFVBQVUsR0FBR0wscUVBQWEsQ0FBQ0csS0FBRCxDQUFoQztBQUNBLE1BQ2FHLHVCQURiLEdBRUlILEtBRkosQ0FDRUksT0FERixDQUNhRCx1QkFEYjs7QUFJQSxNQUFJQSx1QkFBSixFQUE2QjtBQUMzQlQsSUFBQUEsK0RBQUEsQ0FBc0JFLDJFQUFhLENBQUMsSUFBRCxDQUFuQztBQUNELEdBRkQsTUFFTyxJQUFJTSxVQUFVLEtBQUtJLFNBQW5CLEVBQThCO0FBQ25DWixJQUFBQSwrREFBQSxDQUFzQkUsMkVBQWEsQ0FBQyxLQUFELENBQW5DLEVBRG1DLENBQ1U7QUFDOUMsR0FGTSxNQUVBO0FBQ0xFLElBQUFBLHFCQUFxQixHQUFHLElBQXhCO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTUyxlQUFULEdBQTJCO0FBQ3pCLE1BQVFDLFNBQVIsR0FBc0JkLCtEQUFBLEdBQXdCVSxPQUE5QyxDQUFRSSxTQUFSOztBQUVBLE1BQUlBLFNBQVMsS0FBS2IsMEVBQWxCLEVBQW9DO0FBQ2xDO0FBQ0Q7O0FBRUQsTUFBSUcscUJBQUosRUFBMkI7QUFDekJKLElBQUFBLCtEQUFBLENBQXNCRSwyRUFBYSxDQUFDLEtBQUQsQ0FBbkM7QUFDRDs7QUFFREUsRUFBQUEscUJBQXFCLEdBQUcsS0FBeEI7QUFDRDs7QUFFRCxTQUFTWSxnQkFBVCxHQUE0QjtBQUMxQlosRUFBQUEscUJBQXFCLEdBQUcsS0FBeEI7QUFDRDs7QUFFRCxTQUFTYSxJQUFULEdBQWdCO0FBQ2RqQixFQUFBQSxnRUFBQSxDQUF1QixpQ0FBdkIsRUFBMERLLHlCQUExRDtBQUNBTCxFQUFBQSxnRUFBQSxDQUF1QixpQkFBdkIsRUFBMENnQixnQkFBMUM7QUFDQWhCLEVBQUFBLGdFQUFBLENBQXVCLGdCQUF2QixFQUF5Q2EsZUFBekM7QUFDRDs7QUFFRCwrREFBZTtBQUNiSSxFQUFBQSxJQUFJLEVBQUpBO0FBRGEsQ0FBZiIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vanMvY3JvbnVzL2xvZ2ljL2xpdmVTdGF0dXMuanM/N2ZlMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB3cmFwcGVkU3RvcmUgfSBmcm9tICdjcm9udXMvc3RvcmUnO1xuaW1wb3J0IHsgTUVESUFfVFlQRVMsIHNldExpdmVTdGF0dXMgfSBmcm9tICdzaGFyZWQvc3RvcmUvYWN0aW9ucy9jb250ZW50JztcbmltcG9ydCB7IGdldExpdmVTdGF0dXMgfSBmcm9tICdjcm9udXMvc3RvcmUvc2VsZWN0b3JzJztcblxubGV0IG9mZmxpbmVTdGF0dXNSZWNlaXZlZCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBvbkNvbnRlbnRBdmFpbGFibGVDaGFuZ2VkKCkge1xuICBjb25zdCBzdGF0ZSA9IHdyYXBwZWRTdG9yZS5nZXRTdGF0ZSgpO1xuICBjb25zdCBsaXZlU3RhdHVzID0gZ2V0TGl2ZVN0YXR1cyhzdGF0ZSk7XG4gIGNvbnN0IHtcbiAgICBjb250ZW50OiB7IGNoYW5uZWxDb250ZW50QXZhaWxhYmxlIH0sXG4gIH0gPSBzdGF0ZTtcblxuICBpZiAoY2hhbm5lbENvbnRlbnRBdmFpbGFibGUpIHtcbiAgICB3cmFwcGVkU3RvcmUuZGlzcGF0Y2goc2V0TGl2ZVN0YXR1cyh0cnVlKSk7XG4gIH0gZWxzZSBpZiAobGl2ZVN0YXR1cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgd3JhcHBlZFN0b3JlLmRpc3BhdGNoKHNldExpdmVTdGF0dXMoZmFsc2UpKTsgLy8gaW5pdGlhbCBvZmZsaW5lIGNoYW5uZWwgbG9hZGluZ1xuICB9IGVsc2Uge1xuICAgIG9mZmxpbmVTdGF0dXNSZWNlaXZlZCA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gb25QbGF5YmFja0VuZGVkKCkge1xuICBjb25zdCB7IG1lZGlhVHlwZSB9ID0gd3JhcHBlZFN0b3JlLmdldFN0YXRlKCkuY29udGVudDtcblxuICBpZiAobWVkaWFUeXBlICE9PSBNRURJQV9UWVBFUy5saXZlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKG9mZmxpbmVTdGF0dXNSZWNlaXZlZCkge1xuICAgIHdyYXBwZWRTdG9yZS5kaXNwYXRjaChzZXRMaXZlU3RhdHVzKGZhbHNlKSk7XG4gIH1cblxuICBvZmZsaW5lU3RhdHVzUmVjZWl2ZWQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb25NZWRpYUlkQ2hhbmdlZCgpIHtcbiAgb2ZmbGluZVN0YXR1c1JlY2VpdmVkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGluaXQoKSB7XG4gIHdyYXBwZWRTdG9yZS5zdWJzY3JpYmUoJ2NvbnRlbnQuY2hhbm5lbENvbnRlbnRBdmFpbGFibGUnLCBvbkNvbnRlbnRBdmFpbGFibGVDaGFuZ2VkKTtcbiAgd3JhcHBlZFN0b3JlLnN1YnNjcmliZSgnY29udGVudC5tZWRpYUlkJywgb25NZWRpYUlkQ2hhbmdlZCk7XG4gIHdyYXBwZWRTdG9yZS5zdWJzY3JpYmUoJ3BsYXliYWNrLmVuZGVkJywgb25QbGF5YmFja0VuZGVkKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0LFxufTtcbiJdLCJuYW1lcyI6WyJ3cmFwcGVkU3RvcmUiLCJNRURJQV9UWVBFUyIsInNldExpdmVTdGF0dXMiLCJnZXRMaXZlU3RhdHVzIiwib2ZmbGluZVN0YXR1c1JlY2VpdmVkIiwib25Db250ZW50QXZhaWxhYmxlQ2hhbmdlZCIsInN0YXRlIiwiZ2V0U3RhdGUiLCJsaXZlU3RhdHVzIiwiY2hhbm5lbENvbnRlbnRBdmFpbGFibGUiLCJjb250ZW50IiwiZGlzcGF0Y2giLCJ1bmRlZmluZWQiLCJvblBsYXliYWNrRW5kZWQiLCJtZWRpYVR5cGUiLCJsaXZlIiwib25NZWRpYUlkQ2hhbmdlZCIsImluaXQiLCJzdWJzY3JpYmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/logic/liveStatus.js\n");

/***/ }),

/***/ "../js/cronus/logic/lock/hashHelper.js":
/*!*********************************************!*\
  !*** ../js/cronus/logic/lock/hashHelper.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! player-utils/object/get */ \"../node_modules/player-utils/object/get.js\");\n/* harmony import */ var shared_lib_storage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/lib/storage */ \"../js/shared/lib/storage.js\");\n/* harmony import */ var shared_lib_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/lib/logger */ \"../js/shared/lib/logger/index.js\");\n/* harmony import */ var shared_data_exposedVars__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! shared/data/exposedVars */ \"../js/shared/data/exposedVars.js\");\n/* harmony import */ var cronus_store__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! cronus/store */ \"../js/cronus/store/index.js\");\n/* harmony import */ var cronus_store_selectors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cronus/store/selectors */ \"../js/cronus/store/selectors/index.js\");\n/* harmony import */ var shared_store_actions_content__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! shared/store/actions/content */ \"../js/shared/store/actions/content.js\");\n\n\n\n\n\n\n\nvar debugLogger = (0,shared_lib_logger__WEBPACK_IMPORTED_MODULE_2__.createLoggerForModule)('shared/ui/screen/hashlockadvanced');\n\nfunction getChannelHashName() {\n  var mediaType = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_5__.getMediaType)(cronus_store__WEBPACK_IMPORTED_MODULE_4__.wrappedStore.getState());\n  var mid = mediaType === shared_store_actions_content__WEBPACK_IMPORTED_MODULE_6__.MEDIA_TYPES.recorded ? shared_data_exposedVars__WEBPACK_IMPORTED_MODULE_3__[\"default\"].cId : (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_5__.getMediaIdAsObject)(cronus_store__WEBPACK_IMPORTED_MODULE_4__.wrappedStore.getState()).id;\n  return \"c:token-\".concat(mid);\n}\n\nfunction getVideoHashName() {\n  var mediaId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_5__.getMediaIdAsObject)(cronus_store__WEBPACK_IMPORTED_MODULE_4__.wrappedStore.getState()).id;\n  return \"v:token-\".concat(mediaId);\n}\n\nfunction saveHashToLocalStorage(_ref) {\n  var hash = _ref.hash,\n      mediaType = _ref.mediaType;\n  var hashName = mediaType === 'video' ? getVideoHashName() : getChannelHashName();\n  shared_lib_storage__WEBPACK_IMPORTED_MODULE_1__[\"default\"].set(hashName, hash, {\n    expires: getExpirationTimeStamp(hash)\n  });\n}\n\nfunction getFallbackHash() {\n  var mediaType = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_5__.getMediaType)(cronus_store__WEBPACK_IMPORTED_MODULE_4__.wrappedStore.getState());\n  var isRecorded = mediaType === shared_store_actions_content__WEBPACK_IMPORTED_MODULE_6__.MEDIA_TYPES.recorded;\n  var isOffairRecorded = mediaType === shared_store_actions_content__WEBPACK_IMPORTED_MODULE_6__.MEDIA_TYPES.offairVideo;\n\n  if (!isRecorded && !isOffairRecorded) {\n    return undefined;\n  }\n\n  var channelHash = shared_lib_storage__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(getChannelHashName());\n\n  if (channelHash) {\n    return channelHash;\n  }\n\n  var offairVideoId = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_5__.getOffairVideoId)(cronus_store__WEBPACK_IMPORTED_MODULE_4__.wrappedStore.getState());\n\n  if (offairVideoId) {\n    return shared_lib_storage__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(getVideoHashName(offairVideoId));\n  }\n}\n\nfunction removeCurrentHashFromLocalStorage() {\n  removeLegacyHashFromLocalStorage();\n  var mediaType = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_5__.getMediaType)(cronus_store__WEBPACK_IMPORTED_MODULE_4__.wrappedStore.getState());\n  var isRecorded = mediaType === shared_store_actions_content__WEBPACK_IMPORTED_MODULE_6__.MEDIA_TYPES.recorded;\n\n  if (isRecorded) {\n    var videoHashName = getVideoHashName();\n    var videoHash = shared_lib_storage__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(videoHashName);\n\n    if (videoHash) {\n      shared_lib_storage__WEBPACK_IMPORTED_MODULE_1__[\"default\"].set(videoHashName, null);\n      return;\n    }\n  }\n\n  shared_lib_storage__WEBPACK_IMPORTED_MODULE_1__[\"default\"].set(getChannelHashName(), null);\n}\n\nfunction getHashFromLocalStorage() {\n  var hashFromParams = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(shared_data_exposedVars__WEBPACK_IMPORTED_MODULE_3__[\"default\"], 'hash');\n  var mediaType = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_5__.getMediaType)(cronus_store__WEBPACK_IMPORTED_MODULE_4__.wrappedStore.getState());\n  var isRecorded = mediaType === shared_store_actions_content__WEBPACK_IMPORTED_MODULE_6__.MEDIA_TYPES.recorded;\n\n  if (hashFromParams) {\n    return hashFromParams;\n  }\n\n  var hashName = isRecorded ? getVideoHashName() : getChannelHashName();\n  var hash = shared_lib_storage__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(hashName);\n\n  if (hash) {\n    return hash;\n  }\n\n  var fallbackHash = getFallbackHash();\n\n  if (fallbackHash) {\n    return fallbackHash;\n  }\n\n  var legacyHash = getLegacyHash();\n\n  if (legacyHash) {\n    saveHashToLocalStorage({\n      hash: legacyHash\n    });\n  }\n\n  return legacyHash;\n}\n\nfunction getLegacyHash() {\n  return shared_lib_storage__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(getLegacyHashName());\n}\n\nfunction getLegacyHashName() {\n  var mediaType = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_5__.getMediaType)(cronus_store__WEBPACK_IMPORTED_MODULE_4__.wrappedStore.getState());\n  var isRecorded = mediaType === shared_store_actions_content__WEBPACK_IMPORTED_MODULE_6__.MEDIA_TYPES.recorded;\n  return \"ustreamEmbedHash-\".concat(isRecorded ? shared_data_exposedVars__WEBPACK_IMPORTED_MODULE_3__[\"default\"].cId : (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_5__.getMediaIdAsObject)(cronus_store__WEBPACK_IMPORTED_MODULE_4__.wrappedStore.getState()).id);\n}\n\nfunction removeLegacyHashFromLocalStorage() {\n  shared_lib_storage__WEBPACK_IMPORTED_MODULE_1__[\"default\"].set(getLegacyHashName(), null);\n}\n\nfunction getPasswordFromSessionStorage() {\n  var mediaType = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_5__.getMediaType)(cronus_store__WEBPACK_IMPORTED_MODULE_4__.wrappedStore.getState());\n  var isRecorded = mediaType === shared_store_actions_content__WEBPACK_IMPORTED_MODULE_6__.MEDIA_TYPES.recorded;\n  var contentKey = (isRecorded ? 'v:' : 'c:') + (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_5__.getMediaIdAsObject)(cronus_store__WEBPACK_IMPORTED_MODULE_4__.wrappedStore.getState()).id;\n  var channelKey = \"c:\".concat(shared_data_exposedVars__WEBPACK_IMPORTED_MODULE_3__[\"default\"].cId);\n  var videoPwKey = \"ustreamContentPw-\".concat(contentKey);\n  var channelPwKey = \"ustreamContentPw-\".concat(channelKey);\n\n  try {\n    var videoPw = window.sessionStorage.getItem(videoPwKey);\n\n    if (videoPw) {\n      return JSON.parse(videoPw).value;\n    }\n\n    var channelPw = window.sessionStorage.getItem(channelPwKey);\n    return JSON.parse(channelPw).value;\n  } catch (e) {\n    return undefined;\n  }\n}\n\nfunction getHashExpirationTimeStamp(hash) {\n  var hashExpireObject = hash.find(function (oneHash) {\n    return Object.keys(oneHash).includes('hashExpire');\n  });\n\n  if (!hashExpireObject) {\n    return undefined;\n  }\n\n  return Object.values(hashExpireObject).pop();\n}\n\nfunction fixExpirationTimestamp(timestamp) {\n  // because some unknown reason we receive the timestamp divided by 1000\n  var FIXER_MULTIPLIER = 1000;\n  return timestamp * FIXER_MULTIPLIER;\n}\n\nfunction getExpirationDate(hash) {\n  var expirationTimestamp = getHashExpirationTimeStamp(hash);\n  return new Date(fixExpirationTimestamp(expirationTimestamp));\n}\n\nfunction parseHash(hash) {\n  var parsedHash;\n\n  try {\n    parsedHash = JSON.parse(hash);\n  } catch (e) {\n    debugLogger.error('Failed to parse hash', hash);\n    return undefined;\n  }\n\n  return parsedHash;\n}\n\nfunction isInvalidDate(date) {\n  return isNaN(date.getTime());\n}\n\nfunction getExpirationTimeStamp(hash) {\n  var fallBackExpirationTimeInDays = 14;\n  var parsedHash = parseHash(hash);\n\n  if (!parsedHash) {\n    return fallBackExpirationTimeInDays;\n  }\n\n  var expirationDate = getExpirationDate(parsedHash);\n  return isInvalidDate(expirationDate) ? fallBackExpirationTimeInDays : expirationDate;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  saveHashToLocalStorage: saveHashToLocalStorage,\n  getHashFromLocalStorage: getHashFromLocalStorage,\n  getFallbackHash: getFallbackHash,\n  removeCurrentHashFromLocalStorage: removeCurrentHashFromLocalStorage,\n  getPasswordFromSessionStorage: getPasswordFromSessionStorage\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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YlgsRUFBQUEsZUFBZSxFQUFmQSxlQUhhO0FBSWJPLEVBQUFBLGlDQUFpQyxFQUFqQ0EsaUNBSmE7QUFLYlUsRUFBQUEsNkJBQTZCLEVBQTdCQTtBQUxhLENBQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy9sb2dpYy9sb2NrL2hhc2hIZWxwZXIuanM/OWUxMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0IGZyb20gJ3BsYXllci11dGlscy9vYmplY3QvZ2V0JztcbmltcG9ydCBzdG9yYWdlIGZyb20gJ3NoYXJlZC9saWIvc3RvcmFnZSc7XG5pbXBvcnQgeyBjcmVhdGVMb2dnZXJGb3JNb2R1bGUgfSBmcm9tICdzaGFyZWQvbGliL2xvZ2dlcic7XG5pbXBvcnQgZXhwb3NlZFZhcnMgZnJvbSAnc2hhcmVkL2RhdGEvZXhwb3NlZFZhcnMnO1xuaW1wb3J0IHsgd3JhcHBlZFN0b3JlIH0gZnJvbSAnY3JvbnVzL3N0b3JlJztcbmltcG9ydCB7IGdldE1lZGlhVHlwZSwgZ2V0TWVkaWFJZEFzT2JqZWN0LCBnZXRPZmZhaXJWaWRlb0lkIH0gZnJvbSAnY3JvbnVzL3N0b3JlL3NlbGVjdG9ycyc7XG5pbXBvcnQgeyBNRURJQV9UWVBFUyB9IGZyb20gJ3NoYXJlZC9zdG9yZS9hY3Rpb25zL2NvbnRlbnQnO1xuXG5jb25zdCBkZWJ1Z0xvZ2dlciA9IGNyZWF0ZUxvZ2dlckZvck1vZHVsZSgnc2hhcmVkL3VpL3NjcmVlbi9oYXNobG9ja2FkdmFuY2VkJyk7XG5cbmZ1bmN0aW9uIGdldENoYW5uZWxIYXNoTmFtZSgpIHtcbiAgY29uc3QgbWVkaWFUeXBlID0gZ2V0TWVkaWFUeXBlKHdyYXBwZWRTdG9yZS5nZXRTdGF0ZSgpKTtcbiAgY29uc3QgbWlkID1cbiAgICBtZWRpYVR5cGUgPT09IE1FRElBX1RZUEVTLnJlY29yZGVkXG4gICAgICA/IGV4cG9zZWRWYXJzLmNJZFxuICAgICAgOiBnZXRNZWRpYUlkQXNPYmplY3Qod3JhcHBlZFN0b3JlLmdldFN0YXRlKCkpLmlkO1xuICByZXR1cm4gYGM6dG9rZW4tJHttaWR9YDtcbn1cblxuZnVuY3Rpb24gZ2V0VmlkZW9IYXNoTmFtZShtZWRpYUlkID0gZ2V0TWVkaWFJZEFzT2JqZWN0KHdyYXBwZWRTdG9yZS5nZXRTdGF0ZSgpKS5pZCkge1xuICByZXR1cm4gYHY6dG9rZW4tJHttZWRpYUlkfWA7XG59XG5cbmZ1bmN0aW9uIHNhdmVIYXNoVG9Mb2NhbFN0b3JhZ2UoeyBoYXNoLCBtZWRpYVR5cGUgfSkge1xuICBjb25zdCBoYXNoTmFtZSA9IG1lZGlhVHlwZSA9PT0gJ3ZpZGVvJyA/IGdldFZpZGVvSGFzaE5hbWUoKSA6IGdldENoYW5uZWxIYXNoTmFtZSgpO1xuICBzdG9yYWdlLnNldChoYXNoTmFtZSwgaGFzaCwge1xuICAgIGV4cGlyZXM6IGdldEV4cGlyYXRpb25UaW1lU3RhbXAoaGFzaCksXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRGYWxsYmFja0hhc2goKSB7XG4gIGNvbnN0IG1lZGlhVHlwZSA9IGdldE1lZGlhVHlwZSh3cmFwcGVkU3RvcmUuZ2V0U3RhdGUoKSk7XG4gIGNvbnN0IGlzUmVjb3JkZWQgPSBtZWRpYVR5cGUgPT09IE1FRElBX1RZUEVTLnJlY29yZGVkO1xuICBjb25zdCBpc09mZmFpclJlY29yZGVkID0gbWVkaWFUeXBlID09PSBNRURJQV9UWVBFUy5vZmZhaXJWaWRlbztcblxuICBpZiAoIWlzUmVjb3JkZWQgJiYgIWlzT2ZmYWlyUmVjb3JkZWQpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgY29uc3QgY2hhbm5lbEhhc2ggPSBzdG9yYWdlLmdldChnZXRDaGFubmVsSGFzaE5hbWUoKSk7XG5cbiAgaWYgKGNoYW5uZWxIYXNoKSB7XG4gICAgcmV0dXJuIGNoYW5uZWxIYXNoO1xuICB9XG5cbiAgY29uc3Qgb2ZmYWlyVmlkZW9JZCA9IGdldE9mZmFpclZpZGVvSWQod3JhcHBlZFN0b3JlLmdldFN0YXRlKCkpO1xuXG4gIGlmIChvZmZhaXJWaWRlb0lkKSB7XG4gICAgcmV0dXJuIHN0b3JhZ2UuZ2V0KGdldFZpZGVvSGFzaE5hbWUob2ZmYWlyVmlkZW9JZCkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUN1cnJlbnRIYXNoRnJvbUxvY2FsU3RvcmFnZSgpIHtcbiAgcmVtb3ZlTGVnYWN5SGFzaEZyb21Mb2NhbFN0b3JhZ2UoKTtcbiAgY29uc3QgbWVkaWFUeXBlID0gZ2V0TWVkaWFUeXBlKHdyYXBwZWRTdG9yZS5nZXRTdGF0ZSgpKTtcbiAgY29uc3QgaXNSZWNvcmRlZCA9IG1lZGlhVHlwZSA9PT0gTUVESUFfVFlQRVMucmVjb3JkZWQ7XG5cbiAgaWYgKGlzUmVjb3JkZWQpIHtcbiAgICBjb25zdCB2aWRlb0hhc2hOYW1lID0gZ2V0VmlkZW9IYXNoTmFtZSgpO1xuICAgIGNvbnN0IHZpZGVvSGFzaCA9IHN0b3JhZ2UuZ2V0KHZpZGVvSGFzaE5hbWUpO1xuXG4gICAgaWYgKHZpZGVvSGFzaCkge1xuICAgICAgc3RvcmFnZS5zZXQodmlkZW9IYXNoTmFtZSwgbnVsbCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgc3RvcmFnZS5zZXQoZ2V0Q2hhbm5lbEhhc2hOYW1lKCksIG51bGwpO1xufVxuXG5mdW5jdGlvbiBnZXRIYXNoRnJvbUxvY2FsU3RvcmFnZSgpIHtcbiAgY29uc3QgaGFzaEZyb21QYXJhbXMgPSBnZXQoZXhwb3NlZFZhcnMsICdoYXNoJyk7XG4gIGNvbnN0IG1lZGlhVHlwZSA9IGdldE1lZGlhVHlwZSh3cmFwcGVkU3RvcmUuZ2V0U3RhdGUoKSk7XG4gIGNvbnN0IGlzUmVjb3JkZWQgPSBtZWRpYVR5cGUgPT09IE1FRElBX1RZUEVTLnJlY29yZGVkO1xuXG4gIGlmIChoYXNoRnJvbVBhcmFtcykge1xuICAgIHJldHVybiBoYXNoRnJvbVBhcmFtcztcbiAgfVxuXG4gIGNvbnN0IGhhc2hOYW1lID0gaXNSZWNvcmRlZCA/IGdldFZpZGVvSGFzaE5hbWUoKSA6IGdldENoYW5uZWxIYXNoTmFtZSgpO1xuXG4gIGNvbnN0IGhhc2ggPSBzdG9yYWdlLmdldChoYXNoTmFtZSk7XG5cbiAgaWYgKGhhc2gpIHtcbiAgICByZXR1cm4gaGFzaDtcbiAgfVxuXG4gIGNvbnN0IGZhbGxiYWNrSGFzaCA9IGdldEZhbGxiYWNrSGFzaCgpO1xuXG4gIGlmIChmYWxsYmFja0hhc2gpIHtcbiAgICByZXR1cm4gZmFsbGJhY2tIYXNoO1xuICB9XG5cbiAgY29uc3QgbGVnYWN5SGFzaCA9IGdldExlZ2FjeUhhc2goKTtcblxuICBpZiAobGVnYWN5SGFzaCkge1xuICAgIHNhdmVIYXNoVG9Mb2NhbFN0b3JhZ2Uoe1xuICAgICAgaGFzaDogbGVnYWN5SGFzaCxcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBsZWdhY3lIYXNoO1xufVxuXG5mdW5jdGlvbiBnZXRMZWdhY3lIYXNoKCkge1xuICByZXR1cm4gc3RvcmFnZS5nZXQoZ2V0TGVnYWN5SGFzaE5hbWUoKSk7XG59XG5cbmZ1bmN0aW9uIGdldExlZ2FjeUhhc2hOYW1lKCkge1xuICBjb25zdCBtZWRpYVR5cGUgPSBnZXRNZWRpYVR5cGUod3JhcHBlZFN0b3JlLmdldFN0YXRlKCkpO1xuICBjb25zdCBpc1JlY29yZGVkID0gbWVkaWFUeXBlID09PSBNRURJQV9UWVBFUy5yZWNvcmRlZDtcblxuICByZXR1cm4gYHVzdHJlYW1FbWJlZEhhc2gtJHtcbiAgICBpc1JlY29yZGVkID8gZXhwb3NlZFZhcnMuY0lkIDogZ2V0TWVkaWFJZEFzT2JqZWN0KHdyYXBwZWRTdG9yZS5nZXRTdGF0ZSgpKS5pZFxuICB9YDtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlTGVnYWN5SGFzaEZyb21Mb2NhbFN0b3JhZ2UoKSB7XG4gIHN0b3JhZ2Uuc2V0KGdldExlZ2FjeUhhc2hOYW1lKCksIG51bGwpO1xufVxuXG5mdW5jdGlvbiBnZXRQYXNzd29yZEZyb21TZXNzaW9uU3RvcmFnZSgpIHtcbiAgY29uc3QgbWVkaWFUeXBlID0gZ2V0TWVkaWFUeXBlKHdyYXBwZWRTdG9yZS5nZXRTdGF0ZSgpKTtcbiAgY29uc3QgaXNSZWNvcmRlZCA9IG1lZGlhVHlwZSA9PT0gTUVESUFfVFlQRVMucmVjb3JkZWQ7XG5cbiAgY29uc3QgY29udGVudEtleSA9IChpc1JlY29yZGVkID8gJ3Y6JyA6ICdjOicpICsgZ2V0TWVkaWFJZEFzT2JqZWN0KHdyYXBwZWRTdG9yZS5nZXRTdGF0ZSgpKS5pZDtcbiAgY29uc3QgY2hhbm5lbEtleSA9IGBjOiR7ZXhwb3NlZFZhcnMuY0lkfWA7XG4gIGNvbnN0IHZpZGVvUHdLZXkgPSBgdXN0cmVhbUNvbnRlbnRQdy0ke2NvbnRlbnRLZXl9YDtcbiAgY29uc3QgY2hhbm5lbFB3S2V5ID0gYHVzdHJlYW1Db250ZW50UHctJHtjaGFubmVsS2V5fWA7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCB2aWRlb1B3ID0gd2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0odmlkZW9Qd0tleSk7XG5cbiAgICBpZiAodmlkZW9Qdykge1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2UodmlkZW9QdykudmFsdWU7XG4gICAgfVxuXG4gICAgY29uc3QgY2hhbm5lbFB3ID0gd2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oY2hhbm5lbFB3S2V5KTtcblxuICAgIHJldHVybiBKU09OLnBhcnNlKGNoYW5uZWxQdykudmFsdWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEhhc2hFeHBpcmF0aW9uVGltZVN0YW1wKGhhc2gpIHtcbiAgY29uc3QgaGFzaEV4cGlyZU9iamVjdCA9IGhhc2guZmluZCgob25lSGFzaCkgPT4gT2JqZWN0LmtleXMob25lSGFzaCkuaW5jbHVkZXMoJ2hhc2hFeHBpcmUnKSk7XG5cbiAgaWYgKCFoYXNoRXhwaXJlT2JqZWN0KSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QudmFsdWVzKGhhc2hFeHBpcmVPYmplY3QpLnBvcCgpO1xufVxuXG5mdW5jdGlvbiBmaXhFeHBpcmF0aW9uVGltZXN0YW1wKHRpbWVzdGFtcCkge1xuICAvLyBiZWNhdXNlIHNvbWUgdW5rbm93biByZWFzb24gd2UgcmVjZWl2ZSB0aGUgdGltZXN0YW1wIGRpdmlkZWQgYnkgMTAwMFxuICBjb25zdCBGSVhFUl9NVUxUSVBMSUVSID0gMTAwMDtcbiAgcmV0dXJuIHRpbWVzdGFtcCAqIEZJWEVSX01VTFRJUExJRVI7XG59XG5cbmZ1bmN0aW9uIGdldEV4cGlyYXRpb25EYXRlKGhhc2gpIHtcbiAgY29uc3QgZXhwaXJhdGlvblRpbWVzdGFtcCA9IGdldEhhc2hFeHBpcmF0aW9uVGltZVN0YW1wKGhhc2gpO1xuICByZXR1cm4gbmV3IERhdGUoZml4RXhwaXJhdGlvblRpbWVzdGFtcChleHBpcmF0aW9uVGltZXN0YW1wKSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlSGFzaChoYXNoKSB7XG4gIGxldCBwYXJzZWRIYXNoO1xuXG4gIHRyeSB7XG4gICAgcGFyc2VkSGFzaCA9IEpTT04ucGFyc2UoaGFzaCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBkZWJ1Z0xvZ2dlci5lcnJvcignRmFpbGVkIHRvIHBhcnNlIGhhc2gnLCBoYXNoKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgcmV0dXJuIHBhcnNlZEhhc2g7XG59XG5cbmZ1bmN0aW9uIGlzSW52YWxpZERhdGUoZGF0ZSkge1xuICByZXR1cm4gaXNOYU4oZGF0ZS5nZXRUaW1lKCkpO1xufVxuXG5mdW5jdGlvbiBnZXRFeHBpcmF0aW9uVGltZVN0YW1wKGhhc2gpIHtcbiAgY29uc3QgZmFsbEJhY2tFeHBpcmF0aW9uVGltZUluRGF5cyA9IDE0O1xuICBjb25zdCBwYXJzZWRIYXNoID0gcGFyc2VIYXNoKGhhc2gpO1xuXG4gIGlmICghcGFyc2VkSGFzaCkge1xuICAgIHJldHVybiBmYWxsQmFja0V4cGlyYXRpb25UaW1lSW5EYXlzO1xuICB9XG5cbiAgY29uc3QgZXhwaXJhdGlvbkRhdGUgPSBnZXRFeHBpcmF0aW9uRGF0ZShwYXJzZWRIYXNoKTtcblxuICByZXR1cm4gaXNJbnZhbGlkRGF0ZShleHBpcmF0aW9uRGF0ZSkgPyBmYWxsQmFja0V4cGlyYXRpb25UaW1lSW5EYXlzIDogZXhwaXJhdGlvbkRhdGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2F2ZUhhc2hUb0xvY2FsU3RvcmFnZSxcbiAgZ2V0SGFzaEZyb21Mb2NhbFN0b3JhZ2UsXG4gIGdldEZhbGxiYWNrSGFzaCxcbiAgcmVtb3ZlQ3VycmVudEhhc2hGcm9tTG9jYWxTdG9yYWdlLFxuICBnZXRQYXNzd29yZEZyb21TZXNzaW9uU3RvcmFnZSxcbn07XG4iXSwibmFtZXMiOlsiZ2V0Iiwic3RvcmFnZSIsImNyZWF0ZUxvZ2dlckZvck1vZHVsZSIsImV4cG9zZWRWYXJzIiwid3JhcHBlZFN0b3JlIiwiZ2V0TWVkaWFUeXBlIiwiZ2V0TWVkaWFJZEFzT2JqZWN0IiwiZ2V0T2ZmYWlyVmlkZW9JZCIsIk1FRElBX1RZUEVTIiwiZGVidWdMb2dnZXIiLCJnZXRDaGFubmVsSGFzaE5hbWUiLCJtZWRpYVR5cGUiLCJnZXRTdGF0ZSIsIm1pZCIsInJlY29yZGVkIiwiY0lkIiwiaWQiLCJnZXRWaWRlb0hhc2hOYW1lIiwibWVkaWFJZCIsInNhdmVIYXNoVG9Mb2NhbFN0b3JhZ2UiLCJoYXNoIiwiaGFzaE5hbWUiLCJzZXQiLCJleHBpcmVzIiwiZ2V0RXhwaXJhdGlvblRpbWVTdGFtcCIsImdldEZhbGxiYWNrSGFzaCIsImlzUmVjb3JkZWQiLCJpc09mZmFpclJlY29yZGVkIiwib2ZmYWlyVmlkZW8iLCJ1bmRlZmluZWQiLCJjaGFubmVsSGFzaCIsIm9mZmFpclZpZGVvSWQiLCJyZW1vdmVDdXJyZW50SGFzaEZyb21Mb2NhbFN0b3JhZ2UiLCJyZW1vdmVMZWdhY3lIYXNoRnJvbUxvY2FsU3RvcmFnZSIsInZpZGVvSGFzaE5hbWUiLCJ2aWRlb0hhc2giLCJnZXRIYXNoRnJvbUxvY2FsU3RvcmFnZSIsImhhc2hGcm9tUGFyYW1zIiwiZmFsbGJhY2tIYXNoIiwibGVnYWN5SGFzaCIsImdldExlZ2FjeUhhc2giLCJnZXRMZWdhY3lIYXNoTmFtZSIsImdldFBhc3N3b3JkRnJvbVNlc3Npb25TdG9yYWdlIiwiY29udGVudEtleSIsImNoYW5uZWxLZXkiLCJ2aWRlb1B3S2V5IiwiY2hhbm5lbFB3S2V5IiwidmlkZW9QdyIsIndpbmRvdyIsInNlc3Npb25TdG9yYWdlIiwiZ2V0SXRlbSIsIkpTT04iLCJwYXJzZSIsInZhbHVlIiwiY2hhbm5lbFB3IiwiZSIsImdldEhhc2hFeHBpcmF0aW9uVGltZVN0YW1wIiwiaGFzaEV4cGlyZU9iamVjdCIsImZpbmQiLCJvbmVIYXNoIiwiT2JqZWN0Iiwia2V5cyIsImluY2x1ZGVzIiwidmFsdWVzIiwicG9wIiwiZml4RXhwaXJhdGlvblRpbWVzdGFtcCIsInRpbWVzdGFtcCIsIkZJWEVSX01VTFRJUExJRVIiLCJnZXRFeHBpcmF0aW9uRGF0ZSIsImV4cGlyYXRpb25UaW1lc3RhbXAiLCJEYXRlIiwicGFyc2VIYXNoIiwicGFyc2VkSGFzaCIsImVycm9yIiwiaXNJbnZhbGlkRGF0ZSIsImRhdGUiLCJpc05hTiIsImdldFRpbWUiLCJmYWxsQmFja0V4cGlyYXRpb25UaW1lSW5EYXlzIiwiZXhwaXJhdGlvbkRhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/logic/lock/hashHelper.js\n");

/***/ }),

/***/ "../js/cronus/logic/lock/lockManager.js":
/*!**********************************************!*\
  !*** ../js/cronus/logic/lock/lockManager.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getRedirectUrl\": function() { return /* binding */ getRedirectUrl; },\n/* harmony export */   \"handleReject\": function() { return /* binding */ handleReject; },\n/* harmony export */   \"init\": function() { return /* binding */ init; },\n/* harmony export */   \"reportPlaybackStarted\": function() { return /* binding */ reportPlaybackStarted; }\n/* harmony export */ });\n/* harmony import */ var player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! player-utils/object/get */ \"../node_modules/player-utils/object/get.js\");\n/* harmony import */ var cronus_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/store */ \"../js/cronus/store/index.js\");\n/* harmony import */ var shared_store_actions_ums__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/store/actions/ums */ \"../js/shared/store/actions/ums.js\");\n/* harmony import */ var cronus_logic_lock_hashHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/logic/lock/hashHelper */ \"../js/cronus/logic/lock/hashHelper.js\");\n/* harmony import */ var shared_lib_logger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! shared/lib/logger */ \"../js/shared/lib/logger/index.js\");\n/* harmony import */ var cronus_store_selectors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cronus/store/selectors */ \"../js/cronus/store/selectors/index.js\");\n/* harmony import */ var shared_store_actions_content__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! shared/store/actions/content */ \"../js/shared/store/actions/content.js\");\n/* harmony import */ var cronus_embedApi__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! cronus/embedApi */ \"../js/cronus/embedApi/index.js\");\n/* harmony import */ var shared_data_exposedVars__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! shared/data/exposedVars */ \"../js/shared/data/exposedVars.js\");\n\n\n\n\n\n\n\n\n\nvar debugLogger = (0,shared_lib_logger__WEBPACK_IMPORTED_MODULE_4__.createLoggerForModule)('lockManager');\n\nvar unsubscribe = function unsubscribe() {};\n\nvar knownRejects = ['reject', 'ipLock', 'geoLock', 'hashLock', 'passwordLock', 'referrerLock', 'sessionAuthLock', 'viewerHourLimitLock', 'viewerAuth', 'nonexistent'];\nfunction getRedirectUrl() {\n  var _reject$viewerAuth;\n\n  var reject = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var url = new URL(window.location);\n  url.searchParams.delete('vt'); // viewer token\n\n  var redirectBack = url.toString();\n  var authUrl = new URL((_reject$viewerAuth = reject.viewerAuth) === null || _reject$viewerAuth === void 0 ? void 0 : _reject$viewerAuth.authUrl);\n  authUrl.searchParams.set('ref', redirectBack);\n  return authUrl.toString();\n}\n\nfunction getRejectReason(reject) {\n  var reason = Object.keys(reject).find(function (rejectKey) {\n    return knownRejects.includes(rejectKey);\n  });\n  return reason || 'default';\n}\n\nfunction handleReject(mediaId, rejectReasons) {\n  var reported = false;\n  rejectReasons.forEach(function (reject) {\n    if (!(reject.embedLimitExceeded && reported)) {\n      cronus_embedApi__WEBPACK_IMPORTED_MODULE_7__.sendEvent(cronus_embedApi__WEBPACK_IMPORTED_MODULE_7__.EVENTS.mediaReject, true);\n      reported = true;\n    }\n\n    var rejectReason = getRejectReason(reject);\n    var screenName = rejectReason.toLowerCase();\n    var lockData = reject[rejectReason];\n\n    if (rejectReason === 'viewerAuth') {\n      var redirectUrl = getRedirectUrl(reject);\n      window.location.replace(redirectUrl);\n      return;\n    }\n\n    if (rejectReason === 'hashLock') {\n      cronus_store__WEBPACK_IMPORTED_MODULE_1__.wrappedStore.dispatch((0,shared_store_actions_ums__WEBPACK_IMPORTED_MODULE_2__.removeHash)());\n      var fallBackHash = cronus_logic_lock_hashHelper__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getFallbackHash();\n\n      if (fallBackHash) {\n        cronus_store__WEBPACK_IMPORTED_MODULE_1__.wrappedStore.dispatch((0,shared_store_actions_ums__WEBPACK_IMPORTED_MODULE_2__.addHash)(fallBackHash));\n        return;\n      }\n    }\n\n    var _wrappedStore$getStat = cronus_store__WEBPACK_IMPORTED_MODULE_1__.wrappedStore.getState(),\n        ums = _wrappedStore$getStat.ums;\n\n    if (rejectReason === 'passwordLock' && ums.password) {\n      cronus_store__WEBPACK_IMPORTED_MODULE_1__.wrappedStore.dispatch((0,shared_store_actions_ums__WEBPACK_IMPORTED_MODULE_2__.addPassword)(null));\n    }\n\n    cronus_store__WEBPACK_IMPORTED_MODULE_1__.wrappedStore.dispatch((0,shared_store_actions_ums__WEBPACK_IMPORTED_MODULE_2__.setLockInfo)({\n      type: screenName,\n      data: lockData\n    }));\n  });\n}\n\nfunction createWatchedUrl(rawUrl, hash) {\n  var mediaId = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_5__.getMediaIdAsObject)(cronus_store__WEBPACK_IMPORTED_MODULE_1__.wrappedStore.getState()).id;\n  var mediaType = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_5__.getMediaType)(cronus_store__WEBPACK_IMPORTED_MODULE_1__.wrappedStore.getState());\n  var isChannel = mediaType === shared_store_actions_content__WEBPACK_IMPORTED_MODULE_6__.MEDIA_TYPES.live;\n  var url = decodeURIComponent(rawUrl);\n  return url.replace('@@channelId@@', mediaId).replace('@@contentType@@', isChannel ? 'channel' : 'recorded').replace('@@contentId@@', mediaId).replace('@@hash@@', hash);\n}\n\nfunction reportPlaybackStarted(exposedHashData) {\n  var hashDataFromUms = cronus_store__WEBPACK_IMPORTED_MODULE_1__.wrappedStore.getState().ums.hash;\n  var parsedHashObjectFromUms;\n\n  if (!exposedHashData || !hashDataFromUms || !exposedHashData.watchedUrl) {\n    return null;\n  }\n\n  try {\n    parsedHashObjectFromUms = JSON.parse(hashDataFromUms);\n  } catch (e) {\n    debugLogger.error('Parsing hash data failed', hashDataFromUms);\n    return null;\n  }\n\n  var hash = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(parsedHashObjectFromUms.find(function (hashObj) {\n    return hashObj.hash;\n  }), 'hash', null);\n  var url = createWatchedUrl(exposedHashData.watchedUrl, hash);\n  return fetch(url).then(function (response) {\n    return response.json();\n  }).then(function (res) {\n    return debugLogger.info('WatchedUrl successfully called', res);\n  }).catch(function (err) {\n    return debugLogger.warn(err.message);\n  });\n}\n\nfunction onFirstTimeUpdateReceived(firstTimeUpdateReceived) {\n  if (!firstTimeUpdateReceived || shared_data_exposedVars__WEBPACK_IMPORTED_MODULE_8__[\"default\"].isDashboard || shared_data_exposedVars__WEBPACK_IMPORTED_MODULE_8__[\"default\"].align) {\n    return;\n  }\n\n  unsubscribe();\n  reportPlaybackStarted(shared_data_exposedVars__WEBPACK_IMPORTED_MODULE_8__[\"default\"].hashLockData);\n}\n\nfunction init() {\n  unsubscribe = cronus_store__WEBPACK_IMPORTED_MODULE_1__.wrappedStore.subscribe('playback.firstTimeUpdateReceived', onFirstTimeUpdateReceived);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../js/cronus/logic/lock/lockManager.js\n");

/***/ }),

/***/ "../js/cronus/logic/offairContent.js":
/*!*******************************************!*\
  !*** ../js/cronus/logic/offairContent.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! player-utils/object/get */ \"../node_modules/player-utils/object/get.js\");\n/* harmony import */ var cronus_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/store */ \"../js/cronus/store/index.js\");\n/* harmony import */ var shared_store_actions_content__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/store/actions/content */ \"../js/shared/store/actions/content.js\");\n/* harmony import */ var cronus_store_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/store/selectors */ \"../js/cronus/store/selectors/index.js\");\n\n\n\n\nvar previousLiveStatus;\n/**\n * @returns {boolean}\n */\n\nfunction hasOffairVideos() {\n  var offairContent = cronus_store__WEBPACK_IMPORTED_MODULE_1__.wrappedStore.getState().content.offairContent;\n  var offairVideos = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(offairContent, 'videos', []);\n  return offairVideos.length > 0;\n}\n/**\n * @returns {boolean}\n */\n\n\nfunction hasOffairSlide() {\n  var offairContent = cronus_store__WEBPACK_IMPORTED_MODULE_1__.wrappedStore.getState().content.offairContent;\n  var offairPictures = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(offairContent, 'pictures', []);\n  return offairPictures.length > 0;\n}\n\nfunction getNewMediaType(offairContent, _previousLiveStatus, newLiveStatus, currentMediaType) {\n  var newMediaType = currentMediaType;\n\n  if (!newLiveStatus) {\n    if (_previousLiveStatus === undefined && hasOffairVideos()) {\n      // offair videos can be played only when channel was loaded offline\n      newMediaType = shared_store_actions_content__WEBPACK_IMPORTED_MODULE_2__.MEDIA_TYPES.offairVideo;\n    } else if (hasOffairSlide()) {\n      newMediaType = shared_store_actions_content__WEBPACK_IMPORTED_MODULE_2__.MEDIA_TYPES.offairSlide;\n    } else {\n      newMediaType = shared_store_actions_content__WEBPACK_IMPORTED_MODULE_2__.MEDIA_TYPES.offairScreen;\n    }\n  } else {\n    newMediaType = shared_store_actions_content__WEBPACK_IMPORTED_MODULE_2__.MEDIA_TYPES.live;\n  }\n\n  return newMediaType;\n}\n\nfunction checkOffair() {\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_1__.wrappedStore.getState();\n  var liveStatus = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_3__.getLiveStatus)(state);\n  var _state$content = state.content,\n      offairContent = _state$content.offairContent,\n      mediaType = _state$content.mediaType;\n\n  if (liveStatus === undefined || offairContent === undefined) {\n    return;\n  }\n\n  var newMediaType = getNewMediaType(offairContent, previousLiveStatus, liveStatus, mediaType);\n  previousLiveStatus = liveStatus;\n  setMedia(newMediaType);\n}\n\nfunction setMedia(newMediaType) {\n  cronus_store__WEBPACK_IMPORTED_MODULE_1__.wrappedStore.dispatch((0,shared_store_actions_content__WEBPACK_IMPORTED_MODULE_2__.setMediaType)(newMediaType));\n}\n\nfunction onLiveStatusChanged() {\n  checkOffair();\n}\n\nfunction onOffairContentChanged() {\n  checkOffair();\n}\n/**\n * @returns {?string}\n */\n\n\nfunction getNextOffairVideoId() {\n  var mediaType = cronus_store__WEBPACK_IMPORTED_MODULE_1__.wrappedStore.getState().content.mediaType;\n\n  if (mediaType !== shared_store_actions_content__WEBPACK_IMPORTED_MODULE_2__.MEDIA_TYPES.offairVideo || !hasOffairVideos()) {\n    return null;\n  }\n\n  var _wrappedStore$getStat = cronus_store__WEBPACK_IMPORTED_MODULE_1__.wrappedStore.getState().content,\n      currentOffairVideoId = _wrappedStore$getStat.currentOffairVideoId,\n      _wrappedStore$getStat2 = _wrappedStore$getStat.offairContent.videos,\n      offairVideos = _wrappedStore$getStat2 === void 0 ? [] : _wrappedStore$getStat2;\n  var currentOffairVideoIndex = currentOffairVideoId ? offairVideos.indexOf(currentOffairVideoId) : -1;\n  var nextOffairVideoIndex = currentOffairVideoIndex + 1;\n\n  if (nextOffairVideoIndex >= offairVideos.length) {\n    return null;\n  }\n\n  return offairVideos[nextOffairVideoIndex];\n}\n\nfunction nextOffairVideo() {\n  var nextOffairVideoId = getNextOffairVideoId();\n\n  if (!nextOffairVideoId) {\n    return;\n  }\n\n  cronus_store__WEBPACK_IMPORTED_MODULE_1__.wrappedStore.dispatch((0,shared_store_actions_content__WEBPACK_IMPORTED_MODULE_2__.setCurrentOffairVideoId)(nextOffairVideoId));\n}\n/**\n * @returns {boolean}\n */\n\n\nfunction hasNextVideo() {\n  return !!getNextOffairVideoId();\n}\n\nfunction onMediaIdChanged() {\n  previousLiveStatus = undefined;\n}\n\nfunction sameOffairContent(newOffairContent, oldOffairContent) {\n  return JSON.stringify(oldOffairContent) === JSON.stringify(newOffairContent);\n}\n\nfunction init() {\n  cronus_store__WEBPACK_IMPORTED_MODULE_1__.wrappedStore.subscribe('content.offairContent', function (next, prev) {\n    var isSameOffairContent = sameOffairContent(next, prev);\n\n    if (isSameOffairContent) {\n      return;\n    }\n\n    onOffairContentChanged();\n  });\n  cronus_store__WEBPACK_IMPORTED_MODULE_1__.wrappedStore.subscribe('content.liveStatus', onLiveStatusChanged);\n  cronus_store__WEBPACK_IMPORTED_MODULE_1__.wrappedStore.subscribe('content.mediaId', onMediaIdChanged);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  init: init,\n  nextOffairVideo: nextOffairVideo,\n  hasNextVideo: hasNextVideo\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../js/cronus/logic/offairContent.js\n");

/***/ }),

/***/ "../js/cronus/logic/privacy/eeaCountries.js":
/*!**************************************************!*\
  !*** ../js/cronus/logic/privacy/eeaCountries.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar countries = ['AT', 'BE', 'BG', 'CH', 'HR', 'CY', 'CZ', 'DE', 'DK', 'EE', 'ES', 'FI', 'FR', 'GB', 'GR', 'HU', 'IE', 'IS', 'IT', 'LT', 'LU', 'LV', 'MT', 'NO', 'NL', 'PO', 'PT', 'RO', 'SE', 'SI', 'SK'];\n\nfunction isEEACountry(countryCode) {\n  return countries.indexOf(countryCode) !== -1;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  isEEACountry: isEEACountry\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL2xvZ2ljL3ByaXZhY3kvZWVhQ291bnRyaWVzLmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFNQSxTQUFTLEdBQUcsQ0FDaEIsSUFEZ0IsRUFFaEIsSUFGZ0IsRUFHaEIsSUFIZ0IsRUFJaEIsSUFKZ0IsRUFLaEIsSUFMZ0IsRUFNaEIsSUFOZ0IsRUFPaEIsSUFQZ0IsRUFRaEIsSUFSZ0IsRUFTaEIsSUFUZ0IsRUFVaEIsSUFWZ0IsRUFXaEIsSUFYZ0IsRUFZaEIsSUFaZ0IsRUFhaEIsSUFiZ0IsRUFjaEIsSUFkZ0IsRUFlaEIsSUFmZ0IsRUFnQmhCLElBaEJnQixFQWlCaEIsSUFqQmdCLEVBa0JoQixJQWxCZ0IsRUFtQmhCLElBbkJnQixFQW9CaEIsSUFwQmdCLEVBcUJoQixJQXJCZ0IsRUFzQmhCLElBdEJnQixFQXVCaEIsSUF2QmdCLEVBd0JoQixJQXhCZ0IsRUF5QmhCLElBekJnQixFQTBCaEIsSUExQmdCLEVBMkJoQixJQTNCZ0IsRUE0QmhCLElBNUJnQixFQTZCaEIsSUE3QmdCLEVBOEJoQixJQTlCZ0IsRUErQmhCLElBL0JnQixDQUFsQjs7QUFrQ0EsU0FBU0MsWUFBVCxDQUFzQkMsV0FBdEIsRUFBbUM7QUFDakMsU0FBT0YsU0FBUyxDQUFDRyxPQUFWLENBQWtCRCxXQUFsQixNQUFtQyxDQUFDLENBQTNDO0FBQ0Q7O0FBRUQsK0RBQWU7QUFDYkQsRUFBQUEsWUFBWSxFQUFaQTtBQURhLENBQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy9sb2dpYy9wcml2YWN5L2VlYUNvdW50cmllcy5qcz9lOTViIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvdW50cmllcyA9IFtcbiAgJ0FUJyxcbiAgJ0JFJyxcbiAgJ0JHJyxcbiAgJ0NIJyxcbiAgJ0hSJyxcbiAgJ0NZJyxcbiAgJ0NaJyxcbiAgJ0RFJyxcbiAgJ0RLJyxcbiAgJ0VFJyxcbiAgJ0VTJyxcbiAgJ0ZJJyxcbiAgJ0ZSJyxcbiAgJ0dCJyxcbiAgJ0dSJyxcbiAgJ0hVJyxcbiAgJ0lFJyxcbiAgJ0lTJyxcbiAgJ0lUJyxcbiAgJ0xUJyxcbiAgJ0xVJyxcbiAgJ0xWJyxcbiAgJ01UJyxcbiAgJ05PJyxcbiAgJ05MJyxcbiAgJ1BPJyxcbiAgJ1BUJyxcbiAgJ1JPJyxcbiAgJ1NFJyxcbiAgJ1NJJyxcbiAgJ1NLJyxcbl07XG5cbmZ1bmN0aW9uIGlzRUVBQ291bnRyeShjb3VudHJ5Q29kZSkge1xuICByZXR1cm4gY291bnRyaWVzLmluZGV4T2YoY291bnRyeUNvZGUpICE9PSAtMTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBpc0VFQUNvdW50cnksXG59O1xuIl0sIm5hbWVzIjpbImNvdW50cmllcyIsImlzRUVBQ291bnRyeSIsImNvdW50cnlDb2RlIiwiaW5kZXhPZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/logic/privacy/eeaCountries.js\n");

/***/ }),

/***/ "../js/cronus/logic/privacy/privacyCookieChecker.js":
/*!**********************************************************!*\
  !*** ../js/cronus/logic/privacy/privacyCookieChecker.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var shared_store_actions_privacy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/store/actions/privacy */ \"../js/shared/store/actions/privacy.js\");\n/* harmony import */ var cronus_logic_advert_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/logic/advert/helpers */ \"../js/cronus/logic/advert/helpers.js\");\n/* harmony import */ var shared_data_referrer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/data/referrer */ \"../js/shared/data/referrer.js\");\n/* harmony import */ var cronus_store__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/store */ \"../js/cronus/store/index.js\");\n/* harmony import */ var cronus_logic_privacy_eeaCountries__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! cronus/logic/privacy/eeaCountries */ \"../js/cronus/logic/privacy/eeaCountries.js\");\n/* harmony import */ var shared_lib_logger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! shared/lib/logger */ \"../js/shared/lib/logger/index.js\");\n/* harmony import */ var shared_lib_storage__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! shared/lib/storage */ \"../js/shared/lib/storage.js\");\n\n\n\n\n\n\n\nvar debugLogger = (0,shared_lib_logger__WEBPACK_IMPORTED_MODULE_5__.createLoggerForModule)('privacyCookieChecker');\nvar checkerInterval;\nvar intervalInMs = 1000; // 1 sec\n\nvar ibmCookieKey = 'truste.eu.cookie.notice_preferences';\n\nfunction checkPrivacyCookie() {\n  var ibmCookie = cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.getState().privacy.ibmCookie;\n  var ibmCookieConsentFromStorage = shared_lib_storage__WEBPACK_IMPORTED_MODULE_6__[\"default\"].get(ibmCookieKey);\n\n  if (ibmCookieConsentFromStorage && ibmCookieConsentFromStorage !== ibmCookie) {\n    cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.dispatch((0,shared_store_actions_privacy__WEBPACK_IMPORTED_MODULE_0__.updatePrivacyCookie)(ibmCookieConsentFromStorage));\n  }\n}\n\nfunction stopCheck() {\n  if (checkerInterval) {\n    clearInterval(checkerInterval);\n  }\n\n  checkerInterval = null;\n}\n\nfunction startCheck() {\n  stopCheck();\n  checkPrivacyCookie();\n  checkerInterval = setInterval(checkPrivacyCookie, intervalInMs);\n}\n\nfunction areAdsEnabled(countryCode) {\n  var ibmCookie = cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.getState().privacy.ibmCookie;\n  var adsEnabledFromPrivacyCookie = ibmCookie && ibmCookie.indexOf('0:') === -1 && // required\n  ibmCookie.indexOf('1:') === -1; // functional\n\n  return adsEnabledFromPrivacyCookie || !ibmCookie && countryCode && !cronus_logic_privacy_eeaCountries__WEBPACK_IMPORTED_MODULE_4__[\"default\"].isEEACountry(countryCode);\n}\n/*\n * CCPA users are those who access the player from California after Jan 1st, 2020\n */\n\n\nfunction isCCPAUser(regionCode) {\n  return !regionCode || regionCode === 'CA';\n}\n/*\n * GDPR users are those who access the player from a geo location where GDPR is in effect = EEA\n */\n\n\nfunction isGDPRUser(countryCode) {\n  return !countryCode || cronus_logic_privacy_eeaCountries__WEBPACK_IMPORTED_MODULE_4__[\"default\"].isEEACountry(countryCode);\n}\n\nfunction canStartAutoplay() {\n  var needsCheckOnThisDomain = (0,cronus_logic_advert_helpers__WEBPACK_IMPORTED_MODULE_1__.isOnIbm)(shared_data_referrer__WEBPACK_IMPORTED_MODULE_2__[\"default\"]) || (0,cronus_logic_advert_helpers__WEBPACK_IMPORTED_MODULE_1__.isOnUstream)(shared_data_referrer__WEBPACK_IMPORTED_MODULE_2__[\"default\"]) || shared_data_referrer__WEBPACK_IMPORTED_MODULE_2__[\"default\"] === 'unknown';\n  var _wrappedStore$getStat = cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.getState().content,\n      countryCode = _wrappedStore$getStat.countryCode,\n      regionCode = _wrappedStore$getStat.regionCode;\n  debugLogger.debug('canStartAutoplay', {\n    needsCheckOnThisDomain: needsCheckOnThisDomain,\n    referrer: shared_data_referrer__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n    countryCode: countryCode,\n    regionCode: regionCode\n  });\n\n  if (needsCheckOnThisDomain && (isGDPRUser(countryCode) || isCCPAUser(regionCode))) {\n    var cookieConsentConfirmed = cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.getState().privacy.ibmCookie;\n    debugLogger.debug('canStartAutoplay', {\n      cookieConsentConfirmed: cookieConsentConfirmed\n    });\n\n    if (!cookieConsentConfirmed) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  startCheck: startCheck,\n  stopCheck: stopCheck,\n  isGDPRUser: isGDPRUser,\n  canStartAutoplay: canStartAutoplay,\n  areAdsEnabled: areAdsEnabled\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL2xvZ2ljL3ByaXZhY3kvcHJpdmFjeUNvb2tpZUNoZWNrZXIuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLElBQU1RLFdBQVcsR0FBR0Ysd0VBQXFCLENBQUMsc0JBQUQsQ0FBekM7QUFDQSxJQUFJRyxlQUFKO0FBQ0EsSUFBTUMsWUFBWSxHQUFHLElBQXJCLEVBQTJCOztBQUMzQixJQUFNQyxZQUFZLEdBQUcscUNBQXJCOztBQUVBLFNBQVNDLGtCQUFULEdBQThCO0FBQzVCLE1BQVFDLFNBQVIsR0FBc0JULCtEQUFBLEdBQXdCVyxPQUE5QyxDQUFRRixTQUFSO0FBQ0EsTUFBTUcsMkJBQTJCLEdBQUdULDhEQUFBLENBQVlJLFlBQVosQ0FBcEM7O0FBRUEsTUFBSUssMkJBQTJCLElBQUlBLDJCQUEyQixLQUFLSCxTQUFuRSxFQUE4RTtBQUM1RVQsSUFBQUEsK0RBQUEsQ0FBc0JKLGlGQUFtQixDQUFDZ0IsMkJBQUQsQ0FBekM7QUFDRDtBQUNGOztBQUVELFNBQVNHLFNBQVQsR0FBcUI7QUFDbkIsTUFBSVYsZUFBSixFQUFxQjtBQUNuQlcsSUFBQUEsYUFBYSxDQUFDWCxlQUFELENBQWI7QUFDRDs7QUFFREEsRUFBQUEsZUFBZSxHQUFHLElBQWxCO0FBQ0Q7O0FBRUQsU0FBU1ksVUFBVCxHQUFzQjtBQUNwQkYsRUFBQUEsU0FBUztBQUNUUCxFQUFBQSxrQkFBa0I7QUFDbEJILEVBQUFBLGVBQWUsR0FBR2EsV0FBVyxDQUFDVixrQkFBRCxFQUFxQkYsWUFBckIsQ0FBN0I7QUFDRDs7QUFFRCxTQUFTYSxhQUFULENBQXVCQyxXQUF2QixFQUFvQztBQUNsQyxNQUFRWCxTQUFSLEdBQXNCVCwrREFBQSxHQUF3QlcsT0FBOUMsQ0FBUUYsU0FBUjtBQUNBLE1BQU1ZLDJCQUEyQixHQUMvQlosU0FBUyxJQUNUQSxTQUFTLENBQUNhLE9BQVYsQ0FBa0IsSUFBbEIsTUFBNEIsQ0FBQyxDQUQ3QixJQUNrQztBQUNsQ2IsRUFBQUEsU0FBUyxDQUFDYSxPQUFWLENBQWtCLElBQWxCLE1BQTRCLENBQUMsQ0FIL0IsQ0FGa0MsQ0FLQTs7QUFDbEMsU0FDRUQsMkJBQTJCLElBQzFCLENBQUNaLFNBQUQsSUFBY1csV0FBZCxJQUE2QixDQUFDbkIsc0ZBQUEsQ0FBMEJtQixXQUExQixDQUZqQztBQUlEO0FBRUQ7QUFDQTtBQUNBOzs7QUFDQSxTQUFTSSxVQUFULENBQW9CQyxVQUFwQixFQUFnQztBQUM5QixTQUFPLENBQUNBLFVBQUQsSUFBZUEsVUFBVSxLQUFLLElBQXJDO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7OztBQUNBLFNBQVNDLFVBQVQsQ0FBb0JOLFdBQXBCLEVBQWlDO0FBQy9CLFNBQU8sQ0FBQ0EsV0FBRCxJQUFnQm5CLHNGQUFBLENBQTBCbUIsV0FBMUIsQ0FBdkI7QUFDRDs7QUFFRCxTQUFTTyxnQkFBVCxHQUE0QjtBQUMxQixNQUFNQyxzQkFBc0IsR0FDMUI5QixvRUFBTyxDQUFDQyw0REFBRCxDQUFQLElBQXFCRix3RUFBVyxDQUFDRSw0REFBRCxDQUFoQyxJQUE4Q0EsNERBQVEsS0FBSyxTQUQ3RDtBQUVBLDhCQUFvQ0MsK0RBQUEsR0FBd0I2QixPQUE1RDtBQUFBLE1BQVFULFdBQVIseUJBQVFBLFdBQVI7QUFBQSxNQUFxQkssVUFBckIseUJBQXFCQSxVQUFyQjtBQUVBckIsRUFBQUEsV0FBVyxDQUFDMEIsS0FBWixDQUFrQixrQkFBbEIsRUFBc0M7QUFDcENGLElBQUFBLHNCQUFzQixFQUF0QkEsc0JBRG9DO0FBRXBDN0IsSUFBQUEsUUFBUSxFQUFSQSw0REFGb0M7QUFHcENxQixJQUFBQSxXQUFXLEVBQVhBLFdBSG9DO0FBSXBDSyxJQUFBQSxVQUFVLEVBQVZBO0FBSm9DLEdBQXRDOztBQU9BLE1BQUlHLHNCQUFzQixLQUFLRixVQUFVLENBQUNOLFdBQUQsQ0FBVixJQUEyQkksVUFBVSxDQUFDQyxVQUFELENBQTFDLENBQTFCLEVBQW1GO0FBQ2pGLFFBQU1NLHNCQUFzQixHQUFHL0IsK0RBQUEsR0FBd0JXLE9BQXhCLENBQWdDRixTQUEvRDtBQUVBTCxJQUFBQSxXQUFXLENBQUMwQixLQUFaLENBQWtCLGtCQUFsQixFQUFzQztBQUFFQyxNQUFBQSxzQkFBc0IsRUFBdEJBO0FBQUYsS0FBdEM7O0FBRUEsUUFBSSxDQUFDQSxzQkFBTCxFQUE2QjtBQUMzQixhQUFPLEtBQVA7QUFDRDtBQUNGOztBQUVELFNBQU8sSUFBUDtBQUNEOztBQUVELCtEQUFlO0FBQ2JkLEVBQUFBLFVBQVUsRUFBVkEsVUFEYTtBQUViRixFQUFBQSxTQUFTLEVBQVRBLFNBRmE7QUFHYlcsRUFBQUEsVUFBVSxFQUFWQSxVQUhhO0FBSWJDLEVBQUFBLGdCQUFnQixFQUFoQkEsZ0JBSmE7QUFLYlIsRUFBQUEsYUFBYSxFQUFiQTtBQUxhLENBQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy9sb2dpYy9wcml2YWN5L3ByaXZhY3lDb29raWVDaGVja2VyLmpzPzYwOWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXBkYXRlUHJpdmFjeUNvb2tpZSB9IGZyb20gJ3NoYXJlZC9zdG9yZS9hY3Rpb25zL3ByaXZhY3knO1xuaW1wb3J0IHsgaXNPblVzdHJlYW0sIGlzT25JYm0gfSBmcm9tICdjcm9udXMvbG9naWMvYWR2ZXJ0L2hlbHBlcnMnO1xuaW1wb3J0IHJlZmVycmVyIGZyb20gJ3NoYXJlZC9kYXRhL3JlZmVycmVyJztcbmltcG9ydCB7IHdyYXBwZWRTdG9yZSB9IGZyb20gJ2Nyb251cy9zdG9yZSc7XG5pbXBvcnQgZWVhQ291bnRyaWVzIGZyb20gJ2Nyb251cy9sb2dpYy9wcml2YWN5L2VlYUNvdW50cmllcyc7XG5pbXBvcnQgeyBjcmVhdGVMb2dnZXJGb3JNb2R1bGUgfSBmcm9tICdzaGFyZWQvbGliL2xvZ2dlcic7XG5pbXBvcnQgc3RvcmFnZSBmcm9tICdzaGFyZWQvbGliL3N0b3JhZ2UnO1xuXG5jb25zdCBkZWJ1Z0xvZ2dlciA9IGNyZWF0ZUxvZ2dlckZvck1vZHVsZSgncHJpdmFjeUNvb2tpZUNoZWNrZXInKTtcbmxldCBjaGVja2VySW50ZXJ2YWw7XG5jb25zdCBpbnRlcnZhbEluTXMgPSAxMDAwOyAvLyAxIHNlY1xuY29uc3QgaWJtQ29va2llS2V5ID0gJ3RydXN0ZS5ldS5jb29raWUubm90aWNlX3ByZWZlcmVuY2VzJztcblxuZnVuY3Rpb24gY2hlY2tQcml2YWN5Q29va2llKCkge1xuICBjb25zdCB7IGlibUNvb2tpZSB9ID0gd3JhcHBlZFN0b3JlLmdldFN0YXRlKCkucHJpdmFjeTtcbiAgY29uc3QgaWJtQ29va2llQ29uc2VudEZyb21TdG9yYWdlID0gc3RvcmFnZS5nZXQoaWJtQ29va2llS2V5KTtcblxuICBpZiAoaWJtQ29va2llQ29uc2VudEZyb21TdG9yYWdlICYmIGlibUNvb2tpZUNvbnNlbnRGcm9tU3RvcmFnZSAhPT0gaWJtQ29va2llKSB7XG4gICAgd3JhcHBlZFN0b3JlLmRpc3BhdGNoKHVwZGF0ZVByaXZhY3lDb29raWUoaWJtQ29va2llQ29uc2VudEZyb21TdG9yYWdlKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RvcENoZWNrKCkge1xuICBpZiAoY2hlY2tlckludGVydmFsKSB7XG4gICAgY2xlYXJJbnRlcnZhbChjaGVja2VySW50ZXJ2YWwpO1xuICB9XG5cbiAgY2hlY2tlckludGVydmFsID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gc3RhcnRDaGVjaygpIHtcbiAgc3RvcENoZWNrKCk7XG4gIGNoZWNrUHJpdmFjeUNvb2tpZSgpO1xuICBjaGVja2VySW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChjaGVja1ByaXZhY3lDb29raWUsIGludGVydmFsSW5Ncyk7XG59XG5cbmZ1bmN0aW9uIGFyZUFkc0VuYWJsZWQoY291bnRyeUNvZGUpIHtcbiAgY29uc3QgeyBpYm1Db29raWUgfSA9IHdyYXBwZWRTdG9yZS5nZXRTdGF0ZSgpLnByaXZhY3k7XG4gIGNvbnN0IGFkc0VuYWJsZWRGcm9tUHJpdmFjeUNvb2tpZSA9XG4gICAgaWJtQ29va2llICYmXG4gICAgaWJtQ29va2llLmluZGV4T2YoJzA6JykgPT09IC0xICYmIC8vIHJlcXVpcmVkXG4gICAgaWJtQ29va2llLmluZGV4T2YoJzE6JykgPT09IC0xOyAvLyBmdW5jdGlvbmFsXG4gIHJldHVybiAoXG4gICAgYWRzRW5hYmxlZEZyb21Qcml2YWN5Q29va2llIHx8XG4gICAgKCFpYm1Db29raWUgJiYgY291bnRyeUNvZGUgJiYgIWVlYUNvdW50cmllcy5pc0VFQUNvdW50cnkoY291bnRyeUNvZGUpKVxuICApO1xufVxuXG4vKlxuICogQ0NQQSB1c2VycyBhcmUgdGhvc2Ugd2hvIGFjY2VzcyB0aGUgcGxheWVyIGZyb20gQ2FsaWZvcm5pYSBhZnRlciBKYW4gMXN0LCAyMDIwXG4gKi9cbmZ1bmN0aW9uIGlzQ0NQQVVzZXIocmVnaW9uQ29kZSkge1xuICByZXR1cm4gIXJlZ2lvbkNvZGUgfHwgcmVnaW9uQ29kZSA9PT0gJ0NBJztcbn1cblxuLypcbiAqIEdEUFIgdXNlcnMgYXJlIHRob3NlIHdobyBhY2Nlc3MgdGhlIHBsYXllciBmcm9tIGEgZ2VvIGxvY2F0aW9uIHdoZXJlIEdEUFIgaXMgaW4gZWZmZWN0ID0gRUVBXG4gKi9cbmZ1bmN0aW9uIGlzR0RQUlVzZXIoY291bnRyeUNvZGUpIHtcbiAgcmV0dXJuICFjb3VudHJ5Q29kZSB8fCBlZWFDb3VudHJpZXMuaXNFRUFDb3VudHJ5KGNvdW50cnlDb2RlKTtcbn1cblxuZnVuY3Rpb24gY2FuU3RhcnRBdXRvcGxheSgpIHtcbiAgY29uc3QgbmVlZHNDaGVja09uVGhpc0RvbWFpbiA9XG4gICAgaXNPbklibShyZWZlcnJlcikgfHwgaXNPblVzdHJlYW0ocmVmZXJyZXIpIHx8IHJlZmVycmVyID09PSAndW5rbm93bic7XG4gIGNvbnN0IHsgY291bnRyeUNvZGUsIHJlZ2lvbkNvZGUgfSA9IHdyYXBwZWRTdG9yZS5nZXRTdGF0ZSgpLmNvbnRlbnQ7XG5cbiAgZGVidWdMb2dnZXIuZGVidWcoJ2NhblN0YXJ0QXV0b3BsYXknLCB7XG4gICAgbmVlZHNDaGVja09uVGhpc0RvbWFpbixcbiAgICByZWZlcnJlcixcbiAgICBjb3VudHJ5Q29kZSxcbiAgICByZWdpb25Db2RlLFxuICB9KTtcblxuICBpZiAobmVlZHNDaGVja09uVGhpc0RvbWFpbiAmJiAoaXNHRFBSVXNlcihjb3VudHJ5Q29kZSkgfHwgaXNDQ1BBVXNlcihyZWdpb25Db2RlKSkpIHtcbiAgICBjb25zdCBjb29raWVDb25zZW50Q29uZmlybWVkID0gd3JhcHBlZFN0b3JlLmdldFN0YXRlKCkucHJpdmFjeS5pYm1Db29raWU7XG5cbiAgICBkZWJ1Z0xvZ2dlci5kZWJ1ZygnY2FuU3RhcnRBdXRvcGxheScsIHsgY29va2llQ29uc2VudENvbmZpcm1lZCB9KTtcblxuICAgIGlmICghY29va2llQ29uc2VudENvbmZpcm1lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHN0YXJ0Q2hlY2ssXG4gIHN0b3BDaGVjayxcbiAgaXNHRFBSVXNlcixcbiAgY2FuU3RhcnRBdXRvcGxheSxcbiAgYXJlQWRzRW5hYmxlZCxcbn07XG4iXSwibmFtZXMiOlsidXBkYXRlUHJpdmFjeUNvb2tpZSIsImlzT25Vc3RyZWFtIiwiaXNPbklibSIsInJlZmVycmVyIiwid3JhcHBlZFN0b3JlIiwiZWVhQ291bnRyaWVzIiwiY3JlYXRlTG9nZ2VyRm9yTW9kdWxlIiwic3RvcmFnZSIsImRlYnVnTG9nZ2VyIiwiY2hlY2tlckludGVydmFsIiwiaW50ZXJ2YWxJbk1zIiwiaWJtQ29va2llS2V5IiwiY2hlY2tQcml2YWN5Q29va2llIiwiaWJtQ29va2llIiwiZ2V0U3RhdGUiLCJwcml2YWN5IiwiaWJtQ29va2llQ29uc2VudEZyb21TdG9yYWdlIiwiZ2V0IiwiZGlzcGF0Y2giLCJzdG9wQ2hlY2siLCJjbGVhckludGVydmFsIiwic3RhcnRDaGVjayIsInNldEludGVydmFsIiwiYXJlQWRzRW5hYmxlZCIsImNvdW50cnlDb2RlIiwiYWRzRW5hYmxlZEZyb21Qcml2YWN5Q29va2llIiwiaW5kZXhPZiIsImlzRUVBQ291bnRyeSIsImlzQ0NQQVVzZXIiLCJyZWdpb25Db2RlIiwiaXNHRFBSVXNlciIsImNhblN0YXJ0QXV0b3BsYXkiLCJuZWVkc0NoZWNrT25UaGlzRG9tYWluIiwiY29udGVudCIsImRlYnVnIiwiY29va2llQ29uc2VudENvbmZpcm1lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/logic/privacy/privacyCookieChecker.js\n");

/***/ }),

/***/ "../js/cronus/logic/sdcdnHandler.js":
/*!******************************************!*\
  !*** ../js/cronus/logic/sdcdnHandler.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var player_utils_object_clone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! player-utils/object/clone */ \"../node_modules/player-utils/object/clone.js\");\n/* harmony import */ var player_utils_object_isEmpty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! player-utils/object/isEmpty */ \"../node_modules/player-utils/object/isEmpty.js\");\n/* harmony import */ var player_utils_common_isArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! player-utils/common/isArray */ \"../node_modules/player-utils/common/isArray.js\");\n/* harmony import */ var player_utils_common_isString__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! player-utils/common/isString */ \"../node_modules/player-utils/common/isString.js\");\n/* harmony import */ var shared_lib_logger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! shared/lib/logger */ \"../js/shared/lib/logger/index.js\");\n/* harmony import */ var shared_lib_storage__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! shared/lib/storage */ \"../js/shared/lib/storage.js\");\n/* harmony import */ var ustream_sdcdn__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ustream-sdcdn */ \"../node_modules/ustream-sdcdn/dist/ustream-sdcdn.module.js\");\n/* harmony import */ var cronus_store__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! cronus/store */ \"../js/cronus/store/index.js\");\n/* harmony import */ var cronus_store_selectors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! cronus/store/selectors */ \"../js/cronus/store/selectors/index.js\");\n/* harmony import */ var cronus_store_actions_tracking__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! cronus/store/actions/tracking */ \"../js/cronus/store/actions/tracking.js\");\n/* harmony import */ var cronus_config_initial__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! cronus/config/initial */ \"../js/cronus/config/initial.js\");\n/* harmony import */ var cronus_tracking__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! cronus/tracking */ \"../js/cronus/tracking/index.js\");\n/* harmony import */ var cronus_reporting__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! cronus/reporting */ \"../js/cronus/reporting/index.js\");\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar MAX_DELAY = 1000 * 60 * 5; // after 5 mins, test all again\n\nvar RETRY_BASE_INTERVAL = 1000;\nvar COOKIE_NAME = 'ecdnPreferredLocation';\nvar forceTestTimeout;\nvar forceTestCounter = 0;\nvar options = {\n  pingPath: '/ping',\n  pingThreads: 6,\n  pingRounds: 1,\n  pingTimeout: 400,\n  addRndParam: true,\n  locationPriority: []\n};\nvar streamModules = {};\nvar cdnConfigs = {};\nvar finalResults = {};\nvar firstResultSent;\nvar sdcdnInited;\nvar mediaId;\nvar endTestTimestamp = 0;\nvar startTestTimestamp;\nvar retestTimeOut;\nvar testsInProgress;\nvar currentProvider;\nvar userLocation;\nvar preferredLocation = shared_lib_storage__WEBPACK_IMPORTED_MODULE_5__[\"default\"].get(COOKIE_NAME) || [];\nvar api;\nvar firstStreamModule = true;\nvar debugLogger = (0,shared_lib_logger__WEBPACK_IMPORTED_MODULE_4__.createLoggerForModule)('cronus/logic/sdcdnHandler');\nvar debugSdcdnLib = (0,shared_lib_logger__WEBPACK_IMPORTED_MODULE_4__.createLoggerForModule)('sdcdn');\nvar storedForcedProvider = cronus_store__WEBPACK_IMPORTED_MODULE_7__.wrappedStore.getState().provider.forcedUrl;\nvar forcedProvider = (0,player_utils_common_isString__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(storedForcedProvider) ? storedForcedProvider : null;\n/**\n * Catch every ping result. Send the first successful result\n *\n * @param {Object} data - ping result object: {\n *\t\t\t\t\t\t\t\t\t\t  type: 'single'|'multi',\n *\t\t\t\t\t\t\t\t\t\t  total: num_of_items_in_queue,\n *\t\t\t\t\t\t\t\t\t\t  finished: num_of_finished_items,\n *\t\t\t\t\t\t\t\t\t\t  result: {time, url, location}\n *\t\t\t\t\t\t\t\t\t   }\n */\n\nfunction onPingResult(data) {\n  var isSuccess = data && data.result && data.result.time > -1;\n  debugLogger.debug('Ping result', data);\n\n  if (isSuccess) {\n    if (!userLocation || userLocation.time > data.result.time) {\n      userLocation = data.result;\n    }\n\n    if (!firstResultSent && streamModules[testsInProgress]) {\n      firstResultSent = true;\n      debugLogger.debug('Send first result');\n      sendResult([data.result], testsInProgress);\n    }\n  }\n\n  api.onStat({\n    type: 'overlay',\n    data: {\n      pingResult: data\n    }\n  });\n}\n/**\n * Handle results after all pings completed\n *\n * @param {Array} data - ordered list of results [{name, location, url}, {...},...]\n */\n\n\nfunction onFinished(data) {\n  endTestTimestamp = new Date().getTime();\n  finalResults[testsInProgress] = data;\n  debugLogger.debug('Pings finished', {\n    duration: endTestTimestamp - startTestTimestamp,\n    data: finalResults[testsInProgress]\n  });\n  sendResult(finalResults[testsInProgress], testsInProgress);\n  mediaId = testsInProgress;\n  testsInProgress = false;\n\n  if (retestNeeded(mediaId)) {\n    retryTests();\n  } else {\n    forceTestCounter = 0;\n  }\n\n  api.onStat({\n    type: 'report',\n    data: endTestTimestamp - startTestTimestamp\n  });\n}\n\nfunction retestNeeded(mid) {\n  if (!cdnConfigs[mid]) {\n    return false;\n  }\n\n  if (!finalResults[mid] && cdnConfigs[mid]) {\n    return true;\n  } // check results for successful ecdn tests\n\n\n  var hasEcdnResult = finalResults[mid].some(function (item) {\n    return isEcdnProvider(item.url);\n  }); // test needed only when no ecdn results\n\n  if (hasEcdnResult) {\n    return false;\n  } // check config for ecdn sites.\n\n\n  var hasEcdn = cdnConfigs[mid].data.some(function (item) {\n    return item.useBestSite;\n  });\n  return hasEcdn;\n}\n\nfunction retryTests() {\n  var delay = forceTestCounter ? RETRY_BASE_INTERVAL : 0;\n  delay = Math.min(MAX_DELAY, delay * Math.pow(2, forceTestCounter - 1)) + Math.floor(Math.random() * 5000);\n  debugLogger.debug(\"Retry ecdn pings in \".concat(Math.round(delay / 1000), \"sec\"));\n  clearTimeout(forceTestTimeout);\n  forceTestTimeout = setTimeout(function () {\n    forceTestCounter += 1;\n    forceTests();\n  }, delay);\n}\n/**\n * Pass sdcdn lib's log events to logger\n *\n * @param {Object} data - {source, line, level, data}\n */\n\n\nfunction onLog(data) {\n  debugSdcdnLib.debug(data.line, data.data);\n}\n/**\n * Pass sdcdn lib's error events to logger\n *\n * @param {String} data (it might be more complex if neccessary)\n */\n\n\nfunction onError(data) {\n  debugSdcdnLib.error('SDCDN lib error:', data);\n}\n/*\nfallback rules:\n1. has userLocation (successful pings): use that location fallback value.\n2. pings failed but has previously stored location (preferredLocation)\n   and it is in the cdnConfig: use that location's fallback value.\n3. pings failed and no previously stored location and\n\ta. only one ecdn location on the cdnConfig: use that.\n\tb. more ecdn location: if any locations fallback is true, use fallback;\n*/\n\n/**\n * Is the viewer allowed to select fallback (nonecdn provider)?\n *\n * @param {string} mid\n * @param {object} userLocation\n * @param {array} providers\n *\n * @returns {boolean} true if fallback allowed\n */\n\n\nfunction hasFallback(mid) {\n  var ecdnConfig = getEcdnConfig(mid);\n\n  if (!ecdnConfig) {\n    return true;\n  }\n\n  var locations = getLocationsForFallback(ecdnConfig);\n\n  if (!locations.length) {\n    return true;\n  }\n\n  if ((0,player_utils_common_isArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(preferredLocation) && preferredLocation.length) {\n    var prefferedLocationFallback = locations.filter(function (item) {\n      return preferredLocation.includes(\"\".concat(item.group, \"/\").concat(item.location));\n    });\n\n    if (prefferedLocationFallback.length) {\n      return prefferedLocationFallback[0].cdnFallbackEnabled;\n    }\n  }\n\n  return locations.some(function (item) {\n    return item.cdnFallbackEnabled;\n  });\n}\n\nfunction getLocationsForFallback(ecdnConfig) {\n  var fallbacks = [];\n  ecdnConfig.forEach(function (item) {\n    item.data.forEach(function (loc) {\n      if (Object.prototype.hasOwnProperty.call(loc, 'cdnFallbackEnabled')) {\n        fallbacks.push({\n          location: loc.location,\n          cdnFallbackEnabled: loc.cdnFallbackEnabled,\n          group: item.name\n        });\n      }\n    });\n  });\n  return fallbacks;\n}\n\nfunction startRetestTimer() {\n  clearTimeout(retestTimeOut);\n  retestTimeOut = setTimeout(checkTestConditions, MAX_DELAY);\n}\n/**\n * @param {{ location: string }}\n * @returns {boolean}\n */\n\n\nfunction isFallbackProvider(provider) {\n  var location = provider.location || '';\n  return /^fallback\\//i.test(location);\n}\n/**\n * @param {Array<object}}\n * @returns {Array<object>}\n */\n\n\nfunction sortProviders(providers) {\n  var _providers$reduce = providers.reduce(function (soFar, curr) {\n    if (isFallbackProvider(curr)) {\n      soFar[1].push(curr);\n    } else {\n      soFar[0].push(curr);\n    }\n\n    return soFar;\n  }, [[], []]),\n      _providers$reduce2 = _slicedToArray(_providers$reduce, 2),\n      normalProviders = _providers$reduce2[0],\n      fallbackProviders = _providers$reduce2[1];\n\n  return [].concat(_toConsumableArray(normalProviders), _toConsumableArray(fallbackProviders));\n}\n/**\n * Send a stream module with results\n *\n * @param {Array} data - see onFinished\n * @param {string} mid - media ID\n */\n\n\nfunction sendResult(data, mid) {\n  if (!streamModules[mid] || !data) {\n    return;\n  }\n\n  if (forcedProvider) {\n    sendForcedResult(data, mid);\n  } else {\n    var providers = data;\n    var fallback = hasFallback(mid);\n    var location = userLocation && userLocation.location;\n    debugLogger.debug(\"use cdn fallback: \".concat(fallback));\n\n    if (location) {\n      saveUserLocation(location);\n    }\n\n    if (!fallback) {\n      providers = data.filter(function (item) {\n        return item.location === location;\n      });\n    }\n\n    providers = sortProviders(providers);\n    streamModules[mid].providers = (0,player_utils_object_clone__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(providers);\n    debugLogger.debug('Send results', {\n      mid: mid,\n      results: streamModules[mid].providers\n    });\n    api.onComplete(mid, {\n      stream: streamModules[mid]\n    });\n    api.onStat({\n      type: 'overlay',\n      data: {\n        finalResult: providers,\n        fallback: fallback,\n        location: location,\n        preferredLocation: preferredLocation,\n        forcedProvider: forcedProvider,\n        cdnConfig: cdnConfigs[mediaId]\n      }\n    });\n    startRetestTimer();\n  }\n}\n\nfunction sendForcedResult(data, mid) {\n  debugLogger.debug('Send forced providers', {\n    mid: mid,\n    results: forcedProvider\n  });\n  var provider = data.find(function (oneProvider) {\n    return oneProvider.url === forcedProvider;\n  });\n\n  if (!provider) {\n    return;\n  }\n\n  var providers = [{\n    url: provider.url,\n    location: provider.location\n  }];\n  streamModules[mid].providers = providers;\n  api.onComplete(mid, {\n    stream: streamModules[mid]\n  });\n  api.onStat({\n    type: 'overlay',\n    data: {\n      finalResult: finalResults[mid],\n      fallback: 'not available',\n      location: 'not available',\n      preferredLocation: preferredLocation,\n      forcedProvider: forcedProvider,\n      cdnConfig: cdnConfigs[mediaId]\n    }\n  });\n}\n/**\n * Saves users location to storage or cookie.\n *\n * @param {string} location\n */\n\n\nfunction saveUserLocation(location) {\n  if (!preferredLocation || !(0,player_utils_common_isArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(preferredLocation)) {\n    preferredLocation = [location];\n  } else {\n    var containsLocation = preferredLocation.indexOf(location);\n\n    if (containsLocation > -1) {\n      preferredLocation.splice(containsLocation, 1);\n    }\n\n    preferredLocation.unshift(location);\n    preferredLocation = preferredLocation.slice(0, 5);\n  }\n\n  shared_lib_storage__WEBPACK_IMPORTED_MODULE_5__[\"default\"].set(COOKIE_NAME, preferredLocation);\n}\n/**\n * If player switches to a non ecdn provider from ecdn provider, a new test is needed.\n * After tests it forces the player to switch back to an ecdn provider depends on test results.\n *\n * @param {{ from: string, to: string }} data\n */\n\n\nfunction onProviderChange(data) {\n  debugLogger.debug('Provider changed');\n  var switchToNonEcdn = data && Object.prototype.hasOwnProperty.call(data, 'to') && !isEcdnProvider(data.to);\n  var hasEcdn = currentProvider && isEcdnProvider(currentProvider) || !currentProvider && getEcdnConfig(mediaId);\n\n  if (switchToNonEcdn && hasEcdn) {\n    forceTests();\n  }\n\n  currentProvider = data.to;\n}\n/**\n * Handle ecdn providers' errors. Starts pings to validate ecdn providers' statuses.\n *\n * @param {object} data\n */\n\n\nfunction onProviderFailure(data) {\n  debugLogger.debug('Provider failure', data);\n  var hasEcdnUrl = data && Object.prototype.hasOwnProperty.call(data, 'url') && isEcdnProvider(data.url);\n\n  if (hasEcdnUrl || getEcdnConfig(mediaId)) {\n    forceTests();\n  }\n}\n/**\n * Return true if a provider/url is on an ecdn provider\n *\n * @param hosturl\n * @returns {boolean}\n */\n\n\nfunction isEcdnProvider(hosturl) {\n  var provider = decodeURIComponent(hosturl).toLowerCase();\n\n  for (var mid in cdnConfigs) {\n    if (Object.prototype.hasOwnProperty.call(cdnConfigs, mid)) {\n      var filtered = filterAndReduceToHosts(cdnConfigs[mid].data);\n      var isEcdn = filtered.some(function (item) {\n        var host = item.host.toLowerCase();\n        return provider.indexOf(host) > -1 || host.indexOf(provider) > -1;\n      });\n      return isEcdn;\n    }\n  }\n\n  return false;\n}\n/**\n * The default cdnConfig structure\n *      { data: [ { sites: [ { host: \"xyz\"}, ...] }, ...] }\n * reduced to\n *      [ { host: \"xyz\", ...}, ...]\n * @param arr\n * @returns {*}\n */\n\n\nfunction filterAndReduceToHosts(arr) {\n  var filtered = arr.filter(function (item) {\n    return item.useBestSite;\n  });\n  var reduced = filtered.reduce(function (value, item) {\n    var sites = item.data.reduce(function (val, itm) {\n      return val.concat(itm.sites);\n    }, []);\n    return value.concat(sites);\n  }, []);\n  return reduced;\n}\n\nfunction getEcdnConfig(mid) {\n  var ecdnConfigs;\n\n  if (cdnConfigs[mid]) {\n    ecdnConfigs = cdnConfigs[mid].data.filter(function (item) {\n      return item.useBestSite;\n    }).map(function (item) {\n      return (0,player_utils_object_clone__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(item);\n    });\n  }\n\n  return ecdnConfigs && ecdnConfigs.length ? ecdnConfigs : null;\n}\n/**\n * Return true if the module contains FLV or MP4 movie formats only\n *\n * @param {Object} streamModule\n * @returns {boolean}\n */\n\n\nfunction isMp4OrFlvMovie(streamModule) {\n  return streamModule && streamModule.streamFormats && (streamModule.streamFormats.mp4 || streamModule.streamFormats.flv) && !(streamModule.streamFormats.hasOwnProperty('flv/segmented') || streamModule.streamFormats.hasOwnProperty('mp4/segmented') || streamModule.streamFormats.hasOwnProperty('hls/mp4/rfc') || streamModule.streamFormats.hasOwnProperty('hls/improved'));\n}\n/**\n * It starts ecdn testing process\n */\n\n\nfunction checkTestConditions(mID) {\n  var mid = mID || mediaId;\n  var t = new Date().getTime() - endTestTimestamp;\n\n  if (t >= MAX_DELAY && streamModules[mid] && cdnConfigs[mid] && !testsInProgress) {\n    retestTimeOut = clearTimeout(retestTimeOut);\n\n    if (preferredLocation) {\n      options.locationPriority = preferredLocation;\n    }\n\n    if (mid.indexOf('recorded') === -1 || mid.indexOf('recorded') > -1 && !finalResults[mid]) {\n      startTestTimestamp = new Date().getTime();\n      testsInProgress = mid;\n      ustream_sdcdn__WEBPACK_IMPORTED_MODULE_6__[\"default\"].test(cdnConfigs[mid], options);\n    }\n  }\n}\n\nfunction forceTests() {\n  if (!testsInProgress) {\n    endTestTimestamp = 0;\n    debugLogger.debug('Force tests');\n    checkTestConditions();\n  }\n}\n/**\n * @param mid {String} - media id 'channel.12345'\n * @param data {Object} - stream module\n */\n\n\nfunction update(mid, data) {\n  if (mid !== mediaId) {\n    endTestTimestamp = 0;\n  }\n\n  var updateData = (0,player_utils_object_clone__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(data); // ha van stream module update, combined a stream module es live vagy elerheto recorded\n\n  if (updateData.stream && updateData.stream.version) {\n    debugLogger.debug('Stream module received');\n\n    if (firstStreamModule) {\n      var now = performance.now();\n      var state = cronus_store__WEBPACK_IMPORTED_MODULE_7__.wrappedStore.getState();\n      cronus_tracking__WEBPACK_IMPORTED_MODULE_11__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_11__[\"default\"].TYPES.streamModuleReceived, {\n        autoplay: !!(0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_10__.getInitialConfig)('autoplay'),\n        timeSpentFromInit: now - (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_8__.getInitialLoadingTime)(state),\n        timeSpent: now - (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_8__.getUmsConnectionConnectedTime)(state)\n      });\n      cronus_store__WEBPACK_IMPORTED_MODULE_7__.wrappedStore.dispatch((0,cronus_store_actions_tracking__WEBPACK_IMPORTED_MODULE_9__.setStreamModuleReceivedTime)(now));\n      cronus_reporting__WEBPACK_IMPORTED_MODULE_12__[\"default\"].aggregate(cronus_reporting__WEBPACK_IMPORTED_MODULE_12__[\"default\"].TYPES.firstModuleInfo, {\n        timeSpent: now - (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_8__.getUmsConnectionConnectedTime)(state)\n      });\n      firstStreamModule = false;\n    }\n\n    if (updateData.stream.contentAvailable) {\n      streamModules[mid] = (0,player_utils_object_clone__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(updateData.stream);\n      streamModules[mid].mid = mid;\n      delete updateData.stream;\n    } else {\n      reset();\n    }\n\n    sendResult(finalResults[mid], mid);\n  } // ha van cdnconfig module\n\n\n  if (updateData.cdnConfig) {\n    if (!sdcdnInited) {\n      ustream_sdcdn__WEBPACK_IMPORTED_MODULE_6__[\"default\"].on(ustream_sdcdn__WEBPACK_IMPORTED_MODULE_6__[\"default\"].events.PING_RESULT, onPingResult);\n      ustream_sdcdn__WEBPACK_IMPORTED_MODULE_6__[\"default\"].on(ustream_sdcdn__WEBPACK_IMPORTED_MODULE_6__[\"default\"].events.FINISHED, onFinished);\n      ustream_sdcdn__WEBPACK_IMPORTED_MODULE_6__[\"default\"].on(ustream_sdcdn__WEBPACK_IMPORTED_MODULE_6__[\"default\"].events.ERROR, onError);\n      ustream_sdcdn__WEBPACK_IMPORTED_MODULE_6__[\"default\"].on(ustream_sdcdn__WEBPACK_IMPORTED_MODULE_6__[\"default\"].events.LOG, onLog);\n      sdcdnInited = true;\n    }\n\n    mediaId = !mediaId ? mid : mediaId;\n    endTestTimestamp = 0;\n    cdnConfigs[mid] = (0,player_utils_object_clone__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(updateData.cdnConfig);\n    cdnConfigs[mid].mid = mid;\n    debugLogger.debug('CDN config received');\n    delete updateData.cdnConfig;\n  } // tobbi module update megy vissza a normal flow-ba.\n\n\n  if (!(0,player_utils_object_isEmpty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(updateData)) {\n    api.onComplete(mid, updateData);\n  } // MP4 és FLV movie-knal nem kell pingelni, direkt url elerest kapunk.\n\n\n  if (isMp4OrFlvMovie(streamModules[mid])) {\n    debugLogger.debug('Mp4 or Flv movie, cdn tests skipped!');\n    api.onComplete(mid, {\n      stream: streamModules[mid]\n    });\n  } else {\n    checkTestConditions(mid);\n  }\n}\n\nfunction forceProvider(hostUrl) {\n  debugLogger.debug('force provider ', hostUrl || 'off');\n  forcedProvider = forcedProvider === hostUrl ? null : hostUrl;\n  sendResult(finalResults[mediaId], mediaId);\n}\n/**\n * Clear all previous data\n */\n\n\nfunction reset() {\n  retestTimeOut = clearTimeout(retestTimeOut);\n\n  if (testsInProgress) {\n    ustream_sdcdn__WEBPACK_IMPORTED_MODULE_6__[\"default\"].test();\n  }\n\n  currentProvider = null;\n  testsInProgress = false;\n  endTestTimestamp = 0;\n  finalResults = {};\n  streamModules = {};\n  firstResultSent = false;\n  forcedProvider = null;\n  firstStreamModule = true;\n}\n\napi = {\n  update: update,\n  onStat: function onStat() {},\n  onComplete: function onComplete() {},\n  onProviderChange: onProviderChange,\n  onProviderFailure: onProviderFailure,\n  isEcdnProvider: isEcdnProvider,\n  getEcdnConfig: getEcdnConfig,\n  forceProvider: forceProvider\n};\ncronus_store__WEBPACK_IMPORTED_MODULE_7__.wrappedStore.subscribe('provider.forcedUrl', forceProvider);\n/* harmony default export */ __webpack_exports__[\"default\"] = (api);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../js/cronus/logic/sdcdnHandler.js\n");

/***/ }),

/***/ "../js/cronus/logic/seekPosition.js":
/*!******************************************!*\
  !*** ../js/cronus/logic/seekPosition.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getAbsoluteSeekPositionInMs\": function() { return /* binding */ getAbsoluteSeekPositionInMs; },\n/* harmony export */   \"getAbsoluteSeekPositionInSec\": function() { return /* binding */ getAbsoluteSeekPositionInSec; },\n/* harmony export */   \"getRelativeSeekPositionInMs\": function() { return /* binding */ getRelativeSeekPositionInMs; },\n/* harmony export */   \"isSeekAvailable\": function() { return /* binding */ isSeekAvailable; }\n/* harmony export */ });\n/* harmony import */ var player_utils_number_clamp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! player-utils/number/clamp */ \"../node_modules/player-utils/number/clamp.js\");\n/* harmony import */ var player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! player-utils/object/get */ \"../node_modules/player-utils/object/get.js\");\n/* harmony import */ var shared_store_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/store/selectors */ \"../js/shared/store/selectors/index.js\");\n/* harmony import */ var cronus_store__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/store */ \"../js/cronus/store/index.js\");\n/* harmony import */ var cronus_store_selectors_playback__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! cronus/store/selectors/playback */ \"../js/cronus/store/selectors/playback.js\");\n/* harmony import */ var ustream_env__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ustream-env */ \"../node_modules/ustream-env/dist/ustream-env.js\");\n/* harmony import */ var ustream_env__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(ustream_env__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\n/**\n * @param {number} absolutePositionInMs\n * @return {number}\n */\n\nfunction getRelativeSeekPositionInMs(absolutePositionInMs) {\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.getState();\n  var trimBoundaries = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_2__.getTrimBoundariesInSec)(state);\n\n  if (!trimBoundaries) {\n    return absolutePositionInMs;\n  }\n\n  var trimStartInMs = trimBoundaries.start * 1000;\n  var trimEndInMs = trimBoundaries.end * 1000;\n  var calculatedPosition = absolutePositionInMs - trimStartInMs;\n  return (0,player_utils_number_clamp__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(calculatedPosition, {\n    lower: 0,\n    upper: trimEndInMs - trimStartInMs\n  });\n}\n/**\n * @param {number} relativePositionInMs\n * @return {number}\n */\n\nfunction getAbsoluteSeekPositionInMs(relativePositionInMs) {\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.getState();\n  var trimBoundaries = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_2__.getTrimBoundariesInSec)(state);\n\n  if (!trimBoundaries) {\n    return relativePositionInMs;\n  }\n\n  var trimStartInMs = trimBoundaries.start * 1000;\n  var trimEndInMs = trimBoundaries.end * 1000;\n  var calculatedPosition = trimStartInMs + relativePositionInMs;\n  return (0,player_utils_number_clamp__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(calculatedPosition, {\n    lower: trimStartInMs,\n    upper: trimEndInMs\n  });\n}\n/**\n * @param {number} relativePositionInSec\n * @return {number}\n */\n\nfunction getAbsoluteSeekPositionInSec(relativePositionInSec) {\n  var relativePositionInMs = relativePositionInSec * 1000;\n  return getAbsoluteSeekPositionInMs(relativePositionInMs) / 1000;\n}\nfunction isSeekAvailable() {\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.getState();\n  var trimBoundaries = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_2__.getTrimBoundariesInSec)(state);\n  var startPosition = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(trimBoundaries, 'start', 0);\n  var videoTagDuration = (0,cronus_store_selectors_playback__WEBPACK_IMPORTED_MODULE_4__.getVideoTagDuration)(state);\n  var canPlay = (0,cronus_store_selectors_playback__WEBPACK_IMPORTED_MODULE_4__.getCanPlay)(state);\n  var canPlayOnSafari = (ustream_env__WEBPACK_IMPORTED_MODULE_5___default().safari) ? canPlay : true;\n  return canPlayOnSafari && !(!videoTagDuration || videoTagDuration === Infinity || videoTagDuration < startPosition);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL2xvZ2ljL3NlZWtQb3NpdGlvbi5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUNPLFNBQVNPLDJCQUFULENBQXFDQyxvQkFBckMsRUFBMkQ7QUFDaEUsTUFBTUMsS0FBSyxHQUFHTiwrREFBQSxFQUFkO0FBQ0EsTUFBTVEsY0FBYyxHQUFHVCw4RUFBc0IsQ0FBQ08sS0FBRCxDQUE3Qzs7QUFFQSxNQUFJLENBQUNFLGNBQUwsRUFBcUI7QUFDbkIsV0FBT0gsb0JBQVA7QUFDRDs7QUFFRCxNQUFNSSxhQUFhLEdBQUdELGNBQWMsQ0FBQ0UsS0FBZixHQUF1QixJQUE3QztBQUNBLE1BQU1DLFdBQVcsR0FBR0gsY0FBYyxDQUFDSSxHQUFmLEdBQXFCLElBQXpDO0FBQ0EsTUFBTUMsa0JBQWtCLEdBQUdSLG9CQUFvQixHQUFHSSxhQUFsRDtBQUVBLFNBQU9aLHFFQUFLLENBQUNnQixrQkFBRCxFQUFxQjtBQUFFQyxJQUFBQSxLQUFLLEVBQUUsQ0FBVDtBQUFZQyxJQUFBQSxLQUFLLEVBQUVKLFdBQVcsR0FBR0Y7QUFBakMsR0FBckIsQ0FBWjtBQUNEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBQ08sU0FBU08sMkJBQVQsQ0FBcUNDLG9CQUFyQyxFQUEyRDtBQUNoRSxNQUFNWCxLQUFLLEdBQUdOLCtEQUFBLEVBQWQ7QUFDQSxNQUFNUSxjQUFjLEdBQUdULDhFQUFzQixDQUFDTyxLQUFELENBQTdDOztBQUNBLE1BQUksQ0FBQ0UsY0FBTCxFQUFxQjtBQUNuQixXQUFPUyxvQkFBUDtBQUNEOztBQUVELE1BQU1SLGFBQWEsR0FBR0QsY0FBYyxDQUFDRSxLQUFmLEdBQXVCLElBQTdDO0FBQ0EsTUFBTUMsV0FBVyxHQUFHSCxjQUFjLENBQUNJLEdBQWYsR0FBcUIsSUFBekM7QUFDQSxNQUFNQyxrQkFBa0IsR0FBR0osYUFBYSxHQUFHUSxvQkFBM0M7QUFDQSxTQUFPcEIscUVBQUssQ0FBQ2dCLGtCQUFELEVBQXFCO0FBQUVDLElBQUFBLEtBQUssRUFBRUwsYUFBVDtBQUF3Qk0sSUFBQUEsS0FBSyxFQUFFSjtBQUEvQixHQUFyQixDQUFaO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFDTyxTQUFTTyw0QkFBVCxDQUFzQ0MscUJBQXRDLEVBQTZEO0FBQ2xFLE1BQU1GLG9CQUFvQixHQUFHRSxxQkFBcUIsR0FBRyxJQUFyRDtBQUNBLFNBQU9ILDJCQUEyQixDQUFDQyxvQkFBRCxDQUEzQixHQUFvRCxJQUEzRDtBQUNEO0FBRU0sU0FBU0csZUFBVCxHQUEyQjtBQUNoQyxNQUFNZCxLQUFLLEdBQUdOLCtEQUFBLEVBQWQ7QUFDQSxNQUFNUSxjQUFjLEdBQUdULDhFQUFzQixDQUFDTyxLQUFELENBQTdDO0FBQ0EsTUFBTWUsYUFBYSxHQUFHdkIsbUVBQUcsQ0FBQ1UsY0FBRCxFQUFpQixPQUFqQixFQUEwQixDQUExQixDQUF6QjtBQUNBLE1BQU1jLGdCQUFnQixHQUFHckIsb0ZBQW1CLENBQUNLLEtBQUQsQ0FBNUM7QUFDQSxNQUFNaUIsT0FBTyxHQUFHckIsMkVBQVUsQ0FBQ0ksS0FBRCxDQUExQjtBQUNBLE1BQU1rQixlQUFlLEdBQUdyQiwyREFBQSxHQUFvQm9CLE9BQXBCLEdBQThCLElBQXREO0FBRUEsU0FDRUMsZUFBZSxJQUNmLEVBQUUsQ0FBQ0YsZ0JBQUQsSUFBcUJBLGdCQUFnQixLQUFLSSxRQUExQyxJQUFzREosZ0JBQWdCLEdBQUdELGFBQTNFLENBRkY7QUFJRCIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vanMvY3JvbnVzL2xvZ2ljL3NlZWtQb3NpdGlvbi5qcz9hYmJjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjbGFtcCBmcm9tICdwbGF5ZXItdXRpbHMvbnVtYmVyL2NsYW1wJztcbmltcG9ydCBnZXQgZnJvbSAncGxheWVyLXV0aWxzL29iamVjdC9nZXQnO1xuaW1wb3J0IHsgZ2V0VHJpbUJvdW5kYXJpZXNJblNlYyB9IGZyb20gJ3NoYXJlZC9zdG9yZS9zZWxlY3RvcnMnO1xuaW1wb3J0IHsgd3JhcHBlZFN0b3JlIH0gZnJvbSAnY3JvbnVzL3N0b3JlJztcbmltcG9ydCB7IGdldFZpZGVvVGFnRHVyYXRpb24sIGdldENhblBsYXkgfSBmcm9tICdjcm9udXMvc3RvcmUvc2VsZWN0b3JzL3BsYXliYWNrJztcbmltcG9ydCB1c3RyZWFtRW52IGZyb20gJ3VzdHJlYW0tZW52JztcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gYWJzb2x1dGVQb3NpdGlvbkluTXNcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFJlbGF0aXZlU2Vla1Bvc2l0aW9uSW5NcyhhYnNvbHV0ZVBvc2l0aW9uSW5Ncykge1xuICBjb25zdCBzdGF0ZSA9IHdyYXBwZWRTdG9yZS5nZXRTdGF0ZSgpO1xuICBjb25zdCB0cmltQm91bmRhcmllcyA9IGdldFRyaW1Cb3VuZGFyaWVzSW5TZWMoc3RhdGUpO1xuXG4gIGlmICghdHJpbUJvdW5kYXJpZXMpIHtcbiAgICByZXR1cm4gYWJzb2x1dGVQb3NpdGlvbkluTXM7XG4gIH1cblxuICBjb25zdCB0cmltU3RhcnRJbk1zID0gdHJpbUJvdW5kYXJpZXMuc3RhcnQgKiAxMDAwO1xuICBjb25zdCB0cmltRW5kSW5NcyA9IHRyaW1Cb3VuZGFyaWVzLmVuZCAqIDEwMDA7XG4gIGNvbnN0IGNhbGN1bGF0ZWRQb3NpdGlvbiA9IGFic29sdXRlUG9zaXRpb25Jbk1zIC0gdHJpbVN0YXJ0SW5NcztcblxuICByZXR1cm4gY2xhbXAoY2FsY3VsYXRlZFBvc2l0aW9uLCB7IGxvd2VyOiAwLCB1cHBlcjogdHJpbUVuZEluTXMgLSB0cmltU3RhcnRJbk1zIH0pO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSByZWxhdGl2ZVBvc2l0aW9uSW5Nc1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWJzb2x1dGVTZWVrUG9zaXRpb25Jbk1zKHJlbGF0aXZlUG9zaXRpb25Jbk1zKSB7XG4gIGNvbnN0IHN0YXRlID0gd3JhcHBlZFN0b3JlLmdldFN0YXRlKCk7XG4gIGNvbnN0IHRyaW1Cb3VuZGFyaWVzID0gZ2V0VHJpbUJvdW5kYXJpZXNJblNlYyhzdGF0ZSk7XG4gIGlmICghdHJpbUJvdW5kYXJpZXMpIHtcbiAgICByZXR1cm4gcmVsYXRpdmVQb3NpdGlvbkluTXM7XG4gIH1cblxuICBjb25zdCB0cmltU3RhcnRJbk1zID0gdHJpbUJvdW5kYXJpZXMuc3RhcnQgKiAxMDAwO1xuICBjb25zdCB0cmltRW5kSW5NcyA9IHRyaW1Cb3VuZGFyaWVzLmVuZCAqIDEwMDA7XG4gIGNvbnN0IGNhbGN1bGF0ZWRQb3NpdGlvbiA9IHRyaW1TdGFydEluTXMgKyByZWxhdGl2ZVBvc2l0aW9uSW5NcztcbiAgcmV0dXJuIGNsYW1wKGNhbGN1bGF0ZWRQb3NpdGlvbiwgeyBsb3dlcjogdHJpbVN0YXJ0SW5NcywgdXBwZXI6IHRyaW1FbmRJbk1zIH0pO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSByZWxhdGl2ZVBvc2l0aW9uSW5TZWNcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFic29sdXRlU2Vla1Bvc2l0aW9uSW5TZWMocmVsYXRpdmVQb3NpdGlvbkluU2VjKSB7XG4gIGNvbnN0IHJlbGF0aXZlUG9zaXRpb25Jbk1zID0gcmVsYXRpdmVQb3NpdGlvbkluU2VjICogMTAwMDtcbiAgcmV0dXJuIGdldEFic29sdXRlU2Vla1Bvc2l0aW9uSW5NcyhyZWxhdGl2ZVBvc2l0aW9uSW5NcykgLyAxMDAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTZWVrQXZhaWxhYmxlKCkge1xuICBjb25zdCBzdGF0ZSA9IHdyYXBwZWRTdG9yZS5nZXRTdGF0ZSgpO1xuICBjb25zdCB0cmltQm91bmRhcmllcyA9IGdldFRyaW1Cb3VuZGFyaWVzSW5TZWMoc3RhdGUpO1xuICBjb25zdCBzdGFydFBvc2l0aW9uID0gZ2V0KHRyaW1Cb3VuZGFyaWVzLCAnc3RhcnQnLCAwKTtcbiAgY29uc3QgdmlkZW9UYWdEdXJhdGlvbiA9IGdldFZpZGVvVGFnRHVyYXRpb24oc3RhdGUpO1xuICBjb25zdCBjYW5QbGF5ID0gZ2V0Q2FuUGxheShzdGF0ZSk7XG4gIGNvbnN0IGNhblBsYXlPblNhZmFyaSA9IHVzdHJlYW1FbnYuc2FmYXJpID8gY2FuUGxheSA6IHRydWU7XG5cbiAgcmV0dXJuIChcbiAgICBjYW5QbGF5T25TYWZhcmkgJiZcbiAgICAhKCF2aWRlb1RhZ0R1cmF0aW9uIHx8IHZpZGVvVGFnRHVyYXRpb24gPT09IEluZmluaXR5IHx8IHZpZGVvVGFnRHVyYXRpb24gPCBzdGFydFBvc2l0aW9uKVxuICApO1xufVxuIl0sIm5hbWVzIjpbImNsYW1wIiwiZ2V0IiwiZ2V0VHJpbUJvdW5kYXJpZXNJblNlYyIsIndyYXBwZWRTdG9yZSIsImdldFZpZGVvVGFnRHVyYXRpb24iLCJnZXRDYW5QbGF5IiwidXN0cmVhbUVudiIsImdldFJlbGF0aXZlU2Vla1Bvc2l0aW9uSW5NcyIsImFic29sdXRlUG9zaXRpb25Jbk1zIiwic3RhdGUiLCJnZXRTdGF0ZSIsInRyaW1Cb3VuZGFyaWVzIiwidHJpbVN0YXJ0SW5NcyIsInN0YXJ0IiwidHJpbUVuZEluTXMiLCJlbmQiLCJjYWxjdWxhdGVkUG9zaXRpb24iLCJsb3dlciIsInVwcGVyIiwiZ2V0QWJzb2x1dGVTZWVrUG9zaXRpb25Jbk1zIiwicmVsYXRpdmVQb3NpdGlvbkluTXMiLCJnZXRBYnNvbHV0ZVNlZWtQb3NpdGlvbkluU2VjIiwicmVsYXRpdmVQb3NpdGlvbkluU2VjIiwiaXNTZWVrQXZhaWxhYmxlIiwic3RhcnRQb3NpdGlvbiIsInZpZGVvVGFnRHVyYXRpb24iLCJjYW5QbGF5IiwiY2FuUGxheU9uU2FmYXJpIiwic2FmYXJpIiwiSW5maW5pdHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/logic/seekPosition.js\n");

/***/ }),

/***/ "../js/cronus/logic/slideDeck/slideDeckHandler.js":
/*!********************************************************!*\
  !*** ../js/cronus/logic/slideDeck/slideDeckHandler.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! player-utils/object/get */ \"../node_modules/player-utils/object/get.js\");\n/* harmony import */ var shared_lib_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/lib/logger */ \"../js/shared/lib/logger/index.js\");\n/* harmony import */ var cronus_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/store */ \"../js/cronus/store/index.js\");\n/* harmony import */ var shared_store_actions_slideDeck__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! shared/store/actions/slideDeck */ \"../js/shared/store/actions/slideDeck.js\");\n/* harmony import */ var ustream_env__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ustream-env */ \"../node_modules/ustream-env/dist/ustream-env.js\");\n/* harmony import */ var ustream_env__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(ustream_env__WEBPACK_IMPORTED_MODULE_4__);\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n\n\n\n\n\nvar debugLogger = (0,shared_lib_logger__WEBPACK_IMPORTED_MODULE_1__.createLoggerForModule)('cronus/logic/slideDeck/slideDeckHandler');\nvar isBrowserSupported = !(ustream_env__WEBPACK_IMPORTED_MODULE_4___default().ie) || (ustream_env__WEBPACK_IMPORTED_MODULE_4___default().ie[0]) && (ustream_env__WEBPACK_IMPORTED_MODULE_4___default().ie[0]) > 9;\n/**\n * @typedef {{ start: number, end: number, url: string, secret: string|undefined }} Slide\n */\n\n/**\n * @param {Array.<Slide=>} slides\n */\n\nvar slidesUpdated = function () {\n  var prevURLs = [];\n  return function () {\n    var slides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var currentURLs = slides.map(function (slide) {\n      return (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(slide, 'url', '');\n    });\n    var deletedURLs = prevURLs.filter(function (url) {\n      return !currentURLs.includes(url);\n    });\n    deletedURLs.forEach(URL.revokeObjectURL);\n    prevURLs = currentURLs;\n  };\n}();\n/**\n * @param {ArrayBuffer|ArrayBufferView} buffer\n * @return {string}\n */\n\n\nfunction imageBufferToBlobURL(buffer) {\n  var blob = new Blob([buffer], {\n    type: 'image/jpeg'\n  });\n  return URL.createObjectURL(blob);\n}\n/**\n * @param {Slide} slide\n * @return {Promise}\n */\n\n\nvar decode = function () {\n  if (!isBrowserSupported) {\n    return function () {\n      var err = new Error('Browser not supported');\n      return Promise.reject(err);\n    };\n  }\n\n  var requests = null;\n  var worker = null;\n\n  function initWorker() {\n    return _initWorker.apply(this, arguments);\n  }\n\n  function _initWorker() {\n    _initWorker = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var _yield$import, SlideDecoderWorker;\n\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              requests = new Map();\n              _context2.next = 3;\n              return Promise.all(/*! import() | decoder-c */[__webpack_require__.e(\"atlas-hlsjs\"), __webpack_require__.e(\"decoder-c\")]).then(__webpack_require__.bind(__webpack_require__, /*! cronus/logic/slideDeck/slideDecoder.worker */ \"../js/cronus/logic/slideDeck/slideDecoder.worker.js\"));\n\n            case 3:\n              _yield$import = _context2.sent;\n              SlideDecoderWorker = _yield$import.default;\n              worker = new SlideDecoderWorker();\n              worker.addEventListener('message', function (_ref2) {\n                var data = _ref2.data;\n                var url = data.url,\n                    error = data.error,\n                    buffer = data.buffer;\n                var cb = requests.get(url);\n\n                if (!cb) {\n                  return;\n                }\n\n                requests.delete(url);\n\n                if (error) {\n                  cb(new Error(error), null);\n                  return;\n                }\n\n                cb(null, buffer);\n              });\n              worker.addEventListener('error', function (e) {\n                e.preventDefault();\n                debugLogger.error(e.message);\n              });\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _initWorker.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(slide) {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(worker === null)) {\n                _context.next = 3;\n                break;\n              }\n\n              _context.next = 3;\n              return initWorker();\n\n            case 3:\n              return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n                function done(err, buffer) {\n                  if (err) {\n                    reject(err);\n                    return;\n                  }\n\n                  var decodedSlide = _objectSpread(_objectSpread({}, slide), {}, {\n                    url: imageBufferToBlobURL(buffer)\n                  });\n\n                  resolve(decodedSlide);\n                }\n\n                var url = slide.url,\n                    secret = slide.secret;\n                requests.set(url, done);\n                worker.postMessage({\n                  url: url,\n                  secret: secret\n                });\n              }));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}();\n/**\n * @param {Object} slide\n * @return {Slide}\n */\n\n\nfunction ensureBoundaries(slide) {\n  return _objectSpread({\n    start: -Infinity,\n    end: Infinity\n  }, slide);\n}\n/**\n * @param {Array.<Object>} module\n * @return {Array.<Slide>}\n */\n\n\nfunction convertModuleToSlides(module) {\n  if (Array.isArray(module)) {\n    return module.map(ensureBoundaries);\n  }\n\n  if (module.show) {\n    var _module$show = module.show,\n        url = _module$show.url,\n        secret = _module$show.secret;\n    var slide = ensureBoundaries({\n      url: url,\n      secret: secret\n    });\n    return [slide];\n  }\n\n  return [];\n}\n/**\n * @param {Array.<Slide>} slide\n */\n\n\nfunction processSlides(slides) {\n  /**\n   * @param {Slide} slide\n   * @return {boolean}\n   */\n  function haveToDedcode(slide) {\n    return !!(0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(slide, 'url');\n  }\n\n  if (slides.length === 0) {\n    cronus_store__WEBPACK_IMPORTED_MODULE_2__.wrappedStore.dispatch((0,shared_store_actions_slideDeck__WEBPACK_IMPORTED_MODULE_3__.setSlides)([]));\n    return;\n  }\n\n  var decodedSlides = [];\n  slides.forEach(function (slide) {\n    Promise.resolve().then(function () {\n      if (haveToDedcode(slide)) {\n        return decode(slide);\n      }\n\n      return slide;\n    }).then(function (decodedSlide) {\n      decodedSlides.push(decodedSlide);\n      cronus_store__WEBPACK_IMPORTED_MODULE_2__.wrappedStore.dispatch((0,shared_store_actions_slideDeck__WEBPACK_IMPORTED_MODULE_3__.setSlides)(decodedSlides));\n    }).catch(function (e) {\n      debugLogger.error(\"Decoding error: \\\"\".concat(e.message, \"\\\"\"));\n    });\n  });\n}\n/**\n * @param {Array.<Slide>|false} module\n */\n\n\nfunction slidesModuleUpdate(module) {\n  if (!isBrowserSupported) {\n    return;\n  }\n\n  var isModuleValid = !Array.isArray(module) || module.length > 0;\n\n  if (!isModuleValid) {\n    return;\n  }\n\n  if (!module) {\n    cronus_store__WEBPACK_IMPORTED_MODULE_2__.wrappedStore.dispatch((0,shared_store_actions_slideDeck__WEBPACK_IMPORTED_MODULE_3__.disable)());\n    return;\n  }\n\n  var slides = convertModuleToSlides(module);\n  processSlides(slides);\n}\n/**\n * @param {number} positionInSec\n */\n\n\nfunction timeUpdate(positionInSec) {\n  var positionInMs = positionInSec * 1000;\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_2__.wrappedStore.getState().slideDeck;\n  var currentSlide = state.slides.find(function (_ref3) {\n    var start = _ref3.start,\n        end = _ref3.end;\n    return start <= positionInMs && positionInMs <= end;\n  });\n\n  if ((0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(currentSlide, 'url') !== (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(state.currentSlide, 'url')) {\n    debugLogger.info('slide update', currentSlide);\n    cronus_store__WEBPACK_IMPORTED_MODULE_2__.wrappedStore.dispatch((0,shared_store_actions_slideDeck__WEBPACK_IMPORTED_MODULE_3__.setCurrentSlide)(currentSlide));\n  }\n}\n\nfunction reset() {\n  cronus_store__WEBPACK_IMPORTED_MODULE_2__.wrappedStore.dispatch((0,shared_store_actions_slideDeck__WEBPACK_IMPORTED_MODULE_3__.disable)());\n}\n\nfunction init() {\n  cronus_store__WEBPACK_IMPORTED_MODULE_2__.wrappedStore.subscribe('slideDeck.slides', slidesUpdated);\n  cronus_store__WEBPACK_IMPORTED_MODULE_2__.wrappedStore.subscribe('slideDeck.module', slidesModuleUpdate);\n  cronus_store__WEBPACK_IMPORTED_MODULE_2__.wrappedStore.subscribe('playback.currentTime', timeUpdate);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  slidesModuleUpdate: slidesModuleUpdate,\n  timeUpdate: timeUpdate,\n  reset: reset,\n  init: init\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL2xvZ2ljL3NsaWRlRGVjay9zbGlkZURlY2tIYW5kbGVyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLElBQU1PLFdBQVcsR0FBR04sd0VBQXFCLENBQUMseUNBQUQsQ0FBekM7QUFDQSxJQUFNTyxrQkFBa0IsR0FBRyxDQUFDRix1REFBRCxJQUFZQSwwREFBQSxJQUFhQSwwREFBQSxHQUFZLENBQWhFO0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFDQSxJQUFNSSxhQUFhLEdBQUksWUFBTTtBQUMzQixNQUFJQyxRQUFRLEdBQUcsRUFBZjtBQUVBLFNBQU8sWUFBaUI7QUFBQSxRQUFoQkMsTUFBZ0IsdUVBQVAsRUFBTztBQUN0QixRQUFNQyxXQUFXLEdBQUdELE1BQU0sQ0FBQ0UsR0FBUCxDQUFXLFVBQUNDLEtBQUQ7QUFBQSxhQUFXZixtRUFBRyxDQUFDZSxLQUFELEVBQVEsS0FBUixFQUFlLEVBQWYsQ0FBZDtBQUFBLEtBQVgsQ0FBcEI7QUFDQSxRQUFNQyxXQUFXLEdBQUdMLFFBQVEsQ0FBQ00sTUFBVCxDQUFnQixVQUFDQyxHQUFEO0FBQUEsYUFBUyxDQUFDTCxXQUFXLENBQUNNLFFBQVosQ0FBcUJELEdBQXJCLENBQVY7QUFBQSxLQUFoQixDQUFwQjtBQUNBRixJQUFBQSxXQUFXLENBQUNJLE9BQVosQ0FBb0JDLEdBQUcsQ0FBQ0MsZUFBeEI7QUFFQVgsSUFBQUEsUUFBUSxHQUFHRSxXQUFYO0FBQ0QsR0FORDtBQU9ELENBVnFCLEVBQXRCO0FBWUE7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFNBQVNVLG9CQUFULENBQThCQyxNQUE5QixFQUFzQztBQUNwQyxNQUFNQyxJQUFJLEdBQUcsSUFBSUMsSUFBSixDQUFTLENBQUNGLE1BQUQsQ0FBVCxFQUFtQjtBQUFFRyxJQUFBQSxJQUFJLEVBQUU7QUFBUixHQUFuQixDQUFiO0FBQ0EsU0FBT04sR0FBRyxD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LEVBQStDdUUsVUFBL0M7QUFDRDs7QUFFRCwrREFBZTtBQUNiRixFQUFBQSxrQkFBa0IsRUFBbEJBLGtCQURhO0FBRWJFLEVBQUFBLFVBQVUsRUFBVkEsVUFGYTtBQUdiUyxFQUFBQSxLQUFLLEVBQUxBLEtBSGE7QUFJYkMsRUFBQUEsSUFBSSxFQUFKQTtBQUphLENBQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy9sb2dpYy9zbGlkZURlY2svc2xpZGVEZWNrSGFuZGxlci5qcz9mZTZiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXQgZnJvbSAncGxheWVyLXV0aWxzL29iamVjdC9nZXQnO1xuaW1wb3J0IHsgY3JlYXRlTG9nZ2VyRm9yTW9kdWxlIH0gZnJvbSAnc2hhcmVkL2xpYi9sb2dnZXInO1xuaW1wb3J0IHsgd3JhcHBlZFN0b3JlIH0gZnJvbSAnY3JvbnVzL3N0b3JlJztcbmltcG9ydCB7IHNldFNsaWRlcywgc2V0Q3VycmVudFNsaWRlLCBkaXNhYmxlIH0gZnJvbSAnc2hhcmVkL3N0b3JlL2FjdGlvbnMvc2xpZGVEZWNrJztcbmltcG9ydCBlbnYgZnJvbSAndXN0cmVhbS1lbnYnO1xuXG5jb25zdCBkZWJ1Z0xvZ2dlciA9IGNyZWF0ZUxvZ2dlckZvck1vZHVsZSgnY3JvbnVzL2xvZ2ljL3NsaWRlRGVjay9zbGlkZURlY2tIYW5kbGVyJyk7XG5jb25zdCBpc0Jyb3dzZXJTdXBwb3J0ZWQgPSAhZW52LmllIHx8IChlbnYuaWVbMF0gJiYgZW52LmllWzBdID4gOSk7XG5cbi8qKlxuICogQHR5cGVkZWYge3sgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIsIHVybDogc3RyaW5nLCBzZWNyZXQ6IHN0cmluZ3x1bmRlZmluZWQgfX0gU2xpZGVcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXkuPFNsaWRlPT59IHNsaWRlc1xuICovXG5jb25zdCBzbGlkZXNVcGRhdGVkID0gKCgpID0+IHtcbiAgbGV0IHByZXZVUkxzID0gW107XG5cbiAgcmV0dXJuIChzbGlkZXMgPSBbXSkgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnRVUkxzID0gc2xpZGVzLm1hcCgoc2xpZGUpID0+IGdldChzbGlkZSwgJ3VybCcsICcnKSk7XG4gICAgY29uc3QgZGVsZXRlZFVSTHMgPSBwcmV2VVJMcy5maWx0ZXIoKHVybCkgPT4gIWN1cnJlbnRVUkxzLmluY2x1ZGVzKHVybCkpO1xuICAgIGRlbGV0ZWRVUkxzLmZvckVhY2goVVJMLnJldm9rZU9iamVjdFVSTCk7XG5cbiAgICBwcmV2VVJMcyA9IGN1cnJlbnRVUkxzO1xuICB9O1xufSkoKTtcblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfEFycmF5QnVmZmVyVmlld30gYnVmZmVyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGltYWdlQnVmZmVyVG9CbG9iVVJMKGJ1ZmZlcikge1xuICBjb25zdCBibG9iID0gbmV3IEJsb2IoW2J1ZmZlcl0sIHsgdHlwZTogJ2ltYWdlL2pwZWcnIH0pO1xuICByZXR1cm4gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1NsaWRlfSBzbGlkZVxuICogQHJldHVybiB7UHJvbWlzZX1cbiAqL1xuY29uc3QgZGVjb2RlID0gKCgpID0+IHtcbiAgaWYgKCFpc0Jyb3dzZXJTdXBwb3J0ZWQpIHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKCdCcm93c2VyIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgIH07XG4gIH1cblxuICBsZXQgcmVxdWVzdHMgPSBudWxsO1xuICBsZXQgd29ya2VyID0gbnVsbDtcbiAgYXN5bmMgZnVuY3Rpb24gaW5pdFdvcmtlcigpIHtcbiAgICByZXF1ZXN0cyA9IG5ldyBNYXAoKTtcblxuICAgIGNvbnN0IHsgZGVmYXVsdDogU2xpZGVEZWNvZGVyV29ya2VyIH0gPSBhd2FpdCBpbXBvcnQoXG4gICAgICAvKiB3ZWJwYWNrQ2h1bmtOYW1lOiBcImRlY29kZXItY1wiICovICdjcm9udXMvbG9naWMvc2xpZGVEZWNrL3NsaWRlRGVjb2Rlci53b3JrZXInXG4gICAgKTtcbiAgICB3b3JrZXIgPSBuZXcgU2xpZGVEZWNvZGVyV29ya2VyKCk7XG5cbiAgICB3b3JrZXIuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsICh7IGRhdGEgfSkgPT4ge1xuICAgICAgY29uc3QgeyB1cmwsIGVycm9yLCBidWZmZXIgfSA9IGRhdGE7XG5cbiAgICAgIGNvbnN0IGNiID0gcmVxdWVzdHMuZ2V0KHVybCk7XG4gICAgICBpZiAoIWNiKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVxdWVzdHMuZGVsZXRlKHVybCk7XG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjYihuZXcgRXJyb3IoZXJyb3IpLCBudWxsKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjYihudWxsLCBidWZmZXIpO1xuICAgIH0pO1xuXG4gICAgd29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKGUpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGRlYnVnTG9nZ2VyLmVycm9yKGUubWVzc2FnZSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gYXN5bmMgKHNsaWRlKSA9PiB7XG4gICAgaWYgKHdvcmtlciA9PT0gbnVsbCkge1xuICAgICAgYXdhaXQgaW5pdFdvcmtlcigpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBmdW5jdGlvbiBkb25lKGVyciwgYnVmZmVyKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkZWNvZGVkU2xpZGUgPSB7IC4uLnNsaWRlLCB1cmw6IGltYWdlQnVmZmVyVG9CbG9iVVJMKGJ1ZmZlcikgfTtcbiAgICAgICAgcmVzb2x2ZShkZWNvZGVkU2xpZGUpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7IHVybCwgc2VjcmV0IH0gPSBzbGlkZTtcbiAgICAgIHJlcXVlc3RzLnNldCh1cmwsIGRvbmUpO1xuICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKHsgdXJsLCBzZWNyZXQgfSk7XG4gICAgfSk7XG4gIH07XG59KSgpO1xuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBzbGlkZVxuICogQHJldHVybiB7U2xpZGV9XG4gKi9cbmZ1bmN0aW9uIGVuc3VyZUJvdW5kYXJpZXMoc2xpZGUpIHtcbiAgcmV0dXJuIHtcbiAgICBzdGFydDogLUluZmluaXR5LFxuICAgIGVuZDogSW5maW5pdHksXG4gICAgLi4uc2xpZGUsXG4gIH07XG59XG5cbi8qKlxuICogQHBhcmFtIHtBcnJheS48T2JqZWN0Pn0gbW9kdWxlXG4gKiBAcmV0dXJuIHtBcnJheS48U2xpZGU+fVxuICovXG5mdW5jdGlvbiBjb252ZXJ0TW9kdWxlVG9TbGlkZXMobW9kdWxlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KG1vZHVsZSkpIHtcbiAgICByZXR1cm4gbW9kdWxlLm1hcChlbnN1cmVCb3VuZGFyaWVzKTtcbiAgfVxuXG4gIGlmIChtb2R1bGUuc2hvdykge1xuICAgIGNvbnN0IHsgdXJsLCBzZWNyZXQgfSA9IG1vZHVsZS5zaG93O1xuICAgIGNvbnN0IHNsaWRlID0gZW5zdXJlQm91bmRhcmllcyh7IHVybCwgc2VjcmV0IH0pO1xuICAgIHJldHVybiBbc2xpZGVdO1xuICB9XG5cbiAgcmV0dXJuIFtdO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXkuPFNsaWRlPn0gc2xpZGVcbiAqL1xuZnVuY3Rpb24gcHJvY2Vzc1NsaWRlcyhzbGlkZXMpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7U2xpZGV9IHNsaWRlXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBmdW5jdGlvbiBoYXZlVG9EZWRjb2RlKHNsaWRlKSB7XG4gICAgcmV0dXJuICEhZ2V0KHNsaWRlLCAndXJsJyk7XG4gIH1cblxuICBpZiAoc2xpZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgIHdyYXBwZWRTdG9yZS5kaXNwYXRjaChzZXRTbGlkZXMoW10pKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBkZWNvZGVkU2xpZGVzID0gW107XG4gIHNsaWRlcy5mb3JFYWNoKChzbGlkZSkgPT4ge1xuICAgIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGlmIChoYXZlVG9EZWRjb2RlKHNsaWRlKSkge1xuICAgICAgICAgIHJldHVybiBkZWNvZGUoc2xpZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNsaWRlO1xuICAgICAgfSlcbiAgICAgIC50aGVuKChkZWNvZGVkU2xpZGUpID0+IHtcbiAgICAgICAgZGVjb2RlZFNsaWRlcy5wdXNoKGRlY29kZWRTbGlkZSk7XG4gICAgICAgIHdyYXBwZWRTdG9yZS5kaXNwYXRjaChzZXRTbGlkZXMoZGVjb2RlZFNsaWRlcykpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZSkgPT4ge1xuICAgICAgICBkZWJ1Z0xvZ2dlci5lcnJvcihgRGVjb2RpbmcgZXJyb3I6IFwiJHtlLm1lc3NhZ2V9XCJgKTtcbiAgICAgIH0pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5LjxTbGlkZT58ZmFsc2V9IG1vZHVsZVxuICovXG5mdW5jdGlvbiBzbGlkZXNNb2R1bGVVcGRhdGUobW9kdWxlKSB7XG4gIGlmICghaXNCcm93c2VyU3VwcG9ydGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgaXNNb2R1bGVWYWxpZCA9ICFBcnJheS5pc0FycmF5KG1vZHVsZSkgfHwgbW9kdWxlLmxlbmd0aCA+IDA7XG4gIGlmICghaXNNb2R1bGVWYWxpZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghbW9kdWxlKSB7XG4gICAgd3JhcHBlZFN0b3JlLmRpc3BhdGNoKGRpc2FibGUoKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qgc2xpZGVzID0gY29udmVydE1vZHVsZVRvU2xpZGVzKG1vZHVsZSk7XG4gIHByb2Nlc3NTbGlkZXMoc2xpZGVzKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gcG9zaXRpb25JblNlY1xuICovXG5mdW5jdGlvbiB0aW1lVXBkYXRlKHBvc2l0aW9uSW5TZWMpIHtcbiAgY29uc3QgcG9zaXRpb25Jbk1zID0gcG9zaXRpb25JblNlYyAqIDEwMDA7XG4gIGNvbnN0IHN0YXRlID0gd3JhcHBlZFN0b3JlLmdldFN0YXRlKCkuc2xpZGVEZWNrO1xuICBjb25zdCBjdXJyZW50U2xpZGUgPSBzdGF0ZS5zbGlkZXMuZmluZChcbiAgICAoeyBzdGFydCwgZW5kIH0pID0+IHN0YXJ0IDw9IHBvc2l0aW9uSW5NcyAmJiBwb3NpdGlvbkluTXMgPD0gZW5kLFxuICApO1xuXG4gIGlmIChnZXQoY3VycmVudFNsaWRlLCAndXJsJykgIT09IGdldChzdGF0ZS5jdXJyZW50U2xpZGUsICd1cmwnKSkge1xuICAgIGRlYnVnTG9nZ2VyLmluZm8oJ3NsaWRlIHVwZGF0ZScsIGN1cnJlbnRTbGlkZSk7XG4gICAgd3JhcHBlZFN0b3JlLmRpc3BhdGNoKHNldEN1cnJlbnRTbGlkZShjdXJyZW50U2xpZGUpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNldCgpIHtcbiAgd3JhcHBlZFN0b3JlLmRpc3BhdGNoKGRpc2FibGUoKSk7XG59XG5cbmZ1bmN0aW9uIGluaXQoKSB7XG4gIHdyYXBwZWRTdG9yZS5zdWJzY3JpYmUoJ3NsaWRlRGVjay5zbGlkZXMnLCBzbGlkZXNVcGRhdGVkKTtcbiAgd3JhcHBlZFN0b3JlLnN1YnNjcmliZSgnc2xpZGVEZWNrLm1vZHVsZScsIHNsaWRlc01vZHVsZVVwZGF0ZSk7XG4gIHdyYXBwZWRTdG9yZS5zdWJzY3JpYmUoJ3BsYXliYWNrLmN1cnJlbnRUaW1lJywgdGltZVVwZGF0ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2xpZGVzTW9kdWxlVXBkYXRlLFxuICB0aW1lVXBkYXRlLFxuICByZXNldCxcbiAgaW5pdCxcbn07XG4iXSwibmFtZXMiOlsiZ2V0IiwiY3JlYXRlTG9nZ2VyRm9yTW9kdWxlIiwid3JhcHBlZFN0b3JlIiwic2V0U2xpZGVzIiwic2V0Q3VycmVudFNsaWRlIiwiZGlzYWJsZSIsImVudiIsImRlYnVnTG9nZ2VyIiwiaXNCcm93c2VyU3VwcG9ydGVkIiwiaWUiLCJzbGlkZXNVcGRhdGVkIiwicHJldlVSTHMiLCJzbGlkZXMiLCJjdXJyZW50VVJMcyIsIm1hcCIsInNsaWRlIiwiZGVsZXRlZFVSTHMiLCJmaWx0ZXIiLCJ1cmwiLCJpbmNsdWRlcyIsImZvckVhY2giLCJVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJpbWFnZUJ1ZmZlclRvQmxvYlVSTCIsImJ1ZmZlciIsImJsb2IiLCJCbG9iIiwidHlwZSIsImNyZWF0ZU9iamVjdFVSTCIsImRlY29kZSIsImVyciIsIkVycm9yIiwiUHJvbWlzZSIsInJlamVjdCIsInJlcXVlc3RzIiwid29ya2VyIiwiaW5pdFdvcmtlciIsIk1hcCIsIlNsaWRlRGVjb2RlcldvcmtlciIsImRlZmF1bHQiLCJhZGRFdmVudExpc3RlbmVyIiwiZGF0YSIsImVycm9yIiwiY2IiLCJkZWxldGUiLCJlIiwicHJldmVudERlZmF1bHQiLCJtZXNzYWdlIiwicmVzb2x2ZSIsImRvbmUiLCJkZWNvZGVkU2xpZGUiLCJzZWNyZXQiLCJzZXQiLCJwb3N0TWVzc2FnZSIsImVuc3VyZUJvdW5kYXJpZXMiLCJzdGFydCIsIkluZmluaXR5IiwiZW5kIiwiY29udmVydE1vZHVsZVRvU2xpZGVzIiwibW9kdWxlIiwiQXJyYXkiLCJpc0FycmF5Iiwic2hvdyIsInByb2Nlc3NTbGlkZXMiLCJoYXZlVG9EZWRjb2RlIiwibGVuZ3RoIiwiZGlzcGF0Y2giLCJkZWNvZGVkU2xpZGVzIiwidGhlbiIsInB1c2giLCJjYXRjaCIsInNsaWRlc01vZHVsZVVwZGF0ZSIsImlzTW9kdWxlVmFsaWQiLCJ0aW1lVXBkYXRlIiwicG9zaXRpb25JblNlYyIsInBvc2l0aW9uSW5NcyIsInN0YXRlIiwiZ2V0U3RhdGUiLCJzbGlkZURlY2siLCJjdXJyZW50U2xpZGUiLCJmaW5kIiwiaW5mbyIsInJlc2V0IiwiaW5pdCIsInN1YnNjcmliZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/logic/slideDeck/slideDeckHandler.js\n");

/***/ }),

/***/ "../js/cronus/mp4/blocks/ftyp.js":
/*!***************************************!*\
  !*** ../js/cronus/mp4/blocks/ftyp.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FileTypeBox\": function() { return /* binding */ FileTypeBox; }\n/* harmony export */ });\n/* harmony import */ var cronus_mp4_box__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/mp4/box */ \"../js/cronus/mp4/box.js\");\n/* harmony import */ var cronus_mp4_helpers_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/mp4/helpers/string */ \"../js/cronus/mp4/helpers/string.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\nvar FileTypeBox = /*#__PURE__*/function (_Box) {\n  _inherits(FileTypeBox, _Box);\n\n  var _super = _createSuper(FileTypeBox);\n\n  function FileTypeBox(boxData) {\n    var _this;\n\n    _classCallCheck(this, FileTypeBox);\n\n    _this = _super.call(this, boxData);\n    _this.major_brand = ''; // unsigned int(32)\n\n    _this.minor_version = ''; // unsigned int(32)\n\n    _this.compatible_brands = ''; // unsigned int(32) - to end of the box\n\n    _this.parse();\n\n    return _this;\n  }\n\n  _createClass(FileTypeBox, [{\n    key: \"parse\",\n    value: function parse() {\n      var view = new DataView(this.data);\n      var lengthUntilEnd = this.size - 4 - // size\n      4 - // type\n      4 - // major\n      4; // minor\n\n      this.major_brand = (0,cronus_mp4_helpers_string__WEBPACK_IMPORTED_MODULE_1__.toString)(view, 0, 4);\n      this.minor_version = (0,cronus_mp4_helpers_string__WEBPACK_IMPORTED_MODULE_1__.toString)(view, 4, 4);\n      this.compatible_brands = (0,cronus_mp4_helpers_string__WEBPACK_IMPORTED_MODULE_1__.toString)(view, 8, lengthUntilEnd);\n    }\n  }]);\n\n  return FileTypeBox;\n}(cronus_mp4_box__WEBPACK_IMPORTED_MODULE_0__.Box);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL21wNC9ibG9ja3MvZnR5cC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUVPLElBQU1FLFdBQWI7QUFBQTs7QUFBQTs7QUFDRSx1QkFBWUMsT0FBWixFQUFxQjtBQUFBOztBQUFBOztBQUNuQiw4QkFBTUEsT0FBTjtBQUVBLFVBQUtDLFdBQUwsR0FBbUIsRUFBbkIsQ0FIbUIsQ0FHSTs7QUFDdkIsVUFBS0MsYUFBTCxHQUFxQixFQUFyQixDQUptQixDQUlNOztBQUN6QixVQUFLQyxpQkFBTCxHQUF5QixFQUF6QixDQUxtQixDQUtVOztBQUU3QixVQUFLQyxLQUFMOztBQVBtQjtBQVFwQjs7QUFUSDtBQUFBO0FBQUEsV0FXRSxpQkFBUTtBQUNOLFVBQU1DLElBQUksR0FBRyxJQUFJQyxRQUFKLENBQWEsS0FBS0MsSUFBbEIsQ0FBYjtBQUNBLFVBQU1DLGNBQWMsR0FDbEIsS0FBS0MsSUFBTCxHQUNBLENBREEsR0FDSTtBQUNKLE9BRkEsR0FFSTtBQUNKLE9BSEEsR0FHSTtBQUNKLE9BTEYsQ0FGTSxDQU9EOztBQUVMLFdBQUtSLFdBQUwsR0FBbUJILG1FQUFRLENBQUNPLElBQUQsRUFBTyxDQUFQLEVBQVUsQ0FBVixDQUEzQjtBQUNBLFdBQUtILGFBQUwsR0FBcUJKLG1FQUFRLENBQUNPLElBQUQsRUFBTyxDQUFQLEVBQVUsQ0FBVixDQUE3QjtBQUNBLFdBQUtGLGlCQUFMLEdBQXlCTCxtRUFBUSxDQUFDTyxJQUFELEVBQU8sQ0FBUCxFQUFVRyxjQUFWLENBQWpDO0FBQ0Q7QUF2Qkg7O0FBQUE7QUFBQSxFQUFpQ1gsK0NBQWpDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvbXA0L2Jsb2Nrcy9mdHlwLmpzPzQ3NWIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQm94IH0gZnJvbSAnY3JvbnVzL21wNC9ib3gnO1xuaW1wb3J0IHsgdG9TdHJpbmcgfSBmcm9tICdjcm9udXMvbXA0L2hlbHBlcnMvc3RyaW5nJztcblxuZXhwb3J0IGNsYXNzIEZpbGVUeXBlQm94IGV4dGVuZHMgQm94IHtcbiAgY29uc3RydWN0b3IoYm94RGF0YSkge1xuICAgIHN1cGVyKGJveERhdGEpO1xuXG4gICAgdGhpcy5tYWpvcl9icmFuZCA9ICcnOyAvLyB1bnNpZ25lZCBpbnQoMzIpXG4gICAgdGhpcy5taW5vcl92ZXJzaW9uID0gJyc7IC8vIHVuc2lnbmVkIGludCgzMilcbiAgICB0aGlzLmNvbXBhdGlibGVfYnJhbmRzID0gJyc7IC8vIHVuc2lnbmVkIGludCgzMikgLSB0byBlbmQgb2YgdGhlIGJveFxuXG4gICAgdGhpcy5wYXJzZSgpO1xuICB9XG5cbiAgcGFyc2UoKSB7XG4gICAgY29uc3QgdmlldyA9IG5ldyBEYXRhVmlldyh0aGlzLmRhdGEpO1xuICAgIGNvbnN0IGxlbmd0aFVudGlsRW5kID1cbiAgICAgIHRoaXMuc2l6ZSAtXG4gICAgICA0IC0gLy8gc2l6ZVxuICAgICAgNCAtIC8vIHR5cGVcbiAgICAgIDQgLSAvLyBtYWpvclxuICAgICAgNDsgLy8gbWlub3JcblxuICAgIHRoaXMubWFqb3JfYnJhbmQgPSB0b1N0cmluZyh2aWV3LCAwLCA0KTtcbiAgICB0aGlzLm1pbm9yX3ZlcnNpb24gPSB0b1N0cmluZyh2aWV3LCA0LCA0KTtcbiAgICB0aGlzLmNvbXBhdGlibGVfYnJhbmRzID0gdG9TdHJpbmcodmlldywgOCwgbGVuZ3RoVW50aWxFbmQpO1xuICB9XG59XG4iXSwibmFtZXMiOlsiQm94IiwidG9TdHJpbmciLCJGaWxlVHlwZUJveCIsImJveERhdGEiLCJtYWpvcl9icmFuZCIsIm1pbm9yX3ZlcnNpb24iLCJjb21wYXRpYmxlX2JyYW5kcyIsInBhcnNlIiwidmlldyIsIkRhdGFWaWV3IiwiZGF0YSIsImxlbmd0aFVudGlsRW5kIiwic2l6ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/mp4/blocks/ftyp.js\n");

/***/ }),

/***/ "../js/cronus/mp4/blocks/index.js":
/*!****************************************!*\
  !*** ../js/cronus/mp4/blocks/index.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"parse\": function() { return /* binding */ parse; }\n/* harmony export */ });\n/* harmony import */ var cronus_mp4_consts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/mp4/consts */ \"../js/cronus/mp4/consts.js\");\n/* harmony import */ var cronus_mp4_blocks_ftyp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/mp4/blocks/ftyp */ \"../js/cronus/mp4/blocks/ftyp.js\");\n/* harmony import */ var cronus_mp4_blocks_mdhd__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/mp4/blocks/mdhd */ \"../js/cronus/mp4/blocks/mdhd.js\");\n/* harmony import */ var cronus_mp4_blocks_tfdt__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/mp4/blocks/tfdt */ \"../js/cronus/mp4/blocks/tfdt.js\");\n\n\n\n\nfunction parse(boxData) {\n  var type = boxData.type;\n\n  switch (type) {\n    case cronus_mp4_consts__WEBPACK_IMPORTED_MODULE_0__.blockTypes.ftyp:\n      return new cronus_mp4_blocks_ftyp__WEBPACK_IMPORTED_MODULE_1__.FileTypeBox(boxData);\n\n    case cronus_mp4_consts__WEBPACK_IMPORTED_MODULE_0__.blockTypes.mdhd:\n      return new cronus_mp4_blocks_mdhd__WEBPACK_IMPORTED_MODULE_2__.MediaHeaderBox(boxData);\n\n    case cronus_mp4_consts__WEBPACK_IMPORTED_MODULE_0__.blockTypes.tfdt:\n      return new cronus_mp4_blocks_tfdt__WEBPACK_IMPORTED_MODULE_3__.TrackFragmentBaseMediaDecodeTimeBox(boxData);\n\n    default:\n      throw new Error(\"unsupported block type: \".concat(type));\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL21wNC9ibG9ja3MvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVPLFNBQVNJLEtBQVQsQ0FBZUMsT0FBZixFQUF3QjtBQUM3QixNQUFRQyxJQUFSLEdBQWlCRCxPQUFqQixDQUFRQyxJQUFSOztBQUVBLFVBQVFBLElBQVI7QUFDRSxTQUFLTiw4REFBTDtBQUNFLGFBQU8sSUFBSUMsK0RBQUosQ0FBZ0JJLE9BQWhCLENBQVA7O0FBQ0YsU0FBS0wsOERBQUw7QUFDRSxhQUFPLElBQUlFLGtFQUFKLENBQW1CRyxPQUFuQixDQUFQOztBQUNGLFNBQUtMLDhEQUFMO0FBQ0UsYUFBTyxJQUFJRyx1RkFBSixDQUF3Q0UsT0FBeEMsQ0FBUDs7QUFDRjtBQUNFLFlBQU0sSUFBSUssS0FBSixtQ0FBcUNKLElBQXJDLEVBQU47QUFSSjtBQVVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvbXA0L2Jsb2Nrcy9pbmRleC5qcz8xYmFjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJsb2NrVHlwZXMgfSBmcm9tICdjcm9udXMvbXA0L2NvbnN0cyc7XG5pbXBvcnQgeyBGaWxlVHlwZUJveCB9IGZyb20gJ2Nyb251cy9tcDQvYmxvY2tzL2Z0eXAnO1xuaW1wb3J0IHsgTWVkaWFIZWFkZXJCb3ggfSBmcm9tICdjcm9udXMvbXA0L2Jsb2Nrcy9tZGhkJztcbmltcG9ydCB7IFRyYWNrRnJhZ21lbnRCYXNlTWVkaWFEZWNvZGVUaW1lQm94IH0gZnJvbSAnY3JvbnVzL21wNC9ibG9ja3MvdGZkdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZShib3hEYXRhKSB7XG4gIGNvbnN0IHsgdHlwZSB9ID0gYm94RGF0YTtcblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIGJsb2NrVHlwZXMuZnR5cDpcbiAgICAgIHJldHVybiBuZXcgRmlsZVR5cGVCb3goYm94RGF0YSk7XG4gICAgY2FzZSBibG9ja1R5cGVzLm1kaGQ6XG4gICAgICByZXR1cm4gbmV3IE1lZGlhSGVhZGVyQm94KGJveERhdGEpO1xuICAgIGNhc2UgYmxvY2tUeXBlcy50ZmR0OlxuICAgICAgcmV0dXJuIG5ldyBUcmFja0ZyYWdtZW50QmFzZU1lZGlhRGVjb2RlVGltZUJveChib3hEYXRhKTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBibG9jayB0eXBlOiAke3R5cGV9YCk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJibG9ja1R5cGVzIiwiRmlsZVR5cGVCb3giLCJNZWRpYUhlYWRlckJveCIsIlRyYWNrRnJhZ21lbnRCYXNlTWVkaWFEZWNvZGVUaW1lQm94IiwicGFyc2UiLCJib3hEYXRhIiwidHlwZSIsImZ0eXAiLCJtZGhkIiwidGZkdCIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/mp4/blocks/index.js\n");

/***/ }),

/***/ "../js/cronus/mp4/blocks/mdhd.js":
/*!***************************************!*\
  !*** ../js/cronus/mp4/blocks/mdhd.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MediaHeaderBox\": function() { return /* binding */ MediaHeaderBox; }\n/* harmony export */ });\n/* harmony import */ var cronus_mp4_fullbox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/mp4/fullbox */ \"../js/cronus/mp4/fullbox.js\");\n/* harmony import */ var cronus_mp4_helpers_buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/mp4/helpers/buffer */ \"../js/cronus/mp4/helpers/buffer.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\nvar MediaHeaderBox = /*#__PURE__*/function (_FullBox) {\n  _inherits(MediaHeaderBox, _FullBox);\n\n  var _super = _createSuper(MediaHeaderBox);\n\n  function MediaHeaderBox(boxData) {\n    var _this;\n\n    _classCallCheck(this, MediaHeaderBox);\n\n    _this = _super.call(this, boxData);\n\n    _this.parse();\n\n    return _this;\n  }\n\n  _createClass(MediaHeaderBox, [{\n    key: \"parse\",\n    value: function parse() {\n      var view = new DataView(this.data);\n\n      if (this.version === 1) {\n        this.creationTime = (0,cronus_mp4_helpers_buffer__WEBPACK_IMPORTED_MODULE_1__.getUint64)(view, 0); // 8\n\n        this.modificationTime = (0,cronus_mp4_helpers_buffer__WEBPACK_IMPORTED_MODULE_1__.getUint64)(view, 8); // 16\n\n        this.timescale = view.getUint32(16); // 20\n\n        this.duration = (0,cronus_mp4_helpers_buffer__WEBPACK_IMPORTED_MODULE_1__.getUint64)(view, 20); // 28\n      } else {\n        this.creationTime = view.getUint32(0); // 4\n\n        this.modificationTime = view.getUint32(4); // 8\n\n        this.timescale = view.getUint32(8); // 12\n\n        this.duration = view.getUint32(12); // 16\n      } // TODO\n      // this.pad\n      // this.language\n      // this.preDefined\n\n    }\n  }]);\n\n  return MediaHeaderBox;\n}(cronus_mp4_fullbox__WEBPACK_IMPORTED_MODULE_0__.FullBox);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL21wNC9ibG9ja3MvbWRoZC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUVPLElBQU1FLGNBQWI7QUFBQTs7QUFBQTs7QUFDRSwwQkFBWUMsT0FBWixFQUFxQjtBQUFBOztBQUFBOztBQUNuQiw4QkFBTUEsT0FBTjs7QUFFQSxVQUFLQyxLQUFMOztBQUhtQjtBQUlwQjs7QUFMSDtBQUFBO0FBQUEsV0FPRSxpQkFBUTtBQUNOLFVBQU1DLElBQUksR0FBRyxJQUFJQyxRQUFKLENBQWEsS0FBS0MsSUFBbEIsQ0FBYjs7QUFFQSxVQUFJLEtBQUtDLE9BQUwsS0FBaUIsQ0FBckIsRUFBd0I7QUFDdEIsYUFBS0MsWUFBTCxHQUFvQlIsb0VBQVMsQ0FBQ0ksSUFBRCxFQUFPLENBQVAsQ0FBN0IsQ0FEc0IsQ0FDa0I7O0FBQ3hDLGFBQUtLLGdCQUFMLEdBQXdCVCxvRUFBUyxDQUFDSSxJQUFELEVBQU8sQ0FBUCxDQUFqQyxDQUZzQixDQUVzQjs7QUFDNUMsYUFBS00sU0FBTCxHQUFpQk4sSUFBSSxDQUFDTyxTQUFMLENBQWUsRUFBZixDQUFqQixDQUhzQixDQUdlOztBQUNyQyxhQUFLQyxRQUFMLEdBQWdCWixvRUFBUyxDQUFDSSxJQUFELEVBQU8sRUFBUCxDQUF6QixDQUpzQixDQUllO0FBQ3RDLE9BTEQsTUFLTztBQUNMLGFBQUtJLFlBQUwsR0FBb0JKLElBQUksQ0FBQ08sU0FBTCxDQUFlLENBQWYsQ0FBcEIsQ0FESyxDQUNrQzs7QUFDdkMsYUFBS0YsZ0JBQUwsR0FBd0JMLElBQUksQ0FBQ08sU0FBTCxDQUFlLENBQWYsQ0FBeEIsQ0FGSyxDQUVzQzs7QUFDM0MsYUFBS0QsU0FBTCxHQUFpQk4sSUFBSSxDQUFDTyxTQUFMLENBQWUsQ0FBZixDQUFqQixDQUhLLENBRytCOztBQUNwQyxhQUFLQyxRQUFMLEdBQWdCUixJQUFJLENBQUNPLFNBQUwsQ0FBZSxFQUFmLENBQWhCLENBSkssQ0FJK0I7QUFDckMsT0FiSyxDQWVOO0FBQ0E7QUFDQTtBQUNBOztBQUNEO0FBMUJIOztBQUFBO0FBQUEsRUFBb0NaLHVEQUFwQyIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vanMvY3JvbnVzL21wNC9ibG9ja3MvbWRoZC5qcz9hNDljIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZ1bGxCb3ggfSBmcm9tICdjcm9udXMvbXA0L2Z1bGxib3gnO1xuaW1wb3J0IHsgZ2V0VWludDY0IH0gZnJvbSAnY3JvbnVzL21wNC9oZWxwZXJzL2J1ZmZlcic7XG5cbmV4cG9ydCBjbGFzcyBNZWRpYUhlYWRlckJveCBleHRlbmRzIEZ1bGxCb3gge1xuICBjb25zdHJ1Y3Rvcihib3hEYXRhKSB7XG4gICAgc3VwZXIoYm94RGF0YSk7XG5cbiAgICB0aGlzLnBhcnNlKCk7XG4gIH1cblxuICBwYXJzZSgpIHtcbiAgICBjb25zdCB2aWV3ID0gbmV3IERhdGFWaWV3KHRoaXMuZGF0YSk7XG5cbiAgICBpZiAodGhpcy52ZXJzaW9uID09PSAxKSB7XG4gICAgICB0aGlzLmNyZWF0aW9uVGltZSA9IGdldFVpbnQ2NCh2aWV3LCAwKTsgLy8gOFxuICAgICAgdGhpcy5tb2RpZmljYXRpb25UaW1lID0gZ2V0VWludDY0KHZpZXcsIDgpOyAvLyAxNlxuICAgICAgdGhpcy50aW1lc2NhbGUgPSB2aWV3LmdldFVpbnQzMigxNik7IC8vIDIwXG4gICAgICB0aGlzLmR1cmF0aW9uID0gZ2V0VWludDY0KHZpZXcsIDIwKTsgLy8gMjhcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jcmVhdGlvblRpbWUgPSB2aWV3LmdldFVpbnQzMigwKTsgLy8gNFxuICAgICAgdGhpcy5tb2RpZmljYXRpb25UaW1lID0gdmlldy5nZXRVaW50MzIoNCk7IC8vIDhcbiAgICAgIHRoaXMudGltZXNjYWxlID0gdmlldy5nZXRVaW50MzIoOCk7IC8vIDEyXG4gICAgICB0aGlzLmR1cmF0aW9uID0gdmlldy5nZXRVaW50MzIoMTIpOyAvLyAxNlxuICAgIH1cblxuICAgIC8vIFRPRE9cbiAgICAvLyB0aGlzLnBhZFxuICAgIC8vIHRoaXMubGFuZ3VhZ2VcbiAgICAvLyB0aGlzLnByZURlZmluZWRcbiAgfVxufVxuIl0sIm5hbWVzIjpbIkZ1bGxCb3giLCJnZXRVaW50NjQiLCJNZWRpYUhlYWRlckJveCIsImJveERhdGEiLCJwYXJzZSIsInZpZXciLCJEYXRhVmlldyIsImRhdGEiLCJ2ZXJzaW9uIiwiY3JlYXRpb25UaW1lIiwibW9kaWZpY2F0aW9uVGltZSIsInRpbWVzY2FsZSIsImdldFVpbnQzMiIsImR1cmF0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/mp4/blocks/mdhd.js\n");

/***/ }),

/***/ "../js/cronus/mp4/blocks/tfdt.js":
/*!***************************************!*\
  !*** ../js/cronus/mp4/blocks/tfdt.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TrackFragmentBaseMediaDecodeTimeBox\": function() { return /* binding */ TrackFragmentBaseMediaDecodeTimeBox; }\n/* harmony export */ });\n/* harmony import */ var cronus_mp4_fullbox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/mp4/fullbox */ \"../js/cronus/mp4/fullbox.js\");\n/* harmony import */ var cronus_mp4_helpers_buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/mp4/helpers/buffer */ \"../js/cronus/mp4/helpers/buffer.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\nvar TrackFragmentBaseMediaDecodeTimeBox = /*#__PURE__*/function (_FullBox) {\n  _inherits(TrackFragmentBaseMediaDecodeTimeBox, _FullBox);\n\n  var _super = _createSuper(TrackFragmentBaseMediaDecodeTimeBox);\n\n  function TrackFragmentBaseMediaDecodeTimeBox(boxData) {\n    var _this;\n\n    _classCallCheck(this, TrackFragmentBaseMediaDecodeTimeBox);\n\n    _this = _super.call(this, boxData);\n\n    _this.parse();\n\n    return _this;\n  }\n\n  _createClass(TrackFragmentBaseMediaDecodeTimeBox, [{\n    key: \"parse\",\n    value: function parse() {\n      var view = new DataView(this.data);\n\n      if (this.version === 1) {\n        this.baseMediaDecodeTime = (0,cronus_mp4_helpers_buffer__WEBPACK_IMPORTED_MODULE_1__.getUint64)(view, 0);\n      } else {\n        this.baseMediaDecodeTime = view.getUint32(0);\n      }\n    }\n  }]);\n\n  return TrackFragmentBaseMediaDecodeTimeBox;\n}(cronus_mp4_fullbox__WEBPACK_IMPORTED_MODULE_0__.FullBox);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL21wNC9ibG9ja3MvdGZkdC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUVPLElBQU1FLG1DQUFiO0FBQUE7O0FBQUE7O0FBQ0UsK0NBQVlDLE9BQVosRUFBcUI7QUFBQTs7QUFBQTs7QUFDbkIsOEJBQU1BLE9BQU47O0FBRUEsVUFBS0MsS0FBTDs7QUFIbUI7QUFJcEI7O0FBTEg7QUFBQTtBQUFBLFdBT0UsaUJBQVE7QUFDTixVQUFNQyxJQUFJLEdBQUcsSUFBSUMsUUFBSixDQUFhLEtBQUtDLElBQWxCLENBQWI7O0FBRUEsVUFBSSxLQUFLQyxPQUFMLEtBQWlCLENBQXJCLEVBQXdCO0FBQ3RCLGFBQUtDLG1CQUFMLEdBQTJCUixvRUFBUyxDQUFDSSxJQUFELEVBQU8sQ0FBUCxDQUFwQztBQUNELE9BRkQsTUFFTztBQUNMLGFBQUtJLG1CQUFMLEdBQTJCSixJQUFJLENBQUNLLFNBQUwsQ0FBZSxDQUFmLENBQTNCO0FBQ0Q7QUFDRjtBQWZIOztBQUFBO0FBQUEsRUFBeURWLHVEQUF6RCIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vanMvY3JvbnVzL21wNC9ibG9ja3MvdGZkdC5qcz82Mzk2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZ1bGxCb3ggfSBmcm9tICdjcm9udXMvbXA0L2Z1bGxib3gnO1xuaW1wb3J0IHsgZ2V0VWludDY0IH0gZnJvbSAnY3JvbnVzL21wNC9oZWxwZXJzL2J1ZmZlcic7XG5cbmV4cG9ydCBjbGFzcyBUcmFja0ZyYWdtZW50QmFzZU1lZGlhRGVjb2RlVGltZUJveCBleHRlbmRzIEZ1bGxCb3gge1xuICBjb25zdHJ1Y3Rvcihib3hEYXRhKSB7XG4gICAgc3VwZXIoYm94RGF0YSk7XG5cbiAgICB0aGlzLnBhcnNlKCk7XG4gIH1cblxuICBwYXJzZSgpIHtcbiAgICBjb25zdCB2aWV3ID0gbmV3IERhdGFWaWV3KHRoaXMuZGF0YSk7XG5cbiAgICBpZiAodGhpcy52ZXJzaW9uID09PSAxKSB7XG4gICAgICB0aGlzLmJhc2VNZWRpYURlY29kZVRpbWUgPSBnZXRVaW50NjQodmlldywgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYmFzZU1lZGlhRGVjb2RlVGltZSA9IHZpZXcuZ2V0VWludDMyKDApO1xuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbIkZ1bGxCb3giLCJnZXRVaW50NjQiLCJUcmFja0ZyYWdtZW50QmFzZU1lZGlhRGVjb2RlVGltZUJveCIsImJveERhdGEiLCJwYXJzZSIsInZpZXciLCJEYXRhVmlldyIsImRhdGEiLCJ2ZXJzaW9uIiwiYmFzZU1lZGlhRGVjb2RlVGltZSIsImdldFVpbnQzMiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/mp4/blocks/tfdt.js\n");

/***/ }),

/***/ "../js/cronus/mp4/box.js":
/*!*******************************!*\
  !*** ../js/cronus/mp4/box.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Box\": function() { return /* binding */ Box; }\n/* harmony export */ });\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Box = /*#__PURE__*/_createClass(function Box(_ref) {\n  var size = _ref.size,\n      type = _ref.type,\n      data = _ref.data,\n      start = _ref.start;\n\n  _classCallCheck(this, Box);\n\n  this.size = size; // unsigned int(32)\n\n  this.type = type; // unsigned int(32)\n\n  this.data = data;\n  this.start = start;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL21wNC9ib3guanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFPLElBQU1BLEdBQWIsNkJBQ0UsbUJBQXlDO0FBQUEsTUFBM0JDLElBQTJCLFFBQTNCQSxJQUEyQjtBQUFBLE1BQXJCQyxJQUFxQixRQUFyQkEsSUFBcUI7QUFBQSxNQUFmQyxJQUFlLFFBQWZBLElBQWU7QUFBQSxNQUFUQyxLQUFTLFFBQVRBLEtBQVM7O0FBQUE7O0FBQ3ZDLE9BQUtILElBQUwsR0FBWUEsSUFBWixDQUR1QyxDQUNyQjs7QUFDbEIsT0FBS0MsSUFBTCxHQUFZQSxJQUFaLENBRnVDLENBRXJCOztBQUNsQixPQUFLQyxJQUFMLEdBQVlBLElBQVo7QUFDQSxPQUFLQyxLQUFMLEdBQWFBLEtBQWI7QUFDRCxDQU5IIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvbXA0L2JveC5qcz9kOWM4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBCb3gge1xuICBjb25zdHJ1Y3Rvcih7IHNpemUsIHR5cGUsIGRhdGEsIHN0YXJ0IH0pIHtcbiAgICB0aGlzLnNpemUgPSBzaXplOyAvLyB1bnNpZ25lZCBpbnQoMzIpXG4gICAgdGhpcy50eXBlID0gdHlwZTsgLy8gdW5zaWduZWQgaW50KDMyKVxuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICB9XG59XG4iXSwibmFtZXMiOlsiQm94Iiwic2l6ZSIsInR5cGUiLCJkYXRhIiwic3RhcnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/mp4/box.js\n");

/***/ }),

/***/ "../js/cronus/mp4/consts.js":
/*!**********************************!*\
  !*** ../js/cronus/mp4/consts.js ***!
  \**********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"blockTypes\": function() { return /* binding */ blockTypes; }\n/* harmony export */ });\nvar _Object$freeze;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable */\n// prettier-ignore\nvar blockTypes = Object.freeze((_Object$freeze = {\n  ftyp: 'ftyp',\n  pdin: 'pdin',\n  moov: 'moov',\n  mvhd: 'mvhd',\n  trak: 'trak',\n  tkhd: 'tkhd',\n  tref: 'tref',\n  trgr: 'trgr',\n  edts: 'edts',\n  elst: 'elst',\n  mdia: 'mdia',\n  mdhd: 'mdhd',\n  hdlr: 'hdlr',\n  minf: 'minf',\n  vmhd: 'vmhd',\n  smhd: 'smhd',\n  hmhd: 'hmhd',\n  nmhd: 'nmhd',\n  dinf: 'dinf',\n  dref: 'dref',\n  stbl: 'stbl',\n  stsd: 'stsd',\n  stts: 'stts',\n  ctts: 'ctts',\n  cslg: 'cslg',\n  stsc: 'stsc',\n  stsz: 'stsz',\n  stz2: 'stz2',\n  stco: 'stco',\n  co64: 'co64',\n  stss: 'stss',\n  stsh: 'stsh',\n  padb: 'padb',\n  stdp: 'stdp',\n  sdtp: 'sdtp',\n  sbgp: 'sbgp',\n  sgpd: 'sgpd',\n  subs: 'subs',\n  saiz: 'saiz',\n  saio: 'saio',\n  udta: 'udta',\n  mvex: 'mvex',\n  mehd: 'mehd',\n  trex: 'trex',\n  leva: 'leva',\n  iods: 'iods',\n  moof: 'moof',\n  mfhd: 'mfhd',\n  traf: 'traf',\n  tfhd: 'tfhd',\n  trun: 'trun'\n}, _defineProperty(_Object$freeze, \"sbgp\", 'sbgp'), _defineProperty(_Object$freeze, \"sgpd\", 'sgpd'), _defineProperty(_Object$freeze, \"subs\", 'subs'), _defineProperty(_Object$freeze, \"saiz\", 'saiz'), _defineProperty(_Object$freeze, \"saio\", 'saio'), _defineProperty(_Object$freeze, \"tfdt\", 'tfdt'), _defineProperty(_Object$freeze, \"mfra\", 'mfra'), _defineProperty(_Object$freeze, \"tfra\", 'tfra'), _defineProperty(_Object$freeze, \"mfro\", 'mfro'), _defineProperty(_Object$freeze, \"mdat\", 'mdat'), _defineProperty(_Object$freeze, \"free\", 'free'), _defineProperty(_Object$freeze, \"ustm\", 'ustm'), _defineProperty(_Object$freeze, \"fmov\", 'fmov'), _defineProperty(_Object$freeze, \"idta\", 'idta'), _defineProperty(_Object$freeze, \"skip\", 'skip'), _defineProperty(_Object$freeze, \"udta\", 'udta'), _defineProperty(_Object$freeze, \"cprt\", 'cprt'), _defineProperty(_Object$freeze, \"tsel\", 'tsel'), _defineProperty(_Object$freeze, \"strk\", 'strk'), _defineProperty(_Object$freeze, \"stri\", 'stri'), _defineProperty(_Object$freeze, \"strd\", 'strd'), _defineProperty(_Object$freeze, \"meta\", 'meta'), _defineProperty(_Object$freeze, \"hdlr\", 'hdlr'), _defineProperty(_Object$freeze, \"dinf\", 'dinf'), _defineProperty(_Object$freeze, \"dref\", 'dref'), _defineProperty(_Object$freeze, \"iloc\", 'iloc'), _defineProperty(_Object$freeze, \"ipro\", 'ipro'), _defineProperty(_Object$freeze, \"sinf\", 'sinf'), _defineProperty(_Object$freeze, \"frma\", 'frma'), _defineProperty(_Object$freeze, \"schm\", 'schm'), _defineProperty(_Object$freeze, \"schi\", 'schi'), _defineProperty(_Object$freeze, \"iinf\", 'iinf'), _defineProperty(_Object$freeze, \"xml\", 'xml'), _defineProperty(_Object$freeze, \"bxml\", 'bxml'), _defineProperty(_Object$freeze, \"pitm\", 'pitm'), _defineProperty(_Object$freeze, \"fiin\", 'fiin'), _defineProperty(_Object$freeze, \"paen\", 'paen'), _defineProperty(_Object$freeze, \"fire\", 'fire'), _defineProperty(_Object$freeze, \"fpar\", 'fpar'), _defineProperty(_Object$freeze, \"fecr\", 'fecr'), _defineProperty(_Object$freeze, \"segr\", 'segr'), _defineProperty(_Object$freeze, \"gitn\", 'gitn'), _defineProperty(_Object$freeze, \"idat\", 'idat'), _defineProperty(_Object$freeze, \"iref\", 'iref'), _defineProperty(_Object$freeze, \"meco\", 'meco'), _defineProperty(_Object$freeze, \"mere\", 'mere'), _defineProperty(_Object$freeze, \"styp\", 'styp'), _defineProperty(_Object$freeze, \"sidx\", 'sidx'), _defineProperty(_Object$freeze, \"ssix\", 'ssix'), _Object$freeze));\n/* eslint-enable *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bkIsTUE5RG1CLDJDQStEbEIsTUEvRGtCLDJDQWdFakIsTUFoRWlCLDJDQWlFaEIsTUFqRWdCLDJDQWtFbkIsTUFsRW1CLDJDQW1FbEIsTUFuRWtCLDJDQW9FakIsTUFwRWlCLDJDQXFFakIsTUFyRWlCLDJDQXNFakIsTUF0RWlCLDJDQXVFaEIsTUF2RWdCLDJDQXdFaEIsTUF4RWdCLDJDQXlFbkIsTUF6RW1CLDJDQTBFbEIsTUExRWtCLDJDQTJFbEIsTUEzRWtCLDJDQTRFakIsTUE1RWlCLDJDQTZFbEIsTUE3RWtCLDJDQThFbEIsTUE5RWtCLDJDQStFakIsTUEvRWlCLDJDQWdGaEIsTUFoRmdCLDJDQWlGaEIsTUFqRmdCLDJDQWtGaEIsTUFsRmdCLDJDQW1GbEIsTUFuRmtCLDBDQW9GbkIsS0FwRm1CLDJDQXFGbEIsTUFyRmtCLDJDQXNGbEIsTUF0RmtCLDJDQXVGbEIsTUF2RmtCLDJDQXdGakIsTUF4RmlCLDJDQXlGaEIsTUF6RmdCLDJDQTBGaEIsTUExRmdCLDJDQTJGaEIsTUEzRmdCLDJDQTRGakIsTUE1RmlCLDJDQTZGakIsTUE3RmlCLDJDQThGbEIsTUE5RmtCLDJDQStGbEIsTUEvRmtCLDJDQWdHbkIsTUFoR21CLDJDQWlHbEIsTUFqR2tCLDJDQWtHbkIsTUFsR21CLDJDQW1HbkIsTUFuR21CLDJDQW9HbkIsTUFwR21CLG1CQUFuQjtBQXNHUCIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vanMvY3JvbnVzL21wNC9jb25zdHMuanM/NWIwMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gcHJldHRpZXItaWdub3JlXG5leHBvcnQgY29uc3QgYmxvY2tUeXBlcyA9IE9iamVjdC5mcmVlemUoe1xuXHRmdHlwOiAnZnR5cCcsXG5cdHBkaW46ICdwZGluJyxcblx0bW9vdjogJ21vb3YnLFxuXHRcdG12aGQ6ICdtdmhkJyxcblx0XHR0cmFrOiAndHJhaycsXG5cdFx0XHR0a2hkOiAndGtoZCcsXG5cdFx0XHR0cmVmOiAndHJlZicsXG5cdFx0XHR0cmdyOiAndHJncicsXG5cdFx0XHRlZHRzOiAnZWR0cycsXG5cdFx0XHRcdGVsc3Q6ICdlbHN0Jyxcblx0XHRcdG1kaWE6ICdtZGlhJyxcblx0XHRcdFx0bWRoZDogJ21kaGQnLFxuXHRcdFx0XHRoZGxyOiAnaGRscicsXG5cdFx0XHRcdG1pbmY6ICdtaW5mJyxcblx0XHRcdFx0XHR2bWhkOiAndm1oZCcsXG5cdFx0XHRcdFx0c21oZDogJ3NtaGQnLFxuXHRcdFx0XHRcdGhtaGQ6ICdobWhkJyxcblx0XHRcdFx0XHRubWhkOiAnbm1oZCcsXG5cdFx0XHRcdFx0ZGluZjogJ2RpbmYnLFxuXHRcdFx0XHRcdFx0ZHJlZjogJ2RyZWYnLFxuXHRcdFx0XHRcdHN0Ymw6ICdzdGJsJyxcblx0XHRcdFx0XHRcdHN0c2Q6ICdzdHNkJyxcblx0XHRcdFx0XHRcdHN0dHM6ICdzdHRzJyxcblx0XHRcdFx0XHRcdGN0dHM6ICdjdHRzJyxcblx0XHRcdFx0XHRcdGNzbGc6ICdjc2xnJyxcblx0XHRcdFx0XHRcdHN0c2M6ICdzdHNjJyxcblx0XHRcdFx0XHRcdHN0c3o6ICdzdHN6Jyxcblx0XHRcdFx0XHRcdHN0ejI6ICdzdHoyJyxcblx0XHRcdFx0XHRcdHN0Y286ICdzdGNvJyxcblx0XHRcdFx0XHRcdGNvNjQ6ICdjbzY0Jyxcblx0XHRcdFx0XHRcdHN0c3M6ICdzdHNzJyxcblx0XHRcdFx0XHRcdHN0c2g6ICdzdHNoJyxcblx0XHRcdFx0XHRcdHBhZGI6ICdwYWRiJyxcblx0XHRcdFx0XHRcdHN0ZHA6ICdzdGRwJyxcblx0XHRcdFx0XHRcdHNkdHA6ICdzZHRwJyxcblx0XHRcdFx0XHRcdHNiZ3A6ICdzYmdwJyxcblx0XHRcdFx0XHRcdHNncGQ6ICdzZ3BkJyxcblx0XHRcdFx0XHRcdHN1YnM6ICdzdWJzJyxcblx0XHRcdFx0XHRcdHNhaXo6ICdzYWl6Jyxcblx0XHRcdFx0XHRcdHNhaW86ICdzYWlvJyxcblx0XHRcdHVkdGE6ICd1ZHRhJyxcblx0XHRtdmV4OiAnbXZleCcsXG5cdFx0XHRtZWhkOiAnbWVoZCcsXG5cdFx0XHR0cmV4OiAndHJleCcsXG5cdFx0XHRsZXZhOiAnbGV2YScsXG5cdFx0aW9kczogJ2lvZHMnLFxuXHRtb29mOiAnbW9vZicsXG5cdFx0bWZoZDogJ21maGQnLFxuXHRcdHRyYWY6ICd0cmFmJyxcblx0XHRcdHRmaGQ6ICd0ZmhkJyxcblx0XHRcdHRydW46ICd0cnVuJyxcblx0XHRcdHNiZ3A6ICdzYmdwJyxcblx0XHRcdHNncGQ6ICdzZ3BkJyxcblx0XHRcdHN1YnM6ICdzdWJzJyxcblx0XHRcdHNhaXo6ICdzYWl6Jyxcblx0XHRcdHNhaW86ICdzYWlvJyxcblx0XHRcdHRmZHQ6ICd0ZmR0Jyxcblx0bWZyYTogJ21mcmEnLFxuXHRcdHRmcmE6ICd0ZnJhJyxcblx0XHRtZnJvOiAnbWZybycsXG5cdG1kYXQ6ICdtZGF0Jyxcblx0ZnJlZTogJ2ZyZWUnLFxuXHRcdHVzdG06ICd1c3RtJyxcblx0XHRcdGZtb3Y6ICdmbW92Jyxcblx0XHRcdFx0aWR0YTogJ2lkdGEnLFxuXHRza2lwOiAnc2tpcCcsXG5cdFx0dWR0YTogJ3VkdGEnLFxuXHRcdFx0Y3BydDogJ2NwcnQnLFxuXHRcdFx0dHNlbDogJ3RzZWwnLFxuXHRcdFx0c3RyazogJ3N0cmsnLFxuXHRcdFx0XHRzdHJpOiAnc3RyaScsXG5cdFx0XHRcdHN0cmQ6ICdzdHJkJyxcblx0bWV0YTogJ21ldGEnLFxuXHRcdGhkbHI6ICdoZGxyJyxcblx0XHRkaW5mOiAnZGluZicsXG5cdFx0XHRkcmVmOiAnZHJlZicsXG5cdFx0aWxvYzogJ2lsb2MnLFxuXHRcdGlwcm86ICdpcHJvJyxcblx0XHRcdHNpbmY6ICdzaW5mJyxcblx0XHRcdFx0ZnJtYTogJ2ZybWEnLFxuXHRcdFx0XHRzY2htOiAnc2NobScsXG5cdFx0XHRcdHNjaGk6ICdzY2hpJyxcblx0XHRpaW5mOiAnaWluZicsXG5cdFx0eG1sOiAneG1sJyxcblx0XHRieG1sOiAnYnhtbCcsXG5cdFx0cGl0bTogJ3BpdG0nLFxuXHRcdGZpaW46ICdmaWluJyxcblx0XHRcdHBhZW46ICdwYWVuJyxcblx0XHRcdFx0ZmlyZTogJ2ZpcmUnLFxuXHRcdFx0XHRmcGFyOiAnZnBhcicsXG5cdFx0XHRcdGZlY3I6ICdmZWNyJyxcblx0XHRcdHNlZ3I6ICdzZWdyJyxcblx0XHRcdGdpdG46ICdnaXRuJyxcblx0XHRpZGF0OiAnaWRhdCcsXG5cdFx0aXJlZjogJ2lyZWYnLFxuXHRtZWNvOiAnbWVjbycsXG5cdFx0bWVyZTogJ21lcmUnLFxuXHRzdHlwOiAnc3R5cCcsXG5cdHNpZHg6ICdzaWR4Jyxcblx0c3NpeDogJ3NzaXgnLFxufSk7XG4vKiBlc2xpbnQtZW5hYmxlICovXG4iXSwibmFtZXMiOlsiYmxvY2tUeXBlcyIsIk9iamVjdCIsImZyZWV6ZSIsImZ0eXAiLCJwZGluIiwibW9vdiIsIm12aGQiLCJ0cmFrIiwidGtoZCIsInRyZWYiLCJ0cmdyIiwiZWR0cyIsImVsc3QiLCJtZGlhIiwibWRoZCIsImhkbHIiLCJtaW5mIiwidm1oZCIsInNtaGQiLCJobWhkIiwibm1oZCIsImRpbmYiLCJkcmVmIiwic3RibCIsInN0c2QiLCJzdHRzIiwiY3R0cyIsImNzbGciLCJzdHNjIiwic3RzeiIsInN0ejIiLCJzdGNvIiwiY282NCIsInN0c3MiLCJzdHNoIiwicGFkYiIsInN0ZHAiLCJzZHRwIiwic2JncCIsInNncGQiLCJzdWJzIiwic2FpeiIsInNhaW8iLCJ1ZHRhIiwibXZleCIsIm1laGQiLCJ0cmV4IiwibGV2YSIsImlvZHMiLCJtb29mIiwibWZoZCIsInRyYWYiLCJ0ZmhkIiwidHJ1biJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/mp4/consts.js\n");

/***/ }),

/***/ "../js/cronus/mp4/fullbox.js":
/*!***********************************!*\
  !*** ../js/cronus/mp4/fullbox.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FullBox\": function() { return /* binding */ FullBox; }\n/* harmony export */ });\n/* harmony import */ var cronus_mp4_helpers_buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/mp4/helpers/buffer */ \"../js/cronus/mp4/helpers/buffer.js\");\n/* harmony import */ var cronus_mp4_box__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/mp4/box */ \"../js/cronus/mp4/box.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\nvar FullBox = /*#__PURE__*/function (_Box) {\n  _inherits(FullBox, _Box);\n\n  var _super = _createSuper(FullBox);\n\n  function FullBox(boxData) {\n    var _this;\n\n    _classCallCheck(this, FullBox);\n\n    _this = _super.call(this, boxData);\n    var view = new DataView(_this.data);\n    _this.version = view.getUint8(0);\n    _this.flags = FullBox.getFlags(view);\n    _this.data = _this.data.slice(4);\n    _this.start += 4;\n    return _this;\n  }\n\n  _createClass(FullBox, null, [{\n    key: \"getFlags\",\n    value: function getFlags(view) {\n      return (0,cronus_mp4_helpers_buffer__WEBPACK_IMPORTED_MODULE_0__.getUint24)(view, 1).toString(2).padStart(24, '0').split('').map(function (v) {\n        return parseInt(v, 10);\n      });\n    }\n  }]);\n\n  return FullBox;\n}(cronus_mp4_box__WEBPACK_IMPORTED_MODULE_1__.Box);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL21wNC9mdWxsYm94LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBRU8sSUFBTUUsT0FBYjtBQUFBOztBQUFBOztBQUNFLG1CQUFZQyxPQUFaLEVBQXFCO0FBQUE7O0FBQUE7O0FBQ25CLDhCQUFNQSxPQUFOO0FBRUEsUUFBTUMsSUFBSSxHQUFHLElBQUlDLFFBQUosQ0FBYSxNQUFLQyxJQUFsQixDQUFiO0FBQ0EsVUFBS0MsT0FBTCxHQUFlSCxJQUFJLENBQUNJLFFBQUwsQ0FBYyxDQUFkLENBQWY7QUFDQSxVQUFLQyxLQUFMLEdBQWFQLE9BQU8sQ0FBQ1EsUUFBUixDQUFpQk4sSUFBakIsQ0FBYjtBQUNBLFVBQUtFLElBQUwsR0FBWSxNQUFLQSxJQUFMLENBQVVLLEtBQVYsQ0FBZ0IsQ0FBaEIsQ0FBWjtBQUNBLFVBQUtDLEtBQUwsSUFBYyxDQUFkO0FBUG1CO0FBUXBCOztBQVRIO0FBQUE7QUFBQSxXQVdFLGtCQUFnQlIsSUFBaEIsRUFBc0I7QUFDcEIsYUFBT0osb0VBQVMsQ0FBQ0ksSUFBRCxFQUFPLENBQVAsQ0FBVCxDQUNKUyxRQURJLENBQ0ssQ0FETCxFQUVKQyxRQUZJLENBRUssRUFGTCxFQUVTLEdBRlQsRUFHSkMsS0FISSxDQUdFLEVBSEYsRUFJSkMsR0FKSSxDQUlBLFVBQUNDLENBQUQ7QUFBQSxlQUFPQyxRQUFRLENBQUNELENBQUQsRUFBSSxFQUFKLENBQWY7QUFBQSxPQUpBLENBQVA7QUFLRDtBQWpCSDs7QUFBQTtBQUFBLEVBQTZCaEIsK0NBQTdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvbXA0L2Z1bGxib3guanM/MGFmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRVaW50MjQgfSBmcm9tICdjcm9udXMvbXA0L2hlbHBlcnMvYnVmZmVyJztcbmltcG9ydCB7IEJveCB9IGZyb20gJ2Nyb251cy9tcDQvYm94JztcblxuZXhwb3J0IGNsYXNzIEZ1bGxCb3ggZXh0ZW5kcyBCb3gge1xuICBjb25zdHJ1Y3Rvcihib3hEYXRhKSB7XG4gICAgc3VwZXIoYm94RGF0YSk7XG5cbiAgICBjb25zdCB2aWV3ID0gbmV3IERhdGFWaWV3KHRoaXMuZGF0YSk7XG4gICAgdGhpcy52ZXJzaW9uID0gdmlldy5nZXRVaW50OCgwKTtcbiAgICB0aGlzLmZsYWdzID0gRnVsbEJveC5nZXRGbGFncyh2aWV3KTtcbiAgICB0aGlzLmRhdGEgPSB0aGlzLmRhdGEuc2xpY2UoNCk7XG4gICAgdGhpcy5zdGFydCArPSA0O1xuICB9XG5cbiAgc3RhdGljIGdldEZsYWdzKHZpZXcpIHtcbiAgICByZXR1cm4gZ2V0VWludDI0KHZpZXcsIDEpXG4gICAgICAudG9TdHJpbmcoMilcbiAgICAgIC5wYWRTdGFydCgyNCwgJzAnKVxuICAgICAgLnNwbGl0KCcnKVxuICAgICAgLm1hcCgodikgPT4gcGFyc2VJbnQodiwgMTApKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbImdldFVpbnQyNCIsIkJveCIsIkZ1bGxCb3giLCJib3hEYXRhIiwidmlldyIsIkRhdGFWaWV3IiwiZGF0YSIsInZlcnNpb24iLCJnZXRVaW50OCIsImZsYWdzIiwiZ2V0RmxhZ3MiLCJzbGljZSIsInN0YXJ0IiwidG9TdHJpbmciLCJwYWRTdGFydCIsInNwbGl0IiwibWFwIiwidiIsInBhcnNlSW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/mp4/fullbox.js\n");

/***/ }),

/***/ "../js/cronus/mp4/helpers/buffer.js":
/*!******************************************!*\
  !*** ../js/cronus/mp4/helpers/buffer.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getUint24\": function() { return /* binding */ getUint24; },\n/* harmony export */   \"getUint64\": function() { return /* binding */ getUint64; },\n/* harmony export */   \"writeUint32\": function() { return /* binding */ writeUint32; },\n/* harmony export */   \"writeUint64\": function() { return /* binding */ writeUint64; }\n/* harmony export */ });\nvar UINT32_MAX = Math.pow(2, 32) - 1;\nfunction getUint64(view, byteOffset) {\n  var data = 0;\n  var shift32 = Math.pow(2, 32);\n  data = view.getUint32(byteOffset);\n  data *= shift32;\n  data += view.getUint32(byteOffset + 4);\n  return data;\n}\nfunction getUint24(view, byteOffset) {\n  var data = 0;\n  var shift16 = Math.pow(2, 16);\n  data = view.getUint8(byteOffset);\n  data *= shift16;\n  data += view.getUint16(byteOffset + 1);\n  return data;\n}\nfunction writeUint32(buffer, byteOffset, value) {\n  var uint8Array = new Uint8Array(buffer);\n  /* eslint-disable no-bitwise */\n\n  uint8Array[byteOffset + 0] = value >> 24;\n  uint8Array[byteOffset + 1] = value >> 16 & 0xff;\n  uint8Array[byteOffset + 2] = value >> 8 & 0xff;\n  uint8Array[byteOffset + 3] = value & 0xff;\n  /* eslint-enable */\n\n  return uint8Array.buffer;\n}\nfunction writeUint64(buffer, byteOffset, value) {\n  var upper = Math.floor(value / (UINT32_MAX + 1));\n  var lower = Math.floor(value % (UINT32_MAX + 1));\n  writeUint32(buffer, byteOffset, upper);\n  writeUint32(buffer, byteOffset + 4, lower);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL21wNC9oZWxwZXJzL2J1ZmZlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBTUEsVUFBVSxHQUFHLFlBQUssRUFBTCxJQUFVLENBQTdCO0FBRU8sU0FBU0MsU0FBVCxDQUFtQkMsSUFBbkIsRUFBeUJDLFVBQXpCLEVBQXFDO0FBQzFDLE1BQUlDLElBQUksR0FBRyxDQUFYO0FBQ0EsTUFBTUMsT0FBTyxZQUFHLENBQUgsRUFBUSxFQUFSLENBQWI7QUFFQUQsRUFBQUEsSUFBSSxHQUFHRixJQUFJLENBQUNJLFNBQUwsQ0FBZUgsVUFBZixDQUFQO0FBQ0FDLEVBQUFBLElBQUksSUFBSUMsT0FBUjtBQUNBRCxFQUFBQSxJQUFJLElBQUlGLElBQUksQ0FBQ0ksU0FBTCxDQUFlSCxVQUFVLEdBQUcsQ0FBNUIsQ0FBUjtBQUVBLFNBQU9DLElBQVA7QUFDRDtBQUVNLFNBQVNHLFNBQVQsQ0FBbUJMLElBQW5CLEVBQXlCQyxVQUF6QixFQUFxQztBQUMxQyxNQUFJQyxJQUFJLEdBQUcsQ0FBWDtBQUNBLE1BQU1JLE9BQU8sWUFBRyxDQUFILEVBQVEsRUFBUixDQUFiO0FBRUFKLEVBQUFBLElBQUksR0FBR0YsSUFBSSxDQUFDTyxRQUFMLENBQWNOLFVBQWQsQ0FBUDtBQUNBQyxFQUFBQSxJQUFJLElBQUlJLE9BQVI7QUFDQUosRUFBQUEsSUFBSSxJQUFJRixJQUFJLENBQUNRLFNBQUwsQ0FBZVAsVUFBVSxHQUFHLENBQTVCLENBQVI7QUFFQSxTQUFPQyxJQUFQO0FBQ0Q7QUFFTSxTQUFTTyxXQUFULENBQXFCQyxNQUFyQixFQUE2QlQsVUFBN0IsRUFBeUNVLEtBQXpDLEVBQWdEO0FBQ3JELE1BQU1DLFVBQVUsR0FBRyxJQUFJQyxVQUFKLENBQWVILE1BQWYsQ0FBbkI7QUFFQTs7QUFDQUUsRUFBQUEsVUFBVSxDQUFDWCxVQUFVLEdBQUcsQ0FBZCxDQUFWLEdBQTZCVSxLQUFLLElBQUksRUFBdEM7QUFDQUMsRUFBQUEsVUFBVSxDQUFDWCxVQUFVLEdBQUcsQ0FBZCxDQUFWLEdBQThCVSxLQUFLLElBQUksRUFBVixHQUFnQixJQUE3QztBQUNBQyxFQUFBQSxVQUFVLENBQUNYLFVBQVUsR0FBRyxDQUFkLENBQVYsR0FBOEJVLEtBQUssSUFBSSxDQUFWLEdBQWUsSUFBNUM7QUFDQUMsRUFBQUEsVUFBVSxDQUFDWCxVQUFVLEdBQUcsQ0FBZCxDQUFWLEdBQTZCVSxLQUFLLEdBQUcsSUFBckM7QUFDQTs7QUFDQSxTQUFPQyxVQUFVLENBQUNGLE1BQWxCO0FBQ0Q7QUFFTSxTQUFTSSxXQUFULENBQXFCSixNQUFyQixFQUE2QlQsVUFBN0IsRUFBeUNVLEtBQXpDLEVBQWdEO0FBQ3JELE1BQU1JLEtBQUssR0FBR0MsSUFBSSxDQUFDQyxLQUFMLENBQVdOLEtBQUssSUFBSWIsVUFBVSxHQUFHLENBQWpCLENBQWhCLENBQWQ7QUFDQSxNQUFNb0IsS0FBSyxHQUFHRixJQUFJLENBQUNDLEtBQUwsQ0FBV04sS0FBSyxJQUFJYixVQUFVLEdBQUcsQ0FBakIsQ0FBaEIsQ0FBZDtBQUNBVyxFQUFBQSxXQUFXLENBQUNDLE1BQUQsRUFBU1QsVUFBVCxFQUFxQmMsS0FBckIsQ0FBWDtBQUNBTixFQUFBQSxXQUFXLENBQUNDLE1BQUQsRUFBU1QsVUFBVSxHQUFHLENBQXRCLEVBQXlCaUIsS0FBekIsQ0FBWDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvbXA0L2hlbHBlcnMvYnVmZmVyLmpzPzc3NmEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVUlOVDMyX01BWCA9IDIgKiogMzIgLSAxO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VWludDY0KHZpZXcsIGJ5dGVPZmZzZXQpIHtcbiAgbGV0IGRhdGEgPSAwO1xuICBjb25zdCBzaGlmdDMyID0gMiAqKiAzMjtcblxuICBkYXRhID0gdmlldy5nZXRVaW50MzIoYnl0ZU9mZnNldCk7XG4gIGRhdGEgKj0gc2hpZnQzMjtcbiAgZGF0YSArPSB2aWV3LmdldFVpbnQzMihieXRlT2Zmc2V0ICsgNCk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRVaW50MjQodmlldywgYnl0ZU9mZnNldCkge1xuICBsZXQgZGF0YSA9IDA7XG4gIGNvbnN0IHNoaWZ0MTYgPSAyICoqIDE2O1xuXG4gIGRhdGEgPSB2aWV3LmdldFVpbnQ4KGJ5dGVPZmZzZXQpO1xuICBkYXRhICo9IHNoaWZ0MTY7XG4gIGRhdGEgKz0gdmlldy5nZXRVaW50MTYoYnl0ZU9mZnNldCArIDEpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVVaW50MzIoYnVmZmVyLCBieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICBjb25zdCB1aW50OEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovXG4gIHVpbnQ4QXJyYXlbYnl0ZU9mZnNldCArIDBdID0gdmFsdWUgPj4gMjQ7XG4gIHVpbnQ4QXJyYXlbYnl0ZU9mZnNldCArIDFdID0gKHZhbHVlID4+IDE2KSAmIDB4ZmY7XG4gIHVpbnQ4QXJyYXlbYnl0ZU9mZnNldCArIDJdID0gKHZhbHVlID4+IDgpICYgMHhmZjtcbiAgdWludDhBcnJheVtieXRlT2Zmc2V0ICsgM10gPSB2YWx1ZSAmIDB4ZmY7XG4gIC8qIGVzbGludC1lbmFibGUgKi9cbiAgcmV0dXJuIHVpbnQ4QXJyYXkuYnVmZmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVVaW50NjQoYnVmZmVyLCBieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICBjb25zdCB1cHBlciA9IE1hdGguZmxvb3IodmFsdWUgLyAoVUlOVDMyX01BWCArIDEpKTtcbiAgY29uc3QgbG93ZXIgPSBNYXRoLmZsb29yKHZhbHVlICUgKFVJTlQzMl9NQVggKyAxKSk7XG4gIHdyaXRlVWludDMyKGJ1ZmZlciwgYnl0ZU9mZnNldCwgdXBwZXIpO1xuICB3cml0ZVVpbnQzMihidWZmZXIsIGJ5dGVPZmZzZXQgKyA0LCBsb3dlcik7XG59XG4iXSwibmFtZXMiOlsiVUlOVDMyX01BWCIsImdldFVpbnQ2NCIsInZpZXciLCJieXRlT2Zmc2V0IiwiZGF0YSIsInNoaWZ0MzIiLCJnZXRVaW50MzIiLCJnZXRVaW50MjQiLCJzaGlmdDE2IiwiZ2V0VWludDgiLCJnZXRVaW50MTYiLCJ3cml0ZVVpbnQzMiIsImJ1ZmZlciIsInZhbHVlIiwidWludDhBcnJheSIsIlVpbnQ4QXJyYXkiLCJ3cml0ZVVpbnQ2NCIsInVwcGVyIiwiTWF0aCIsImZsb29yIiwibG93ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/mp4/helpers/buffer.js\n");

/***/ }),

/***/ "../js/cronus/mp4/helpers/string.js":
/*!******************************************!*\
  !*** ../js/cronus/mp4/helpers/string.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"toString\": function() { return /* binding */ toString; }\n/* harmony export */ });\nfunction toString(view, start) {\n  var length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n  return new Array(length).fill().map(function (_, idx) {\n    var byte = view.getUint8(start + idx);\n    return String.fromCharCode(byte.toString());\n  }).join('');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL21wNC9oZWxwZXJzL3N0cmluZy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsUUFBVCxDQUFrQkMsSUFBbEIsRUFBd0JDLEtBQXhCLEVBQTJDO0FBQUEsTUFBWkMsTUFBWSx1RUFBSCxDQUFHO0FBQ2hELFNBQU8sSUFBSUMsS0FBSixDQUFVRCxNQUFWLEVBQ0pFLElBREksR0FFSkMsR0FGSSxDQUVBLFVBQUNDLENBQUQsRUFBSUMsR0FBSixFQUFZO0FBQ2YsUUFBTUMsSUFBSSxHQUFHUixJQUFJLENBQUNTLFFBQUwsQ0FBY1IsS0FBSyxHQUFHTSxHQUF0QixDQUFiO0FBQ0EsV0FBT0csTUFBTSxDQUFDQyxZQUFQLENBQW9CSCxJQUFJLENBQUNULFFBQUwsRUFBcEIsQ0FBUDtBQUNELEdBTEksRUFNSmEsSUFOSSxDQU1DLEVBTkQsQ0FBUDtBQU9EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvbXA0L2hlbHBlcnMvc3RyaW5nLmpzPzJhOGUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHRvU3RyaW5nKHZpZXcsIHN0YXJ0LCBsZW5ndGggPSA0KSB7XG4gIHJldHVybiBuZXcgQXJyYXkobGVuZ3RoKVxuICAgIC5maWxsKClcbiAgICAubWFwKChfLCBpZHgpID0+IHtcbiAgICAgIGNvbnN0IGJ5dGUgPSB2aWV3LmdldFVpbnQ4KHN0YXJ0ICsgaWR4KTtcbiAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGUudG9TdHJpbmcoKSk7XG4gICAgfSlcbiAgICAuam9pbignJyk7XG59XG4iXSwibmFtZXMiOlsidG9TdHJpbmciLCJ2aWV3Iiwic3RhcnQiLCJsZW5ndGgiLCJBcnJheSIsImZpbGwiLCJtYXAiLCJfIiwiaWR4IiwiYnl0ZSIsImdldFVpbnQ4IiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/mp4/helpers/string.js\n");

/***/ }),

/***/ "../js/cronus/mp4/index.js":
/*!*********************************!*\
  !*** ../js/cronus/mp4/index.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"get\": function() { return /* binding */ get; }\n/* harmony export */ });\n/* harmony import */ var cronus_mp4_helpers_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/mp4/helpers/string */ \"../js/cronus/mp4/helpers/string.js\");\n/* harmony import */ var cronus_mp4_consts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/mp4/consts */ \"../js/cronus/mp4/consts.js\");\n/* harmony import */ var cronus_mp4_blocks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/mp4/blocks */ \"../js/cronus/mp4/blocks/index.js\");\n\n\n\n\nfunction isValidType(type) {\n  return !!cronus_mp4_consts__WEBPACK_IMPORTED_MODULE_1__.blockTypes[type];\n}\n\nfunction parse(container, parent) {\n  var view = new DataView(container);\n  var byteOffset = 0;\n  var blocks = {};\n\n  while (byteOffset < container.byteLength) {\n    var _parent$start;\n\n    var size = view.getUint32(byteOffset);\n    var type = (0,cronus_mp4_helpers_string__WEBPACK_IMPORTED_MODULE_0__.toString)(view, byteOffset + 4, 4);\n\n    if (!isValidType(type)) {\n      throw new Error(\"unusual type: \".concat(type));\n    }\n\n    var start = byteOffset + 8;\n    var end = byteOffset + size;\n    var data = container.slice(start, end);\n    var parentStart = (_parent$start = parent === null || parent === void 0 ? void 0 : parent.start) !== null && _parent$start !== void 0 ? _parent$start : 0;\n    blocks[type] = {\n      type: type,\n      size: size,\n      data: data,\n      start: parentStart + start\n    };\n    byteOffset += size;\n  }\n\n  return blocks;\n}\n\nfunction get(types, buffer) {\n  if (!Array.isArray(types) || types.some(function (type) {\n    return !cronus_mp4_consts__WEBPACK_IMPORTED_MODULE_1__.blockTypes[type];\n  })) {\n    throw new TypeError('types must be an array of blockTypes');\n  }\n\n  if (!(buffer instanceof ArrayBuffer)) {\n    throw new TypeError('buffer must be an instance of ArrayBuffer');\n  }\n\n  var parent = {};\n  var container = {};\n  var data = buffer;\n\n  for (var i = 0; i < types.length; i += 1) {\n    var type = types[i];\n    container = parse(data, parent);\n\n    if (container[type]) {\n      data = container[type].data;\n      parent = container[type];\n    } else {\n      throw new Error(\"type was not found during parse: \".concat(type));\n    }\n  }\n\n  var found = container[types[types.length - 1]];\n  return cronus_mp4_blocks__WEBPACK_IMPORTED_MODULE_2__.parse(found);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SEQsTUFHTztBQUNMLFlBQU0sSUFBSVcsS0FBSiw0Q0FBOENYLElBQTlDLEVBQU47QUFDRDtBQUNGOztBQUVELE1BQU0yQixLQUFLLEdBQUd6QixTQUFTLENBQUNnQixLQUFLLENBQUNBLEtBQUssQ0FBQ1EsTUFBTixHQUFlLENBQWhCLENBQU4sQ0FBdkI7QUFDQSxTQUFPNUIsb0RBQUEsQ0FBa0I2QixLQUFsQixDQUFQO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy9tcDQvaW5kZXguanM/ZDg5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0b1N0cmluZyB9IGZyb20gJ2Nyb251cy9tcDQvaGVscGVycy9zdHJpbmcnO1xuaW1wb3J0IHsgYmxvY2tUeXBlcyB9IGZyb20gJ2Nyb251cy9tcDQvY29uc3RzJztcbmltcG9ydCAqIGFzIGJsb2NrUGFyc2VyIGZyb20gJ2Nyb251cy9tcDQvYmxvY2tzJztcblxuZnVuY3Rpb24gaXNWYWxpZFR5cGUodHlwZSkge1xuICByZXR1cm4gISFibG9ja1R5cGVzW3R5cGVdO1xufVxuXG5mdW5jdGlvbiBwYXJzZShjb250YWluZXIsIHBhcmVudCkge1xuICBjb25zdCB2aWV3ID0gbmV3IERhdGFWaWV3KGNvbnRhaW5lcik7XG5cbiAgbGV0IGJ5dGVPZmZzZXQgPSAwO1xuICBjb25zdCBibG9ja3MgPSB7fTtcblxuICB3aGlsZSAoYnl0ZU9mZnNldCA8IGNvbnRhaW5lci5ieXRlTGVuZ3RoKSB7XG4gICAgY29uc3Qgc2l6ZSA9IHZpZXcuZ2V0VWludDMyKGJ5dGVPZmZzZXQpO1xuICAgIGNvbnN0IHR5cGUgPSB0b1N0cmluZyh2aWV3LCBieXRlT2Zmc2V0ICsgNCwgNCk7XG5cbiAgICBpZiAoIWlzVmFsaWRUeXBlKHR5cGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHVudXN1YWwgdHlwZTogJHt0eXBlfWApO1xuICAgIH1cblxuICAgIGNvbnN0IHN0YXJ0ID0gYnl0ZU9mZnNldCArIDg7XG4gICAgY29uc3QgZW5kID0gYnl0ZU9mZnNldCArIHNpemU7XG4gICAgY29uc3QgZGF0YSA9IGNvbnRhaW5lci5zbGljZShzdGFydCwgZW5kKTtcblxuICAgIGNvbnN0IHBhcmVudFN0YXJ0ID0gcGFyZW50Py5zdGFydCA/PyAwO1xuICAgIGJsb2Nrc1t0eXBlXSA9IHtcbiAgICAgIHR5cGUsXG4gICAgICBzaXplLFxuICAgICAgZGF0YSxcbiAgICAgIHN0YXJ0OiBwYXJlbnRTdGFydCArIHN0YXJ0LFxuICAgIH07XG4gICAgYnl0ZU9mZnNldCArPSBzaXplO1xuICB9XG5cbiAgcmV0dXJuIGJsb2Nrcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldCh0eXBlcywgYnVmZmVyKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheSh0eXBlcykgfHwgdHlwZXMuc29tZSgodHlwZSkgPT4gIWJsb2NrVHlwZXNbdHlwZV0pKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndHlwZXMgbXVzdCBiZSBhbiBhcnJheSBvZiBibG9ja1R5cGVzJyk7XG4gIH1cblxuICBpZiAoIShidWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdidWZmZXIgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBBcnJheUJ1ZmZlcicpO1xuICB9XG5cbiAgbGV0IHBhcmVudCA9IHt9O1xuICBsZXQgY29udGFpbmVyID0ge307XG4gIGxldCBkYXRhID0gYnVmZmVyO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHR5cGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgdHlwZSA9IHR5cGVzW2ldO1xuICAgIGNvbnRhaW5lciA9IHBhcnNlKGRhdGEsIHBhcmVudCk7XG5cbiAgICBpZiAoY29udGFpbmVyW3R5cGVdKSB7XG4gICAgICBkYXRhID0gY29udGFpbmVyW3R5cGVdLmRhdGE7XG4gICAgICBwYXJlbnQgPSBjb250YWluZXJbdHlwZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdHlwZSB3YXMgbm90IGZvdW5kIGR1cmluZyBwYXJzZTogJHt0eXBlfWApO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGZvdW5kID0gY29udGFpbmVyW3R5cGVzW3R5cGVzLmxlbmd0aCAtIDFdXTtcbiAgcmV0dXJuIGJsb2NrUGFyc2VyLnBhcnNlKGZvdW5kKTtcbn1cbiJdLCJuYW1lcyI6WyJ0b1N0cmluZyIsImJsb2NrVHlwZXMiLCJibG9ja1BhcnNlciIsImlzVmFsaWRUeXBlIiwidHlwZSIsInBhcnNlIiwiY29udGFpbmVyIiwicGFyZW50IiwidmlldyIsIkRhdGFWaWV3IiwiYnl0ZU9mZnNldCIsImJsb2NrcyIsImJ5dGVMZW5ndGgiLCJzaXplIiwiZ2V0VWludDMyIiwiRXJyb3IiLCJzdGFydCIsImVuZCIsImRhdGEiLCJzbGljZSIsInBhcmVudFN0YXJ0IiwiZ2V0IiwidHlwZXMiLCJidWZmZXIiLCJBcnJheSIsImlzQXJyYXkiLCJzb21lIiwiVHlwZUVycm9yIiwiQXJyYXlCdWZmZXIiLCJpIiwibGVuZ3RoIiwiZm91bmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/mp4/index.js\n");

/***/ }),

/***/ "../js/cronus/playback/controllers/bufferController.js":
/*!*************************************************************!*\
  !*** ../js/cronus/playback/controllers/bufferController.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"bufferController\": function() { return /* binding */ bufferController; }\n/* harmony export */ });\n/* harmony import */ var hls_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hls.js */ \"../node_modules/hls.js/dist/hls.js\");\n/* harmony import */ var hls_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(hls_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var cronus_hacks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/hacks */ \"../js/cronus/hacks.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\nvar bufferController = /*#__PURE__*/function (_HlsJs$DefaultConfig$) {\n  _inherits(bufferController, _HlsJs$DefaultConfig$);\n\n  var _super = _createSuper(bufferController);\n\n  function bufferController() {\n    _classCallCheck(this, bufferController);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(bufferController, [{\n    key: \"flushLiveBackBuffer\",\n    value: // This function is exactly the same as the `super.flushLiveBackBuffer`\n    // except there is no early exit here in case of live playback.\n    function flushLiveBackBuffer() {\n      if (!cronus_hacks__WEBPACK_IMPORTED_MODULE_1__.BUFFER_CLEAN_UP_FOR_VODS) {\n        return _get(_getPrototypeOf(bufferController.prototype), \"flushLiveBackBuffer\", this).call(this);\n      } // clear back buffer for live only\n\n\n      if (!this._live) {// return;\n      }\n\n      var liveBackBufferLength = this.config.liveBackBufferLength;\n\n      if (!isFinite(liveBackBufferLength) || liveBackBufferLength < 0) {\n        return;\n      }\n\n      if (!this.media) {\n        // logger.error('flushLiveBackBuffer called without attaching media');\n        return;\n      }\n\n      var currentTime = this.media.currentTime;\n      var sourceBuffer = this.sourceBuffer;\n      var bufferTypes = Object.keys(sourceBuffer);\n      var targetBackBufferPosition = currentTime - Math.max(liveBackBufferLength, this._levelTargetDuration);\n\n      for (var index = bufferTypes.length - 1; index >= 0; index--) {\n        var bufferType = bufferTypes[index];\n        var sb = sourceBuffer[bufferType];\n\n        if (sb) {\n          var buffered = sb.buffered; // when target buffer start exceeds actual buffer start\n\n          if (buffered.length > 0 && targetBackBufferPosition > buffered.start(0)) {\n            // remove buffer up until current time minus minimum back buffer length (removing buffer too close to current\n            // time will lead to playback freezing)\n            // credits for level target duration - https://github.com/videojs/http-streaming/blob/3132933b6aa99ddefab29c10447624efd6fd6e52/src/segment-loader.js#L91\n            if (this.removeBufferRange(bufferType, sb, 0, targetBackBufferPosition)) {\n              this.hls.trigger((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.LIVE_BACK_BUFFER_REACHED), {\n                bufferEnd: targetBackBufferPosition\n              });\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"updateMediaElementDuration\",\n    value: function updateMediaElementDuration() {\n      if (!cronus_hacks__WEBPACK_IMPORTED_MODULE_1__.CHECK_BUFFER_BEFORE_DURATION_REDUCTION) {\n        return _get(_getPrototypeOf(bufferController.prototype), \"updateMediaElementDuration\", this).call(this);\n      }\n\n      var config = this.config,\n          levelDuration = this._levelDuration,\n          live = this._live;\n\n      if (levelDuration === null || !this.media || !this.mediaSource || !this.sourceBuffer || this.media.readyState === 0 || this.mediaSource.readyState !== 'open') {\n        return;\n      } // can't set duration whilst a buffer is updating\n\n\n      var updateInProgress = Object.values(this.sourceBuffer).some(function (sb) {\n        return sb && sb.updating;\n      });\n\n      if (updateInProgress) {\n        return;\n      }\n\n      var mediaDuration = this.media.duration;\n      var msDuration = this.mediaSource.duration;\n\n      if (!(live === true && config.liveDurationInfinity === true) && (levelDuration > msDuration && levelDuration > mediaDuration || !Number.isFinite(mediaDuration))) {\n        // Duration reductions that would truncate currently buffered media\n        // are disallowed. We have to use remove() to reduce the buffered\n        // range before updating duration.\n        Object.values(this.sourceBuffer).forEach(function (sb) {\n          if (!sb) {\n            return;\n          }\n\n          var buffered = sb.buffered;\n\n          if (buffered.length === 0) {\n            return;\n          }\n\n          var highestPresentationTimestamp = buffered.end(buffered.length - 1);\n\n          if (highestPresentationTimestamp <= levelDuration) {\n            return;\n          }\n\n          sb.remove(levelDuration, highestPresentationTimestamp);\n        });\n      }\n\n      _get(_getPrototypeOf(bufferController.prototype), \"updateMediaElementDuration\", this).call(this);\n    }\n  }]);\n\n  return bufferController;\n}((hls_js__WEBPACK_IMPORTED_MODULE_0___default().DefaultConfig.bufferController));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../js/cronus/playback/controllers/bufferController.js\n");

/***/ }),

/***/ "../js/cronus/playback/controllers/index.js":
/*!**************************************************!*\
  !*** ../js/cronus/playback/controllers/index.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bufferController": function() { return /* reexport safe */ cronus_playback_controllers_bufferController__WEBPACK_IMPORTED_MODULE_0__.bufferController; }
/* harmony export */ });
/* harmony import */ var cronus_playback_controllers_bufferController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/playback/controllers/bufferController */ "../js/cronus/playback/controllers/bufferController.js");


/***/ }),

/***/ "../js/cronus/playback/debug.js":
/*!**************************************!*\
  !*** ../js/cronus/playback/debug.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"init\": function() { return /* binding */ init; },\n/* harmony export */   \"reset\": function() { return /* binding */ reset; }\n/* harmony export */ });\n/* harmony import */ var player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! player-utils/object/get */ \"../node_modules/player-utils/object/get.js\");\n/* harmony import */ var cronus_tracking__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/tracking */ \"../js/cronus/tracking/index.js\");\n/* harmony import */ var shared_data_referrer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/data/referrer */ \"../js/shared/data/referrer.js\");\n/* harmony import */ var shared_data_domainMapping__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! shared/data/domainMapping */ \"../js/shared/data/domainMapping.js\");\n/* harmony import */ var shared_lib_logger_levels__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! shared/lib/logger/levels */ \"../js/shared/lib/logger/levels.js\");\n/* harmony import */ var shared_lib_logger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! shared/lib/logger */ \"../js/shared/lib/logger/index.js\");\n/* harmony import */ var cronus_store__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! cronus/store */ \"../js/cronus/store/index.js\");\n\n\n\n\n\n\n\nvar unsubscribes = {\n  debug: function debug() {}\n};\nvar MAX_STACK_LENGTH = 2000;\n\nfunction consoleLogger(_ref) {\n  var date = _ref.date,\n      source = _ref.source,\n      line = _ref.line,\n      data = _ref.data,\n      level = _ref.level;\n\n  if (typeof window.console === 'undefined') {\n    return;\n  }\n\n  var _ref2 = function () {\n    switch (level) {\n      case shared_lib_logger_levels__WEBPACK_IMPORTED_MODULE_4__[\"default\"].FATAL:\n      case shared_lib_logger_levels__WEBPACK_IMPORTED_MODULE_4__[\"default\"].ERROR:\n        return {\n          logger: console.error,\n          color: 'red'\n        };\n\n      case shared_lib_logger_levels__WEBPACK_IMPORTED_MODULE_4__[\"default\"].WARN:\n        return {\n          logger: console.warn,\n          color: 'brown'\n        };\n\n      case shared_lib_logger_levels__WEBPACK_IMPORTED_MODULE_4__[\"default\"].INFO:\n        return {\n          logger: console.info\n        };\n\n      case shared_lib_logger_levels__WEBPACK_IMPORTED_MODULE_4__[\"default\"].DEBUG:\n      default:\n        return {\n          logger: console.debug\n        };\n    }\n  }(),\n      logger = _ref2.logger,\n      _ref2$color = _ref2.color,\n      color = _ref2$color === void 0 ? 'black' : _ref2$color;\n\n  var args = [\"%c[\".concat(new Date(date).toISOString().slice(-13, -1), \"] %c\").concat(source, \": %c\").concat(line), 'color: #cecece', \"font-weight: 600; color: \".concat(color), 'font-weight: 300'];\n\n  if (typeof data !== 'undefined') {\n    args.push(data);\n  }\n\n  logger.apply(void 0, args);\n}\n/**\n * @param {string=} message\n * @param {string=} stack\n */\n\n\nfunction sendUnhandledExceptionEvent() {\n  var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var stack = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  cronus_tracking__WEBPACK_IMPORTED_MODULE_1__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_1__[\"default\"].TYPES.unhandledException, {\n    message: message,\n    stack: stack.substring(0, MAX_STACK_LENGTH)\n  });\n}\n\nfunction decorateOnError() {\n  var oldOnError = window.onerror;\n\n  window.onerror = function handleError(errorMsg, url, lineNumber, colno, error) {\n    shared_lib_logger__WEBPACK_IMPORTED_MODULE_5__[\"default\"].fatal({\n      source: 'jserror',\n      line: \"\".concat(errorMsg, \" Cannot continue.\"),\n      data: {\n        url: url,\n        lineNumber: lineNumber\n      }\n    });\n    var message = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(error, 'message', errorMsg);\n    var stack = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(error, 'stack', '');\n    sendUnhandledExceptionEvent(message, stack);\n\n    if (oldOnError) {\n      return oldOnError(errorMsg, url, lineNumber);\n    }\n\n    return false;\n  };\n}\n\nfunction init() {\n  if (shared_data_referrer__WEBPACK_IMPORTED_MODULE_2__[\"default\"].includes(\"\".concat(shared_data_domainMapping__WEBPACK_IMPORTED_MODULE_3__[\"default\"].config.siteLocal, \"/embed/test\"))) {\n    shared_lib_logger__WEBPACK_IMPORTED_MODULE_5__[\"default\"].addTransport(function (_ref3) {\n      var date = _ref3.date,\n          source = _ref3.source,\n          line = _ref3.line,\n          data = _ref3.data,\n          level = _ref3.level;\n      var origin;\n\n      try {\n        var url = new URL(shared_data_referrer__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\n        origin = url.origin;\n      } catch (e) {\n        origin = '';\n      }\n\n      window.parent.postMessage(JSON.stringify({\n        mte: [date, source, line, data, level]\n      }), origin);\n    });\n  }\n\n  var _wrappedStore$getStat = cronus_store__WEBPACK_IMPORTED_MODULE_6__.wrappedStore.getState(),\n      debugMode = _wrappedStore$getStat.settings.debug;\n\n  if (debugMode) {\n    shared_lib_logger__WEBPACK_IMPORTED_MODULE_5__[\"default\"].addTransport(consoleLogger);\n  }\n\n  decorateOnError(); // The \"unhandledrejection\" event is sent to the global scope of a script\n  // when a JavaScript Promise that has no rejection handler is rejected.\n\n  window.addEventListener('unhandledrejection', function (ev) {\n    var reason = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(ev, 'reason', '');\n    var promise = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(ev, 'promise');\n\n    if (promise) {\n      promise.catch(function (e) {\n        var message = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e, 'message', reason);\n        var stack = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e, 'stack', '');\n        sendUnhandledExceptionEvent(message, stack);\n      });\n    } else {\n      sendUnhandledExceptionEvent(reason);\n    }\n  });\n  unsubscribes.debug = cronus_store__WEBPACK_IMPORTED_MODULE_6__.wrappedStore.subscribe('settings.debug', function (state) {\n    if (state) {\n      shared_lib_logger__WEBPACK_IMPORTED_MODULE_5__[\"default\"].addTransport(consoleLogger);\n    } else {\n      shared_lib_logger__WEBPACK_IMPORTED_MODULE_5__[\"default\"].removeTransport(consoleLogger);\n    }\n  });\n\n  if (!window.getPlayerLog) {\n    window.getPlayerLog = function () {\n      return shared_lib_logger__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getLogs();\n    };\n  }\n}\nfunction reset() {\n  unsubscribes.debug();\n  unsubscribes = {\n    debug: function debug() {}\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../js/cronus/playback/debug.js\n");

/***/ }),

/***/ "../js/cronus/playback/index.js":
/*!**************************************!*\
  !*** ../js/cronus/playback/index.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var hls_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hls.js */ \"../node_modules/hls.js/dist/hls.js\");\n/* harmony import */ var hls_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(hls_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! player-utils/object/get */ \"../node_modules/player-utils/object/get.js\");\n/* harmony import */ var player_utils_object_pick__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! player-utils/object/pick */ \"../node_modules/player-utils/object/pick.js\");\n/* harmony import */ var shared_lib_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! shared/lib/logger */ \"../js/shared/lib/logger/index.js\");\n/* harmony import */ var shared_ui_lib_toggleFullScreen__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! shared/ui/lib/toggleFullScreen */ \"../js/shared/ui/lib/toggleFullScreen.js\");\n/* harmony import */ var shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! shared/store/actions/playback */ \"../js/shared/store/actions/playback.js\");\n/* harmony import */ var cronus_store_actions_playback__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! cronus/store/actions/playback */ \"../js/cronus/store/actions/playback.js\");\n/* harmony import */ var shared_store_actions_content__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! shared/store/actions/content */ \"../js/shared/store/actions/content.js\");\n/* harmony import */ var shared_store_actions_qos__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! shared/store/actions/qos */ \"../js/shared/store/actions/qos.js\");\n/* harmony import */ var shared_store_actions_captionSettings__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! shared/store/actions/captionSettings */ \"../js/shared/store/actions/captionSettings.js\");\n/* harmony import */ var cronus_store_actions_qos__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! cronus/store/actions/qos */ \"../js/cronus/store/actions/qos.js\");\n/* harmony import */ var cronus_store_actions_tracking__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! cronus/store/actions/tracking */ \"../js/cronus/store/actions/tracking.js\");\n/* harmony import */ var shared_store_actions_debug__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! shared/store/actions/debug */ \"../js/shared/store/actions/debug.js\");\n/* harmony import */ var cronus_store_selectors__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! cronus/store/selectors */ \"../js/cronus/store/selectors/index.js\");\n/* harmony import */ var shared_store_selectors__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! shared/store/selectors */ \"../js/shared/store/selectors/index.js\");\n/* harmony import */ var shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! shared/ui/components/DebugOverlayConsts */ \"../js/shared/ui/components/DebugOverlayConsts.js\");\n/* harmony import */ var shared_ui_events__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! shared/ui/events */ \"../js/shared/ui/events.js\");\n/* harmony import */ var cronus_consts__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! cronus/consts */ \"../js/cronus/consts.js\");\n/* harmony import */ var cronus_store__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! cronus/store */ \"../js/cronus/store/index.js\");\n/* harmony import */ var cronus_embedApi__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! cronus/embedApi */ \"../js/cronus/embedApi/index.js\");\n/* harmony import */ var cronus_logic_sdcdnHandler__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! cronus/logic/sdcdnHandler */ \"../js/cronus/logic/sdcdnHandler.js\");\n/* harmony import */ var cronus_logic_seekPosition__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! cronus/logic/seekPosition */ \"../js/cronus/logic/seekPosition.js\");\n/* harmony import */ var cronus_playback_loaders__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! cronus/playback/loaders */ \"../js/cronus/playback/loaders/index.js\");\n/* harmony import */ var cronus_playback_controllers__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! cronus/playback/controllers */ \"../js/cronus/playback/controllers/index.js\");\n/* harmony import */ var cronus_playback_vtt__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! cronus/playback/vtt */ \"../js/cronus/playback/vtt.js\");\n/* harmony import */ var cronus_tracking__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! cronus/tracking */ \"../js/cronus/tracking/index.js\");\n/* harmony import */ var cronus_reporting__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! cronus/reporting */ \"../js/cronus/reporting/index.js\");\n/* harmony import */ var cronus_playback_stats__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! cronus/playback/stats */ \"../js/cronus/playback/stats/index.js\");\n/* harmony import */ var cronus_config_initial__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! cronus/config/initial */ \"../js/cronus/config/initial.js\");\n/* harmony import */ var shared_lib_util_segmentParser__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! shared/lib/util/segmentParser */ \"../js/shared/lib/util/segmentParser.js\");\n/* harmony import */ var cronus_hacks__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! cronus/hacks */ \"../js/cronus/hacks.js\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar debugLogger = (0,shared_lib_logger__WEBPACK_IMPORTED_MODULE_3__.createLoggerForModule)('playback/index');\nvar source = 'hls.js';\nvar decodeErrorTimeoutInMs = 2000;\nvar $video = null;\nvar hlsInstance = null;\nvar callbacks = {};\nvar inited = false;\nvar unsubscribe = {};\nvar currentProvider = null;\nvar placeholderProvider = '__host__';\n\nvar urlTransformer = function urlTransformer(url) {\n  var parser = new URL(currentProvider.url);\n  var hostAndPath = \"\".concat(parser.host).concat(parser.pathname);\n  return url.replace(placeholderProvider, hostAndPath.replace(/\\/$/, ''));\n};\n\nvar forcedPositions = {\n  top: 2\n};\nvar parsedCues = {};\nvar savedSeekPosition = null;\nvar savedQuality = null;\nvar savedSubtitle = null;\nvar savedAudio = null;\n/**\n * @param {string|number} trackId\n * @returns {Array.<VTTCue>}\n */\n\nfunction getParsedCues(trackId) {\n  return parsedCues[trackId] || [];\n}\n/**\n * @param {string|number} trackId\n * @param {Array.<VTTCue>} cues\n */\n\n\nfunction replaceParsedCues(trackId, cues) {\n  parsedCues[trackId] = cues;\n}\n/**\n * @param {string|number} trackId\n * @param {Array.<VTTCue>} cues\n */\n\n\nfunction appendParsedCues(trackId, cues) {\n  var unique = function unique(curr, idx, arr) {\n    return arr.findIndex(function (any) {\n      return any.id === curr.id;\n    }) === idx;\n  };\n\n  parsedCues[trackId] = [].concat(_toConsumableArray(getParsedCues(trackId)), _toConsumableArray(cues)).filter(unique);\n}\n\nfunction clearParsedCues() {\n  parsedCues = {};\n}\n\nfunction onSlowDownload(_ref) {\n  var request = _ref.request,\n      response = _ref.response,\n      total = _ref.total,\n      isEcdn = _ref.isEcdn;\n  var msg = \"Total: \".concat(total, \"ms Req: \").concat(request, \"ms Res: \").concat(response, \"ms\");\n  cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,shared_store_actions_debug__WEBPACK_IMPORTED_MODULE_12__.addSlowChunkWarning)({\n    level: shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_15__.STATUS.WARNING,\n    timeStamp: Date.now(),\n    msg: msg,\n    request: request,\n    response: response,\n    total: total,\n    isEcdn: isEcdn\n  }));\n}\n\nfunction getLineForPosition(position) {\n  if (position !== 'default' && forcedPositions[position]) {\n    return forcedPositions[position];\n  }\n\n  return cronus_consts__WEBPACK_IMPORTED_MODULE_17__.CAPTION_OFFSET;\n}\n\nfunction onEmptyChunk(_ref2) {\n  var uri = _ref2.detail.uri;\n  cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,shared_store_actions_debug__WEBPACK_IMPORTED_MODULE_12__.addChunkEmptyWarning)({\n    level: shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_15__.STATUS.WARNING,\n    timeStamp: Date.now(),\n    msg: /\\.m4v$/.test(uri) ? 'Video chunk empty' : /\\.m4a$/.test(uri) ? 'Audio chunk empty' : 'Unknown'\n  }));\n}\n\nfunction version() {\n  return (hls_js__WEBPACK_IMPORTED_MODULE_0___default().version);\n}\n\nfunction onDurationChange() {\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.getState();\n  var liveStatus = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_13__.getLiveStatus)(state);\n\n  if (liveStatus) {\n    cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,shared_store_actions_content__WEBPACK_IMPORTED_MODULE_7__.setDuration)(0));\n    cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,shared_store_actions_content__WEBPACK_IMPORTED_MODULE_7__.setTrimmedDuration)(0));\n    return;\n  }\n\n  var _$video = $video,\n      duration = _$video.duration;\n  cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,cronus_store_actions_playback__WEBPACK_IMPORTED_MODULE_6__.setVideoTagDuration)(duration));\n}\n\nfunction onCanPlay() {\n  cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_5__.setBufferEmpty)(false));\n  callbacks.onLoadingChange(false);\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.getState();\n  var canPlay = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_13__.getCanPlay)(state);\n\n  if (!canPlay) {\n    cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,cronus_store_actions_playback__WEBPACK_IMPORTED_MODULE_6__.setCanPlay)(true));\n  }\n}\n\nfunction getPlayingChangeData() {\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.getState();\n\n  var _getActiveMediaIdAsOb = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_13__.getActiveMediaIdAsObject)(state),\n      id = _getActiveMediaIdAsOb.id;\n\n  var selectedAudioTrack = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_14__.getSelectedAudioTrack)(state);\n  var _$video2 = $video,\n      paused = _$video2.paused;\n  return {\n    id: id,\n    playing: !paused,\n    multiaudio: {\n      language: (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(selectedAudioTrack, 'language', undefined),\n      country: (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(selectedAudioTrack, 'country', '00')\n    }\n  };\n}\n\nfunction onPlay() {\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.getState();\n\n  if (!(0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_13__.isPlaying)(state)) {\n    cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_5__.togglePlaying)(true));\n  }\n\n  seekToLive();\n  cronus_embedApi__WEBPACK_IMPORTED_MODULE_19__.sendEvent(cronus_embedApi__WEBPACK_IMPORTED_MODULE_19__.EVENTS.playing, true);\n  cronus_reporting__WEBPACK_IMPORTED_MODULE_26__[\"default\"].send(cronus_reporting__WEBPACK_IMPORTED_MODULE_26__[\"default\"].TYPES.playingChange, getPlayingChangeData(true));\n}\n\nfunction onPause() {\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.getState();\n\n  if ((0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_13__.isPlaying)(state)) {\n    cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_5__.togglePlaying)(false));\n  }\n\n  cronus_embedApi__WEBPACK_IMPORTED_MODULE_19__.sendEvent(cronus_embedApi__WEBPACK_IMPORTED_MODULE_19__.EVENTS.playing, false);\n  cronus_reporting__WEBPACK_IMPORTED_MODULE_26__[\"default\"].send(cronus_reporting__WEBPACK_IMPORTED_MODULE_26__[\"default\"].TYPES.playingChange, getPlayingChangeData(false));\n}\n\nfunction onWaiting() {\n  cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_5__.setBufferEmpty)(true));\n  callbacks.onLoadingChange(true);\n\n  var _getCurrentQuality = getCurrentQuality(),\n      quality = _getCurrentQuality.quality;\n\n  cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].TYPES.bufferingStarted, {\n    currentBitrateInKbps: (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(quality, 'bitrate', 0) / 1000,\n    currentHeight: (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(quality, 'height', 0)\n  });\n  cronus_reporting__WEBPACK_IMPORTED_MODULE_26__[\"default\"].aggregate(cronus_reporting__WEBPACK_IMPORTED_MODULE_26__[\"default\"].TYPES.bufferingStarted);\n  cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,cronus_store_actions_tracking__WEBPACK_IMPORTED_MODULE_11__.setBufferingStartTime)(performance.now()));\n}\n\nfunction onPlaying() {\n  cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_5__.setBufferEmpty)(false));\n  callbacks.onLoadingChange(false);\n  cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].once(cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].TYPES.playbackStarted).send({\n    streamType: 'hls/fmp4'\n  });\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.getState();\n  var selectedSubtitle = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_14__.getSelectedSubtitleTrack)(state);\n\n  if (selectedSubtitle) {\n    var isBroadcasterSelection = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_14__.getClosedCaptionSelection)(state) === 'broadcaster';\n    cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].once(cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].TYPES.playbackStartedWithCC).send({\n      isBroadcasterSelection: isBroadcasterSelection,\n      language: \"\".concat(selectedSubtitle.language, \"-\").concat(selectedSubtitle.country)\n    });\n  }\n\n  var now = Date.now();\n\n  var _getCurrentQuality2 = getCurrentQuality(),\n      quality = _getCurrentQuality2.quality;\n\n  var bufferingStartTime = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_13__.getBufferingStartTime)(state);\n\n  if (bufferingStartTime !== undefined) {\n    cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].TYPES.bufferingCompleted, {\n      currentBitrateInKbps: (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(quality, 'bitrate', 0) / 1000,\n      currentHeight: (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(quality, 'height', 0),\n      timeSpent: now - bufferingStartTime\n    });\n    cronus_reporting__WEBPACK_IMPORTED_MODULE_26__[\"default\"].aggregate(cronus_reporting__WEBPACK_IMPORTED_MODULE_26__[\"default\"].TYPES.bufferingCompleted);\n    cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,cronus_store_actions_tracking__WEBPACK_IMPORTED_MODULE_11__.setBufferingStartTime)(undefined));\n  }\n}\n\nfunction seek(position) {\n  var initiator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : shared_ui_events__WEBPACK_IMPORTED_MODULE_16__.EVENT_INITIATOR.USER;\n\n  if ((0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_13__.getEnded)(cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.getState())) {\n    cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_5__.setEnded)(false));\n  }\n\n  if ((0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_13__.getMediaType)(cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.getState()) !== shared_store_actions_content__WEBPACK_IMPORTED_MODULE_7__.MEDIA_TYPES.live) {\n    cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].TYPES.seekStarted);\n    cronus_embedApi__WEBPACK_IMPORTED_MODULE_19__.sendEvent(cronus_embedApi__WEBPACK_IMPORTED_MODULE_19__.EVENTS.seekStarted, {\n      from: (0,cronus_logic_seekPosition__WEBPACK_IMPORTED_MODULE_21__.getRelativeSeekPositionInMs)($video.currentTime * 1000) / 1000,\n      to: (0,cronus_logic_seekPosition__WEBPACK_IMPORTED_MODULE_21__.getRelativeSeekPositionInMs)(position * 1000) / 1000,\n      initiator: initiator\n    });\n  }\n\n  $video.currentTime = position;\n}\n\nfunction play() {\n  if ((0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_13__.getEnded)(cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.getState())) {\n    cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_5__.setEnded)(false));\n  }\n\n  cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_5__.togglePlaying)(true));\n  return $video.play().catch(handlePlayError);\n}\n\nfunction pause() {\n  cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_5__.togglePlaying)(false));\n  $video.pause();\n}\n\nfunction getCurrentQuality() {\n  var currentId = hlsInstance.currentLevel;\n  return {\n    id: currentId,\n    quality: currentId !== -1 ? hlsInstance.levels[currentId] : {}\n  };\n}\n\nfunction getQualities() {\n  if (!hlsInstance) {\n    return [];\n  }\n\n  return hlsInstance.levels.filter(function (_ref3) {\n    var videoCodec = _ref3.videoCodec;\n    return !!videoCodec;\n  }).map(function (level, idx) {\n    return {\n      id: idx,\n      codec: level.videoCodec,\n      width: level.width,\n      height: level.height,\n      bitrate: level.bitrate,\n      active: hlsInstance.currentLevel === idx\n    };\n  }).sort(function (a, b) {\n    return b.height - a.height;\n  });\n}\n\nfunction getSubtitleTracks() {\n  if ((0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_28__.getInitialConfig)('externalvtt') || !hlsInstance) {\n    return [];\n  }\n\n  return hlsInstance.subtitleTracks;\n}\n\nfunction setSubtitleTrack(id) {\n  if (!hlsInstance) {\n    return;\n  }\n\n  hlsInstance.subtitleTrack = id;\n}\n\nfunction disableSubtitles() {\n  if (!hlsInstance) {\n    return;\n  }\n\n  hlsInstance.subtitleTrack = -1;\n}\n\nfunction getAudioTracks() {\n  if (!hlsInstance || hlsInstance.audioTracks.length === 0) {\n    return [];\n  }\n\n  return hlsInstance.audioTracks.filter(function (track) {\n    return track.name !== 'main';\n  }).map(function (track) {\n    return _objectSpread(_objectSpread({}, track), {}, {\n      active: track.id === hlsInstance.audioTrack\n    });\n  });\n}\n\nfunction setAudioTrack(id) {\n  if (!hlsInstance) {\n    return;\n  }\n\n  hlsInstance.audioTrack = id;\n}\n/**\n * @returns {string|undefined}\n */\n\n\nfunction getSource() {\n  if (!hlsInstance) {\n    return undefined;\n  }\n\n  return hlsInstance.url;\n}\n\nfunction setQuality(id) {\n  if (!hlsInstance) {\n    return;\n  }\n\n  var currId = hlsInstance.currentLevel;\n\n  if (currId !== -1) {\n    var level = hlsInstance.levels[currId];\n    cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].TYPES.qualityChangeStarted, {\n      fromBitrateInKbps: (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(level, 'bitrate', 0) / 1000,\n      fromHeight: (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(level, 'height', 0)\n    });\n    cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,cronus_store_actions_tracking__WEBPACK_IMPORTED_MODULE_11__.setQualityChangeStartTime)(performance.now()));\n  }\n\n  hlsInstance.currentLevel = id;\n  cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,cronus_store_actions_qos__WEBPACK_IMPORTED_MODULE_10__.setSelectedQuality)(id));\n}\n\nfunction onVolumeChange(volume) {\n  $video.volume = volume / 100;\n}\n\nfunction onPlaybackSpeedChange(speed) {\n  if (speed < 0.5 && speed > 2) {\n    return;\n  }\n\n  $video.playbackRate = speed;\n}\n\nfunction onLiveStatusChange(isLive) {\n  if (isLive !== undefined) {\n    cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].TYPES.liveStatusChanged, {\n      isLive: isLive\n    });\n  }\n}\n\nfunction onExternalVtt(_ref4) {\n  var hasExternalVtt = _ref4.hasExternalVtt,\n      cues = _ref4.vtt;\n\n  if (!hlsInstance) {\n    return;\n  }\n\n  if (hasExternalVtt) {\n    hlsInstance.enableWebVTT = false;\n\n    if (!cronus_consts__WEBPACK_IMPORTED_MODULE_17__.USE_CUSTOM_CAPTION_RENDERER) {\n      (0,cronus_playback_vtt__WEBPACK_IMPORTED_MODULE_24__.createExternalTrack)($video);\n      (0,cronus_playback_vtt__WEBPACK_IMPORTED_MODULE_24__.addExternalCues)(cues);\n    } else {\n      var vttCues = cues.map(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 3),\n            start = _ref6[0],\n            end = _ref6[1],\n            text = _ref6[2];\n\n        return new VTTCue(start, end, text);\n      });\n      replaceParsedCues('external', vttCues);\n      updateActiveCues();\n    }\n  }\n}\n\nfunction getStatsData() {\n  var _getTelemetryData = (0,cronus_playback_stats__WEBPACK_IMPORTED_MODULE_27__.getTelemetryData)(),\n      shortMean = _getTelemetryData.shortMean,\n      longMean = _getTelemetryData.longMean,\n      waitingTimeInSec = _getTelemetryData.waitingTimeInSec;\n\n  var _getCurrentQuality3 = getCurrentQuality(),\n      quality = _getCurrentQuality3.quality,\n      id = _getCurrentQuality3.id;\n\n  return {\n    throughput: {\n      shortMean: shortMean,\n      longMean: longMean,\n      waitingTimeInSec: waitingTimeInSec\n    },\n    sourceStreamVersion: id,\n    bitrate: (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(quality, 'bitrate', 0) / 1000,\n    filters: {\n      names: ['N/A']\n    }\n  };\n}\n\nfunction onTimeUpdate() {\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.getState();\n\n  if (!(0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_13__.getFirstTimeUpdateReceived)(state)) {\n    cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_5__.setFirstTimeUpdateReceived)(true));\n  }\n\n  debugLogger.debug('timeupdate', $video.currentTime);\n  updateStats();\n  updateActiveCues();\n  cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_5__.setCurrentTime)($video.currentTime));\n}\n\nfunction unload() {\n  debugLogger.info('unload');\n  currentProvider = null;\n  (0,cronus_playback_stats__WEBPACK_IMPORTED_MODULE_27__.resetBuffered)();\n  removeVideoTagEventListeners();\n  destroyHlsInstance();\n  clearParsedCues();\n}\n\nfunction load(_ref7) {\n  var masterPlaylist = _ref7.masterPlaylist,\n      providerQueryParam = _ref7.providerQueryParam,\n      provider = _ref7.provider;\n  debugLogger.info('load', {\n    masterPlaylist: masterPlaylist,\n    providerQueryParam: providerQueryParam,\n    provider: provider\n  });\n  currentProvider = provider;\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.getState();\n\n  if ((0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_13__.getFirstTimeUpdateReceived)(state)) {\n    cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_5__.setFirstTimeUpdateReceived)(false));\n  }\n\n  createNewHlsInstance();\n  addVideoTagEventListeners();\n  return new Promise(function (resolve) {\n    hlsInstance.once((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.MEDIA_ATTACHED), function () {\n      hlsInstance.once((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.MANIFEST_PARSED), function () {\n        // We have to delay this debug log because right now the\n        // `hlsInstance.subtitleTracks` array is empty\n        setTimeout(function () {\n          var _hlsInstance = hlsInstance,\n              url = _hlsInstance.url,\n              _hlsInstance$levels = _hlsInstance.levels,\n              levels = _hlsInstance$levels === void 0 ? [] : _hlsInstance$levels,\n              _hlsInstance$audioTra = _hlsInstance.audioTracks,\n              audioTracks = _hlsInstance$audioTra === void 0 ? [] : _hlsInstance$audioTra,\n              _hlsInstance$subtitle = _hlsInstance.subtitleTracks,\n              subtitleTracks = _hlsInstance$subtitle === void 0 ? [] : _hlsInstance$subtitle;\n          debugLogger.debug('master manifest parsed', {\n            url: url,\n            levels: levels.map(function (level, id) {\n              return _objectSpread({\n                id: id\n              }, (0,player_utils_object_pick__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(level, ['bitrate', 'height', 'width', 'audioCodec', 'videoCodec']));\n            }),\n            audioTracks: audioTracks.map(function (track, id) {\n              return _objectSpread({\n                id: id\n              }, (0,player_utils_object_pick__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(track, ['audioCodec', 'autoselect', 'default', 'lang', 'name', 'type']));\n            }),\n            subtitleTracks: subtitleTracks.map(function (track, id) {\n              return _objectSpread({\n                id: id\n              }, (0,player_utils_object_pick__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(track, ['autoselect', 'default', 'lang', 'name', 'type']));\n            })\n          }, true);\n        }, 0);\n        resolve();\n      });\n      var parser = new URL(masterPlaylist);\n      parser.searchParams.set(providerQueryParam, placeholderProvider);\n      var state = cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.getState();\n\n      if ((0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_14__.isVideoTrackDisabled)(state)) {\n        parser.searchParams.set('audioOnly', true);\n      }\n\n      hlsInstance.loadSource(parser.toString());\n    });\n    hlsInstance.attachMedia($video);\n  });\n}\n\nfunction onSeeked() {\n  if ((0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_13__.getMediaType)(cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.getState()) !== shared_store_actions_content__WEBPACK_IMPORTED_MODULE_7__.MEDIA_TYPES.live) {\n    cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].TYPES.seekCompleted);\n  }\n\n  cronus_embedApi__WEBPACK_IMPORTED_MODULE_19__.sendEvent(cronus_embedApi__WEBPACK_IMPORTED_MODULE_19__.EVENTS.seekCompleted, true);\n}\n\nfunction onEnded() {\n  cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].TYPES.endOfStream);\n  cronus_embedApi__WEBPACK_IMPORTED_MODULE_19__.sendEvent(cronus_embedApi__WEBPACK_IMPORTED_MODULE_19__.EVENTS.finished, true);\n  cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_5__.togglePlaying)(false));\n  cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_5__.setEnded)(true));\n}\n\nfunction onVideoTagError() {\n  if (!($video && $video.error)) {\n    return;\n  }\n\n  var _$video$error = $video.error,\n      code = _$video$error.code,\n      message = _$video$error.message;\n  cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].TYPES.mediaError, {\n    errorCode: code,\n    errorMessage: message,\n    provider: (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(currentProvider, 'url')\n  });\n  debugLogger.error('videotag error', {\n    code: code,\n    message: message\n  });\n\n  if (code === MediaError.MEDIA_ERR_DECODE) {\n    setTimeout(callbacks.onVideoTagDecodeError, decodeErrorTimeoutInMs);\n  }\n}\n\nfunction createNewHlsInstance() {\n  if (hlsInstance) {\n    return;\n  }\n\n  var replaceDefaultBufferController = cronus_hacks__WEBPACK_IMPORTED_MODULE_30__.CHECK_BUFFER_BEFORE_DURATION_REDUCTION || cronus_hacks__WEBPACK_IMPORTED_MODULE_30__.BUFFER_CLEAN_UP_FOR_VODS;\n  hlsInstance = new (hls_js__WEBPACK_IMPORTED_MODULE_0___default())({\n    bufferController: replaceDefaultBufferController ? cronus_playback_controllers__WEBPACK_IMPORTED_MODULE_23__.bufferController : (hls_js__WEBPACK_IMPORTED_MODULE_0___default().DefaultConfig.bufferController),\n    manifestLoadingMaxRetry: Infinity,\n    levelLoadingMaxRetry: Infinity,\n    manifestLoadingMaxRetryTimeout: 16 * 1000,\n    levelLoadingMaxRetryTimeout: 16 * 1000,\n    debug: {\n      debug: function debug(line) {\n        shared_lib_logger__WEBPACK_IMPORTED_MODULE_3__[\"default\"].debug({\n          line: line,\n          source: source\n        });\n      },\n      log: function log(line) {\n        shared_lib_logger__WEBPACK_IMPORTED_MODULE_3__[\"default\"].info({\n          line: line,\n          source: source\n        });\n      },\n      info: function info(line) {\n        shared_lib_logger__WEBPACK_IMPORTED_MODULE_3__[\"default\"].info({\n          line: line,\n          source: source\n        });\n      },\n      warn: function warn(line) {\n        shared_lib_logger__WEBPACK_IMPORTED_MODULE_3__[\"default\"].warn({\n          line: line,\n          source: source\n        });\n      },\n      error: function error(line) {\n        shared_lib_logger__WEBPACK_IMPORTED_MODULE_3__[\"default\"].error({\n          line: line,\n          source: source\n        });\n      }\n    },\n    pLoader: (0,cronus_playback_loaders__WEBPACK_IMPORTED_MODULE_22__.pLoader)(debugLogger),\n    fLoader: (0,cronus_playback_loaders__WEBPACK_IMPORTED_MODULE_22__.fLoader)(urlTransformer, debugLogger),\n    enableWebVTT: !(0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_28__.getInitialConfig)('externalvtt'),\n    autoStartLoad: false,\n    // Sets the maximum length of the buffer, in seconds, to keep during a live\n    // stream. Any video buffered past this time will be evicted. Infinity\n    // means no restriction on back buffer length; 0 keeps the minimum amount.\n    // The minimum amount is equal to the target duration of a segment to\n    // ensure that current playback is not interrupted.\n    liveBackBufferLength: 10,\n    renderTextTracksNatively: !cronus_consts__WEBPACK_IMPORTED_MODULE_17__.USE_CUSTOM_CAPTION_RENDERER\n  });\n  addHlsJsEventListeners();\n}\n\nfunction destroyHlsInstance() {\n  if (!hlsInstance) {\n    return;\n  }\n\n  removeHlsJsEventListeners();\n  hlsInstance.destroy();\n  hlsInstance = null;\n}\n\nfunction onInitPTSFound(event, _ref8) {\n  var id = _ref8.id,\n      initPTS = _ref8.initPTS;\n\n  if (id === 'main') {\n    cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,cronus_store_actions_playback__WEBPACK_IMPORTED_MODULE_6__.setInitPTS)(initPTS));\n  }\n}\n\nfunction getIdxByQualityParam(param, highestToLowest) {\n  var len = highestToLowest.length;\n\n  switch (param) {\n    case 'high':\n      return highestToLowest[0];\n\n    case 'med':\n      return highestToLowest[Math.floor(len / 2)];\n\n    case 'low':\n      return highestToLowest[len - 1];\n    // no default\n  }\n}\n\nfunction onManifestLoaded() {\n  cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].once(cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].TYPES.streamTypeSelected).send();\n  var isAudioOnly = !(0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(hlsInstance, 'levels.0.videoCodec', false);\n  cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,shared_store_actions_content__WEBPACK_IMPORTED_MODULE_7__.toggleAudioOnly)(isAudioOnly));\n  var isVideoOnly = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(hlsInstance, 'audioTracks', []).length === 0;\n  cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,shared_store_actions_content__WEBPACK_IMPORTED_MODULE_7__.toggleVideoOnly)(isVideoOnly));\n  debugLogger.debug('start loading', {\n    savedQuality: savedQuality,\n    savedSubtitle: savedSubtitle,\n    savedAudio: savedAudio,\n    savedSeekPosition: savedSeekPosition\n  });\n\n  if (typeof savedQuality === 'number') {\n    hlsInstance.startLevel = savedQuality;\n    hlsInstance.currentLevel = savedQuality;\n    savedQuality = null;\n  } else {\n    var initialQuality = (0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_28__.getInitialConfig)('initialquality');\n\n    if (initialQuality) {\n      var _getIdxByQualityParam = getIdxByQualityParam(initialQuality, getQualities()),\n          id = _getIdxByQualityParam.id;\n\n      hlsInstance.startLevel = id;\n    }\n\n    var forcedQuality = (0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_28__.getInitialConfig)('forcedquality');\n\n    if (forcedQuality) {\n      var _getIdxByQualityParam2 = getIdxByQualityParam(forcedQuality, getQualities()),\n          _id = _getIdxByQualityParam2.id;\n\n      hlsInstance.startLevel = _id;\n      hlsInstance.currentLevel = _id;\n      cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,cronus_store_actions_qos__WEBPACK_IMPORTED_MODULE_10__.setSelectedQuality)(_id));\n    }\n  }\n\n  if (typeof savedSubtitle === 'number') {\n    hlsInstance.subtitleTrack = savedSubtitle;\n    savedSubtitle = null;\n  }\n\n  if (typeof savedAudio === 'number') {\n    hlsInstance.audioTrack = savedAudio;\n    savedAudio = null;\n  }\n\n  hlsInstance.startLoad(savedSeekPosition || -1);\n  savedSeekPosition = null;\n}\n\nfunction addVideoTagEventListeners() {\n  if (!$video) {\n    return;\n  }\n\n  $video.addEventListener('timeupdate', onTimeUpdate);\n  $video.addEventListener('durationchange', onDurationChange);\n  $video.addEventListener('canplay', onCanPlay);\n  $video.addEventListener('play', onPlay);\n  $video.addEventListener('pause', onPause);\n  $video.addEventListener('playing', onPlaying);\n  $video.addEventListener('waiting', onWaiting);\n  $video.addEventListener('seeked', onSeeked);\n  $video.addEventListener('ended', onEnded);\n  $video.addEventListener('error', onVideoTagError);\n}\n\nfunction removeVideoTagEventListeners() {\n  if (!$video) {\n    return;\n  }\n\n  $video.removeEventListener('timeupdate', onTimeUpdate);\n  $video.removeEventListener('durationchange', onDurationChange);\n  $video.removeEventListener('canplay', onCanPlay);\n  $video.removeEventListener('play', onPlay);\n  $video.removeEventListener('pause', onPause);\n  $video.removeEventListener('playing', onPlaying);\n  $video.removeEventListener('waiting', onWaiting);\n  $video.removeEventListener('seeked', onSeeked);\n  $video.removeEventListener('ended', onEnded);\n  $video.removeEventListener('error', onVideoTagError);\n}\n\nfunction addHlsJsEventListeners() {\n  hlsInstance.on((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.INIT_PTS_FOUND), onInitPTSFound);\n  hlsInstance.on((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.MANIFEST_LOADED), onManifestLoaded);\n  hlsInstance.on((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.LEVEL_SWITCHED), onLevelSwitch);\n  hlsInstance.on((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.AUDIO_TRACK_SWITCHED), onAudioTrackSwitch);\n  hlsInstance.on((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.FRAG_BUFFERED), onFragBuffered);\n  hlsInstance.on((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.SUBTITLE_FRAG_PROCESSED), cronus_playback_stats__WEBPACK_IMPORTED_MODULE_27__.onSubtitleFragmentProcessed);\n  hlsInstance.on((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.SUBTITLE_TRACK_SWITCH), onSubtitleTrackSwitch);\n  hlsInstance.on((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.ERROR), callbacks.onError);\n  hlsInstance.on((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.FRAG_PARSING_DATA), onFragParsingData);\n  hlsInstance.on((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.FRAG_LOADED), onFragLoaded);\n  hlsInstance.on((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.BUFFER_APPENDED), onBufferAppended);\n  hlsInstance.on((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.BUFFER_FLUSHED), onBufferFlushed);\n  hlsInstance.on((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.CUES_PARSED), onCuesParsed);\n}\n\nfunction removeHlsJsEventListeners() {\n  hlsInstance.off((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.INIT_PTS_FOUND), onInitPTSFound);\n  hlsInstance.off((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.MANIFEST_LOADED), onManifestLoaded);\n  hlsInstance.off((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.LEVEL_SWITCHED), onLevelSwitch);\n  hlsInstance.off((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.AUDIO_TRACK_SWITCHED), callbacks.onAudioChangeEnd);\n  hlsInstance.off((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.FRAG_BUFFERED), onFragBuffered);\n  hlsInstance.off((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.SUBTITLE_FRAG_PROCESSED), cronus_playback_stats__WEBPACK_IMPORTED_MODULE_27__.onSubtitleFragmentProcessed);\n  hlsInstance.off((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.SUBTITLE_TRACK_SWITCH), onSubtitleTrackSwitch);\n  hlsInstance.off((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.ERROR), callbacks.onError);\n  hlsInstance.off((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.FRAG_PARSING_DATA), onFragParsingData);\n  hlsInstance.off((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.FRAG_LOADED), onFragLoaded);\n  hlsInstance.off((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.BUFFER_APPENDED), onBufferAppended);\n  hlsInstance.off((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.BUFFER_FLUSHED), onBufferFlushed);\n  hlsInstance.off((hls_js__WEBPACK_IMPORTED_MODULE_0___default().Events.CUES_PARSED), onCuesParsed);\n}\n\nfunction onLevelSwitch(event, _ref9) {\n  var id = _ref9.level;\n  var level = hlsInstance.levels[id];\n  callbacks.onPlaybackInfo(level);\n  callbacks.onQualityChangeEnd();\n  var now = Date.now();\n  var qualityChangeStartTime = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_13__.getQualityChangeStartTime)(cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.getState());\n  var bufferingStartTime = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_13__.getBufferingStartTime)(cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.getState());\n\n  if (qualityChangeStartTime !== undefined) {\n    cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].TYPES.qualityChangeCompleted, {\n      toBitrateInKbps: (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(level, 'bitrate', 0) / 1000,\n      toHeight: (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(level, 'height', 0),\n      timeSpent: now - qualityChangeStartTime,\n      bufferSpent: bufferingStartTime > qualityChangeStartTime ? now - bufferingStartTime : -1\n    });\n  }\n}\n\nfunction onAudioTrackSwitch() {\n  var _callbacks;\n\n  (_callbacks = callbacks).onAudioChangeEnd.apply(_callbacks, arguments);\n\n  cronus_reporting__WEBPACK_IMPORTED_MODULE_26__[\"default\"].send(cronus_reporting__WEBPACK_IMPORTED_MODULE_26__[\"default\"].TYPES.playingChange, getPlayingChangeData());\n}\n\nfunction onFragBuffered(event, data) {\n  (0,cronus_playback_stats__WEBPACK_IMPORTED_MODULE_27__.onFragmentBuffered)(data, hlsInstance.levels, getAudioTracks());\n  (0,cronus_playback_stats__WEBPACK_IMPORTED_MODULE_27__.onTelemetryData)(data);\n}\n\nfunction onFragParsingData(event, _ref10) {\n  var id = _ref10.id,\n      data1 = _ref10.data1,\n      frag = _ref10.frag;\n\n  try {\n    var segmentMeta = (0,shared_lib_util_segmentParser__WEBPACK_IMPORTED_MODULE_29__.getSegmentMeta)(data1);\n    debugLogger.debug('Segment parsed', _objectSpread({\n      type: frag.type,\n      level: frag.level,\n      sn: frag.sn,\n      url: frag.url,\n      expectedDuration: frag.duration\n    }, segmentMeta));\n\n    if (id === 'main') {\n      (0,cronus_playback_stats__WEBPACK_IMPORTED_MODULE_27__.onMainSegmentMeta)(id, segmentMeta);\n      callbacks.onKeyframeInterval((0,cronus_playback_stats__WEBPACK_IMPORTED_MODULE_27__.getKeyframeInterval)());\n    }\n\n    if (frag.type === 'audio' && frag.sn === 0 && segmentMeta.start > 4000 && segmentMeta.end > 4000) {\n      cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].TYPES.audioChunkAppendError, {\n        start: segmentMeta.start,\n        end: segmentMeta.end\n      });\n    }\n  } catch (e) {\n    debugLogger.warn('Segment parse error', {\n      error: e.message,\n      url: frag.url\n    });\n  }\n}\n\nfunction onFragLoaded(event, _ref11) {\n  var stats = _ref11.stats,\n      frag = _ref11.frag,\n      networkDetails = _ref11.networkDetails;\n  var url = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(networkDetails, 'responseURL', '');\n  var isEcdn = cronus_logic_sdcdnHandler__WEBPACK_IMPORTED_MODULE_20__[\"default\"].isEcdnProvider(url);\n  var trequest = stats.trequest,\n      tfirst = stats.tfirst,\n      tload = stats.tload,\n      size = stats.total;\n  var request = parseInt(tfirst - trequest, 10);\n  var response = parseInt(tload - tfirst, 10);\n  var total = request + response;\n\n  if (total >= cronus_consts__WEBPACK_IMPORTED_MODULE_17__.SLOW_DOWNLOAD_TRESHOLD * 1000) {\n    onSlowDownload({\n      response: response,\n      request: request,\n      total: total,\n      isEcdn: isEcdn\n    });\n  }\n\n  cronus_reporting__WEBPACK_IMPORTED_MODULE_26__[\"default\"].aggregate(cronus_reporting__WEBPACK_IMPORTED_MODULE_26__[\"default\"].TYPES.bandwidthChange, {\n    time: tload - trequest,\n    size: size,\n    url: url,\n    isEcdn: isEcdn\n  });\n  callbacks.onDownload(frag);\n}\n\nfunction updateStats() {\n  if (!$video) {\n    return;\n  }\n\n  var _$video3 = $video,\n      currentTime = _$video3.currentTime,\n      buffered = _$video3.buffered;\n  cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_5__.setPlaybackStats)((0,cronus_playback_stats__WEBPACK_IMPORTED_MODULE_27__.getBuffered)(buffered), currentTime));\n  cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,shared_store_actions_qos__WEBPACK_IMPORTED_MODULE_8__.setStatsData)(getStatsData(), currentTime));\n}\n/**\n * @param {Object} selectedTrack\n * @returns {number}\n */\n\n\nfunction getFirstTimeStamp(selectedTrack) {\n  var startSN = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(selectedTrack, 'details.startSN', 0);\n  var fragments = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(selectedTrack, 'details.fragments', []);\n  var firstFragment = fragments.find(function (_ref12) {\n    var sn = _ref12.sn;\n    return sn === startSN;\n  });\n  return (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(firstFragment, 'start', 0);\n}\n/**\n * @returns {number}\n */\n\n\nfunction getContentStart() {\n  var selectedAudioTrack = getAudioTracks().find(function (_ref13) {\n    var active = _ref13.active;\n    return active;\n  });\n  var firstAudioTimeStamp = getFirstTimeStamp(selectedAudioTrack);\n  var selectedVideoTrack = getQualities().find(function (_ref14) {\n    var active = _ref14.active;\n    return active;\n  });\n  var firstVideoTimeStamp = getFirstTimeStamp(selectedVideoTrack);\n  return Math.max(firstAudioTimeStamp, firstVideoTimeStamp);\n}\n/**\n * There is a `handleBufferStalledError` function in the cronus/index module,\n * that can fix large initial gaps (larger than 2 seconds), if there is a\n * BUFFER_STALLED_ERROR event.\n * Unfortunately there is no such event if you seek into the initial gap.\n */\n\n\nfunction fixInitialGapSeek() {\n  if (!$video) {\n    return;\n  }\n\n  var _$video4 = $video,\n      duration = _$video4.duration,\n      seeking = _$video4.seeking;\n\n  if (!duration || duration === Infinity || !seeking) {\n    return;\n  }\n\n  var _$video5 = $video,\n      currentTime = _$video5.currentTime;\n  var contentStart = getContentStart();\n\n  if (currentTime < contentStart) {\n    debugLogger.info('initial gap recovery', {\n      currentTime: currentTime,\n      contentStart: contentStart\n    });\n    $video.currentTime = contentStart;\n  }\n}\n/**\n * @param {string} event\n * @param {{ timeRanges: { audio: TimeRanges|undefined, video: TimeRanges|undefined } }} data\n */\n\n\nfunction onBufferAppended(event, _ref15) {\n  var timeRanges = _ref15.timeRanges;\n  (0,cronus_playback_stats__WEBPACK_IMPORTED_MODULE_27__.onSourceBufferChanged)(timeRanges);\n  updateStats();\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.getState();\n\n  if ((0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_13__.getMediaType)(state) !== shared_store_actions_content__WEBPACK_IMPORTED_MODULE_7__.MEDIA_TYPES.live) {\n    fixInitialGapSeek();\n  }\n}\n\nfunction onBufferFlushed() {\n  updateStats();\n}\n\nfunction onSubtitleTrackSwitch() {\n  (0,cronus_playback_stats__WEBPACK_IMPORTED_MODULE_27__.clearTextBuffer)();\n}\n\nfunction onCuesParsed(event, _ref16) {\n  var cues = _ref16.cues;\n\n  if (!cronus_consts__WEBPACK_IMPORTED_MODULE_17__.USE_CUSTOM_CAPTION_RENDERER || !hlsInstance) {\n    return;\n  }\n\n  var _hlsInstance2 = hlsInstance,\n      selectedSubtitleTrack = _hlsInstance2.subtitleTrack;\n  appendParsedCues(selectedSubtitleTrack, cues);\n  updateActiveCues();\n}\n\nfunction updateActiveCues() {\n  if (!hlsInstance || !hlsInstance.media) {\n    return;\n  }\n\n  var selectedSubtitleTrack = (0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_28__.getInitialConfig)('externalvtt') ? 'external' : hlsInstance.subtitleTrack;\n  var currentTime = hlsInstance.media.currentTime;\n  var activeCues = getParsedCues(selectedSubtitleTrack).filter(function (_ref17) {\n    var startTime = _ref17.startTime,\n        endTime = _ref17.endTime;\n    return startTime <= currentTime && endTime >= currentTime;\n  });\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.getState();\n\n  if (activeCues.length === 0 && state.captionSettings.activeCues.length === 0) {\n    return;\n  }\n\n  cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,shared_store_actions_captionSettings__WEBPACK_IMPORTED_MODULE_9__.setActiveCues)(activeCues));\n}\n\nfunction seekToLive() {\n  if (!hlsInstance || !$video) {\n    return;\n  } // position of live sync point (ie edge of live position minus safety\n  // delay defined by hls.config.liveSyncDuration)\n\n\n  var _hlsInstance3 = hlsInstance,\n      liveSyncPosition = _hlsInstance3.liveSyncPosition;\n\n  if (!liveSyncPosition || liveSyncPosition - $video.currentTime < cronus_consts__WEBPACK_IMPORTED_MODULE_17__.SEEK_TO_LIVE_THRESHOLD) {\n    return;\n  }\n\n  $video.currentTime = liveSyncPosition;\n}\n\nfunction setInitialValues() {\n  onVolumeChange((0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_13__.getVolume)(cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.getState()));\n}\n\nfunction init(video, _ref18) {\n  var onNetworkChange = _ref18.onNetworkChange,\n      onPlaybackInfo = _ref18.onPlaybackInfo,\n      onKeyframeInterval = _ref18.onKeyframeInterval,\n      onQualityChangeEnd = _ref18.onQualityChangeEnd,\n      onAudioChangeEnd = _ref18.onAudioChangeEnd,\n      onLoadingChange = _ref18.onLoadingChange,\n      onError = _ref18.onError,\n      onDownload = _ref18.onDownload,\n      onVideoTagDecodeError = _ref18.onVideoTagDecodeError;\n\n  if (inited) {\n    return;\n  }\n\n  $video = video;\n  callbacks = {\n    onNetworkChange: onNetworkChange,\n    onPlaybackInfo: onPlaybackInfo,\n    onKeyframeInterval: onKeyframeInterval,\n    onQualityChangeEnd: onQualityChangeEnd,\n    onAudioChangeEnd: onAudioChangeEnd,\n    onLoadingChange: onLoadingChange,\n    onError: onError,\n    onDownload: onDownload,\n    onVideoTagDecodeError: onVideoTagDecodeError\n  };\n  unsubscribe.volume = cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.subscribe('player.volume', onVolumeChange);\n  unsubscribe.speed = cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.subscribe('player.speed', onPlaybackSpeedChange);\n  unsubscribe.externalVtt = cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.subscribe('externalVtt', onExternalVtt);\n  unsubscribe.liveStatus = cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.subscribe('content.liveStatus', onLiveStatusChange);\n  setInitialValues();\n  inited = true;\n}\n\nfunction destroy() {\n  if (!inited) {\n    return;\n  }\n\n  Object.values(unsubscribe).forEach(function (fn) {\n    return fn();\n  });\n  unsubscribe = {};\n  unload();\n  $video = null;\n  callbacks = {};\n  inited = false;\n}\n\nfunction changeProvider(provider) {\n  debugLogger.info('change provider', {\n    prev: currentProvider,\n    next: provider\n  });\n  currentProvider = provider;\n}\n\nfunction getCurrentProvider() {\n  return currentProvider;\n}\n\nfunction updateCurrentCCPostions(line) {\n  if ($video) {\n    Array.from($video.textTracks).forEach(function (textTrack) {\n      if (textTrack.cues) {\n        Array.from(textTrack.cues).forEach(function (cue) {\n          cue.line = line;\n        });\n      }\n    });\n  }\n}\n\nfunction setCCPosition(captionPosition) {\n  var line = getLineForPosition(captionPosition);\n  cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,cronus_store_actions_playback__WEBPACK_IMPORTED_MODULE_6__.setCaptionPosition)(line));\n  updateCurrentCCPostions(line);\n}\n\nfunction handlePlayError(err) {\n  switch (err.name) {\n    case 'NotAllowedError':\n      {\n        cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_25__[\"default\"].TYPES.notAllowed, {\n          errorMessage: err.message\n        });\n        cronus_embedApi__WEBPACK_IMPORTED_MODULE_19__.sendEvent(cronus_embedApi__WEBPACK_IMPORTED_MODULE_19__.EVENTS.error, {\n          name: cronus_embedApi__WEBPACK_IMPORTED_MODULE_19__.ERRORS.autoplayRejected,\n          message: err.message\n        });\n        var state = cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.getState();\n\n        if (!(0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_13__.getFirstTimeUpdateReceived)(state)) {\n          cronus_store__WEBPACK_IMPORTED_MODULE_18__.wrappedStore.dispatch((0,shared_store_actions_playback__WEBPACK_IMPORTED_MODULE_5__.setFirstTimeUpdateReceived)(true));\n        }\n\n        break;\n      }\n\n    case 'NotSupportedError':\n    case 'AbortError':\n      // TODO\n      break;\n    // no default\n  }\n}\n/**\n * @param {number} startPosition Set the start position to stream from\n * @default -1 None (from earliest point)\n */\n\n\nfunction startLoad(startPosition) {\n  if (hlsInstance) {\n    hlsInstance.startLoad(startPosition);\n  }\n}\n\nfunction saveSeekPosition() {\n  savedSeekPosition = $video.currentTime;\n}\n/**\n * @param {numnber=} qualityId\n */\n\n\nfunction saveQuality() {\n  var qualityId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : hlsInstance.currentLevel;\n  savedQuality = qualityId;\n}\n/**\n * @param {numnber=} subtitleId\n */\n\n\nfunction saveSubtitle() {\n  var subtitleId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : hlsInstance.subtitleTrack;\n  savedSubtitle = subtitleId;\n}\n/**\n * @param {number=} audioId\n */\n\n\nfunction saveAudio() {\n  var audioId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : hlsInstance.audioTrack;\n  savedAudio = audioId;\n}\n\nfunction webkitEnterFullscreen() {\n  try {\n    (0,shared_ui_lib_toggleFullScreen__WEBPACK_IMPORTED_MODULE_4__.requestWebkitEnterFullscreen)($video);\n  } catch (e) {\n    cronus_embedApi__WEBPACK_IMPORTED_MODULE_19__.sendEvent(cronus_embedApi__WEBPACK_IMPORTED_MODULE_19__.EVENTS.error, {\n      name: cronus_embedApi__WEBPACK_IMPORTED_MODULE_19__.ERRORS.webkitEnterFullscreenRejected,\n      message: e.message\n    });\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  play: play,\n  pause: pause,\n  seek: seek,\n  load: load,\n  init: init,\n  version: version,\n  getQualities: getQualities,\n  setQuality: setQuality,\n  getSubtitleTracks: getSubtitleTracks,\n  setSubtitleTrack: setSubtitleTrack,\n  disableSubtitles: disableSubtitles,\n  getAudioTracks: getAudioTracks,\n  setAudioTrack: setAudioTrack,\n  changeProvider: changeProvider,\n  getCurrentProvider: getCurrentProvider,\n  getSource: getSource,\n  unload: unload,\n  destroy: destroy,\n  setCCPosition: setCCPosition,\n  startLoad: startLoad,\n  saveSeekPosition: saveSeekPosition,\n  saveQuality: saveQuality,\n  saveSubtitle: saveSubtitle,\n  saveAudio: saveAudio,\n  webkitEnterFullscreen: webkitEnterFullscreen\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../js/cronus/playback/index.js\n");

/***/ }),

/***/ "../js/cronus/playback/loaders/fragmentLoader.js":
/*!*******************************************************!*\
  !*** ../js/cronus/playback/loaders/fragmentLoader.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"F_LOADER_TYPES\": function() { return /* binding */ F_LOADER_TYPES; },\n/* harmony export */   \"fLoader\": function() { return /* binding */ fLoader; }\n/* harmony export */ });\n/* harmony import */ var hls_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hls.js */ \"../node_modules/hls.js/dist/hls.js\");\n/* harmony import */ var hls_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(hls_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var player_utils_string_random__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! player-utils/string/random */ \"../node_modules/player-utils/string/random.js\");\n/* harmony import */ var shared_lib_util_getXHRErrorReason__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/lib/util/getXHRErrorReason */ \"../js/shared/lib/util/getXHRErrorReason.js\");\n/* harmony import */ var cronus_playback_loaders_preprocessors_fragment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/playback/loaders/preprocessors/fragment */ \"../js/cronus/playback/loaders/preprocessors/fragment.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\n\n\nvar F_LOADER_TYPES = Object.freeze({\n  main: 'main',\n  // the content can also be audio if it is an audio only playback\n  audio: 'audio',\n  subtitle: 'subtitle'\n});\nvar fLoader = function fLoader(urlTransformer, logger) {\n  return /*#__PURE__*/function (_HlsJs$DefaultConfig$) {\n    _inherits(_class, _HlsJs$DefaultConfig$);\n\n    var _super = _createSuper(_class);\n\n    function _class(config) {\n      var _this;\n\n      _classCallCheck(this, _class);\n\n      _this = _super.call(this, config);\n      _this.originalLoad = _this.load.bind(_assertThisInitialized(_this));\n      _this.load = _this.customLoad.bind(_assertThisInitialized(_this));\n      return _this;\n    }\n\n    _createClass(_class, [{\n      key: \"customLoad\",\n      value: function customLoad(context, config, callbacks) {\n        var requestId = (0,player_utils_string_random__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(4);\n        var _context$frag = context.frag,\n            type = _context$frag.type,\n            sn = _context$frag.sn,\n            level = _context$frag.level;\n        var url = urlTransformer(context.url);\n\n        var modifiedContext = _objectSpread(_objectSpread({}, context), {}, {\n          url: url\n        });\n\n        var _onSuccess = callbacks.onSuccess,\n            _onError = callbacks.onError,\n            _onTimeout = callbacks.onTimeout;\n\n        var modifiedCallbacks = _objectSpread(_objectSpread({}, callbacks), {}, {\n          onSuccess: function onSuccess(response, stats, successContext, networkDetails) {\n            return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n              var modifiedResponse;\n              return regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      logger.debug('fragment loaded', {\n                        requestId: requestId,\n                        url: url,\n                        type: type,\n                        sn: sn,\n                        level: level,\n                        response: {\n                          code: 200,\n                          text: 'OK'\n                        },\n                        stats: stats\n                      });\n                      _context.t0 = _objectSpread;\n                      _context.t1 = _objectSpread({}, response);\n                      _context.t2 = {};\n                      _context.next = 6;\n                      return (0,cronus_playback_loaders_preprocessors_fragment__WEBPACK_IMPORTED_MODULE_3__[\"default\"])({\n                        fragment: response.data,\n                        url: url,\n                        type: type,\n                        sn: sn\n                      });\n\n                    case 6:\n                      _context.t3 = _context.sent;\n                      _context.t4 = {\n                        data: _context.t3\n                      };\n                      modifiedResponse = (0, _context.t0)(_context.t1, _context.t2, _context.t4);\n\n                      _onSuccess(modifiedResponse, stats, successContext, networkDetails);\n\n                    case 10:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            }))();\n          },\n          onError: function onError() {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            var error\n            /* context */\n            = args[0],\n                networkDetails = args[2];\n            logger.debug('fragment loading failed', {\n              requestId: requestId,\n              url: url,\n              type: type,\n              sn: sn,\n              level: level,\n              response: {\n                code: error.code,\n                text: error.text,\n                reason: (0,shared_lib_util_getXHRErrorReason__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(networkDetails)\n              }\n            });\n\n            _onError.apply(void 0, args);\n          },\n          onTimeout: function onTimeout() {\n            logger.debug('fragment loading failed', {\n              requestId: requestId,\n              url: url,\n              type: type,\n              sn: sn,\n              level: level,\n              response: {\n                code: 0,\n                text: '',\n                reason: 'TIMEOUT'\n              }\n            });\n\n            _onTimeout.apply(void 0, arguments);\n          }\n        });\n\n        logger.debug('fragment loading started', {\n          requestId: requestId,\n          url: url,\n          type: type,\n          sn: sn,\n          level: level\n        });\n        this.originalLoad(modifiedContext, config, modifiedCallbacks);\n      }\n    }]);\n\n    return _class;\n  }((hls_js__WEBPACK_IMPORTED_MODULE_0___default().DefaultConfig.loader));\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../js/cronus/playback/loaders/fragmentLoader.js\n");

/***/ }),

/***/ "../js/cronus/playback/loaders/index.js":
/*!**********************************************!*\
  !*** ../js/cronus/playback/loaders/index.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"F_LOADER_TYPES\": function() { return /* reexport safe */ cronus_playback_loaders_fragmentLoader__WEBPACK_IMPORTED_MODULE_1__.F_LOADER_TYPES; },\n/* harmony export */   \"P_LOADER_TYPES\": function() { return /* reexport safe */ cronus_playback_loaders_playlistLoader__WEBPACK_IMPORTED_MODULE_0__.P_LOADER_TYPES; },\n/* harmony export */   \"fLoader\": function() { return /* reexport safe */ cronus_playback_loaders_fragmentLoader__WEBPACK_IMPORTED_MODULE_1__.fLoader; },\n/* harmony export */   \"pLoader\": function() { return /* reexport safe */ cronus_playback_loaders_playlistLoader__WEBPACK_IMPORTED_MODULE_0__.pLoader; }\n/* harmony export */ });\n/* harmony import */ var cronus_playback_loaders_playlistLoader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/playback/loaders/playlistLoader */ \"../js/cronus/playback/loaders/playlistLoader.js\");\n/* harmony import */ var cronus_playback_loaders_fragmentLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/playback/loaders/fragmentLoader */ \"../js/cronus/playback/loaders/fragmentLoader.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3BsYXliYWNrL2xvYWRlcnMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy9wbGF5YmFjay9sb2FkZXJzL2luZGV4LmpzP2I4ZmMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnY3JvbnVzL3BsYXliYWNrL2xvYWRlcnMvcGxheWxpc3RMb2FkZXInO1xuZXhwb3J0ICogZnJvbSAnY3JvbnVzL3BsYXliYWNrL2xvYWRlcnMvZnJhZ21lbnRMb2FkZXInO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/playback/loaders/index.js\n");

/***/ }),

/***/ "../js/cronus/playback/loaders/playlistLoader.js":
/*!*******************************************************!*\
  !*** ../js/cronus/playback/loaders/playlistLoader.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"P_LOADER_TYPES\": function() { return /* binding */ P_LOADER_TYPES; },\n/* harmony export */   \"pLoader\": function() { return /* binding */ pLoader; }\n/* harmony export */ });\n/* harmony import */ var hls_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hls.js */ \"../node_modules/hls.js/dist/hls.js\");\n/* harmony import */ var hls_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(hls_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var player_utils_string_random__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! player-utils/string/random */ \"../node_modules/player-utils/string/random.js\");\n/* harmony import */ var cronus_playback_loaders_preprocessors_playlist__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/playback/loaders/preprocessors/playlist */ \"../js/cronus/playback/loaders/preprocessors/playlist.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\n\nvar P_LOADER_TYPES = Object.freeze({\n  manifest: 'manifest',\n  level: 'level',\n  audioTrack: 'audioTrack',\n  subtitleTrack: 'subtitleTrack'\n});\nvar pLoader = function pLoader(logger) {\n  return /*#__PURE__*/function (_HlsJs$DefaultConfig$) {\n    _inherits(_class, _HlsJs$DefaultConfig$);\n\n    var _super = _createSuper(_class);\n\n    function _class(config) {\n      var _this;\n\n      _classCallCheck(this, _class);\n\n      _this = _super.call(this, config);\n      _this.originalLoad = _this.load.bind(_assertThisInitialized(_this));\n      _this.load = _this.customLoad.bind(_assertThisInitialized(_this));\n      return _this;\n    }\n\n    _createClass(_class, [{\n      key: \"customLoad\",\n      value: function customLoad(context, config, callbacks) {\n        var requestId = (0,player_utils_string_random__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(4);\n        var url = context.url,\n            id = context.id,\n            level = context.level,\n            type = context.type;\n        var levelOrId = typeof level === 'number' ? level : id;\n        var _onSuccess = callbacks.onSuccess,\n            _onError = callbacks.onError,\n            _onTimeout = callbacks.onTimeout;\n\n        var modifiedCallbacks = _objectSpread(_objectSpread({}, callbacks), {}, {\n          onSuccess: function onSuccess(response, stats, successContext, networkDetails) {\n            var data = type === P_LOADER_TYPES.manifest ? response.data : undefined;\n            logger.debug('playlist loaded', {\n              requestId: requestId,\n              url: url,\n              type: type,\n              level: levelOrId,\n              response: {\n                code: 200,\n                text: 'OK'\n              },\n              data: data,\n              stats: stats\n            });\n\n            var modifiedResponse = _objectSpread(_objectSpread({}, response), {}, {\n              data: (0,cronus_playback_loaders_preprocessors_playlist__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(response.data, context.type)\n            });\n\n            _onSuccess(modifiedResponse, stats, successContext, networkDetails);\n          },\n          onError: function onError() {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            var error = args[0];\n            logger.debug('playlist loading failed', {\n              requestId: requestId,\n              url: url,\n              type: type,\n              level: levelOrId,\n              response: {\n                code: error.code,\n                text: error.text\n              }\n            });\n\n            _onError.apply(void 0, args);\n          },\n          onTimeout: function onTimeout() {\n            logger.debug('playlist loading failed', {\n              requestId: requestId,\n              url: url,\n              type: type,\n              level: levelOrId,\n              response: {\n                code: 0,\n                text: ''\n              }\n            });\n\n            _onTimeout.apply(void 0, arguments);\n          }\n        });\n\n        logger.debug('playlist loading started', {\n          requestId: requestId,\n          url: url,\n          type: type,\n          level: levelOrId\n        });\n        this.originalLoad(context, config, modifiedCallbacks);\n      }\n    }]);\n\n    return _class;\n  }((hls_js__WEBPACK_IMPORTED_MODULE_0___default().DefaultConfig.loader));\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3BsYXliYWNrL2xvYWRlcnMvcGxheWxpc3RMb2FkZXIuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUVPLElBQU1HLGNBQWMsR0FBR0MsTUFBTSxDQUFDQyxNQUFQLENBQWM7QUFDMUNDLEVBQUFBLFFBQVEsRUFBRSxVQURnQztBQUUxQ0MsRUFBQUEsS0FBSyxFQUFFLE9BRm1DO0FBRzFDQyxFQUFBQSxVQUFVLEVBQUUsWUFIOEI7QUFJMUNDLEVBQUFBLGFBQWEsRUFBRTtBQUoyQixDQUFkLENBQXZCO0FBT0EsSUFBTUMsT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBQ0MsTUFBRDtBQUFBO0FBQUE7O0FBQUE7O0FBRW5CLG9CQUFZQyxNQUFaLEVBQW9CO0FBQUE7O0FBQUE7O0FBQ2xCLGdDQUFNQSxNQUFOO0FBRUEsWUFBS0MsWUFBTCxHQUFvQixNQUFLQyxJQUFMLENBQVVDLElBQVYsK0JBQXBCO0FBQ0EsWUFBS0QsSUFBTCxHQUFZLE1BQUtFLFVBQUwsQ0FBZ0JELElBQWhCLCtCQUFaO0FBSmtCO0FBS25COztBQVBrQjtBQUFBO0FBQUEsYUFTbkIsb0JBQVdFLE9BQVgsRUFBb0JMLE1BQXBCLEVBQTRCTSxTQUE1QixFQUF1QztBQUNyQyxZQUFNQyxTQUFTLEdBQUdsQixzRUFBTSxDQUFDLENBQUQsQ0FBeEI7QUFDQSxZQUFRbUIsR0FBUixHQUFpQ0gsT0FBakMsQ0FBUUcsR0FBUjtBQUFBLFlBQWFDLEVBQWIsR0FBaUNKLE9BQWpDLENBQWFJLEVBQWI7QUFBQSxZQUFpQmQsS0FBakIsR0FBaUNVLE9BQWpDLENBQWlCVixLQUFqQjtBQUFBLFlBQXdCZSxJQUF4QixHQUFpQ0wsT0FBakMsQ0FBd0JLLElBQXhCO0FBQ0EsWUFBTUMsU0FBUyxHQUFHLE9BQU9oQixLQUFQLEtBQWlCLFFBQWpCLEdBQTRCQSxLQUE1QixHQUFvQ2MsRUFBdEQ7QUFFQSxZQUFRRyxV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QUEyQkwsTUFBM0IsRUFBbUNlLGlCQUFuQztBQUNEO0FBekVrQjs7QUFBQTtBQUFBLElBQ1AzQixvRUFETztBQUFBLENBQWhCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvcGxheWJhY2svbG9hZGVycy9wbGF5bGlzdExvYWRlci5qcz8xMjhkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBIbHNKcyBmcm9tICdobHMuanMnO1xuaW1wb3J0IHJhbmRvbSBmcm9tICdwbGF5ZXItdXRpbHMvc3RyaW5nL3JhbmRvbSc7XG5pbXBvcnQgcHJvY2Vzc1BsYXlsaXN0IGZyb20gJ2Nyb251cy9wbGF5YmFjay9sb2FkZXJzL3ByZXByb2Nlc3NvcnMvcGxheWxpc3QnO1xuXG5leHBvcnQgY29uc3QgUF9MT0FERVJfVFlQRVMgPSBPYmplY3QuZnJlZXplKHtcbiAgbWFuaWZlc3Q6ICdtYW5pZmVzdCcsXG4gIGxldmVsOiAnbGV2ZWwnLFxuICBhdWRpb1RyYWNrOiAnYXVkaW9UcmFjaycsXG4gIHN1YnRpdGxlVHJhY2s6ICdzdWJ0aXRsZVRyYWNrJyxcbn0pO1xuXG5leHBvcnQgY29uc3QgcExvYWRlciA9IChsb2dnZXIpID0+XG4gIGNsYXNzIGV4dGVuZHMgSGxzSnMuRGVmYXVsdENvbmZpZy5sb2FkZXIge1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgICAgc3VwZXIoY29uZmlnKTtcblxuICAgICAgdGhpcy5vcmlnaW5hbExvYWQgPSB0aGlzLmxvYWQuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMubG9hZCA9IHRoaXMuY3VzdG9tTG9hZC5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgIGN1c3RvbUxvYWQoY29udGV4dCwgY29uZmlnLCBjYWxsYmFja3MpIHtcbiAgICAgIGNvbnN0IHJlcXVlc3RJZCA9IHJhbmRvbSg0KTtcbiAgICAgIGNvbnN0IHsgdXJsLCBpZCwgbGV2ZWwsIHR5cGUgfSA9IGNvbnRleHQ7XG4gICAgICBjb25zdCBsZXZlbE9ySWQgPSB0eXBlb2YgbGV2ZWwgPT09ICdudW1iZXInID8gbGV2ZWwgOiBpZDtcblxuICAgICAgY29uc3QgeyBvblN1Y2Nlc3MsIG9uRXJyb3IsIG9uVGltZW91dCB9ID0gY2FsbGJhY2tzO1xuICAgICAgY29uc3QgbW9kaWZpZWRDYWxsYmFja3MgPSB7XG4gICAgICAgIC4uLmNhbGxiYWNrcyxcbiAgICAgICAgb25TdWNjZXNzKHJlc3BvbnNlLCBzdGF0cywgc3VjY2Vzc0NvbnRleHQsIG5ldHdvcmtEZXRhaWxzKSB7XG4gICAgICAgICAgY29uc3QgZGF0YSA9IHR5cGUgPT09IFBfTE9BREVSX1RZUEVTLm1hbmlmZXN0ID8gcmVzcG9uc2UuZGF0YSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICBsb2dnZXIuZGVidWcoJ3BsYXlsaXN0IGxvYWRlZCcsIHtcbiAgICAgICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICBsZXZlbDogbGV2ZWxPcklkLFxuICAgICAgICAgICAgcmVzcG9uc2U6IHtcbiAgICAgICAgICAgICAgY29kZTogMjAwLFxuICAgICAgICAgICAgICB0ZXh0OiAnT0snLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICBzdGF0cyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb25zdCBtb2RpZmllZFJlc3BvbnNlID0ge1xuICAgICAgICAgICAgLi4ucmVzcG9uc2UsXG4gICAgICAgICAgICBkYXRhOiBwcm9jZXNzUGxheWxpc3QocmVzcG9uc2UuZGF0YSwgY29udGV4dC50eXBlKSxcbiAgICAgICAgICB9O1xuICAgICAgICAgIG9uU3VjY2Vzcyhtb2RpZmllZFJlc3BvbnNlLCBzdGF0cywgc3VjY2Vzc0NvbnRleHQsIG5ldHdvcmtEZXRhaWxzKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25FcnJvciguLi5hcmdzKSB7XG4gICAgICAgICAgY29uc3QgW2Vycm9yXSA9IGFyZ3M7XG4gICAgICAgICAgbG9nZ2VyLmRlYnVnKCdwbGF5bGlzdCBsb2FkaW5nIGZhaWxlZCcsIHtcbiAgICAgICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICBsZXZlbDogbGV2ZWxPcklkLFxuICAgICAgICAgICAgcmVzcG9uc2U6IHtcbiAgICAgICAgICAgICAgY29kZTogZXJyb3IuY29kZSxcbiAgICAgICAgICAgICAgdGV4dDogZXJyb3IudGV4dCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgb25FcnJvciguLi5hcmdzKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25UaW1lb3V0KC4uLmFyZ3MpIHtcbiAgICAgICAgICBsb2dnZXIuZGVidWcoJ3BsYXlsaXN0IGxvYWRpbmcgZmFpbGVkJywge1xuICAgICAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIGxldmVsOiBsZXZlbE9ySWQsXG4gICAgICAgICAgICByZXNwb25zZToge1xuICAgICAgICAgICAgICBjb2RlOiAwLFxuICAgICAgICAgICAgICB0ZXh0OiAnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgb25UaW1lb3V0KC4uLmFyZ3MpO1xuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgbG9nZ2VyLmRlYnVnKCdwbGF5bGlzdCBsb2FkaW5nIHN0YXJ0ZWQnLCB7XG4gICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgdXJsLFxuICAgICAgICB0eXBlLFxuICAgICAgICBsZXZlbDogbGV2ZWxPcklkLFxuICAgICAgfSk7XG4gICAgICB0aGlzLm9yaWdpbmFsTG9hZChjb250ZXh0LCBjb25maWcsIG1vZGlmaWVkQ2FsbGJhY2tzKTtcbiAgICB9XG4gIH07XG4iXSwibmFtZXMiOlsiSGxzSnMiLCJyYW5kb20iLCJwcm9jZXNzUGxheWxpc3QiLCJQX0xPQURFUl9UWVBFUyIsIk9iamVjdCIsImZyZWV6ZSIsIm1hbmlmZXN0IiwibGV2ZWwiLCJhdWRpb1RyYWNrIiwic3VidGl0bGVUcmFjayIsInBMb2FkZXIiLCJsb2dnZXIiLCJjb25maWciLCJvcmlnaW5hbExvYWQiLCJsb2FkIiwiYmluZCIsImN1c3RvbUxvYWQiLCJjb250ZXh0IiwiY2FsbGJhY2tzIiwicmVxdWVzdElkIiwidXJsIiwiaWQiLCJ0eXBlIiwibGV2ZWxPcklkIiwib25TdWNjZXNzIiwib25FcnJvciIsIm9uVGltZW91dCIsIm1vZGlmaWVkQ2FsbGJhY2tzIiwicmVzcG9uc2UiLCJzdGF0cyIsInN1Y2Nlc3NDb250ZXh0IiwibmV0d29ya0RldGFpbHMiLCJkYXRhIiwidW5kZWZpbmVkIiwiZGVidWciLCJjb2RlIiwidGV4dCIsIm1vZGlmaWVkUmVzcG9uc2UiLCJhcmdzIiwiZXJyb3IiLCJEZWZhdWx0Q29uZmlnIiwibG9hZGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/playback/loaders/playlistLoader.js\n");

/***/ }),

/***/ "../js/cronus/playback/loaders/preprocessors/fragment.js":
/*!***************************************************************!*\
  !*** ../js/cronus/playback/loaders/preprocessors/fragment.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ process; }\n/* harmony export */ });\n/* harmony import */ var cronus_store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/store */ \"../js/cronus/store/index.js\");\n/* harmony import */ var cronus_store_selectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/store/selectors */ \"../js/cronus/store/selectors/index.js\");\n/* harmony import */ var cronus_playback_loaders_fragmentLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/playback/loaders/fragmentLoader */ \"../js/cronus/playback/loaders/fragmentLoader.js\");\n/* harmony import */ var cronus_hacks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/hacks */ \"../js/cronus/hacks.js\");\n/* harmony import */ var cronus_mp4_helpers_buffer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! cronus/mp4/helpers/buffer */ \"../js/cronus/mp4/helpers/buffer.js\");\n/* harmony import */ var cronus_mp4_consts__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cronus/mp4/consts */ \"../js/cronus/mp4/consts.js\");\n/* harmony import */ var cronus_mp4__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! cronus/mp4 */ \"../js/cronus/mp4/index.js\");\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n\n\n\n\n\n\n\nvar regexTimeStamp = /^(\\d{2,}:\\d{2}:\\d{2}[.,]\\d{3})\\s-->\\s(\\d{2,}:\\d{2}:\\d{2}[.,]\\d{3})/;\nvar regexLineAttr = / line:-?\\d{1,}%?/;\nvar timescale = 90e3;\n\nfunction removeCaptionsWithEmptyLine(rawVtt) {\n  return rawVtt.replace(/[0-9:.]+\\s-->\\s[0-9.:]+.*\\n(?:\\n|$)/g, '');\n}\n\nfunction removeExtraTimestampLines(vttStr) {\n  var timestampStr = 'X-TIMESTAMP-MAP=MPEGTS=0,LOCAL:00:00:00.000\\n\\n';\n  return vttStr.replace(\"\\0\".concat(timestampStr).concat(timestampStr), '').replace(\"\\0\".concat(timestampStr), '');\n}\n\nfunction toLocalTs(timeInSec) {\n  if (typeof timeInSec !== 'number' || timeInSec < 0) {\n    return '00:00:00.000';\n  }\n\n  var timestamp = Math.round(timeInSec * 1000);\n  var ms = timestamp % 1000;\n  timestamp -= ms;\n  timestamp /= 1000;\n  var sec = timestamp % 60;\n  timestamp -= sec;\n  timestamp /= 60;\n  var min = timestamp % 60;\n  timestamp -= min;\n  timestamp /= 60;\n  var hour = timestamp;\n  var hourPad = hour <= 10 ? hour.toString().padStart(2, '0') : hour;\n  var minPad = min.toString().padStart(2, '0');\n  var secPad = sec.toString().padStart(2, '0');\n  var msPad = ms.toString().padStart(3, '0');\n  return \"\".concat(hourPad, \":\").concat(minPad, \":\").concat(secPad, \".\").concat(msPad);\n}\n\nfunction handleXTimeStampDrift(vtt, initPTS) {\n  var hasXTimeStampMap = /X-TIMESTAMP-MAP/.test(vtt);\n\n  if (hasXTimeStampMap) {\n    return vtt.replace(/(X-TIMESTAMP-MAP=MPEGTS:)(0)(,LOCAL:).*/, function (match, MPEGTS, _, LOCAL) {\n      return \"\".concat(MPEGTS).concat(initPTS).concat(LOCAL).concat(toLocalTs(initPTS));\n    });\n  }\n\n  var xTimeStampMap = \"X-TIMESTAMP-MAP=MPEGTS:\".concat(initPTS, \",LOCAL:\").concat(toLocalTs(initPTS));\n  return vtt.replace(/(WEBVTT.*)/, function (match) {\n    return \"\".concat(match, \"\\n\").concat(xTimeStampMap);\n  });\n}\n/**\n * @param {string} vtt\n * @returns {string}\n */\n\n\nfunction setCaptionPosition(vtt) {\n  return vtt.split('\\n').map(function (line) {\n    if (!line.match(regexTimeStamp)) {\n      return line;\n    }\n\n    var state = cronus_store__WEBPACK_IMPORTED_MODULE_0__.wrappedStore.getState();\n    var captionPosition = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_1__.getCaptionPosition)(state);\n    var lineAttr = \" line:\".concat(captionPosition);\n\n    if (regexLineAttr.test(line)) {\n      return line.replace(regexLineAttr, lineAttr);\n    }\n\n    return line + lineAttr;\n  }).join('\\n');\n}\n/**\n * @returns {Promise<number>}\n */\n\n\nfunction waitForInitPTS() {\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_0__.wrappedStore.getState();\n  var initPTS = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_1__.getInitPTS)(state);\n\n  if (initPTS !== undefined) {\n    return Promise.resolve(initPTS);\n  }\n\n  return new Promise(function (resolve) {\n    var unsubscribe = cronus_store__WEBPACK_IMPORTED_MODULE_0__.wrappedStore.subscribe('playback.initPTS', function (pts) {\n      unsubscribe();\n      resolve(pts);\n    });\n  });\n}\n/**\n * @param {Object} params\n * @param {ArrayBuffer|ArrayBufferView} params.fragment\n * @param {string} params.url\n * @param {string} params.type - F_LOADER_TYPES\n * @param {number|string} params.sn - number or \"initSegment\"\n * @returns {Promose<ArrayBuffer|ArrayBufferView>}\n */\n\n\nfunction processVtt(_x) {\n  return _processVtt.apply(this, arguments);\n}\n/**\n * @param {Object} params\n * @param {ArrayBuffer|ArrayBufferView} params.fragment\n * @param {string} params.url\n * @param {string} params.type - F_LOADER_TYPES\n * @param {number|string} params.sn - number or \"initSegment\"\n * @returns {ArrayBuffer|ArrayBufferView}\n */\n\n\nfunction _processVtt() {\n  _processVtt = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {\n    var fragment, vttStr, initPTS;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            fragment = _ref.fragment;\n            vttStr = new TextDecoder('utf-8').decode(fragment);\n\n            if (cronus_hacks__WEBPACK_IMPORTED_MODULE_3__.REMOVE_EMPTY_VTT_LINES) {\n              vttStr = removeCaptionsWithEmptyLine(vttStr);\n            }\n\n            if (cronus_hacks__WEBPACK_IMPORTED_MODULE_3__.REMOVE_EXTRA_TIMESTAMP_LINES) {\n              vttStr = removeExtraTimestampLines(vttStr);\n            }\n\n            if (!cronus_hacks__WEBPACK_IMPORTED_MODULE_3__.FIX_VTT_DESYNC) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 7;\n            return waitForInitPTS();\n\n          case 7:\n            initPTS = _context.sent;\n            vttStr = handleXTimeStampDrift(vttStr, initPTS);\n\n          case 9:\n            if (cronus_hacks__WEBPACK_IMPORTED_MODULE_3__.SET_VTT_LINE_HEIGHT) {\n              vttStr = setCaptionPosition(vttStr);\n            }\n\n            return _context.abrupt(\"return\", new TextEncoder('utf-8').encode(vttStr));\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _processVtt.apply(this, arguments);\n}\n\nfunction processHeader(_ref2) {\n  var fragment = _ref2.fragment,\n      type = _ref2.type;\n\n  if (!cronus_hacks__WEBPACK_IMPORTED_MODULE_3__.FIX_NEGATIVE_AUDIO_OFFSET) {\n    return fragment;\n  }\n\n  if (type === cronus_playback_loaders_fragmentLoader__WEBPACK_IMPORTED_MODULE_2__.F_LOADER_TYPES.audio) {\n    try {\n      var mdhd = cronus_mp4__WEBPACK_IMPORTED_MODULE_6__.get([cronus_mp4_consts__WEBPACK_IMPORTED_MODULE_5__.blockTypes.moov, cronus_mp4_consts__WEBPACK_IMPORTED_MODULE_5__.blockTypes.trak, cronus_mp4_consts__WEBPACK_IMPORTED_MODULE_5__.blockTypes.mdia, cronus_mp4_consts__WEBPACK_IMPORTED_MODULE_5__.blockTypes.mdhd], fragment);\n      timescale = mdhd.timescale;\n    } catch (e) {// empty block\n    }\n  }\n\n  return fragment;\n}\n/**\n * @param {Object} params\n * @param {ArrayBuffer|ArrayBufferView} params.fragment\n * @param {string} params.url\n * @param {string} params.type - F_LOADER_TYPES\n * @param {number|string} params.sn - number or \"initSegment\"\n * @returns {Promose<ArrayBuffer|ArrayBufferView>}\n */\n\n\nfunction processAudioFragment(_x2) {\n  return _processAudioFragment.apply(this, arguments);\n}\n/**\n * @param {Object} params\n * @param {ArrayBuffer|ArrayBufferView} params.fragment\n * @param {string} params.url\n * @param {string} params.type - \"subtitle\", \"audio\", \"main\"\n * @param {number|string} params.sn - number or \"initSegment\"\n * @returns {Promise<ArrayBuffer|ArrayBufferView>}\n */\n\n\nfunction _processAudioFragment() {\n  _processAudioFragment = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref3) {\n    var fragment, tfdt, initPTS, offset, newBaseMediaDecodeTime;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            fragment = _ref3.fragment;\n\n            if (cronus_hacks__WEBPACK_IMPORTED_MODULE_3__.FIX_NEGATIVE_AUDIO_OFFSET) {\n              _context2.next = 3;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", fragment);\n\n          case 3:\n            _context2.prev = 3;\n            tfdt = cronus_mp4__WEBPACK_IMPORTED_MODULE_6__.get([cronus_mp4_consts__WEBPACK_IMPORTED_MODULE_5__.blockTypes.moof, cronus_mp4_consts__WEBPACK_IMPORTED_MODULE_5__.blockTypes.traf, cronus_mp4_consts__WEBPACK_IMPORTED_MODULE_5__.blockTypes.tfdt], fragment);\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](3);\n            return _context2.abrupt(\"return\", fragment);\n\n          case 10:\n            _context2.next = 12;\n            return waitForInitPTS();\n\n          case 12:\n            initPTS = _context2.sent;\n            offset = initPTS * timescale;\n            newBaseMediaDecodeTime = tfdt.baseMediaDecodeTime - offset;\n\n            if (newBaseMediaDecodeTime < 0) {\n              if (tfdt.version === 0) {\n                (0,cronus_mp4_helpers_buffer__WEBPACK_IMPORTED_MODULE_4__.writeUint32)(fragment, tfdt.start, offset);\n              } else {\n                (0,cronus_mp4_helpers_buffer__WEBPACK_IMPORTED_MODULE_4__.writeUint64)(fragment, tfdt.start, offset);\n              }\n            }\n\n            return _context2.abrupt(\"return\", fragment);\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[3, 7]]);\n  }));\n  return _processAudioFragment.apply(this, arguments);\n}\n\nfunction process(_x3) {\n  return _process.apply(this, arguments);\n}\n\nfunction _process() {\n  _process = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_ref4) {\n    var fragment, url, type, sn;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            fragment = _ref4.fragment, url = _ref4.url, type = _ref4.type, sn = _ref4.sn;\n\n            if (!(sn === 'initSegment')) {\n              _context3.next = 3;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", processHeader({\n              fragment: fragment,\n              url: url,\n              type: type,\n              sn: sn\n            }));\n\n          case 3:\n            if (!(type === cronus_playback_loaders_fragmentLoader__WEBPACK_IMPORTED_MODULE_2__.F_LOADER_TYPES.audio)) {\n              _context3.next = 5;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", processAudioFragment({\n              fragment: fragment,\n              url: url,\n              type: type,\n              sn: sn\n            }));\n\n          case 5:\n            if (!(type === cronus_playback_loaders_fragmentLoader__WEBPACK_IMPORTED_MODULE_2__.F_LOADER_TYPES.subtitle)) {\n              _context3.next = 7;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", processVtt({\n              fragment: fragment,\n              url: url,\n              type: type,\n              sn: sn\n            }));\n\n          case 7:\n            return _context3.abrupt(\"return\", fragment);\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _process.apply(this, arguments);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../js/cronus/playback/loaders/preprocessors/fragment.js\n");

/***/ }),

/***/ "../js/cronus/playback/loaders/preprocessors/playlist.js":
/*!***************************************************************!*\
  !*** ../js/cronus/playback/loaders/preprocessors/playlist.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ process; }\n/* harmony export */ });\n/* harmony import */ var cronus_hacks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/hacks */ \"../js/cronus/hacks.js\");\n/* harmony import */ var cronus_playback_loaders_playlistLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/playback/loaders/playlistLoader */ \"../js/cronus/playback/loaders/playlistLoader.js\");\n/* harmony import */ var cronus_playback_utils_playlist__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/playback/utils/playlist */ \"../js/cronus/playback/utils/playlist.js\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n/**\n * @param {string} url\n * @returns {string}\n */\n\nfunction getHeaderUrlForFragment(url) {\n  return \"\".concat(url, \"h\");\n}\n/**\n * @param {string} playlist\n * @returns {string}\n */\n\n\nfunction decoratePlaylistWithMissingExtXMap(playlist) {\n  var _getSegmentUris = (0,cronus_playback_utils_playlist__WEBPACK_IMPORTED_MODULE_2__.getSegmentUris)(playlist),\n      _getSegmentUris2 = _slicedToArray(_getSegmentUris, 1),\n      firstUrl = _getSegmentUris2[0];\n\n  if (!firstUrl) {\n    return playlist;\n  }\n\n  return playlist.replace('#EXTINF', \"#EXT-X-MAP:URI=\\\"\".concat(getHeaderUrlForFragment(firstUrl), \"\\\"\\n#EXTINF\"));\n}\n/**\n * @param {string} playlist\n * @returns {string}\n */\n\n\nfunction replaceXMapUri(playlist) {\n  var uris = (0,cronus_playback_utils_playlist__WEBPACK_IMPORTED_MODULE_2__.getSegmentUris)(playlist);\n  var lastUrl = uris[uris.length - 1];\n\n  if (!lastUrl) {\n    return playlist;\n  }\n\n  return playlist.replace(/#EXT-X-MAP:URI=.*/, \"#EXT-X-MAP:URI=\\\"\".concat(getHeaderUrlForFragment(lastUrl), \"\\\"\"));\n}\n/**\n * @param {string} playlist\n * @returns {string}\n */\n\n\nfunction filterDuplicateAudioRenditions(playlist) {\n  var audioRenditions = (0,cronus_playback_utils_playlist__WEBPACK_IMPORTED_MODULE_2__.getAudioRenditions)(playlist);\n\n  if (audioRenditions.length <= 1) {\n    return playlist;\n  }\n\n  var found = {};\n  audioRenditions.forEach(function (rendition) {\n    var name = (0,cronus_playback_utils_playlist__WEBPACK_IMPORTED_MODULE_2__.getNameAttr)(rendition);\n\n    if (!found[name]) {\n      found[name] = true;\n    } else {\n      playlist = playlist.replace(\"\".concat(rendition, \"\\n\"), '');\n    }\n  });\n  return playlist;\n}\n/**\n * @param {string} playlist\n * @param {string} type\n * @returns {string}\n */\n\n\nfunction process(playlist, type) {\n  var modifiedPlaylist = playlist;\n\n  if (type === cronus_playback_loaders_playlistLoader__WEBPACK_IMPORTED_MODULE_1__.P_LOADER_TYPES.manifest) {\n    if (cronus_hacks__WEBPACK_IMPORTED_MODULE_0__.HANDLE_DUPLICATE_AUDIO_RENDITIONS) {\n      modifiedPlaylist = filterDuplicateAudioRenditions(modifiedPlaylist);\n    }\n\n    return modifiedPlaylist;\n  }\n\n  if (cronus_hacks__WEBPACK_IMPORTED_MODULE_0__.HANDLE_MISSING_EXT_X_MAP) {\n    var isMapFound = /#EXT-X-MAP/.test(playlist);\n\n    if (!isMapFound) {\n      modifiedPlaylist = decoratePlaylistWithMissingExtXMap(modifiedPlaylist);\n    }\n  }\n\n  if (cronus_hacks__WEBPACK_IMPORTED_MODULE_0__.HANDLE_EMPTY_HEADER_FILES) {\n    if ((0,cronus_playback_utils_playlist__WEBPACK_IMPORTED_MODULE_2__.isLive)(playlist)) {\n      modifiedPlaylist = replaceXMapUri(modifiedPlaylist);\n    }\n  }\n\n  return modifiedPlaylist;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3BsYXliYWNrL2xvYWRlcnMvcHJlcHJvY2Vzc29ycy9wbGF5bGlzdC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFLQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBU1EsdUJBQVQsQ0FBaUNDLEdBQWpDLEVBQXNDO0FBQ3BDLG1CQUFVQSxHQUFWO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsU0FBU0Msa0NBQVQsQ0FBNENDLFFBQTVDLEVBQXNEO0FBQ3BELHdCQUFtQkosOEVBQWMsQ0FBQ0ksUUFBRCxDQUFqQztBQUFBO0FBQUEsTUFBT0MsUUFBUDs7QUFDQSxNQUFJLENBQUNBLFFBQUwsRUFBZTtBQUNiLFdBQU9ELFFBQVA7QUFDRDs7QUFDRCxTQUFPQSxRQUFRLENBQUNFLE9BQVQsQ0FDTCxTQURLLDZCQUVjTCx1QkFBdUIsQ0FBQ0ksUUFBRCxDQUZyQyxpQkFBUDtBQUlEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFNBQVNFLGNBQVQsQ0FBd0JILFFBQXhCLEVBQWtDO0FBQ2hDLE1BQU1JLElBQUksR0FBR1IsOEVBQWMsQ0FBQ0ksUUFBRCxDQUEzQjtBQUNBLE1BQU1LLE9BQU8sR0FBR0QsSUFBSSxDQUFDQSxJQUFJLENBQUNFLE1BQUwsR0FBYyxDQUFmLENBQXBCOztBQUNBLE1BQUksQ0FBQ0QsT0FBTCxFQUFjO0FBQ1osV0FBT0wsUUFBUDtBQUNEOztBQUNELFNBQU9BLFFBQVEsQ0FBQ0UsT0FBVCxDQUNMLG1CQURLLDZCQUVjTCx1QkFBdUIsQ0FBQ1EsT0FBRCxDQUZyQyxRQUFQO0FBSUQ7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsU0FBU0UsOEJBQVQsQ0FBd0NQLFFBQXhDLEVBQWtEO0FBQ2hELE1BQU1RLGVBQWUsR0FBR2Isa0ZBQWtCLENBQUNLLFFBQUQsQ0FBMUM7O0FBQ0EsTUFBSVEsZUFBZSxDQUFDRixNQUFoQixJQUEwQixDQUE5QixFQUFpQztBQUMvQixXQUFPTixRQUFQO0FBQ0Q7O0FBRUQsTUFBTVMsS0FBSyxHQUFHLEVBQWQ7QUFDQUQsRUFBQUEsZUFBZSxDQUFDRSxPQUFoQixDQUF3QixVQUFDQyxTQUFELEVBQWU7QUFDckMsUUFBTUMsSUFBSSxHQUFHbEIsMkVBQVcsQ0FBQ2lCLFNBQUQsQ0FBeEI7O0FBQ0EsUUFBSSxDQUFDRixLQUFLLENBQUNHLElBQUQsQ0FBVixFQUFrQjtBQUNoQkgsTUFBQUEsS0FBSyxDQUFDRyxJQUFELENBQUwsR0FBYyxJQUFkO0FBQ0QsS0FGRCxNQUVPO0FBQ0xaLE1BQUFBLFFBQVEsR0FBR0EsUUFBUSxDQUFDRSxPQUFULFdBQW9CUyxTQUFwQixTQUFtQyxFQUFuQyxDQUFYO0FBQ0Q7QUFDRixHQVBEO0FBU0EsU0FBT1gsUUFBUDtBQUNEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ2UsU0FBU2EsT0FBVCxDQUFpQmIsUUFBakIsRUFBMkJjLElBQTNCLEVBQWlDO0FBQzlDLE1BQUlDLGdCQUFnQixHQUFHZixRQUF2Qjs7QUFFQSxNQUFJYyxJQUFJLEtBQUt0QiwyRkFBYixFQUFzQztBQUNwQyxRQUFJRCwyRUFBSixFQUF1QztBQUNyQ3dCLE1BQUFBLGdCQUFnQixHQUFHUiw4QkFBOEIsQ0FBQ1EsZ0JBQUQsQ0FBakQ7QUFDRDs7QUFFRCxXQUFPQSxnQkFBUDtBQUNEOztBQUVELE1BQUkxQixrRUFBSixFQUE4QjtBQUM1QixRQUFNNEIsVUFBVSxHQUFHLGFBQWFDLElBQWIsQ0FBa0JsQixRQUFsQixDQUFuQjs7QUFDQSxRQUFJLENBQUNpQixVQUFMLEVBQWlCO0FBQ2ZGLE1BQUFBLGdCQUFnQixHQUFHaEIsa0NBQWtDLENBQUNnQixnQkFBRCxDQUFyRDtBQUNEO0FBQ0Y7O0FBRUQsTUFBSXpCLG1FQUFKLEVBQStCO0FBQzdCLFFBQUlHLHNFQUFNLENBQUNPLFFBQUQsQ0FBVixFQUFzQjtBQUNwQmUsTUFBQUEsZ0JBQWdCLEdBQUdaLGNBQWMsQ0FBQ1ksZ0JBQUQsQ0FBakM7QUFDRDtBQUNGOztBQUVELFNBQU9BLGdCQUFQO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy9wbGF5YmFjay9sb2FkZXJzL3ByZXByb2Nlc3NvcnMvcGxheWxpc3QuanM/ZTgyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBIQU5ETEVfTUlTU0lOR19FWFRfWF9NQVAsXG4gIEhBTkRMRV9FTVBUWV9IRUFERVJfRklMRVMsXG4gIEhBTkRMRV9EVVBMSUNBVEVfQVVESU9fUkVORElUSU9OUyxcbn0gZnJvbSAnY3JvbnVzL2hhY2tzJztcbmltcG9ydCB7IFBfTE9BREVSX1RZUEVTIH0gZnJvbSAnY3JvbnVzL3BsYXliYWNrL2xvYWRlcnMvcGxheWxpc3RMb2FkZXInO1xuaW1wb3J0IHtcbiAgaXNMaXZlLFxuICBnZXROYW1lQXR0cixcbiAgZ2V0QXVkaW9SZW5kaXRpb25zLFxuICBnZXRTZWdtZW50VXJpcyxcbn0gZnJvbSAnY3JvbnVzL3BsYXliYWNrL3V0aWxzL3BsYXlsaXN0JztcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRIZWFkZXJVcmxGb3JGcmFnbWVudCh1cmwpIHtcbiAgcmV0dXJuIGAke3VybH1oYDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGxheWxpc3RcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGRlY29yYXRlUGxheWxpc3RXaXRoTWlzc2luZ0V4dFhNYXAocGxheWxpc3QpIHtcbiAgY29uc3QgW2ZpcnN0VXJsXSA9IGdldFNlZ21lbnRVcmlzKHBsYXlsaXN0KTtcbiAgaWYgKCFmaXJzdFVybCkge1xuICAgIHJldHVybiBwbGF5bGlzdDtcbiAgfVxuICByZXR1cm4gcGxheWxpc3QucmVwbGFjZShcbiAgICAnI0VYVElORicsXG4gICAgYCNFWFQtWC1NQVA6VVJJPVwiJHtnZXRIZWFkZXJVcmxGb3JGcmFnbWVudChmaXJzdFVybCl9XCJcXG4jRVhUSU5GYCxcbiAgKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGxheWxpc3RcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHJlcGxhY2VYTWFwVXJpKHBsYXlsaXN0KSB7XG4gIGNvbnN0IHVyaXMgPSBnZXRTZWdtZW50VXJpcyhwbGF5bGlzdCk7XG4gIGNvbnN0IGxhc3RVcmwgPSB1cmlzW3VyaXMubGVuZ3RoIC0gMV07XG4gIGlmICghbGFzdFVybCkge1xuICAgIHJldHVybiBwbGF5bGlzdDtcbiAgfVxuICByZXR1cm4gcGxheWxpc3QucmVwbGFjZShcbiAgICAvI0VYVC1YLU1BUDpVUkk9LiovLFxuICAgIGAjRVhULVgtTUFQOlVSST1cIiR7Z2V0SGVhZGVyVXJsRm9yRnJhZ21lbnQobGFzdFVybCl9XCJgLFxuICApO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBwbGF5bGlzdFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmlsdGVyRHVwbGljYXRlQXVkaW9SZW5kaXRpb25zKHBsYXlsaXN0KSB7XG4gIGNvbnN0IGF1ZGlvUmVuZGl0aW9ucyA9IGdldEF1ZGlvUmVuZGl0aW9ucyhwbGF5bGlzdCk7XG4gIGlmIChhdWRpb1JlbmRpdGlvbnMubGVuZ3RoIDw9IDEpIHtcbiAgICByZXR1cm4gcGxheWxpc3Q7XG4gIH1cblxuICBjb25zdCBmb3VuZCA9IHt9O1xuICBhdWRpb1JlbmRpdGlvbnMuZm9yRWFjaCgocmVuZGl0aW9uKSA9PiB7XG4gICAgY29uc3QgbmFtZSA9IGdldE5hbWVBdHRyKHJlbmRpdGlvbik7XG4gICAgaWYgKCFmb3VuZFtuYW1lXSkge1xuICAgICAgZm91bmRbbmFtZV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBwbGF5bGlzdCA9IHBsYXlsaXN0LnJlcGxhY2UoYCR7cmVuZGl0aW9ufVxcbmAsICcnKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwbGF5bGlzdDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGxheWxpc3RcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcm9jZXNzKHBsYXlsaXN0LCB0eXBlKSB7XG4gIGxldCBtb2RpZmllZFBsYXlsaXN0ID0gcGxheWxpc3Q7XG5cbiAgaWYgKHR5cGUgPT09IFBfTE9BREVSX1RZUEVTLm1hbmlmZXN0KSB7XG4gICAgaWYgKEhBTkRMRV9EVVBMSUNBVEVfQVVESU9fUkVORElUSU9OUykge1xuICAgICAgbW9kaWZpZWRQbGF5bGlzdCA9IGZpbHRlckR1cGxpY2F0ZUF1ZGlvUmVuZGl0aW9ucyhtb2RpZmllZFBsYXlsaXN0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbW9kaWZpZWRQbGF5bGlzdDtcbiAgfVxuXG4gIGlmIChIQU5ETEVfTUlTU0lOR19FWFRfWF9NQVApIHtcbiAgICBjb25zdCBpc01hcEZvdW5kID0gLyNFWFQtWC1NQVAvLnRlc3QocGxheWxpc3QpO1xuICAgIGlmICghaXNNYXBGb3VuZCkge1xuICAgICAgbW9kaWZpZWRQbGF5bGlzdCA9IGRlY29yYXRlUGxheWxpc3RXaXRoTWlzc2luZ0V4dFhNYXAobW9kaWZpZWRQbGF5bGlzdCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKEhBTkRMRV9FTVBUWV9IRUFERVJfRklMRVMpIHtcbiAgICBpZiAoaXNMaXZlKHBsYXlsaXN0KSkge1xuICAgICAgbW9kaWZpZWRQbGF5bGlzdCA9IHJlcGxhY2VYTWFwVXJpKG1vZGlmaWVkUGxheWxpc3QpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtb2RpZmllZFBsYXlsaXN0O1xufVxuIl0sIm5hbWVzIjpbIkhBTkRMRV9NSVNTSU5HX0VYVF9YX01BUCIsIkhBTkRMRV9FTVBUWV9IRUFERVJfRklMRVMiLCJIQU5ETEVfRFVQTElDQVRFX0FVRElPX1JFTkRJVElPTlMiLCJQX0xPQURFUl9UWVBFUyIsImlzTGl2ZSIsImdldE5hbWVBdHRyIiwiZ2V0QXVkaW9SZW5kaXRpb25zIiwiZ2V0U2VnbWVudFVyaXMiLCJnZXRIZWFkZXJVcmxGb3JGcmFnbWVudCIsInVybCIsImRlY29yYXRlUGxheWxpc3RXaXRoTWlzc2luZ0V4dFhNYXAiLCJwbGF5bGlzdCIsImZpcnN0VXJsIiwicmVwbGFjZSIsInJlcGxhY2VYTWFwVXJpIiwidXJpcyIsImxhc3RVcmwiLCJsZW5ndGgiLCJmaWx0ZXJEdXBsaWNhdGVBdWRpb1JlbmRpdGlvbnMiLCJhdWRpb1JlbmRpdGlvbnMiLCJmb3VuZCIsImZvckVhY2giLCJyZW5kaXRpb24iLCJuYW1lIiwicHJvY2VzcyIsInR5cGUiLCJtb2RpZmllZFBsYXlsaXN0IiwibWFuaWZlc3QiLCJpc01hcEZvdW5kIiwidGVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/playback/loaders/preprocessors/playlist.js\n");

/***/ }),

/***/ "../js/cronus/playback/stats/buffer.js":
/*!*********************************************!*\
  !*** ../js/cronus/playback/stats/buffer.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"clearTextBuffer\": function() { return /* binding */ clearTextBuffer; },\n/* harmony export */   \"getBuffered\": function() { return /* binding */ getBuffered; },\n/* harmony export */   \"onFragmentBuffered\": function() { return /* binding */ onFragmentBuffered; },\n/* harmony export */   \"onSourceBufferChanged\": function() { return /* binding */ onSourceBufferChanged; },\n/* harmony export */   \"onSubtitleFragmentProcessed\": function() { return /* binding */ onSubtitleFragmentProcessed; },\n/* harmony export */   \"resetBuffered\": function() { return /* binding */ resetBuffered; }\n/* harmony export */ });\n/* harmony import */ var player_utils_video_timeRanges__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! player-utils/video/timeRanges */ \"../node_modules/player-utils/video/timeRanges.js\");\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\nvar buffered = {\n  // audio_en: [],\n  // video_720: [],\n  intersection: [],\n  text: []\n};\nfunction getBuffered(timeRanges) {\n  if (timeRanges) {\n    buffered.intersection = (0,player_utils_video_timeRanges__WEBPACK_IMPORTED_MODULE_0__.timeRangesToArray)(timeRanges);\n  }\n\n  return buffered;\n}\nfunction resetBuffered() {\n  Object.keys(buffered).forEach(function (key) {\n    if (['intersection', 'text'].includes(key)) {\n      buffered[key] = [];\n    } else {\n      delete buffered[key];\n    }\n  });\n}\nfunction clearTextBuffer() {\n  buffered.text = [];\n}\nfunction onSubtitleFragmentProcessed(event, _ref) {\n  var _ref$frag = _ref.frag;\n  _ref$frag = _ref$frag === void 0 ? {} : _ref$frag;\n  var start = _ref$frag.start,\n      duration = _ref$frag.duration;\n\n  if (start === undefined || duration === undefined) {\n    return;\n  }\n\n  insertBuffered('text', start, start + duration);\n}\n/**\n * @param {string} mediaType e.g. \"video_720\"\n * @param {TimeRanges} sourceBufferState\n */\n\nfunction cleanUpBuffered(mediaType, sourceBufferState) {\n  var buffer = buffered[mediaType];\n\n  if (!buffer) {\n    return;\n  }\n\n  var ranges = (0,player_utils_video_timeRanges__WEBPACK_IMPORTED_MODULE_0__.timeRangesToArray)(sourceBufferState);\n  buffered[mediaType] = (0,player_utils_video_timeRanges__WEBPACK_IMPORTED_MODULE_0__.intersection)(ranges, buffer);\n}\n/**\n * @param {{ audio: TimeRanges|undefined, video: TimeRanges|undefined }} timeRanges\n */\n\n\nfunction onSourceBufferChanged(_ref2) {\n  var audio = _ref2.audio,\n      video = _ref2.video;\n\n  if (audio) {\n    var audioRelatedKeys = Object.keys(buffered).filter(function (key) {\n      return key.includes('audio');\n    });\n    audioRelatedKeys.forEach(function (key) {\n      return cleanUpBuffered(key, audio);\n    });\n  }\n\n  if (video) {\n    var videoRelatedKeys = Object.keys(buffered).filter(function (key) {\n      return key.includes('video');\n    });\n    videoRelatedKeys.forEach(function (key) {\n      return cleanUpBuffered(key, video);\n    });\n  }\n}\nfunction onFragmentBuffered(_ref3, videoTracks, audioTracks) {\n  var id = _ref3.id,\n      _ref3$frag = _ref3.frag,\n      startPTS = _ref3$frag.startPTS,\n      endPTS = _ref3$frag.endPTS,\n      level = _ref3$frag.level;\n\n  if (startPTS === undefined || endPTS === undefined) {\n    return;\n  }\n\n  try {\n    switch (id) {\n      case 'main':\n        {\n          var track = videoTracks[level];\n\n          if (!(track && track.height)) {\n            break;\n          }\n\n          var type = \"video_\".concat(track.height);\n\n          if (!buffered[type]) {\n            buffered[type] = [];\n          }\n\n          insertBuffered(type, startPTS, endPTS);\n          break;\n        }\n\n      case 'audio':\n        {\n          var _track = audioTracks.find(function (t) {\n            return t.id === level;\n          });\n\n          if (!(_track && _track.lang)) {\n            break;\n          }\n\n          var _type = \"audio_\".concat(_track.lang);\n\n          if (!buffered[_type]) {\n            buffered[_type] = [];\n          }\n\n          insertBuffered(_type, startPTS, endPTS);\n          break;\n        }\n      // no default\n    }\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction isOverlapping(a, b) {\n  return b.start - a.end < 0.01;\n}\n\nfunction insertBuffered(mediaType, start, end) {\n  var buffer = buffered[mediaType];\n  buffered[mediaType] = buffer.concat({\n    start: start,\n    end: end\n  }).sort(function (a, b) {\n    return a.start - b.start;\n  }).reduce(function (soFar, curr) {\n    var last = soFar[soFar.length - 1];\n\n    if (!last || !isOverlapping(last, curr)) {\n      return [].concat(_toConsumableArray(soFar), [curr]);\n    }\n\n    var newLast = {\n      start: last.start,\n      end: curr.end\n    };\n    soFar[soFar.length - 1] = newLast;\n    return soFar;\n  }, []);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../js/cronus/playback/stats/buffer.js\n");

/***/ }),

/***/ "../js/cronus/playback/stats/index.js":
/*!********************************************!*\
  !*** ../js/cronus/playback/stats/index.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__test__\": function() { return /* reexport safe */ cronus_playback_stats_keyframes__WEBPACK_IMPORTED_MODULE_1__.__test__; },\n/* harmony export */   \"clearTextBuffer\": function() { return /* reexport safe */ cronus_playback_stats_buffer__WEBPACK_IMPORTED_MODULE_0__.clearTextBuffer; },\n/* harmony export */   \"getBuffered\": function() { return /* reexport safe */ cronus_playback_stats_buffer__WEBPACK_IMPORTED_MODULE_0__.getBuffered; },\n/* harmony export */   \"getKeyframeInterval\": function() { return /* reexport safe */ cronus_playback_stats_keyframes__WEBPACK_IMPORTED_MODULE_1__.getKeyframeInterval; },\n/* harmony export */   \"getTelemetryData\": function() { return /* reexport safe */ cronus_playback_stats_telemetry__WEBPACK_IMPORTED_MODULE_2__.getTelemetryData; },\n/* harmony export */   \"onFragmentBuffered\": function() { return /* reexport safe */ cronus_playback_stats_buffer__WEBPACK_IMPORTED_MODULE_0__.onFragmentBuffered; },\n/* harmony export */   \"onMainSegmentMeta\": function() { return /* reexport safe */ cronus_playback_stats_keyframes__WEBPACK_IMPORTED_MODULE_1__.onMainSegmentMeta; },\n/* harmony export */   \"onSourceBufferChanged\": function() { return /* reexport safe */ cronus_playback_stats_buffer__WEBPACK_IMPORTED_MODULE_0__.onSourceBufferChanged; },\n/* harmony export */   \"onSubtitleFragmentProcessed\": function() { return /* reexport safe */ cronus_playback_stats_buffer__WEBPACK_IMPORTED_MODULE_0__.onSubtitleFragmentProcessed; },\n/* harmony export */   \"onTelemetryData\": function() { return /* reexport safe */ cronus_playback_stats_telemetry__WEBPACK_IMPORTED_MODULE_2__.onTelemetryData; },\n/* harmony export */   \"resetBuffered\": function() { return /* reexport safe */ cronus_playback_stats_buffer__WEBPACK_IMPORTED_MODULE_0__.resetBuffered; }\n/* harmony export */ });\n/* harmony import */ var cronus_playback_stats_buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/playback/stats/buffer */ \"../js/cronus/playback/stats/buffer.js\");\n/* harmony import */ var cronus_playback_stats_keyframes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/playback/stats/keyframes */ \"../js/cronus/playback/stats/keyframes.js\");\n/* harmony import */ var cronus_playback_stats_telemetry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/playback/stats/telemetry */ \"../js/cronus/playback/stats/telemetry.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3BsYXliYWNrL3N0YXRzL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vanMvY3JvbnVzL3BsYXliYWNrL3N0YXRzL2luZGV4LmpzPzc0Y2EiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnY3JvbnVzL3BsYXliYWNrL3N0YXRzL2J1ZmZlcic7XG5leHBvcnQgKiBmcm9tICdjcm9udXMvcGxheWJhY2svc3RhdHMva2V5ZnJhbWVzJztcbmV4cG9ydCAqIGZyb20gJ2Nyb251cy9wbGF5YmFjay9zdGF0cy90ZWxlbWV0cnknO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/playback/stats/index.js\n");

/***/ }),

/***/ "../js/cronus/playback/stats/keyframes.js":
/*!************************************************!*\
  !*** ../js/cronus/playback/stats/keyframes.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__test__\": function() { return /* binding */ __test__; },\n/* harmony export */   \"getKeyframeInterval\": function() { return /* binding */ getKeyframeInterval; },\n/* harmony export */   \"onMainSegmentMeta\": function() { return /* binding */ onMainSegmentMeta; }\n/* harmony export */ });\nvar KEYFRAME_HISTORY = 5;\nvar keyframes = [];\nfunction getKeyframeInterval() {\n  if (keyframes.length === 0) {\n    return 0;\n  }\n\n  return keyframes.map(function (item) {\n    return item.keyFrames;\n  }).flat().map(function (val, idx, arr) {\n    return !arr[idx + 1] ? 0 : arr[idx + 1] - val;\n  }).filter(function (val) {\n    return val > 0.1;\n  }).reduce(function (avg, val, idx) {\n    return (avg * idx + val) / (idx + 1);\n  }, 0);\n}\nfunction onMainSegmentMeta(id, meta) {\n  insertMeta(meta);\n}\n\nfunction insertMeta(meta) {\n  keyframes = keyframes.concat(meta).sort(function (a, b) {\n    return a.start - b.start;\n  }).splice(-KEYFRAME_HISTORY);\n}\n\nvar __test__ = {\n  KEYFRAME_HISTORY: KEYFRAME_HISTORY,\n  getKeyFrames: function getKeyFrames() {\n    return keyframes;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3BsYXliYWNrL3N0YXRzL2tleWZyYW1lcy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFNQSxnQkFBZ0IsR0FBRyxDQUF6QjtBQUNBLElBQUlDLFNBQVMsR0FBRyxFQUFoQjtBQUVPLFNBQVNDLG1CQUFULEdBQStCO0FBQ3BDLE1BQUlELFNBQVMsQ0FBQ0UsTUFBVixLQUFxQixDQUF6QixFQUE0QjtBQUMxQixXQUFPLENBQVA7QUFDRDs7QUFFRCxTQUFPRixTQUFTLENBQ2JHLEdBREksQ0FDQSxVQUFDQyxJQUFEO0FBQUEsV0FBVUEsSUFBSSxDQUFDQyxTQUFmO0FBQUEsR0FEQSxFQUVKQyxJQUZJLEdBR0pILEdBSEksQ0FHQSxVQUFDSSxHQUFELEVBQU1DLEdBQU4sRUFBV0MsR0FBWDtBQUFBLFdBQW9CLENBQUNBLEdBQUcsQ0FBQ0QsR0FBRyxHQUFHLENBQVAsQ0FBSixHQUFnQixDQUFoQixHQUFvQkMsR0FBRyxDQUFDRCxHQUFHLEdBQUcsQ0FBUCxDQUFILEdBQWVELEdBQXZEO0FBQUEsR0FIQSxFQUlKRyxNQUpJLENBSUcsVUFBQ0gsR0FBRDtBQUFBLFdBQVNBLEdBQUcsR0FBRyxHQUFmO0FBQUEsR0FKSCxFQUtKSSxNQUxJLENBS0csVUFBQ0MsR0FBRCxFQUFNTCxHQUFOLEVBQVdDLEdBQVg7QUFBQSxXQUFtQixDQUFDSSxHQUFHLEdBQUdKLEdBQU4sR0FBWUQsR0FBYixLQUFxQkMsR0FBRyxHQUFHLENBQTNCLENBQW5CO0FBQUEsR0FMSCxFQUtxRCxDQUxyRCxDQUFQO0FBTUQ7QUFFTSxTQUFTSyxpQkFBVCxDQUEyQkMsRUFBM0IsRUFBK0JDLElBQS9CLEVBQXFDO0FBQzFDQyxFQUFBQSxVQUFVLENBQUNELElBQUQsQ0FBVjtBQUNEOztBQUVELFNBQVNDLFVBQVQsQ0FBb0JELElBQXBCLEVBQTBCO0FBQ3hCZixFQUFBQSxTQUFTLEdBQUdBLFNBQVMsQ0FDbEJpQixNQURTLENBQ0ZGLElBREUsRUFFVEcsSUFGUyxDQUVKLFVBQUNDLENBQUQsRUFBSUMsQ0FBSjtBQUFBLFdBQVVELENBQUMsQ0FBQ0UsS0FBRixHQUFVRCxDQUFDLENBQUNDLEtBQXRCO0FBQUEsR0FGSSxFQUdUQyxNQUhTLENBR0YsQ0FBQ3ZCLGdCQUhDLENBQVo7QUFJRDs7QUFFTSxJQUFNd0IsUUFBUSxHQUFHO0FBQ3RCeEIsRUFBQUEsZ0JBQWdCLEVBQWhCQSxnQkFEc0I7QUFFdEJ5QixFQUFBQSxZQUZzQiwwQkFFUDtBQUNiLFdBQU94QixTQUFQO0FBQ0Q7QUFKcUIsQ0FBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy9wbGF5YmFjay9zdGF0cy9rZXlmcmFtZXMuanM/MjlhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBLRVlGUkFNRV9ISVNUT1JZID0gNTtcbmxldCBrZXlmcmFtZXMgPSBbXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEtleWZyYW1lSW50ZXJ2YWwoKSB7XG4gIGlmIChrZXlmcmFtZXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICByZXR1cm4ga2V5ZnJhbWVzXG4gICAgLm1hcCgoaXRlbSkgPT4gaXRlbS5rZXlGcmFtZXMpXG4gICAgLmZsYXQoKVxuICAgIC5tYXAoKHZhbCwgaWR4LCBhcnIpID0+ICghYXJyW2lkeCArIDFdID8gMCA6IGFycltpZHggKyAxXSAtIHZhbCkpXG4gICAgLmZpbHRlcigodmFsKSA9PiB2YWwgPiAwLjEpXG4gICAgLnJlZHVjZSgoYXZnLCB2YWwsIGlkeCkgPT4gKGF2ZyAqIGlkeCArIHZhbCkgLyAoaWR4ICsgMSksIDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb25NYWluU2VnbWVudE1ldGEoaWQsIG1ldGEpIHtcbiAgaW5zZXJ0TWV0YShtZXRhKTtcbn1cblxuZnVuY3Rpb24gaW5zZXJ0TWV0YShtZXRhKSB7XG4gIGtleWZyYW1lcyA9IGtleWZyYW1lc1xuICAgIC5jb25jYXQobWV0YSlcbiAgICAuc29ydCgoYSwgYikgPT4gYS5zdGFydCAtIGIuc3RhcnQpXG4gICAgLnNwbGljZSgtS0VZRlJBTUVfSElTVE9SWSk7XG59XG5cbmV4cG9ydCBjb25zdCBfX3Rlc3RfXyA9IHtcbiAgS0VZRlJBTUVfSElTVE9SWSxcbiAgZ2V0S2V5RnJhbWVzKCkge1xuICAgIHJldHVybiBrZXlmcmFtZXM7XG4gIH0sXG59O1xuIl0sIm5hbWVzIjpbIktFWUZSQU1FX0hJU1RPUlkiLCJrZXlmcmFtZXMiLCJnZXRLZXlmcmFtZUludGVydmFsIiwibGVuZ3RoIiwibWFwIiwiaXRlbSIsImtleUZyYW1lcyIsImZsYXQiLCJ2YWwiLCJpZHgiLCJhcnIiLCJmaWx0ZXIiLCJyZWR1Y2UiLCJhdmciLCJvbk1haW5TZWdtZW50TWV0YSIsImlkIiwibWV0YSIsImluc2VydE1ldGEiLCJjb25jYXQiLCJzb3J0IiwiYSIsImIiLCJzdGFydCIsInNwbGljZSIsIl9fdGVzdF9fIiwiZ2V0S2V5RnJhbWVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/playback/stats/keyframes.js\n");

/***/ }),

/***/ "../js/cronus/playback/stats/telemetry.js":
/*!************************************************!*\
  !*** ../js/cronus/playback/stats/telemetry.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getTelemetryData\": function() { return /* binding */ getTelemetryData; },\n/* harmony export */   \"onTelemetryData\": function() { return /* binding */ onTelemetryData; }\n/* harmony export */ });\nvar LONG_HISTORY_LENGTH = 5;\nvar SHORT_HISTORY_LENGTH = 3;\nvar history = [];\nfunction getTelemetryData() {\n  if (history.length === 0) {\n    return {\n      shortMean: 0,\n      longMean: 0,\n      waitingTimeInSec: 0\n    };\n  }\n\n  var shortHistory = history.slice(-SHORT_HISTORY_LENGTH);\n  return {\n    shortMean: harmonic(shortHistory.map(function (v) {\n      return v.bandwidth;\n    })),\n    longMean: harmonic(history.map(function (v) {\n      return v.bandwidth;\n    })),\n    waitingTimeInSec: harmonic(history.map(function (v) {\n      return v.waitingTimeInSec;\n    }))\n  };\n}\nfunction onTelemetryData(data) {\n  var id = data.id,\n      _data$stats = data.stats,\n      bwEstimate = _data$stats.bwEstimate,\n      tfirst = _data$stats.tfirst,\n      trequest = _data$stats.trequest;\n\n  if ((id === 'main' || id === 'audio') && bwEstimate) {\n    history = history.concat({\n      bandwidth: bwEstimate / 1000,\n      waitingTimeInSec: (tfirst - trequest) / 1000\n    }).slice(-LONG_HISTORY_LENGTH);\n  }\n}\n\nfunction harmonic(arr) {\n  if (!arr.length) {\n    return 0;\n  }\n\n  var reciprocalSum = arr.reduce(calcReciprocalSum, 0);\n  return reciprocalSum === 0 ? 0 : arr.length / reciprocalSum;\n}\n\nfunction calcReciprocalSum(acc, item) {\n  return item !== 0 ? acc + 1 / item : acc;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3BsYXliYWNrL3N0YXRzL3RlbGVtZXRyeS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQU1BLG1CQUFtQixHQUFHLENBQTVCO0FBQ0EsSUFBTUMsb0JBQW9CLEdBQUcsQ0FBN0I7QUFDQSxJQUFJQyxPQUFPLEdBQUcsRUFBZDtBQUVPLFNBQVNDLGdCQUFULEdBQTRCO0FBQ2pDLE1BQUlELE9BQU8sQ0FBQ0UsTUFBUixLQUFtQixDQUF2QixFQUEwQjtBQUN4QixXQUFPO0FBQ0xDLE1BQUFBLFNBQVMsRUFBRSxDQUROO0FBRUxDLE1BQUFBLFFBQVEsRUFBRSxDQUZMO0FBR0xDLE1BQUFBLGdCQUFnQixFQUFFO0FBSGIsS0FBUDtBQUtEOztBQUVELE1BQU1DLFlBQVksR0FBR04sT0FBTyxDQUFDTyxLQUFSLENBQWMsQ0FBQ1Isb0JBQWYsQ0FBckI7QUFDQSxTQUFPO0FBQ0xJLElBQUFBLFNBQVMsRUFBRUssUUFBUSxDQUFDRixZQUFZLENBQUNHLEdBQWIsQ0FBaUIsVUFBQ0MsQ0FBRDtBQUFBLGFBQU9BLENBQUMsQ0FBQ0MsU0FBVDtBQUFBLEtBQWpCLENBQUQsQ0FEZDtBQUVMUCxJQUFBQSxRQUFRLEVBQUVJLFFBQVEsQ0FBQ1IsT0FBTyxDQUFDUyxHQUFSLENBQVksVUFBQ0MsQ0FBRDtBQUFBLGFBQU9BLENBQUMsQ0FBQ0MsU0FBVDtBQUFBLEtBQVosQ0FBRCxDQUZiO0FBR0xOLElBQUFBLGdCQUFnQixFQUFFRyxRQUFRLENBQUNSLE9BQU8sQ0FBQ1MsR0FBUixDQUFZLFVBQUNDLENBQUQ7QUFBQSxhQUFPQSxDQUFDLENBQUNMLGdCQUFUO0FBQUEsS0FBWixDQUFEO0FBSHJCLEdBQVA7QUFLRDtBQUVNLFNBQVNPLGVBQVQsQ0FBeUJDLElBQXpCLEVBQStCO0FBQ3BDLE1BQ0VDLEVBREYsR0FHSUQsSUFISixDQUNFQyxFQURGO0FBQUEsb0JBR0lELElBSEosQ0FFRUUsS0FGRjtBQUFBLE1BRVdDLFVBRlgsZUFFV0EsVUFGWDtBQUFBLE1BRXVCQyxNQUZ2QixlQUV1QkEsTUFGdkI7QUFBQSxNQUUrQkMsUUFGL0IsZUFFK0JBLFFBRi9COztBQUtBLE1BQUksQ0FBQ0osRUFBRSxLQUFLLE1BQVAsSUFBaUJBLEVBQUUsS0FBSyxPQUF6QixLQUFxQ0UsVUFBekMsRUFBcUQ7QUFDbkRoQixJQUFBQSxPQUFPLEdBQUdBLE9BQU8sQ0FDZG1CLE1BRE8sQ0FDQTtBQUNOUixNQUFBQSxTQUFTLEVBQUVLLFVBQVUsR0FBRyxJQURsQjtBQUVOWCxNQUFBQSxnQkFBZ0IsRUFBRSxDQUFDWSxNQUFNLEdBQUdDLFFBQVYsSUFBc0I7QUFGbEMsS0FEQSxFQUtQWCxLQUxPLENBS0QsQ0FBQ1QsbUJBTEEsQ0FBVjtBQU1EO0FBQ0Y7O0FBRUQsU0FBU1UsUUFBVCxDQUFrQlksR0FBbEIsRUFBdUI7QUFDckIsTUFBSSxDQUFDQSxHQUFHLENBQUNsQixNQUFULEVBQWlCO0FBQ2YsV0FBTyxDQUFQO0FBQ0Q7O0FBRUQsTUFBTW1CLGFBQWEsR0FBR0QsR0FBRyxDQUFDRSxNQUFKLENBQVdDLGlCQUFYLEVBQThCLENBQTlCLENBQXRCO0FBQ0EsU0FBT0YsYUFBYSxLQUFLLENBQWxCLEdBQXNCLENBQXRCLEdBQTBCRCxHQUFHLENBQUNsQixNQUFKLEdBQWFtQixhQUE5QztBQUNEOztBQUVELFNBQVNFLGlCQUFULENBQTJCQyxHQUEzQixFQUFnQ0MsSUFBaEMsRUFBc0M7QUFDcEMsU0FBT0EsSUFBSSxLQUFLLENBQVQsR0FBYUQsR0FBRyxHQUFHLElBQUlDLElBQXZCLEdBQThCRCxHQUFyQztBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvcGxheWJhY2svc3RhdHMvdGVsZW1ldHJ5LmpzP2M0MGQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgTE9OR19ISVNUT1JZX0xFTkdUSCA9IDU7XG5jb25zdCBTSE9SVF9ISVNUT1JZX0xFTkdUSCA9IDM7XG5sZXQgaGlzdG9yeSA9IFtdO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGVsZW1ldHJ5RGF0YSgpIHtcbiAgaWYgKGhpc3RvcnkubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNob3J0TWVhbjogMCxcbiAgICAgIGxvbmdNZWFuOiAwLFxuICAgICAgd2FpdGluZ1RpbWVJblNlYzogMCxcbiAgICB9O1xuICB9XG5cbiAgY29uc3Qgc2hvcnRIaXN0b3J5ID0gaGlzdG9yeS5zbGljZSgtU0hPUlRfSElTVE9SWV9MRU5HVEgpO1xuICByZXR1cm4ge1xuICAgIHNob3J0TWVhbjogaGFybW9uaWMoc2hvcnRIaXN0b3J5Lm1hcCgodikgPT4gdi5iYW5kd2lkdGgpKSxcbiAgICBsb25nTWVhbjogaGFybW9uaWMoaGlzdG9yeS5tYXAoKHYpID0+IHYuYmFuZHdpZHRoKSksXG4gICAgd2FpdGluZ1RpbWVJblNlYzogaGFybW9uaWMoaGlzdG9yeS5tYXAoKHYpID0+IHYud2FpdGluZ1RpbWVJblNlYykpLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb25UZWxlbWV0cnlEYXRhKGRhdGEpIHtcbiAgY29uc3Qge1xuICAgIGlkLFxuICAgIHN0YXRzOiB7IGJ3RXN0aW1hdGUsIHRmaXJzdCwgdHJlcXVlc3QgfSxcbiAgfSA9IGRhdGE7XG5cbiAgaWYgKChpZCA9PT0gJ21haW4nIHx8IGlkID09PSAnYXVkaW8nKSAmJiBid0VzdGltYXRlKSB7XG4gICAgaGlzdG9yeSA9IGhpc3RvcnlcbiAgICAgIC5jb25jYXQoe1xuICAgICAgICBiYW5kd2lkdGg6IGJ3RXN0aW1hdGUgLyAxMDAwLFxuICAgICAgICB3YWl0aW5nVGltZUluU2VjOiAodGZpcnN0IC0gdHJlcXVlc3QpIC8gMTAwMCxcbiAgICAgIH0pXG4gICAgICAuc2xpY2UoLUxPTkdfSElTVE9SWV9MRU5HVEgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhcm1vbmljKGFycikge1xuICBpZiAoIWFyci5sZW5ndGgpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGNvbnN0IHJlY2lwcm9jYWxTdW0gPSBhcnIucmVkdWNlKGNhbGNSZWNpcHJvY2FsU3VtLCAwKTtcbiAgcmV0dXJuIHJlY2lwcm9jYWxTdW0gPT09IDAgPyAwIDogYXJyLmxlbmd0aCAvIHJlY2lwcm9jYWxTdW07XG59XG5cbmZ1bmN0aW9uIGNhbGNSZWNpcHJvY2FsU3VtKGFjYywgaXRlbSkge1xuICByZXR1cm4gaXRlbSAhPT0gMCA/IGFjYyArIDEgLyBpdGVtIDogYWNjO1xufVxuIl0sIm5hbWVzIjpbIkxPTkdfSElTVE9SWV9MRU5HVEgiLCJTSE9SVF9ISVNUT1JZX0xFTkdUSCIsImhpc3RvcnkiLCJnZXRUZWxlbWV0cnlEYXRhIiwibGVuZ3RoIiwic2hvcnRNZWFuIiwibG9uZ01lYW4iLCJ3YWl0aW5nVGltZUluU2VjIiwic2hvcnRIaXN0b3J5Iiwic2xpY2UiLCJoYXJtb25pYyIsIm1hcCIsInYiLCJiYW5kd2lkdGgiLCJvblRlbGVtZXRyeURhdGEiLCJkYXRhIiwiaWQiLCJzdGF0cyIsImJ3RXN0aW1hdGUiLCJ0Zmlyc3QiLCJ0cmVxdWVzdCIsImNvbmNhdCIsImFyciIsInJlY2lwcm9jYWxTdW0iLCJyZWR1Y2UiLCJjYWxjUmVjaXByb2NhbFN1bSIsImFjYyIsIml0ZW0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/playback/stats/telemetry.js\n");

/***/ }),

/***/ "../js/cronus/playback/utils/playlist.js":
/*!***********************************************!*\
  !*** ../js/cronus/playback/utils/playlist.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getAudioRenditions\": function() { return /* binding */ getAudioRenditions; },\n/* harmony export */   \"getNameAttr\": function() { return /* binding */ getNameAttr; },\n/* harmony export */   \"getQuotedAttr\": function() { return /* binding */ getQuotedAttr; },\n/* harmony export */   \"getRenditionStreams\": function() { return /* binding */ getRenditionStreams; },\n/* harmony export */   \"getSegmentUris\": function() { return /* binding */ getSegmentUris; },\n/* harmony export */   \"getTypeAttr\": function() { return /* binding */ getTypeAttr; },\n/* harmony export */   \"getUnquotedAttr\": function() { return /* binding */ getUnquotedAttr; },\n/* harmony export */   \"getVariantStreams\": function() { return /* binding */ getVariantStreams; },\n/* harmony export */   \"isLive\": function() { return /* binding */ isLive; }\n/* harmony export */ });\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/**\n * @typedef {string} Playlist\n */\n\n/**\n * @typedef {string} Meta - e.g. '#EXT-X-MEDIA:TYPE=AUDIO,AUTOSELECT=YES,GROUP-ID=\"audio\",NAME=\"name\",LANGUAGE=\"en\",URI=\"audio.m3u8\"'\n */\n\n/**\n * @param {string} playlist\n * @returns {boolean}\n */\nfunction isLive(playlist) {\n  return !/^#EXT-X-PLAYLIST-TYPE:\\s*VOD/m.test(playlist);\n}\n/**\n * @param {Playlist} playlist\n * @returns {Array<Meta>}\n */\n\nfunction getVariantStreams(playlist) {\n  var matches = playlist.matchAll(/^#EXT-X-STREAM-INF:.+\\n.+$/gm);\n  return Array.from(matches, function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        match = _ref2[0];\n\n    return match;\n  });\n}\n/**\n * @param {Playlist} playlist\n * @returns {Array<Meta>}\n */\n\nfunction getRenditionStreams(playlist) {\n  var matches = playlist.matchAll(/^#EXT-X-MEDIA:.+$/gm);\n  return Array.from(matches, function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 1),\n        match = _ref4[0];\n\n    return match;\n  });\n}\n/**\n * @param {Meta} meta\n * @param {string} attrName\n * @returns {string|undefined}\n */\n\nfunction getQuotedAttr(meta, attrName) {\n  var matches = meta.matchAll(/([A-Z-]+)=\"(.+?)\"(?:,|$)/gm);\n  var attr = Array.from(matches, function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 3),\n        name = _ref6[1],\n        value = _ref6[2];\n\n    return {\n      name: name,\n      value: value\n    };\n  }).find(function (_ref7) {\n    var name = _ref7.name;\n    return name === attrName;\n  });\n\n  if (!attr) {\n    return undefined;\n  }\n\n  return attr.value;\n}\n/**\n * @param {Meta} meta\n * @param {string} attrName\n * @returns {string|undefined}\n */\n\nfunction getUnquotedAttr(meta, attrName) {\n  var matches = meta.matchAll(/([A-Z-]+)=(.+?)(?:,|$)/gm);\n  var attr = Array.from(matches, function (_ref8) {\n    var _ref9 = _slicedToArray(_ref8, 3),\n        name = _ref9[1],\n        value = _ref9[2];\n\n    return {\n      name: name,\n      value: value\n    };\n  }).find(function (_ref10) {\n    var name = _ref10.name;\n    return name === attrName;\n  });\n\n  if (!attr) {\n    return undefined;\n  }\n\n  return attr.value;\n}\n/**\n * The value is enumerated-string; valid strings are AUDIO and VIDEO. If the\n * value is AUDIO, the Playlist described by the tag MUST contain audio media.\n * If the value is VIDEO, the Playlist MUST contain video media.\n * @param {Meta} meta\n * @returns {string|undefined}\n */\n\nfunction getTypeAttr(meta) {\n  return getUnquotedAttr(meta, 'TYPE');\n}\n/**\n * The value is a quoted-string containing a human-readable description of the\n * rendition. If the LANGUAGE attribute is present then this description SHOULD\n * be in that language.\n * @param {Meta} meta\n * @returns {string|undefined}\n */\n\nfunction getNameAttr(meta) {\n  return getQuotedAttr(meta, 'NAME');\n}\n/**\n * @param {Playlist} playlist\n * @returns {Array<Meta>}\n */\n\nfunction getAudioRenditions(playlist) {\n  return getRenditionStreams(playlist).filter(function (meta) {\n    return getTypeAttr(meta) === 'AUDIO';\n  });\n}\n/**\n * @param {string} playlist\n * @returns {Array<string>}\n */\n\nfunction getSegmentUris(playlist) {\n  var matches = playlist.matchAll(/^#EXTINF:.+\\n(.+)$/gm);\n  return Array.from(matches, function (_ref11) {\n    var _ref12 = _slicedToArray(_ref11, 2),\n        url = _ref12[1];\n\n    return url;\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3BsYXliYWNrL3V0aWxzL3BsYXlsaXN0LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTQSxNQUFULENBQWdCQyxRQUFoQixFQUEwQjtBQUMvQixTQUFPLENBQUMsZ0NBQWdDQyxJQUFoQyxDQUFxQ0QsUUFBckMsQ0FBUjtBQUNEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBQ08sU0FBU0UsaUJBQVQsQ0FBMkJGLFFBQTNCLEVBQXFDO0FBQzFDLE1BQU1HLE9BQU8sR0FBR0gsUUFBUSxDQUFDSSxRQUFULENBQWtCLDhCQUFsQixDQUFoQjtBQUNBLFNBQU9DLEtBQUssQ0FBQ0MsSUFBTixDQUFXSCxPQUFYLEVBQW9CO0FBQUE7QUFBQSxRQUFFSSxLQUFGOztBQUFBLFdBQWFBLEtBQWI7QUFBQSxHQUFwQixDQUFQO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFDTyxTQUFTQyxtQkFBVCxDQUE2QlIsUUFBN0IsRUFBdUM7QUFDNUMsTUFBTUcsT0FBTyxHQUFHSCxRQUFRLENBQUNJLFFBQVQsQ0FBa0IscUJBQWxCLENBQWhCO0FBQ0EsU0FBT0MsS0FBSyxDQUFDQyxJQUFOLENBQVdILE9BQVgsRUFBb0I7QUFBQTtBQUFBLFFBQUVJLEtBQUY7O0FBQUEsV0FBYUEsS0FBYjtBQUFBLEdBQXBCLENBQVA7QUFDRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ08sU0FBU0UsYUFBVCxDQUF1QkMsSUFBdkIsRUFBNkJDLFFBQTdCLEVBQXVDO0FBQzVDLE1BQU1SLE9BQU8sR0FBR08sSUFBSSxDQUFDTixRQUFMLENBQWMsNEJBQWQsQ0FBaEI7QUFDQSxNQUFNUSxJQUFJLEdBQUdQLEtBQUssQ0FBQ0MsSUFBTixDQUFXSCxPQUFYLEVBQW9CO0FBQUE7QUFBQSxRQUFJVSxJQUFKO0FBQUEsUUFBVUMsS0FBVjs7QUFBQSxXQUFzQjtBQUFFRCxNQUFBQSxJQUFJLEVBQUpBLElBQUY7QUFBUUMsTUFBQUEsS0FBSyxFQUFMQTtBQUFSLEtBQXRCO0FBQUEsR0FBcEIsRUFBNERDLElBQTVELENBQ1g7QUFBQSxRQUFHRixJQUFILFNBQUdBLElBQUg7QUFBQSxXQUFjQSxJQUFJLEtBQUtGLFFBQXZCO0FBQUEsR0FEVyxDQUFiOztBQUdBLE1BQUksQ0FBQ0MsSUFBTCxFQUFXO0FBQ1QsV0FBT0ksU0FBUDtBQUNEOztBQUVELFNBQU9KLElBQUksQ0FBQ0UsS0FBWjtBQUNEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDTyxTQUFTRyxlQUFULENBQXlCUCxJQUF6QixFQUErQkMsUUFBL0IsRUFBeUM7QUFDOUMsTUFBTVIsT0FBTyxHQUFHTyxJQUFJLENBQUNOLFFBQUwsQ0FBYywwQkFBZCxDQUFoQjtBQUNBLE1BQU1RLElBQUksR0FBR1AsS0FBSyxDQUFDQyxJQUFOLENBQVdILE9BQVgsRUFBb0I7QUFBQTtBQUFBLFFBQUlVLElBQUo7QUFBQSxRQUFVQyxLQUFWOztBQUFBLFdBQXNCO0FBQUVELE1BQUFBLElBQUksRUFBSkEsSUFBRjtBQUFRQyxNQUFBQSxLQUFLLEVBQUxBO0FBQVIsS0FBdEI7QUFBQSxHQUFwQixFQUE0REMsSUFBNUQsQ0FDWDtBQUFBLFFBQUdGLElBQUgsVUFBR0EsSUFBSDtBQUFBLFdBQWNBLElBQUksS0FBS0YsUUFBdkI7QUFBQSxHQURXLENBQWI7O0FBR0EsTUFBSSxDQUFDQyxJQUFMLEVBQVc7QUFDVCxXQUFPSSxTQUFQO0FBQ0Q7O0FBRUQsU0FBT0osSUFBSSxDQUFDRSxLQUFaO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDTyxTQUFTSSxXQUFULENBQXFCUixJQUFyQixFQUEyQjtBQUNoQyxTQUFPTyxlQUFlLENBQUNQLElBQUQsRUFBTyxNQUFQLENBQXRCO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDTyxTQUFTUyxXQUFULENBQXFCVCxJQUFyQixFQUEyQjtBQUNoQyxTQUFPRCxhQUFhLENBQUNDLElBQUQsRUFBTyxNQUFQLENBQXBCO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFDTyxTQUFTVSxrQkFBVCxDQUE0QnBCLFFBQTVCLEVBQXNDO0FBQzNDLFNBQU9RLG1CQUFtQixDQUFDUixRQUFELENBQW5CLENBQThCcUIsTUFBOUIsQ0FBcUMsVUFBQ1gsSUFBRDtBQUFBLFdBQVVRLFdBQVcsQ0FBQ1IsSUFBRCxDQUFYLEtBQXNCLE9BQWhDO0FBQUEsR0FBckMsQ0FBUDtBQUNEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBQ08sU0FBU1ksY0FBVCxDQUF3QnRCLFFBQXhCLEVBQWtDO0FBQ3ZDLE1BQU1HLE9BQU8sR0FBR0gsUUFBUSxDQUFDSSxRQUFULENBQWtCLHNCQUFsQixDQUFoQjtBQUNBLFNBQU9DLEtBQUssQ0FBQ0MsSUFBTixDQUFXSCxPQUFYLEVBQW9CO0FBQUE7QUFBQSxRQUFJb0IsR0FBSjs7QUFBQSxXQUFhQSxHQUFiO0FBQUEsR0FBcEIsQ0FBUDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvcGxheWJhY2svdXRpbHMvcGxheWxpc3QuanM/NDk0OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtzdHJpbmd9IFBsYXlsaXN0XG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7c3RyaW5nfSBNZXRhIC0gZS5nLiAnI0VYVC1YLU1FRElBOlRZUEU9QVVESU8sQVVUT1NFTEVDVD1ZRVMsR1JPVVAtSUQ9XCJhdWRpb1wiLE5BTUU9XCJuYW1lXCIsTEFOR1VBR0U9XCJlblwiLFVSST1cImF1ZGlvLm0zdThcIidcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBwbGF5bGlzdFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0xpdmUocGxheWxpc3QpIHtcbiAgcmV0dXJuICEvXiNFWFQtWC1QTEFZTElTVC1UWVBFOlxccypWT0QvbS50ZXN0KHBsYXlsaXN0KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1BsYXlsaXN0fSBwbGF5bGlzdFxuICogQHJldHVybnMge0FycmF5PE1ldGE+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFyaWFudFN0cmVhbXMocGxheWxpc3QpIHtcbiAgY29uc3QgbWF0Y2hlcyA9IHBsYXlsaXN0Lm1hdGNoQWxsKC9eI0VYVC1YLVNUUkVBTS1JTkY6LitcXG4uKyQvZ20pO1xuICByZXR1cm4gQXJyYXkuZnJvbShtYXRjaGVzLCAoW21hdGNoXSkgPT4gbWF0Y2gpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7UGxheWxpc3R9IHBsYXlsaXN0XG4gKiBAcmV0dXJucyB7QXJyYXk8TWV0YT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZW5kaXRpb25TdHJlYW1zKHBsYXlsaXN0KSB7XG4gIGNvbnN0IG1hdGNoZXMgPSBwbGF5bGlzdC5tYXRjaEFsbCgvXiNFWFQtWC1NRURJQTouKyQvZ20pO1xuICByZXR1cm4gQXJyYXkuZnJvbShtYXRjaGVzLCAoW21hdGNoXSkgPT4gbWF0Y2gpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7TWV0YX0gbWV0YVxuICogQHBhcmFtIHtzdHJpbmd9IGF0dHJOYW1lXG4gKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFF1b3RlZEF0dHIobWV0YSwgYXR0ck5hbWUpIHtcbiAgY29uc3QgbWF0Y2hlcyA9IG1ldGEubWF0Y2hBbGwoLyhbQS1aLV0rKT1cIiguKz8pXCIoPzosfCQpL2dtKTtcbiAgY29uc3QgYXR0ciA9IEFycmF5LmZyb20obWF0Y2hlcywgKFssIG5hbWUsIHZhbHVlXSkgPT4gKHsgbmFtZSwgdmFsdWUgfSkpLmZpbmQoXG4gICAgKHsgbmFtZSB9KSA9PiBuYW1lID09PSBhdHRyTmFtZSxcbiAgKTtcbiAgaWYgKCFhdHRyKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiBhdHRyLnZhbHVlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7TWV0YX0gbWV0YVxuICogQHBhcmFtIHtzdHJpbmd9IGF0dHJOYW1lXG4gKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFVucXVvdGVkQXR0cihtZXRhLCBhdHRyTmFtZSkge1xuICBjb25zdCBtYXRjaGVzID0gbWV0YS5tYXRjaEFsbCgvKFtBLVotXSspPSguKz8pKD86LHwkKS9nbSk7XG4gIGNvbnN0IGF0dHIgPSBBcnJheS5mcm9tKG1hdGNoZXMsIChbLCBuYW1lLCB2YWx1ZV0pID0+ICh7IG5hbWUsIHZhbHVlIH0pKS5maW5kKFxuICAgICh7IG5hbWUgfSkgPT4gbmFtZSA9PT0gYXR0ck5hbWUsXG4gICk7XG4gIGlmICghYXR0cikge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4gYXR0ci52YWx1ZTtcbn1cblxuLyoqXG4gKiBUaGUgdmFsdWUgaXMgZW51bWVyYXRlZC1zdHJpbmc7IHZhbGlkIHN0cmluZ3MgYXJlIEFVRElPIGFuZCBWSURFTy4gSWYgdGhlXG4gKiB2YWx1ZSBpcyBBVURJTywgdGhlIFBsYXlsaXN0IGRlc2NyaWJlZCBieSB0aGUgdGFnIE1VU1QgY29udGFpbiBhdWRpbyBtZWRpYS5cbiAqIElmIHRoZSB2YWx1ZSBpcyBWSURFTywgdGhlIFBsYXlsaXN0IE1VU1QgY29udGFpbiB2aWRlbyBtZWRpYS5cbiAqIEBwYXJhbSB7TWV0YX0gbWV0YVxuICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUeXBlQXR0cihtZXRhKSB7XG4gIHJldHVybiBnZXRVbnF1b3RlZEF0dHIobWV0YSwgJ1RZUEUnKTtcbn1cblxuLyoqXG4gKiBUaGUgdmFsdWUgaXMgYSBxdW90ZWQtc3RyaW5nIGNvbnRhaW5pbmcgYSBodW1hbi1yZWFkYWJsZSBkZXNjcmlwdGlvbiBvZiB0aGVcbiAqIHJlbmRpdGlvbi4gSWYgdGhlIExBTkdVQUdFIGF0dHJpYnV0ZSBpcyBwcmVzZW50IHRoZW4gdGhpcyBkZXNjcmlwdGlvbiBTSE9VTERcbiAqIGJlIGluIHRoYXQgbGFuZ3VhZ2UuXG4gKiBAcGFyYW0ge01ldGF9IG1ldGFcbiAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmFtZUF0dHIobWV0YSkge1xuICByZXR1cm4gZ2V0UXVvdGVkQXR0cihtZXRhLCAnTkFNRScpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7UGxheWxpc3R9IHBsYXlsaXN0XG4gKiBAcmV0dXJucyB7QXJyYXk8TWV0YT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBdWRpb1JlbmRpdGlvbnMocGxheWxpc3QpIHtcbiAgcmV0dXJuIGdldFJlbmRpdGlvblN0cmVhbXMocGxheWxpc3QpLmZpbHRlcigobWV0YSkgPT4gZ2V0VHlwZUF0dHIobWV0YSkgPT09ICdBVURJTycpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBwbGF5bGlzdFxuICogQHJldHVybnMge0FycmF5PHN0cmluZz59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZWdtZW50VXJpcyhwbGF5bGlzdCkge1xuICBjb25zdCBtYXRjaGVzID0gcGxheWxpc3QubWF0Y2hBbGwoL14jRVhUSU5GOi4rXFxuKC4rKSQvZ20pO1xuICByZXR1cm4gQXJyYXkuZnJvbShtYXRjaGVzLCAoWywgdXJsXSkgPT4gdXJsKTtcbn1cbiJdLCJuYW1lcyI6WyJpc0xpdmUiLCJwbGF5bGlzdCIsInRlc3QiLCJnZXRWYXJpYW50U3RyZWFtcyIsIm1hdGNoZXMiLCJtYXRjaEFsbCIsIkFycmF5IiwiZnJvbSIsIm1hdGNoIiwiZ2V0UmVuZGl0aW9uU3RyZWFtcyIsImdldFF1b3RlZEF0dHIiLCJtZXRhIiwiYXR0ck5hbWUiLCJhdHRyIiwibmFtZSIsInZhbHVlIiwiZmluZCIsInVuZGVmaW5lZCIsImdldFVucXVvdGVkQXR0ciIsImdldFR5cGVBdHRyIiwiZ2V0TmFtZUF0dHIiLCJnZXRBdWRpb1JlbmRpdGlvbnMiLCJmaWx0ZXIiLCJnZXRTZWdtZW50VXJpcyIsInVybCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/playback/utils/playlist.js\n");

/***/ }),

/***/ "../js/cronus/playback/vtt.js":
/*!************************************!*\
  !*** ../js/cronus/playback/vtt.js ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"addExternalCues\": function() { return /* binding */ addExternalCues; },\n/* harmony export */   \"createExternalTrack\": function() { return /* binding */ createExternalTrack; }\n/* harmony export */ });\nvar track = null;\nvar storedCues = [];\nfunction createExternalTrack($media) {\n  if (!$media || track) {\n    return;\n  }\n\n  track = $media.addTextTrack('subtitles', 'English', 'en');\n  track.mode = 'showing';\n  addCuesToTrack(storedCues);\n  storedCues = [];\n}\nfunction addExternalCues(cues) {\n  if (!cues) {\n    return;\n  }\n\n  if (!track) {\n    storeCues(cues);\n    return;\n  }\n\n  removeCuesFromTrack();\n  addCuesToTrack(cues);\n}\n\nfunction removeCuesFromTrack() {\n  var length = track.cues.length;\n\n  while (length) {\n    length -= 1;\n    track.removeCue(track.cues[length]);\n  }\n}\n\nfunction addCuesToTrack(cues) {\n  cues.forEach(function (cueData) {\n    var cue = new VTTCue(cueData[0], cueData[1], cueData[2]);\n    cue.line = -4;\n    track.addCue(cue);\n  });\n}\n\nfunction storeCues(cues) {\n  storedCues = storedCues.concat(cues);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3BsYXliYWNrL3Z0dC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQUlBLEtBQUssR0FBRyxJQUFaO0FBQ0EsSUFBSUMsVUFBVSxHQUFHLEVBQWpCO0FBRU8sU0FBU0MsbUJBQVQsQ0FBNkJDLE1BQTdCLEVBQXFDO0FBQzFDLE1BQUksQ0FBQ0EsTUFBRCxJQUFXSCxLQUFmLEVBQXNCO0FBQ3BCO0FBQ0Q7O0FBRURBLEVBQUFBLEtBQUssR0FBR0csTUFBTSxDQUFDQyxZQUFQLENBQW9CLFdBQXBCLEVBQWlDLFNBQWpDLEVBQTRDLElBQTVDLENBQVI7QUFDQUosRUFBQUEsS0FBSyxDQUFDSyxJQUFOLEdBQWEsU0FBYjtBQUVBQyxFQUFBQSxjQUFjLENBQUNMLFVBQUQsQ0FBZDtBQUNBQSxFQUFBQSxVQUFVLEdBQUcsRUFBYjtBQUNEO0FBRU0sU0FBU00sZUFBVCxDQUF5QkMsSUFBekIsRUFBK0I7QUFDcEMsTUFBSSxDQUFDQSxJQUFMLEVBQVc7QUFDVDtBQUNEOztBQUVELE1BQUksQ0FBQ1IsS0FBTCxFQUFZO0FBQ1ZTLElBQUFBLFNBQVMsQ0FBQ0QsSUFBRCxDQUFUO0FBQ0E7QUFDRDs7QUFFREUsRUFBQUEsbUJBQW1CO0FBQ25CSixFQUFBQSxjQUFjLENBQUNFLElBQUQsQ0FBZDtBQUNEOztBQUVELFNBQVNFLG1CQUFULEdBQStCO0FBQzdCLE1BQU1DLE1BQU4sR0FBaUJYLEtBQUssQ0FBQ1EsSUFBdkIsQ0FBTUcsTUFBTjs7QUFDQSxTQUFPQSxNQUFQLEVBQWU7QUFDYkEsSUFBQUEsTUFBTSxJQUFJLENBQVY7QUFDQVgsSUFBQUEsS0FBSyxDQUFDWSxTQUFOLENBQWdCWixLQUFLLENBQUNRLElBQU4sQ0FBV0csTUFBWCxDQUFoQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBU0wsY0FBVCxDQUF3QkUsSUFBeEIsRUFBOEI7QUFDNUJBLEVBQUFBLElBQUksQ0FBQ0ssT0FBTCxDQUFhLFVBQUNDLE9BQUQsRUFBYTtBQUN4QixRQUFNQyxHQUFHLEdBQUcsSUFBSUMsTUFBSixDQUFXRixPQUFPLENBQUMsQ0FBRCxDQUFsQixFQUF1QkEsT0FBTyxDQUFDLENBQUQsQ0FBOUIsRUFBbUNBLE9BQU8sQ0FBQyxDQUFELENBQTFDLENBQVo7QUFDQUMsSUFBQUEsR0FBRyxDQUFDRSxJQUFKLEdBQVcsQ0FBQyxDQUFaO0FBQ0FqQixJQUFBQSxLQUFLLENBQUNrQixNQUFOLENBQWFILEdBQWI7QUFDRCxHQUpEO0FBS0Q7O0FBRUQsU0FBU04sU0FBVCxDQUFtQkQsSUFBbkIsRUFBeUI7QUFDdkJQLEVBQUFBLFVBQVUsR0FBR0EsVUFBVSxDQUFDa0IsTUFBWCxDQUFrQlgsSUFBbEIsQ0FBYjtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvcGxheWJhY2svdnR0LmpzPzY2N2YiXSwic291cmNlc0NvbnRlbnQiOlsibGV0IHRyYWNrID0gbnVsbDtcbmxldCBzdG9yZWRDdWVzID0gW107XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFeHRlcm5hbFRyYWNrKCRtZWRpYSkge1xuICBpZiAoISRtZWRpYSB8fCB0cmFjaykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRyYWNrID0gJG1lZGlhLmFkZFRleHRUcmFjaygnc3VidGl0bGVzJywgJ0VuZ2xpc2gnLCAnZW4nKTtcbiAgdHJhY2subW9kZSA9ICdzaG93aW5nJztcblxuICBhZGRDdWVzVG9UcmFjayhzdG9yZWRDdWVzKTtcbiAgc3RvcmVkQ3VlcyA9IFtdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkRXh0ZXJuYWxDdWVzKGN1ZXMpIHtcbiAgaWYgKCFjdWVzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCF0cmFjaykge1xuICAgIHN0b3JlQ3VlcyhjdWVzKTtcbiAgICByZXR1cm47XG4gIH1cblxuICByZW1vdmVDdWVzRnJvbVRyYWNrKCk7XG4gIGFkZEN1ZXNUb1RyYWNrKGN1ZXMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDdWVzRnJvbVRyYWNrKCkge1xuICBsZXQgeyBsZW5ndGggfSA9IHRyYWNrLmN1ZXM7XG4gIHdoaWxlIChsZW5ndGgpIHtcbiAgICBsZW5ndGggLT0gMTtcbiAgICB0cmFjay5yZW1vdmVDdWUodHJhY2suY3Vlc1tsZW5ndGhdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRDdWVzVG9UcmFjayhjdWVzKSB7XG4gIGN1ZXMuZm9yRWFjaCgoY3VlRGF0YSkgPT4ge1xuICAgIGNvbnN0IGN1ZSA9IG5ldyBWVFRDdWUoY3VlRGF0YVswXSwgY3VlRGF0YVsxXSwgY3VlRGF0YVsyXSk7XG4gICAgY3VlLmxpbmUgPSAtNDtcbiAgICB0cmFjay5hZGRDdWUoY3VlKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHN0b3JlQ3VlcyhjdWVzKSB7XG4gIHN0b3JlZEN1ZXMgPSBzdG9yZWRDdWVzLmNvbmNhdChjdWVzKTtcbn1cbiJdLCJuYW1lcyI6WyJ0cmFjayIsInN0b3JlZEN1ZXMiLCJjcmVhdGVFeHRlcm5hbFRyYWNrIiwiJG1lZGlhIiwiYWRkVGV4dFRyYWNrIiwibW9kZSIsImFkZEN1ZXNUb1RyYWNrIiwiYWRkRXh0ZXJuYWxDdWVzIiwiY3VlcyIsInN0b3JlQ3VlcyIsInJlbW92ZUN1ZXNGcm9tVHJhY2siLCJsZW5ndGgiLCJyZW1vdmVDdWUiLCJmb3JFYWNoIiwiY3VlRGF0YSIsImN1ZSIsIlZUVEN1ZSIsImxpbmUiLCJhZGRDdWUiLCJjb25jYXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/playback/vtt.js\n");

/***/ }),

/***/ "../js/cronus/polyfills/index.js":
/*!***************************************!*\
  !*** ../js/cronus/polyfills/index.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"restore\": function() { return /* binding */ restore; },\n/* harmony export */   \"shim\": function() { return /* binding */ shim; }\n/* harmony export */ });\n/* harmony import */ var cronus_polyfills_textDecoder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/polyfills/textDecoder */ \"../js/cronus/polyfills/textDecoder.js\");\n/* harmony import */ var cronus_polyfills_textEncoder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/polyfills/textEncoder */ \"../js/cronus/polyfills/textEncoder.js\");\n\n\nfunction shim() {\n  cronus_polyfills_textDecoder__WEBPACK_IMPORTED_MODULE_0__.shim();\n  cronus_polyfills_textEncoder__WEBPACK_IMPORTED_MODULE_1__.shim();\n}\nfunction restore() {\n  cronus_polyfills_textDecoder__WEBPACK_IMPORTED_MODULE_0__.restore();\n  cronus_polyfills_textEncoder__WEBPACK_IMPORTED_MODULE_1__.restore();\n}\nshim();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3BvbHlmaWxscy9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUVPLFNBQVNFLElBQVQsR0FBZ0I7QUFDckJGLEVBQUFBLDhEQUFBO0FBQ0FDLEVBQUFBLDhEQUFBO0FBQ0Q7QUFFTSxTQUFTRSxPQUFULEdBQW1CO0FBQ3hCSCxFQUFBQSxpRUFBQTtBQUNBQyxFQUFBQSxpRUFBQTtBQUNEO0FBRURDLElBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy9wb2x5ZmlsbHMvaW5kZXguanM/OWIyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBUZXh0RGVjb2RlciBmcm9tICdjcm9udXMvcG9seWZpbGxzL3RleHREZWNvZGVyJztcbmltcG9ydCAqIGFzIFRleHRFbmNvZGVyIGZyb20gJ2Nyb251cy9wb2x5ZmlsbHMvdGV4dEVuY29kZXInO1xuXG5leHBvcnQgZnVuY3Rpb24gc2hpbSgpIHtcbiAgVGV4dERlY29kZXIuc2hpbSgpO1xuICBUZXh0RW5jb2Rlci5zaGltKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXN0b3JlKCkge1xuICBUZXh0RGVjb2Rlci5yZXN0b3JlKCk7XG4gIFRleHRFbmNvZGVyLnJlc3RvcmUoKTtcbn1cblxuc2hpbSgpO1xuIl0sIm5hbWVzIjpbIlRleHREZWNvZGVyIiwiVGV4dEVuY29kZXIiLCJzaGltIiwicmVzdG9yZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/polyfills/index.js\n");

/***/ }),

/***/ "../js/cronus/polyfills/surrogates.js":
/*!********************************************!*\
  !*** ../js/cronus/polyfills/surrogates.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction has(codepoint) {\n  return (codepoint & 0xf800) === 0xd800; // eslint-disable-line no-bitwise\n}\n\nfunction split(codepoint) {\n  var high = Math.floor((codepoint - 0x10000) / 0x400) + 0xd800;\n  var low = (codepoint - 0x10000) % 0x400 + 0xdc00;\n  return [high, low];\n}\n\nfunction combine(high, low) {\n  return (high - 0xd800) * 0x400 + low - 0xdc00 + 0x10000;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  combine: combine,\n  split: split,\n  has: has\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3BvbHlmaWxscy9zdXJyb2dhdGVzLmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxTQUFTQSxHQUFULENBQWFDLFNBQWIsRUFBd0I7QUFDdEIsU0FBTyxDQUFDQSxTQUFTLEdBQUcsTUFBYixNQUF5QixNQUFoQyxDQURzQixDQUNrQjtBQUN6Qzs7QUFFRCxTQUFTQyxLQUFULENBQWVELFNBQWYsRUFBMEI7QUFDeEIsTUFBTUUsSUFBSSxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBVyxDQUFDSixTQUFTLEdBQUcsT0FBYixJQUF3QixLQUFuQyxJQUE0QyxNQUF6RDtBQUNBLE1BQU1LLEdBQUcsR0FBSSxDQUFDTCxTQUFTLEdBQUcsT0FBYixJQUF3QixLQUF6QixHQUFrQyxNQUE5QztBQUNBLFNBQU8sQ0FBQ0UsSUFBRCxFQUFPRyxHQUFQLENBQVA7QUFDRDs7QUFFRCxTQUFTQyxPQUFULENBQWlCSixJQUFqQixFQUF1QkcsR0FBdkIsRUFBNEI7QUFDMUIsU0FBTyxDQUFDSCxJQUFJLEdBQUcsTUFBUixJQUFrQixLQUFsQixHQUEwQkcsR0FBMUIsR0FBZ0MsTUFBaEMsR0FBeUMsT0FBaEQ7QUFDRDs7QUFFRCwrREFBZTtBQUNiQyxFQUFBQSxPQUFPLEVBQVBBLE9BRGE7QUFFYkwsRUFBQUEsS0FBSyxFQUFMQSxLQUZhO0FBR2JGLEVBQUFBLEdBQUcsRUFBSEE7QUFIYSxDQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvcG9seWZpbGxzL3N1cnJvZ2F0ZXMuanM/YmYyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBoYXMoY29kZXBvaW50KSB7XG4gIHJldHVybiAoY29kZXBvaW50ICYgMHhmODAwKSA9PT0gMHhkODAwOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWJpdHdpc2Vcbn1cblxuZnVuY3Rpb24gc3BsaXQoY29kZXBvaW50KSB7XG4gIGNvbnN0IGhpZ2ggPSBNYXRoLmZsb29yKChjb2RlcG9pbnQgLSAweDEwMDAwKSAvIDB4NDAwKSArIDB4ZDgwMDtcbiAgY29uc3QgbG93ID0gKChjb2RlcG9pbnQgLSAweDEwMDAwKSAlIDB4NDAwKSArIDB4ZGMwMDtcbiAgcmV0dXJuIFtoaWdoLCBsb3ddO1xufVxuXG5mdW5jdGlvbiBjb21iaW5lKGhpZ2gsIGxvdykge1xuICByZXR1cm4gKGhpZ2ggLSAweGQ4MDApICogMHg0MDAgKyBsb3cgLSAweGRjMDAgKyAweDEwMDAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbWJpbmUsXG4gIHNwbGl0LFxuICBoYXMsXG59O1xuIl0sIm5hbWVzIjpbImhhcyIsImNvZGVwb2ludCIsInNwbGl0IiwiaGlnaCIsIk1hdGgiLCJmbG9vciIsImxvdyIsImNvbWJpbmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/polyfills/surrogates.js\n");

/***/ }),

/***/ "../js/cronus/polyfills/textDecoder.js":
/*!*********************************************!*\
  !*** ../js/cronus/polyfills/textDecoder.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TextDecoder\": function() { return /* binding */ TextDecoder; },\n/* harmony export */   \"restore\": function() { return /* binding */ restore; },\n/* harmony export */   \"shim\": function() { return /* binding */ shim; }\n/* harmony export */ });\n/* harmony import */ var cronus_polyfills_surrogates__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/polyfills/surrogates */ \"../js/cronus/polyfills/surrogates.js\");\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n/**\n * TextDecoder polyfill (unsupported in IE11)\n */\n\nfunction\n  /* encoding = 'utf-8' */\nTextDecoder() {}\n/**\n * @param {Uint8Array|ArrayBuffer} input\n * @return {string}\n * @example new Textdecoder('utf-8')\n */\n\nTextDecoder.prototype.decode = function (input) {\n  var byteArray = input instanceof ArrayBuffer ? new Uint8Array(input) : input;\n  /* eslint-disable no-plusplus, no-bitwise */\n\n  var string = '';\n  var i = 0;\n\n  var _loop = function _loop() {\n    var maps = [0xf0, 0xe0, 0xc0];\n    var byte = byteArray[i];\n    var head = byte;\n    var parts = 0;\n    var idx = maps.findIndex(function (v) {\n      return byte >= v;\n    });\n\n    if (idx !== -1) {\n      parts = 3 - idx;\n      head = byte - maps[idx];\n\n      for (var p = 1; p <= parts; p++) {\n        head = head << 6 | byteArray[i + p] - 0x80;\n      }\n    }\n\n    if (idx === 0) {\n      var codes = cronus_polyfills_surrogates__WEBPACK_IMPORTED_MODULE_0__[\"default\"].split(head);\n      string += String.fromCharCode.apply(String, _toConsumableArray(codes));\n    } else {\n      string += String.fromCharCode(head);\n    }\n\n    i += parts + 1;\n  };\n\n  while (i < byteArray.length) {\n    _loop();\n  }\n  /* eslint-enable */\n\n\n  return string;\n};\n\nvar originalTextDecoder = window.TextDecoder;\nfunction shim() {\n  window.TextDecoder = originalTextDecoder || TextDecoder;\n}\nfunction restore() {\n  window.TextDecoder = originalTextDecoder;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3BvbHlmaWxscy90ZXh0RGVjb2Rlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFFQTtBQUNBO0FBQ0E7O0FBQ087QUFBcUI7QUFBWkMsV0FBVCxHQUErQyxDQUFFO0FBRXhEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0FBLFdBQVcsQ0FBQ0MsU0FBWixDQUFzQkMsTUFBdEIsR0FBK0IsVUFBVUMsS0FBVixFQUFpQjtBQUM5QyxNQUFNQyxTQUFTLEdBQUdELEtBQUssWUFBWUUsV0FBakIsR0FBK0IsSUFBSUMsVUFBSixDQUFlSCxLQUFmLENBQS9CLEdBQXVEQSxLQUF6RTtBQUVBOztBQUNBLE1BQUlJLE1BQU0sR0FBRyxFQUFiO0FBQ0EsTUFBSUMsQ0FBQyxHQUFHLENBQVI7O0FBTDhDO0FBTzVDLFFBQU1DLElBQUksR0FBRyxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixDQUFiO0FBQ0EsUUFBTUMsSUFBSSxHQUFHTixTQUFTLENBQUNJLENBQUQsQ0FBdEI7QUFDQSxRQUFJRyxJQUFJLEdBQUdELElBQVg7QUFDQSxRQUFJRSxLQUFLLEdBQUcsQ0FBWjtBQUVBLFFBQU1DLEdBQUcsR0FBR0osSUFBSSxDQUFDSyxTQUFMLENBQWUsVUFBQ0MsQ0FBRDtBQUFBLGFBQU9MLElBQUksSUFBSUssQ0FBZjtBQUFBLEtBQWYsQ0FBWjs7QUFDQSxRQUFJRixHQUFHLEtBQUssQ0FBQyxDQUFiLEVBQWdCO0FBQ2RELE1BQUFBLEtBQUssR0FBRyxJQUFJQyxHQUFaO0FBQ0FGLE1BQUFBLElBQUksR0FBR0QsSUFBSSxHQUFHRCxJQUFJLENBQUNJLEdBQUQsQ0FBbEI7O0FBQ0EsV0FBSyxJQUFJRyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxJQUFJSixLQUFyQixFQUE0QkksQ0FBQyxFQUE3QixFQUFpQztBQUMvQkwsUUFBQUEsSUFBSSxHQUFJQSxJQUFJLElBQUksQ0FBVCxHQUFlUCxTQUFTLENBQUNJLENBQUMsR0FBR1EsQ0FBTCxDQUFULEdBQW1CLElBQXpDO0FBQ0Q7QUFDRjs7QUFFRCxRQUFJSCxHQUFHLEtBQUssQ0FBWixFQUFlO0FBQ2IsVUFBTUksS0FBSyxHQUFHbEIseUVBQUEsQ0FBaUJZLElBQWpCLENBQWQ7QUFDQUosTUFBQUEsTUFBTSxJQUFJWSxNQUFNLENBQUNDLFlBQVAsT0FBQUQsTUFBTSxxQkFBaUJGLEtBQWpCLEVBQWhCO0FBQ0QsS0FIRCxNQUdPO0FBQ0xWLE1BQUFBLE1BQU0sSUFBSVksTUFBTSxDQUFDQyxZQUFQLENBQW9CVCxJQUFwQixDQUFWO0FBQ0Q7O0FBRURILElBQUFBLENBQUMsSUFBSUksS0FBSyxHQUFHLENBQWI7QUE1QjRDOztBQU05QyxTQUFPSixDQUFDLEdBQUdKLFNBQVMsQ0FBQ2lCLE1BQXJCLEVBQTZCO0FBQUE7QUF1QjVCO0FBQ0Q7OztBQUVBLFNBQU9kLE1BQVA7QUFDRCxDQWpDRDs7QUFtQ0EsSUFBTWUsbUJBQW1CLEdBQUdDLE1BQU0sQ0FBQ3ZCLFdBQW5DO0FBRU8sU0FBU3dCLElBQVQsR0FBZ0I7QUFDckJELEVBQUFBLE1BQU0sQ0FBQ3ZCLFdBQVAsR0FBcUJzQixtQkFBbUIsSUFBSXRCLFdBQTVDO0FBQ0Q7QUFFTSxTQUFTeUIsT0FBVCxHQUFtQjtBQUN4QkYsRUFBQUEsTUFBTSxDQUFDdkIsV0FBUCxHQUFxQnNCLG1CQUFyQjtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvcG9seWZpbGxzL3RleHREZWNvZGVyLmpzPzAyY2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN1cnJvZ2F0ZXMgZnJvbSAnY3JvbnVzL3BvbHlmaWxscy9zdXJyb2dhdGVzJztcblxuLyoqXG4gKiBUZXh0RGVjb2RlciBwb2x5ZmlsbCAodW5zdXBwb3J0ZWQgaW4gSUUxMSlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFRleHREZWNvZGVyKC8qIGVuY29kaW5nID0gJ3V0Zi04JyAqLykge31cblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl8QXJyYXlCdWZmZXJ9IGlucHV0XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiBAZXhhbXBsZSBuZXcgVGV4dGRlY29kZXIoJ3V0Zi04JylcbiAqL1xuVGV4dERlY29kZXIucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICBjb25zdCBieXRlQXJyYXkgPSBpbnB1dCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyID8gbmV3IFVpbnQ4QXJyYXkoaW5wdXQpIDogaW5wdXQ7XG5cbiAgLyogZXNsaW50LWRpc2FibGUgbm8tcGx1c3BsdXMsIG5vLWJpdHdpc2UgKi9cbiAgbGV0IHN0cmluZyA9ICcnO1xuICBsZXQgaSA9IDA7XG4gIHdoaWxlIChpIDwgYnl0ZUFycmF5Lmxlbmd0aCkge1xuICAgIGNvbnN0IG1hcHMgPSBbMHhmMCwgMHhlMCwgMHhjMF07XG4gICAgY29uc3QgYnl0ZSA9IGJ5dGVBcnJheVtpXTtcbiAgICBsZXQgaGVhZCA9IGJ5dGU7XG4gICAgbGV0IHBhcnRzID0gMDtcblxuICAgIGNvbnN0IGlkeCA9IG1hcHMuZmluZEluZGV4KCh2KSA9PiBieXRlID49IHYpO1xuICAgIGlmIChpZHggIT09IC0xKSB7XG4gICAgICBwYXJ0cyA9IDMgLSBpZHg7XG4gICAgICBoZWFkID0gYnl0ZSAtIG1hcHNbaWR4XTtcbiAgICAgIGZvciAobGV0IHAgPSAxOyBwIDw9IHBhcnRzOyBwKyspIHtcbiAgICAgICAgaGVhZCA9IChoZWFkIDw8IDYpIHwgKGJ5dGVBcnJheVtpICsgcF0gLSAweDgwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaWR4ID09PSAwKSB7XG4gICAgICBjb25zdCBjb2RlcyA9IHN1cnJvZ2F0ZXMuc3BsaXQoaGVhZCk7XG4gICAgICBzdHJpbmcgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSguLi5jb2Rlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGhlYWQpO1xuICAgIH1cblxuICAgIGkgKz0gcGFydHMgKyAxO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgKi9cblxuICByZXR1cm4gc3RyaW5nO1xufTtcblxuY29uc3Qgb3JpZ2luYWxUZXh0RGVjb2RlciA9IHdpbmRvdy5UZXh0RGVjb2RlcjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW0oKSB7XG4gIHdpbmRvdy5UZXh0RGVjb2RlciA9IG9yaWdpbmFsVGV4dERlY29kZXIgfHwgVGV4dERlY29kZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXN0b3JlKCkge1xuICB3aW5kb3cuVGV4dERlY29kZXIgPSBvcmlnaW5hbFRleHREZWNvZGVyO1xufVxuIl0sIm5hbWVzIjpbInN1cnJvZ2F0ZXMiLCJUZXh0RGVjb2RlciIsInByb3RvdHlwZSIsImRlY29kZSIsImlucHV0IiwiYnl0ZUFycmF5IiwiQXJyYXlCdWZmZXIiLCJVaW50OEFycmF5Iiwic3RyaW5nIiwiaSIsIm1hcHMiLCJieXRlIiwiaGVhZCIsInBhcnRzIiwiaWR4IiwiZmluZEluZGV4IiwidiIsInAiLCJjb2RlcyIsInNwbGl0IiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwibGVuZ3RoIiwib3JpZ2luYWxUZXh0RGVjb2RlciIsIndpbmRvdyIsInNoaW0iLCJyZXN0b3JlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/polyfills/textDecoder.js\n");

/***/ }),

/***/ "../js/cronus/polyfills/textEncoder.js":
/*!*********************************************!*\
  !*** ../js/cronus/polyfills/textEncoder.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TextEncoder\": function() { return /* binding */ TextEncoder; },\n/* harmony export */   \"restore\": function() { return /* binding */ restore; },\n/* harmony export */   \"shim\": function() { return /* binding */ shim; }\n/* harmony export */ });\n/* harmony import */ var cronus_polyfills_surrogates__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/polyfills/surrogates */ \"../js/cronus/polyfills/surrogates.js\");\n\n/**\n * TextEncoder polyfill (unsupported in IE11)\n */\n\nfunction TextEncoder() {}\n/**\n * @param {string} string\n * @returns {Uint8Array}\n * @example new TextEncoder().encode('Hello world');\n */\n\nTextEncoder.prototype.encode = function (string) {\n  /**\n   * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx => max 22 bit\n   * 1110xxxx 10xxxxxx 10xxxxxx          => max 16 bit\n   * 110xxxxx 10xxxxxx                   => max 11 bit\n   * 0xxxxxxx                            => max 7 bit\n   */\n  var bitsNeeded = [7, 11, 16, 22];\n  var maps = [0, 0xc0, 0xe0, 0xf0];\n  var allBytes = [];\n  var strLen = string.length;\n  /* eslint-disable no-plusplus, no-bitwise */\n\n  var extraBytes = 0;\n\n  var _loop = function _loop(_i) {\n    var code = string[_i].charCodeAt();\n\n    if (cronus_polyfills_surrogates__WEBPACK_IMPORTED_MODULE_0__[\"default\"].has(code)) {\n      code = cronus_polyfills_surrogates__WEBPACK_IMPORTED_MODULE_0__[\"default\"].combine(code, string.charCodeAt(++_i));\n      extraBytes -= 1;\n    }\n\n    var len = code.toString(2).length;\n    var idx = bitsNeeded.findIndex(function (v) {\n      return v >= len;\n    });\n    extraBytes += idx;\n    var bytes = [];\n\n    if (idx) {\n      for (var b = 0; b < idx; b++) {\n        var byte = 0x80 | code & 0x3f;\n        code >>= 6;\n        bytes[idx - b] = byte;\n      }\n\n      bytes[0] = maps[idx] | code;\n    } else {\n      bytes[0] = code;\n    }\n\n    allBytes.push.apply(allBytes, bytes);\n    i = _i;\n  };\n\n  for (var i = 0; i < strLen; i++) {\n    _loop(i);\n  }\n  /* eslint-enable */\n\n\n  var uint8array = new Uint8Array(strLen + extraBytes);\n  allBytes.forEach(function (byte, idx) {\n    uint8array[idx] = byte;\n  });\n  return uint8array;\n};\n\nvar originalTextEncoder = window.TextEncoder;\nfunction shim() {\n  window.TextEncoder = originalTextEncoder || TextEncoder;\n}\nfunction restore() {\n  window.TextEncoder = originalTextEncoder;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3BvbHlmaWxscy90ZXh0RW5jb2Rlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFFQTtBQUNBO0FBQ0E7O0FBQ08sU0FBU0MsV0FBVCxHQUF1QixDQUFFO0FBRWhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0FBLFdBQVcsQ0FBQ0MsU0FBWixDQUFzQkMsTUFBdEIsR0FBK0IsVUFBVUMsTUFBVixFQUFrQjtBQUMvQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRSxNQUFNQyxVQUFVLEdBQUcsQ0FBQyxDQUFELEVBQUksRUFBSixFQUFRLEVBQVIsRUFBWSxFQUFaLENBQW5CO0FBQ0EsTUFBTUMsSUFBSSxHQUFHLENBQUMsQ0FBRCxFQUFJLElBQUosRUFBVSxJQUFWLEVBQWdCLElBQWhCLENBQWI7QUFDQSxNQUFNQyxRQUFRLEdBQUcsRUFBakI7QUFDQSxNQUFNQyxNQUFNLEdBQUdKLE1BQU0sQ0FBQ0ssTUFBdEI7QUFFQTs7QUFDQSxNQUFJQyxVQUFVLEdBQUcsQ0FBakI7O0FBYitDO0FBZTdDLFFBQUlDLElBQUksR0FBR1AsTUFBTSxDQUFDUSxFQUFELENBQU4sQ0FBVUMsVUFBVixFQUFYOztBQUNBLFFBQUliLHVFQUFBLENBQWVXLElBQWYsQ0FBSixFQUEwQjtBQUN4QkEsTUFBQUEsSUFBSSxHQUFHWCwyRUFBQSxDQUFtQlcsSUFBbkIsRUFBeUJQLE1BQU0sQ0FBQ1MsVUFBUCxDQUFrQixFQUFFRCxFQUFwQixDQUF6QixDQUFQO0FBQ0FGLE1BQUFBLFVBQVUsSUFBSSxDQUFkO0FBQ0Q7O0FBQ0QsUUFBTU0sR0FBRyxHQUFHTCxJQUFJLENBQUNNLFFBQUwsQ0FBYyxDQUFkLEVBQWlCUixNQUE3QjtBQUNBLFFBQU1TLEdBQUcsR0FBR2IsVUFBVSxDQUFDYyxTQUFYLENBQXFCLFVBQUNDLENBQUQ7QUFBQSxhQUFPQSxDQUFDLElBQUlKLEdBQVo7QUFBQSxLQUFyQixDQUFaO0FBQ0FOLElBQUFBLFVBQVUsSUFBSVEsR0FBZDtBQUVBLFFBQU1HLEtBQUssR0FBRyxFQUFkOztBQUNBLFFBQUlILEdBQUosRUFBUztBQUNQLFdBQUssSUFBSUksQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0osR0FBcEIsRUFBeUJJLENBQUMsRUFBMUIsRUFBOEI7QUFDNUIsWUFBTUMsSUFBSSxHQUFHLE9BQVFaLElBQUksR0FBRyxJQUE1QjtBQUNBQSxRQUFBQSxJQUFJLEtBQUssQ0FBVDtBQUNBVSxRQUFBQSxLQUFLLENBQUNILEdBQUcsR0FBR0ksQ0FBUCxDQUFMLEdBQWlCQyxJQUFqQjtBQUNEOztBQUNERixNQUFBQSxLQUFLLENBQUMsQ0FBRCxDQUFMLEdBQVdmLElBQUksQ0FBQ1ksR0FBRCxDQUFKLEdBQVlQLElBQXZCO0FBQ0QsS0FQRCxNQU9PO0FBQ0xVLE1BQUFBLEtBQUssQ0FBQyxDQUFELENBQUwsR0FBV1YsSUFBWDtBQUNEOztBQUVESixJQUFBQSxRQUFRLENBQUNpQixJQUFULE9BQUFqQixRQUFRLEVBQVNjLEtBQVQsQ0FBUjtBQXBDNkM7QUFBQTs7QUFjL0MsT0FBSyxJQUFJVCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHSixNQUFwQixFQUE0QkksQ0FBQyxFQUE3QixFQUFpQztBQUFBLFVBQXhCQSxDQUF3QjtBQXVCaEM7QUFDRDs7O0FBRUEsTUFBTWEsVUFBVSxHQUFHLElBQUlDLFVBQUosQ0FBZWxCLE1BQU0sR0FBR0UsVUFBeEIsQ0FBbkI7QUFDQUgsRUFBQUEsUUFBUSxDQUFDb0IsT0FBVCxDQUFpQixVQUFDSixJQUFELEVBQU9MLEdBQVAsRUFBZTtBQUM5Qk8sSUFBQUEsVUFBVSxDQUFDUCxHQUFELENBQVYsR0FBa0JLLElBQWxCO0FBQ0QsR0FGRDtBQUdBLFNBQU9FLFVBQVA7QUFDRCxDQTdDRDs7QUErQ0EsSUFBTUcsbUJBQW1CLEdBQUdDLE1BQU0sQ0FBQzVCLFdBQW5DO0FBRU8sU0FBUzZCLElBQVQsR0FBZ0I7QUFDckJELEVBQUFBLE1BQU0sQ0FBQzVCLFdBQVAsR0FBcUIyQixtQkFBbUIsSUFBSTNCLFdBQTVDO0FBQ0Q7QUFFTSxTQUFTOEIsT0FBVCxHQUFtQjtBQUN4QkYsRUFBQUEsTUFBTSxDQUFDNUIsV0FBUCxHQUFxQjJCLG1CQUFyQjtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvcG9seWZpbGxzL3RleHRFbmNvZGVyLmpzP2RjOTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN1cnJvZ2F0ZXMgZnJvbSAnY3JvbnVzL3BvbHlmaWxscy9zdXJyb2dhdGVzJztcblxuLyoqXG4gKiBUZXh0RW5jb2RlciBwb2x5ZmlsbCAodW5zdXBwb3J0ZWQgaW4gSUUxMSlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFRleHRFbmNvZGVyKCkge31cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJucyB7VWludDhBcnJheX1cbiAqIEBleGFtcGxlIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZSgnSGVsbG8gd29ybGQnKTtcbiAqL1xuVGV4dEVuY29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgLyoqXG4gICAqIDExMTEweHh4IDEweHh4eHh4IDEweHh4eHh4IDEweHh4eHh4ID0+IG1heCAyMiBiaXRcbiAgICogMTExMHh4eHggMTB4eHh4eHggMTB4eHh4eHggICAgICAgICAgPT4gbWF4IDE2IGJpdFxuICAgKiAxMTB4eHh4eCAxMHh4eHh4eCAgICAgICAgICAgICAgICAgICA9PiBtYXggMTEgYml0XG4gICAqIDB4eHh4eHh4ICAgICAgICAgICAgICAgICAgICAgICAgICAgID0+IG1heCA3IGJpdFxuICAgKi9cbiAgY29uc3QgYml0c05lZWRlZCA9IFs3LCAxMSwgMTYsIDIyXTtcbiAgY29uc3QgbWFwcyA9IFswLCAweGMwLCAweGUwLCAweGYwXTtcbiAgY29uc3QgYWxsQnl0ZXMgPSBbXTtcbiAgY29uc3Qgc3RyTGVuID0gc3RyaW5nLmxlbmd0aDtcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wbHVzcGx1cywgbm8tYml0d2lzZSAqL1xuICBsZXQgZXh0cmFCeXRlcyA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyTGVuOyBpKyspIHtcbiAgICBsZXQgY29kZSA9IHN0cmluZ1tpXS5jaGFyQ29kZUF0KCk7XG4gICAgaWYgKHN1cnJvZ2F0ZXMuaGFzKGNvZGUpKSB7XG4gICAgICBjb2RlID0gc3Vycm9nYXRlcy5jb21iaW5lKGNvZGUsIHN0cmluZy5jaGFyQ29kZUF0KCsraSkpO1xuICAgICAgZXh0cmFCeXRlcyAtPSAxO1xuICAgIH1cbiAgICBjb25zdCBsZW4gPSBjb2RlLnRvU3RyaW5nKDIpLmxlbmd0aDtcbiAgICBjb25zdCBpZHggPSBiaXRzTmVlZGVkLmZpbmRJbmRleCgodikgPT4gdiA+PSBsZW4pO1xuICAgIGV4dHJhQnl0ZXMgKz0gaWR4O1xuXG4gICAgY29uc3QgYnl0ZXMgPSBbXTtcbiAgICBpZiAoaWR4KSB7XG4gICAgICBmb3IgKGxldCBiID0gMDsgYiA8IGlkeDsgYisrKSB7XG4gICAgICAgIGNvbnN0IGJ5dGUgPSAweDgwIHwgKGNvZGUgJiAweDNmKTtcbiAgICAgICAgY29kZSA+Pj0gNjtcbiAgICAgICAgYnl0ZXNbaWR4IC0gYl0gPSBieXRlO1xuICAgICAgfVxuICAgICAgYnl0ZXNbMF0gPSBtYXBzW2lkeF0gfCBjb2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBieXRlc1swXSA9IGNvZGU7XG4gICAgfVxuXG4gICAgYWxsQnl0ZXMucHVzaCguLi5ieXRlcyk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSAqL1xuXG4gIGNvbnN0IHVpbnQ4YXJyYXkgPSBuZXcgVWludDhBcnJheShzdHJMZW4gKyBleHRyYUJ5dGVzKTtcbiAgYWxsQnl0ZXMuZm9yRWFjaCgoYnl0ZSwgaWR4KSA9PiB7XG4gICAgdWludDhhcnJheVtpZHhdID0gYnl0ZTtcbiAgfSk7XG4gIHJldHVybiB1aW50OGFycmF5O1xufTtcblxuY29uc3Qgb3JpZ2luYWxUZXh0RW5jb2RlciA9IHdpbmRvdy5UZXh0RW5jb2RlcjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW0oKSB7XG4gIHdpbmRvdy5UZXh0RW5jb2RlciA9IG9yaWdpbmFsVGV4dEVuY29kZXIgfHwgVGV4dEVuY29kZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXN0b3JlKCkge1xuICB3aW5kb3cuVGV4dEVuY29kZXIgPSBvcmlnaW5hbFRleHRFbmNvZGVyO1xufVxuIl0sIm5hbWVzIjpbInN1cnJvZ2F0ZXMiLCJUZXh0RW5jb2RlciIsInByb3RvdHlwZSIsImVuY29kZSIsInN0cmluZyIsImJpdHNOZWVkZWQiLCJtYXBzIiwiYWxsQnl0ZXMiLCJzdHJMZW4iLCJsZW5ndGgiLCJleHRyYUJ5dGVzIiwiY29kZSIsImkiLCJjaGFyQ29kZUF0IiwiaGFzIiwiY29tYmluZSIsImxlbiIsInRvU3RyaW5nIiwiaWR4IiwiZmluZEluZGV4IiwidiIsImJ5dGVzIiwiYiIsImJ5dGUiLCJwdXNoIiwidWludDhhcnJheSIsIlVpbnQ4QXJyYXkiLCJmb3JFYWNoIiwib3JpZ2luYWxUZXh0RW5jb2RlciIsIndpbmRvdyIsInNoaW0iLCJyZXN0b3JlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/polyfills/textEncoder.js\n");

/***/ }),

/***/ "../js/cronus/reporting/aggregator.js":
/*!********************************************!*\
  !*** ../js/cronus/reporting/aggregator.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__test__\": function() { return /* binding */ __test__; }\n/* harmony export */ });\n/* harmony import */ var player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! player-utils/object/get */ \"../node_modules/player-utils/object/get.js\");\n/* harmony import */ var player_utils_object_hasKeys__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! player-utils/object/hasKeys */ \"../node_modules/player-utils/object/hasKeys.js\");\n/* harmony import */ var player_utils_object_merge__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! player-utils/object/merge */ \"../node_modules/player-utils/object/merge.js\");\n/* harmony import */ var cronus_reporting__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/reporting */ \"../js/cronus/reporting/index.js\");\n/* harmony import */ var shared_lib_logger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! shared/lib/logger */ \"../js/shared/lib/logger/index.js\");\n\n\n\n\n\nvar debugLogger = (0,shared_lib_logger__WEBPACK_IMPORTED_MODULE_4__.createLoggerForModule)('cronus/reporting/aggregator');\nvar immediateTimer;\nvar delayedTimer;\nvar dataImmediate = {};\nvar dataDelayed = {};\n/**\n * Report in every sec\n */\n\nfunction onImmediate() {\n  if (!(0,player_utils_object_hasKeys__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(dataImmediate)) {\n    return;\n  }\n\n  for (var mediaId in dataImmediate) {\n    var data = dataImmediate[mediaId];\n\n    if ((0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(data, 'common.bufempty.length')) {\n      var last = data.common.bufempty.pop();\n      data.common.bufempty = last.value;\n    }\n\n    cronus_reporting__WEBPACK_IMPORTED_MODULE_3__[\"default\"].send(cronus_reporting__WEBPACK_IMPORTED_MODULE_3__[\"default\"].TYPES.stats, {\n      data: data\n    }, mediaId);\n  }\n\n  dataImmediate = {};\n}\n/**\n * Reports in every 5 sec\n */\n\n\nfunction onDelayed() {\n  if (!(0,player_utils_object_hasKeys__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(dataDelayed)) {\n    return;\n  }\n\n  for (var mediaId in dataDelayed) {\n    var data = dataDelayed[mediaId];\n    cronus_reporting__WEBPACK_IMPORTED_MODULE_3__[\"default\"].send(cronus_reporting__WEBPACK_IMPORTED_MODULE_3__[\"default\"].TYPES.stats, {\n      data: data\n    }, mediaId);\n  }\n\n  dataDelayed = {};\n}\n\nfunction feed(mediaId, data) {\n  debugLogger.debug('aggregator feed', {\n    mediaId: mediaId,\n    data: data\n  });\n\n  if (data.common && typeof data.common.bufempty !== 'undefined') {\n    dataImmediate[mediaId] = dataImmediate[mediaId] || {\n      common: {\n        bufempty: []\n      }\n    };\n    dataImmediate[mediaId].common.bufempty.push({\n      value: data.common.bufempty,\n      time: Date.now()\n    });\n    return;\n  }\n\n  if ((0,player_utils_object_hasKeys__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(data)) {\n    if (!dataDelayed[mediaId]) {\n      dataDelayed[mediaId] = data;\n    } else {\n      (0,player_utils_object_merge__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(data, dataDelayed[mediaId]);\n    }\n  }\n}\n\nfunction feedImmediate(data) {\n  cronus_reporting__WEBPACK_IMPORTED_MODULE_3__[\"default\"].send(cronus_reporting__WEBPACK_IMPORTED_MODULE_3__[\"default\"].TYPES.stats, {\n    data: data\n  });\n}\n\nfunction reset() {\n  dataImmediate = {};\n  dataDelayed = {};\n  immediateTimer = clearInterval(immediateTimer);\n  delayedTimer = clearInterval(delayedTimer);\n}\n\nfunction init() {\n  reset();\n  immediateTimer = window.setInterval(onImmediate, 1000);\n  delayedTimer = window.setInterval(onDelayed, 5000);\n}\n\nvar __test__ = {\n  dataImmediate: dataImmediate,\n  dataDelayed: dataDelayed\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  init: init,\n  reset: reset,\n  feed: feed,\n  feedImmediate: feedImmediate\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBQUw7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsU0FBU2lCLGFBQVQsQ0FBdUJoQixJQUF2QixFQUE2QjtBQUMzQlQsRUFBQUEsNkRBQUEsQ0FBZUEsb0VBQWYsRUFBc0M7QUFBRVMsSUFBQUEsSUFBSSxFQUFKQTtBQUFGLEdBQXRDO0FBQ0Q7O0FBRUQsU0FBU2lCLEtBQVQsR0FBaUI7QUFDZnJCLEVBQUFBLGFBQWEsR0FBRyxFQUFoQjtBQUNBQyxFQUFBQSxXQUFXLEdBQUcsRUFBZDtBQUVBSCxFQUFBQSxjQUFjLEdBQUd3QixhQUFhLENBQUN4QixjQUFELENBQTlCO0FBQ0FDLEVBQUFBLFlBQVksR0FBR3VCLGFBQWEsQ0FBQ3ZCLFlBQUQsQ0FBNUI7QUFDRDs7QUFFRCxTQUFTd0IsSUFBVCxHQUFnQjtBQUNkRixFQUFBQSxLQUFLO0FBRUx2QixFQUFBQSxjQUFjLEdBQUcwQixNQUFNLENBQUNDLFdBQVAsQ0FBbUJ2QixXQUFuQixFQUFnQyxJQUFoQyxDQUFqQjtBQUNBSCxFQUFBQSxZQUFZLEdBQUd5QixNQUFNLENBQUNDLFdBQVAsQ0FBbUJaLFNBQW5CLEVBQThCLElBQTlCLENBQWY7QUFDRDs7QUFFTSxJQUFNYSxRQUFRLEdBQUc7QUFDdEIxQixFQUFBQSxhQUFhLEVBQWJBLGFBRHNCO0FBRXRCQyxFQUFBQSxXQUFXLEVBQVhBO0FBRnNCLENBQWpCO0FBS1AsK0RBQWU7QUFDYnNCLEVBQUFBLElBQUksRUFBSkEsSUFEYTtBQUViRixFQUFBQSxLQUFLLEVBQUxBLEtBRmE7QUFHYlAsRUFBQUEsSUFBSSxFQUFKQSxJQUhhO0FBSWJNLEVBQUFBLGFBQWEsRUFBYkE7QUFKYSxDQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvcmVwb3J0aW5nL2FnZ3JlZ2F0b3IuanM/ZTk1NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0IGZyb20gJ3BsYXllci11dGlscy9vYmplY3QvZ2V0JztcbmltcG9ydCBoYXNLZXlzIGZyb20gJ3BsYXllci11dGlscy9vYmplY3QvaGFzS2V5cyc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAncGxheWVyLXV0aWxzL29iamVjdC9tZXJnZSc7XG5pbXBvcnQgcmVwb3J0aW5nIGZyb20gJ2Nyb251cy9yZXBvcnRpbmcnO1xuaW1wb3J0IHsgY3JlYXRlTG9nZ2VyRm9yTW9kdWxlIH0gZnJvbSAnc2hhcmVkL2xpYi9sb2dnZXInO1xuXG5jb25zdCBkZWJ1Z0xvZ2dlciA9IGNyZWF0ZUxvZ2dlckZvck1vZHVsZSgnY3JvbnVzL3JlcG9ydGluZy9hZ2dyZWdhdG9yJyk7XG5cbmxldCBpbW1lZGlhdGVUaW1lcjtcbmxldCBkZWxheWVkVGltZXI7XG5sZXQgZGF0YUltbWVkaWF0ZSA9IHt9O1xubGV0IGRhdGFEZWxheWVkID0ge307XG5cbi8qKlxuICogUmVwb3J0IGluIGV2ZXJ5IHNlY1xuICovXG5mdW5jdGlvbiBvbkltbWVkaWF0ZSgpIHtcbiAgaWYgKCFoYXNLZXlzKGRhdGFJbW1lZGlhdGUpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZm9yIChjb25zdCBtZWRpYUlkIGluIGRhdGFJbW1lZGlhdGUpIHtcbiAgICBjb25zdCBkYXRhID0gZGF0YUltbWVkaWF0ZVttZWRpYUlkXTtcbiAgICBpZiAoZ2V0KGRhdGEsICdjb21tb24uYnVmZW1wdHkubGVuZ3RoJykpIHtcbiAgICAgIGNvbnN0IGxhc3QgPSBkYXRhLmNvbW1vbi5idWZlbXB0eS5wb3AoKTtcbiAgICAgIGRhdGEuY29tbW9uLmJ1ZmVtcHR5ID0gbGFzdC52YWx1ZTtcbiAgICB9XG5cbiAgICByZXBvcnRpbmcuc2VuZChyZXBvcnRpbmcuVFlQRVMuc3RhdHMsIHsgZGF0YSB9LCBtZWRpYUlkKTtcbiAgfVxuXG4gIGRhdGFJbW1lZGlhdGUgPSB7fTtcbn1cblxuLyoqXG4gKiBSZXBvcnRzIGluIGV2ZXJ5IDUgc2VjXG4gKi9cbmZ1bmN0aW9uIG9uRGVsYXllZCgpIHtcbiAgaWYgKCFoYXNLZXlzKGRhdGFEZWxheWVkKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZvciAoY29uc3QgbWVkaWFJZCBpbiBkYXRhRGVsYXllZCkge1xuICAgIGNvbnN0IGRhdGEgPSBkYXRhRGVsYXllZFttZWRpYUlkXTtcbiAgICByZXBvcnRpbmcuc2VuZChyZXBvcnRpbmcuVFlQRVMuc3RhdHMsIHsgZGF0YSB9LCBtZWRpYUlkKTtcbiAgfVxuXG4gIGRhdGFEZWxheWVkID0ge307XG59XG5cbmZ1bmN0aW9uIGZlZWQobWVkaWFJZCwgZGF0YSkge1xuICBkZWJ1Z0xvZ2dlci5kZWJ1ZygnYWdncmVnYXRvciBmZWVkJywgeyBtZWRpYUlkLCBkYXRhIH0pO1xuXG4gIGlmIChkYXRhLmNvbW1vbiAmJiB0eXBlb2YgZGF0YS5jb21tb24uYnVmZW1wdHkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZGF0YUltbWVkaWF0ZVttZWRpYUlkXSA9IGRhdGFJbW1lZGlhdGVbbWVkaWFJZF0gfHwgeyBjb21tb246IHsgYnVmZW1wdHk6IFtdIH0gfTtcbiAgICBkYXRhSW1tZWRpYXRlW21lZGlhSWRdLmNvbW1vbi5idWZlbXB0eS5wdXNoKHtcbiAgICAgIHZhbHVlOiBkYXRhLmNvbW1vbi5idWZlbXB0eSxcbiAgICAgIHRpbWU6IERhdGUubm93KCksXG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGhhc0tleXMoZGF0YSkpIHtcbiAgICBpZiAoIWRhdGFEZWxheWVkW21lZGlhSWRdKSB7XG4gICAgICBkYXRhRGVsYXllZFttZWRpYUlkXSA9IGRhdGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1lcmdlKGRhdGEsIGRhdGFEZWxheWVkW21lZGlhSWRdKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmVlZEltbWVkaWF0ZShkYXRhKSB7XG4gIHJlcG9ydGluZy5zZW5kKHJlcG9ydGluZy5UWVBFUy5zdGF0cywgeyBkYXRhIH0pO1xufVxuXG5mdW5jdGlvbiByZXNldCgpIHtcbiAgZGF0YUltbWVkaWF0ZSA9IHt9O1xuICBkYXRhRGVsYXllZCA9IHt9O1xuXG4gIGltbWVkaWF0ZVRpbWVyID0gY2xlYXJJbnRlcnZhbChpbW1lZGlhdGVUaW1lcik7XG4gIGRlbGF5ZWRUaW1lciA9IGNsZWFySW50ZXJ2YWwoZGVsYXllZFRpbWVyKTtcbn1cblxuZnVuY3Rpb24gaW5pdCgpIHtcbiAgcmVzZXQoKTtcblxuICBpbW1lZGlhdGVUaW1lciA9IHdpbmRvdy5zZXRJbnRlcnZhbChvbkltbWVkaWF0ZSwgMTAwMCk7XG4gIGRlbGF5ZWRUaW1lciA9IHdpbmRvdy5zZXRJbnRlcnZhbChvbkRlbGF5ZWQsIDUwMDApO1xufVxuXG5leHBvcnQgY29uc3QgX190ZXN0X18gPSB7XG4gIGRhdGFJbW1lZGlhdGUsXG4gIGRhdGFEZWxheWVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0LFxuICByZXNldCxcbiAgZmVlZCxcbiAgZmVlZEltbWVkaWF0ZSxcbn07XG4iXSwibmFtZXMiOlsiZ2V0IiwiaGFzS2V5cyIsIm1lcmdlIiwicmVwb3J0aW5nIiwiY3JlYXRlTG9nZ2VyRm9yTW9kdWxlIiwiZGVidWdMb2dnZXIiLCJpbW1lZGlhdGVUaW1lciIsImRlbGF5ZWRUaW1lciIsImRhdGFJbW1lZGlhdGUiLCJkYXRhRGVsYXllZCIsIm9uSW1tZWRpYXRlIiwibWVkaWFJZCIsImRhdGEiLCJsYXN0IiwiY29tbW9uIiwiYnVmZW1wdHkiLCJwb3AiLCJ2YWx1ZSIsInNlbmQiLCJUWVBFUyIsInN0YXRzIiwib25EZWxheWVkIiwiZmVlZCIsImRlYnVnIiwicHVzaCIsInRpbWUiLCJEYXRlIiwibm93IiwiZmVlZEltbWVkaWF0ZSIsInJlc2V0IiwiY2xlYXJJbnRlcnZhbCIsImluaXQiLCJ3aW5kb3ciLCJzZXRJbnRlcnZhbCIsIl9fdGVzdF9fIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/reporting/aggregator.js\n");

/***/ }),

/***/ "../js/cronus/reporting/index.js":
/*!***************************************!*\
  !*** ../js/cronus/reporting/index.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__test__\": function() { return /* binding */ __test__; }\n/* harmony export */ });\n/* harmony import */ var cronus_ums__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/ums */ \"../js/cronus/ums/index.js\");\n/* harmony import */ var shared_lib_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/lib/logger */ \"../js/shared/lib/logger/index.js\");\n/* harmony import */ var cronus_reporting_aggregator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/reporting/aggregator */ \"../js/cronus/reporting/aggregator.js\");\n/* harmony import */ var cronus_reporting_payloads__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/reporting/payloads */ \"../js/cronus/reporting/payloads.js\");\n/* harmony import */ var cronus_reporting_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! cronus/reporting/types */ \"../js/cronus/reporting/types.js\");\n/* harmony import */ var cronus_store_selectors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cronus/store/selectors */ \"../js/cronus/store/selectors/index.js\");\n/* harmony import */ var cronus_store__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! cronus/store */ \"../js/cronus/store/index.js\");\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\nvar debugLogger = (0,shared_lib_logger__WEBPACK_IMPORTED_MODULE_1__.createLoggerForModule)('cronus/reporting/index');\nvar connections = {};\nvar cache = {};\nvar timeout = {};\n\nfunction onUmsOpen(mediaId) {\n  connections[mediaId] = true;\n  sendCached(mediaId);\n}\n\nfunction sendCached(mediaId) {\n  if (!cache[mediaId]) {\n    return;\n  }\n\n  while (cache[mediaId].length) {\n    send.apply(void 0, _toConsumableArray(cache[mediaId].shift()).concat([mediaId]));\n  }\n\n  delete cache[mediaId];\n}\n\nfunction sendWithDelay(type, options, delayInMs) {\n  timeout[type] = clearTimeout(timeout[type]);\n  timeout[type] = setTimeout(function () {\n    return send(type, options);\n  }, delayInMs);\n}\n\nfunction send(type) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var mid = arguments.length > 2 ? arguments[2] : undefined;\n\n  var _PAYLOADS$type = cronus_reporting_payloads__WEBPACK_IMPORTED_MODULE_3__.PAYLOADS[type](options),\n      cmd = _PAYLOADS$type.cmd,\n      data = _PAYLOADS$type.data;\n\n  var mediaId = mid || (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_5__.getActiveMediaId)(cronus_store__WEBPACK_IMPORTED_MODULE_6__.wrappedStore.getState());\n\n  if (!connections[mediaId]) {\n    debugLogger.debug('cache data', {\n      mediaId: mediaId,\n      data: data\n    });\n    cache[mediaId] = cache[mediaId] || [];\n    cache[mediaId].push([type, options]);\n    return;\n  }\n\n  var umsInstance = cronus_ums__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance(mediaId);\n\n  if (!umsInstance) {\n    debugLogger.warn('umsInstance not available!', {\n      cmd: cmd,\n      data: data\n    });\n    return;\n  }\n\n  debugLogger.debug('report to ums', {\n    cmd: cmd,\n    data: data\n  });\n  umsInstance.send(cmd, data);\n}\n\nfunction aggregate(type, options) {\n  var mediaId = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_5__.getActiveMediaId)(cronus_store__WEBPACK_IMPORTED_MODULE_6__.wrappedStore.getState());\n  var data = cronus_reporting_payloads__WEBPACK_IMPORTED_MODULE_3__.AGGREGATED_PAYLOADS[type](options);\n  cronus_reporting_aggregator__WEBPACK_IMPORTED_MODULE_2__[\"default\"].feed(mediaId, data);\n}\n\nfunction init() {\n  cronus_reporting_aggregator__WEBPACK_IMPORTED_MODULE_2__[\"default\"].init();\n}\n\nvar __test__ = {\n  cache: cache\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  init: init,\n  send: send,\n  sendWithDelay: sendWithDelay,\n  aggregate: aggregate,\n  TYPES: cronus_reporting_types__WEBPACK_IMPORTED_MODULE_4__.TYPES,\n  onUmsOpen: onUmsOpen\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUEsV0FBVyxDQUFDZCxJQUFaLENBQWlCUyxHQUFqQixFQUFzQkMsSUFBdEI7QUFDRDs7QUFFRCxTQUFTTyxTQUFULENBQW1CZCxJQUFuQixFQUF5QkMsT0FBekIsRUFBa0M7QUFDaEMsTUFBTVAsT0FBTyxHQUFHUCx3RUFBZ0IsQ0FBQ0MsK0RBQUEsRUFBRCxDQUFoQztBQUNBLE1BQU1tQixJQUFJLEdBQUd0QiwwRUFBbUIsQ0FBQ2UsSUFBRCxDQUFuQixDQUEwQkMsT0FBMUIsQ0FBYjtBQUNBbEIsRUFBQUEsd0VBQUEsQ0FBZ0JXLE9BQWhCLEVBQXlCYSxJQUF6QjtBQUNEOztBQUVELFNBQVNTLElBQVQsR0FBZ0I7QUFDZGpDLEVBQUFBLHdFQUFBO0FBQ0Q7O0FBRU0sSUFBTWtDLFFBQVEsR0FBRztBQUN0QjFCLEVBQUFBLEtBQUssRUFBTEE7QUFEc0IsQ0FBakI7QUFJUCwrREFBZTtBQUNieUIsRUFBQUEsSUFBSSxFQUFKQSxJQURhO0FBRWJuQixFQUFBQSxJQUFJLEVBQUpBLElBRmE7QUFHYkUsRUFBQUEsYUFBYSxFQUFiQSxhQUhhO0FBSWJlLEVBQUFBLFNBQVMsRUFBVEEsU0FKYTtBQUtiNUIsRUFBQUEsS0FBSyxFQUFMQSx5REFMYTtBQU1iTyxFQUFBQSxTQUFTLEVBQVRBO0FBTmEsQ0FBZiIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vanMvY3JvbnVzL3JlcG9ydGluZy9pbmRleC5qcz9jMzQzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb25uZWN0aW9uIGZyb20gJ2Nyb251cy91bXMnO1xuaW1wb3J0IHsgY3JlYXRlTG9nZ2VyRm9yTW9kdWxlIH0gZnJvbSAnc2hhcmVkL2xpYi9sb2dnZXInO1xuaW1wb3J0IGFnZ3JlZ2F0b3IgZnJvbSAnY3JvbnVzL3JlcG9ydGluZy9hZ2dyZWdhdG9yJztcbmltcG9ydCB7IFBBWUxPQURTLCBBR0dSRUdBVEVEX1BBWUxPQURTIH0gZnJvbSAnY3JvbnVzL3JlcG9ydGluZy9wYXlsb2Fkcyc7XG5pbXBvcnQgeyBUWVBFUyB9IGZyb20gJ2Nyb251cy9yZXBvcnRpbmcvdHlwZXMnO1xuaW1wb3J0IHsgZ2V0QWN0aXZlTWVkaWFJZCB9IGZyb20gJ2Nyb251cy9zdG9yZS9zZWxlY3RvcnMnO1xuaW1wb3J0IHsgd3JhcHBlZFN0b3JlIH0gZnJvbSAnY3JvbnVzL3N0b3JlJztcblxuY29uc3QgZGVidWdMb2dnZXIgPSBjcmVhdGVMb2dnZXJGb3JNb2R1bGUoJ2Nyb251cy9yZXBvcnRpbmcvaW5kZXgnKTtcbmNvbnN0IGNvbm5lY3Rpb25zID0ge307XG5jb25zdCBjYWNoZSA9IHt9O1xuY29uc3QgdGltZW91dCA9IHt9O1xuXG5mdW5jdGlvbiBvblVtc09wZW4obWVkaWFJZCkge1xuICBjb25uZWN0aW9uc1ttZWRpYUlkXSA9IHRydWU7XG4gIHNlbmRDYWNoZWQobWVkaWFJZCk7XG59XG5cbmZ1bmN0aW9uIHNlbmRDYWNoZWQobWVkaWFJZCkge1xuICBpZiAoIWNhY2hlW21lZGlhSWRdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgd2hpbGUgKGNhY2hlW21lZGlhSWRdLmxlbmd0aCkge1xuICAgIHNlbmQoLi4uY2FjaGVbbWVkaWFJZF0uc2hpZnQoKSwgbWVkaWFJZCk7XG4gIH1cblxuICBkZWxldGUgY2FjaGVbbWVkaWFJZF07XG59XG5cbmZ1bmN0aW9uIHNlbmRXaXRoRGVsYXkodHlwZSwgb3B0aW9ucywgZGVsYXlJbk1zKSB7XG4gIHRpbWVvdXRbdHlwZV0gPSBjbGVhclRpbWVvdXQodGltZW91dFt0eXBlXSk7XG4gIHRpbWVvdXRbdHlwZV0gPSBzZXRUaW1lb3V0KCgpID0+IHNlbmQodHlwZSwgb3B0aW9ucyksIGRlbGF5SW5Ncyk7XG59XG5cbmZ1bmN0aW9uIHNlbmQodHlwZSwgb3B0aW9ucyA9IHt9LCBtaWQpIHtcbiAgY29uc3QgeyBjbWQsIGRhdGEgfSA9IFBBWUxPQURTW3R5cGVdKG9wdGlvbnMpO1xuICBjb25zdCBtZWRpYUlkID0gbWlkIHx8IGdldEFjdGl2ZU1lZGlhSWQod3JhcHBlZFN0b3JlLmdldFN0YXRlKCkpO1xuXG4gIGlmICghY29ubmVjdGlvbnNbbWVkaWFJZF0pIHtcbiAgICBkZWJ1Z0xvZ2dlci5kZWJ1ZygnY2FjaGUgZGF0YScsIHsgbWVkaWFJZCwgZGF0YSB9KTtcbiAgICBjYWNoZVttZWRpYUlkXSA9IGNhY2hlW21lZGlhSWRdIHx8IFtdO1xuICAgIGNhY2hlW21lZGlhSWRdLnB1c2goW3R5cGUsIG9wdGlvbnNdKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB1bXNJbnN0YW5jZSA9IGNvbm5lY3Rpb24uZ2V0SW5zdGFuY2UobWVkaWFJZCk7XG4gIGlmICghdW1zSW5zdGFuY2UpIHtcbiAgICBkZWJ1Z0xvZ2dlci53YXJuKCd1bXNJbnN0YW5jZSBub3QgYXZhaWxhYmxlIScsIHsgY21kLCBkYXRhIH0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGRlYnVnTG9nZ2VyLmRlYnVnKCdyZXBvcnQgdG8gdW1zJywgeyBjbWQsIGRhdGEgfSk7XG4gIHVtc0luc3RhbmNlLnNlbmQoY21kLCBkYXRhKTtcbn1cblxuZnVuY3Rpb24gYWdncmVnYXRlKHR5cGUsIG9wdGlvbnMpIHtcbiAgY29uc3QgbWVkaWFJZCA9IGdldEFjdGl2ZU1lZGlhSWQod3JhcHBlZFN0b3JlLmdldFN0YXRlKCkpO1xuICBjb25zdCBkYXRhID0gQUdHUkVHQVRFRF9QQVlMT0FEU1t0eXBlXShvcHRpb25zKTtcbiAgYWdncmVnYXRvci5mZWVkKG1lZGlhSWQsIGRhdGEpO1xufVxuXG5mdW5jdGlvbiBpbml0KCkge1xuICBhZ2dyZWdhdG9yLmluaXQoKTtcbn1cblxuZXhwb3J0IGNvbnN0IF9fdGVzdF9fID0ge1xuICBjYWNoZSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdCxcbiAgc2VuZCxcbiAgc2VuZFdpdGhEZWxheSxcbiAgYWdncmVnYXRlLFxuICBUWVBFUyxcbiAgb25VbXNPcGVuLFxufTtcbiJdLCJuYW1lcyI6WyJjb25uZWN0aW9uIiwiY3JlYXRlTG9nZ2VyRm9yTW9kdWxlIiwiYWdncmVnYXRvciIsIlBBWUxPQURTIiwiQUdHUkVHQVRFRF9QQVlMT0FEUyIsIlRZUEVTIiwiZ2V0QWN0aXZlTWVkaWFJZCIsIndyYXBwZWRTdG9yZSIsImRlYnVnTG9nZ2VyIiwiY29ubmVjdGlvbnMiLCJjYWNoZSIsInRpbWVvdXQiLCJvblVtc09wZW4iLCJtZWRpYUlkIiwic2VuZENhY2hlZCIsImxlbmd0aCIsInNlbmQiLCJzaGlmdCIsInNlbmRXaXRoRGVsYXkiLCJ0eXBlIiwib3B0aW9ucyIsImRlbGF5SW5NcyIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJtaWQiLCJjbWQiLCJkYXRhIiwiZ2V0U3RhdGUiLCJkZWJ1ZyIsInB1c2giLCJ1bXNJbnN0YW5jZSIsImdldEluc3RhbmNlIiwid2FybiIsImFnZ3JlZ2F0ZSIsImZlZWQiLCJpbml0IiwiX190ZXN0X18iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/reporting/index.js\n");

/***/ }),

/***/ "../js/cronus/reporting/payloads.js":
/*!******************************************!*\
  !*** ../js/cronus/reporting/payloads.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AGGREGATED_PAYLOADS\": function() { return /* binding */ AGGREGATED_PAYLOADS; },\n/* harmony export */   \"PAYLOADS\": function() { return /* binding */ PAYLOADS; }\n/* harmony export */ });\n/* harmony import */ var cronus_reporting_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/reporting/types */ \"../js/cronus/reporting/types.js\");\nvar _PAYLOADS, _AGGREGATED_PAYLOADS;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nvar PAYLOADS = (_PAYLOADS = {}, _defineProperty(_PAYLOADS, cronus_reporting_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.playingChange, function () {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      id = _ref.id,\n      playing = _ref.playing,\n      _ref$reason = _ref.reason,\n      reason = _ref$reason === void 0 ? '' : _ref$reason,\n      multiaudio = _ref.multiaudio;\n\n  var cmd = cronus_reporting_types__WEBPACK_IMPORTED_MODULE_0__.COMMANDS[cronus_reporting_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.playingChange];\n  var data = [id, playing, {\n    reason: reason\n  }];\n\n  if (multiaudio && multiaudio.language) {\n    data[2] = _objectSpread(_objectSpread({}, data[2]), {}, {\n      multiaudio: multiaudio\n    });\n  }\n\n  return {\n    cmd: cmd,\n    data: data\n  };\n}), _defineProperty(_PAYLOADS, cronus_reporting_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.seek, function (_ref2) {\n  var fromInSec = _ref2.fromInSec,\n      toInSec = _ref2.toInSec;\n  return {\n    cmd: cronus_reporting_types__WEBPACK_IMPORTED_MODULE_0__.COMMANDS[cronus_reporting_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.seek],\n    data: [Math.round(fromInSec), Math.round(toInSec)]\n  };\n}), _defineProperty(_PAYLOADS, cronus_reporting_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.stats, function (_ref3) {\n  var data = _ref3.data;\n  return {\n    cmd: cronus_reporting_types__WEBPACK_IMPORTED_MODULE_0__.COMMANDS[cronus_reporting_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.stats],\n    data: [data]\n  };\n}), _PAYLOADS);\n/**\n * Aggregated payloads are sent with the `stats` command\n */\n\nvar AGGREGATED_PAYLOADS = (_AGGREGATED_PAYLOADS = {}, _defineProperty(_AGGREGATED_PAYLOADS, cronus_reporting_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.bandwidthChange, function (_ref4) {\n  var time = _ref4.time,\n      size = _ref4.size,\n      url = _ref4.url,\n      isEcdn = _ref4.isEcdn;\n  return {\n    benchmark: _defineProperty({}, cronus_reporting_types__WEBPACK_IMPORTED_MODULE_0__.COMMANDS[cronus_reporting_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.bandwidthChange], [{\n      time: Math.round(time),\n      size: size,\n      url: url,\n      ecdn: isEcdn\n    }])\n  };\n}), _defineProperty(_AGGREGATED_PAYLOADS, cronus_reporting_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.firstModuleInfo, function (_ref5) {\n  var timeSpent = _ref5.timeSpent;\n  return {\n    benchmark: _defineProperty({}, cronus_reporting_types__WEBPACK_IMPORTED_MODULE_0__.COMMANDS[cronus_reporting_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.firstModuleInfo], timeSpent)\n  };\n}), _defineProperty(_AGGREGATED_PAYLOADS, cronus_reporting_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.umsConnected, function (_ref6) {\n  var timeSpent = _ref6.timeSpent;\n  return {\n    benchmark: _defineProperty({}, cronus_reporting_types__WEBPACK_IMPORTED_MODULE_0__.COMMANDS[cronus_reporting_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.umsConnected], timeSpent)\n  };\n}), _defineProperty(_AGGREGATED_PAYLOADS, cronus_reporting_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.ecdnTest, function (_ref7) {\n  var data = _ref7.data;\n  return {\n    benchmark: _defineProperty({}, cronus_reporting_types__WEBPACK_IMPORTED_MODULE_0__.COMMANDS[cronus_reporting_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.ecdnTest], data)\n  };\n}), _defineProperty(_AGGREGATED_PAYLOADS, cronus_reporting_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.bufferingStarted, function () {\n  return {\n    common: {\n      bufempty: true\n    }\n  };\n}), _defineProperty(_AGGREGATED_PAYLOADS, cronus_reporting_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.bufferingCompleted, function () {\n  return {\n    common: {\n      bufempty: false\n    }\n  };\n}), _defineProperty(_AGGREGATED_PAYLOADS, cronus_reporting_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.providerChange, function (_ref8) {\n  var cdnProviderType = _ref8.cdnProviderType,\n      cdnProviderHostname = _ref8.cdnProviderHostname;\n  return {\n    common: {\n      cdnProviderType: cdnProviderType,\n      cdnProviderHostname: cdnProviderHostname\n    }\n  };\n}), _defineProperty(_AGGREGATED_PAYLOADS, cronus_reporting_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.branchName, function (_ref9) {\n  var branchName = _ref9.branchName;\n  return {\n    branchName: branchName\n  };\n}), _defineProperty(_AGGREGATED_PAYLOADS, cronus_reporting_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.error, function (_ref10) {\n  var mediaId = _ref10.mediaId,\n      type = _ref10.type,\n      details = _ref10.details;\n  var mediaType = mediaId.type,\n      id = mediaId.id;\n  var key = mediaType === 'channel' ? 'cid' : 'vid';\n  return {\n    error: [{\n      type: type,\n      details: _objectSpread(_objectSpread({}, details), {}, _defineProperty({}, key, id))\n    }]\n  };\n}), _AGGREGATED_PAYLOADS);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixLQUExQixHQUFrQyxLQUE5QztBQUNBLFNBQU87QUFDTEosSUFBQUEsS0FBSyxFQUFFLENBQ0w7QUFDRUUsTUFBQUEsSUFBSSxFQUFKQSxJQURGO0FBRUVDLE1BQUFBLE9BQU8sa0NBQ0ZBLE9BREUsMkJBRUpFLEdBRkksRUFFRXRDLEVBRkY7QUFGVCxLQURLO0FBREYsR0FBUDtBQVdELENBaEU2Qix3QkFBekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy9yZXBvcnRpbmcvcGF5bG9hZHMuanM/ODZjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUWVBFUywgQ09NTUFORFMgfSBmcm9tICdjcm9udXMvcmVwb3J0aW5nL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IFBBWUxPQURTID0ge1xuICBbVFlQRVMucGxheWluZ0NoYW5nZV06ICh7IGlkLCBwbGF5aW5nLCByZWFzb24gPSAnJywgbXVsdGlhdWRpbyB9ID0ge30pID0+IHtcbiAgICBjb25zdCBjbWQgPSBDT01NQU5EU1tUWVBFUy5wbGF5aW5nQ2hhbmdlXTtcbiAgICBjb25zdCBkYXRhID0gW2lkLCBwbGF5aW5nLCB7IHJlYXNvbiB9XTtcbiAgICBpZiAobXVsdGlhdWRpbyAmJiBtdWx0aWF1ZGlvLmxhbmd1YWdlKSB7XG4gICAgICBkYXRhWzJdID0geyAuLi5kYXRhWzJdLCBtdWx0aWF1ZGlvIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgY21kLCBkYXRhIH07XG4gIH0sXG4gIFtUWVBFUy5zZWVrXTogKHsgZnJvbUluU2VjLCB0b0luU2VjIH0pID0+ICh7XG4gICAgY21kOiBDT01NQU5EU1tUWVBFUy5zZWVrXSxcbiAgICBkYXRhOiBbTWF0aC5yb3VuZChmcm9tSW5TZWMpLCBNYXRoLnJvdW5kKHRvSW5TZWMpXSxcbiAgfSksXG4gIFtUWVBFUy5zdGF0c106ICh7IGRhdGEgfSkgPT4gKHtcbiAgICBjbWQ6IENPTU1BTkRTW1RZUEVTLnN0YXRzXSxcbiAgICBkYXRhOiBbZGF0YV0sXG4gIH0pLFxufTtcblxuLyoqXG4gKiBBZ2dyZWdhdGVkIHBheWxvYWRzIGFyZSBzZW50IHdpdGggdGhlIGBzdGF0c2AgY29tbWFuZFxuICovXG5leHBvcnQgY29uc3QgQUdHUkVHQVRFRF9QQVlMT0FEUyA9IHtcbiAgLy8gYmVuY2htYXJrXG4gIFtUWVBFUy5iYW5kd2lkdGhDaGFuZ2VdOiAoeyB0aW1lLCBzaXplLCB1cmwsIGlzRWNkbiB9KSA9PiAoe1xuICAgIGJlbmNobWFyazoge1xuICAgICAgW0NPTU1BTkRTW1RZUEVTLmJhbmR3aWR0aENoYW5nZV1dOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0aW1lOiBNYXRoLnJvdW5kKHRpbWUpLFxuICAgICAgICAgIHNpemUsXG4gICAgICAgICAgdXJsLFxuICAgICAgICAgIGVjZG46IGlzRWNkbixcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSxcbiAgfSksXG4gIFtUWVBFUy5maXJzdE1vZHVsZUluZm9dOiAoeyB0aW1lU3BlbnQgfSkgPT4gKHtcbiAgICBiZW5jaG1hcms6IHtcbiAgICAgIFtDT01NQU5EU1tUWVBFUy5maXJzdE1vZHVsZUluZm9dXTogdGltZVNwZW50LFxuICAgIH0sXG4gIH0pLFxuICBbVFlQRVMudW1zQ29ubmVjdGVkXTogKHsgdGltZVNwZW50IH0pID0+ICh7XG4gICAgYmVuY2htYXJrOiB7XG4gICAgICBbQ09NTUFORFNbVFlQRVMudW1zQ29ubmVjdGVkXV06IHRpbWVTcGVudCxcbiAgICB9LFxuICB9KSxcbiAgW1RZUEVTLmVjZG5UZXN0XTogKHsgZGF0YSB9KSA9PiAoe1xuICAgIGJlbmNobWFyazoge1xuICAgICAgW0NPTU1BTkRTW1RZUEVTLmVjZG5UZXN0XV06IGRhdGEsXG4gICAgfSxcbiAgfSksXG4gIC8vIGNvbW1vblxuICBbVFlQRVMuYnVmZmVyaW5nU3RhcnRlZF06ICgpID0+ICh7XG4gICAgY29tbW9uOiB7XG4gICAgICBidWZlbXB0eTogdHJ1ZSxcbiAgICB9LFxuICB9KSxcbiAgW1RZUEVTLmJ1ZmZlcmluZ0NvbXBsZXRlZF06ICgpID0+ICh7XG4gICAgY29tbW9uOiB7XG4gICAgICBidWZlbXB0eTogZmFsc2UsXG4gICAgfSxcbiAgfSksXG4gIFtUWVBFUy5wcm92aWRlckNoYW5nZV06ICh7IGNkblByb3ZpZGVyVHlwZSwgY2RuUHJvdmlkZXJIb3N0bmFtZSB9KSA9PiAoe1xuICAgIGNvbW1vbjoge1xuICAgICAgY2RuUHJvdmlkZXJUeXBlLFxuICAgICAgY2RuUHJvdmlkZXJIb3N0bmFtZSxcbiAgICB9LFxuICB9KSxcbiAgLy8gbWlzY1xuICBbVFlQRVMuYnJhbmNoTmFtZV06ICh7IGJyYW5jaE5hbWUgfSkgPT4gKHtcbiAgICBicmFuY2hOYW1lLFxuICB9KSxcbiAgW1RZUEVTLmVycm9yXTogKHsgbWVkaWFJZCwgdHlwZSwgZGV0YWlscyB9KSA9PiB7XG4gICAgY29uc3QgeyB0eXBlOiBtZWRpYVR5cGUsIGlkIH0gPSBtZWRpYUlkO1xuICAgIGNvbnN0IGtleSA9IG1lZGlhVHlwZSA9PT0gJ2NoYW5uZWwnID8gJ2NpZCcgOiAndmlkJztcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3I6IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgZGV0YWlsczoge1xuICAgICAgICAgICAgLi4uZGV0YWlscyxcbiAgICAgICAgICAgIFtrZXldOiBpZCxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9LFxufTtcbiJdLCJuYW1lcyI6WyJUWVBFUyIsIkNPTU1BTkRTIiwiUEFZTE9BRFMiLCJwbGF5aW5nQ2hhbmdlIiwiaWQiLCJwbGF5aW5nIiwicmVhc29uIiwibXVsdGlhdWRpbyIsImNtZCIsImRhdGEiLCJsYW5ndWFnZSIsInNlZWsiLCJmcm9tSW5TZWMiLCJ0b0luU2VjIiwiTWF0aCIsInJvdW5kIiwic3RhdHMiLCJBR0dSRUdBVEVEX1BBWUxPQURTIiwiYmFuZHdpZHRoQ2hhbmdlIiwidGltZSIsInNpemUiLCJ1cmwiLCJpc0VjZG4iLCJiZW5jaG1hcmsiLCJlY2RuIiwiZmlyc3RNb2R1bGVJbmZvIiwidGltZVNwZW50IiwidW1zQ29ubmVjdGVkIiwiZWNkblRlc3QiLCJidWZmZXJpbmdTdGFydGVkIiwiY29tbW9uIiwiYnVmZW1wdHkiLCJidWZmZXJpbmdDb21wbGV0ZWQiLCJwcm92aWRlckNoYW5nZSIsImNkblByb3ZpZGVyVHlwZSIsImNkblByb3ZpZGVySG9zdG5hbWUiLCJicmFuY2hOYW1lIiwiZXJyb3IiLCJtZWRpYUlkIiwidHlwZSIsImRldGFpbHMiLCJtZWRpYVR5cGUiLCJrZXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/reporting/payloads.js\n");

/***/ }),

/***/ "../js/cronus/reporting/types.js":
/*!***************************************!*\
  !*** ../js/cronus/reporting/types.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"COMMANDS\": function() { return /* binding */ COMMANDS; },\n/* harmony export */   \"TYPES\": function() { return /* binding */ TYPES; }\n/* harmony export */ });\nvar _Object$freeze;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar TYPES = Object.freeze({\n  bandwidthChange: 'bandwidthChange',\n  branchName: 'branchName',\n  bufferingStarted: 'bufferingStarted',\n  bufferingCompleted: 'bufferingCompleted',\n  ecdnTest: 'ecdnTest',\n  error: 'error',\n  firstModuleInfo: 'firstModuleInfo',\n  playingChange: 'playingChange',\n  providerChange: 'providerChange',\n  seek: 'seek',\n  stats: 'stats',\n  umsConnected: 'umsConnected'\n});\nvar COMMANDS = Object.freeze((_Object$freeze = {}, _defineProperty(_Object$freeze, TYPES.bandwidthChange, 'bwrpt'), _defineProperty(_Object$freeze, TYPES.ecdnTest, 'ecdnt'), _defineProperty(_Object$freeze, TYPES.firstModuleInfo, 'fmi'), _defineProperty(_Object$freeze, TYPES.playingChange, 'playing'), _defineProperty(_Object$freeze, TYPES.seek, 'seek'), _defineProperty(_Object$freeze, TYPES.stats, 'stats'), _defineProperty(_Object$freeze, TYPES.umsConnected, 'ucd'), _Object$freeze));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3JlcG9ydGluZy90eXBlcy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBTyxJQUFNQSxLQUFLLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjO0FBQ2pDQyxFQUFBQSxlQUFlLEVBQUUsaUJBRGdCO0FBRWpDQyxFQUFBQSxVQUFVLEVBQUUsWUFGcUI7QUFHakNDLEVBQUFBLGdCQUFnQixFQUFFLGtCQUhlO0FBSWpDQyxFQUFBQSxrQkFBa0IsRUFBRSxvQkFKYTtBQUtqQ0MsRUFBQUEsUUFBUSxFQUFFLFVBTHVCO0FBTWpDQyxFQUFBQSxLQUFLLEVBQUUsT0FOMEI7QUFPakNDLEVBQUFBLGVBQWUsRUFBRSxpQkFQZ0I7QUFRakNDLEVBQUFBLGFBQWEsRUFBRSxlQVJrQjtBQVNqQ0MsRUFBQUEsY0FBYyxFQUFFLGdCQVRpQjtBQVVqQ0MsRUFBQUEsSUFBSSxFQUFFLE1BVjJCO0FBV2pDQyxFQUFBQSxLQUFLLEVBQUUsT0FYMEI7QUFZakNDLEVBQUFBLFlBQVksRUFBRTtBQVptQixDQUFkLENBQWQ7QUFlQSxJQUFNQyxRQUFRLEdBQUdkLE1BQU0sQ0FBQ0MsTUFBUCx1REFDckJGLEtBQUssQ0FBQ0csZUFEZSxFQUNHLE9BREgsbUNBRXJCSCxLQUFLLENBQUNPLFFBRmUsRUFFSixPQUZJLG1DQUdyQlAsS0FBSyxDQUFDUyxlQUhlLEVBR0csS0FISCxtQ0FJckJULEtBQUssQ0FBQ1UsYUFKZSxFQUlDLFNBSkQsbUNBS3JCVixLQUFLLENBQUNZLElBTGUsRUFLUixNQUxRLG1DQU1yQlosS0FBSyxDQUFDYSxLQU5lLEVBTVAsT0FOTyxtQ0FPckJiLEtBQUssQ0FBQ2MsWUFQZSxFQU9BLEtBUEEsbUJBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvcmVwb3J0aW5nL3R5cGVzLmpzPzhhNGQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IFRZUEVTID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGJhbmR3aWR0aENoYW5nZTogJ2JhbmR3aWR0aENoYW5nZScsXG4gIGJyYW5jaE5hbWU6ICdicmFuY2hOYW1lJyxcbiAgYnVmZmVyaW5nU3RhcnRlZDogJ2J1ZmZlcmluZ1N0YXJ0ZWQnLFxuICBidWZmZXJpbmdDb21wbGV0ZWQ6ICdidWZmZXJpbmdDb21wbGV0ZWQnLFxuICBlY2RuVGVzdDogJ2VjZG5UZXN0JyxcbiAgZXJyb3I6ICdlcnJvcicsXG4gIGZpcnN0TW9kdWxlSW5mbzogJ2ZpcnN0TW9kdWxlSW5mbycsXG4gIHBsYXlpbmdDaGFuZ2U6ICdwbGF5aW5nQ2hhbmdlJyxcbiAgcHJvdmlkZXJDaGFuZ2U6ICdwcm92aWRlckNoYW5nZScsXG4gIHNlZWs6ICdzZWVrJyxcbiAgc3RhdHM6ICdzdGF0cycsXG4gIHVtc0Nvbm5lY3RlZDogJ3Vtc0Nvbm5lY3RlZCcsXG59KTtcblxuZXhwb3J0IGNvbnN0IENPTU1BTkRTID0gT2JqZWN0LmZyZWV6ZSh7XG4gIFtUWVBFUy5iYW5kd2lkdGhDaGFuZ2VdOiAnYndycHQnLFxuICBbVFlQRVMuZWNkblRlc3RdOiAnZWNkbnQnLFxuICBbVFlQRVMuZmlyc3RNb2R1bGVJbmZvXTogJ2ZtaScsXG4gIFtUWVBFUy5wbGF5aW5nQ2hhbmdlXTogJ3BsYXlpbmcnLFxuICBbVFlQRVMuc2Vla106ICdzZWVrJyxcbiAgW1RZUEVTLnN0YXRzXTogJ3N0YXRzJyxcbiAgW1RZUEVTLnVtc0Nvbm5lY3RlZF06ICd1Y2QnLFxufSk7XG4iXSwibmFtZXMiOlsiVFlQRVMiLCJPYmplY3QiLCJmcmVlemUiLCJiYW5kd2lkdGhDaGFuZ2UiLCJicmFuY2hOYW1lIiwiYnVmZmVyaW5nU3RhcnRlZCIsImJ1ZmZlcmluZ0NvbXBsZXRlZCIsImVjZG5UZXN0IiwiZXJyb3IiLCJmaXJzdE1vZHVsZUluZm8iLCJwbGF5aW5nQ2hhbmdlIiwicHJvdmlkZXJDaGFuZ2UiLCJzZWVrIiwic3RhdHMiLCJ1bXNDb25uZWN0ZWQiLCJDT01NQU5EUyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/reporting/types.js\n");

/***/ }),

/***/ "../js/cronus/store/actions/ads.js":
/*!*****************************************!*\
  !*** ../js/cronus/store/actions/ads.js ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"setPosition\": function() { return /* binding */ setPosition; },\n/* harmony export */   \"setRuleset\": function() { return /* binding */ setRuleset; }\n/* harmony export */ });\n/* harmony import */ var cronus_store_types_ads__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/store/types/ads */ \"../js/cronus/store/types/ads.js\");\n\nfunction setPosition(position) {\n  return {\n    type: cronus_store_types_ads__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setPosition,\n    payload: {\n      position: position\n    }\n  };\n}\nfunction setRuleset(ruleset) {\n  return {\n    type: cronus_store_types_ads__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setRuleset,\n    payload: {\n      ruleset: ruleset\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL2FjdGlvbnMvYWRzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBRU8sU0FBU0MsV0FBVCxDQUFxQkMsUUFBckIsRUFBK0I7QUFDcEMsU0FBTztBQUNMQyxJQUFBQSxJQUFJLEVBQUVILDBFQUREO0FBRUxJLElBQUFBLE9BQU8sRUFBRTtBQUNQRixNQUFBQSxRQUFRLEVBQVJBO0FBRE87QUFGSixHQUFQO0FBTUQ7QUFFTSxTQUFTRyxVQUFULENBQW9CQyxPQUFwQixFQUE2QjtBQUNsQyxTQUFPO0FBQ0xILElBQUFBLElBQUksRUFBRUgseUVBREQ7QUFFTEksSUFBQUEsT0FBTyxFQUFFO0FBQ1BFLE1BQUFBLE9BQU8sRUFBUEE7QUFETztBQUZKLEdBQVA7QUFNRCIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vanMvY3JvbnVzL3N0b3JlL2FjdGlvbnMvYWRzLmpzP2QwOWYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFkc1R5cGVzIGZyb20gJ2Nyb251cy9zdG9yZS90eXBlcy9hZHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0UG9zaXRpb24ocG9zaXRpb24pIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBhZHNUeXBlcy5zZXRQb3NpdGlvbixcbiAgICBwYXlsb2FkOiB7XG4gICAgICBwb3NpdGlvbixcbiAgICB9LFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0UnVsZXNldChydWxlc2V0KSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogYWRzVHlwZXMuc2V0UnVsZXNldCxcbiAgICBwYXlsb2FkOiB7XG4gICAgICBydWxlc2V0LFxuICAgIH0sXG4gIH07XG59XG4iXSwibmFtZXMiOlsiYWRzVHlwZXMiLCJzZXRQb3NpdGlvbiIsInBvc2l0aW9uIiwidHlwZSIsInBheWxvYWQiLCJzZXRSdWxlc2V0IiwicnVsZXNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/store/actions/ads.js\n");

/***/ }),

/***/ "../js/cronus/store/actions/content.js":
/*!*********************************************!*\
  !*** ../js/cronus/store/actions/content.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"setInitialApiSeekTimeInMs\": function() { return /* binding */ setInitialApiSeekTimeInMs; },\n/* harmony export */   \"setInitialSeekTimeInMs\": function() { return /* binding */ setInitialSeekTimeInMs; },\n/* harmony export */   \"setMediaChange\": function() { return /* binding */ setMediaChange; }\n/* harmony export */ });\n/* harmony import */ var cronus_store_types_content__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/store/types/content */ \"../js/cronus/store/types/content.js\");\n\nfunction setInitialSeekTimeInMs(initialSeekTimeInMs) {\n  return {\n    type: cronus_store_types_content__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setInitialSeekTimeInMs,\n    payload: {\n      initialSeekTimeInMs: initialSeekTimeInMs\n    }\n  };\n}\nfunction setInitialApiSeekTimeInMs(state) {\n  return {\n    type: cronus_store_types_content__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setInitialApiSeekTimeInMs,\n    payload: state\n  };\n}\n/**\n * @param {{ mediaId: string, mediaType: string }} state\n * @returns {{ type: string, payload: Object }}\n */\n\nfunction setMediaChange(state) {\n  return {\n    type: cronus_store_types_content__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setMediaChange,\n    payload: state\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL2FjdGlvbnMvY29udGVudC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFFTyxTQUFTQyxzQkFBVCxDQUFnQ0MsbUJBQWhDLEVBQXFEO0FBQzFELFNBQU87QUFDTEMsSUFBQUEsSUFBSSxFQUFFSCx5RkFERDtBQUVMSSxJQUFBQSxPQUFPLEVBQUU7QUFDUEYsTUFBQUEsbUJBQW1CLEVBQW5CQTtBQURPO0FBRkosR0FBUDtBQU1EO0FBRU0sU0FBU0cseUJBQVQsQ0FBbUNDLEtBQW5DLEVBQTBDO0FBQy9DLFNBQU87QUFDTEgsSUFBQUEsSUFBSSxFQUFFSCw0RkFERDtBQUVMSSxJQUFBQSxPQUFPLEVBQUVFO0FBRkosR0FBUDtBQUlEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBQ08sU0FBU0MsY0FBVCxDQUF3QkQsS0FBeEIsRUFBK0I7QUFDcEMsU0FBTztBQUNMSCxJQUFBQSxJQUFJLEVBQUVILGlGQUREO0FBRUxJLElBQUFBLE9BQU8sRUFBRUU7QUFGSixHQUFQO0FBSUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy9zdG9yZS9hY3Rpb25zL2NvbnRlbnQuanM/ZDFiNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29udGVudFR5cGVzIGZyb20gJ2Nyb251cy9zdG9yZS90eXBlcy9jb250ZW50JztcblxuZXhwb3J0IGZ1bmN0aW9uIHNldEluaXRpYWxTZWVrVGltZUluTXMoaW5pdGlhbFNlZWtUaW1lSW5Ncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IGNvbnRlbnRUeXBlcy5zZXRJbml0aWFsU2Vla1RpbWVJbk1zLFxuICAgIHBheWxvYWQ6IHtcbiAgICAgIGluaXRpYWxTZWVrVGltZUluTXMsXG4gICAgfSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldEluaXRpYWxBcGlTZWVrVGltZUluTXMoc3RhdGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBjb250ZW50VHlwZXMuc2V0SW5pdGlhbEFwaVNlZWtUaW1lSW5NcyxcbiAgICBwYXlsb2FkOiBzdGF0ZSxcbiAgfTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3sgbWVkaWFJZDogc3RyaW5nLCBtZWRpYVR5cGU6IHN0cmluZyB9fSBzdGF0ZVxuICogQHJldHVybnMge3sgdHlwZTogc3RyaW5nLCBwYXlsb2FkOiBPYmplY3QgfX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldE1lZGlhQ2hhbmdlKHN0YXRlKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogY29udGVudFR5cGVzLnNldE1lZGlhQ2hhbmdlLFxuICAgIHBheWxvYWQ6IHN0YXRlLFxuICB9O1xufVxuIl0sIm5hbWVzIjpbImNvbnRlbnRUeXBlcyIsInNldEluaXRpYWxTZWVrVGltZUluTXMiLCJpbml0aWFsU2Vla1RpbWVJbk1zIiwidHlwZSIsInBheWxvYWQiLCJzZXRJbml0aWFsQXBpU2Vla1RpbWVJbk1zIiwic3RhdGUiLCJzZXRNZWRpYUNoYW5nZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/store/actions/content.js\n");

/***/ }),

/***/ "../js/cronus/store/actions/playback.js":
/*!**********************************************!*\
  !*** ../js/cronus/store/actions/playback.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"setCanPlay\": function() { return /* binding */ setCanPlay; },\n/* harmony export */   \"setCaptionPosition\": function() { return /* binding */ setCaptionPosition; },\n/* harmony export */   \"setInitPTS\": function() { return /* binding */ setInitPTS; },\n/* harmony export */   \"setVideoTagDuration\": function() { return /* binding */ setVideoTagDuration; }\n/* harmony export */ });\n/* harmony import */ var cronus_store_types_playback__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/store/types/playback */ \"../js/cronus/store/types/playback.js\");\n\n/**\n * @param {number} durationInSec\n * @returns {object}\n */\n\nfunction setVideoTagDuration(durationInSec) {\n  return {\n    type: cronus_store_types_playback__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setVideoTagDuration,\n    payload: {\n      durationInSec: durationInSec\n    }\n  };\n}\nfunction setInitPTS(initPTS) {\n  return {\n    type: cronus_store_types_playback__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setInitPTS,\n    payload: {\n      initPTS: initPTS\n    }\n  };\n}\nfunction setCanPlay(canPlay) {\n  return {\n    type: cronus_store_types_playback__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setCanPlay,\n    payload: {\n      canPlay: canPlay\n    }\n  };\n}\nfunction setCaptionPosition(captionPosition) {\n  return {\n    type: cronus_store_types_playback__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setCaptionPosition,\n    payload: {\n      captionPosition: captionPosition\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL2FjdGlvbnMvcGxheWJhY2suanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUNPLFNBQVNDLG1CQUFULENBQTZCQyxhQUE3QixFQUE0QztBQUNqRCxTQUFPO0FBQ0xDLElBQUFBLElBQUksRUFBRUgsdUZBREQ7QUFFTEksSUFBQUEsT0FBTyxFQUFFO0FBQ1BGLE1BQUFBLGFBQWEsRUFBYkE7QUFETztBQUZKLEdBQVA7QUFNRDtBQUVNLFNBQVNHLFVBQVQsQ0FBb0JDLE9BQXBCLEVBQTZCO0FBQ2xDLFNBQU87QUFDTEgsSUFBQUEsSUFBSSxFQUFFSCw4RUFERDtBQUVMSSxJQUFBQSxPQUFPLEVBQUU7QUFDUEUsTUFBQUEsT0FBTyxFQUFQQTtBQURPO0FBRkosR0FBUDtBQU1EO0FBRU0sU0FBU0MsVUFBVCxDQUFvQkMsT0FBcEIsRUFBNkI7QUFDbEMsU0FBTztBQUNMTCxJQUFBQSxJQUFJLEVBQUVILDhFQUREO0FBRUxJLElBQUFBLE9BQU8sRUFBRTtBQUNQSSxNQUFBQSxPQUFPLEVBQVBBO0FBRE87QUFGSixHQUFQO0FBTUQ7QUFFTSxTQUFTQyxrQkFBVCxDQUE0QkMsZUFBNUIsRUFBNkM7QUFDbEQsU0FBTztBQUNMUCxJQUFBQSxJQUFJLEVBQUVILHNGQUREO0FBRUxJLElBQUFBLE9BQU8sRUFBRTtBQUNQTSxNQUFBQSxlQUFlLEVBQWZBO0FBRE87QUFGSixHQUFQO0FBTUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy9zdG9yZS9hY3Rpb25zL3BsYXliYWNrLmpzPzBmNzEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBsYXliYWNrVHlwZXMgZnJvbSAnY3JvbnVzL3N0b3JlL3R5cGVzL3BsYXliYWNrJztcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb25JblNlY1xuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFZpZGVvVGFnRHVyYXRpb24oZHVyYXRpb25JblNlYykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHBsYXliYWNrVHlwZXMuc2V0VmlkZW9UYWdEdXJhdGlvbixcbiAgICBwYXlsb2FkOiB7XG4gICAgICBkdXJhdGlvbkluU2VjLFxuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRJbml0UFRTKGluaXRQVFMpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBwbGF5YmFja1R5cGVzLnNldEluaXRQVFMsXG4gICAgcGF5bG9hZDoge1xuICAgICAgaW5pdFBUUyxcbiAgICB9LFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0Q2FuUGxheShjYW5QbGF5KSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogcGxheWJhY2tUeXBlcy5zZXRDYW5QbGF5LFxuICAgIHBheWxvYWQ6IHtcbiAgICAgIGNhblBsYXksXG4gICAgfSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldENhcHRpb25Qb3NpdGlvbihjYXB0aW9uUG9zaXRpb24pIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBwbGF5YmFja1R5cGVzLnNldENhcHRpb25Qb3NpdGlvbixcbiAgICBwYXlsb2FkOiB7XG4gICAgICBjYXB0aW9uUG9zaXRpb24sXG4gICAgfSxcbiAgfTtcbn1cbiJdLCJuYW1lcyI6WyJwbGF5YmFja1R5cGVzIiwic2V0VmlkZW9UYWdEdXJhdGlvbiIsImR1cmF0aW9uSW5TZWMiLCJ0eXBlIiwicGF5bG9hZCIsInNldEluaXRQVFMiLCJpbml0UFRTIiwic2V0Q2FuUGxheSIsImNhblBsYXkiLCJzZXRDYXB0aW9uUG9zaXRpb24iLCJjYXB0aW9uUG9zaXRpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/store/actions/playback.js\n");

/***/ }),

/***/ "../js/cronus/store/actions/qos.js":
/*!*****************************************!*\
  !*** ../js/cronus/store/actions/qos.js ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"setQualities\": function() { return /* binding */ setQualities; },\n/* harmony export */   \"setQualityLoading\": function() { return /* binding */ setQualityLoading; },\n/* harmony export */   \"setSelectedQuality\": function() { return /* binding */ setSelectedQuality; }\n/* harmony export */ });\n/* harmony import */ var cronus_store_types_qos__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/store/types/qos */ \"../js/cronus/store/types/qos.js\");\n\nfunction setSelectedQuality(id) {\n  return {\n    type: cronus_store_types_qos__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setSelectedQuality,\n    payload: {\n      id: id\n    }\n  };\n}\nfunction setQualityLoading(loading) {\n  return {\n    type: cronus_store_types_qos__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setQualityLoading,\n    payload: {\n      loading: loading\n    }\n  };\n}\nfunction setQualities(qualities) {\n  return {\n    type: cronus_store_types_qos__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setQualities,\n    payload: {\n      qualities: qualities\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL2FjdGlvbnMvcW9zLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUVPLFNBQVNDLGtCQUFULENBQTRCQyxFQUE1QixFQUFnQztBQUNyQyxTQUFPO0FBQ0xDLElBQUFBLElBQUksRUFBRUgsaUZBREQ7QUFFTEksSUFBQUEsT0FBTyxFQUFFO0FBQ1BGLE1BQUFBLEVBQUUsRUFBRkE7QUFETztBQUZKLEdBQVA7QUFNRDtBQUVNLFNBQVNHLGlCQUFULENBQTJCQyxPQUEzQixFQUFvQztBQUN6QyxTQUFPO0FBQ0xILElBQUFBLElBQUksRUFBRUgsZ0ZBREQ7QUFFTEksSUFBQUEsT0FBTyxFQUFFO0FBQ1BFLE1BQUFBLE9BQU8sRUFBUEE7QUFETztBQUZKLEdBQVA7QUFNRDtBQUVNLFNBQVNDLFlBQVQsQ0FBc0JDLFNBQXRCLEVBQWlDO0FBQ3RDLFNBQU87QUFDTEwsSUFBQUEsSUFBSSxFQUFFSCwyRUFERDtBQUVMSSxJQUFBQSxPQUFPLEVBQUU7QUFDUEksTUFBQUEsU0FBUyxFQUFUQTtBQURPO0FBRkosR0FBUDtBQU1EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvc3RvcmUvYWN0aW9ucy9xb3MuanM/MjM0YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcW9zVHlwZXMgZnJvbSAnY3JvbnVzL3N0b3JlL3R5cGVzL3Fvcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRTZWxlY3RlZFF1YWxpdHkoaWQpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBxb3NUeXBlcy5zZXRTZWxlY3RlZFF1YWxpdHksXG4gICAgcGF5bG9hZDoge1xuICAgICAgaWQsXG4gICAgfSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFF1YWxpdHlMb2FkaW5nKGxvYWRpbmcpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBxb3NUeXBlcy5zZXRRdWFsaXR5TG9hZGluZyxcbiAgICBwYXlsb2FkOiB7XG4gICAgICBsb2FkaW5nLFxuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRRdWFsaXRpZXMocXVhbGl0aWVzKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogcW9zVHlwZXMuc2V0UXVhbGl0aWVzLFxuICAgIHBheWxvYWQ6IHtcbiAgICAgIHF1YWxpdGllcyxcbiAgICB9LFxuICB9O1xufVxuIl0sIm5hbWVzIjpbInFvc1R5cGVzIiwic2V0U2VsZWN0ZWRRdWFsaXR5IiwiaWQiLCJ0eXBlIiwicGF5bG9hZCIsInNldFF1YWxpdHlMb2FkaW5nIiwibG9hZGluZyIsInNldFF1YWxpdGllcyIsInF1YWxpdGllcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/store/actions/qos.js\n");

/***/ }),

/***/ "../js/cronus/store/actions/reset.js":
/*!*******************************************!*\
  !*** ../js/cronus/store/actions/reset.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RESET_TYPES\": function() { return /* binding */ RESET_TYPES; },\n/* harmony export */   \"reset\": function() { return /* binding */ reset; }\n/* harmony export */ });\n/* harmony import */ var cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/store/types/reset */ \"../js/cronus/store/types/reset.js\");\n\nvar RESET_TYPES = {\n  offAir: 'OFF_AIR',\n  mediaChange: 'MEDIA_CHANGE'\n};\nfunction reset() {\n  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : RESET_TYPES.mediaChange;\n\n  if (!Object.values(RESET_TYPES).includes(type)) {\n    throw new Error('Invalid reset type');\n  }\n\n  return {\n    type: cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_0__[\"default\"].reset,\n    payload: {\n      type: type\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL2FjdGlvbnMvcmVzZXQuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFFTyxJQUFNQyxXQUFXLEdBQUc7QUFDekJDLEVBQUFBLE1BQU0sRUFBRSxTQURpQjtBQUV6QkMsRUFBQUEsV0FBVyxFQUFFO0FBRlksQ0FBcEI7QUFLQSxTQUFTQyxLQUFULEdBQStDO0FBQUEsTUFBaENDLElBQWdDLHVFQUF6QkosV0FBVyxDQUFDRSxXQUFhOztBQUNwRCxNQUFJLENBQUNHLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjTixXQUFkLEVBQTJCTyxRQUEzQixDQUFvQ0gsSUFBcEMsQ0FBTCxFQUFnRDtBQUM5QyxVQUFNLElBQUlJLEtBQUosQ0FBVSxvQkFBVixDQUFOO0FBQ0Q7O0FBRUQsU0FBTztBQUNMSixJQUFBQSxJQUFJLEVBQUVMLHNFQUREO0FBRUxVLElBQUFBLE9BQU8sRUFBRTtBQUFFTCxNQUFBQSxJQUFJLEVBQUpBO0FBQUY7QUFGSixHQUFQO0FBSUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy9zdG9yZS9hY3Rpb25zL3Jlc2V0LmpzPzU2YjciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlc2V0VHlwZXMgZnJvbSAnY3JvbnVzL3N0b3JlL3R5cGVzL3Jlc2V0JztcblxuZXhwb3J0IGNvbnN0IFJFU0VUX1RZUEVTID0ge1xuICBvZmZBaXI6ICdPRkZfQUlSJyxcbiAgbWVkaWFDaGFuZ2U6ICdNRURJQV9DSEFOR0UnLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0KHR5cGUgPSBSRVNFVF9UWVBFUy5tZWRpYUNoYW5nZSkge1xuICBpZiAoIU9iamVjdC52YWx1ZXMoUkVTRVRfVFlQRVMpLmluY2x1ZGVzKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJlc2V0IHR5cGUnKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHlwZTogcmVzZXRUeXBlcy5yZXNldCxcbiAgICBwYXlsb2FkOiB7IHR5cGUgfSxcbiAgfTtcbn1cbiJdLCJuYW1lcyI6WyJyZXNldFR5cGVzIiwiUkVTRVRfVFlQRVMiLCJvZmZBaXIiLCJtZWRpYUNoYW5nZSIsInJlc2V0IiwidHlwZSIsIk9iamVjdCIsInZhbHVlcyIsImluY2x1ZGVzIiwiRXJyb3IiLCJwYXlsb2FkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/store/actions/reset.js\n");

/***/ }),

/***/ "../js/cronus/store/actions/tracking.js":
/*!**********************************************!*\
  !*** ../js/cronus/store/actions/tracking.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"setBufferingStartTime\": function() { return /* binding */ setBufferingStartTime; },\n/* harmony export */   \"setFirstFrameTime\": function() { return /* binding */ setFirstFrameTime; },\n/* harmony export */   \"setInitialLoadingTime\": function() { return /* binding */ setInitialLoadingTime; },\n/* harmony export */   \"setQualityChangeStartTime\": function() { return /* binding */ setQualityChangeStartTime; },\n/* harmony export */   \"setStreamModuleReceivedTime\": function() { return /* binding */ setStreamModuleReceivedTime; },\n/* harmony export */   \"setUmsConnectionConnectedTime\": function() { return /* binding */ setUmsConnectionConnectedTime; },\n/* harmony export */   \"setUmsConnectionStartTime\": function() { return /* binding */ setUmsConnectionStartTime; }\n/* harmony export */ });\n/* harmony import */ var cronus_store_types_tracking__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/store/types/tracking */ \"../js/cronus/store/types/tracking.js\");\n\n/**\n * @param {number} timestampInMs\n * @returns {object}\n */\n\nfunction setInitialLoadingTime(timestampInMs) {\n  return {\n    type: cronus_store_types_tracking__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setInitialLoadingTime,\n    payload: timestampInMs\n  };\n}\n/**\n * @param {number} timestampInMs\n * @returns {object}\n */\n\nfunction setUmsConnectionStartTime(timestampInMs) {\n  return {\n    type: cronus_store_types_tracking__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setUmsConnectionStartTime,\n    payload: timestampInMs\n  };\n}\n/**\n * @param {number} timestampInMs\n * @returns {object}\n */\n\nfunction setUmsConnectionConnectedTime(timestampInMs) {\n  return {\n    type: cronus_store_types_tracking__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setUmsConnectionConnectedTime,\n    payload: timestampInMs\n  };\n}\n/**\n * @param {number} timestampInMs\n * @returns {object}\n */\n\nfunction setStreamModuleReceivedTime(timestampInMs) {\n  return {\n    type: cronus_store_types_tracking__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setStreamModuleReceivedTime,\n    payload: timestampInMs\n  };\n}\n/**\n * @param {number} timestampInMs\n * @returns {object}\n */\n\nfunction setFirstFrameTime(timestampInMs) {\n  return {\n    type: cronus_store_types_tracking__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setFirstFrameTime,\n    payload: timestampInMs\n  };\n}\n/**\n * @param {number} timestampInMs\n * @returns {object}\n */\n\nfunction setBufferingStartTime(timestampInMs) {\n  return {\n    type: cronus_store_types_tracking__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setBufferingStartTime,\n    payload: timestampInMs\n  };\n}\n/**\n * @param {number} timestampInMs\n * @returns {object}\n */\n\nfunction setQualityChangeStartTime(timestampInMs) {\n  return {\n    type: cronus_store_types_tracking__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setQualityChangeStartTime,\n    payload: timestampInMs\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL2FjdGlvbnMvdHJhY2tpbmcuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUNPLFNBQVNDLHFCQUFULENBQStCQyxhQUEvQixFQUE4QztBQUNuRCxTQUFPO0FBQ0xDLElBQUFBLElBQUksRUFBRUgseUZBREQ7QUFFTEksSUFBQUEsT0FBTyxFQUFFRjtBQUZKLEdBQVA7QUFJRDtBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUNPLFNBQVNHLHlCQUFULENBQW1DSCxhQUFuQyxFQUFrRDtBQUN2RCxTQUFPO0FBQ0xDLElBQUFBLElBQUksRUFBRUgsNkZBREQ7QUFFTEksSUFBQUEsT0FBTyxFQUFFRjtBQUZKLEdBQVA7QUFJRDtBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUNPLFNBQVNJLDZCQUFULENBQXVDSixhQUF2QyxFQUFzRDtBQUMzRCxTQUFPO0FBQ0xDLElBQUFBLElBQUksRUFBRUgsaUdBREQ7QUFFTEksSUFBQUEsT0FBTyxFQUFFRjtBQUZKLEdBQVA7QUFJRDtBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUNPLFNBQVNLLDJCQUFULENBQXFDTCxhQUFyQyxFQUFvRDtBQUN6RCxTQUFPO0FBQ0xDLElBQUFBLElBQUksRUFBRUgsK0ZBREQ7QUFFTEksSUFBQUEsT0FBTyxFQUFFRjtBQUZKLEdBQVA7QUFJRDtBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUNPLFNBQVNNLGlCQUFULENBQTJCTixhQUEzQixFQUEwQztBQUMvQyxTQUFPO0FBQ0xDLElBQUFBLElBQUksRUFBRUgscUZBREQ7QUFFTEksSUFBQUEsT0FBTyxFQUFFRjtBQUZKLEdBQVA7QUFJRDtBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUNPLFNBQVNPLHFCQUFULENBQStCUCxhQUEvQixFQUE4QztBQUNuRCxTQUFPO0FBQ0xDLElBQUFBLElBQUksRUFBRUgseUZBREQ7QUFFTEksSUFBQUEsT0FBTyxFQUFFRjtBQUZKLEdBQVA7QUFJRDtBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUNPLFNBQVNRLHlCQUFULENBQW1DUixhQUFuQyxFQUFrRDtBQUN2RCxTQUFPO0FBQ0xDLElBQUFBLElBQUksRUFBRUgsNkZBREQ7QUFFTEksSUFBQUEsT0FBTyxFQUFFRjtBQUZKLEdBQVA7QUFJRCIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vanMvY3JvbnVzL3N0b3JlL2FjdGlvbnMvdHJhY2tpbmcuanM/ODM2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHJhY2tpbmdBY3Rpb25UeXBlcyBmcm9tICdjcm9udXMvc3RvcmUvdHlwZXMvdHJhY2tpbmcnO1xuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lc3RhbXBJbk1zXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0SW5pdGlhbExvYWRpbmdUaW1lKHRpbWVzdGFtcEluTXMpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0cmFja2luZ0FjdGlvblR5cGVzLnNldEluaXRpYWxMb2FkaW5nVGltZSxcbiAgICBwYXlsb2FkOiB0aW1lc3RhbXBJbk1zLFxuICB9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lc3RhbXBJbk1zXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0VW1zQ29ubmVjdGlvblN0YXJ0VGltZSh0aW1lc3RhbXBJbk1zKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdHJhY2tpbmdBY3Rpb25UeXBlcy5zZXRVbXNDb25uZWN0aW9uU3RhcnRUaW1lLFxuICAgIHBheWxvYWQ6IHRpbWVzdGFtcEluTXMsXG4gIH07XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVzdGFtcEluTXNcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRVbXNDb25uZWN0aW9uQ29ubmVjdGVkVGltZSh0aW1lc3RhbXBJbk1zKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdHJhY2tpbmdBY3Rpb25UeXBlcy5zZXRVbXNDb25uZWN0aW9uQ29ubmVjdGVkVGltZSxcbiAgICBwYXlsb2FkOiB0aW1lc3RhbXBJbk1zLFxuICB9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lc3RhbXBJbk1zXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0U3RyZWFtTW9kdWxlUmVjZWl2ZWRUaW1lKHRpbWVzdGFtcEluTXMpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0cmFja2luZ0FjdGlvblR5cGVzLnNldFN0cmVhbU1vZHVsZVJlY2VpdmVkVGltZSxcbiAgICBwYXlsb2FkOiB0aW1lc3RhbXBJbk1zLFxuICB9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lc3RhbXBJbk1zXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0Rmlyc3RGcmFtZVRpbWUodGltZXN0YW1wSW5Ncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHRyYWNraW5nQWN0aW9uVHlwZXMuc2V0Rmlyc3RGcmFtZVRpbWUsXG4gICAgcGF5bG9hZDogdGltZXN0YW1wSW5NcyxcbiAgfTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZXN0YW1wSW5Nc1xuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEJ1ZmZlcmluZ1N0YXJ0VGltZSh0aW1lc3RhbXBJbk1zKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdHJhY2tpbmdBY3Rpb25UeXBlcy5zZXRCdWZmZXJpbmdTdGFydFRpbWUsXG4gICAgcGF5bG9hZDogdGltZXN0YW1wSW5NcyxcbiAgfTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZXN0YW1wSW5Nc1xuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFF1YWxpdHlDaGFuZ2VTdGFydFRpbWUodGltZXN0YW1wSW5Ncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHRyYWNraW5nQWN0aW9uVHlwZXMuc2V0UXVhbGl0eUNoYW5nZVN0YXJ0VGltZSxcbiAgICBwYXlsb2FkOiB0aW1lc3RhbXBJbk1zLFxuICB9O1xufVxuIl0sIm5hbWVzIjpbInRyYWNraW5nQWN0aW9uVHlwZXMiLCJzZXRJbml0aWFsTG9hZGluZ1RpbWUiLCJ0aW1lc3RhbXBJbk1zIiwidHlwZSIsInBheWxvYWQiLCJzZXRVbXNDb25uZWN0aW9uU3RhcnRUaW1lIiwic2V0VW1zQ29ubmVjdGlvbkNvbm5lY3RlZFRpbWUiLCJzZXRTdHJlYW1Nb2R1bGVSZWNlaXZlZFRpbWUiLCJzZXRGaXJzdEZyYW1lVGltZSIsInNldEJ1ZmZlcmluZ1N0YXJ0VGltZSIsInNldFF1YWxpdHlDaGFuZ2VTdGFydFRpbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/store/actions/tracking.js\n");

/***/ }),

/***/ "../js/cronus/store/actions/umsModules.js":
/*!************************************************!*\
  !*** ../js/cronus/store/actions/umsModules.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"setAllTimeTotalModule\": function() { return /* binding */ setAllTimeTotalModule; },\n/* harmony export */   \"setAllViewersModule\": function() { return /* binding */ setAllViewersModule; },\n/* harmony export */   \"setBroadcasterModule\": function() { return /* binding */ setBroadcasterModule; },\n/* harmony export */   \"setCaptionSearchModule\": function() { return /* binding */ setCaptionSearchModule; },\n/* harmony export */   \"setLiveCTAModule\": function() { return /* binding */ setLiveCTAModule; },\n/* harmony export */   \"setLogoModule\": function() { return /* binding */ setLogoModule; },\n/* harmony export */   \"setMetaModule\": function() { return /* binding */ setMetaModule; },\n/* harmony export */   \"setPollModule\": function() { return /* binding */ setPollModule; },\n/* harmony export */   \"setShareModule\": function() { return /* binding */ setShareModule; },\n/* harmony export */   \"setSlidesModule\": function() { return /* binding */ setSlidesModule; },\n/* harmony export */   \"setStreamModule\": function() { return /* binding */ setStreamModule; },\n/* harmony export */   \"setThumbnailModule\": function() { return /* binding */ setThumbnailModule; },\n/* harmony export */   \"setViewersModule\": function() { return /* binding */ setViewersModule; }\n/* harmony export */ });\n/* harmony import */ var cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/store/types/umsModules */ \"../js/cronus/store/types/umsModules.js\");\n\nfunction setStreamModule(mediaId, module) {\n  return {\n    type: cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setStreamModule,\n    payload: {\n      mediaId: mediaId,\n      module: module\n    }\n  };\n}\nfunction setMetaModule(mediaId, module) {\n  return {\n    type: cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setMetaModule,\n    payload: {\n      mediaId: mediaId,\n      module: module\n    }\n  };\n}\nfunction setAllTimeTotalModule(mediaId, module) {\n  return {\n    type: cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setAllTimeTotalModule,\n    payload: {\n      mediaId: mediaId,\n      module: module\n    }\n  };\n}\nfunction setAllViewersModule(mediaId, module) {\n  return {\n    type: cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setAllViewersModule,\n    payload: {\n      mediaId: mediaId,\n      module: module\n    }\n  };\n}\nfunction setViewersModule(mediaId, module) {\n  return {\n    type: cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setViewersModule,\n    payload: {\n      mediaId: mediaId,\n      module: module\n    }\n  };\n}\nfunction setLogoModule(mediaId, module) {\n  return {\n    type: cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setLogoModule,\n    payload: {\n      mediaId: mediaId,\n      module: module\n    }\n  };\n}\nfunction setShareModule(mediaId, module) {\n  return {\n    type: cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setShareModule,\n    payload: {\n      mediaId: mediaId,\n      module: module\n    }\n  };\n}\nfunction setBroadcasterModule(mediaId, module) {\n  return {\n    type: cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setBroadcasterModule,\n    payload: {\n      mediaId: mediaId,\n      module: module\n    }\n  };\n}\nfunction setLiveCTAModule(mediaId, module) {\n  return {\n    type: cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setLiveCTAModule,\n    payload: {\n      mediaId: mediaId,\n      module: module\n    }\n  };\n}\nfunction setThumbnailModule(mediaId, module) {\n  return {\n    type: cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setThumbnailModule,\n    payload: {\n      mediaId: mediaId,\n      module: module\n    }\n  };\n}\nfunction setPollModule(mediaId, module) {\n  return {\n    type: cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setPollModule,\n    payload: {\n      mediaId: mediaId,\n      module: module\n    }\n  };\n}\nfunction setCaptionSearchModule(mediaId, module) {\n  return {\n    type: cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setCaptionSearchModule,\n    payload: {\n      mediaId: mediaId,\n      module: module\n    }\n  };\n}\nfunction setSlidesModule(mediaId, module) {\n  return {\n    type: cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setSlidesModule,\n    payload: {\n      mediaId: mediaId,\n      module: module\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL2FjdGlvbnMvdW1zTW9kdWxlcy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBRU8sU0FBU0MsZUFBVCxDQUF5QkMsT0FBekIsRUFBa0NDLE1BQWxDLEVBQTBDO0FBQy9DLFNBQU87QUFDTEMsSUFBQUEsSUFBSSxFQUFFSixxRkFERDtBQUVMSyxJQUFBQSxPQUFPLEVBQUU7QUFBRUgsTUFBQUEsT0FBTyxFQUFQQSxPQUFGO0FBQVdDLE1BQUFBLE1BQU0sRUFBTkE7QUFBWDtBQUZKLEdBQVA7QUFJRDtBQUVNLFNBQVNHLGFBQVQsQ0FBdUJKLE9BQXZCLEVBQWdDQyxNQUFoQyxFQUF3QztBQUM3QyxTQUFPO0FBQ0xDLElBQUFBLElBQUksRUFBRUosbUZBREQ7QUFFTEssSUFBQUEsT0FBTyxFQUFFO0FBQUVILE1BQUFBLE9BQU8sRUFBUEEsT0FBRjtBQUFXQyxNQUFBQSxNQUFNLEVBQU5BO0FBQVg7QUFGSixHQUFQO0FBSUQ7QUFFTSxTQUFTSSxxQkFBVCxDQUErQkwsT0FBL0IsRUFBd0NDLE1BQXhDLEVBQWdEO0FBQ3JELFNBQU87QUFDTEMsSUFBQUEsSUFBSSxFQUFFSiwyRkFERDtBQUVMSyxJQUFBQSxPQUFPLEVBQUU7QUFBRUgsTUFBQUEsT0FBTyxFQUFQQSxPQUFGO0FBQVdDLE1BQUFBLE1BQU0sRUFBTkE7QUFBWDtBQUZKLEdBQVA7QUFJRDtBQUVNLFNBQVNLLG1CQUFULENBQTZCTixPQUE3QixFQUFzQ0MsTUFBdEMsRUFBOEM7QUFDbkQsU0FBTztBQUNMQyxJQUFBQSxJQUFJLEVBQUVKLHlGQUREO0FBRUxLLElBQUFBLE9BQU8sRUFBRTtBQUFFSCxNQUFBQSxPQUFPLEVBQVBBLE9BQUY7QUFBV0MsTUFBQUEsTUFBTSxFQUFOQTtBQUFYO0FBRkosR0FBUDtBQUlEO0FBRU0sU0FBU00sZ0JBQVQsQ0FBMEJQLE9BQTFCLEVBQW1DQyxNQUFuQyxFQUEyQztBQUNoRCxTQUFPO0FBQ0xDLElBQUFBLElBQUksRUFBRUosc0ZBREQ7QUFFTEssSUFBQUEsT0FBTyxFQUFFO0FBQUVILE1BQUFBLE9BQU8sRUFBUEEsT0FBRjtBQUFXQyxNQUFBQSxNQUFNLEVBQU5BO0FBQVg7QUFGSixHQUFQO0FBSUQ7QUFFTSxTQUFTTyxhQUFULENBQXVCUixPQUF2QixFQUFnQ0MsTUFBaEMsRUFBd0M7QUFDN0MsU0FBTztBQUNMQyxJQUFBQSxJQUFJLEVBQUVKLG1GQUREO0FBRUxLLElBQUFBLE9BQU8sRUFBRTtBQUFFSCxNQUFBQSxPQUFPLEVBQVBBLE9BQUY7QUFBV0MsTUFBQUEsTUFBTSxFQUFOQTtBQUFYO0FBRkosR0FBUDtBQUlEO0FBRU0sU0FBU1EsY0FBVCxDQUF3QlQsT0FBeEIsRUFBaUNDLE1BQWpDLEVBQXlDO0FBQzlDLFNBQU87QUFDTEMsSUFBQUEsSUFBSSxFQUFFSixvRkFERDtBQUVMSyxJQUFBQSxPQUFPLEVBQUU7QUFBRUgsTUFBQUEsT0FBTyxFQUFQQSxPQUFGO0FBQVdDLE1BQUFBLE1BQU0sRUFBTkE7QUFBWDtBQUZKLEdBQVA7QUFJRDtBQUVNLFNBQVNTLG9CQUFULENBQThCVixPQUE5QixFQUF1Q0MsTUFBdkMsRUFBK0M7QUFDcEQsU0FBTztBQUNMQyxJQUFBQSxJQUFJLEVBQUVKLDBGQUREO0FBRUxLLElBQUFBLE9BQU8sRUFBRTtBQUFFSCxNQUFBQSxPQUFPLEVBQVBBLE9BQUY7QUFBV0MsTUFBQUEsTUFBTSxFQUFOQTtBQUFYO0FBRkosR0FBUDtBQUlEO0FBRU0sU0FBU1UsZ0JBQVQsQ0FBMEJYLE9BQTFCLEVBQW1DQyxNQUFuQyxFQUEyQztBQUNoRCxTQUFPO0FBQ0xDLElBQUFBLElBQUksRUFBRUosc0ZBREQ7QUFFTEssSUFBQUEsT0FBTyxFQUFFO0FBQUVILE1BQUFBLE9BQU8sRUFBUEEsT0FBRjtBQUFXQyxNQUFBQSxNQUFNLEVBQU5BO0FBQVg7QUFGSixHQUFQO0FBSUQ7QUFFTSxTQUFTVyxrQkFBVCxDQUE0QlosT0FBNUIsRUFBcUNDLE1BQXJDLEVBQTZDO0FBQ2xELFNBQU87QUFDTEMsSUFBQUEsSUFBSSxFQUFFSix3RkFERDtBQUVMSyxJQUFBQSxPQUFPLEVBQUU7QUFBRUgsTUFBQUEsT0FBTyxFQUFQQSxPQUFGO0FBQVdDLE1BQUFBLE1BQU0sRUFBTkE7QUFBWDtBQUZKLEdBQVA7QUFJRDtBQUVNLFNBQVNZLGFBQVQsQ0FBdUJiLE9BQXZCLEVBQWdDQyxNQUFoQyxFQUF3QztBQUM3QyxTQUFPO0FBQ0xDLElBQUFBLElBQUksRUFBRUosbUZBREQ7QUFFTEssSUFBQUEsT0FBTyxFQUFFO0FBQUVILE1BQUFBLE9BQU8sRUFBUEEsT0FBRjtBQUFXQyxNQUFBQSxNQUFNLEVBQU5BO0FBQVg7QUFGSixHQUFQO0FBSUQ7QUFFTSxTQUFTYSxzQkFBVCxDQUFnQ2QsT0FBaEMsRUFBeUNDLE1BQXpDLEVBQWlEO0FBQ3RELFNBQU87QUFDTEMsSUFBQUEsSUFBSSxFQUFFSiw0RkFERDtBQUVMSyxJQUFBQSxPQUFPLEVBQUU7QUFBRUgsTUFBQUEsT0FBTyxFQUFQQSxPQUFGO0FBQVdDLE1BQUFBLE1BQU0sRUFBTkE7QUFBWDtBQUZKLEdBQVA7QUFJRDtBQUVNLFNBQVNjLGVBQVQsQ0FBeUJmLE9BQXpCLEVBQWtDQyxNQUFsQyxFQUEwQztBQUMvQyxTQUFPO0FBQ0xDLElBQUFBLElBQUksRUFBRUoscUZBREQ7QUFFTEssSUFBQUEsT0FBTyxFQUFFO0FBQUVILE1BQUFBLE9BQU8sRUFBUEEsT0FBRjtBQUFXQyxNQUFBQSxNQUFNLEVBQU5BO0FBQVg7QUFGSixHQUFQO0FBSUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy9zdG9yZS9hY3Rpb25zL3Vtc01vZHVsZXMuanM/ZjdlYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdW1zTW9kdWxlc0FjdGlvblR5cGVzIGZyb20gJ2Nyb251cy9zdG9yZS90eXBlcy91bXNNb2R1bGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHNldFN0cmVhbU1vZHVsZShtZWRpYUlkLCBtb2R1bGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB1bXNNb2R1bGVzQWN0aW9uVHlwZXMuc2V0U3RyZWFtTW9kdWxlLFxuICAgIHBheWxvYWQ6IHsgbWVkaWFJZCwgbW9kdWxlIH0sXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRNZXRhTW9kdWxlKG1lZGlhSWQsIG1vZHVsZSkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHVtc01vZHVsZXNBY3Rpb25UeXBlcy5zZXRNZXRhTW9kdWxlLFxuICAgIHBheWxvYWQ6IHsgbWVkaWFJZCwgbW9kdWxlIH0sXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRBbGxUaW1lVG90YWxNb2R1bGUobWVkaWFJZCwgbW9kdWxlKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdW1zTW9kdWxlc0FjdGlvblR5cGVzLnNldEFsbFRpbWVUb3RhbE1vZHVsZSxcbiAgICBwYXlsb2FkOiB7IG1lZGlhSWQsIG1vZHVsZSB9LFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0QWxsVmlld2Vyc01vZHVsZShtZWRpYUlkLCBtb2R1bGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB1bXNNb2R1bGVzQWN0aW9uVHlwZXMuc2V0QWxsVmlld2Vyc01vZHVsZSxcbiAgICBwYXlsb2FkOiB7IG1lZGlhSWQsIG1vZHVsZSB9LFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0Vmlld2Vyc01vZHVsZShtZWRpYUlkLCBtb2R1bGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB1bXNNb2R1bGVzQWN0aW9uVHlwZXMuc2V0Vmlld2Vyc01vZHVsZSxcbiAgICBwYXlsb2FkOiB7IG1lZGlhSWQsIG1vZHVsZSB9LFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0TG9nb01vZHVsZShtZWRpYUlkLCBtb2R1bGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB1bXNNb2R1bGVzQWN0aW9uVHlwZXMuc2V0TG9nb01vZHVsZSxcbiAgICBwYXlsb2FkOiB7IG1lZGlhSWQsIG1vZHVsZSB9LFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0U2hhcmVNb2R1bGUobWVkaWFJZCwgbW9kdWxlKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdW1zTW9kdWxlc0FjdGlvblR5cGVzLnNldFNoYXJlTW9kdWxlLFxuICAgIHBheWxvYWQ6IHsgbWVkaWFJZCwgbW9kdWxlIH0sXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRCcm9hZGNhc3Rlck1vZHVsZShtZWRpYUlkLCBtb2R1bGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB1bXNNb2R1bGVzQWN0aW9uVHlwZXMuc2V0QnJvYWRjYXN0ZXJNb2R1bGUsXG4gICAgcGF5bG9hZDogeyBtZWRpYUlkLCBtb2R1bGUgfSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldExpdmVDVEFNb2R1bGUobWVkaWFJZCwgbW9kdWxlKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdW1zTW9kdWxlc0FjdGlvblR5cGVzLnNldExpdmVDVEFNb2R1bGUsXG4gICAgcGF5bG9hZDogeyBtZWRpYUlkLCBtb2R1bGUgfSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFRodW1ibmFpbE1vZHVsZShtZWRpYUlkLCBtb2R1bGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB1bXNNb2R1bGVzQWN0aW9uVHlwZXMuc2V0VGh1bWJuYWlsTW9kdWxlLFxuICAgIHBheWxvYWQ6IHsgbWVkaWFJZCwgbW9kdWxlIH0sXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRQb2xsTW9kdWxlKG1lZGlhSWQsIG1vZHVsZSkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHVtc01vZHVsZXNBY3Rpb25UeXBlcy5zZXRQb2xsTW9kdWxlLFxuICAgIHBheWxvYWQ6IHsgbWVkaWFJZCwgbW9kdWxlIH0sXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRDYXB0aW9uU2VhcmNoTW9kdWxlKG1lZGlhSWQsIG1vZHVsZSkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHVtc01vZHVsZXNBY3Rpb25UeXBlcy5zZXRDYXB0aW9uU2VhcmNoTW9kdWxlLFxuICAgIHBheWxvYWQ6IHsgbWVkaWFJZCwgbW9kdWxlIH0sXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRTbGlkZXNNb2R1bGUobWVkaWFJZCwgbW9kdWxlKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdW1zTW9kdWxlc0FjdGlvblR5cGVzLnNldFNsaWRlc01vZHVsZSxcbiAgICBwYXlsb2FkOiB7IG1lZGlhSWQsIG1vZHVsZSB9LFxuICB9O1xufVxuIl0sIm5hbWVzIjpbInVtc01vZHVsZXNBY3Rpb25UeXBlcyIsInNldFN0cmVhbU1vZHVsZSIsIm1lZGlhSWQiLCJtb2R1bGUiLCJ0eXBlIiwicGF5bG9hZCIsInNldE1ldGFNb2R1bGUiLCJzZXRBbGxUaW1lVG90YWxNb2R1bGUiLCJzZXRBbGxWaWV3ZXJzTW9kdWxlIiwic2V0Vmlld2Vyc01vZHVsZSIsInNldExvZ29Nb2R1bGUiLCJzZXRTaGFyZU1vZHVsZSIsInNldEJyb2FkY2FzdGVyTW9kdWxlIiwic2V0TGl2ZUNUQU1vZHVsZSIsInNldFRodW1ibmFpbE1vZHVsZSIsInNldFBvbGxNb2R1bGUiLCJzZXRDYXB0aW9uU2VhcmNoTW9kdWxlIiwic2V0U2xpZGVzTW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/store/actions/umsModules.js\n");

/***/ }),

/***/ "../js/cronus/store/index.js":
/*!***********************************!*\
  !*** ../js/cronus/store/index.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"wrappedStore\": function() { return /* binding */ wrappedStore; }\n/* harmony export */ });\n/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! redux */ \"../node_modules/redux/es/redux.js\");\n/* harmony import */ var _redux_devtools_extension__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @redux-devtools/extension */ \"../node_modules/@redux-devtools/extension/lib/esm/developmentOnly.js\");\n/* harmony import */ var redux_persist__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redux-persist */ \"../node_modules/redux-persist/es/index.js\");\n/* harmony import */ var ustream_redux__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ustream-redux */ \"../node_modules/ustream-redux/dist/ustream-redux.js\");\n/* harmony import */ var ustream_redux__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(ustream_redux__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var cronus_store_reducers_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/store/reducers/index */ \"../js/cronus/store/reducers/index.js\");\n/* harmony import */ var cronus_store_middlewares_audioAPI__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/store/middlewares/audioAPI */ \"../js/cronus/store/middlewares/audioAPI.js\");\n/* harmony import */ var cronus_store_middlewares_tracksTransform__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! cronus/store/middlewares/tracksTransform */ \"../js/cronus/store/middlewares/tracksTransform.js\");\n/* harmony import */ var cronus_store_middlewares_closedCaptionStorage__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cronus/store/middlewares/closedCaptionStorage */ \"../js/cronus/store/middlewares/closedCaptionStorage.js\");\n/* harmony import */ var cronus_store_middlewares_closedCaptionReport__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! cronus/store/middlewares/closedCaptionReport */ \"../js/cronus/store/middlewares/closedCaptionReport.js\");\n/* harmony import */ var cronus_store_middlewares_closedCaptionAPI__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! cronus/store/middlewares/closedCaptionAPI */ \"../js/cronus/store/middlewares/closedCaptionAPI.js\");\n/* harmony import */ var cronus_store_middlewares_content__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! cronus/store/middlewares/content */ \"../js/cronus/store/middlewares/content.js\");\n/* harmony import */ var cronus_store_middlewares_delaySmallUpdates__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! cronus/store/middlewares/delaySmallUpdates */ \"../js/cronus/store/middlewares/delaySmallUpdates.js\");\n/* harmony import */ var shared_store_types_playback__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! shared/store/types/playback */ \"../js/shared/store/types/playback.js\");\n/* harmony import */ var cronus_store_middlewares_hash__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! cronus/store/middlewares/hash */ \"../js/cronus/store/middlewares/hash.js\");\n/* harmony import */ var shared_store_middlewares_player__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! shared/store/middlewares/player */ \"../js/shared/store/middlewares/player.js\");\n/* harmony import */ var cronus_store_middlewares_settings__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! cronus/store/middlewares/settings */ \"../js/cronus/store/middlewares/settings.js\");\n/* harmony import */ var cronus_store_middlewares_playback__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! cronus/store/middlewares/playback */ \"../js/cronus/store/middlewares/playback.js\");\n/* harmony import */ var cronus_store_middlewares_shareModuleTransform__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! cronus/store/middlewares/shareModuleTransform */ \"../js/cronus/store/middlewares/shareModuleTransform.js\");\n/* harmony import */ var cronus_store_middlewares_ignoreOffAirRelatedModules__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! cronus/store/middlewares/ignoreOffAirRelatedModules */ \"../js/cronus/store/middlewares/ignoreOffAirRelatedModules.js\");\n/* harmony import */ var cronus_store_middlewares_player__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! cronus/store/middlewares/player */ \"../js/cronus/store/middlewares/player.js\");\n/* harmony import */ var shared_store_types_qos__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! shared/store/types/qos */ \"../js/shared/store/types/qos.js\");\n/* harmony import */ var cronus_consts__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! cronus/consts */ \"../js/cronus/consts.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar store = (0,redux__WEBPACK_IMPORTED_MODULE_20__.createStore)(cronus_store_reducers_index__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {}, (0,_redux_devtools_extension__WEBPACK_IMPORTED_MODULE_21__.composeWithDevTools)((0,redux__WEBPACK_IMPORTED_MODULE_20__.applyMiddleware)(cronus_store_middlewares_ignoreOffAirRelatedModules__WEBPACK_IMPORTED_MODULE_16__[\"default\"], cronus_store_middlewares_tracksTransform__WEBPACK_IMPORTED_MODULE_4__[\"default\"], cronus_store_middlewares_audioAPI__WEBPACK_IMPORTED_MODULE_3__[\"default\"], cronus_store_middlewares_closedCaptionAPI__WEBPACK_IMPORTED_MODULE_7__[\"default\"], cronus_store_middlewares_closedCaptionStorage__WEBPACK_IMPORTED_MODULE_5__[\"default\"], cronus_store_middlewares_closedCaptionReport__WEBPACK_IMPORTED_MODULE_6__[\"default\"], cronus_store_middlewares_content__WEBPACK_IMPORTED_MODULE_8__[\"default\"], cronus_store_middlewares_hash__WEBPACK_IMPORTED_MODULE_11__[\"default\"], shared_store_middlewares_player__WEBPACK_IMPORTED_MODULE_12__[\"default\"], cronus_store_middlewares_playback__WEBPACK_IMPORTED_MODULE_14__[\"default\"], cronus_store_middlewares_settings__WEBPACK_IMPORTED_MODULE_13__[\"default\"], cronus_store_middlewares_shareModuleTransform__WEBPACK_IMPORTED_MODULE_15__[\"default\"], cronus_store_middlewares_player__WEBPACK_IMPORTED_MODULE_17__[\"default\"], (0,cronus_store_middlewares_delaySmallUpdates__WEBPACK_IMPORTED_MODULE_9__[\"default\"])({\n  type: shared_store_types_playback__WEBPACK_IMPORTED_MODULE_10__[\"default\"].setPlaybackStats,\n  getValueFromPayload: function getValueFromPayload(payload) {\n    return payload.currentTime;\n  },\n  getValueFromState: function getValueFromState(state) {\n    return state.playback.statsLastUpdatedAt;\n  },\n  threshold: cronus_consts__WEBPACK_IMPORTED_MODULE_19__.STATS_UPDATE_THRESHOLD,\n  delay: 1000\n}), (0,cronus_store_middlewares_delaySmallUpdates__WEBPACK_IMPORTED_MODULE_9__[\"default\"])({\n  type: shared_store_types_qos__WEBPACK_IMPORTED_MODULE_18__[\"default\"].setStatsData,\n  getValueFromPayload: function getValueFromPayload(payload) {\n    return payload.currentTime;\n  },\n  getValueFromState: function getValueFromState(state) {\n    return state.qos.statsLastUpdatedAt;\n  },\n  threshold: 2 * cronus_consts__WEBPACK_IMPORTED_MODULE_19__.STATS_UPDATE_THRESHOLD,\n  delay: 2000\n}))));\n(0,redux_persist__WEBPACK_IMPORTED_MODULE_0__.persistStore)(store);\nvar wrappedStore = ustream_redux__WEBPACK_IMPORTED_MODULE_1___default()(store);\n/* harmony default export */ __webpack_exports__[\"default\"] = (store);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsSUFBTXdCLEtBQUssR0FBR3hCLG1EQUFXLENBQ3ZCSyxtRUFEdUIsRUFFdkIsRUFGdUIsRUFHdkJILCtFQUFrQyxDQUNoQ0QsdURBQWUsQ0FDYmtCLDRGQURhLEVBRWJaLGdGQUZhLEVBR2JELHlFQUhhLEVBSWJJLGlGQUphLEVBS2JGLHFGQUxhLEVBTWJDLG9GQU5hLEVBT2JFLHdFQVBhLEVBUWJHLHNFQVJhLEVBU2JDLHdFQVRhLEVBVWJFLDBFQVZhLEVBV2JELDBFQVhhLEVBWWJFLHNGQVphLEVBYWJFLHdFQWJhLEVBY2JSLHNGQUFpQixDQUFDO0FBQ2hCYSxFQUFBQSxJQUFJLEVBQUVaLHFGQURVO0FBRWhCYyxFQUFBQSxtQkFGZ0IsK0JBRUlDLE9BRkosRUFFYTtBQUMzQixXQUFPQSxPQUFPLENBQUNDLFdBQWY7QUFDRCxHQUplO0FBS2hCQyxFQUFBQSxpQkFMZ0IsNkJBS0VDLEtBTEYsRUFLUztBQUN2QixXQUFPQSxLQUFLLENBQUNDLFFBQU4sQ0FBZUMsa0JBQXRCO0FBQ0QsR0FQZTtBQVFoQkMsRUFBQUEsU0FBUyxFQUFFWCxrRUFSSztBQVNoQlksRUFBQUEsS0FBSyxFQUFFO0FBVFMsQ0FBRCxDQWRKLEVBeUJidkIsc0ZBQWlCLENBQUM7QUFDaEJhLEVBQUFBLElBQUksRUFBRUosNEVBRFU7QUFFaEJNLEVBQUFBLG1CQUZnQiwrQkFFSUMsT0FGSixFQUVhO0FBQzNCLFdBQU9BLE9BQU8sQ0FBQ0MsV0FBZjtBQUNELEdBSmU7QUFLaEJDLEVBQUFBLGlCQUxnQiw2QkFLRUMsS0FMRixFQUtTO0FBQ3ZCLFdBQU9BLEtBQUssQ0FBQ00sR0FBTixDQUFVSixrQkFBakI7QUFDRCxHQVBlO0FBUWhCQyxFQUFBQSxTQUFTLEVBQUUsSUFBSVgsa0VBUkM7QUFTaEJZLEVBQUFBLEtBQUssRUFBRTtBQVRTLENBQUQsQ0F6QkosQ0FEaUIsQ0FIWCxDQUF6QjtBQTRDQWhDLDJEQUFZLENBQUNxQixLQUFELENBQVo7QUFFTyxJQUFNYyxZQUFZLEdBQUdsQyxvREFBSyxDQUFDb0IsS0FBRCxDQUExQjtBQUNQLCtEQUFlQSxLQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvc3RvcmUvaW5kZXguanM/NTg5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVTdG9yZSwgYXBwbHlNaWRkbGV3YXJlIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgY29tcG9zZVdpdGhEZXZUb29sc0RldmVsb3BtZW50T25seSB9IGZyb20gJ0ByZWR1eC1kZXZ0b29scy9leHRlbnNpb24nO1xuaW1wb3J0IHsgcGVyc2lzdFN0b3JlIH0gZnJvbSAncmVkdXgtcGVyc2lzdCc7XG5pbXBvcnQgd2F0Y2ggZnJvbSAndXN0cmVhbS1yZWR1eCc7XG5pbXBvcnQgcmVkdWNlcnMgZnJvbSAnY3JvbnVzL3N0b3JlL3JlZHVjZXJzL2luZGV4JztcbmltcG9ydCBhdWRpb0FQSSBmcm9tICdjcm9udXMvc3RvcmUvbWlkZGxld2FyZXMvYXVkaW9BUEknO1xuaW1wb3J0IHRyYWNrc1RyYW5zZm9ybSBmcm9tICdjcm9udXMvc3RvcmUvbWlkZGxld2FyZXMvdHJhY2tzVHJhbnNmb3JtJztcbmltcG9ydCBjbG9zZWRDYXB0aW9uU3RvcmFnZSBmcm9tICdjcm9udXMvc3RvcmUvbWlkZGxld2FyZXMvY2xvc2VkQ2FwdGlvblN0b3JhZ2UnO1xuaW1wb3J0IGNsb3NlZENhcHRpb25SZXBvcnQgZnJvbSAnY3JvbnVzL3N0b3JlL21pZGRsZXdhcmVzL2Nsb3NlZENhcHRpb25SZXBvcnQnO1xuaW1wb3J0IGNsb3NlZENhcHRpb25BUEkgZnJvbSAnY3JvbnVzL3N0b3JlL21pZGRsZXdhcmVzL2Nsb3NlZENhcHRpb25BUEknO1xuaW1wb3J0IGNvbnRlbnQgZnJvbSAnY3JvbnVzL3N0b3JlL21pZGRsZXdhcmVzL2NvbnRlbnQnO1xuaW1wb3J0IGRlbGF5U21hbGxVcGRhdGVzIGZyb20gJ2Nyb251cy9zdG9yZS9taWRkbGV3YXJlcy9kZWxheVNtYWxsVXBkYXRlcyc7XG5pbXBvcnQgcGxheWJhY2tBY3Rpb25UeXBlcyBmcm9tICdzaGFyZWQvc3RvcmUvdHlwZXMvcGxheWJhY2snO1xuaW1wb3J0IGhhc2hNaWRkbGV3YXJlIGZyb20gJ2Nyb251cy9zdG9yZS9taWRkbGV3YXJlcy9oYXNoJztcbmltcG9ydCBwbGF5ZXJNaWRkbGV3YXJlIGZyb20gJ3NoYXJlZC9zdG9yZS9taWRkbGV3YXJlcy9wbGF5ZXInO1xuaW1wb3J0IHNldHRpbmdzIGZyb20gJ2Nyb251cy9zdG9yZS9taWRkbGV3YXJlcy9zZXR0aW5ncyc7XG5pbXBvcnQgcGxheWJhY2tNaWRkbGV3YXJlIGZyb20gJ2Nyb251cy9zdG9yZS9taWRkbGV3YXJlcy9wbGF5YmFjayc7XG5pbXBvcnQgc2hhcmVNb2R1bGVUcmFuc2Zvcm0gZnJvbSAnY3JvbnVzL3N0b3JlL21pZGRsZXdhcmVzL3NoYXJlTW9kdWxlVHJhbnNmb3JtJztcbmltcG9ydCBpZ25vcmVPZmZBaXJSZWxhdGVkTW9kdWxlcyBmcm9tICdjcm9udXMvc3RvcmUvbWlkZGxld2FyZXMvaWdub3JlT2ZmQWlyUmVsYXRlZE1vZHVsZXMnO1xuaW1wb3J0IHBsYXllciBmcm9tICdjcm9udXMvc3RvcmUvbWlkZGxld2FyZXMvcGxheWVyJztcbmltcG9ydCBxb3NBY3Rpb25UeXBlcyBmcm9tICdzaGFyZWQvc3RvcmUvdHlwZXMvcW9zJztcbmltcG9ydCB7IFRJTUVVUERBVEVfVEhSRVNIT0xELCBTVEFUU19VUERBVEVfVEhSRVNIT0xEIH0gZnJvbSAnY3JvbnVzL2NvbnN0cyc7XG5cbmNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUoXG4gIHJlZHVjZXJzLFxuICB7fSxcbiAgY29tcG9zZVdpdGhEZXZUb29sc0RldmVsb3BtZW50T25seShcbiAgICBhcHBseU1pZGRsZXdhcmUoXG4gICAgICBpZ25vcmVPZmZBaXJSZWxhdGVkTW9kdWxlcyxcbiAgICAgIHRyYWNrc1RyYW5zZm9ybSxcbiAgICAgIGF1ZGlvQVBJLFxuICAgICAgY2xvc2VkQ2FwdGlvbkFQSSxcbiAgICAgIGNsb3NlZENhcHRpb25TdG9yYWdlLFxuICAgICAgY2xvc2VkQ2FwdGlvblJlcG9ydCxcbiAgICAgIGNvbnRlbnQsXG4gICAgICBoYXNoTWlkZGxld2FyZSxcbiAgICAgIHBsYXllck1pZGRsZXdhcmUsXG4gICAgICBwbGF5YmFja01pZGRsZXdhcmUsXG4gICAgICBzZXR0aW5ncyxcbiAgICAgIHNoYXJlTW9kdWxlVHJhbnNmb3JtLFxuICAgICAgcGxheWVyLFxuICAgICAgZGVsYXlTbWFsbFVwZGF0ZXMoe1xuICAgICAgICB0eXBlOiBwbGF5YmFja0FjdGlvblR5cGVzLnNldFBsYXliYWNrU3RhdHMsXG4gICAgICAgIGdldFZhbHVlRnJvbVBheWxvYWQocGF5bG9hZCkge1xuICAgICAgICAgIHJldHVybiBwYXlsb2FkLmN1cnJlbnRUaW1lO1xuICAgICAgICB9LFxuICAgICAgICBnZXRWYWx1ZUZyb21TdGF0ZShzdGF0ZSkge1xuICAgICAgICAgIHJldHVybiBzdGF0ZS5wbGF5YmFjay5zdGF0c0xhc3RVcGRhdGVkQXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHRocmVzaG9sZDogU1RBVFNfVVBEQVRFX1RIUkVTSE9MRCxcbiAgICAgICAgZGVsYXk6IDEwMDAsXG4gICAgICB9KSxcbiAgICAgIGRlbGF5U21hbGxVcGRhdGVzKHtcbiAgICAgICAgdHlwZTogcW9zQWN0aW9uVHlwZXMuc2V0U3RhdHNEYXRhLFxuICAgICAgICBnZXRWYWx1ZUZyb21QYXlsb2FkKHBheWxvYWQpIHtcbiAgICAgICAgICByZXR1cm4gcGF5bG9hZC5jdXJyZW50VGltZTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0VmFsdWVGcm9tU3RhdGUoc3RhdGUpIHtcbiAgICAgICAgICByZXR1cm4gc3RhdGUucW9zLnN0YXRzTGFzdFVwZGF0ZWRBdDtcbiAgICAgICAgfSxcbiAgICAgICAgdGhyZXNob2xkOiAyICogU1RBVFNfVVBEQVRFX1RIUkVTSE9MRCxcbiAgICAgICAgZGVsYXk6IDIwMDAsXG4gICAgICB9KSxcbiAgICApLFxuICApLFxuKTtcblxucGVyc2lzdFN0b3JlKHN0b3JlKTtcblxuZXhwb3J0IGNvbnN0IHdyYXBwZWRTdG9yZSA9IHdhdGNoKHN0b3JlKTtcbmV4cG9ydCBkZWZhdWx0IHN0b3JlO1xuIl0sIm5hbWVzIjpbImNyZWF0ZVN0b3JlIiwiYXBwbHlNaWRkbGV3YXJlIiwiY29tcG9zZVdpdGhEZXZUb29sc0RldmVsb3BtZW50T25seSIsInBlcnNpc3RTdG9yZSIsIndhdGNoIiwicmVkdWNlcnMiLCJhdWRpb0FQSSIsInRyYWNrc1RyYW5zZm9ybSIsImNsb3NlZENhcHRpb25TdG9yYWdlIiwiY2xvc2VkQ2FwdGlvblJlcG9ydCIsImNsb3NlZENhcHRpb25BUEkiLCJjb250ZW50IiwiZGVsYXlTbWFsbFVwZGF0ZXMiLCJwbGF5YmFja0FjdGlvblR5cGVzIiwiaGFzaE1pZGRsZXdhcmUiLCJwbGF5ZXJNaWRkbGV3YXJlIiwic2V0dGluZ3MiLCJwbGF5YmFja01pZGRsZXdhcmUiLCJzaGFyZU1vZHVsZVRyYW5zZm9ybSIsImlnbm9yZU9mZkFpclJlbGF0ZWRNb2R1bGVzIiwicGxheWVyIiwicW9zQWN0aW9uVHlwZXMiLCJUSU1FVVBEQVRFX1RIUkVTSE9MRCIsIlNUQVRTX1VQREFURV9USFJFU0hPTEQiLCJzdG9yZSIsInR5cGUiLCJzZXRQbGF5YmFja1N0YXRzIiwiZ2V0VmFsdWVGcm9tUGF5bG9hZCIsInBheWxvYWQiLCJjdXJyZW50VGltZSIsImdldFZhbHVlRnJvbVN0YXRlIiwic3RhdGUiLCJwbGF5YmFjayIsInN0YXRzTGFzdFVwZGF0ZWRBdCIsInRocmVzaG9sZCIsImRlbGF5Iiwic2V0U3RhdHNEYXRhIiwicW9zIiwid3JhcHBlZFN0b3JlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/store/index.js\n");

/***/ }),

/***/ "../js/cronus/store/middlewares/audioAPI.js":
/*!**************************************************!*\
  !*** ../js/cronus/store/middlewares/audioAPI.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var cronus_embedApi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/embedApi */ \"../js/cronus/embedApi/index.js\");\n/* harmony import */ var shared_store_types_playback__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/store/types/playback */ \"../js/shared/store/types/playback.js\");\n\n\nvar relatedActionTypes = [shared_store_types_playback__WEBPACK_IMPORTED_MODULE_1__[\"default\"].selectAudio, shared_store_types_playback__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setAudioTracks];\n/* harmony default export */ __webpack_exports__[\"default\"] = (function (store) {\n  return function (next) {\n    return function (action) {\n      var result = next(action);\n\n      if (relatedActionTypes.includes(action.type)) {\n        var _store$getState$playb = store.getState().playback,\n            selectedAudio = _store$getState$playb.selectedAudio,\n            audioTracks = _store$getState$playb.audioTracks;\n\n        if (audioTracks.length > 0) {\n          var data = audioTracks.map(function (_ref) {\n            var id = _ref.id,\n                label = _ref.label,\n                language = _ref.language,\n                country = _ref.country;\n            return {\n              index: id,\n              label: label,\n              language: language,\n              country: country,\n              active: selectedAudio === id\n            };\n          });\n          cronus_embedApi__WEBPACK_IMPORTED_MODULE_0__.sendEvent('audio', data);\n        }\n      }\n\n      return result;\n    };\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL21pZGRsZXdhcmVzL2F1ZGlvQVBJLmpzLmpzIiwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ0E7QUFFQSxJQUFNRSxrQkFBa0IsR0FBRyxDQUFDRCwrRUFBRCxFQUFrQ0Esa0ZBQWxDLENBQTNCO0FBRUEsK0RBQWUsVUFBQ0ksS0FBRDtBQUFBLFNBQVcsVUFBQ0MsSUFBRDtBQUFBLFdBQVUsVUFBQ0MsTUFBRCxFQUFZO0FBQzlDLFVBQU1DLE1BQU0sR0FBR0YsSUFBSSxDQUFDQyxNQUFELENBQW5COztBQUVBLFVBQUlMLGtCQUFrQixDQUFDTyxRQUFuQixDQUE0QkYsTUFBTSxDQUFDRyxJQUFuQyxDQUFKLEVBQThDO0FBQzVDLG9DQUF1Q0wsS0FBSyxDQUFDTSxRQUFOLEdBQWlCQyxRQUF4RDtBQUFBLFlBQVFDLGFBQVIseUJBQVFBLGFBQVI7QUFBQSxZQUF1QkMsV0FBdkIseUJBQXVCQSxXQUF2Qjs7QUFDQSxZQUFJQSxXQUFXLENBQUNDLE1BQVosR0FBcUIsQ0FBekIsRUFBNEI7QUFDMUIsY0FBTUMsSUFBSSxHQUFHRixXQUFXLENBQUNHLEdBQVosQ0FBZ0I7QUFBQSxnQkFBR0MsRUFBSCxRQUFHQSxFQUFIO0FBQUEsZ0JBQU9DLEtBQVAsUUFBT0EsS0FBUDtBQUFBLGdCQUFjQyxRQUFkLFFBQWNBLFFBQWQ7QUFBQSxnQkFBd0JDLE9BQXhCLFFBQXdCQSxPQUF4QjtBQUFBLG1CQUF1QztBQUNsRUMsY0FBQUEsS0FBSyxFQUFFSixFQUQyRDtBQUVsRUMsY0FBQUEsS0FBSyxFQUFMQSxLQUZrRTtBQUdsRUMsY0FBQUEsUUFBUSxFQUFSQSxRQUhrRTtBQUlsRUMsY0FBQUEsT0FBTyxFQUFQQSxPQUprRTtBQUtsRUUsY0FBQUEsTUFBTSxFQUFFVixhQUFhLEtBQUtLO0FBTHdDLGFBQXZDO0FBQUEsV0FBaEIsQ0FBYjtBQVFBbEIsVUFBQUEsc0RBQUEsQ0FBbUIsT0FBbkIsRUFBNEJnQixJQUE1QjtBQUNEO0FBQ0Y7O0FBRUQsYUFBT1IsTUFBUDtBQUNELEtBbkJ5QjtBQUFBLEdBQVg7QUFBQSxDQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvc3RvcmUvbWlkZGxld2FyZXMvYXVkaW9BUEkuanM/NDY4YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBlbWJlZEFwaSBmcm9tICdjcm9udXMvZW1iZWRBcGknO1xuaW1wb3J0IHBsYXliYWNrQWN0aW9uVHlwZXMgZnJvbSAnc2hhcmVkL3N0b3JlL3R5cGVzL3BsYXliYWNrJztcblxuY29uc3QgcmVsYXRlZEFjdGlvblR5cGVzID0gW3BsYXliYWNrQWN0aW9uVHlwZXMuc2VsZWN0QXVkaW8sIHBsYXliYWNrQWN0aW9uVHlwZXMuc2V0QXVkaW9UcmFja3NdO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RvcmUpID0+IChuZXh0KSA9PiAoYWN0aW9uKSA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IG5leHQoYWN0aW9uKTtcblxuICBpZiAocmVsYXRlZEFjdGlvblR5cGVzLmluY2x1ZGVzKGFjdGlvbi50eXBlKSkge1xuICAgIGNvbnN0IHsgc2VsZWN0ZWRBdWRpbywgYXVkaW9UcmFja3MgfSA9IHN0b3JlLmdldFN0YXRlKCkucGxheWJhY2s7XG4gICAgaWYgKGF1ZGlvVHJhY2tzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBhdWRpb1RyYWNrcy5tYXAoKHsgaWQsIGxhYmVsLCBsYW5ndWFnZSwgY291bnRyeSB9KSA9PiAoe1xuICAgICAgICBpbmRleDogaWQsXG4gICAgICAgIGxhYmVsLFxuICAgICAgICBsYW5ndWFnZSxcbiAgICAgICAgY291bnRyeSxcbiAgICAgICAgYWN0aXZlOiBzZWxlY3RlZEF1ZGlvID09PSBpZCxcbiAgICAgIH0pKTtcblxuICAgICAgZW1iZWRBcGkuc2VuZEV2ZW50KCdhdWRpbycsIGRhdGEpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuIl0sIm5hbWVzIjpbImVtYmVkQXBpIiwicGxheWJhY2tBY3Rpb25UeXBlcyIsInJlbGF0ZWRBY3Rpb25UeXBlcyIsInNlbGVjdEF1ZGlvIiwic2V0QXVkaW9UcmFja3MiLCJzdG9yZSIsIm5leHQiLCJhY3Rpb24iLCJyZXN1bHQiLCJpbmNsdWRlcyIsInR5cGUiLCJnZXRTdGF0ZSIsInBsYXliYWNrIiwic2VsZWN0ZWRBdWRpbyIsImF1ZGlvVHJhY2tzIiwibGVuZ3RoIiwiZGF0YSIsIm1hcCIsImlkIiwibGFiZWwiLCJsYW5ndWFnZSIsImNvdW50cnkiLCJpbmRleCIsImFjdGl2ZSIsInNlbmRFdmVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/store/middlewares/audioAPI.js\n");

/***/ }),

/***/ "../js/cronus/store/middlewares/closedCaptionAPI.js":
/*!**********************************************************!*\
  !*** ../js/cronus/store/middlewares/closedCaptionAPI.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var cronus_embedApi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/embedApi */ \"../js/cronus/embedApi/index.js\");\n/* harmony import */ var shared_store_types_playback__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/store/types/playback */ \"../js/shared/store/types/playback.js\");\n\n\nvar relatedActionTypes = [shared_store_types_playback__WEBPACK_IMPORTED_MODULE_1__[\"default\"].selectClosedCaption, shared_store_types_playback__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setClosedCaptionTracks];\n/* harmony default export */ __webpack_exports__[\"default\"] = (function (store) {\n  return function (next) {\n    return function (action) {\n      var result = next(action);\n\n      if (relatedActionTypes.includes(action.type)) {\n        var _store$getState$playb = store.getState().playback,\n            selectedClosedCaption = _store$getState$playb.selectedClosedCaption,\n            closedCaptionTracks = _store$getState$playb.closedCaptionTracks;\n\n        if (closedCaptionTracks.length > 0) {\n          var data = closedCaptionTracks.map(function (_ref) {\n            var id = _ref.id,\n                label = _ref.label,\n                language = _ref.language,\n                country = _ref.country;\n            return {\n              index: id,\n              label: label,\n              language: language,\n              country: country,\n              active: selectedClosedCaption === id\n            };\n          });\n          cronus_embedApi__WEBPACK_IMPORTED_MODULE_0__.sendEvent('cc', data);\n        }\n      }\n\n      return result;\n    };\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL21pZGRsZXdhcmVzL2Nsb3NlZENhcHRpb25BUEkuanMuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQUE7QUFDQTtBQUVBLElBQU1FLGtCQUFrQixHQUFHLENBQ3pCRCx1RkFEeUIsRUFFekJBLDBGQUZ5QixDQUEzQjtBQUtBLCtEQUFlLFVBQUNJLEtBQUQ7QUFBQSxTQUFXLFVBQUNDLElBQUQ7QUFBQSxXQUFVLFVBQUNDLE1BQUQsRUFBWTtBQUM5QyxVQUFNQyxNQUFNLEdBQUdGLElBQUksQ0FBQ0MsTUFBRCxDQUFuQjs7QUFFQSxVQUFJTCxrQkFBa0IsQ0FBQ08sUUFBbkIsQ0FBNEJGLE1BQU0sQ0FBQ0csSUFBbkMsQ0FBSixFQUE4QztBQUM1QyxvQ0FBdURMLEtBQUssQ0FBQ00sUUFBTixHQUFpQkMsUUFBeEU7QUFBQSxZQUFRQyxxQkFBUix5QkFBUUEscUJBQVI7QUFBQSxZQUErQkMsbUJBQS9CLHlCQUErQkEsbUJBQS9COztBQUVBLFlBQUlBLG1CQUFtQixDQUFDQyxNQUFwQixHQUE2QixDQUFqQyxFQUFvQztBQUNsQyxjQUFNQyxJQUFJLEdBQUdGLG1CQUFtQixDQUFDRyxHQUFwQixDQUF3QjtBQUFBLGdCQUFHQyxFQUFILFFBQUdBLEVBQUg7QUFBQSxnQkFBT0MsS0FBUCxRQUFPQSxLQUFQO0FBQUEsZ0JBQWNDLFFBQWQsUUFBY0EsUUFBZDtBQUFBLGdCQUF3QkMsT0FBeEIsUUFBd0JBLE9BQXhCO0FBQUEsbUJBQXVDO0FBQzFFQyxjQUFBQSxLQUFLLEVBQUVKLEVBRG1FO0FBRTFFQyxjQUFBQSxLQUFLLEVBQUxBLEtBRjBFO0FBRzFFQyxjQUFBQSxRQUFRLEVBQVJBLFFBSDBFO0FBSTFFQyxjQUFBQSxPQUFPLEVBQVBBLE9BSjBFO0FBSzFFRSxjQUFBQSxNQUFNLEVBQUVWLHFCQUFxQixLQUFLSztBQUx3QyxhQUF2QztBQUFBLFdBQXhCLENBQWI7QUFRQWxCLFVBQUFBLHNEQUFBLENBQW1CLElBQW5CLEVBQXlCZ0IsSUFBekI7QUFDRDtBQUNGOztBQUVELGFBQU9SLE1BQVA7QUFDRCxLQXBCeUI7QUFBQSxHQUFYO0FBQUEsQ0FBZiIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vanMvY3JvbnVzL3N0b3JlL21pZGRsZXdhcmVzL2Nsb3NlZENhcHRpb25BUEkuanM/MTA2NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBlbWJlZEFwaSBmcm9tICdjcm9udXMvZW1iZWRBcGknO1xuaW1wb3J0IHBsYXliYWNrQWN0aW9uVHlwZXMgZnJvbSAnc2hhcmVkL3N0b3JlL3R5cGVzL3BsYXliYWNrJztcblxuY29uc3QgcmVsYXRlZEFjdGlvblR5cGVzID0gW1xuICBwbGF5YmFja0FjdGlvblR5cGVzLnNlbGVjdENsb3NlZENhcHRpb24sXG4gIHBsYXliYWNrQWN0aW9uVHlwZXMuc2V0Q2xvc2VkQ2FwdGlvblRyYWNrcyxcbl07XG5cbmV4cG9ydCBkZWZhdWx0IChzdG9yZSkgPT4gKG5leHQpID0+IChhY3Rpb24pID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gbmV4dChhY3Rpb24pO1xuXG4gIGlmIChyZWxhdGVkQWN0aW9uVHlwZXMuaW5jbHVkZXMoYWN0aW9uLnR5cGUpKSB7XG4gICAgY29uc3QgeyBzZWxlY3RlZENsb3NlZENhcHRpb24sIGNsb3NlZENhcHRpb25UcmFja3MgfSA9IHN0b3JlLmdldFN0YXRlKCkucGxheWJhY2s7XG5cbiAgICBpZiAoY2xvc2VkQ2FwdGlvblRyYWNrcy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBkYXRhID0gY2xvc2VkQ2FwdGlvblRyYWNrcy5tYXAoKHsgaWQsIGxhYmVsLCBsYW5ndWFnZSwgY291bnRyeSB9KSA9PiAoe1xuICAgICAgICBpbmRleDogaWQsXG4gICAgICAgIGxhYmVsLFxuICAgICAgICBsYW5ndWFnZSxcbiAgICAgICAgY291bnRyeSxcbiAgICAgICAgYWN0aXZlOiBzZWxlY3RlZENsb3NlZENhcHRpb24gPT09IGlkLFxuICAgICAgfSkpO1xuXG4gICAgICBlbWJlZEFwaS5zZW5kRXZlbnQoJ2NjJywgZGF0YSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iXSwibmFtZXMiOlsiZW1iZWRBcGkiLCJwbGF5YmFja0FjdGlvblR5cGVzIiwicmVsYXRlZEFjdGlvblR5cGVzIiwic2VsZWN0Q2xvc2VkQ2FwdGlvbiIsInNldENsb3NlZENhcHRpb25UcmFja3MiLCJzdG9yZSIsIm5leHQiLCJhY3Rpb24iLCJyZXN1bHQiLCJpbmNsdWRlcyIsInR5cGUiLCJnZXRTdGF0ZSIsInBsYXliYWNrIiwic2VsZWN0ZWRDbG9zZWRDYXB0aW9uIiwiY2xvc2VkQ2FwdGlvblRyYWNrcyIsImxlbmd0aCIsImRhdGEiLCJtYXAiLCJpZCIsImxhYmVsIiwibGFuZ3VhZ2UiLCJjb3VudHJ5IiwiaW5kZXgiLCJhY3RpdmUiLCJzZW5kRXZlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/store/middlewares/closedCaptionAPI.js\n");

/***/ }),

/***/ "../js/cronus/store/middlewares/closedCaptionReport.js":
/*!*************************************************************!*\
  !*** ../js/cronus/store/middlewares/closedCaptionReport.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! player-utils/object/get */ \"../node_modules/player-utils/object/get.js\");\n/* harmony import */ var shared_store_types_playback__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/store/types/playback */ \"../js/shared/store/types/playback.js\");\n/* harmony import */ var shared_store_actions_content__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/store/actions/content */ \"../js/shared/store/actions/content.js\");\n/* harmony import */ var cronus_tracking__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/tracking */ \"../js/cronus/tracking/index.js\");\n/* harmony import */ var shared_store_selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! shared/store/selectors */ \"../js/shared/store/selectors/index.js\");\n/* harmony import */ var cronus_store_selectors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cronus/store/selectors */ \"../js/cronus/store/selectors/index.js\");\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function (store) {\n  return function (next) {\n    return function (action) {\n      if (action.type === shared_store_types_playback__WEBPACK_IMPORTED_MODULE_1__[\"default\"].selectClosedCaption) {\n        var state = store.getState();\n        var prevClosedCaptionId = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_4__.getSelectedClosedCaptionId)(state);\n        var nextClosedCaptionId = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(action, 'payload.index');\n\n        if (prevClosedCaptionId !== nextClosedCaptionId) {\n          var mediaType = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_5__.getMediaType)(state) === shared_store_actions_content__WEBPACK_IMPORTED_MODULE_2__.MEDIA_TYPES.live ? 'live' : 'vod';\n\n          if (nextClosedCaptionId > -1) {\n            var track = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_4__.getSubtitleTrackById)(state, nextClosedCaptionId);\n\n            if (track) {\n              var language = track.language,\n                  country = track.country;\n              cronus_tracking__WEBPACK_IMPORTED_MODULE_3__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_3__[\"default\"].TYPES.turnOnCC, {\n                mediaType: mediaType,\n                language: \"\".concat(language, \"-\").concat(country)\n              });\n            }\n          } else {\n            var _track = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_4__.getSubtitleTrackById)(state, prevClosedCaptionId);\n\n            if (_track) {\n              var _language = _track.language,\n                  _country = _track.country;\n              cronus_tracking__WEBPACK_IMPORTED_MODULE_3__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_3__[\"default\"].TYPES.turnOffCC, {\n                mediaType: mediaType,\n                language: \"\".concat(_language, \"-\").concat(_country)\n              });\n            }\n          }\n        }\n      }\n\n      return next(action);\n    };\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL21pZGRsZXdhcmVzL2Nsb3NlZENhcHRpb25SZXBvcnQuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLCtEQUFlLFVBQUNPLEtBQUQ7QUFBQSxTQUFXLFVBQUNDLElBQUQ7QUFBQSxXQUFVLFVBQUNDLE1BQUQsRUFBWTtBQUM5QyxVQUFJQSxNQUFNLENBQUNDLElBQVAsS0FBZ0JULHVGQUFwQixFQUE2RDtBQUMzRCxZQUFNVyxLQUFLLEdBQUdMLEtBQUssQ0FBQ00sUUFBTixFQUFkO0FBQ0EsWUFBTUMsbUJBQW1CLEdBQUdWLGtGQUEwQixDQUFDUSxLQUFELENBQXREO0FBQ0EsWUFBTUcsbUJBQW1CLEdBQUdmLG1FQUFHLENBQUNTLE1BQUQsRUFBUyxlQUFULENBQS9COztBQUNBLFlBQUlLLG1CQUFtQixLQUFLQyxtQkFBNUIsRUFBaUQ7QUFDL0MsY0FBTUMsU0FBUyxHQUFHVixvRUFBWSxDQUFDTSxLQUFELENBQVosS0FBd0JWLDBFQUF4QixHQUEyQyxNQUEzQyxHQUFvRCxLQUF0RTs7QUFDQSxjQUFJYSxtQkFBbUIsR0FBRyxDQUFDLENBQTNCLEVBQThCO0FBQzVCLGdCQUFNRyxLQUFLLEdBQUdiLDRFQUFvQixDQUFDTyxLQUFELEVBQVFHLG1CQUFSLENBQWxDOztBQUNBLGdCQUFJRyxLQUFKLEVBQVc7QUFDVCxrQkFBUUMsUUFBUixHQUE4QkQsS0FBOUIsQ0FBUUMsUUFBUjtBQUFBLGtCQUFrQkMsT0FBbEIsR0FBOEJGLEtBQTlCLENBQWtCRSxPQUFsQjtBQUNBakIsY0FBQUEsNERBQUEsQ0FBY0Esc0VBQWQsRUFBdUM7QUFDckNhLGdCQUFBQSxTQUFTLEVBQVRBLFNBRHFDO0FBRXJDRyxnQkFBQUEsUUFBUSxZQUFLQSxRQUFMLGNBQWlCQyxPQUFqQjtBQUY2QixlQUF2QztBQUlEO0FBQ0YsV0FURCxNQVNPO0FBQ0wsZ0JBQU1GLE1BQUssR0FBR2IsNEVBQW9CLENBQUNPLEtBQUQsRUFBUUUsbUJBQVIsQ0FBbEM7O0FBQ0EsZ0JBQUlJLE1BQUosRUFBVztBQUNULGtCQUFRQyxTQUFSLEdBQThCRCxNQUE5QixDQUFRQyxRQUFSO0FBQUEsa0JBQWtCQyxRQUFsQixHQUE4QkYsTUFBOUIsQ0FBa0JFLE9BQWxCO0FBQ0FqQixjQUFBQSw0REFBQSxDQUFjQSx1RUFBZCxFQUF3QztBQUN0Q2EsZ0JBQUFBLFNBQVMsRUFBVEEsU0FEc0M7QUFFdENHLGdCQUFBQSxRQUFRLFlBQUtBLFNBQUwsY0FBaUJDLFFBQWpCO0FBRjhCLGVBQXhDO0FBSUQ7QUFDRjtBQUNGO0FBQ0Y7O0FBRUQsYUFBT1osSUFBSSxDQUFDQyxNQUFELENBQVg7QUFDRCxLQTlCeUI7QUFBQSxHQUFYO0FBQUEsQ0FBZiIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vanMvY3JvbnVzL3N0b3JlL21pZGRsZXdhcmVzL2Nsb3NlZENhcHRpb25SZXBvcnQuanM/MTg3MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0IGZyb20gJ3BsYXllci11dGlscy9vYmplY3QvZ2V0JztcbmltcG9ydCBwbGF5YmFja0FjdGlvblR5cGVzIGZyb20gJ3NoYXJlZC9zdG9yZS90eXBlcy9wbGF5YmFjayc7XG5pbXBvcnQgeyBNRURJQV9UWVBFUyB9IGZyb20gJ3NoYXJlZC9zdG9yZS9hY3Rpb25zL2NvbnRlbnQnO1xuaW1wb3J0IHRyYWNraW5nIGZyb20gJ2Nyb251cy90cmFja2luZyc7XG5pbXBvcnQgeyBnZXRTZWxlY3RlZENsb3NlZENhcHRpb25JZCwgZ2V0U3VidGl0bGVUcmFja0J5SWQgfSBmcm9tICdzaGFyZWQvc3RvcmUvc2VsZWN0b3JzJztcbmltcG9ydCB7IGdldE1lZGlhVHlwZSB9IGZyb20gJ2Nyb251cy9zdG9yZS9zZWxlY3RvcnMnO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RvcmUpID0+IChuZXh0KSA9PiAoYWN0aW9uKSA9PiB7XG4gIGlmIChhY3Rpb24udHlwZSA9PT0gcGxheWJhY2tBY3Rpb25UeXBlcy5zZWxlY3RDbG9zZWRDYXB0aW9uKSB7XG4gICAgY29uc3Qgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgIGNvbnN0IHByZXZDbG9zZWRDYXB0aW9uSWQgPSBnZXRTZWxlY3RlZENsb3NlZENhcHRpb25JZChzdGF0ZSk7XG4gICAgY29uc3QgbmV4dENsb3NlZENhcHRpb25JZCA9IGdldChhY3Rpb24sICdwYXlsb2FkLmluZGV4Jyk7XG4gICAgaWYgKHByZXZDbG9zZWRDYXB0aW9uSWQgIT09IG5leHRDbG9zZWRDYXB0aW9uSWQpIHtcbiAgICAgIGNvbnN0IG1lZGlhVHlwZSA9IGdldE1lZGlhVHlwZShzdGF0ZSkgPT09IE1FRElBX1RZUEVTLmxpdmUgPyAnbGl2ZScgOiAndm9kJztcbiAgICAgIGlmIChuZXh0Q2xvc2VkQ2FwdGlvbklkID4gLTEpIHtcbiAgICAgICAgY29uc3QgdHJhY2sgPSBnZXRTdWJ0aXRsZVRyYWNrQnlJZChzdGF0ZSwgbmV4dENsb3NlZENhcHRpb25JZCk7XG4gICAgICAgIGlmICh0cmFjaykge1xuICAgICAgICAgIGNvbnN0IHsgbGFuZ3VhZ2UsIGNvdW50cnkgfSA9IHRyYWNrO1xuICAgICAgICAgIHRyYWNraW5nLnNlbmQodHJhY2tpbmcuVFlQRVMudHVybk9uQ0MsIHtcbiAgICAgICAgICAgIG1lZGlhVHlwZSxcbiAgICAgICAgICAgIGxhbmd1YWdlOiBgJHtsYW5ndWFnZX0tJHtjb3VudHJ5fWAsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHRyYWNrID0gZ2V0U3VidGl0bGVUcmFja0J5SWQoc3RhdGUsIHByZXZDbG9zZWRDYXB0aW9uSWQpO1xuICAgICAgICBpZiAodHJhY2spIHtcbiAgICAgICAgICBjb25zdCB7IGxhbmd1YWdlLCBjb3VudHJ5IH0gPSB0cmFjaztcbiAgICAgICAgICB0cmFja2luZy5zZW5kKHRyYWNraW5nLlRZUEVTLnR1cm5PZmZDQywge1xuICAgICAgICAgICAgbWVkaWFUeXBlLFxuICAgICAgICAgICAgbGFuZ3VhZ2U6IGAke2xhbmd1YWdlfS0ke2NvdW50cnl9YCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXh0KGFjdGlvbik7XG59O1xuIl0sIm5hbWVzIjpbImdldCIsInBsYXliYWNrQWN0aW9uVHlwZXMiLCJNRURJQV9UWVBFUyIsInRyYWNraW5nIiwiZ2V0U2VsZWN0ZWRDbG9zZWRDYXB0aW9uSWQiLCJnZXRTdWJ0aXRsZVRyYWNrQnlJZCIsImdldE1lZGlhVHlwZSIsInN0b3JlIiwibmV4dCIsImFjdGlvbiIsInR5cGUiLCJzZWxlY3RDbG9zZWRDYXB0aW9uIiwic3RhdGUiLCJnZXRTdGF0ZSIsInByZXZDbG9zZWRDYXB0aW9uSWQiLCJuZXh0Q2xvc2VkQ2FwdGlvbklkIiwibWVkaWFUeXBlIiwibGl2ZSIsInRyYWNrIiwibGFuZ3VhZ2UiLCJjb3VudHJ5Iiwic2VuZCIsIlRZUEVTIiwidHVybk9uQ0MiLCJ0dXJuT2ZmQ0MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/store/middlewares/closedCaptionReport.js\n");

/***/ }),

/***/ "../js/cronus/store/middlewares/closedCaptionStorage.js":
/*!**************************************************************!*\
  !*** ../js/cronus/store/middlewares/closedCaptionStorage.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var shared_lib_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/lib/storage */ \"../js/shared/lib/storage.js\");\n/* harmony import */ var shared_store_types_playback__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/store/types/playback */ \"../js/shared/store/types/playback.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar CC_ACTIVE_STORAGE_KEY = 'is_cc_active';\n/* harmony default export */ __webpack_exports__[\"default\"] = (function (store) {\n  return function (next) {\n    return function (action) {\n      if (action.type === shared_store_types_playback__WEBPACK_IMPORTED_MODULE_1__[\"default\"].selectClosedCaption) {\n        var index = action.payload.index;\n        var isActive = index >= 0;\n        shared_lib_storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].set(CC_ACTIVE_STORAGE_KEY, isActive, {\n          expires: 365 * 10\n        });\n      }\n\n      if (action.type === shared_store_types_playback__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setClosedCaptionTracks) {\n        var selectedClosedCaption = store.getState().playback.selectedClosedCaption;\n\n        if (selectedClosedCaption === -2) {\n          var isCCActive = shared_lib_storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(CC_ACTIVE_STORAGE_KEY);\n\n          var modifiedPayload = _objectSpread(_objectSpread({}, action.payload), {}, {\n            closedCaptionActiveFromLocalStorage: isCCActive\n          });\n\n          return next(_objectSpread(_objectSpread({}, action), {}, {\n            payload: modifiedPayload\n          }));\n        }\n      }\n\n      return next(action);\n    };\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL21pZGRsZXdhcmVzL2Nsb3NlZENhcHRpb25TdG9yYWdlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFFQSxJQUFNRSxxQkFBcUIsR0FBRyxjQUE5QjtBQUVBLCtEQUFlLFVBQUNDLEtBQUQ7QUFBQSxTQUFXLFVBQUNDLElBQUQ7QUFBQSxXQUFVLFVBQUNDLE1BQUQsRUFBWTtBQUM5QyxVQUFJQSxNQUFNLENBQUNDLElBQVAsS0FBZ0JMLHVGQUFwQixFQUE2RDtBQUMzRCxZQUFRTyxLQUFSLEdBQWtCSCxNQUFNLENBQUNJLE9BQXpCLENBQVFELEtBQVI7QUFFQSxZQUFNRSxRQUFRLEdBQUdGLEtBQUssSUFBSSxDQUExQjtBQUVBUixRQUFBQSw4REFBQSxDQUFZRSxxQkFBWixFQUFtQ1EsUUFBbkMsRUFBNkM7QUFDM0NFLFVBQUFBLE9BQU8sRUFBRSxNQUFNO0FBRDRCLFNBQTdDO0FBR0Q7O0FBRUQsVUFBSVAsTUFBTSxDQUFDQyxJQUFQLEtBQWdCTCwwRkFBcEIsRUFBZ0U7QUFDOUQsWUFBUWEscUJBQVIsR0FBa0NYLEtBQUssQ0FBQ1ksUUFBTixHQUFpQkMsUUFBbkQsQ0FBUUYscUJBQVI7O0FBRUEsWUFBSUEscUJBQXFCLEtBQUssQ0FBQyxDQUEvQixFQUFrQztBQUNoQyxjQUFNRyxVQUFVLEdBQUdqQiw4REFBQSxDQUFZRSxxQkFBWixDQUFuQjs7QUFDQSxjQUFNaUIsZUFBZSxtQ0FDaEJkLE1BQU0sQ0FBQ0ksT0FEUztBQUVuQlcsWUFBQUEsbUNBQW1DLEVBQUVIO0FBRmxCLFlBQXJCOztBQUtBLGlCQUFPYixJQUFJLGlDQUNOQyxNQURNO0FBRVRJLFlBQUFBLE9BQU8sRUFBRVU7QUFGQSxhQUFYO0FBSUQ7QUFDRjs7QUFFRCxhQUFPZixJQUFJLENBQUNDLE1BQUQsQ0FBWDtBQUNELEtBN0J5QjtBQUFBLEdBQVg7QUFBQSxDQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvc3RvcmUvbWlkZGxld2FyZXMvY2xvc2VkQ2FwdGlvblN0b3JhZ2UuanM/NmY1YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3RvcmFnZSBmcm9tICdzaGFyZWQvbGliL3N0b3JhZ2UnO1xuaW1wb3J0IHBsYXliYWNrQWN0aW9uVHlwZXMgZnJvbSAnc2hhcmVkL3N0b3JlL3R5cGVzL3BsYXliYWNrJztcblxuY29uc3QgQ0NfQUNUSVZFX1NUT1JBR0VfS0VZID0gJ2lzX2NjX2FjdGl2ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IChzdG9yZSkgPT4gKG5leHQpID0+IChhY3Rpb24pID0+IHtcbiAgaWYgKGFjdGlvbi50eXBlID09PSBwbGF5YmFja0FjdGlvblR5cGVzLnNlbGVjdENsb3NlZENhcHRpb24pIHtcbiAgICBjb25zdCB7IGluZGV4IH0gPSBhY3Rpb24ucGF5bG9hZDtcblxuICAgIGNvbnN0IGlzQWN0aXZlID0gaW5kZXggPj0gMDtcblxuICAgIHN0b3JhZ2Uuc2V0KENDX0FDVElWRV9TVE9SQUdFX0tFWSwgaXNBY3RpdmUsIHtcbiAgICAgIGV4cGlyZXM6IDM2NSAqIDEwLFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSBwbGF5YmFja0FjdGlvblR5cGVzLnNldENsb3NlZENhcHRpb25UcmFja3MpIHtcbiAgICBjb25zdCB7IHNlbGVjdGVkQ2xvc2VkQ2FwdGlvbiB9ID0gc3RvcmUuZ2V0U3RhdGUoKS5wbGF5YmFjaztcblxuICAgIGlmIChzZWxlY3RlZENsb3NlZENhcHRpb24gPT09IC0yKSB7XG4gICAgICBjb25zdCBpc0NDQWN0aXZlID0gc3RvcmFnZS5nZXQoQ0NfQUNUSVZFX1NUT1JBR0VfS0VZKTtcbiAgICAgIGNvbnN0IG1vZGlmaWVkUGF5bG9hZCA9IHtcbiAgICAgICAgLi4uYWN0aW9uLnBheWxvYWQsXG4gICAgICAgIGNsb3NlZENhcHRpb25BY3RpdmVGcm9tTG9jYWxTdG9yYWdlOiBpc0NDQWN0aXZlLFxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIG5leHQoe1xuICAgICAgICAuLi5hY3Rpb24sXG4gICAgICAgIHBheWxvYWQ6IG1vZGlmaWVkUGF5bG9hZCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXh0KGFjdGlvbik7XG59O1xuIl0sIm5hbWVzIjpbInN0b3JhZ2UiLCJwbGF5YmFja0FjdGlvblR5cGVzIiwiQ0NfQUNUSVZFX1NUT1JBR0VfS0VZIiwic3RvcmUiLCJuZXh0IiwiYWN0aW9uIiwidHlwZSIsInNlbGVjdENsb3NlZENhcHRpb24iLCJpbmRleCIsInBheWxvYWQiLCJpc0FjdGl2ZSIsInNldCIsImV4cGlyZXMiLCJzZXRDbG9zZWRDYXB0aW9uVHJhY2tzIiwic2VsZWN0ZWRDbG9zZWRDYXB0aW9uIiwiZ2V0U3RhdGUiLCJwbGF5YmFjayIsImlzQ0NBY3RpdmUiLCJnZXQiLCJtb2RpZmllZFBheWxvYWQiLCJjbG9zZWRDYXB0aW9uQWN0aXZlRnJvbUxvY2FsU3RvcmFnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/store/middlewares/closedCaptionStorage.js\n");

/***/ }),

/***/ "../js/cronus/store/middlewares/content.js":
/*!*************************************************!*\
  !*** ../js/cronus/store/middlewares/content.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var ustream_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ustream-env */ \"../node_modules/ustream-env/dist/ustream-env.js\");\n/* harmony import */ var ustream_env__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ustream_env__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/store/types/umsModules */ \"../js/cronus/store/types/umsModules.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function () {\n  return function (next) {\n    return function (action) {\n      var type = action.type;\n\n      if (type === cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setThumbnailModule) {\n        var _action$payload = action.payload,\n            mediaId = _action$payload.mediaId,\n            module = _action$payload.module; // The thumbnail module looks like this:\n        // ```\n        // { channelPictureSecureUrl: 'https://example.org/path/to/image/#SIZE#.jpg',\n        //   channelPictureUrl: 'http://example.org/path/to/image/#SIZE#.jpg',\n        //   liveThumbnailSecureUrl: 'https://example.org/path/to/image/#SIZE#.jpg',\n        //   liveThumbnailUrl: 'http://example.org/path/to/image/#SIZE#.jpg' }\n        // ```\n        // The converted values will look like this:\n        // ```\n        // { channelPicture: 'https://example.org/path/to/image/#SIZE#.jpg',\n        //   liveThumbnail: 'https://example.org/path/to/image/#SIZE#.jpg' }\n        // ```\n\n        var isSecureUrlKey = function isSecureUrlKey(key) {\n          return /SecureUrl$/.test(key);\n        };\n\n        var sanitizedValues = Object.fromEntries(Object.entries(module).filter(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 1),\n              key = _ref2[0];\n\n          return (ustream_env__WEBPACK_IMPORTED_MODULE_0___default().ssl) && isSecureUrlKey(key) || !(ustream_env__WEBPACK_IMPORTED_MODULE_0___default().ssl) && !isSecureUrlKey(key);\n        }).map(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n              key = _ref4[0],\n              value = _ref4[1];\n\n          return [key.replace(/(?:Secure)?Url$/, ''), value];\n        }));\n        return next(_objectSpread(_objectSpread({}, action), {}, {\n          payload: {\n            mediaId: mediaId,\n            module: sanitizedValues\n          }\n        }));\n      }\n\n      return next(action);\n    };\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL21pZGRsZXdhcmVzL2NvbnRlbnQuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFFQSwrREFBZTtBQUFBLFNBQU0sVUFBQ0UsSUFBRDtBQUFBLFdBQVUsVUFBQ0MsTUFBRCxFQUFZO0FBQ3pDLFVBQVFDLElBQVIsR0FBaUJELE1BQWpCLENBQVFDLElBQVI7O0FBQ0EsVUFBSUEsSUFBSSxLQUFLSCx3RkFBYixFQUF1RDtBQUNyRCw4QkFFSUUsTUFGSixDQUNFRyxPQURGO0FBQUEsWUFDYUMsT0FEYixtQkFDYUEsT0FEYjtBQUFBLFlBQ3NCQyxNQUR0QixtQkFDc0JBLE1BRHRCLENBRHFELENBS3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxZQUFNQyxjQUFjLEdBQUcsU0FBakJBLGNBQWlCLENBQUNDLEdBQUQ7QUFBQSxpQkFBUyxhQUFhQyxJQUFiLENBQWtCRCxHQUFsQixDQUFUO0FBQUEsU0FBdkI7O0FBQ0EsWUFBTUUsZUFBZSxHQUFHQyxNQUFNLENBQUNDLFdBQVAsQ0FDdEJELE1BQU0sQ0FBQ0UsT0FBUCxDQUFlUCxNQUFmLEVBQ0dRLE1BREgsQ0FDVTtBQUFBO0FBQUEsY0FBRU4sR0FBRjs7QUFBQSxpQkFBWVYsd0RBQUEsSUFBV1MsY0FBYyxDQUFDQyxHQUFELENBQTFCLElBQXFDLENBQUNWLHdEQUFELElBQVksQ0FBQ1MsY0FBYyxDQUFDQyxHQUFELENBQTNFO0FBQUEsU0FEVixFQUVHUSxHQUZILENBRU87QUFBQTtBQUFBLGNBQUVSLEdBQUY7QUFBQSxjQUFPUyxLQUFQOztBQUFBLGlCQUFrQixDQUFDVCxHQUFHLENBQUNVLE9BQUosQ0FBWSxpQkFBWixFQUErQixFQUEvQixDQUFELEVBQXFDRCxLQUFyQyxDQUFsQjtBQUFBLFNBRlAsQ0FEc0IsQ0FBeEI7QUFNQSxlQUFPakIsSUFBSSxpQ0FBTUMsTUFBTjtBQUFjRyxVQUFBQSxPQUFPLEVBQUU7QUFBRUMsWUFBQUEsT0FBTyxFQUFQQSxPQUFGO0FBQVdDLFlBQUFBLE1BQU0sRUFBRUk7QUFBbkI7QUFBdkIsV0FBWDtBQUNEOztBQUVELGFBQU9WLElBQUksQ0FBQ0MsTUFBRCxDQUFYO0FBQ0QsS0E5Qm9CO0FBQUEsR0FBTjtBQUFBLENBQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy9zdG9yZS9taWRkbGV3YXJlcy9jb250ZW50LmpzPzk3YzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGVudiBmcm9tICd1c3RyZWFtLWVudic7XG5pbXBvcnQgdW1zTW9kdWxlc0FjdGlvblR5cGVzIGZyb20gJ2Nyb251cy9zdG9yZS90eXBlcy91bXNNb2R1bGVzJztcblxuZXhwb3J0IGRlZmF1bHQgKCkgPT4gKG5leHQpID0+IChhY3Rpb24pID0+IHtcbiAgY29uc3QgeyB0eXBlIH0gPSBhY3Rpb247XG4gIGlmICh0eXBlID09PSB1bXNNb2R1bGVzQWN0aW9uVHlwZXMuc2V0VGh1bWJuYWlsTW9kdWxlKSB7XG4gICAgY29uc3Qge1xuICAgICAgcGF5bG9hZDogeyBtZWRpYUlkLCBtb2R1bGUgfSxcbiAgICB9ID0gYWN0aW9uO1xuXG4gICAgLy8gVGhlIHRodW1ibmFpbCBtb2R1bGUgbG9va3MgbGlrZSB0aGlzOlxuICAgIC8vIGBgYFxuICAgIC8vIHsgY2hhbm5lbFBpY3R1cmVTZWN1cmVVcmw6ICdodHRwczovL2V4YW1wbGUub3JnL3BhdGgvdG8vaW1hZ2UvI1NJWkUjLmpwZycsXG4gICAgLy8gICBjaGFubmVsUGljdHVyZVVybDogJ2h0dHA6Ly9leGFtcGxlLm9yZy9wYXRoL3RvL2ltYWdlLyNTSVpFIy5qcGcnLFxuICAgIC8vICAgbGl2ZVRodW1ibmFpbFNlY3VyZVVybDogJ2h0dHBzOi8vZXhhbXBsZS5vcmcvcGF0aC90by9pbWFnZS8jU0laRSMuanBnJyxcbiAgICAvLyAgIGxpdmVUaHVtYm5haWxVcmw6ICdodHRwOi8vZXhhbXBsZS5vcmcvcGF0aC90by9pbWFnZS8jU0laRSMuanBnJyB9XG4gICAgLy8gYGBgXG4gICAgLy8gVGhlIGNvbnZlcnRlZCB2YWx1ZXMgd2lsbCBsb29rIGxpa2UgdGhpczpcbiAgICAvLyBgYGBcbiAgICAvLyB7IGNoYW5uZWxQaWN0dXJlOiAnaHR0cHM6Ly9leGFtcGxlLm9yZy9wYXRoL3RvL2ltYWdlLyNTSVpFIy5qcGcnLFxuICAgIC8vICAgbGl2ZVRodW1ibmFpbDogJ2h0dHBzOi8vZXhhbXBsZS5vcmcvcGF0aC90by9pbWFnZS8jU0laRSMuanBnJyB9XG4gICAgLy8gYGBgXG4gICAgY29uc3QgaXNTZWN1cmVVcmxLZXkgPSAoa2V5KSA9PiAvU2VjdXJlVXJsJC8udGVzdChrZXkpO1xuICAgIGNvbnN0IHNhbml0aXplZFZhbHVlcyA9IE9iamVjdC5mcm9tRW50cmllcyhcbiAgICAgIE9iamVjdC5lbnRyaWVzKG1vZHVsZSlcbiAgICAgICAgLmZpbHRlcigoW2tleV0pID0+IChlbnYuc3NsICYmIGlzU2VjdXJlVXJsS2V5KGtleSkpIHx8ICghZW52LnNzbCAmJiAhaXNTZWN1cmVVcmxLZXkoa2V5KSkpXG4gICAgICAgIC5tYXAoKFtrZXksIHZhbHVlXSkgPT4gW2tleS5yZXBsYWNlKC8oPzpTZWN1cmUpP1VybCQvLCAnJyksIHZhbHVlXSksXG4gICAgKTtcblxuICAgIHJldHVybiBuZXh0KHsgLi4uYWN0aW9uLCBwYXlsb2FkOiB7IG1lZGlhSWQsIG1vZHVsZTogc2FuaXRpemVkVmFsdWVzIH0gfSk7XG4gIH1cblxuICByZXR1cm4gbmV4dChhY3Rpb24pO1xufTtcbiJdLCJuYW1lcyI6WyJlbnYiLCJ1bXNNb2R1bGVzQWN0aW9uVHlwZXMiLCJuZXh0IiwiYWN0aW9uIiwidHlwZSIsInNldFRodW1ibmFpbE1vZHVsZSIsInBheWxvYWQiLCJtZWRpYUlkIiwibW9kdWxlIiwiaXNTZWN1cmVVcmxLZXkiLCJrZXkiLCJ0ZXN0Iiwic2FuaXRpemVkVmFsdWVzIiwiT2JqZWN0IiwiZnJvbUVudHJpZXMiLCJlbnRyaWVzIiwiZmlsdGVyIiwic3NsIiwibWFwIiwidmFsdWUiLCJyZXBsYWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/store/middlewares/content.js\n");

/***/ }),

/***/ "../js/cronus/store/middlewares/delaySmallUpdates.js":
/*!***********************************************************!*\
  !*** ../js/cronus/store/middlewares/delaySmallUpdates.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * @typedef {object} Settings\n * @property {string} type\n * @property {function(object): ?number} getValueFromPayload\n * @property {function(object): ?number} getValueFromState\n * @property {number} threshold\n * @property {number} delay - in ms\n */\n\n/**\n * @param {Settings} settings\n * @returns {Function}\n */\n/* harmony default export */ __webpack_exports__[\"default\"] = (function (settings) {\n  return function (store) {\n    var tick;\n    return function (next) {\n      return function (action) {\n        var type = action.type,\n            payload = action.payload;\n\n        switch (type) {\n          case settings.type:\n            {\n              tick = clearTimeout(tick);\n              var state = store.getState();\n              var prev = settings.getValueFromState(state);\n              var curr = settings.getValueFromPayload(payload);\n              var isBelowTheThreshold = typeof prev === 'number' && typeof curr === 'number' && Math.abs(curr - prev) < settings.threshold;\n\n              if (isBelowTheThreshold) {\n                tick = setTimeout(function () {\n                  tick = undefined;\n                  next(action);\n                }, settings.delay);\n                return undefined;\n              }\n\n              return next(action);\n            }\n\n          default:\n            return next(action);\n        }\n      };\n    };\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL21pZGRsZXdhcmVzL2RlbGF5U21hbGxVcGRhdGVzLmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQWUsVUFBQ0EsUUFBRDtBQUFBLFNBQWMsVUFBQ0MsS0FBRCxFQUFXO0FBQ3RDLFFBQUlDLElBQUo7QUFFQSxXQUFPLFVBQUNDLElBQUQ7QUFBQSxhQUFVLFVBQUNDLE1BQUQsRUFBWTtBQUMzQixZQUFRQyxJQUFSLEdBQTBCRCxNQUExQixDQUFRQyxJQUFSO0FBQUEsWUFBY0MsT0FBZCxHQUEwQkYsTUFBMUIsQ0FBY0UsT0FBZDs7QUFDQSxnQkFBUUQsSUFBUjtBQUNFLGVBQUtMLFFBQVEsQ0FBQ0ssSUFBZDtBQUFvQjtBQUNsQkgsY0FBQUEsSUFBSSxHQUFHSyxZQUFZLENBQUNMLElBQUQsQ0FBbkI7QUFFQSxrQkFBTU0sS0FBSyxHQUFHUCxLQUFLLENBQUNRLFFBQU4sRUFBZDtBQUNBLGtCQUFNQyxJQUFJLEdBQUdWLFFBQVEsQ0FBQ1csaUJBQVQsQ0FBMkJILEtBQTNCLENBQWI7QUFDQSxrQkFBTUksSUFBSSxHQUFHWixRQUFRLENBQUNhLG1CQUFULENBQTZCUCxPQUE3QixDQUFiO0FBRUEsa0JBQU1RLG1CQUFtQixHQUN2QixPQUFPSixJQUFQLEtBQWdCLFFBQWhCLElBQ0EsT0FBT0UsSUFBUCxLQUFnQixRQURoQixJQUVBRyxJQUFJLENBQUNDLEdBQUwsQ0FBU0osSUFBSSxHQUFHRixJQUFoQixJQUF3QlYsUUFBUSxDQUFDaUIsU0FIbkM7O0FBSUEsa0JBQUlILG1CQUFKLEVBQXlCO0FBQ3ZCWixnQkFBQUEsSUFBSSxHQUFHZ0IsVUFBVSxDQUFDLFlBQU07QUFDdEJoQixrQkFBQUEsSUFBSSxHQUFHaUIsU0FBUDtBQUNBaEIsa0JBQUFBLElBQUksQ0FBQ0MsTUFBRCxDQUFKO0FBQ0QsaUJBSGdCLEVBR2RKLFFBQVEsQ0FBQ29CLEtBSEssQ0FBakI7QUFJQSx1QkFBT0QsU0FBUDtBQUNEOztBQUVELHFCQUFPaEIsSUFBSSxDQUFDQyxNQUFELENBQVg7QUFDRDs7QUFDRDtBQUNFLG1CQUFPRCxJQUFJLENBQUNDLE1BQUQsQ0FBWDtBQXZCSjtBQXlCRCxPQTNCTTtBQUFBLEtBQVA7QUE0QkQsR0EvQmM7QUFBQSxDQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvc3RvcmUvbWlkZGxld2FyZXMvZGVsYXlTbWFsbFVwZGF0ZXMuanM/ODNkOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IFNldHRpbmdzXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdHlwZVxuICogQHByb3BlcnR5IHtmdW5jdGlvbihvYmplY3QpOiA/bnVtYmVyfSBnZXRWYWx1ZUZyb21QYXlsb2FkXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKG9iamVjdCk6ID9udW1iZXJ9IGdldFZhbHVlRnJvbVN0YXRlXG4gKiBAcHJvcGVydHkge251bWJlcn0gdGhyZXNob2xkXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGVsYXkgLSBpbiBtc1xuICovXG5cbi8qKlxuICogQHBhcmFtIHtTZXR0aW5nc30gc2V0dGluZ3NcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgKHNldHRpbmdzKSA9PiAoc3RvcmUpID0+IHtcbiAgbGV0IHRpY2s7XG5cbiAgcmV0dXJuIChuZXh0KSA9PiAoYWN0aW9uKSA9PiB7XG4gICAgY29uc3QgeyB0eXBlLCBwYXlsb2FkIH0gPSBhY3Rpb247XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIHNldHRpbmdzLnR5cGU6IHtcbiAgICAgICAgdGljayA9IGNsZWFyVGltZW91dCh0aWNrKTtcblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IHByZXYgPSBzZXR0aW5ncy5nZXRWYWx1ZUZyb21TdGF0ZShzdGF0ZSk7XG4gICAgICAgIGNvbnN0IGN1cnIgPSBzZXR0aW5ncy5nZXRWYWx1ZUZyb21QYXlsb2FkKHBheWxvYWQpO1xuXG4gICAgICAgIGNvbnN0IGlzQmVsb3dUaGVUaHJlc2hvbGQgPVxuICAgICAgICAgIHR5cGVvZiBwcmV2ID09PSAnbnVtYmVyJyAmJlxuICAgICAgICAgIHR5cGVvZiBjdXJyID09PSAnbnVtYmVyJyAmJlxuICAgICAgICAgIE1hdGguYWJzKGN1cnIgLSBwcmV2KSA8IHNldHRpbmdzLnRocmVzaG9sZDtcbiAgICAgICAgaWYgKGlzQmVsb3dUaGVUaHJlc2hvbGQpIHtcbiAgICAgICAgICB0aWNrID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aWNrID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgbmV4dChhY3Rpb24pO1xuICAgICAgICAgIH0sIHNldHRpbmdzLmRlbGF5KTtcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgfVxuICB9O1xufTtcbiJdLCJuYW1lcyI6WyJzZXR0aW5ncyIsInN0b3JlIiwidGljayIsIm5leHQiLCJhY3Rpb24iLCJ0eXBlIiwicGF5bG9hZCIsImNsZWFyVGltZW91dCIsInN0YXRlIiwiZ2V0U3RhdGUiLCJwcmV2IiwiZ2V0VmFsdWVGcm9tU3RhdGUiLCJjdXJyIiwiZ2V0VmFsdWVGcm9tUGF5bG9hZCIsImlzQmVsb3dUaGVUaHJlc2hvbGQiLCJNYXRoIiwiYWJzIiwidGhyZXNob2xkIiwic2V0VGltZW91dCIsInVuZGVmaW5lZCIsImRlbGF5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/store/middlewares/delaySmallUpdates.js\n");

/***/ }),

/***/ "../js/cronus/store/middlewares/hash.js":
/*!**********************************************!*\
  !*** ../js/cronus/store/middlewares/hash.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var shared_store_types_ums__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/store/types/ums */ \"../js/shared/store/types/ums.js\");\n/* harmony import */ var cronus_logic_lock_hashHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/logic/lock/hashHelper */ \"../js/cronus/logic/lock/hashHelper.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function (store) {\n  return function (next) {\n    return function (action) {\n      if (action.type === shared_store_types_ums__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addHash) {\n        var hash = action.payload.hash;\n\n        if (hash !== 'false') {\n          cronus_logic_lock_hashHelper__WEBPACK_IMPORTED_MODULE_1__[\"default\"].saveHashToLocalStorage(action.payload);\n        } else {\n          // remove invalid hash\n          cronus_logic_lock_hashHelper__WEBPACK_IMPORTED_MODULE_1__[\"default\"].removeCurrentHashFromLocalStorage();\n        }\n      }\n\n      if (action.type === shared_store_types_ums__WEBPACK_IMPORTED_MODULE_0__[\"default\"].removeHash) {\n        cronus_logic_lock_hashHelper__WEBPACK_IMPORTED_MODULE_1__[\"default\"].removeCurrentHashFromLocalStorage();\n      }\n\n      return next(action);\n    };\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL21pZGRsZXdhcmVzL2hhc2guanMuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQUE7QUFDQTtBQUVBLCtEQUFlLFVBQUNFLEtBQUQ7QUFBQSxTQUFXLFVBQUNDLElBQUQ7QUFBQSxXQUFVLFVBQUNDLE1BQUQsRUFBWTtBQUM5QyxVQUFJQSxNQUFNLENBQUNDLElBQVAsS0FBZ0JMLHNFQUFwQixFQUE0QztBQUMxQyxZQUFRTyxJQUFSLEdBQWlCSCxNQUFNLENBQUNJLE9BQXhCLENBQVFELElBQVI7O0FBRUEsWUFBSUEsSUFBSSxLQUFLLE9BQWIsRUFBc0I7QUFDcEJOLFVBQUFBLDJGQUFBLENBQWtDRyxNQUFNLENBQUNJLE9BQXpDO0FBQ0QsU0FGRCxNQUVPO0FBQ0w7QUFDQVAsVUFBQUEsc0dBQUE7QUFDRDtBQUNGOztBQUVELFVBQUlHLE1BQU0sQ0FBQ0MsSUFBUCxLQUFnQkwseUVBQXBCLEVBQStDO0FBQzdDQyxRQUFBQSxzR0FBQTtBQUNEOztBQUVELGFBQU9FLElBQUksQ0FBQ0MsTUFBRCxDQUFYO0FBQ0QsS0FqQnlCO0FBQUEsR0FBWDtBQUFBLENBQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy9zdG9yZS9taWRkbGV3YXJlcy9oYXNoLmpzPzZkYWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHVtc0FjdGlvblR5cGVzIGZyb20gJ3NoYXJlZC9zdG9yZS90eXBlcy91bXMnO1xuaW1wb3J0IGhhc2hIZWxwZXIgZnJvbSAnY3JvbnVzL2xvZ2ljL2xvY2svaGFzaEhlbHBlcic7XG5cbmV4cG9ydCBkZWZhdWx0IChzdG9yZSkgPT4gKG5leHQpID0+IChhY3Rpb24pID0+IHtcbiAgaWYgKGFjdGlvbi50eXBlID09PSB1bXNBY3Rpb25UeXBlcy5hZGRIYXNoKSB7XG4gICAgY29uc3QgeyBoYXNoIH0gPSBhY3Rpb24ucGF5bG9hZDtcblxuICAgIGlmIChoYXNoICE9PSAnZmFsc2UnKSB7XG4gICAgICBoYXNoSGVscGVyLnNhdmVIYXNoVG9Mb2NhbFN0b3JhZ2UoYWN0aW9uLnBheWxvYWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZW1vdmUgaW52YWxpZCBoYXNoXG4gICAgICBoYXNoSGVscGVyLnJlbW92ZUN1cnJlbnRIYXNoRnJvbUxvY2FsU3RvcmFnZSgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gdW1zQWN0aW9uVHlwZXMucmVtb3ZlSGFzaCkge1xuICAgIGhhc2hIZWxwZXIucmVtb3ZlQ3VycmVudEhhc2hGcm9tTG9jYWxTdG9yYWdlKCk7XG4gIH1cblxuICByZXR1cm4gbmV4dChhY3Rpb24pO1xufTtcbiJdLCJuYW1lcyI6WyJ1bXNBY3Rpb25UeXBlcyIsImhhc2hIZWxwZXIiLCJzdG9yZSIsIm5leHQiLCJhY3Rpb24iLCJ0eXBlIiwiYWRkSGFzaCIsImhhc2giLCJwYXlsb2FkIiwic2F2ZUhhc2hUb0xvY2FsU3RvcmFnZSIsInJlbW92ZUN1cnJlbnRIYXNoRnJvbUxvY2FsU3RvcmFnZSIsInJlbW92ZUhhc2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/store/middlewares/hash.js\n");

/***/ }),

/***/ "../js/cronus/store/middlewares/ignoreOffAirRelatedModules.js":
/*!********************************************************************!*\
  !*** ../js/cronus/store/middlewares/ignoreOffAirRelatedModules.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/store/types/umsModules */ \"../js/cronus/store/types/umsModules.js\");\n/* harmony import */ var shared_store_actions_content__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/store/actions/content */ \"../js/shared/store/actions/content.js\");\n/* harmony import */ var cronus_store_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/store/selectors */ \"../js/cronus/store/selectors/index.js\");\n\n\n // Ignore these actions if it comes from the off-air recorded WebSocket\n// connection.\n\nvar actionTypesToIgnore = [cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setPollModule, cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setLogoModule, cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setLiveCTAModule, cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setShareModule, cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setAllTimeTotalModule, cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setAllViewersModule, cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setViewersModule];\n/* harmony default export */ __webpack_exports__[\"default\"] = (function (store) {\n  return function (next) {\n    return function (action) {\n      if (actionTypesToIgnore.includes(action.type)) {\n        var mediaId = action.payload.mediaId;\n        var state = store.getState();\n        var isActiveMediaAnOffAirVideo = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_2__.getMediaType)(state) === shared_store_actions_content__WEBPACK_IMPORTED_MODULE_1__.MEDIA_TYPES.offairVideo;\n        var isModuleCommingFromTheChannel = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_2__.getMediaId)(state) === mediaId;\n\n        if (isActiveMediaAnOffAirVideo && !isModuleCommingFromTheChannel) {\n          return undefined;\n        }\n      }\n\n      return next(action);\n    };\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL21pZGRsZXdhcmVzL2lnbm9yZU9mZkFpclJlbGF0ZWRNb2R1bGVzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0NBR0E7QUFDQTs7QUFDQSxJQUFNSSxtQkFBbUIsR0FBRyxDQUMxQkosbUZBRDBCLEVBRTFCQSxtRkFGMEIsRUFHMUJBLHNGQUgwQixFQUkxQkEsb0ZBSjBCLEVBSzFCQSwyRkFMMEIsRUFNMUJBLHlGQU4wQixFQU8xQkEsc0ZBUDBCLENBQTVCO0FBVUEsK0RBQWUsVUFBQ1ksS0FBRDtBQUFBLFNBQVcsVUFBQ0MsSUFBRDtBQUFBLFdBQVUsVUFBQ0MsTUFBRCxFQUFZO0FBQzlDLFVBQUlWLG1CQUFtQixDQUFDVyxRQUFwQixDQUE2QkQsTUFBTSxDQUFDRSxJQUFwQyxDQUFKLEVBQStDO0FBQzdDLFlBQ2FDLE9BRGIsR0FFSUgsTUFGSixDQUNFSSxPQURGLENBQ2FELE9BRGI7QUFJQSxZQUFNRSxLQUFLLEdBQUdQLEtBQUssQ0FBQ1EsUUFBTixFQUFkO0FBQ0EsWUFBTUMsMEJBQTBCLEdBQUduQixvRUFBWSxDQUFDaUIsS0FBRCxDQUFaLEtBQXdCbEIsaUZBQTNEO0FBQ0EsWUFBTXNCLDZCQUE2QixHQUFHcEIsa0VBQVUsQ0FBQ2dCLEtBQUQsQ0FBVixLQUFzQkYsT0FBNUQ7O0FBQ0EsWUFBSUksMEJBQTBCLElBQUksQ0FBQ0UsNkJBQW5DLEVBQWtFO0FBQ2hFLGlCQUFPQyxTQUFQO0FBQ0Q7QUFDRjs7QUFFRCxhQUFPWCxJQUFJLENBQUNDLE1BQUQsQ0FBWDtBQUNELEtBZnlCO0FBQUEsR0FBWDtBQUFBLENBQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy9zdG9yZS9taWRkbGV3YXJlcy9pZ25vcmVPZmZBaXJSZWxhdGVkTW9kdWxlcy5qcz9hODc4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB1bXNNb2R1bGVBY3Rpb25UeXBlcyBmcm9tICdjcm9udXMvc3RvcmUvdHlwZXMvdW1zTW9kdWxlcyc7XG5pbXBvcnQgeyBNRURJQV9UWVBFUyB9IGZyb20gJ3NoYXJlZC9zdG9yZS9hY3Rpb25zL2NvbnRlbnQnO1xuaW1wb3J0IHsgZ2V0TWVkaWFUeXBlLCBnZXRNZWRpYUlkIH0gZnJvbSAnY3JvbnVzL3N0b3JlL3NlbGVjdG9ycyc7XG5cbi8vIElnbm9yZSB0aGVzZSBhY3Rpb25zIGlmIGl0IGNvbWVzIGZyb20gdGhlIG9mZi1haXIgcmVjb3JkZWQgV2ViU29ja2V0XG4vLyBjb25uZWN0aW9uLlxuY29uc3QgYWN0aW9uVHlwZXNUb0lnbm9yZSA9IFtcbiAgdW1zTW9kdWxlQWN0aW9uVHlwZXMuc2V0UG9sbE1vZHVsZSxcbiAgdW1zTW9kdWxlQWN0aW9uVHlwZXMuc2V0TG9nb01vZHVsZSxcbiAgdW1zTW9kdWxlQWN0aW9uVHlwZXMuc2V0TGl2ZUNUQU1vZHVsZSxcbiAgdW1zTW9kdWxlQWN0aW9uVHlwZXMuc2V0U2hhcmVNb2R1bGUsXG4gIHVtc01vZHVsZUFjdGlvblR5cGVzLnNldEFsbFRpbWVUb3RhbE1vZHVsZSxcbiAgdW1zTW9kdWxlQWN0aW9uVHlwZXMuc2V0QWxsVmlld2Vyc01vZHVsZSxcbiAgdW1zTW9kdWxlQWN0aW9uVHlwZXMuc2V0Vmlld2Vyc01vZHVsZSxcbl07XG5cbmV4cG9ydCBkZWZhdWx0IChzdG9yZSkgPT4gKG5leHQpID0+IChhY3Rpb24pID0+IHtcbiAgaWYgKGFjdGlvblR5cGVzVG9JZ25vcmUuaW5jbHVkZXMoYWN0aW9uLnR5cGUpKSB7XG4gICAgY29uc3Qge1xuICAgICAgcGF5bG9hZDogeyBtZWRpYUlkIH0sXG4gICAgfSA9IGFjdGlvbjtcblxuICAgIGNvbnN0IHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBjb25zdCBpc0FjdGl2ZU1lZGlhQW5PZmZBaXJWaWRlbyA9IGdldE1lZGlhVHlwZShzdGF0ZSkgPT09IE1FRElBX1RZUEVTLm9mZmFpclZpZGVvO1xuICAgIGNvbnN0IGlzTW9kdWxlQ29tbWluZ0Zyb21UaGVDaGFubmVsID0gZ2V0TWVkaWFJZChzdGF0ZSkgPT09IG1lZGlhSWQ7XG4gICAgaWYgKGlzQWN0aXZlTWVkaWFBbk9mZkFpclZpZGVvICYmICFpc01vZHVsZUNvbW1pbmdGcm9tVGhlQ2hhbm5lbCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV4dChhY3Rpb24pO1xufTtcbiJdLCJuYW1lcyI6WyJ1bXNNb2R1bGVBY3Rpb25UeXBlcyIsIk1FRElBX1RZUEVTIiwiZ2V0TWVkaWFUeXBlIiwiZ2V0TWVkaWFJZCIsImFjdGlvblR5cGVzVG9JZ25vcmUiLCJzZXRQb2xsTW9kdWxlIiwic2V0TG9nb01vZHVsZSIsInNldExpdmVDVEFNb2R1bGUiLCJzZXRTaGFyZU1vZHVsZSIsInNldEFsbFRpbWVUb3RhbE1vZHVsZSIsInNldEFsbFZpZXdlcnNNb2R1bGUiLCJzZXRWaWV3ZXJzTW9kdWxlIiwic3RvcmUiLCJuZXh0IiwiYWN0aW9uIiwiaW5jbHVkZXMiLCJ0eXBlIiwibWVkaWFJZCIsInBheWxvYWQiLCJzdGF0ZSIsImdldFN0YXRlIiwiaXNBY3RpdmVNZWRpYUFuT2ZmQWlyVmlkZW8iLCJvZmZhaXJWaWRlbyIsImlzTW9kdWxlQ29tbWluZ0Zyb21UaGVDaGFubmVsIiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/store/middlewares/ignoreOffAirRelatedModules.js\n");

/***/ }),

/***/ "../js/cronus/store/middlewares/playback.js":
/*!**************************************************!*\
  !*** ../js/cronus/store/middlewares/playback.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var shared_store_types_playback__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/store/types/playback */ \"../js/shared/store/types/playback.js\");\n/* harmony import */ var cronus_store_types_playback__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/store/types/playback */ \"../js/cronus/store/types/playback.js\");\n/* harmony import */ var shared_logic_progressHistory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/logic/progressHistory */ \"../js/shared/logic/progressHistory.js\");\n/* harmony import */ var cronus_store_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/store/selectors */ \"../js/cronus/store/selectors/index.js\");\n/* harmony import */ var shared_consts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! shared/consts */ \"../js/shared/consts.js\");\n/* harmony import */ var cronus_logic_seekPosition__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cronus/logic/seekPosition */ \"../js/cronus/logic/seekPosition.js\");\n/* harmony import */ var cronus_logic_initialSeek__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! cronus/logic/initialSeek */ \"../js/cronus/logic/initialSeek.js\");\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function (store) {\n  return function (next) {\n    return function (action) {\n      if (action.type === cronus_store_types_playback__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setVideoTagDuration) {\n        var duration = action.payload;\n        var state = store.getState();\n        var mediaType = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_3__.getMediaType)(state);\n\n        var _getActiveMediaIdAsOb = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_3__.getActiveMediaIdAsObject)(state),\n            id = _getActiveMediaIdAsOb.id;\n\n        var progressInfo = shared_logic_progressHistory__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getSavedProgressToVideoId(id);\n\n        if (!(0,cronus_logic_initialSeek__WEBPACK_IMPORTED_MODULE_6__.isInitialSeekSupported)(mediaType)) {\n          return next(action);\n        }\n\n        if (duration === undefined || !progressInfo) {\n          return next(action);\n        }\n\n        var progress = progressInfo.progress,\n            cut = progressInfo.cut;\n        var trimInfo = state.content.trimInfo;\n        var trimmedProgress = cut ? (0,cronus_logic_seekPosition__WEBPACK_IMPORTED_MODULE_5__.getRelativeSeekPositionInMs)(progress) : progress;\n        var trimRemoved = cut && !trimInfo;\n        var trimChanged = cut && trimInfo && (cut[0] !== trimInfo[0] || cut[1] !== trimInfo[1]);\n        var durationInMs = action.payload * 1000;\n        var savedProgressWithOffset = trimmedProgress - shared_consts__WEBPACK_IMPORTED_MODULE_4__[\"default\"].CONTINUE_WATCHING_OFFSET_IN_MS;\n        var invalidProgress = savedProgressWithOffset < 0 || savedProgressWithOffset >= durationInMs - shared_consts__WEBPACK_IMPORTED_MODULE_4__[\"default\"].CONTINUE_WATCHING_OFFSET_IN_MS;\n\n        if (trimRemoved || trimChanged || invalidProgress) {\n          shared_logic_progressHistory__WEBPACK_IMPORTED_MODULE_2__[\"default\"].removeProgressForVideoId(id);\n        }\n      }\n\n      if (action.type === shared_store_types_playback__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setCurrentTime) {\n        var _state = store.getState();\n\n        var _mediaType = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_3__.getMediaType)(_state);\n\n        if (!(0,cronus_logic_initialSeek__WEBPACK_IMPORTED_MODULE_6__.isInitialSeekSupported)(_mediaType)) {\n          return next(action);\n        }\n\n        var _trimInfo = _state.content.trimInfo;\n\n        var _getActiveMediaIdAsOb2 = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_3__.getActiveMediaIdAsObject)(_state),\n            _id = _getActiveMediaIdAsOb2.id;\n\n        var currentTime = action.payload.currentTime;\n        var currentTimeInMs = Math.round(currentTime * 1000);\n        shared_logic_progressHistory__WEBPACK_IMPORTED_MODULE_2__[\"default\"].saveProgressToCurrentVideoId(currentTimeInMs, _id, _trimInfo);\n      }\n\n      return next(action);\n    };\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL21pZGRsZXdhcmVzL3BsYXliYWNrLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSwrREFBZSxVQUFDUSxLQUFEO0FBQUEsU0FBVyxVQUFDQyxJQUFEO0FBQUEsV0FBVSxVQUFDQyxNQUFELEVBQVk7QUFDOUMsVUFBSUEsTUFBTSxDQUFDQyxJQUFQLEtBQWdCVix1RkFBcEIsRUFBNkQ7QUFDM0QsWUFBTVksUUFBUSxHQUFHSCxNQUFNLENBQUNJLE9BQXhCO0FBQ0EsWUFBTUMsS0FBSyxHQUFHUCxLQUFLLENBQUNRLFFBQU4sRUFBZDtBQUNBLFlBQU1DLFNBQVMsR0FBR2Isb0VBQVksQ0FBQ1csS0FBRCxDQUE5Qjs7QUFDQSxvQ0FBZVosZ0ZBQXdCLENBQUNZLEtBQUQsQ0FBdkM7QUFBQSxZQUFRRyxFQUFSLHlCQUFRQSxFQUFSOztBQUNBLFlBQU1DLFlBQVksR0FBR2pCLDhGQUFBLENBQTBDZ0IsRUFBMUMsQ0FBckI7O0FBRUEsWUFBSSxDQUFDWCxnRkFBc0IsQ0FBQ1UsU0FBRCxDQUEzQixFQUF3QztBQUN0QyxpQkFBT1IsSUFBSSxDQUFDQyxNQUFELENBQVg7QUFDRDs7QUFFRCxZQUFJRyxRQUFRLEtBQUtRLFNBQWIsSUFBMEIsQ0FBQ0YsWUFBL0IsRUFBNkM7QUFDM0MsaUJBQU9WLElBQUksQ0FBQ0MsTUFBRCxDQUFYO0FBQ0Q7O0FBRUQsWUFBUVksUUFBUixHQUEwQkgsWUFBMUIsQ0FBUUcsUUFBUjtBQUFBLFlBQWtCQyxHQUFsQixHQUEwQkosWUFBMUIsQ0FBa0JJLEdBQWxCO0FBQ0EsWUFBUUMsUUFBUixHQUFxQlQsS0FBSyxDQUFDVSxPQUEzQixDQUFRRCxRQUFSO0FBQ0EsWUFBTUUsZUFBZSxHQUFHSCxHQUFHLEdBQUdqQixzRkFBMkIsQ0FBQ2dCLFFBQUQsQ0FBOUIsR0FBMkNBLFFBQXRFO0FBQ0EsWUFBTUssV0FBVyxHQUFHSixHQUFHLElBQUksQ0FBQ0MsUUFBNUI7QUFDQSxZQUFNSSxXQUFXLEdBQUdMLEdBQUcsSUFBSUMsUUFBUCxLQUFvQkQsR0FBRyxDQUFDLENBQUQsQ0FBSCxLQUFXQyxRQUFRLENBQUMsQ0FBRCxDQUFuQixJQUEwQkQsR0FBRyxDQUFDLENBQUQsQ0FBSCxLQUFXQyxRQUFRLENBQUMsQ0FBRCxDQUFqRSxDQUFwQjtBQUVBLFlBQU1LLFlBQVksR0FBR25CLE1BQU0sQ0FBQ0ksT0FBUCxHQUFpQixJQUF0QztBQUVBLFlBQU1nQix1QkFBdUIsR0FBR0osZUFBZSxHQUFHckIsb0ZBQWxEO0FBQ0EsWUFBTTJCLGVBQWUsR0FDbkJGLHVCQUF1QixHQUFHLENBQTFCLElBQ0FBLHVCQUF1QixJQUFJRCxZQUFZLEdBQUd4QixvRkFGNUM7O0FBSUEsWUFBSXNCLFdBQVcsSUFBSUMsV0FBZixJQUE4QkksZUFBbEMsRUFBbUQ7QUFDakQ5QixVQUFBQSw2RkFBQSxDQUF5Q2dCLEVBQXpDO0FBQ0Q7QUFDRjs7QUFFRCxVQUFJUixNQUFNLENBQUNDLElBQVAsS0FBZ0JYLGtGQUFwQixFQUE4RDtBQUM1RCxZQUFNZSxNQUFLLEdBQUdQLEtBQUssQ0FBQ1EsUUFBTixFQUFkOztBQUNBLFlBQU1DLFVBQVMsR0FBR2Isb0VBQVksQ0FBQ1csTUFBRCxDQUE5Qjs7QUFFQSxZQUFJLENBQUNSLGdGQUFzQixDQUFDVSxVQUFELENBQTNCLEVBQXdDO0FBQ3RDLGlCQUFPUixJQUFJLENBQUNDLE1BQUQsQ0FBWDtBQUNEOztBQUVELFlBQVFjLFNBQVIsR0FBcUJULE1BQUssQ0FBQ1UsT0FBM0IsQ0FBUUQsUUFBUjs7QUFDQSxxQ0FBZXJCLGdGQUF3QixDQUFDWSxNQUFELENBQXZDO0FBQUEsWUFBUUcsR0FBUiwwQkFBUUEsRUFBUjs7QUFDQSxZQUFRaUIsV0FBUixHQUF3QnpCLE1BQU0sQ0FBQ0ksT0FBL0IsQ0FBUXFCLFdBQVI7QUFDQSxZQUFNQyxlQUFlLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXSCxXQUFXLEdBQUcsSUFBekIsQ0FBeEI7QUFFQWpDLFFBQUFBLGlHQUFBLENBQTZDa0MsZUFBN0MsRUFBOERsQixHQUE5RCxFQUFrRU0sU0FBbEU7QUFDRDs7QUFFRCxhQUFPZixJQUFJLENBQUNDLE1BQUQsQ0FBWDtBQUNELEtBbkR5QjtBQUFBLEdBQVg7QUFBQSxDQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvc3RvcmUvbWlkZGxld2FyZXMvcGxheWJhY2suanM/NTBhOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc2hhcmVkUGxheWJhY2tBY3Rpb25UeXBlcyBmcm9tICdzaGFyZWQvc3RvcmUvdHlwZXMvcGxheWJhY2snO1xuaW1wb3J0IHBsYXliYWNrQWN0aW9uVHlwZXMgZnJvbSAnY3JvbnVzL3N0b3JlL3R5cGVzL3BsYXliYWNrJztcbmltcG9ydCBwcm9ncmVzc0hpc3RvcnkgZnJvbSAnc2hhcmVkL2xvZ2ljL3Byb2dyZXNzSGlzdG9yeSc7XG5pbXBvcnQgeyBnZXRBY3RpdmVNZWRpYUlkQXNPYmplY3QsIGdldE1lZGlhVHlwZSB9IGZyb20gJ2Nyb251cy9zdG9yZS9zZWxlY3RvcnMnO1xuaW1wb3J0IGNvbnN0cyBmcm9tICdzaGFyZWQvY29uc3RzJztcbmltcG9ydCB7IGdldFJlbGF0aXZlU2Vla1Bvc2l0aW9uSW5NcyB9IGZyb20gJ2Nyb251cy9sb2dpYy9zZWVrUG9zaXRpb24nO1xuaW1wb3J0IHsgaXNJbml0aWFsU2Vla1N1cHBvcnRlZCB9IGZyb20gJ2Nyb251cy9sb2dpYy9pbml0aWFsU2Vlayc7XG5cbmV4cG9ydCBkZWZhdWx0IChzdG9yZSkgPT4gKG5leHQpID0+IChhY3Rpb24pID0+IHtcbiAgaWYgKGFjdGlvbi50eXBlID09PSBwbGF5YmFja0FjdGlvblR5cGVzLnNldFZpZGVvVGFnRHVyYXRpb24pIHtcbiAgICBjb25zdCBkdXJhdGlvbiA9IGFjdGlvbi5wYXlsb2FkO1xuICAgIGNvbnN0IHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBjb25zdCBtZWRpYVR5cGUgPSBnZXRNZWRpYVR5cGUoc3RhdGUpO1xuICAgIGNvbnN0IHsgaWQgfSA9IGdldEFjdGl2ZU1lZGlhSWRBc09iamVjdChzdGF0ZSk7XG4gICAgY29uc3QgcHJvZ3Jlc3NJbmZvID0gcHJvZ3Jlc3NIaXN0b3J5LmdldFNhdmVkUHJvZ3Jlc3NUb1ZpZGVvSWQoaWQpO1xuXG4gICAgaWYgKCFpc0luaXRpYWxTZWVrU3VwcG9ydGVkKG1lZGlhVHlwZSkpIHtcbiAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgfVxuXG4gICAgaWYgKGR1cmF0aW9uID09PSB1bmRlZmluZWQgfHwgIXByb2dyZXNzSW5mbykge1xuICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICB9XG5cbiAgICBjb25zdCB7IHByb2dyZXNzLCBjdXQgfSA9IHByb2dyZXNzSW5mbztcbiAgICBjb25zdCB7IHRyaW1JbmZvIH0gPSBzdGF0ZS5jb250ZW50O1xuICAgIGNvbnN0IHRyaW1tZWRQcm9ncmVzcyA9IGN1dCA/IGdldFJlbGF0aXZlU2Vla1Bvc2l0aW9uSW5Ncyhwcm9ncmVzcykgOiBwcm9ncmVzcztcbiAgICBjb25zdCB0cmltUmVtb3ZlZCA9IGN1dCAmJiAhdHJpbUluZm87XG4gICAgY29uc3QgdHJpbUNoYW5nZWQgPSBjdXQgJiYgdHJpbUluZm8gJiYgKGN1dFswXSAhPT0gdHJpbUluZm9bMF0gfHwgY3V0WzFdICE9PSB0cmltSW5mb1sxXSk7XG5cbiAgICBjb25zdCBkdXJhdGlvbkluTXMgPSBhY3Rpb24ucGF5bG9hZCAqIDEwMDA7XG5cbiAgICBjb25zdCBzYXZlZFByb2dyZXNzV2l0aE9mZnNldCA9IHRyaW1tZWRQcm9ncmVzcyAtIGNvbnN0cy5DT05USU5VRV9XQVRDSElOR19PRkZTRVRfSU5fTVM7XG4gICAgY29uc3QgaW52YWxpZFByb2dyZXNzID1cbiAgICAgIHNhdmVkUHJvZ3Jlc3NXaXRoT2Zmc2V0IDwgMCB8fFxuICAgICAgc2F2ZWRQcm9ncmVzc1dpdGhPZmZzZXQgPj0gZHVyYXRpb25Jbk1zIC0gY29uc3RzLkNPTlRJTlVFX1dBVENISU5HX09GRlNFVF9JTl9NUztcblxuICAgIGlmICh0cmltUmVtb3ZlZCB8fCB0cmltQ2hhbmdlZCB8fCBpbnZhbGlkUHJvZ3Jlc3MpIHtcbiAgICAgIHByb2dyZXNzSGlzdG9yeS5yZW1vdmVQcm9ncmVzc0ZvclZpZGVvSWQoaWQpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gc2hhcmVkUGxheWJhY2tBY3Rpb25UeXBlcy5zZXRDdXJyZW50VGltZSkge1xuICAgIGNvbnN0IHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBjb25zdCBtZWRpYVR5cGUgPSBnZXRNZWRpYVR5cGUoc3RhdGUpO1xuXG4gICAgaWYgKCFpc0luaXRpYWxTZWVrU3VwcG9ydGVkKG1lZGlhVHlwZSkpIHtcbiAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgfVxuXG4gICAgY29uc3QgeyB0cmltSW5mbyB9ID0gc3RhdGUuY29udGVudDtcbiAgICBjb25zdCB7IGlkIH0gPSBnZXRBY3RpdmVNZWRpYUlkQXNPYmplY3Qoc3RhdGUpO1xuICAgIGNvbnN0IHsgY3VycmVudFRpbWUgfSA9IGFjdGlvbi5wYXlsb2FkO1xuICAgIGNvbnN0IGN1cnJlbnRUaW1lSW5NcyA9IE1hdGgucm91bmQoY3VycmVudFRpbWUgKiAxMDAwKTtcblxuICAgIHByb2dyZXNzSGlzdG9yeS5zYXZlUHJvZ3Jlc3NUb0N1cnJlbnRWaWRlb0lkKGN1cnJlbnRUaW1lSW5NcywgaWQsIHRyaW1JbmZvKTtcbiAgfVxuXG4gIHJldHVybiBuZXh0KGFjdGlvbik7XG59O1xuIl0sIm5hbWVzIjpbInNoYXJlZFBsYXliYWNrQWN0aW9uVHlwZXMiLCJwbGF5YmFja0FjdGlvblR5cGVzIiwicHJvZ3Jlc3NIaXN0b3J5IiwiZ2V0QWN0aXZlTWVkaWFJZEFzT2JqZWN0IiwiZ2V0TWVkaWFUeXBlIiwiY29uc3RzIiwiZ2V0UmVsYXRpdmVTZWVrUG9zaXRpb25Jbk1zIiwiaXNJbml0aWFsU2Vla1N1cHBvcnRlZCIsInN0b3JlIiwibmV4dCIsImFjdGlvbiIsInR5cGUiLCJzZXRWaWRlb1RhZ0R1cmF0aW9uIiwiZHVyYXRpb24iLCJwYXlsb2FkIiwic3RhdGUiLCJnZXRTdGF0ZSIsIm1lZGlhVHlwZSIsImlkIiwicHJvZ3Jlc3NJbmZvIiwiZ2V0U2F2ZWRQcm9ncmVzc1RvVmlkZW9JZCIsInVuZGVmaW5lZCIsInByb2dyZXNzIiwiY3V0IiwidHJpbUluZm8iLCJjb250ZW50IiwidHJpbW1lZFByb2dyZXNzIiwidHJpbVJlbW92ZWQiLCJ0cmltQ2hhbmdlZCIsImR1cmF0aW9uSW5NcyIsInNhdmVkUHJvZ3Jlc3NXaXRoT2Zmc2V0IiwiQ09OVElOVUVfV0FUQ0hJTkdfT0ZGU0VUX0lOX01TIiwiaW52YWxpZFByb2dyZXNzIiwicmVtb3ZlUHJvZ3Jlc3NGb3JWaWRlb0lkIiwic2V0Q3VycmVudFRpbWUiLCJjdXJyZW50VGltZSIsImN1cnJlbnRUaW1lSW5NcyIsIk1hdGgiLCJyb3VuZCIsInNhdmVQcm9ncmVzc1RvQ3VycmVudFZpZGVvSWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/store/middlewares/playback.js\n");

/***/ }),

/***/ "../js/cronus/store/middlewares/player.js":
/*!************************************************!*\
  !*** ../js/cronus/store/middlewares/player.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var shared_lib_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/lib/storage */ \"../js/shared/lib/storage.js\");\n/* harmony import */ var shared_store_types_player__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/store/types/player */ \"../js/shared/store/types/player.js\");\n/* harmony import */ var shared_store_actions_player__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/store/actions/player */ \"../js/shared/store/actions/player.js\");\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function () {\n  return function (next) {\n    return function (action) {\n      var result = next(action);\n\n      if (action.type === shared_store_types_player__WEBPACK_IMPORTED_MODULE_1__[\"default\"].hideNotification && action.payload === shared_store_actions_player__WEBPACK_IMPORTED_MODULE_2__.NOTIFICATION_TYPES.oldBrowser) {\n        shared_lib_storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].set(shared_lib_storage__WEBPACK_IMPORTED_MODULE_0__.oldBrowserNotificationKey, true, {\n          expires: 7\n        });\n      }\n\n      return result;\n    };\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL21pZGRsZXdhcmVzL3BsYXllci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBRUEsK0RBQWU7QUFBQSxTQUFNLFVBQUNJLElBQUQ7QUFBQSxXQUFVLFVBQUNDLE1BQUQsRUFBWTtBQUN6QyxVQUFNQyxNQUFNLEdBQUdGLElBQUksQ0FBQ0MsTUFBRCxDQUFuQjs7QUFFQSxVQUNFQSxNQUFNLENBQUNFLElBQVAsS0FBZ0JMLGtGQUFoQixJQUNBRyxNQUFNLENBQUNJLE9BQVAsS0FBbUJOLHNGQUZyQixFQUdFO0FBQ0FILFFBQUFBLDhEQUFBLENBQVlDLHlFQUFaLEVBQXVDLElBQXZDLEVBQTZDO0FBQUVXLFVBQUFBLE9BQU8sRUFBRTtBQUFYLFNBQTdDO0FBQ0Q7O0FBRUQsYUFBT04sTUFBUDtBQUNELEtBWG9CO0FBQUEsR0FBTjtBQUFBLENBQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy9zdG9yZS9taWRkbGV3YXJlcy9wbGF5ZXIuanM/MmNjZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3RvcmFnZSwgeyBvbGRCcm93c2VyTm90aWZpY2F0aW9uS2V5IH0gZnJvbSAnc2hhcmVkL2xpYi9zdG9yYWdlJztcbmltcG9ydCBwbGF5ZXJBY3Rpb25UeXBlcyBmcm9tICdzaGFyZWQvc3RvcmUvdHlwZXMvcGxheWVyJztcbmltcG9ydCB7IE5PVElGSUNBVElPTl9UWVBFUyB9IGZyb20gJ3NoYXJlZC9zdG9yZS9hY3Rpb25zL3BsYXllcic7XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IChuZXh0KSA9PiAoYWN0aW9uKSA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IG5leHQoYWN0aW9uKTtcblxuICBpZiAoXG4gICAgYWN0aW9uLnR5cGUgPT09IHBsYXllckFjdGlvblR5cGVzLmhpZGVOb3RpZmljYXRpb24gJiZcbiAgICBhY3Rpb24ucGF5bG9hZCA9PT0gTk9USUZJQ0FUSU9OX1RZUEVTLm9sZEJyb3dzZXJcbiAgKSB7XG4gICAgc3RvcmFnZS5zZXQob2xkQnJvd3Nlck5vdGlmaWNhdGlvbktleSwgdHJ1ZSwgeyBleHBpcmVzOiA3IH0pO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iXSwibmFtZXMiOlsic3RvcmFnZSIsIm9sZEJyb3dzZXJOb3RpZmljYXRpb25LZXkiLCJwbGF5ZXJBY3Rpb25UeXBlcyIsIk5PVElGSUNBVElPTl9UWVBFUyIsIm5leHQiLCJhY3Rpb24iLCJyZXN1bHQiLCJ0eXBlIiwiaGlkZU5vdGlmaWNhdGlvbiIsInBheWxvYWQiLCJvbGRCcm93c2VyIiwic2V0IiwiZXhwaXJlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/store/middlewares/player.js\n");

/***/ }),

/***/ "../js/cronus/store/middlewares/settings.js":
/*!**************************************************!*\
  !*** ../js/cronus/store/middlewares/settings.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var shared_lib_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/lib/storage */ \"../js/shared/lib/storage.js\");\n/* harmony import */ var shared_store_types_settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/store/types/settings */ \"../js/shared/store/types/settings.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function (store) {\n  return function (next) {\n    return function (action) {\n      var result = next(action);\n\n      if (action.type === shared_store_types_settings__WEBPACK_IMPORTED_MODULE_1__[\"default\"].toggleDebug) {\n        var debug = store.getState().settings.debug;\n        shared_lib_storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].set(shared_lib_storage__WEBPACK_IMPORTED_MODULE_0__.debugConsoleStorageKey, debug);\n      }\n\n      return result;\n    };\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL21pZGRsZXdhcmVzL3NldHRpbmdzLmpzLmpzIiwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ0E7QUFFQSwrREFBZSxVQUFDRyxLQUFEO0FBQUEsU0FBVyxVQUFDQyxJQUFEO0FBQUEsV0FBVSxVQUFDQyxNQUFELEVBQVk7QUFDOUMsVUFBTUMsTUFBTSxHQUFHRixJQUFJLENBQUNDLE1BQUQsQ0FBbkI7O0FBRUEsVUFBSUEsTUFBTSxDQUFDRSxJQUFQLEtBQWdCTCwrRUFBcEIsRUFBMkQ7QUFDekQsWUFBUU8sS0FBUixHQUFrQk4sS0FBSyxDQUFDTyxRQUFOLEdBQWlCQyxRQUFuQyxDQUFRRixLQUFSO0FBQ0FULFFBQUFBLDhEQUFBLENBQVlDLHNFQUFaLEVBQW9DUSxLQUFwQztBQUNEOztBQUVELGFBQU9ILE1BQVA7QUFDRCxLQVR5QjtBQUFBLEdBQVg7QUFBQSxDQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvc3RvcmUvbWlkZGxld2FyZXMvc2V0dGluZ3MuanM/MmUxNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3RvcmFnZSwgeyBkZWJ1Z0NvbnNvbGVTdG9yYWdlS2V5IH0gZnJvbSAnc2hhcmVkL2xpYi9zdG9yYWdlJztcbmltcG9ydCBzaGFyZWRTZXR0aW5nc0FjdGlvblR5cGVzIGZyb20gJ3NoYXJlZC9zdG9yZS90eXBlcy9zZXR0aW5ncyc7XG5cbmV4cG9ydCBkZWZhdWx0IChzdG9yZSkgPT4gKG5leHQpID0+IChhY3Rpb24pID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gbmV4dChhY3Rpb24pO1xuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gc2hhcmVkU2V0dGluZ3NBY3Rpb25UeXBlcy50b2dnbGVEZWJ1Zykge1xuICAgIGNvbnN0IHsgZGVidWcgfSA9IHN0b3JlLmdldFN0YXRlKCkuc2V0dGluZ3M7XG4gICAgc3RvcmFnZS5zZXQoZGVidWdDb25zb2xlU3RvcmFnZUtleSwgZGVidWcpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iXSwibmFtZXMiOlsic3RvcmFnZSIsImRlYnVnQ29uc29sZVN0b3JhZ2VLZXkiLCJzaGFyZWRTZXR0aW5nc0FjdGlvblR5cGVzIiwic3RvcmUiLCJuZXh0IiwiYWN0aW9uIiwicmVzdWx0IiwidHlwZSIsInRvZ2dsZURlYnVnIiwiZGVidWciLCJnZXRTdGF0ZSIsInNldHRpbmdzIiwic2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/store/middlewares/settings.js\n");

/***/ }),

/***/ "../js/cronus/store/middlewares/shareModuleTransform.js":
/*!**************************************************************!*\
  !*** ../js/cronus/store/middlewares/shareModuleTransform.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/store/types/umsModules */ \"../js/cronus/store/types/umsModules.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n/**\n * @param {boolean|Array<{ name: string }>} shareData\n * @returns {boolean|Object}\n * @example\n * transformShare([\n *   { appId: 123, name: 'facebook', url: '...' },\n *   { shortenedUrl: '...', prefix: '...', name: 'twitter', type: 'hash' },\n *   { name: 'embed', embedCode: '...' },\n *   { name: 'mail' },\n * ]);\n * // {\n * //   facebook: { appId: 123, name: 'facebook', url: '...' },\n * //   twitter: { shortenedUrl: '...', prefix: '...', name: 'twitter', type: 'hash' },\n * //   embed: { name: 'embed', embedCode: '...' },\n * //   mail: { name: 'mail' },\n * // }\n */\n\nfunction transformShare(shareData) {\n  if (typeof shareData === 'boolean') {\n    return shareData;\n  }\n\n  return shareData.reduce(function (soFar, curr) {\n    return _objectSpread(_objectSpread({}, soFar), {}, _defineProperty({}, curr.name, curr));\n  }, {});\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function () {\n  return function (next) {\n    return function (action) {\n      if (action.type === cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setShareModule) {\n        var _action$payload = action.payload,\n            mediaId = _action$payload.mediaId,\n            module = _action$payload.module;\n        var modifiedPayload = {\n          mediaId: mediaId,\n          module: transformShare(module)\n        };\n        return next(_objectSpread(_objectSpread({}, action), {}, {\n          payload: modifiedPayload\n        }));\n      }\n\n      return next(action);\n    };\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL21pZGRsZXdhcmVzL3NoYXJlTW9kdWxlVHJhbnNmb3JtLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFNBQVNDLGNBQVQsQ0FBd0JDLFNBQXhCLEVBQW1DO0FBQ2pDLE1BQUksT0FBT0EsU0FBUCxLQUFxQixTQUF6QixFQUFvQztBQUNsQyxXQUFPQSxTQUFQO0FBQ0Q7O0FBRUQsU0FBT0EsU0FBUyxDQUFDQyxNQUFWLENBQWlCLFVBQUNDLEtBQUQsRUFBUUMsSUFBUjtBQUFBLDJDQUF1QkQsS0FBdkIsMkJBQStCQyxJQUFJLENBQUNDLElBQXBDLEVBQTJDRCxJQUEzQztBQUFBLEdBQWpCLEVBQXFFLEVBQXJFLENBQVA7QUFDRDs7QUFFRCwrREFBZTtBQUFBLFNBQU0sVUFBQ0UsSUFBRDtBQUFBLFdBQVUsVUFBQ0MsTUFBRCxFQUFZO0FBQ3pDLFVBQUlBLE1BQU0sQ0FBQ0MsSUFBUCxLQUFnQlQsb0ZBQXBCLEVBQXlEO0FBQ3ZELDhCQUVJUSxNQUZKLENBQ0VHLE9BREY7QUFBQSxZQUNhQyxPQURiLG1CQUNhQSxPQURiO0FBQUEsWUFDc0JDLE1BRHRCLG1CQUNzQkEsTUFEdEI7QUFHQSxZQUFNQyxlQUFlLEdBQUc7QUFBRUYsVUFBQUEsT0FBTyxFQUFQQSxPQUFGO0FBQVdDLFVBQUFBLE1BQU0sRUFBRVosY0FBYyxDQUFDWSxNQUFEO0FBQWpDLFNBQXhCO0FBQ0EsZUFBT04sSUFBSSxpQ0FDTkMsTUFETTtBQUVURyxVQUFBQSxPQUFPLEVBQUVHO0FBRkEsV0FBWDtBQUlEOztBQUVELGFBQU9QLElBQUksQ0FBQ0MsTUFBRCxDQUFYO0FBQ0QsS0Fib0I7QUFBQSxHQUFOO0FBQUEsQ0FBZiIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vanMvY3JvbnVzL3N0b3JlL21pZGRsZXdhcmVzL3NoYXJlTW9kdWxlVHJhbnNmb3JtLmpzP2Y5MDgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHVtc01vZHVsZUFjdGlvblR5cGVzIGZyb20gJ2Nyb251cy9zdG9yZS90eXBlcy91bXNNb2R1bGVzJztcblxuLyoqXG4gKiBAcGFyYW0ge2Jvb2xlYW58QXJyYXk8eyBuYW1lOiBzdHJpbmcgfT59IHNoYXJlRGF0YVxuICogQHJldHVybnMge2Jvb2xlYW58T2JqZWN0fVxuICogQGV4YW1wbGVcbiAqIHRyYW5zZm9ybVNoYXJlKFtcbiAqICAgeyBhcHBJZDogMTIzLCBuYW1lOiAnZmFjZWJvb2snLCB1cmw6ICcuLi4nIH0sXG4gKiAgIHsgc2hvcnRlbmVkVXJsOiAnLi4uJywgcHJlZml4OiAnLi4uJywgbmFtZTogJ3R3aXR0ZXInLCB0eXBlOiAnaGFzaCcgfSxcbiAqICAgeyBuYW1lOiAnZW1iZWQnLCBlbWJlZENvZGU6ICcuLi4nIH0sXG4gKiAgIHsgbmFtZTogJ21haWwnIH0sXG4gKiBdKTtcbiAqIC8vIHtcbiAqIC8vICAgZmFjZWJvb2s6IHsgYXBwSWQ6IDEyMywgbmFtZTogJ2ZhY2Vib29rJywgdXJsOiAnLi4uJyB9LFxuICogLy8gICB0d2l0dGVyOiB7IHNob3J0ZW5lZFVybDogJy4uLicsIHByZWZpeDogJy4uLicsIG5hbWU6ICd0d2l0dGVyJywgdHlwZTogJ2hhc2gnIH0sXG4gKiAvLyAgIGVtYmVkOiB7IG5hbWU6ICdlbWJlZCcsIGVtYmVkQ29kZTogJy4uLicgfSxcbiAqIC8vICAgbWFpbDogeyBuYW1lOiAnbWFpbCcgfSxcbiAqIC8vIH1cbiAqL1xuZnVuY3Rpb24gdHJhbnNmb3JtU2hhcmUoc2hhcmVEYXRhKSB7XG4gIGlmICh0eXBlb2Ygc2hhcmVEYXRhID09PSAnYm9vbGVhbicpIHtcbiAgICByZXR1cm4gc2hhcmVEYXRhO1xuICB9XG5cbiAgcmV0dXJuIHNoYXJlRGF0YS5yZWR1Y2UoKHNvRmFyLCBjdXJyKSA9PiAoeyAuLi5zb0ZhciwgW2N1cnIubmFtZV06IGN1cnIgfSksIHt9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgKCkgPT4gKG5leHQpID0+IChhY3Rpb24pID0+IHtcbiAgaWYgKGFjdGlvbi50eXBlID09PSB1bXNNb2R1bGVBY3Rpb25UeXBlcy5zZXRTaGFyZU1vZHVsZSkge1xuICAgIGNvbnN0IHtcbiAgICAgIHBheWxvYWQ6IHsgbWVkaWFJZCwgbW9kdWxlIH0sXG4gICAgfSA9IGFjdGlvbjtcbiAgICBjb25zdCBtb2RpZmllZFBheWxvYWQgPSB7IG1lZGlhSWQsIG1vZHVsZTogdHJhbnNmb3JtU2hhcmUobW9kdWxlKSB9O1xuICAgIHJldHVybiBuZXh0KHtcbiAgICAgIC4uLmFjdGlvbixcbiAgICAgIHBheWxvYWQ6IG1vZGlmaWVkUGF5bG9hZCxcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBuZXh0KGFjdGlvbik7XG59O1xuIl0sIm5hbWVzIjpbInVtc01vZHVsZUFjdGlvblR5cGVzIiwidHJhbnNmb3JtU2hhcmUiLCJzaGFyZURhdGEiLCJyZWR1Y2UiLCJzb0ZhciIsImN1cnIiLCJuYW1lIiwibmV4dCIsImFjdGlvbiIsInR5cGUiLCJzZXRTaGFyZU1vZHVsZSIsInBheWxvYWQiLCJtZWRpYUlkIiwibW9kdWxlIiwibW9kaWZpZWRQYXlsb2FkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/store/middlewares/shareModuleTransform.js\n");

/***/ }),

/***/ "../js/cronus/store/middlewares/tracksTransform.js":
/*!*********************************************************!*\
  !*** ../js/cronus/store/middlewares/tracksTransform.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var shared_store_types_playback__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/store/types/playback */ \"../js/shared/store/types/playback.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\nvar tracksRelatedActions = [shared_store_types_playback__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setAudioTracks, shared_store_types_playback__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setClosedCaptionTracks];\n/**\n * @param {string} str\n * @returns {{ language: string|undefined, country: string|undefined }}\n */\n\nfunction splitLanguageAndCountry(str) {\n  if (!str) {\n    return {};\n  }\n\n  var match = str.match(/(\\w+)-(\\w+)/);\n\n  if (!match) {\n    return {\n      language: str\n    };\n  }\n\n  var _match = _slicedToArray(match, 3),\n      language = _match[1],\n      country = _match[2];\n\n  return {\n    language: language,\n    country: country\n  };\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function () {\n  return function (next) {\n    return function (action) {\n      if (tracksRelatedActions.includes(action.type)) {\n        var tracks = action.payload.tracks;\n        var transformedTracks = tracks.map(function (_ref, index) {\n          var id = _ref.id,\n              name = _ref.name,\n              lang = _ref.lang,\n              audioCodec = _ref.audioCodec,\n              def = _ref.default,\n              autoselect = _ref.autoselect,\n              forced = _ref.forced,\n              targetduration = _ref.targetduration,\n              active = _ref.active;\n\n          var _splitLanguageAndCoun = splitLanguageAndCountry(lang),\n              _splitLanguageAndCoun2 = _splitLanguageAndCoun.language,\n              language = _splitLanguageAndCoun2 === void 0 ? 'mis' : _splitLanguageAndCoun2,\n              _splitLanguageAndCoun3 = _splitLanguageAndCoun.country,\n              country = _splitLanguageAndCoun3 === void 0 ? '00' : _splitLanguageAndCoun3;\n\n          return {\n            id: id === undefined ? index : id,\n            label: name,\n            language: language,\n            country: country,\n            codec: audioCodec,\n            default: def,\n            autoselect: autoselect,\n            forced: forced,\n            targetDuration: targetduration,\n            active: active\n          };\n        });\n\n        var modifiedPayload = _objectSpread(_objectSpread({}, action.payload), {}, {\n          tracks: transformedTracks\n        });\n\n        return next(_objectSpread(_objectSpread({}, action), {}, {\n          payload: modifiedPayload\n        }));\n      }\n\n      return next(action);\n    };\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL21pZGRsZXdhcmVzL3RyYWNrc1RyYW5zZm9ybS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBRUEsSUFBTUMsb0JBQW9CLEdBQUcsQ0FDM0JELGtGQUQyQixFQUUzQkEsMEZBRjJCLENBQTdCO0FBS0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBU0ksdUJBQVQsQ0FBaUNDLEdBQWpDLEVBQXNDO0FBQ3BDLE1BQUksQ0FBQ0EsR0FBTCxFQUFVO0FBQ1IsV0FBTyxFQUFQO0FBQ0Q7O0FBRUQsTUFBTUMsS0FBSyxHQUFHRCxHQUFHLENBQUNDLEtBQUosQ0FBVSxhQUFWLENBQWQ7O0FBQ0EsTUFBSSxDQUFDQSxLQUFMLEVBQVk7QUFDVixXQUFPO0FBQUVDLE1BQUFBLFFBQVEsRUFBRUY7QUFBWixLQUFQO0FBQ0Q7O0FBRUQsOEJBQThCQyxLQUE5QjtBQUFBLE1BQVNDLFFBQVQ7QUFBQSxNQUFtQkMsT0FBbkI7O0FBQ0EsU0FBTztBQUFFRCxJQUFBQSxRQUFRLEVBQVJBLFFBQUY7QUFBWUMsSUFBQUEsT0FBTyxFQUFQQTtBQUFaLEdBQVA7QUFDRDs7QUFFRCwrREFBZTtBQUFBLFNBQU0sVUFBQ0MsSUFBRDtBQUFBLFdBQVUsVUFBQ0MsTUFBRCxFQUFZO0FBQ3pDLFVBQUlULG9CQUFvQixDQUFDVSxRQUFyQixDQUE4QkQsTUFBTSxDQUFDRSxJQUFyQyxDQUFKLEVBQWdEO0FBQzlDLFlBQVFDLE1BQVIsR0FBbUJILE1BQU0sQ0FBQ0ksT0FBMUIsQ0FBUUQsTUFBUjtBQUVBLFlBQU1FLGlCQUFpQixHQUFHRixNQUFNLENBQUNHLEdBQVAsQ0FDeEIsZ0JBRUVDLEtBRkYsRUFHSztBQUFBLGNBRkRDLEVBRUMsUUFGREEsRUFFQztBQUFBLGNBRkdDLElBRUgsUUFGR0EsSUFFSDtBQUFBLGNBRlNDLElBRVQsUUFGU0EsSUFFVDtBQUFBLGNBRmVDLFVBRWYsUUFGZUEsVUFFZjtBQUFBLGNBRm9DQyxHQUVwQyxRQUYyQkMsT0FFM0I7QUFBQSxjQUZ5Q0MsVUFFekMsUUFGeUNBLFVBRXpDO0FBQUEsY0FGcURDLE1BRXJELFFBRnFEQSxNQUVyRDtBQUFBLGNBRjZEQyxjQUU3RCxRQUY2REEsY0FFN0Q7QUFBQSxjQUY2RUMsTUFFN0UsUUFGNkVBLE1BRTdFOztBQUNILHNDQUE2Q3ZCLHVCQUF1QixDQUFDZ0IsSUFBRCxDQUFwRTtBQUFBLDZEQUFRYixRQUFSO0FBQUEsY0FBUUEsUUFBUix1Q0FBbUIsS0FBbkI7QUFBQSw2REFBMEJDLE9BQTFCO0FBQUEsY0FBMEJBLE9BQTFCLHVDQUFvQyxJQUFwQzs7QUFDQSxpQkFBTztBQUNMVSxZQUFBQSxFQUFFLEVBQUVBLEVBQUUsS0FBS1UsU0FBUCxHQUFtQlgsS0FBbkIsR0FBMkJDLEVBRDFCO0FBRUxXLFlBQUFBLEtBQUssRUFBRVYsSUFGRjtBQUdMWixZQUFBQSxRQUFRLEVBQVJBLFFBSEs7QUFJTEMsWUFBQUEsT0FBTyxFQUFQQSxPQUpLO0FBS0xzQixZQUFBQSxLQUFLLEVBQUVULFVBTEY7QUFNTEUsWUFBQUEsT0FBTyxFQUFFRCxHQU5KO0FBT0xFLFlBQUFBLFVBQVUsRUFBVkEsVUFQSztBQVFMQyxZQUFBQSxNQUFNLEVBQU5BLE1BUks7QUFTTE0sWUFBQUEsY0FBYyxFQUFFTCxjQVRYO0FBVUxDLFlBQUFBLE1BQU0sRUFBTkE7QUFWSyxXQUFQO0FBWUQsU0FsQnVCLENBQTFCOztBQXFCQSxZQUFNSyxlQUFlLG1DQUNoQnRCLE1BQU0sQ0FBQ0ksT0FEUztBQUVuQkQsVUFBQUEsTUFBTSxFQUFFRTtBQUZXLFVBQXJCOztBQUtBLGVBQU9OLElBQUksaUNBQ05DLE1BRE07QUFFVEksVUFBQUEsT0FBTyxFQUFFa0I7QUFGQSxXQUFYO0FBSUQ7O0FBRUQsYUFBT3ZCLElBQUksQ0FBQ0MsTUFBRCxDQUFYO0FBQ0QsS0FyQ29CO0FBQUEsR0FBTjtBQUFBLENBQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy9zdG9yZS9taWRkbGV3YXJlcy90cmFja3NUcmFuc2Zvcm0uanM/NzBmNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGxheWJhY2tBY3Rpb25UeXBlcyBmcm9tICdzaGFyZWQvc3RvcmUvdHlwZXMvcGxheWJhY2snO1xuXG5jb25zdCB0cmFja3NSZWxhdGVkQWN0aW9ucyA9IFtcbiAgcGxheWJhY2tBY3Rpb25UeXBlcy5zZXRBdWRpb1RyYWNrcyxcbiAgcGxheWJhY2tBY3Rpb25UeXBlcy5zZXRDbG9zZWRDYXB0aW9uVHJhY2tzLFxuXTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJucyB7eyBsYW5ndWFnZTogc3RyaW5nfHVuZGVmaW5lZCwgY291bnRyeTogc3RyaW5nfHVuZGVmaW5lZCB9fVxuICovXG5mdW5jdGlvbiBzcGxpdExhbmd1YWdlQW5kQ291bnRyeShzdHIpIHtcbiAgaWYgKCFzdHIpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICBjb25zdCBtYXRjaCA9IHN0ci5tYXRjaCgvKFxcdyspLShcXHcrKS8pO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuIHsgbGFuZ3VhZ2U6IHN0ciB9O1xuICB9XG5cbiAgY29uc3QgWywgbGFuZ3VhZ2UsIGNvdW50cnldID0gbWF0Y2g7XG4gIHJldHVybiB7IGxhbmd1YWdlLCBjb3VudHJ5IH07XG59XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IChuZXh0KSA9PiAoYWN0aW9uKSA9PiB7XG4gIGlmICh0cmFja3NSZWxhdGVkQWN0aW9ucy5pbmNsdWRlcyhhY3Rpb24udHlwZSkpIHtcbiAgICBjb25zdCB7IHRyYWNrcyB9ID0gYWN0aW9uLnBheWxvYWQ7XG5cbiAgICBjb25zdCB0cmFuc2Zvcm1lZFRyYWNrcyA9IHRyYWNrcy5tYXAoXG4gICAgICAoXG4gICAgICAgIHsgaWQsIG5hbWUsIGxhbmcsIGF1ZGlvQ29kZWMsIGRlZmF1bHQ6IGRlZiwgYXV0b3NlbGVjdCwgZm9yY2VkLCB0YXJnZXRkdXJhdGlvbiwgYWN0aXZlIH0sXG4gICAgICAgIGluZGV4LFxuICAgICAgKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgbGFuZ3VhZ2UgPSAnbWlzJywgY291bnRyeSA9ICcwMCcgfSA9IHNwbGl0TGFuZ3VhZ2VBbmRDb3VudHJ5KGxhbmcpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGlkOiBpZCA9PT0gdW5kZWZpbmVkID8gaW5kZXggOiBpZCxcbiAgICAgICAgICBsYWJlbDogbmFtZSxcbiAgICAgICAgICBsYW5ndWFnZSxcbiAgICAgICAgICBjb3VudHJ5LFxuICAgICAgICAgIGNvZGVjOiBhdWRpb0NvZGVjLFxuICAgICAgICAgIGRlZmF1bHQ6IGRlZixcbiAgICAgICAgICBhdXRvc2VsZWN0LFxuICAgICAgICAgIGZvcmNlZCxcbiAgICAgICAgICB0YXJnZXREdXJhdGlvbjogdGFyZ2V0ZHVyYXRpb24sXG4gICAgICAgICAgYWN0aXZlLFxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICApO1xuXG4gICAgY29uc3QgbW9kaWZpZWRQYXlsb2FkID0ge1xuICAgICAgLi4uYWN0aW9uLnBheWxvYWQsXG4gICAgICB0cmFja3M6IHRyYW5zZm9ybWVkVHJhY2tzLFxuICAgIH07XG5cbiAgICByZXR1cm4gbmV4dCh7XG4gICAgICAuLi5hY3Rpb24sXG4gICAgICBwYXlsb2FkOiBtb2RpZmllZFBheWxvYWQsXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gbmV4dChhY3Rpb24pO1xufTtcbiJdLCJuYW1lcyI6WyJwbGF5YmFja0FjdGlvblR5cGVzIiwidHJhY2tzUmVsYXRlZEFjdGlvbnMiLCJzZXRBdWRpb1RyYWNrcyIsInNldENsb3NlZENhcHRpb25UcmFja3MiLCJzcGxpdExhbmd1YWdlQW5kQ291bnRyeSIsInN0ciIsIm1hdGNoIiwibGFuZ3VhZ2UiLCJjb3VudHJ5IiwibmV4dCIsImFjdGlvbiIsImluY2x1ZGVzIiwidHlwZSIsInRyYWNrcyIsInBheWxvYWQiLCJ0cmFuc2Zvcm1lZFRyYWNrcyIsIm1hcCIsImluZGV4IiwiaWQiLCJuYW1lIiwibGFuZyIsImF1ZGlvQ29kZWMiLCJkZWYiLCJkZWZhdWx0IiwiYXV0b3NlbGVjdCIsImZvcmNlZCIsInRhcmdldGR1cmF0aW9uIiwiYWN0aXZlIiwidW5kZWZpbmVkIiwibGFiZWwiLCJjb2RlYyIsInRhcmdldER1cmF0aW9uIiwibW9kaWZpZWRQYXlsb2FkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/store/middlewares/tracksTransform.js\n");

/***/ }),

/***/ "../js/cronus/store/reducers/ads.js":
/*!******************************************!*\
  !*** ../js/cronus/store/reducers/ads.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var shared_store_types_ads__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/store/types/ads */ \"../js/shared/store/types/ads.js\");\n/* harmony import */ var cronus_store_types_ads__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/store/types/ads */ \"../js/cronus/store/types/ads.js\");\n/* harmony import */ var cronus_logic_advert_consts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/logic/advert/consts */ \"../js/cronus/logic/advert/consts.js\");\n/* harmony import */ var cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/store/types/umsModules */ \"../js/cronus/store/types/umsModules.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar initialState = {\n  adsPlaying: false,\n  ruleset: null,\n  adIndex: 0,\n  position: cronus_logic_advert_consts__WEBPACK_IMPORTED_MODULE_2__[\"default\"].positions.PRE,\n  enabled: undefined\n};\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case shared_store_types_ads__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setAdsPlaying:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        adsPlaying: payload.adsPlaying\n      });\n\n    case cronus_store_types_ads__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setRuleset:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        ruleset: payload.ruleset\n      });\n\n    case cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_3__[\"default\"].setMetaModule:\n      {\n        var adIntegration = payload.module.adIntegration;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          enabled: adIntegration ? adIntegration.hasBenefit && adIntegration.hasSettings : false\n        });\n      }\n\n    default:\n      return state;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL3JlZHVjZXJzL2Fkcy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsSUFBTUksWUFBWSxHQUFHO0FBQ25CQyxFQUFBQSxVQUFVLEVBQUUsS0FETztBQUVuQkMsRUFBQUEsT0FBTyxFQUFFLElBRlU7QUFHbkJDLEVBQUFBLE9BQU8sRUFBRSxDQUhVO0FBSW5CQyxFQUFBQSxRQUFRLEVBQUVOLGdGQUpTO0FBS25CUyxFQUFBQSxPQUFPLEVBQUVDO0FBTFUsQ0FBckI7QUFRQSw2QkFBZSxzQ0FBbUQ7QUFBQSxNQUF6Q0MsS0FBeUMsdUVBQWpDVCxZQUFpQzs7QUFBQTtBQUFBLE1BQWpCVSxJQUFpQixRQUFqQkEsSUFBaUI7QUFBQSxNQUFYQyxPQUFXLFFBQVhBLE9BQVc7O0FBQ2hFLFVBQVFELElBQVI7QUFDRSxTQUFLZCw0RUFBTDtBQUNFLDZDQUFZYSxLQUFaO0FBQW1CUixRQUFBQSxVQUFVLEVBQUVVLE9BQU8sQ0FBQ1Y7QUFBdkM7O0FBQ0YsU0FBS0oseUVBQUw7QUFDRSw2Q0FBWVksS0FBWjtBQUFtQlAsUUFBQUEsT0FBTyxFQUFFUyxPQUFPLENBQUNUO0FBQXBDOztBQUNGLFNBQUtILG1GQUFMO0FBQTBDO0FBQ3hDLFlBQ1lnQixhQURaLEdBRUlKLE9BRkosQ0FDRUssTUFERixDQUNZRCxhQURaO0FBSUEsK0NBQ0tOLEtBREw7QUFFRUYsVUFBQUEsT0FBTyxFQUFFUSxhQUFhLEdBQUdBLGFBQWEsQ0FBQ0UsVUFBZCxJQUE0QkYsYUFBYSxDQUFDRyxXQUE3QyxHQUEyRDtBQUZuRjtBQUlEOztBQUNEO0FBQ0UsYUFBT1QsS0FBUDtBQWhCSjtBQWtCRCIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vanMvY3JvbnVzL3N0b3JlL3JlZHVjZXJzL2Fkcy5qcz9mZTJlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzaGFyZWRBZHNBY3Rpb25UeXBlcyBmcm9tICdzaGFyZWQvc3RvcmUvdHlwZXMvYWRzJztcbmltcG9ydCBhZHNBY3Rpb25UeXBlcyBmcm9tICdjcm9udXMvc3RvcmUvdHlwZXMvYWRzJztcbmltcG9ydCBjb25zdHMgZnJvbSAnY3JvbnVzL2xvZ2ljL2FkdmVydC9jb25zdHMnO1xuaW1wb3J0IHVtc01vZHVsZXNBY3Rpb25UeXBlcyBmcm9tICdjcm9udXMvc3RvcmUvdHlwZXMvdW1zTW9kdWxlcyc7XG5cbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcbiAgYWRzUGxheWluZzogZmFsc2UsXG4gIHJ1bGVzZXQ6IG51bGwsXG4gIGFkSW5kZXg6IDAsXG4gIHBvc2l0aW9uOiBjb25zdHMucG9zaXRpb25zLlBSRSxcbiAgZW5hYmxlZDogdW5kZWZpbmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCB7IHR5cGUsIHBheWxvYWQgfSkge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIHNoYXJlZEFkc0FjdGlvblR5cGVzLnNldEFkc1BsYXlpbmc6XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgYWRzUGxheWluZzogcGF5bG9hZC5hZHNQbGF5aW5nIH07XG4gICAgY2FzZSBhZHNBY3Rpb25UeXBlcy5zZXRSdWxlc2V0OlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHJ1bGVzZXQ6IHBheWxvYWQucnVsZXNldCB9O1xuICAgIGNhc2UgdW1zTW9kdWxlc0FjdGlvblR5cGVzLnNldE1ldGFNb2R1bGU6IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbW9kdWxlOiB7IGFkSW50ZWdyYXRpb24gfSxcbiAgICAgIH0gPSBwYXlsb2FkO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgZW5hYmxlZDogYWRJbnRlZ3JhdGlvbiA/IGFkSW50ZWdyYXRpb24uaGFzQmVuZWZpdCAmJiBhZEludGVncmF0aW9uLmhhc1NldHRpbmdzIDogZmFsc2UsXG4gICAgICB9O1xuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG4iXSwibmFtZXMiOlsic2hhcmVkQWRzQWN0aW9uVHlwZXMiLCJhZHNBY3Rpb25UeXBlcyIsImNvbnN0cyIsInVtc01vZHVsZXNBY3Rpb25UeXBlcyIsImluaXRpYWxTdGF0ZSIsImFkc1BsYXlpbmciLCJydWxlc2V0IiwiYWRJbmRleCIsInBvc2l0aW9uIiwicG9zaXRpb25zIiwiUFJFIiwiZW5hYmxlZCIsInVuZGVmaW5lZCIsInN0YXRlIiwidHlwZSIsInBheWxvYWQiLCJzZXRBZHNQbGF5aW5nIiwic2V0UnVsZXNldCIsInNldE1ldGFNb2R1bGUiLCJhZEludGVncmF0aW9uIiwibW9kdWxlIiwiaGFzQmVuZWZpdCIsImhhc1NldHRpbmdzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/store/reducers/ads.js\n");

/***/ }),

/***/ "../js/cronus/store/reducers/broadcaster.js":
/*!**************************************************!*\
  !*** ../js/cronus/store/reducers/broadcaster.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! player-utils/object/get */ \"../node_modules/player-utils/object/get.js\");\n/* harmony import */ var cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/store/types/umsModules */ \"../js/cronus/store/types/umsModules.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar initialState = {\n  userName: null,\n  benefits: []\n};\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setMetaModule:\n      {\n        var module = payload.module;\n\n        var nextState = _objectSpread({}, state);\n\n        var userName = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(module, 'userName', null);\n        nextState.userName = userName;\n        var benefits = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(module, 'broadcaster.benefits');\n\n        if (Array.isArray(benefits)) {\n          nextState.benefits = benefits;\n        }\n\n        return nextState;\n      }\n\n    case cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setBroadcasterModule:\n      {\n        var _module = payload.module;\n\n        var _benefits = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_module, 'benefits', []);\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          benefits: _benefits\n        });\n      }\n\n    default:\n      return state;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL3JlZHVjZXJzL2Jyb2FkY2FzdGVyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFFQSxJQUFNRSxZQUFZLEdBQUc7QUFDbkJDLEVBQUFBLFFBQVEsRUFBRSxJQURTO0FBRW5CQyxFQUFBQSxRQUFRLEVBQUU7QUFGUyxDQUFyQjtBQUtBLDZCQUFlLHNDQUFtRDtBQUFBLE1BQXpDQyxLQUF5Qyx1RUFBakNILFlBQWlDOztBQUFBO0FBQUEsTUFBakJJLElBQWlCLFFBQWpCQSxJQUFpQjtBQUFBLE1BQVhDLE9BQVcsUUFBWEEsT0FBVzs7QUFDaEUsVUFBUUQsSUFBUjtBQUNFLFNBQUtMLG1GQUFMO0FBQTBDO0FBQ3hDLFlBQVFRLE1BQVIsR0FBbUJGLE9BQW5CLENBQVFFLE1BQVI7O0FBRUEsWUFBTUMsU0FBUyxxQkFBUUwsS0FBUixDQUFmOztBQUVBLFlBQU1GLFFBQVEsR0FBR0gsbUVBQUcsQ0FBQ1MsTUFBRCxFQUFTLFVBQVQsRUFBcUIsSUFBckIsQ0FBcEI7QUFDQUMsUUFBQUEsU0FBUyxDQUFDUCxRQUFWLEdBQXFCQSxRQUFyQjtBQUVBLFlBQU1DLFFBQVEsR0FBR0osbUVBQUcsQ0FBQ1MsTUFBRCxFQUFTLHNCQUFULENBQXBCOztBQUNBLFlBQUlFLEtBQUssQ0FBQ0MsT0FBTixDQUFjUixRQUFkLENBQUosRUFBNkI7QUFDM0JNLFVBQUFBLFNBQVMsQ0FBQ04sUUFBVixHQUFxQkEsUUFBckI7QUFDRDs7QUFFRCxlQUFPTSxTQUFQO0FBQ0Q7O0FBQ0QsU0FBS1QsMEZBQUw7QUFBaUQ7QUFDL0MsWUFBUVEsT0FBUixHQUFtQkYsT0FBbkIsQ0FBUUUsTUFBUjs7QUFFQSxZQUFNTCxTQUFRLEdBQUdKLG1FQUFHLENBQUNTLE9BQUQsRUFBUyxVQUFULEVBQXFCLEVBQXJCLENBQXBCOztBQUNBLCtDQUFZSixLQUFaO0FBQW1CRCxVQUFBQSxRQUFRLEVBQVJBO0FBQW5CO0FBQ0Q7O0FBQ0Q7QUFDRSxhQUFPQyxLQUFQO0FBdkJKO0FBeUJEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvc3RvcmUvcmVkdWNlcnMvYnJvYWRjYXN0ZXIuanM/MTM1NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0IGZyb20gJ3BsYXllci11dGlscy9vYmplY3QvZ2V0JztcbmltcG9ydCB1bXNNb2R1bGVzQWN0aW9uVHlwZXMgZnJvbSAnY3JvbnVzL3N0b3JlL3R5cGVzL3Vtc01vZHVsZXMnO1xuXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gIHVzZXJOYW1lOiBudWxsLFxuICBiZW5lZml0czogW10sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoc3RhdGUgPSBpbml0aWFsU3RhdGUsIHsgdHlwZSwgcGF5bG9hZCB9KSB7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgdW1zTW9kdWxlc0FjdGlvblR5cGVzLnNldE1ldGFNb2R1bGU6IHtcbiAgICAgIGNvbnN0IHsgbW9kdWxlIH0gPSBwYXlsb2FkO1xuXG4gICAgICBjb25zdCBuZXh0U3RhdGUgPSB7IC4uLnN0YXRlIH07XG5cbiAgICAgIGNvbnN0IHVzZXJOYW1lID0gZ2V0KG1vZHVsZSwgJ3VzZXJOYW1lJywgbnVsbCk7XG4gICAgICBuZXh0U3RhdGUudXNlck5hbWUgPSB1c2VyTmFtZTtcblxuICAgICAgY29uc3QgYmVuZWZpdHMgPSBnZXQobW9kdWxlLCAnYnJvYWRjYXN0ZXIuYmVuZWZpdHMnKTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGJlbmVmaXRzKSkge1xuICAgICAgICBuZXh0U3RhdGUuYmVuZWZpdHMgPSBiZW5lZml0cztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5leHRTdGF0ZTtcbiAgICB9XG4gICAgY2FzZSB1bXNNb2R1bGVzQWN0aW9uVHlwZXMuc2V0QnJvYWRjYXN0ZXJNb2R1bGU6IHtcbiAgICAgIGNvbnN0IHsgbW9kdWxlIH0gPSBwYXlsb2FkO1xuXG4gICAgICBjb25zdCBiZW5lZml0cyA9IGdldChtb2R1bGUsICdiZW5lZml0cycsIFtdKTtcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBiZW5lZml0cyB9O1xuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG4iXSwibmFtZXMiOlsiZ2V0IiwidW1zTW9kdWxlc0FjdGlvblR5cGVzIiwiaW5pdGlhbFN0YXRlIiwidXNlck5hbWUiLCJiZW5lZml0cyIsInN0YXRlIiwidHlwZSIsInBheWxvYWQiLCJzZXRNZXRhTW9kdWxlIiwibW9kdWxlIiwibmV4dFN0YXRlIiwiQXJyYXkiLCJpc0FycmF5Iiwic2V0QnJvYWRjYXN0ZXJNb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/store/reducers/broadcaster.js\n");

/***/ }),

/***/ "../js/cronus/store/reducers/captionSearch.js":
/*!****************************************************!*\
  !*** ../js/cronus/store/reducers/captionSearch.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var shared_store_types_captionSearch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/store/types/captionSearch */ \"../js/shared/store/types/captionSearch.js\");\n/* harmony import */ var cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/store/types/umsModules */ \"../js/cronus/store/types/umsModules.js\");\n/* harmony import */ var cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/store/types/reset */ \"../js/cronus/store/types/reset.js\");\n/* harmony import */ var cronus_store_actions_reset__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/store/actions/reset */ \"../js/cronus/store/actions/reset.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar initialState = {\n  panelVisibility: false,\n  visibility: false,\n  searchResult: null\n};\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case shared_store_types_captionSearch__WEBPACK_IMPORTED_MODULE_0__[\"default\"].toggleCaptionSearchPanel:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        panelVisibility: payload.panelVisibility\n      });\n\n    case shared_store_types_captionSearch__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setSearchText:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        searchText: payload.searchText\n      });\n\n    case cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setCaptionSearchModule:\n      {\n        var module = payload.module;\n        var isModuleEnabled = false;\n\n        if (typeof module === 'boolean') {\n          isModuleEnabled = module;\n        } else if (module.token) {\n          isModuleEnabled = true;\n        }\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          module: module,\n          visibility: isModuleEnabled\n        });\n      }\n\n    case shared_store_types_captionSearch__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setSearchResult:\n      {\n        var searchResult = payload.searchResult;\n\n        if (!Array.isArray(searchResult)) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            searchResult: searchResult\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          searchResult: searchResult.slice().sort(function (a, b) {\n            return a.start_sec - b.start_sec;\n          })\n        });\n      }\n\n    case shared_store_types_captionSearch__WEBPACK_IMPORTED_MODULE_0__[\"default\"].toggleCaptionSearchComponent:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        visibility: payload.visibility\n      });\n\n    case cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_2__[\"default\"].reset:\n      {\n        var resetType = payload.type;\n\n        if (resetType === cronus_store_actions_reset__WEBPACK_IMPORTED_MODULE_3__.RESET_TYPES.mediaChange) {\n          return initialState;\n        }\n\n        return _objectSpread(_objectSpread({}, initialState), {}, {\n          panelVisibility: state.panelVisibility,\n          searchText: state.searchText\n        });\n      }\n\n    default:\n      return state;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL3JlZHVjZXJzL2NhcHRpb25TZWFyY2guanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLElBQU1JLFlBQVksR0FBRztBQUNuQkMsRUFBQUEsZUFBZSxFQUFFLEtBREU7QUFFbkJDLEVBQUFBLFVBQVUsRUFBRSxLQUZPO0FBR25CQyxFQUFBQSxZQUFZLEVBQUU7QUFISyxDQUFyQjtBQU1BLDZCQUFlLHNDQUFtRDtBQUFBLE1BQXpDQyxLQUF5Qyx1RUFBakNKLFlBQWlDOztBQUFBO0FBQUEsTUFBakJLLElBQWlCLFFBQWpCQSxJQUFpQjtBQUFBLE1BQVhDLE9BQVcsUUFBWEEsT0FBVzs7QUFDaEUsVUFBUUQsSUFBUjtBQUNFLFNBQUtULGlHQUFMO0FBQ0UsNkNBQVlRLEtBQVo7QUFBbUJILFFBQUFBLGVBQWUsRUFBRUssT0FBTyxDQUFDTDtBQUE1Qzs7QUFDRixTQUFLTCxzRkFBTDtBQUNFLDZDQUFZUSxLQUFaO0FBQW1CSyxRQUFBQSxVQUFVLEVBQUVILE9BQU8sQ0FBQ0c7QUFBdkM7O0FBQ0YsU0FBS1osNEZBQUw7QUFBbUQ7QUFDakQsWUFBUWMsTUFBUixHQUFtQkwsT0FBbkIsQ0FBUUssTUFBUjtBQUNBLFlBQUlDLGVBQWUsR0FBRyxLQUF0Qjs7QUFFQSxZQUFJLE9BQU9ELE1BQVAsS0FBa0IsU0FBdEIsRUFBaUM7QUFDL0JDLFVBQUFBLGVBQWUsR0FBR0QsTUFBbEI7QUFDRCxTQUZELE1BRU8sSUFBSUEsTUFBTSxDQUFDRSxLQUFYLEVBQWtCO0FBQ3ZCRCxVQUFBQSxlQUFlLEdBQUcsSUFBbEI7QUFDRDs7QUFFRCwrQ0FBWVIsS0FBWjtBQUFtQk8sVUFBQUEsTUFBTSxFQUFOQSxNQUFuQjtBQUEyQlQsVUFBQUEsVUFBVSxFQUFFVTtBQUF2QztBQUNEOztBQUNELFNBQUtoQix3RkFBTDtBQUErQztBQUM3QyxZQUFRTyxZQUFSLEdBQXlCRyxPQUF6QixDQUFRSCxZQUFSOztBQUNBLFlBQUksQ0FBQ1ksS0FBSyxDQUFDQyxPQUFOLENBQWNiLFlBQWQsQ0FBTCxFQUFrQztBQUNoQyxpREFBWUMsS0FBWjtBQUFtQkQsWUFBQUEsWUFBWSxFQUFaQTtBQUFuQjtBQUNEOztBQUVELCtDQUNLQyxLQURMO0FBRUVELFVBQUFBLFlBQVksRUFBRUEsWUFBWSxDQUFDYyxLQUFiLEdBQXFCQyxJQUFyQixDQUEwQixVQUFDQyxDQUFELEVBQUlDLENBQUo7QUFBQSxtQkFBVUQsQ0FBQyxDQUFDRSxTQUFGLEdBQWNELENBQUMsQ0FBQ0MsU0FBMUI7QUFBQSxXQUExQjtBQUZoQjtBQUlEOztBQUNELFNBQUt6QixxR0FBTDtBQUNFLDZDQUFZUSxLQUFaO0FBQW1CRixRQUFBQSxVQUFVLEVBQUVJLE9BQU8sQ0FBQ0o7QUFBdkM7O0FBQ0YsU0FBS0osc0VBQUw7QUFBdUI7QUFDckIsWUFBYzBCLFNBQWQsR0FBNEJsQixPQUE1QixDQUFRRCxJQUFSOztBQUNBLFlBQUltQixTQUFTLEtBQUt6QiwrRUFBbEIsRUFBMkM7QUFDekMsaUJBQU9DLFlBQVA7QUFDRDs7QUFFRCwrQ0FDS0EsWUFETDtBQUVFQyxVQUFBQSxlQUFlLEVBQUVHLEtBQUssQ0FBQ0gsZUFGekI7QUFHRVEsVUFBQUEsVUFBVSxFQUFFTCxLQUFLLENBQUNLO0FBSHBCO0FBS0Q7O0FBQ0Q7QUFDRSxhQUFPTCxLQUFQO0FBM0NKO0FBNkNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvc3RvcmUvcmVkdWNlcnMvY2FwdGlvblNlYXJjaC5qcz83ODcwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjYXB0aW9uU2VhcmNoQWN0aW9uVHlwZXMgZnJvbSAnc2hhcmVkL3N0b3JlL3R5cGVzL2NhcHRpb25TZWFyY2gnO1xuaW1wb3J0IHVtc01vZHVsZXNBY3Rpb25UeXBlcyBmcm9tICdjcm9udXMvc3RvcmUvdHlwZXMvdW1zTW9kdWxlcyc7XG5pbXBvcnQgcmVzZXRUeXBlcyBmcm9tICdjcm9udXMvc3RvcmUvdHlwZXMvcmVzZXQnO1xuaW1wb3J0IHsgUkVTRVRfVFlQRVMgfSBmcm9tICdjcm9udXMvc3RvcmUvYWN0aW9ucy9yZXNldCc7XG5cbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcbiAgcGFuZWxWaXNpYmlsaXR5OiBmYWxzZSxcbiAgdmlzaWJpbGl0eTogZmFsc2UsXG4gIHNlYXJjaFJlc3VsdDogbnVsbCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgeyB0eXBlLCBwYXlsb2FkIH0pIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBjYXB0aW9uU2VhcmNoQWN0aW9uVHlwZXMudG9nZ2xlQ2FwdGlvblNlYXJjaFBhbmVsOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHBhbmVsVmlzaWJpbGl0eTogcGF5bG9hZC5wYW5lbFZpc2liaWxpdHkgfTtcbiAgICBjYXNlIGNhcHRpb25TZWFyY2hBY3Rpb25UeXBlcy5zZXRTZWFyY2hUZXh0OlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHNlYXJjaFRleHQ6IHBheWxvYWQuc2VhcmNoVGV4dCB9O1xuICAgIGNhc2UgdW1zTW9kdWxlc0FjdGlvblR5cGVzLnNldENhcHRpb25TZWFyY2hNb2R1bGU6IHtcbiAgICAgIGNvbnN0IHsgbW9kdWxlIH0gPSBwYXlsb2FkO1xuICAgICAgbGV0IGlzTW9kdWxlRW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIGlzTW9kdWxlRW5hYmxlZCA9IG1vZHVsZTtcbiAgICAgIH0gZWxzZSBpZiAobW9kdWxlLnRva2VuKSB7XG4gICAgICAgIGlzTW9kdWxlRW5hYmxlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBtb2R1bGUsIHZpc2liaWxpdHk6IGlzTW9kdWxlRW5hYmxlZCB9O1xuICAgIH1cbiAgICBjYXNlIGNhcHRpb25TZWFyY2hBY3Rpb25UeXBlcy5zZXRTZWFyY2hSZXN1bHQ6IHtcbiAgICAgIGNvbnN0IHsgc2VhcmNoUmVzdWx0IH0gPSBwYXlsb2FkO1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHNlYXJjaFJlc3VsdCkpIHtcbiAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHNlYXJjaFJlc3VsdCB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgc2VhcmNoUmVzdWx0OiBzZWFyY2hSZXN1bHQuc2xpY2UoKS5zb3J0KChhLCBiKSA9PiBhLnN0YXJ0X3NlYyAtIGIuc3RhcnRfc2VjKSxcbiAgICAgIH07XG4gICAgfVxuICAgIGNhc2UgY2FwdGlvblNlYXJjaEFjdGlvblR5cGVzLnRvZ2dsZUNhcHRpb25TZWFyY2hDb21wb25lbnQ6XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgdmlzaWJpbGl0eTogcGF5bG9hZC52aXNpYmlsaXR5IH07XG4gICAgY2FzZSByZXNldFR5cGVzLnJlc2V0OiB7XG4gICAgICBjb25zdCB7IHR5cGU6IHJlc2V0VHlwZSB9ID0gcGF5bG9hZDtcbiAgICAgIGlmIChyZXNldFR5cGUgPT09IFJFU0VUX1RZUEVTLm1lZGlhQ2hhbmdlKSB7XG4gICAgICAgIHJldHVybiBpbml0aWFsU3RhdGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmluaXRpYWxTdGF0ZSxcbiAgICAgICAgcGFuZWxWaXNpYmlsaXR5OiBzdGF0ZS5wYW5lbFZpc2liaWxpdHksXG4gICAgICAgIHNlYXJjaFRleHQ6IHN0YXRlLnNlYXJjaFRleHQsXG4gICAgICB9O1xuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG4iXSwibmFtZXMiOlsiY2FwdGlvblNlYXJjaEFjdGlvblR5cGVzIiwidW1zTW9kdWxlc0FjdGlvblR5cGVzIiwicmVzZXRUeXBlcyIsIlJFU0VUX1RZUEVTIiwiaW5pdGlhbFN0YXRlIiwicGFuZWxWaXNpYmlsaXR5IiwidmlzaWJpbGl0eSIsInNlYXJjaFJlc3VsdCIsInN0YXRlIiwidHlwZSIsInBheWxvYWQiLCJ0b2dnbGVDYXB0aW9uU2VhcmNoUGFuZWwiLCJzZXRTZWFyY2hUZXh0Iiwic2VhcmNoVGV4dCIsInNldENhcHRpb25TZWFyY2hNb2R1bGUiLCJtb2R1bGUiLCJpc01vZHVsZUVuYWJsZWQiLCJ0b2tlbiIsInNldFNlYXJjaFJlc3VsdCIsIkFycmF5IiwiaXNBcnJheSIsInNsaWNlIiwic29ydCIsImEiLCJiIiwic3RhcnRfc2VjIiwidG9nZ2xlQ2FwdGlvblNlYXJjaENvbXBvbmVudCIsInJlc2V0IiwicmVzZXRUeXBlIiwibWVkaWFDaGFuZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/store/reducers/captionSearch.js\n");

/***/ }),

/***/ "../js/cronus/store/reducers/captionSettings.js":
/*!******************************************************!*\
  !*** ../js/cronus/store/reducers/captionSettings.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var shared_store_types_captionSettings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/store/types/captionSettings */ \"../js/shared/store/types/captionSettings.js\");\n/* harmony import */ var cronus_config_initial__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/config/initial */ \"../js/cronus/config/initial.js\");\n/* harmony import */ var cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/store/types/reset */ \"../js/cronus/store/types/reset.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar initialState = {\n  activeCues: [],\n  options: {}\n};\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case shared_store_types_captionSettings__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setActiveCues:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          activeCues: payload\n        });\n      }\n\n    case shared_store_types_captionSettings__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setOptions:\n      {\n        var newOptions = (0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_1__.getInitialConfig)('externalvtt') ? state.options : _objectSpread(_objectSpread({}, state.options), payload);\n\n        if (newOptions.live) {\n          newOptions.textAlignLive = newOptions.textAlign;\n          delete newOptions.textAlign;\n        } else {\n          newOptions.textAlignVod = newOptions.textAlign;\n          delete newOptions.textAlign;\n        }\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          options: newOptions\n        });\n      }\n\n    case shared_store_types_captionSettings__WEBPACK_IMPORTED_MODULE_0__[\"default\"].resetOptions:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          options: {}\n        });\n      }\n\n    case cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_2__[\"default\"].reset:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          activeCues: []\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL3JlZHVjZXJzL2NhcHRpb25TZXR0aW5ncy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBRUEsSUFBTUcsWUFBWSxHQUFHO0FBQ25CQyxFQUFBQSxVQUFVLEVBQUUsRUFETztBQUVuQkMsRUFBQUEsT0FBTyxFQUFFO0FBRlUsQ0FBckI7QUFLQSw2QkFBZSxzQ0FBbUQ7QUFBQSxNQUF6Q0MsS0FBeUMsdUVBQWpDSCxZQUFpQzs7QUFBQTtBQUFBLE1BQWpCSSxJQUFpQixRQUFqQkEsSUFBaUI7QUFBQSxNQUFYQyxPQUFXLFFBQVhBLE9BQVc7O0FBQ2hFLFVBQVFELElBQVI7QUFDRSxTQUFLUCx3RkFBTDtBQUF5QztBQUN2QywrQ0FDS00sS0FETDtBQUVFRixVQUFBQSxVQUFVLEVBQUVJO0FBRmQ7QUFJRDs7QUFDRCxTQUFLUixxRkFBTDtBQUFzQztBQUNwQyxZQUFNVyxVQUFVLEdBQUdWLHVFQUFnQixDQUFDLGFBQUQsQ0FBaEIsR0FDZkssS0FBSyxDQUFDRCxPQURTLG1DQUVWQyxLQUFLLENBQUNELE9BRkksR0FFUUcsT0FGUixDQUFuQjs7QUFJQSxZQUFJRyxVQUFVLENBQUNDLElBQWYsRUFBcUI7QUFDbkJELFVBQUFBLFVBQVUsQ0FBQ0UsYUFBWCxHQUEyQkYsVUFBVSxDQUFDRyxTQUF0QztBQUNBLGlCQUFPSCxVQUFVLENBQUNHLFNBQWxCO0FBQ0QsU0FIRCxNQUdPO0FBQ0xILFVBQUFBLFVBQVUsQ0FBQ0ksWUFBWCxHQUEwQkosVUFBVSxDQUFDRyxTQUFyQztBQUNBLGlCQUFPSCxVQUFVLENBQUNHLFNBQWxCO0FBQ0Q7O0FBRUQsK0NBQ0tSLEtBREw7QUFFRUQsVUFBQUEsT0FBTyxFQUFFTTtBQUZYO0FBSUQ7O0FBQ0QsU0FBS1gsdUZBQUw7QUFBd0M7QUFDdEMsK0NBQ0tNLEtBREw7QUFFRUQsVUFBQUEsT0FBTyxFQUFFO0FBRlg7QUFJRDs7QUFDRCxTQUFLSCxzRUFBTDtBQUF1QjtBQUNyQiwrQ0FDS0ksS0FETDtBQUVFRixVQUFBQSxVQUFVLEVBQUU7QUFGZDtBQUlEOztBQUNEO0FBQVM7QUFDUCxlQUFPRSxLQUFQO0FBQ0Q7QUF2Q0g7QUF5Q0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy9zdG9yZS9yZWR1Y2Vycy9jYXB0aW9uU2V0dGluZ3MuanM/NTMyOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2FwdGlvblNldHRpbmdzVHlwZXMgZnJvbSAnc2hhcmVkL3N0b3JlL3R5cGVzL2NhcHRpb25TZXR0aW5ncyc7XG5pbXBvcnQgeyBnZXRJbml0aWFsQ29uZmlnIH0gZnJvbSAnY3JvbnVzL2NvbmZpZy9pbml0aWFsJztcbmltcG9ydCByZXNldFR5cGVzIGZyb20gJ2Nyb251cy9zdG9yZS90eXBlcy9yZXNldCc7XG5cbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcbiAgYWN0aXZlQ3VlczogW10sXG4gIG9wdGlvbnM6IHt9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCB7IHR5cGUsIHBheWxvYWQgfSkge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIGNhcHRpb25TZXR0aW5nc1R5cGVzLnNldEFjdGl2ZUN1ZXM6IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBhY3RpdmVDdWVzOiBwYXlsb2FkLFxuICAgICAgfTtcbiAgICB9XG4gICAgY2FzZSBjYXB0aW9uU2V0dGluZ3NUeXBlcy5zZXRPcHRpb25zOiB7XG4gICAgICBjb25zdCBuZXdPcHRpb25zID0gZ2V0SW5pdGlhbENvbmZpZygnZXh0ZXJuYWx2dHQnKVxuICAgICAgICA/IHN0YXRlLm9wdGlvbnNcbiAgICAgICAgOiB7IC4uLnN0YXRlLm9wdGlvbnMsIC4uLnBheWxvYWQgfTtcblxuICAgICAgaWYgKG5ld09wdGlvbnMubGl2ZSkge1xuICAgICAgICBuZXdPcHRpb25zLnRleHRBbGlnbkxpdmUgPSBuZXdPcHRpb25zLnRleHRBbGlnbjtcbiAgICAgICAgZGVsZXRlIG5ld09wdGlvbnMudGV4dEFsaWduO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3T3B0aW9ucy50ZXh0QWxpZ25Wb2QgPSBuZXdPcHRpb25zLnRleHRBbGlnbjtcbiAgICAgICAgZGVsZXRlIG5ld09wdGlvbnMudGV4dEFsaWduO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgb3B0aW9uczogbmV3T3B0aW9ucyxcbiAgICAgIH07XG4gICAgfVxuICAgIGNhc2UgY2FwdGlvblNldHRpbmdzVHlwZXMucmVzZXRPcHRpb25zOiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgb3B0aW9uczoge30sXG4gICAgICB9O1xuICAgIH1cbiAgICBjYXNlIHJlc2V0VHlwZXMucmVzZXQ6IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBhY3RpdmVDdWVzOiBbXSxcbiAgICAgIH07XG4gICAgfVxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJjYXB0aW9uU2V0dGluZ3NUeXBlcyIsImdldEluaXRpYWxDb25maWciLCJyZXNldFR5cGVzIiwiaW5pdGlhbFN0YXRlIiwiYWN0aXZlQ3VlcyIsIm9wdGlvbnMiLCJzdGF0ZSIsInR5cGUiLCJwYXlsb2FkIiwic2V0QWN0aXZlQ3VlcyIsInNldE9wdGlvbnMiLCJuZXdPcHRpb25zIiwibGl2ZSIsInRleHRBbGlnbkxpdmUiLCJ0ZXh0QWxpZ24iLCJ0ZXh0QWxpZ25Wb2QiLCJyZXNldE9wdGlvbnMiLCJyZXNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/store/reducers/captionSettings.js\n");

/***/ }),

/***/ "../js/cronus/store/reducers/chapters.js":
/*!***********************************************!*\
  !*** ../js/cronus/store/reducers/chapters.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/store/types/umsModules */ \"../js/cronus/store/types/umsModules.js\");\n/* harmony import */ var shared_store_types_chapters__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/store/types/chapters */ \"../js/shared/store/types/chapters.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar initialState = {\n  panelVisible: false,\n  markersVisible: true,\n  chapters: []\n};\n/**\n * @param {string} mediaId\n * @returns {boolean}\n */\n\nfunction isChannel(mediaId) {\n  return mediaId.startsWith('channel');\n}\n/**\n * @typedef {Object} Chapter\n * @property {number} position - relative position in sec\n * @property {string} title\n */\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case shared_store_types_chapters__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setChapterMarkersVisibility:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        markersVisible: payload\n      });\n\n    case shared_store_types_chapters__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setChaptersPanelVisibility:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        panelVisible: payload\n      });\n\n    case cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setMetaModule:\n      {\n        var chapters = payload.module.chapters,\n            mediaId = payload.mediaId; // Do not overwrite the prev state if we are playing an off-air\n        // video with chapters and we receive a new meta module for the\n        // channel\n\n        if (typeof mediaId === 'string' && isChannel(mediaId)) {\n          return state;\n        }\n\n        if (!chapters || chapters.length === 0) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            chapters: []\n          });\n        }\n\n        var sortedChapters = chapters.map(function (_ref2) {\n          var position = _ref2.position,\n              title = _ref2.title;\n          return {\n            position: position,\n            title: title\n          };\n        }).sort(function (a, b) {\n          return a.position - b.position;\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          chapters: sortedChapters\n        });\n      }\n\n    default:\n      return state;\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL3JlZHVjZXJzL2NoYXB0ZXJzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFFQSxJQUFNRSxZQUFZLEdBQUc7QUFDbkJDLEVBQUFBLFlBQVksRUFBRSxLQURLO0FBRW5CQyxFQUFBQSxjQUFjLEVBQUUsSUFGRztBQUduQkMsRUFBQUEsUUFBUSxFQUFFO0FBSFMsQ0FBckI7QUFNQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxTQUFTQyxTQUFULENBQW1CQyxPQUFuQixFQUE0QjtBQUMxQixTQUFPQSxPQUFPLENBQUNDLFVBQVIsQ0FBbUIsU0FBbkIsQ0FBUDtBQUNEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUEsK0RBQWUsWUFBNkM7QUFBQSxNQUE1Q0MsS0FBNEMsdUVBQXBDUCxZQUFvQzs7QUFBQTtBQUFBLE1BQXBCUSxJQUFvQixRQUFwQkEsSUFBb0I7QUFBQSxNQUFkQyxPQUFjLFFBQWRBLE9BQWM7O0FBQzFELFVBQVFELElBQVI7QUFDRSxTQUFLVCwrRkFBTDtBQUNFLDZDQUNLUSxLQURMO0FBRUVMLFFBQUFBLGNBQWMsRUFBRU87QUFGbEI7O0FBSUYsU0FBS1YsOEZBQUw7QUFDRSw2Q0FDS1EsS0FETDtBQUVFTixRQUFBQSxZQUFZLEVBQUVRO0FBRmhCOztBQUlGLFNBQUtYLG1GQUFMO0FBQTBDO0FBQ3hDLFlBQ1lLLFFBRFosR0FHSU0sT0FISixDQUNFSSxNQURGLENBQ1lWLFFBRFo7QUFBQSxZQUVFRSxPQUZGLEdBR0lJLE9BSEosQ0FFRUosT0FGRixDQUR3QyxDQU14QztBQUNBO0FBQ0E7O0FBQ0EsWUFBSSxPQUFPQSxPQUFQLEtBQW1CLFFBQW5CLElBQStCRCxTQUFTLENBQUNDLE9BQUQsQ0FBNUMsRUFBdUQ7QUFDckQsaUJBQU9FLEtBQVA7QUFDRDs7QUFFRCxZQUFJLENBQUNKLFFBQUQsSUFBYUEsUUFBUSxDQUFDVyxNQUFULEtBQW9CLENBQXJDLEVBQXdDO0FBQ3RDLGlEQUNLUCxLQURMO0FBRUVKLFlBQUFBLFFBQVEsRUFBRTtBQUZaO0FBSUQ7O0FBRUQsWUFBTVksY0FBYyxHQUFHWixRQUFRLENBQzVCYSxHQURvQixDQUNoQjtBQUFBLGNBQUdDLFFBQUgsU0FBR0EsUUFBSDtBQUFBLGNBQWFDLEtBQWIsU0FBYUEsS0FBYjtBQUFBLGlCQUEwQjtBQUFFRCxZQUFBQSxRQUFRLEVBQVJBLFFBQUY7QUFBWUMsWUFBQUEsS0FBSyxFQUFMQTtBQUFaLFdBQTFCO0FBQUEsU0FEZ0IsRUFFcEJDLElBRm9CLENBRWYsVUFBQ0MsQ0FBRCxFQUFJQyxDQUFKO0FBQUEsaUJBQVVELENBQUMsQ0FBQ0gsUUFBRixHQUFhSSxDQUFDLENBQUNKLFFBQXpCO0FBQUEsU0FGZSxDQUF2QjtBQUdBLCtDQUNLVixLQURMO0FBRUVKLFVBQUFBLFFBQVEsRUFBRVk7QUFGWjtBQUlEOztBQUNEO0FBQ0UsYUFBT1IsS0FBUDtBQXhDSjtBQTBDRCxDQTNDRCIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vanMvY3JvbnVzL3N0b3JlL3JlZHVjZXJzL2NoYXB0ZXJzLmpzPzdmY2UiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHVtc01vZHVsZXNBY3Rpb25UeXBlcyBmcm9tICdjcm9udXMvc3RvcmUvdHlwZXMvdW1zTW9kdWxlcyc7XG5pbXBvcnQgc2hhcmVkQ2hhcHRlcnNBY3Rpb25UeXBlcyBmcm9tICdzaGFyZWQvc3RvcmUvdHlwZXMvY2hhcHRlcnMnO1xuXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gIHBhbmVsVmlzaWJsZTogZmFsc2UsXG4gIG1hcmtlcnNWaXNpYmxlOiB0cnVlLFxuICBjaGFwdGVyczogW10sXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZWRpYUlkXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNDaGFubmVsKG1lZGlhSWQpIHtcbiAgcmV0dXJuIG1lZGlhSWQuc3RhcnRzV2l0aCgnY2hhbm5lbCcpO1xufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IENoYXB0ZXJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBwb3NpdGlvbiAtIHJlbGF0aXZlIHBvc2l0aW9uIGluIHNlY1xuICogQHByb3BlcnR5IHtzdHJpbmd9IHRpdGxlXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlID0gaW5pdGlhbFN0YXRlLCB7IHR5cGUsIHBheWxvYWQgfSkgPT4ge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIHNoYXJlZENoYXB0ZXJzQWN0aW9uVHlwZXMuc2V0Q2hhcHRlck1hcmtlcnNWaXNpYmlsaXR5OlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIG1hcmtlcnNWaXNpYmxlOiBwYXlsb2FkLFxuICAgICAgfTtcbiAgICBjYXNlIHNoYXJlZENoYXB0ZXJzQWN0aW9uVHlwZXMuc2V0Q2hhcHRlcnNQYW5lbFZpc2liaWxpdHk6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgcGFuZWxWaXNpYmxlOiBwYXlsb2FkLFxuICAgICAgfTtcbiAgICBjYXNlIHVtc01vZHVsZXNBY3Rpb25UeXBlcy5zZXRNZXRhTW9kdWxlOiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIG1vZHVsZTogeyBjaGFwdGVycyB9LFxuICAgICAgICBtZWRpYUlkLFxuICAgICAgfSA9IHBheWxvYWQ7XG5cbiAgICAgIC8vIERvIG5vdCBvdmVyd3JpdGUgdGhlIHByZXYgc3RhdGUgaWYgd2UgYXJlIHBsYXlpbmcgYW4gb2ZmLWFpclxuICAgICAgLy8gdmlkZW8gd2l0aCBjaGFwdGVycyBhbmQgd2UgcmVjZWl2ZSBhIG5ldyBtZXRhIG1vZHVsZSBmb3IgdGhlXG4gICAgICAvLyBjaGFubmVsXG4gICAgICBpZiAodHlwZW9mIG1lZGlhSWQgPT09ICdzdHJpbmcnICYmIGlzQ2hhbm5lbChtZWRpYUlkKSkge1xuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghY2hhcHRlcnMgfHwgY2hhcHRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgY2hhcHRlcnM6IFtdLFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzb3J0ZWRDaGFwdGVycyA9IGNoYXB0ZXJzXG4gICAgICAgIC5tYXAoKHsgcG9zaXRpb24sIHRpdGxlIH0pID0+ICh7IHBvc2l0aW9uLCB0aXRsZSB9KSlcbiAgICAgICAgLnNvcnQoKGEsIGIpID0+IGEucG9zaXRpb24gLSBiLnBvc2l0aW9uKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBjaGFwdGVyczogc29ydGVkQ2hhcHRlcnMsXG4gICAgICB9O1xuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbInVtc01vZHVsZXNBY3Rpb25UeXBlcyIsInNoYXJlZENoYXB0ZXJzQWN0aW9uVHlwZXMiLCJpbml0aWFsU3RhdGUiLCJwYW5lbFZpc2libGUiLCJtYXJrZXJzVmlzaWJsZSIsImNoYXB0ZXJzIiwiaXNDaGFubmVsIiwibWVkaWFJZCIsInN0YXJ0c1dpdGgiLCJzdGF0ZSIsInR5cGUiLCJwYXlsb2FkIiwic2V0Q2hhcHRlck1hcmtlcnNWaXNpYmlsaXR5Iiwic2V0Q2hhcHRlcnNQYW5lbFZpc2liaWxpdHkiLCJzZXRNZXRhTW9kdWxlIiwibW9kdWxlIiwibGVuZ3RoIiwic29ydGVkQ2hhcHRlcnMiLCJtYXAiLCJwb3NpdGlvbiIsInRpdGxlIiwic29ydCIsImEiLCJiIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/store/reducers/chapters.js\n");

/***/ }),

/***/ "../js/cronus/store/reducers/content.js":
/*!**********************************************!*\
  !*** ../js/cronus/store/reducers/content.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var player_utils_number_clamp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! player-utils/number/clamp */ \"../node_modules/player-utils/number/clamp.js\");\n/* harmony import */ var player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! player-utils/object/get */ \"../node_modules/player-utils/object/get.js\");\n/* harmony import */ var shared_store_types_content__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/store/types/content */ \"../js/shared/store/types/content.js\");\n/* harmony import */ var cronus_store_types_content__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/store/types/content */ \"../js/cronus/store/types/content.js\");\n/* harmony import */ var cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! cronus/store/types/umsModules */ \"../js/cronus/store/types/umsModules.js\");\n/* harmony import */ var shared_store_actions_content__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! shared/store/actions/content */ \"../js/shared/store/actions/content.js\");\n/* harmony import */ var cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! cronus/store/types/reset */ \"../js/cronus/store/types/reset.js\");\n/* harmony import */ var cronus_store_actions_reset__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! cronus/store/actions/reset */ \"../js/cronus/store/actions/reset.js\");\n/* harmony import */ var cronus_logic_initialSeek__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! cronus/logic/initialSeek */ \"../js/cronus/logic/initialSeek.js\");\n/* harmony import */ var shared_lib_util_streamModule__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! shared/lib/util/streamModule */ \"../js/shared/lib/util/streamModule.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\n\n\nvar initialState = {\n  title: undefined,\n  offairTitle: undefined,\n  // This two values are calculated from the meta module and not from the\n  // actual duration property of the video tag.\n  // The actual duration is stored in the `playback.videoTagDuration` part of\n  // the store.\n  duration: undefined,\n  trimmedDuration: undefined,\n  initialSeekTimeInMs: undefined,\n  initialApiSeekTimeInMs: undefined,\n  audioOnly: false,\n  videoOnly: false,\n  mediaId: '',\n  streamInfo: {},\n  mediaType: undefined,\n  isReplay: false,\n  thumbnails: {},\n  trimInfo: undefined,\n  defaultLang: undefined,\n  liveStatus: undefined,\n  is360Video: undefined,\n  fov360Video: undefined,\n  offairContent: undefined,\n  currentOffairVideoId: undefined,\n  channelContentAvailable: undefined,\n  countryCode: undefined,\n  regionCode: undefined,\n  cluster: undefined,\n  isAudioOnlyPlaybackAvailable: false,\n  sourceMedia: undefined\n};\n/**\n * @param {number} videoLength\n * @param {Array<number>|undefined}\n * @returns {number}\n */\n\nfunction calculateTrimmedDuration(videoLength) {\n  var cut = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 1];\n\n  var _cut = _slicedToArray(cut, 2),\n      start = _cut[0],\n      end = _cut[1];\n\n  return videoLength * (end - start);\n}\n/**\n * @param {string} mediaId - e.g. \"channel.1524\"\n * @returns {boolean}\n */\n\n\nfunction isChannel(mediaId) {\n  return mediaId.startsWith('channel');\n}\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case shared_store_types_content__WEBPACK_IMPORTED_MODULE_2__[\"default\"].setStreamInfo:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        streamInfo: payload.streamInfo\n      });\n\n    case shared_store_types_content__WEBPACK_IMPORTED_MODULE_2__[\"default\"].setMediaType:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mediaType: payload\n      });\n\n    case shared_store_types_content__WEBPACK_IMPORTED_MODULE_2__[\"default\"].setCurrentOffairVideoId:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        currentOffairVideoId: payload\n      });\n\n    case cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_4__[\"default\"].setMetaModule:\n      {\n        var module = payload.module,\n            mediaId = payload.mediaId;\n        var cluster = module.cluster,\n            video360 = module.video360,\n            video360Fov = module.video360Fov,\n            live360 = module.live360,\n            live360Fov = module.live360Fov,\n            isReplay = module.isReplay,\n            cut = module.cut,\n            highlight = module.highlight,\n            videoLength = module.videoLength,\n            defaultLang = module.defaultLang;\n        var cutOrHighlight = cut || highlight;\n        var fov = video360Fov || live360Fov;\n        fov = fov ? (0,player_utils_number_clamp__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(parseInt(fov, 10), {\n          lower: 0,\n          upper: 360\n        }) : undefined;\n        var duration = state.duration,\n            trimmedDuration = state.trimmedDuration,\n            trimInfo = state.trimInfo;\n\n        if (videoLength) {\n          duration = videoLength;\n          trimmedDuration = calculateTrimmedDuration(duration, cutOrHighlight);\n          trimInfo = cutOrHighlight;\n        }\n\n        var offairContent;\n        var title;\n        var offairTitle;\n\n        if (!isChannel(mediaId) && state.mediaType === shared_store_actions_content__WEBPACK_IMPORTED_MODULE_5__.MEDIA_TYPES.offairVideo) {\n          offairContent = state.offairContent;\n          title = state.title;\n          offairTitle = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(module, 'title', '');\n        } else {\n          offairContent = module.offairContent;\n          title = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(module, 'title', '');\n          offairTitle = state.offairTitle;\n        }\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isReplay: isReplay,\n          title: title,\n          offairTitle: offairTitle,\n          countryCode: (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(module, 'countryCode', state.countryCode),\n          regionCode: (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(module, 'regionCode', state.regionCode),\n          is360Video: video360 || live360,\n          fov360Video: fov,\n          offairContent: offairContent,\n          duration: duration,\n          trimmedDuration: trimmedDuration,\n          trimInfo: trimInfo,\n          initialSeekTimeInMs: (0,cronus_logic_initialSeek__WEBPACK_IMPORTED_MODULE_8__.getInitialSeekTimeInMs)(state),\n          cluster: cluster,\n          defaultLang: defaultLang ? defaultLang.replace('-00', '') : undefined\n        });\n      }\n\n    case cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_4__[\"default\"].setStreamModule:\n      {\n        var _module = payload.module,\n            _mediaId = payload.mediaId;\n        var isAudioOnlyPlaybackAvailable = state.isAudioOnlyPlaybackAvailable,\n            sourceMedia = state.sourceMedia;\n\n        if (!(0,shared_lib_util_streamModule__WEBPACK_IMPORTED_MODULE_9__.isStreamFormatEmpty)(_module)) {\n          isAudioOnlyPlaybackAvailable = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_module, 'streamFormats.hls/mp4/rfc.contentAccess.accessList.0.data.hasAudioOnlyPlaylist', false);\n\n          if (_module.contentAvailable) {\n            sourceMedia = _module.sourceMedia;\n          }\n        } // Do not set this flag if it is an off-air vod or a normal recorded\n\n\n        var channelContentAvailable = isChannel(_mediaId) ? _module.contentAvailable : state.channelContentAvailable;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          sourceMedia: sourceMedia,\n          channelContentAvailable: channelContentAvailable,\n          isAudioOnlyPlaybackAvailable: isAudioOnlyPlaybackAvailable\n        });\n      }\n\n    case cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_4__[\"default\"].setThumbnailModule:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        thumbnails: payload.module\n      });\n\n    case shared_store_types_content__WEBPACK_IMPORTED_MODULE_2__[\"default\"].setLiveStatus:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        liveStatus: payload\n      });\n\n    case shared_store_types_content__WEBPACK_IMPORTED_MODULE_2__[\"default\"].setDuration:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        duration: payload\n      });\n\n    case shared_store_types_content__WEBPACK_IMPORTED_MODULE_2__[\"default\"].setTrimmedDuration:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        trimmedDuration: payload\n      });\n\n    case cronus_store_types_content__WEBPACK_IMPORTED_MODULE_3__[\"default\"].setInitialSeekTimeInMs:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        initialSeekTimeInMs: payload.initialSeekTimeInMs\n      });\n\n    case cronus_store_types_content__WEBPACK_IMPORTED_MODULE_3__[\"default\"].setInitialApiSeekTimeInMs:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        initialApiSeekTimeInMs: payload\n      });\n\n    case cronus_store_types_content__WEBPACK_IMPORTED_MODULE_3__[\"default\"].setMediaChange:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mediaType: payload.mediaType,\n        mediaId: payload.mediaId,\n        liveStatus: undefined,\n        offairContent: undefined,\n        currentOffairVideoId: undefined,\n        channelContentAvailable: undefined,\n        initialSeekTimeInMs: undefined,\n        setInitialApiSeekTimeInMs: undefined\n      });\n\n    case shared_store_types_content__WEBPACK_IMPORTED_MODULE_2__[\"default\"].toggleAudioOnly:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        audioOnly: payload\n      });\n\n    case shared_store_types_content__WEBPACK_IMPORTED_MODULE_2__[\"default\"].toggleVideoOnly:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        videoOnly: payload\n      });\n\n    case cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_6__[\"default\"].reset:\n      {\n        var resetType = payload.type;\n\n        var _title = resetType === cronus_store_actions_reset__WEBPACK_IMPORTED_MODULE_7__.RESET_TYPES.mediaChange ? initialState.title : state.title;\n\n        return _objectSpread(_objectSpread({}, initialState), {}, {\n          mediaId: state.mediaId,\n          mediaType: state.mediaType,\n          offairContent: state.offairContent,\n          liveStatus: state.liveStatus,\n          currentOffairVideoId: state.currentOffairVideoId,\n          channelContentAvailable: state.channelContentAvailable,\n          title: _title\n        });\n      }\n\n    default:\n      return state;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../js/cronus/store/reducers/content.js\n");

/***/ }),

/***/ "../js/cronus/store/reducers/contextMenu.js":
/*!**************************************************!*\
  !*** ../js/cronus/store/reducers/contextMenu.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var shared_store_types_contextMenu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/store/types/contextMenu */ \"../js/shared/store/types/contextMenu.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nvar initialState = {\n  showHiddenContextMenuItems: false\n};\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case shared_store_types_contextMenu__WEBPACK_IMPORTED_MODULE_0__[\"default\"].toggleHiddenContextMenuItems:\n      {\n        var showHiddenContextMenuItems = payload.isVisible;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          showHiddenContextMenuItems: showHiddenContextMenuItems\n        });\n      }\n\n    default:\n      return state;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL3JlZHVjZXJzL2NvbnRleHRNZW51LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFFQSxJQUFNQyxZQUFZLEdBQUc7QUFDbkJDLEVBQUFBLDBCQUEwQixFQUFFO0FBRFQsQ0FBckI7QUFJQSw2QkFBZSxzQ0FBbUQ7QUFBQSxNQUF6Q0MsS0FBeUMsdUVBQWpDRixZQUFpQzs7QUFBQTtBQUFBLE1BQWpCRyxJQUFpQixRQUFqQkEsSUFBaUI7QUFBQSxNQUFYQyxPQUFXLFFBQVhBLE9BQVc7O0FBQ2hFLFVBQVFELElBQVI7QUFDRSxTQUFLSixtR0FBTDtBQUEwRDtBQUN4RCxZQUFtQkUsMEJBQW5CLEdBQWtERyxPQUFsRCxDQUFRRSxTQUFSO0FBQ0EsK0NBQVlKLEtBQVo7QUFBbUJELFVBQUFBLDBCQUEwQixFQUExQkE7QUFBbkI7QUFDRDs7QUFDRDtBQUNFLGFBQU9DLEtBQVA7QUFOSjtBQVFEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvc3RvcmUvcmVkdWNlcnMvY29udGV4dE1lbnUuanM/ZGIyZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29udGV4dE1lbnVBY3Rpb25UeXBlcyBmcm9tICdzaGFyZWQvc3RvcmUvdHlwZXMvY29udGV4dE1lbnUnO1xuXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gIHNob3dIaWRkZW5Db250ZXh0TWVudUl0ZW1zOiBmYWxzZSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgeyB0eXBlLCBwYXlsb2FkIH0pIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBjb250ZXh0TWVudUFjdGlvblR5cGVzLnRvZ2dsZUhpZGRlbkNvbnRleHRNZW51SXRlbXM6IHtcbiAgICAgIGNvbnN0IHsgaXNWaXNpYmxlOiBzaG93SGlkZGVuQ29udGV4dE1lbnVJdGVtcyB9ID0gcGF5bG9hZDtcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBzaG93SGlkZGVuQ29udGV4dE1lbnVJdGVtcyB9O1xuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG4iXSwibmFtZXMiOlsiY29udGV4dE1lbnVBY3Rpb25UeXBlcyIsImluaXRpYWxTdGF0ZSIsInNob3dIaWRkZW5Db250ZXh0TWVudUl0ZW1zIiwic3RhdGUiLCJ0eXBlIiwicGF5bG9hZCIsInRvZ2dsZUhpZGRlbkNvbnRleHRNZW51SXRlbXMiLCJpc1Zpc2libGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/store/reducers/contextMenu.js\n");

/***/ }),

/***/ "../js/cronus/store/reducers/debug.js":
/*!********************************************!*\
  !*** ../js/cronus/store/reducers/debug.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var shared_store_types_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/store/types/debug */ \"../js/shared/store/types/debug.js\");\n/* harmony import */ var shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/ui/components/DebugOverlayConsts */ \"../js/shared/ui/components/DebugOverlayConsts.js\");\n/* harmony import */ var cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/store/types/reset */ \"../js/cronus/store/types/reset.js\");\n/* harmony import */ var cronus_store_actions_reset__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/store/actions/reset */ \"../js/cronus/store/actions/reset.js\");\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar timeTresholdInMs = 5000;\nvar groupingTreshold = 3000;\nvar initialState = {\n  keyFrameInterval: 'N/A',\n  INIT: {\n    groupId: 'FLOT',\n    status: shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_1__.STATUS.LOADING,\n    data: []\n  },\n  TIMING: {\n    groupId: 'FLOT',\n    status: shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_1__.STATUS.LOADING,\n    data: [],\n    timeToStartInMs: null\n  },\n  DISCONNECTS: {\n    groupId: 'FLOT',\n    status: shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_1__.STATUS.SUCCESS,\n    data: []\n  },\n  REJECTS: {\n    groupId: 'FLOT',\n    status: shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_1__.STATUS.SUCCESS,\n    data: []\n  },\n  EMPTY_MODULE: {\n    groupId: 'FLOT',\n    status: shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_1__.STATUS.SUCCESS,\n    data: []\n  },\n  DOWNLOAD: {\n    groupId: 'QOS',\n    isEcdn: false,\n    status: shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_1__.STATUS.SUCCESS,\n    data: [],\n    highestTotal: 0\n  },\n  EMPTY_CHUNK: {\n    groupId: 'PLAYBACK',\n    status: shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_1__.STATUS.SUCCESS,\n    data: []\n  },\n  PLAYBACK_RECOVERABLE: {\n    groupId: 'PLAYBACK',\n    status: shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_1__.STATUS.SUCCESS,\n    data: []\n  },\n  PLAYBACK_NON_RECOVERABLE: {\n    groupId: 'PLAYBACK',\n    status: shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_1__.STATUS.SUCCESS,\n    data: []\n  }\n};\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case shared_store_types_debug__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addFlotInitDiagnostics:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        INIT: _objectSpread(_objectSpread({}, state.INIT), {}, {\n          status: payload.inited ? shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_1__.STATUS.SUCCESS : shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_1__.STATUS.ERROR\n        })\n      });\n\n    case shared_store_types_debug__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addFlotDisconnectError:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        DISCONNECTS: _objectSpread(_objectSpread({}, state.DISCONNECTS), {}, {\n          status: shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_1__.STATUS.WARNING,\n          data: [].concat(_toConsumableArray(state.DISCONNECTS.data), [payload])\n        })\n      });\n\n    case shared_store_types_debug__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addFlotRejectError:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        REJECTS: _objectSpread(_objectSpread({}, state.REJECTS), {}, {\n          status: shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_1__.STATUS.ERROR,\n          data: [].concat(_toConsumableArray(state.REJECTS.data), [payload])\n        })\n      });\n\n    case shared_store_types_debug__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addFlotTimingDiagnostics:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        TIMING: _objectSpread(_objectSpread({}, state.TIMING), {}, {\n          status: payload.timeToStartInMs <= timeTresholdInMs ? shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_1__.STATUS.SUCCESS : shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_1__.STATUS.WARNING,\n          timeToStartInMs: payload.timeToStartInMs\n        })\n      });\n\n    case shared_store_types_debug__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addFlotEmptyStreamModuleError:\n      {\n        var isEmpty = payload.isEmpty;\n        var hasLast = !!state.EMPTY_MODULE.data.length;\n\n        if (!hasLast && !isEmpty) {\n          return state;\n        }\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          EMPTY_MODULE: _objectSpread(_objectSpread({}, state.EMPTY_MODULE), {}, {\n            status: shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_1__.STATUS.WARNING,\n            data: [].concat(_toConsumableArray(state.EMPTY_MODULE.data), [payload])\n          })\n        });\n      }\n\n    case shared_store_types_debug__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addKeyFrameDiagnostics:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        keyFrameInterval: payload.keyFrameInterval >= 0 ? payload.keyFrameInterval : 'N/A'\n      });\n\n    case shared_store_types_debug__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addFrameAndDropRate:\n      {\n        var _payload$frameRate = payload.frameRate,\n            frameRate = _payload$frameRate === void 0 ? 'N/A' : _payload$frameRate,\n            _payload$dropRate = payload.dropRate,\n            dropRate = _payload$dropRate === void 0 ? 'N/A' : _payload$dropRate;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          frameRate: frameRate,\n          dropRate: dropRate\n        });\n      }\n\n    case shared_store_types_debug__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addSlowChunkWarning:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        DOWNLOAD: _objectSpread(_objectSpread({}, state.DOWNLOAD), {}, {\n          status: shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_1__.STATUS.WARNING,\n          data: [].concat(_toConsumableArray(state.DOWNLOAD.data), [payload]),\n          isEcdn: !!payload.isEcdn,\n          highestTotal: state.DOWNLOAD.highestTotal < payload.total ? payload.total : state.DOWNLOAD.highestTotal\n        })\n      });\n\n    case shared_store_types_debug__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addChunkEmptyWarning:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        EMPTY_CHUNK: _objectSpread(_objectSpread({}, state.EMPTY_CHUNK), {}, {\n          status: shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_1__.STATUS.WARNING,\n          data: [].concat(_toConsumableArray(state.EMPTY_CHUNK.data), [payload])\n        })\n      });\n\n    case shared_store_types_debug__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addPlaybackWarning:\n    case shared_store_types_debug__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addPlaybackError:\n      {\n        var isError = type === shared_store_types_debug__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addPlaybackError;\n        var newStatus = isError ? shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_1__.STATUS.ERROR : shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_1__.STATUS.WARNING;\n        var checkType = isError ? 'PLAYBACK_NON_RECOVERABLE' : 'PLAYBACK_RECOVERABLE';\n        return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, checkType, _objectSpread(_objectSpread({}, state[checkType]), {}, {\n          status: newStatus,\n          data: addGroupedData(state[checkType].data, payload)\n        })));\n      }\n\n    case cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_2__[\"default\"].reset:\n      {\n        var resetType = payload.type;\n        return resetType === cronus_store_actions_reset__WEBPACK_IMPORTED_MODULE_3__.RESET_TYPES.mediaChange ? initialState : state;\n      }\n\n    default:\n      return state;\n  }\n}\n\nvar addGroupedData = function addGroupedData(data, payload) {\n  var newData = _toConsumableArray(data);\n\n  var currLength = newData.length;\n  var last = newData[currLength - 1];\n  var lastItem = last && last[last.length - 1];\n\n  var shouldGroupWith = function shouldGroupWith(item) {\n    return item.msg === payload.msg && payload.timeStamp - item.timeStamp < groupingTreshold;\n  };\n\n  if (Array.isArray(last) && shouldGroupWith(lastItem)) {\n    newData[currLength - 1] = [].concat(_toConsumableArray(last), [payload]);\n  } else if (last && shouldGroupWith(last)) {\n    newData[currLength - 1] = [last, payload];\n  } else {\n    newData = [].concat(_toConsumableArray(data), [payload]);\n  }\n\n  return newData;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../js/cronus/store/reducers/debug.js\n");

/***/ }),

/***/ "../js/cronus/store/reducers/externalVtt.js":
/*!**************************************************!*\
  !*** ../js/cronus/store/reducers/externalVtt.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var shared_store_types_externalVtt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/store/types/externalVtt */ \"../js/shared/store/types/externalVtt.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nvar initialState = {};\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case shared_store_types_externalVtt__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addExternalVtt:\n      {\n        var vtt = payload.vtt;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          hasExternalVtt: !!vtt.length,\n          vtt: vtt\n        });\n      }\n\n    default:\n      return state;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL3JlZHVjZXJzL2V4dGVybmFsVnR0LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFFQSxJQUFNQyxZQUFZLEdBQUcsRUFBckI7QUFFQSw2QkFBZSxzQ0FBbUQ7QUFBQSxNQUF6Q0MsS0FBeUMsdUVBQWpDRCxZQUFpQzs7QUFBQTtBQUFBLE1BQWpCRSxJQUFpQixRQUFqQkEsSUFBaUI7QUFBQSxNQUFYQyxPQUFXLFFBQVhBLE9BQVc7O0FBQ2hFLFVBQVFELElBQVI7QUFDRSxTQUFLSCxxRkFBTDtBQUE0QztBQUMxQyxZQUFRTSxHQUFSLEdBQWdCRixPQUFoQixDQUFRRSxHQUFSO0FBQ0EsK0NBQ0tKLEtBREw7QUFFRUssVUFBQUEsY0FBYyxFQUFFLENBQUMsQ0FBQ0QsR0FBRyxDQUFDRSxNQUZ4QjtBQUdFRixVQUFBQSxHQUFHLEVBQUhBO0FBSEY7QUFLRDs7QUFDRDtBQUNFLGFBQU9KLEtBQVA7QUFWSjtBQVlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvc3RvcmUvcmVkdWNlcnMvZXh0ZXJuYWxWdHQuanM/ZDYyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXh0ZXJuYWxWdHRBY3Rpb25UeXBlcyBmcm9tICdzaGFyZWQvc3RvcmUvdHlwZXMvZXh0ZXJuYWxWdHQnO1xuXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7fTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCB7IHR5cGUsIHBheWxvYWQgfSkge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIGV4dGVybmFsVnR0QWN0aW9uVHlwZXMuYWRkRXh0ZXJuYWxWdHQ6IHtcbiAgICAgIGNvbnN0IHsgdnR0IH0gPSBwYXlsb2FkO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGhhc0V4dGVybmFsVnR0OiAhIXZ0dC5sZW5ndGgsXG4gICAgICAgIHZ0dCxcbiAgICAgIH07XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJleHRlcm5hbFZ0dEFjdGlvblR5cGVzIiwiaW5pdGlhbFN0YXRlIiwic3RhdGUiLCJ0eXBlIiwicGF5bG9hZCIsImFkZEV4dGVybmFsVnR0IiwidnR0IiwiaGFzRXh0ZXJuYWxWdHQiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/store/reducers/externalVtt.js\n");

/***/ }),

/***/ "../js/cronus/store/reducers/index.js":
/*!********************************************!*\
  !*** ../js/cronus/store/reducers/index.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! redux */ \"../node_modules/redux/es/redux.js\");\n/* harmony import */ var redux_persist_lib_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redux-persist/lib/storage */ \"../node_modules/redux-persist/lib/storage/index.js\");\n/* harmony import */ var redux_persist__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! redux-persist */ \"../node_modules/redux-persist/es/index.js\");\n/* harmony import */ var cronus_config_initial__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/config/initial */ \"../js/cronus/config/initial.js\");\n/* harmony import */ var cronus_store_reducers_ads__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/store/reducers/ads */ \"../js/cronus/store/reducers/ads.js\");\n/* harmony import */ var cronus_store_reducers_broadcaster__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! cronus/store/reducers/broadcaster */ \"../js/cronus/store/reducers/broadcaster.js\");\n/* harmony import */ var cronus_store_reducers_captionSearch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cronus/store/reducers/captionSearch */ \"../js/cronus/store/reducers/captionSearch.js\");\n/* harmony import */ var cronus_store_reducers_captionSettings__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! cronus/store/reducers/captionSettings */ \"../js/cronus/store/reducers/captionSettings.js\");\n/* harmony import */ var cronus_store_reducers_content__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! cronus/store/reducers/content */ \"../js/cronus/store/reducers/content.js\");\n/* harmony import */ var cronus_store_reducers_contextMenu__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! cronus/store/reducers/contextMenu */ \"../js/cronus/store/reducers/contextMenu.js\");\n/* harmony import */ var cronus_store_reducers_debug__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! cronus/store/reducers/debug */ \"../js/cronus/store/reducers/debug.js\");\n/* harmony import */ var cronus_store_reducers_externalVtt__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! cronus/store/reducers/externalVtt */ \"../js/cronus/store/reducers/externalVtt.js\");\n/* harmony import */ var cronus_store_reducers_liveCTA__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! cronus/store/reducers/liveCTA */ \"../js/cronus/store/reducers/liveCTA.js\");\n/* harmony import */ var cronus_store_reducers_logo__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! cronus/store/reducers/logo */ \"../js/cronus/store/reducers/logo.js\");\n/* harmony import */ var cronus_store_reducers_player__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! cronus/store/reducers/player */ \"../js/cronus/store/reducers/player.js\");\n/* harmony import */ var cronus_store_reducers_poll__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! cronus/store/reducers/poll */ \"../js/cronus/store/reducers/poll.js\");\n/* harmony import */ var cronus_store_reducers_playback__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! cronus/store/reducers/playback */ \"../js/cronus/store/reducers/playback.js\");\n/* harmony import */ var cronus_store_reducers_provider__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! cronus/store/reducers/provider */ \"../js/cronus/store/reducers/provider.js\");\n/* harmony import */ var cronus_store_reducers_qos__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! cronus/store/reducers/qos */ \"../js/cronus/store/reducers/qos.js\");\n/* harmony import */ var cronus_store_reducers_seekbar__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! cronus/store/reducers/seekbar */ \"../js/cronus/store/reducers/seekbar.js\");\n/* harmony import */ var cronus_store_reducers_settings__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! cronus/store/reducers/settings */ \"../js/cronus/store/reducers/settings.js\");\n/* harmony import */ var cronus_store_reducers_share__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! cronus/store/reducers/share */ \"../js/cronus/store/reducers/share.js\");\n/* harmony import */ var cronus_store_reducers_slideDeck__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! cronus/store/reducers/slideDeck */ \"../js/cronus/store/reducers/slideDeck.js\");\n/* harmony import */ var cronus_store_reducers_tracking__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! cronus/store/reducers/tracking */ \"../js/cronus/store/reducers/tracking.js\");\n/* harmony import */ var cronus_store_reducers_ums__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! cronus/store/reducers/ums */ \"../js/cronus/store/reducers/ums.js\");\n/* harmony import */ var cronus_store_reducers_viewers__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! cronus/store/reducers/viewers */ \"../js/cronus/store/reducers/viewers.js\");\n/* harmony import */ var cronus_store_reducers_privacy__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! cronus/store/reducers/privacy */ \"../js/cronus/store/reducers/privacy.js\");\n/* harmony import */ var cronus_store_reducers_chapters__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! cronus/store/reducers/chapters */ \"../js/cronus/store/reducers/chapters.js\");\n/* harmony import */ var cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! cronus/store/types/reset */ \"../js/cronus/store/types/reset.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar rootPersistConfig = {\n  key: 'root',\n  storage: redux_persist_lib_storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n  whitelist: []\n};\nvar captionSettingsPersistConfig = {\n  key: 'captionSettings',\n  storage: redux_persist_lib_storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n  whitelist: ['options']\n};\nvar playerPersistConfig = {\n  key: 'mte_viewer_volume',\n  storage: redux_persist_lib_storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n  whitelist: ['volume'],\n  transforms: [{\n    in: function _in(args) {\n      return args;\n    },\n    out: function out(state, key) {\n      if (key === 'volume') {\n        var initial = (0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_2__.getInitialConfig)('volume');\n        return initial !== undefined ? initial : state;\n      }\n\n      return state;\n    }\n  }]\n};\nvar appReducer = (0,redux__WEBPACK_IMPORTED_MODULE_28__.combineReducers)({\n  ads: cronus_store_reducers_ads__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n  broadcaster: cronus_store_reducers_broadcaster__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n  captionSearch: cronus_store_reducers_captionSearch__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\n  captionSettings: (0,redux_persist__WEBPACK_IMPORTED_MODULE_1__.persistReducer)(captionSettingsPersistConfig, cronus_store_reducers_captionSettings__WEBPACK_IMPORTED_MODULE_6__[\"default\"]),\n  chapters: cronus_store_reducers_chapters__WEBPACK_IMPORTED_MODULE_26__[\"default\"],\n  content: cronus_store_reducers_content__WEBPACK_IMPORTED_MODULE_7__[\"default\"],\n  contextMenu: cronus_store_reducers_contextMenu__WEBPACK_IMPORTED_MODULE_8__[\"default\"],\n  debug: cronus_store_reducers_debug__WEBPACK_IMPORTED_MODULE_9__[\"default\"],\n  externalVtt: cronus_store_reducers_externalVtt__WEBPACK_IMPORTED_MODULE_10__[\"default\"],\n  liveCTA: cronus_store_reducers_liveCTA__WEBPACK_IMPORTED_MODULE_11__[\"default\"],\n  logo: cronus_store_reducers_logo__WEBPACK_IMPORTED_MODULE_12__[\"default\"],\n  playback: cronus_store_reducers_playback__WEBPACK_IMPORTED_MODULE_15__[\"default\"],\n  player: (0,redux_persist__WEBPACK_IMPORTED_MODULE_1__.persistReducer)(playerPersistConfig, cronus_store_reducers_player__WEBPACK_IMPORTED_MODULE_13__[\"default\"]),\n  poll: cronus_store_reducers_poll__WEBPACK_IMPORTED_MODULE_14__[\"default\"],\n  privacy: cronus_store_reducers_privacy__WEBPACK_IMPORTED_MODULE_25__[\"default\"],\n  provider: cronus_store_reducers_provider__WEBPACK_IMPORTED_MODULE_16__[\"default\"],\n  qos: cronus_store_reducers_qos__WEBPACK_IMPORTED_MODULE_17__[\"default\"],\n  seekbar: cronus_store_reducers_seekbar__WEBPACK_IMPORTED_MODULE_18__[\"default\"],\n  settings: cronus_store_reducers_settings__WEBPACK_IMPORTED_MODULE_19__[\"default\"],\n  share: cronus_store_reducers_share__WEBPACK_IMPORTED_MODULE_20__[\"default\"],\n  slideDeck: cronus_store_reducers_slideDeck__WEBPACK_IMPORTED_MODULE_21__[\"default\"],\n  tracking: cronus_store_reducers_tracking__WEBPACK_IMPORTED_MODULE_22__[\"default\"],\n  ums: cronus_store_reducers_ums__WEBPACK_IMPORTED_MODULE_23__[\"default\"],\n  viewers: cronus_store_reducers_viewers__WEBPACK_IMPORTED_MODULE_24__[\"default\"]\n});\n\nvar rootReducer = function rootReducer(state, action) {\n  if (action.type === cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_27__[\"default\"].reset) {\n    return appReducer({\n      // Exclude reducers from implicit reset\n      player: state.player,\n      playback: state.playback,\n      content: state.content,\n      ums: state.ums,\n      tracking: state.tracking,\n      share: state.share,\n      debug: state.debug,\n      viewers: state.viewers,\n      liveCTA: state.liveCTA,\n      poll: state.poll,\n      logo: state.logo,\n      captionSearch: state.captionSearch,\n      captionSettings: state.captionSettings,\n      privacy: state.privacy,\n      provider: state.provider\n    }, action);\n  }\n\n  return appReducer(state, action);\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ((0,redux_persist__WEBPACK_IMPORTED_MODULE_1__.persistReducer)(rootPersistConfig, rootReducer));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../js/cronus/store/reducers/index.js\n");

/***/ }),

/***/ "../js/cronus/store/reducers/liveCTA.js":
/*!**********************************************!*\
  !*** ../js/cronus/store/reducers/liveCTA.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/store/types/umsModules */ \"../js/cronus/store/types/umsModules.js\");\n/* harmony import */ var cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/store/types/reset */ \"../js/cronus/store/types/reset.js\");\n/* harmony import */ var cronus_store_actions_reset__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/store/actions/reset */ \"../js/cronus/store/actions/reset.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar initialState = {};\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setLiveCTAModule:\n      {\n        var module = payload.module;\n        var haveToRemove = module.remove;\n\n        if (haveToRemove) {\n          return {};\n        }\n\n        var liveCTAData = module.activate;\n\n        if (liveCTAData) {\n          return _objectSpread({}, liveCTAData);\n        }\n\n        return state;\n      }\n\n    case cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_1__[\"default\"].reset:\n      {\n        var resetType = payload.type;\n        return resetType === cronus_store_actions_reset__WEBPACK_IMPORTED_MODULE_2__.RESET_TYPES.mediaChange ? initialState : state;\n      }\n\n    default:\n      return state;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL3JlZHVjZXJzL2xpdmVDVEEuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUVBLElBQU1HLFlBQVksR0FBRyxFQUFyQjtBQUVBLDZCQUFlLHNDQUFtRDtBQUFBLE1BQXpDQyxLQUF5Qyx1RUFBakNELFlBQWlDOztBQUFBO0FBQUEsTUFBakJFLElBQWlCLFFBQWpCQSxJQUFpQjtBQUFBLE1BQVhDLE9BQVcsUUFBWEEsT0FBVzs7QUFDaEUsVUFBUUQsSUFBUjtBQUNFLFNBQUtMLHNGQUFMO0FBQTZDO0FBQzNDLFlBQVFRLE1BQVIsR0FBbUJGLE9BQW5CLENBQVFFLE1BQVI7QUFDQSxZQUFnQkMsWUFBaEIsR0FBaUNELE1BQWpDLENBQVFFLE1BQVI7O0FBQ0EsWUFBSUQsWUFBSixFQUFrQjtBQUNoQixpQkFBTyxFQUFQO0FBQ0Q7O0FBRUQsWUFBa0JFLFdBQWxCLEdBQWtDSCxNQUFsQyxDQUFRSSxRQUFSOztBQUNBLFlBQUlELFdBQUosRUFBaUI7QUFDZixtQ0FBWUEsV0FBWjtBQUNEOztBQUVELGVBQU9QLEtBQVA7QUFDRDs7QUFDRCxTQUFLSCxzRUFBTDtBQUF1QjtBQUNyQixZQUFjYSxTQUFkLEdBQTRCUixPQUE1QixDQUFRRCxJQUFSO0FBQ0EsZUFBT1MsU0FBUyxLQUFLWiwrRUFBZCxHQUF3Q0MsWUFBeEMsR0FBdURDLEtBQTlEO0FBQ0Q7O0FBQ0Q7QUFDRSxhQUFPQSxLQUFQO0FBcEJKO0FBc0JEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvc3RvcmUvcmVkdWNlcnMvbGl2ZUNUQS5qcz8wYmY3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB1bXNNb2R1bGVzQWN0aW9uVHlwZXMgZnJvbSAnY3JvbnVzL3N0b3JlL3R5cGVzL3Vtc01vZHVsZXMnO1xuaW1wb3J0IHJlc2V0VHlwZXMgZnJvbSAnY3JvbnVzL3N0b3JlL3R5cGVzL3Jlc2V0JztcbmltcG9ydCB7IFJFU0VUX1RZUEVTIH0gZnJvbSAnY3JvbnVzL3N0b3JlL2FjdGlvbnMvcmVzZXQnO1xuXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7fTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCB7IHR5cGUsIHBheWxvYWQgfSkge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIHVtc01vZHVsZXNBY3Rpb25UeXBlcy5zZXRMaXZlQ1RBTW9kdWxlOiB7XG4gICAgICBjb25zdCB7IG1vZHVsZSB9ID0gcGF5bG9hZDtcbiAgICAgIGNvbnN0IHsgcmVtb3ZlOiBoYXZlVG9SZW1vdmUgfSA9IG1vZHVsZTtcbiAgICAgIGlmIChoYXZlVG9SZW1vdmUpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7IGFjdGl2YXRlOiBsaXZlQ1RBRGF0YSB9ID0gbW9kdWxlO1xuICAgICAgaWYgKGxpdmVDVEFEYXRhKSB7XG4gICAgICAgIHJldHVybiB7IC4uLmxpdmVDVEFEYXRhIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG4gICAgY2FzZSByZXNldFR5cGVzLnJlc2V0OiB7XG4gICAgICBjb25zdCB7IHR5cGU6IHJlc2V0VHlwZSB9ID0gcGF5bG9hZDtcbiAgICAgIHJldHVybiByZXNldFR5cGUgPT09IFJFU0VUX1RZUEVTLm1lZGlhQ2hhbmdlID8gaW5pdGlhbFN0YXRlIDogc3RhdGU7XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJ1bXNNb2R1bGVzQWN0aW9uVHlwZXMiLCJyZXNldFR5cGVzIiwiUkVTRVRfVFlQRVMiLCJpbml0aWFsU3RhdGUiLCJzdGF0ZSIsInR5cGUiLCJwYXlsb2FkIiwic2V0TGl2ZUNUQU1vZHVsZSIsIm1vZHVsZSIsImhhdmVUb1JlbW92ZSIsInJlbW92ZSIsImxpdmVDVEFEYXRhIiwiYWN0aXZhdGUiLCJyZXNldCIsInJlc2V0VHlwZSIsIm1lZGlhQ2hhbmdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/store/reducers/liveCTA.js\n");

/***/ }),

/***/ "../js/cronus/store/reducers/logo.js":
/*!*******************************************!*\
  !*** ../js/cronus/store/reducers/logo.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/store/types/umsModules */ \"../js/cronus/store/types/umsModules.js\");\n/* harmony import */ var cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/store/types/reset */ \"../js/cronus/store/types/reset.js\");\n/* harmony import */ var cronus_store_actions_reset__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/store/actions/reset */ \"../js/cronus/store/actions/reset.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n/**\n * @param {Object} obj\n * @return {boolean}\n */\n\nfunction hasSecureURL(obj) {\n  return 'secureUrl' in obj;\n}\n/**\n * @param {Array.<Object>} logos\n * @return {?{url: string, clickUrl: string|undefined}}\n */\n\n\nfunction getCustomLogo(logos) {\n  var objWithSecureURL = logos.find(hasSecureURL);\n\n  if (!objWithSecureURL) {\n    return null;\n  }\n\n  var secureUrl = objWithSecureURL.secureUrl,\n      clickUrl = objWithSecureURL.clickUrl;\n\n  if (!clickUrl) {\n    return {\n      url: secureUrl\n    };\n  }\n\n  return {\n    url: secureUrl,\n    clickUrl: clickUrl\n  };\n}\n\nvar initialState = {\n  showDefaultLogo: false,\n  customLogo: null\n};\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setLogoModule:\n      {\n        var module = payload.module; // Conditions of visibility:\n        //  - If there is no logo module or logo module is false then it's \"No Branding\" and the\n        //  IBM logo should be hidden\n        //  - If the logo doesn't have a secureUrl property then it's\n        //  \"Co-Branding\" or \"IBM Branding\" and the IBM logo should be\n        //  visible\n        //\n        // This logic doesn't care if the player on the site or not\n        // because the CSS handles it. See logo.scss file!\n\n        var showDefaultLogo = module && module.some(function (logo) {\n          return !hasSecureURL(logo);\n        }); // Conditions of visibility:\n        //  - If there is no logo module or logo module is false then it's \"No Branding\" and the\n        //  custom logo should be hidden\n        //  - If the logo has a secureUrl property then it's \"Co-Branding\"\n        //  or \"Full Branding\" and the custom logo should be visible.\n\n        var customLogo = module ? getCustomLogo(module) : null;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          showDefaultLogo: showDefaultLogo,\n          customLogo: customLogo\n        });\n      }\n\n    case cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_1__[\"default\"].reset:\n      {\n        var resetType = payload.type;\n        return resetType === cronus_store_actions_reset__WEBPACK_IMPORTED_MODULE_2__.RESET_TYPES.mediaChange ? initialState : state;\n      }\n\n    default:\n      return state;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL3JlZHVjZXJzL2xvZ28uanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFNBQVNHLFlBQVQsQ0FBc0JDLEdBQXRCLEVBQTJCO0FBQ3pCLFNBQU8sZUFBZUEsR0FBdEI7QUFDRDtBQUVEO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxTQUFTQyxhQUFULENBQXVCQyxLQUF2QixFQUE4QjtBQUM1QixNQUFNQyxnQkFBZ0IsR0FBR0QsS0FBSyxDQUFDRSxJQUFOLENBQVdMLFlBQVgsQ0FBekI7O0FBQ0EsTUFBSSxDQUFDSSxnQkFBTCxFQUF1QjtBQUNyQixXQUFPLElBQVA7QUFDRDs7QUFFRCxNQUFRRSxTQUFSLEdBQWdDRixnQkFBaEMsQ0FBUUUsU0FBUjtBQUFBLE1BQW1CQyxRQUFuQixHQUFnQ0gsZ0JBQWhDLENBQW1CRyxRQUFuQjs7QUFDQSxNQUFJLENBQUNBLFFBQUwsRUFBZTtBQUNiLFdBQU87QUFDTEMsTUFBQUEsR0FBRyxFQUFFRjtBQURBLEtBQVA7QUFHRDs7QUFFRCxTQUFPO0FBQ0xFLElBQUFBLEdBQUcsRUFBRUYsU0FEQTtBQUVMQyxJQUFBQSxRQUFRLEVBQVJBO0FBRkssR0FBUDtBQUlEOztBQUVELElBQU1FLFlBQVksR0FBRztBQUNuQkMsRUFBQUEsZUFBZSxFQUFFLEtBREU7QUFFbkJDLEVBQUFBLFVBQVUsRUFBRTtBQUZPLENBQXJCO0FBS0EsNkJBQWUsc0NBQW1EO0FBQUEsTUFBekNDLEtBQXlDLHVFQUFqQ0gsWUFBaUM7O0FBQUE7QUFBQSxNQUFqQkksSUFBaUIsUUFBakJBLElBQWlCO0FBQUEsTUFBWEMsT0FBVyxRQUFYQSxPQUFXOztBQUNoRSxVQUFRRCxJQUFSO0FBQ0UsU0FBS2hCLG1GQUFMO0FBQXlDO0FBQ3ZDLFlBQVFtQixNQUFSLEdBQW1CRixPQUFuQixDQUFRRSxNQUFSLENBRHVDLENBRXZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxZQUFNTixlQUFlLEdBQUdNLE1BQU0sSUFBSUEsTUFBTSxDQUFDQyxJQUFQLENBQVksVUFBQ0MsSUFBRDtBQUFBLGlCQUFVLENBQUNsQixZQUFZLENBQUNrQixJQUFELENBQXZCO0FBQUEsU0FBWixDQUFsQyxDQVh1QyxDQWF2QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFlBQU1QLFVBQVUsR0FBR0ssTUFBTSxHQUFHZCxhQUFhLENBQUNjLE1BQUQsQ0FBaEIsR0FBMkIsSUFBcEQ7QUFFQSwrQ0FBWUosS0FBWjtBQUFtQkYsVUFBQUEsZUFBZSxFQUFmQSxlQUFuQjtBQUFvQ0MsVUFBQUEsVUFBVSxFQUFWQTtBQUFwQztBQUNEOztBQUNELFNBQUtiLHNFQUFMO0FBQXVCO0FBQ3JCLFlBQWNzQixTQUFkLEdBQTRCTixPQUE1QixDQUFRRCxJQUFSO0FBQ0EsZUFBT08sU0FBUyxLQUFLckIsK0VBQWQsR0FBd0NVLFlBQXhDLEdBQXVERyxLQUE5RDtBQUNEOztBQUNEO0FBQ0UsYUFBT0EsS0FBUDtBQTVCSjtBQThCRCIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vanMvY3JvbnVzL3N0b3JlL3JlZHVjZXJzL2xvZ28uanM/YWNmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdW1zTW9kdWxlQWN0aW9uVHlwZXMgZnJvbSAnY3JvbnVzL3N0b3JlL3R5cGVzL3Vtc01vZHVsZXMnO1xuaW1wb3J0IHJlc2V0VHlwZXMgZnJvbSAnY3JvbnVzL3N0b3JlL3R5cGVzL3Jlc2V0JztcbmltcG9ydCB7IFJFU0VUX1RZUEVTIH0gZnJvbSAnY3JvbnVzL3N0b3JlL2FjdGlvbnMvcmVzZXQnO1xuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGhhc1NlY3VyZVVSTChvYmopIHtcbiAgcmV0dXJuICdzZWN1cmVVcmwnIGluIG9iajtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5LjxPYmplY3Q+fSBsb2dvc1xuICogQHJldHVybiB7P3t1cmw6IHN0cmluZywgY2xpY2tVcmw6IHN0cmluZ3x1bmRlZmluZWR9fVxuICovXG5mdW5jdGlvbiBnZXRDdXN0b21Mb2dvKGxvZ29zKSB7XG4gIGNvbnN0IG9ialdpdGhTZWN1cmVVUkwgPSBsb2dvcy5maW5kKGhhc1NlY3VyZVVSTCk7XG4gIGlmICghb2JqV2l0aFNlY3VyZVVSTCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgeyBzZWN1cmVVcmwsIGNsaWNrVXJsIH0gPSBvYmpXaXRoU2VjdXJlVVJMO1xuICBpZiAoIWNsaWNrVXJsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVybDogc2VjdXJlVXJsLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHVybDogc2VjdXJlVXJsLFxuICAgIGNsaWNrVXJsLFxuICB9O1xufVxuXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gIHNob3dEZWZhdWx0TG9nbzogZmFsc2UsXG4gIGN1c3RvbUxvZ286IG51bGwsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoc3RhdGUgPSBpbml0aWFsU3RhdGUsIHsgdHlwZSwgcGF5bG9hZCB9KSB7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgdW1zTW9kdWxlQWN0aW9uVHlwZXMuc2V0TG9nb01vZHVsZToge1xuICAgICAgY29uc3QgeyBtb2R1bGUgfSA9IHBheWxvYWQ7XG4gICAgICAvLyBDb25kaXRpb25zIG9mIHZpc2liaWxpdHk6XG4gICAgICAvLyAgLSBJZiB0aGVyZSBpcyBubyBsb2dvIG1vZHVsZSBvciBsb2dvIG1vZHVsZSBpcyBmYWxzZSB0aGVuIGl0J3MgXCJObyBCcmFuZGluZ1wiIGFuZCB0aGVcbiAgICAgIC8vICBJQk0gbG9nbyBzaG91bGQgYmUgaGlkZGVuXG4gICAgICAvLyAgLSBJZiB0aGUgbG9nbyBkb2Vzbid0IGhhdmUgYSBzZWN1cmVVcmwgcHJvcGVydHkgdGhlbiBpdCdzXG4gICAgICAvLyAgXCJDby1CcmFuZGluZ1wiIG9yIFwiSUJNIEJyYW5kaW5nXCIgYW5kIHRoZSBJQk0gbG9nbyBzaG91bGQgYmVcbiAgICAgIC8vICB2aXNpYmxlXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBsb2dpYyBkb2Vzbid0IGNhcmUgaWYgdGhlIHBsYXllciBvbiB0aGUgc2l0ZSBvciBub3RcbiAgICAgIC8vIGJlY2F1c2UgdGhlIENTUyBoYW5kbGVzIGl0LiBTZWUgbG9nby5zY3NzIGZpbGUhXG4gICAgICBjb25zdCBzaG93RGVmYXVsdExvZ28gPSBtb2R1bGUgJiYgbW9kdWxlLnNvbWUoKGxvZ28pID0+ICFoYXNTZWN1cmVVUkwobG9nbykpO1xuXG4gICAgICAvLyBDb25kaXRpb25zIG9mIHZpc2liaWxpdHk6XG4gICAgICAvLyAgLSBJZiB0aGVyZSBpcyBubyBsb2dvIG1vZHVsZSBvciBsb2dvIG1vZHVsZSBpcyBmYWxzZSB0aGVuIGl0J3MgXCJObyBCcmFuZGluZ1wiIGFuZCB0aGVcbiAgICAgIC8vICBjdXN0b20gbG9nbyBzaG91bGQgYmUgaGlkZGVuXG4gICAgICAvLyAgLSBJZiB0aGUgbG9nbyBoYXMgYSBzZWN1cmVVcmwgcHJvcGVydHkgdGhlbiBpdCdzIFwiQ28tQnJhbmRpbmdcIlxuICAgICAgLy8gIG9yIFwiRnVsbCBCcmFuZGluZ1wiIGFuZCB0aGUgY3VzdG9tIGxvZ28gc2hvdWxkIGJlIHZpc2libGUuXG4gICAgICBjb25zdCBjdXN0b21Mb2dvID0gbW9kdWxlID8gZ2V0Q3VzdG9tTG9nbyhtb2R1bGUpIDogbnVsbDtcblxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHNob3dEZWZhdWx0TG9nbywgY3VzdG9tTG9nbyB9O1xuICAgIH1cbiAgICBjYXNlIHJlc2V0VHlwZXMucmVzZXQ6IHtcbiAgICAgIGNvbnN0IHsgdHlwZTogcmVzZXRUeXBlIH0gPSBwYXlsb2FkO1xuICAgICAgcmV0dXJuIHJlc2V0VHlwZSA9PT0gUkVTRVRfVFlQRVMubWVkaWFDaGFuZ2UgPyBpbml0aWFsU3RhdGUgOiBzdGF0ZTtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbInVtc01vZHVsZUFjdGlvblR5cGVzIiwicmVzZXRUeXBlcyIsIlJFU0VUX1RZUEVTIiwiaGFzU2VjdXJlVVJMIiwib2JqIiwiZ2V0Q3VzdG9tTG9nbyIsImxvZ29zIiwib2JqV2l0aFNlY3VyZVVSTCIsImZpbmQiLCJzZWN1cmVVcmwiLCJjbGlja1VybCIsInVybCIsImluaXRpYWxTdGF0ZSIsInNob3dEZWZhdWx0TG9nbyIsImN1c3RvbUxvZ28iLCJzdGF0ZSIsInR5cGUiLCJwYXlsb2FkIiwic2V0TG9nb01vZHVsZSIsIm1vZHVsZSIsInNvbWUiLCJsb2dvIiwicmVzZXQiLCJyZXNldFR5cGUiLCJtZWRpYUNoYW5nZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/store/reducers/logo.js\n");

/***/ }),

/***/ "../js/cronus/store/reducers/playback.js":
/*!***********************************************!*\
  !*** ../js/cronus/store/reducers/playback.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var player_utils_number_isNaN__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! player-utils/number/isNaN */ \"../node_modules/player-utils/number/isNaN.js\");\n/* harmony import */ var player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! player-utils/object/get */ \"../node_modules/player-utils/object/get.js\");\n/* harmony import */ var shared_store_types_playback__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/store/types/playback */ \"../js/shared/store/types/playback.js\");\n/* harmony import */ var cronus_store_types_playback__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/store/types/playback */ \"../js/cronus/store/types/playback.js\");\n/* harmony import */ var cronus_config_initial__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! cronus/config/initial */ \"../js/cronus/config/initial.js\");\n/* harmony import */ var cronus_consts__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cronus/consts */ \"../js/cronus/consts.js\");\n/* harmony import */ var cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! cronus/store/types/reset */ \"../js/cronus/store/types/reset.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\nvar initialState = {\n  isBufferEmpty: true,\n  webkitSupportsFullscreen: false,\n  audioTracks: [],\n  closedCaptionTracks: [],\n  selectedAudio: -1,\n  selectedClosedCaption: -2,\n  closedCaptionSelection: null,\n  closedCaptionVisible: true,\n  captionPosition: cronus_consts__WEBPACK_IMPORTED_MODULE_5__.CAPTION_OFFSET,\n  stats: {\n    storages: {},\n    buffers: {}\n  },\n  statsLastUpdatedAt: 0,\n  videoResolution: '',\n  playing: !!(0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_4__.getInitialConfig)('autoplay'),\n  currentTime: 0,\n  initPTS: undefined,\n  ended: false,\n  firstTimeUpdateReceived: false,\n  ready: false,\n  // The `document.createElement('video').duration` is `NaN` but we have to\n  // use JSON serialisable values in the redux store so the initial value is\n  // `undefined`.\n  videoTagDuration: undefined,\n  canPlay: false,\n  videoTrackDisabled: false\n};\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case shared_store_types_playback__WEBPACK_IMPORTED_MODULE_2__[\"default\"].togglePlaying:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        playing: payload\n      });\n\n    case shared_store_types_playback__WEBPACK_IMPORTED_MODULE_2__[\"default\"].selectAudio:\n      {\n        var selectedAudio = payload.index;\n        var isValid = state.audioTracks.some(function (_ref2) {\n          var id = _ref2.id;\n          return id === selectedAudio;\n        });\n\n        if (!isValid) {\n          return state;\n        }\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          selectedAudio: selectedAudio\n        });\n      }\n\n    case shared_store_types_playback__WEBPACK_IMPORTED_MODULE_2__[\"default\"].selectClosedCaption:\n      {\n        var closedCaptionTracks = state.closedCaptionTracks;\n        var selectedClosedCaption = payload.index;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          selectedClosedCaption: selectedClosedCaption,\n          closedCaptionTracks: closedCaptionTracks.map(function (track) {\n            return _objectSpread(_objectSpread({}, track), {}, {\n              active: track.id === selectedClosedCaption\n            });\n          }),\n          closedCaptionVisible: selectedClosedCaption !== -1\n        });\n      }\n\n    case shared_store_types_playback__WEBPACK_IMPORTED_MODULE_2__[\"default\"].setClosedCaptionTracks:\n      {\n        var _closedCaptionTracks = payload.tracks;\n        var closedCaptionActiveFromLocalStorage = payload.closedCaptionActiveFromLocalStorage;\n        var _selectedClosedCaption = state.selectedClosedCaption,\n            closedCaptionSelection = state.closedCaptionSelection;\n\n        if (_selectedClosedCaption === -2) {\n          var defaultTrack = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_closedCaptionTracks.find(function (track) {\n            return track.default;\n          }), 'id', null);\n\n          if (defaultTrack || defaultTrack === 0) {\n            _selectedClosedCaption = defaultTrack;\n            closedCaptionSelection = 'broadcaster';\n          } else if (closedCaptionActiveFromLocalStorage) {\n            _selectedClosedCaption = 0;\n            closedCaptionSelection = 'history';\n          } else {\n            _selectedClosedCaption = -1;\n            closedCaptionSelection = 'manual';\n          }\n        }\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          closedCaptionTracks: _closedCaptionTracks,\n          selectedClosedCaption: _selectedClosedCaption,\n          closedCaptionSelection: closedCaptionSelection\n        });\n      }\n\n    case shared_store_types_playback__WEBPACK_IMPORTED_MODULE_2__[\"default\"].setAudioTracks:\n      {\n        var audioTracks = payload.tracks;\n        var selectedAudioByPrev = findSelectedTrack({\n          prevTracks: state.audioTracks,\n          nextTracks: audioTracks,\n          selectedTrack: state.selectedAudio\n        });\n\n        var _selectedAudio;\n\n        if (selectedAudioByPrev === -1) {\n          var activeTrack = audioTracks.find(function (track) {\n            return track.active;\n          });\n          _selectedAudio = activeTrack ? activeTrack.id : -1;\n        } else {\n          _selectedAudio = selectedAudioByPrev;\n        }\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          selectedAudio: _selectedAudio,\n          audioTracks: audioTracks\n        });\n      }\n\n    case shared_store_types_playback__WEBPACK_IMPORTED_MODULE_2__[\"default\"].setBufferEmpty:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isBufferEmpty: payload.isBufferEmpty\n      });\n\n    case shared_store_types_playback__WEBPACK_IMPORTED_MODULE_2__[\"default\"].setCurrentTime:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        currentTime: payload.currentTime\n      });\n\n    case shared_store_types_playback__WEBPACK_IMPORTED_MODULE_2__[\"default\"].setEnded:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        ended: payload\n      });\n\n    case shared_store_types_playback__WEBPACK_IMPORTED_MODULE_2__[\"default\"].setFirstTimeUpdateReceived:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        firstTimeUpdateReceived: payload\n      });\n\n    case shared_store_types_playback__WEBPACK_IMPORTED_MODULE_2__[\"default\"].setPlaybackStats:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        stats: {\n          storages: {},\n          buffers: payload.stats\n        },\n        statsLastUpdatedAt: payload.currentTime\n      });\n\n    case shared_store_types_playback__WEBPACK_IMPORTED_MODULE_2__[\"default\"].setCodecInfo:\n      {\n        var _payload$codec = payload.codec,\n            width = _payload$codec.width,\n            height = _payload$codec.height,\n            audioCodec = _payload$codec.audioCodec,\n            videoCodec = _payload$codec.videoCodec;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          audio: {\n            codec: audioCodec\n          },\n          video: {\n            width: width,\n            height: height,\n            codec: videoCodec\n          },\n          videoResolution: width && height ? \"\".concat(width, \"x\").concat(height) : ''\n        });\n      }\n\n    case cronus_store_types_playback__WEBPACK_IMPORTED_MODULE_3__[\"default\"].setInitPTS:\n      {\n        var initPTS = payload.initPTS;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          initPTS: initPTS\n        });\n      }\n\n    case shared_store_types_playback__WEBPACK_IMPORTED_MODULE_2__[\"default\"].setReady:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          ready: payload\n        });\n      }\n\n    case cronus_store_types_playback__WEBPACK_IMPORTED_MODULE_3__[\"default\"].setVideoTagDuration:\n      {\n        var durationInSec = payload.durationInSec;\n        var videoTagDuration = (0,player_utils_number_isNaN__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(durationInSec) ? undefined : durationInSec;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          videoTagDuration: videoTagDuration\n        });\n      }\n\n    case cronus_store_types_playback__WEBPACK_IMPORTED_MODULE_3__[\"default\"].setCanPlay:\n      {\n        var canPlay = payload.canPlay;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          canPlay: canPlay\n        });\n      }\n\n    case cronus_store_types_playback__WEBPACK_IMPORTED_MODULE_3__[\"default\"].setCaptionPosition:\n      {\n        var captionPosition = payload.captionPosition;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          captionPosition: captionPosition\n        });\n      }\n\n    case shared_store_types_playback__WEBPACK_IMPORTED_MODULE_2__[\"default\"].toggleVideoTrack:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        videoTrackDisabled: payload\n      });\n\n    case cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_6__[\"default\"].reset:\n      {\n        return _objectSpread(_objectSpread({}, initialState), {}, {\n          ready: state.ready\n        });\n      }\n\n    default:\n      return state;\n  }\n}\n\nfunction findSelectedTrack(_ref3) {\n  var prevTracks = _ref3.prevTracks,\n      nextTracks = _ref3.nextTracks,\n      selectedTrack = _ref3.selectedTrack;\n  var prevTrack = prevTracks.find(function (_ref4) {\n    var id = _ref4.id;\n    return id === selectedTrack;\n  });\n\n  if (!prevTrack) {\n    return -1;\n  } // After stream switch we have to find the previously selected audio track\n  // and update the selectedTrack property.\n  // This will be an array because on HLS there is no country property (we\n  // can't distinguish en-US and en-GB).\n\n\n  var tracksWithTheSameLanguageAndCountry = nextTracks.filter(function (_ref5) {\n    var language = _ref5.language,\n        country = _ref5.country;\n    return language === prevTrack.language && country === prevTrack.country;\n  });\n  var trackWithTheSameId = tracksWithTheSameLanguageAndCountry.find(function (_ref6) {\n    var id = _ref6.id;\n    return id === prevTrack.id;\n  });\n\n  if (trackWithTheSameId) {\n    return trackWithTheSameId.id;\n  }\n\n  return (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(tracksWithTheSameLanguageAndCountry, '0.id', -1);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../js/cronus/store/reducers/playback.js\n");

/***/ }),

/***/ "../js/cronus/store/reducers/player.js":
/*!*********************************************!*\
  !*** ../js/cronus/store/reducers/player.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var player_utils_object_pick__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! player-utils/object/pick */ \"../node_modules/player-utils/object/pick.js\");\n/* harmony import */ var shared_store_types_player__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/store/types/player */ \"../js/shared/store/types/player.js\");\n/* harmony import */ var cronus_config_initial__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/config/initial */ \"../js/cronus/config/initial.js\");\n/* harmony import */ var shared_store_actions_player__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! shared/store/actions/player */ \"../js/shared/store/actions/player.js\");\n/* harmony import */ var cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! cronus/store/types/reset */ \"../js/cronus/store/types/reset.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\nvar messageScreenDefaultSetting = {\n  visible: false,\n  message: '',\n  icon: '',\n  isPermanent: false,\n  timeoutInMs: null\n};\nvar initialState = {\n  fullScreen: false,\n  volume: 100,\n  speed: 1,\n  theaterMode: {\n    visible: isTheaterModeVisible(),\n    enabled: false\n  },\n  statsOverlayVisible: false,\n  debugOverlayVisible: false,\n  assistedReportingOverlayVisible: false,\n  playerSize: {\n    width: 0,\n    height: 0\n  },\n  isBrowserOldNotificationVisible: false,\n  isAssistedReportingNotificationVisible: false,\n  isAssistedReportingNotificationClosedByUser: false,\n  loading: false,\n  messageScreens: getInitialMessageScreens()\n};\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case shared_store_types_player__WEBPACK_IMPORTED_MODULE_1__[\"default\"].toggleFullScreen:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        fullScreen: payload\n      });\n\n    case shared_store_types_player__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setVolume:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        volume: getValidVolume(payload)\n      });\n\n    case shared_store_types_player__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setPlaybackSpeed:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        speed: payload\n      });\n\n    case shared_store_types_player__WEBPACK_IMPORTED_MODULE_1__[\"default\"].toggleTheaterMode:\n      {\n        var nextState = _objectSpread(_objectSpread({}, state.theaterMode), payload);\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          theaterMode: nextState\n        });\n      }\n\n    case shared_store_types_player__WEBPACK_IMPORTED_MODULE_1__[\"default\"].toggleStatsOverlay:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        statsOverlayVisible: payload,\n        debugOverlayVisible: false\n      });\n\n    case shared_store_types_player__WEBPACK_IMPORTED_MODULE_1__[\"default\"].toggleDebugOverlay:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        debugOverlayVisible: payload,\n        statsOverlayVisible: false\n      });\n\n    case shared_store_types_player__WEBPACK_IMPORTED_MODULE_1__[\"default\"].resize:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        playerSize: payload\n      });\n\n    case shared_store_types_player__WEBPACK_IMPORTED_MODULE_1__[\"default\"].toggleAssistedReportingOverlay:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        debugOverlayVisible: false,\n        statsOverlayVisible: false,\n        assistedReportingOverlayVisible: payload\n      });\n\n    case shared_store_types_player__WEBPACK_IMPORTED_MODULE_1__[\"default\"].showNotification:\n      {\n        var isBrowserOldNotificationVisible = payload === shared_store_actions_player__WEBPACK_IMPORTED_MODULE_3__.NOTIFICATION_TYPES.oldBrowser ? true : state.isBrowserOldNotificationVisible;\n        var isAssistedReportingNotificationVisible = payload === shared_store_actions_player__WEBPACK_IMPORTED_MODULE_3__.NOTIFICATION_TYPES.assistedReporting ? true : state.isAssistedReportingNotificationVisible;\n\n        var _nextState = _objectSpread(_objectSpread({}, state), {}, {\n          isBrowserOldNotificationVisible: isBrowserOldNotificationVisible,\n          isAssistedReportingNotificationVisible: isAssistedReportingNotificationVisible\n        });\n\n        return _objectSpread(_objectSpread({}, state), _nextState);\n      }\n\n    case shared_store_types_player__WEBPACK_IMPORTED_MODULE_1__[\"default\"].hideNotification:\n      {\n        var _isBrowserOldNotificationVisible = payload === shared_store_actions_player__WEBPACK_IMPORTED_MODULE_3__.NOTIFICATION_TYPES.oldBrowser ? false : state.isBrowserOldNotificationVisible;\n\n        var _isAssistedReportingNotificationVisible = payload === shared_store_actions_player__WEBPACK_IMPORTED_MODULE_3__.NOTIFICATION_TYPES.assistedReporting ? false : state.isAssistedReportingNotificationVisible;\n\n        var _nextState2 = _objectSpread(_objectSpread({}, state), {}, {\n          isBrowserOldNotificationVisible: _isBrowserOldNotificationVisible,\n          isAssistedReportingNotificationVisible: _isAssistedReportingNotificationVisible\n        });\n\n        return _objectSpread(_objectSpread({}, state), _nextState2);\n      }\n\n    case shared_store_types_player__WEBPACK_IMPORTED_MODULE_1__[\"default\"].closeAssistedReportingNotificationByUser:\n      {\n        var _nextState3 = _objectSpread(_objectSpread({}, state), {}, {\n          isAssistedReportingNotificationVisible: false,\n          isAssistedReportingNotificationClosedByUser: true\n        });\n\n        return _objectSpread(_objectSpread({}, state), _nextState3);\n      }\n\n    case shared_store_types_player__WEBPACK_IMPORTED_MODULE_1__[\"default\"].toggleLoading:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: payload\n      });\n\n    case cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_4__[\"default\"].reset:\n      {\n        return _objectSpread(_objectSpread({}, state), (0,player_utils_object_pick__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(initialState, ['speed', 'statsOverlayVisible', 'debugOverlayVisible', 'loading']));\n      }\n\n    case shared_store_types_player__WEBPACK_IMPORTED_MODULE_1__[\"default\"].showMessageScreen:\n      {\n        var payloadType = payload.type;\n        var messageScreens = state.messageScreens;\n        var resetMessageScreens = Object.keys(messageScreens).reduce(function (prev, key) {\n          var screenValue = key === payloadType ? _objectSpread(_objectSpread({}, messageScreens[payloadType]), {}, {\n            visible: true\n          }, payload) : messageScreenDefaultSetting;\n          return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, key, screenValue));\n        }, {});\n        return _objectSpread(_objectSpread({}, state), {}, {\n          messageScreens: _objectSpread({}, resetMessageScreens)\n        });\n      }\n\n    case shared_store_types_player__WEBPACK_IMPORTED_MODULE_1__[\"default\"].hideMessageScreen:\n      {\n        var _payloadType = payload.type;\n        var _messageScreens = state.messageScreens;\n\n        var newMessageScreen = _objectSpread(_objectSpread({}, messageScreenDefaultSetting), {}, {\n          visible: false\n        });\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          messageScreens: _objectSpread(_objectSpread({}, _messageScreens), {}, _defineProperty({}, _payloadType, newMessageScreen))\n        });\n      }\n\n    default:\n      return state;\n  }\n}\n\nfunction getValidVolume(payload) {\n  var validVolume = payload;\n\n  if (payload > 100) {\n    validVolume = 100;\n  } else if (payload < 0) {\n    validVolume = 0;\n  }\n\n  return validVolume;\n}\n\nfunction isTheaterModeVisible() {\n  if ((0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_2__.getInitialConfig)('theaterVisible')) {\n    return true;\n  }\n\n  var veContainer = document.querySelector('.ve-container');\n  var hasRightBar = veContainer && !veContainer.classList.contains('no-rightbar') && !veContainer.classList.contains('no-socialstream');\n  return !!((0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_2__.getInitialConfig)('sitemode') && hasRightBar);\n}\n\nfunction getInitialMessageScreens() {\n  return Object.values(shared_store_actions_player__WEBPACK_IMPORTED_MODULE_3__.MESSAGE_SCREEN_TYPES).reduce(function (prev, key) {\n    return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, key, messageScreenDefaultSetting));\n  }, {});\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../js/cronus/store/reducers/player.js\n");

/***/ }),

/***/ "../js/cronus/store/reducers/poll.js":
/*!*******************************************!*\
  !*** ../js/cronus/store/reducers/poll.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! player-utils/object/get */ \"../node_modules/player-utils/object/get.js\");\n/* harmony import */ var cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/store/types/umsModules */ \"../js/cronus/store/types/umsModules.js\");\n/* harmony import */ var cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/store/types/reset */ \"../js/cronus/store/types/reset.js\");\n/* harmony import */ var cronus_store_actions_reset__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/store/actions/reset */ \"../js/cronus/store/actions/reset.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar initialState = {};\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setPollModule:\n      {\n        var nextState = _objectSpread({}, state);\n\n        var module = payload.module;\n        var pollStart = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(module, 'pollStart');\n\n        if (pollStart) {\n          nextState = _objectSpread({}, pollStart);\n        }\n\n        var stoppedAt = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(module, 'pollStop.stoppedAt');\n\n        if (stoppedAt) {\n          Object.assign(nextState, {\n            stoppedAt: stoppedAt\n          });\n        }\n\n        return nextState;\n      }\n\n    case cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_2__[\"default\"].reset:\n      {\n        var resetType = payload.type;\n        return resetType === cronus_store_actions_reset__WEBPACK_IMPORTED_MODULE_3__.RESET_TYPES.mediaChange ? initialState : state;\n      }\n\n    default:\n      return state;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL3JlZHVjZXJzL3BvbGwuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLElBQU1JLFlBQVksR0FBRyxFQUFyQjtBQUVBLDZCQUFlLHNDQUFtRDtBQUFBLE1BQXpDQyxLQUF5Qyx1RUFBakNELFlBQWlDOztBQUFBO0FBQUEsTUFBakJFLElBQWlCLFFBQWpCQSxJQUFpQjtBQUFBLE1BQVhDLE9BQVcsUUFBWEEsT0FBVzs7QUFDaEUsVUFBUUQsSUFBUjtBQUNFLFNBQUtMLG1GQUFMO0FBQTBDO0FBQ3hDLFlBQUlRLFNBQVMscUJBQVFKLEtBQVIsQ0FBYjs7QUFFQSxZQUFRSyxNQUFSLEdBQW1CSCxPQUFuQixDQUFRRyxNQUFSO0FBQ0EsWUFBTUMsU0FBUyxHQUFHWCxtRUFBRyxDQUFDVSxNQUFELEVBQVMsV0FBVCxDQUFyQjs7QUFDQSxZQUFJQyxTQUFKLEVBQWU7QUFDYkYsVUFBQUEsU0FBUyxxQkFBUUUsU0FBUixDQUFUO0FBQ0Q7O0FBRUQsWUFBTUMsU0FBUyxHQUFHWixtRUFBRyxDQUFDVSxNQUFELEVBQVMsb0JBQVQsQ0FBckI7O0FBQ0EsWUFBSUUsU0FBSixFQUFlO0FBQ2JDLFVBQUFBLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjTCxTQUFkLEVBQXlCO0FBQUVHLFlBQUFBLFNBQVMsRUFBVEE7QUFBRixXQUF6QjtBQUNEOztBQUVELGVBQU9ILFNBQVA7QUFDRDs7QUFDRCxTQUFLUCxzRUFBTDtBQUF1QjtBQUNyQixZQUFjYyxTQUFkLEdBQTRCVCxPQUE1QixDQUFRRCxJQUFSO0FBQ0EsZUFBT1UsU0FBUyxLQUFLYiwrRUFBZCxHQUF3Q0MsWUFBeEMsR0FBdURDLEtBQTlEO0FBQ0Q7O0FBQ0Q7QUFDRSxhQUFPQSxLQUFQO0FBdEJKO0FBd0JEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvc3RvcmUvcmVkdWNlcnMvcG9sbC5qcz8yMDBmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXQgZnJvbSAncGxheWVyLXV0aWxzL29iamVjdC9nZXQnO1xuaW1wb3J0IHVtc01vZHVsZXNBY3Rpb25UeXBlcyBmcm9tICdjcm9udXMvc3RvcmUvdHlwZXMvdW1zTW9kdWxlcyc7XG5pbXBvcnQgcmVzZXRUeXBlcyBmcm9tICdjcm9udXMvc3RvcmUvdHlwZXMvcmVzZXQnO1xuaW1wb3J0IHsgUkVTRVRfVFlQRVMgfSBmcm9tICdjcm9udXMvc3RvcmUvYWN0aW9ucy9yZXNldCc7XG5cbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHt9O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoc3RhdGUgPSBpbml0aWFsU3RhdGUsIHsgdHlwZSwgcGF5bG9hZCB9KSB7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgdW1zTW9kdWxlc0FjdGlvblR5cGVzLnNldFBvbGxNb2R1bGU6IHtcbiAgICAgIGxldCBuZXh0U3RhdGUgPSB7IC4uLnN0YXRlIH07XG5cbiAgICAgIGNvbnN0IHsgbW9kdWxlIH0gPSBwYXlsb2FkO1xuICAgICAgY29uc3QgcG9sbFN0YXJ0ID0gZ2V0KG1vZHVsZSwgJ3BvbGxTdGFydCcpO1xuICAgICAgaWYgKHBvbGxTdGFydCkge1xuICAgICAgICBuZXh0U3RhdGUgPSB7IC4uLnBvbGxTdGFydCB9O1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzdG9wcGVkQXQgPSBnZXQobW9kdWxlLCAncG9sbFN0b3Auc3RvcHBlZEF0Jyk7XG4gICAgICBpZiAoc3RvcHBlZEF0KSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24obmV4dFN0YXRlLCB7IHN0b3BwZWRBdCB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5leHRTdGF0ZTtcbiAgICB9XG4gICAgY2FzZSByZXNldFR5cGVzLnJlc2V0OiB7XG4gICAgICBjb25zdCB7IHR5cGU6IHJlc2V0VHlwZSB9ID0gcGF5bG9hZDtcbiAgICAgIHJldHVybiByZXNldFR5cGUgPT09IFJFU0VUX1RZUEVTLm1lZGlhQ2hhbmdlID8gaW5pdGlhbFN0YXRlIDogc3RhdGU7XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJnZXQiLCJ1bXNNb2R1bGVzQWN0aW9uVHlwZXMiLCJyZXNldFR5cGVzIiwiUkVTRVRfVFlQRVMiLCJpbml0aWFsU3RhdGUiLCJzdGF0ZSIsInR5cGUiLCJwYXlsb2FkIiwic2V0UG9sbE1vZHVsZSIsIm5leHRTdGF0ZSIsIm1vZHVsZSIsInBvbGxTdGFydCIsInN0b3BwZWRBdCIsIk9iamVjdCIsImFzc2lnbiIsInJlc2V0IiwicmVzZXRUeXBlIiwibWVkaWFDaGFuZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/store/reducers/poll.js\n");

/***/ }),

/***/ "../js/cronus/store/reducers/privacy.js":
/*!**********************************************!*\
  !*** ../js/cronus/store/reducers/privacy.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var shared_store_types_privacy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/store/types/privacy */ \"../js/shared/store/types/privacy.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nvar initialState = {\n  ibmCookie: undefined\n};\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case shared_store_types_privacy__WEBPACK_IMPORTED_MODULE_0__[\"default\"].updatePrivacyCookie:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        ibmCookie: payload\n      });\n\n    default:\n      return state;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL3JlZHVjZXJzL3ByaXZhY3kuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUVBLElBQU1DLFlBQVksR0FBRztBQUNuQkMsRUFBQUEsU0FBUyxFQUFFQztBQURRLENBQXJCO0FBSUEsNkJBQWUsc0NBQW1EO0FBQUEsTUFBekNDLEtBQXlDLHVFQUFqQ0gsWUFBaUM7O0FBQUE7QUFBQSxNQUFqQkksSUFBaUIsUUFBakJBLElBQWlCO0FBQUEsTUFBWEMsT0FBVyxRQUFYQSxPQUFXOztBQUNoRSxVQUFRRCxJQUFSO0FBQ0UsU0FBS0wsc0ZBQUw7QUFDRSw2Q0FBWUksS0FBWjtBQUFtQkYsUUFBQUEsU0FBUyxFQUFFSTtBQUE5Qjs7QUFDRjtBQUNFLGFBQU9GLEtBQVA7QUFKSjtBQU1EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvc3RvcmUvcmVkdWNlcnMvcHJpdmFjeS5qcz81NjNkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwcml2YWN5QWN0aW9uVHlwZXMgZnJvbSAnc2hhcmVkL3N0b3JlL3R5cGVzL3ByaXZhY3knO1xuXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gIGlibUNvb2tpZTogdW5kZWZpbmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCB7IHR5cGUsIHBheWxvYWQgfSkge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIHByaXZhY3lBY3Rpb25UeXBlcy51cGRhdGVQcml2YWN5Q29va2llOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGlibUNvb2tpZTogcGF5bG9hZCB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJwcml2YWN5QWN0aW9uVHlwZXMiLCJpbml0aWFsU3RhdGUiLCJpYm1Db29raWUiLCJ1bmRlZmluZWQiLCJzdGF0ZSIsInR5cGUiLCJwYXlsb2FkIiwidXBkYXRlUHJpdmFjeUNvb2tpZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/store/reducers/privacy.js\n");

/***/ }),

/***/ "../js/cronus/store/reducers/provider.js":
/*!***********************************************!*\
  !*** ../js/cronus/store/reducers/provider.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! player-utils/object/get */ \"../node_modules/player-utils/object/get.js\");\n/* harmony import */ var shared_store_types_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/store/types/provider */ \"../js/shared/store/types/provider.js\");\n/* harmony import */ var cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/store/types/umsModules */ \"../js/cronus/store/types/umsModules.js\");\n/* harmony import */ var cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/store/types/reset */ \"../js/cronus/store/types/reset.js\");\n/* harmony import */ var cronus_store_actions_reset__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! cronus/store/actions/reset */ \"../js/cronus/store/actions/reset.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\nvar initialState = {\n  finalResult: [],\n  fallback: '',\n  location: '',\n  preferredLocation: [],\n  cdnConfig: {},\n  currentProvider: undefined,\n  forcedUrl: '',\n  contentAccess: {\n    masterPlaylist: null,\n    providerQueryParam: 'cdnHost',\n    isLive: undefined\n  }\n};\n/**\n * @param {string} mediaId - e.g. \"channel.1524\"\n * @returns {boolean}\n */\n\nfunction isChannel(mediaId) {\n  return mediaId.startsWith('channel');\n}\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case shared_store_types_provider__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setProvidersStats:\n      {\n        var finalResult = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(payload.stats, 'finalResult', state.finalResult);\n        var fallback = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(payload.stats, 'fallback', state.fallback);\n        var location = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(payload.stats, 'location', state.location);\n        var preferredLocation = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(payload.stats, 'preferredLocation', state.preferredLocation);\n        var cdnConfig = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(payload.stats, 'cdnConfig', state.cdnConfig);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          finalResult: finalResult,\n          fallback: fallback,\n          location: location,\n          preferredLocation: preferredLocation,\n          cdnConfig: cdnConfig\n        });\n      }\n\n    case shared_store_types_provider__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setCurrentProvider:\n      {\n        var provider = payload.provider;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          currentProvider: provider\n        });\n      }\n\n    case shared_store_types_provider__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setForcedProviderUrl:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          forcedUrl: payload.url\n        });\n      }\n\n    case cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_2__[\"default\"].setStreamModule:\n      {\n        var module = payload.module,\n            mediaId = payload.mediaId;\n        var isContentAccessChannelRelated = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(state, 'contentAccess.isLive', false);\n        var _module$contentAvaila = module.contentAvailable,\n            contentAvailable = _module$contentAvaila === void 0 ? false : _module$contentAvaila;\n\n        if (!contentAvailable && isContentAccessChannelRelated) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            contentAccess: initialState.contentAccess\n          });\n        }\n\n        var streamFormat = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(module, 'streamFormats.hls/mp4/rfc');\n\n        if (!streamFormat) {\n          return state;\n        }\n\n        var isChannelRelatedModule = isChannel(mediaId);\n\n        if (isContentAccessChannelRelated && !isChannelRelatedModule) {\n          return state;\n        }\n\n        var _get = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(streamFormat, 'contentAccess.accessList.0.data', {}),\n            masterPlaylist = _get.url,\n            providerQueryParam = _get.parameter;\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          contentAccess: {\n            masterPlaylist: masterPlaylist,\n            providerQueryParam: providerQueryParam,\n            isLive: isChannelRelatedModule\n          }\n        });\n      }\n\n    case cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_3__[\"default\"].reset:\n      {\n        var resetType = payload.type;\n\n        var _isContentAccessChannelRelated = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(state, 'contentAccess.isLive', false);\n\n        if (resetType === cronus_store_actions_reset__WEBPACK_IMPORTED_MODULE_4__.RESET_TYPES.offAir && _isContentAccessChannelRelated) {\n          return _objectSpread(_objectSpread({}, initialState), {}, {\n            contentAccess: state.contentAccess\n          });\n        }\n\n        return initialState;\n      }\n\n    default:\n      return state;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../js/cronus/store/reducers/provider.js\n");

/***/ }),

/***/ "../js/cronus/store/reducers/qos.js":
/*!******************************************!*\
  !*** ../js/cronus/store/reducers/qos.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var cronus_store_types_qos__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/store/types/qos */ \"../js/cronus/store/types/qos.js\");\n/* harmony import */ var shared_store_types_qos__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/store/types/qos */ \"../js/shared/store/types/qos.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar initialState = {\n  selectedId: -1,\n  qualities: [],\n  loading: false,\n  stats: {},\n  statsLastUpdatedAt: 0\n};\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case cronus_store_types_qos__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setSelectedQuality:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selectedId: payload.id\n      });\n\n    case cronus_store_types_qos__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setQualityLoading:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: payload.loading\n      });\n\n    case cronus_store_types_qos__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setQualities:\n      {\n        var qualities = payload.qualities.map(function (track) {\n          return _objectSpread(_objectSpread({}, track), {}, {\n            label: getQualityLabel(track)\n          });\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          qualities: qualities\n        });\n      }\n\n    case shared_store_types_qos__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setStatsData:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          stats: payload.stats,\n          statsLastUpdatedAt: payload.currentTime\n        });\n      }\n\n    default:\n      return state;\n  }\n}\n/**\n * @param {number} bitrate\n * @returns {string}\n */\n\nfunction getBitrateLabel(bitrate) {\n  var bitrateInKbps = bitrate / 1000;\n\n  if (bitrateInKbps >= 1000) {\n    var bitrateInMbps = bitrateInKbps / 1000;\n    var roundedBitrateInMbps = Math.round(bitrateInMbps * 10) / 10;\n    return \" @ \".concat(roundedBitrateInMbps, \" Mbps\");\n  }\n\n  return \" @ \".concat(Math.round(bitrateInKbps), \" kbps\");\n}\n/**\n * @param {number} quality\n * @returns {string}\n */\n\n\nfunction getQualityLabel(quality) {\n  var height = Math.round(quality.height / 20) * 20;\n  var text = \"\".concat(height, \"p\");\n  var suffix = height >= 720 ? ' HD' : '';\n  var bitrate = getBitrateLabel(quality.bitrate);\n  return {\n    text: text,\n    suffix: suffix,\n    bitrate: bitrate\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL3JlZHVjZXJzL3Fvcy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBRUEsSUFBTUUsWUFBWSxHQUFHO0FBQ25CQyxFQUFBQSxVQUFVLEVBQUUsQ0FBQyxDQURNO0FBRW5CQyxFQUFBQSxTQUFTLEVBQUUsRUFGUTtBQUduQkMsRUFBQUEsT0FBTyxFQUFFLEtBSFU7QUFJbkJDLEVBQUFBLEtBQUssRUFBRSxFQUpZO0FBS25CQyxFQUFBQSxrQkFBa0IsRUFBRTtBQUxELENBQXJCO0FBUUEsNkJBQWUsc0NBQW1EO0FBQUEsTUFBekNDLEtBQXlDLHVFQUFqQ04sWUFBaUM7O0FBQUE7QUFBQSxNQUFqQk8sSUFBaUIsUUFBakJBLElBQWlCO0FBQUEsTUFBWEMsT0FBVyxRQUFYQSxPQUFXOztBQUNoRSxVQUFRRCxJQUFSO0FBQ0UsU0FBS1QsaUZBQUw7QUFDRSw2Q0FDS1EsS0FETDtBQUVFTCxRQUFBQSxVQUFVLEVBQUVPLE9BQU8sQ0FBQ0U7QUFGdEI7O0FBSUYsU0FBS1osZ0ZBQUw7QUFDRSw2Q0FDS1EsS0FETDtBQUVFSCxRQUFBQSxPQUFPLEVBQUVLLE9BQU8sQ0FBQ0w7QUFGbkI7O0FBSUYsU0FBS0wsMkVBQUw7QUFBa0M7QUFDaEMsWUFBTUksU0FBUyxHQUFHTSxPQUFPLENBQUNOLFNBQVIsQ0FBa0JXLEdBQWxCLENBQXNCLFVBQUNDLEtBQUQ7QUFBQSxpREFDbkNBLEtBRG1DO0FBRXRDQyxZQUFBQSxLQUFLLEVBQUVDLGVBQWUsQ0FBQ0YsS0FBRDtBQUZnQjtBQUFBLFNBQXRCLENBQWxCO0FBSUEsK0NBQ0tSLEtBREw7QUFFRUosVUFBQUEsU0FBUyxFQUFUQTtBQUZGO0FBSUQ7O0FBQ0QsU0FBS0gsMkVBQUw7QUFBd0M7QUFDdEMsK0NBQ0tPLEtBREw7QUFFRUYsVUFBQUEsS0FBSyxFQUFFSSxPQUFPLENBQUNKLEtBRmpCO0FBR0VDLFVBQUFBLGtCQUFrQixFQUFFRyxPQUFPLENBQUNVO0FBSDlCO0FBS0Q7O0FBQ0Q7QUFDRSxhQUFPWixLQUFQO0FBN0JKO0FBK0JEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBU2EsZUFBVCxDQUF5QkMsT0FBekIsRUFBa0M7QUFDaEMsTUFBTUMsYUFBYSxHQUFHRCxPQUFPLEdBQUcsSUFBaEM7O0FBQ0EsTUFBSUMsYUFBYSxJQUFJLElBQXJCLEVBQTJCO0FBQ3pCLFFBQU1DLGFBQWEsR0FBR0QsYUFBYSxHQUFHLElBQXRDO0FBQ0EsUUFBTUUsb0JBQW9CLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXSCxhQUFhLEdBQUcsRUFBM0IsSUFBaUMsRUFBOUQ7QUFDQSx3QkFBYUMsb0JBQWI7QUFDRDs7QUFDRCxzQkFBYUMsSUFBSSxDQUFDQyxLQUFMLENBQVdKLGFBQVgsQ0FBYjtBQUNEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFNBQVNMLGVBQVQsQ0FBeUJVLE9BQXpCLEVBQWtDO0FBQ2hDLE1BQU1DLE1BQU0sR0FBR0gsSUFBSSxDQUFDQyxLQUFMLENBQVdDLE9BQU8sQ0FBQ0MsTUFBUixHQUFpQixFQUE1QixJQUFrQyxFQUFqRDtBQUNBLE1BQU1DLElBQUksYUFBTUQsTUFBTixNQUFWO0FBQ0EsTUFBTUUsTUFBTSxHQUFHRixNQUFNLElBQUksR0FBVixHQUFnQixLQUFoQixHQUF3QixFQUF2QztBQUNBLE1BQU1QLE9BQU8sR0FBR0QsZUFBZSxDQUFDTyxPQUFPLENBQUNOLE9BQVQsQ0FBL0I7QUFFQSxTQUFPO0FBQUVRLElBQUFBLElBQUksRUFBSkEsSUFBRjtBQUFRQyxJQUFBQSxNQUFNLEVBQU5BLE1BQVI7QUFBZ0JULElBQUFBLE9BQU8sRUFBUEE7QUFBaEIsR0FBUDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvc3RvcmUvcmVkdWNlcnMvcW9zLmpzPzRjY2UiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHFvc0FjdGlvblR5cGVzIGZyb20gJ2Nyb251cy9zdG9yZS90eXBlcy9xb3MnO1xuaW1wb3J0IHNoYXJlZFFvc0FjdGlvblR5cGVzIGZyb20gJ3NoYXJlZC9zdG9yZS90eXBlcy9xb3MnO1xuXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gIHNlbGVjdGVkSWQ6IC0xLFxuICBxdWFsaXRpZXM6IFtdLFxuICBsb2FkaW5nOiBmYWxzZSxcbiAgc3RhdHM6IHt9LFxuICBzdGF0c0xhc3RVcGRhdGVkQXQ6IDAsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoc3RhdGUgPSBpbml0aWFsU3RhdGUsIHsgdHlwZSwgcGF5bG9hZCB9KSB7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgcW9zQWN0aW9uVHlwZXMuc2V0U2VsZWN0ZWRRdWFsaXR5OlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHNlbGVjdGVkSWQ6IHBheWxvYWQuaWQsXG4gICAgICB9O1xuICAgIGNhc2UgcW9zQWN0aW9uVHlwZXMuc2V0UXVhbGl0eUxvYWRpbmc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgbG9hZGluZzogcGF5bG9hZC5sb2FkaW5nLFxuICAgICAgfTtcbiAgICBjYXNlIHFvc0FjdGlvblR5cGVzLnNldFF1YWxpdGllczoge1xuICAgICAgY29uc3QgcXVhbGl0aWVzID0gcGF5bG9hZC5xdWFsaXRpZXMubWFwKCh0cmFjaykgPT4gKHtcbiAgICAgICAgLi4udHJhY2ssXG4gICAgICAgIGxhYmVsOiBnZXRRdWFsaXR5TGFiZWwodHJhY2spLFxuICAgICAgfSkpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHF1YWxpdGllcyxcbiAgICAgIH07XG4gICAgfVxuICAgIGNhc2Ugc2hhcmVkUW9zQWN0aW9uVHlwZXMuc2V0U3RhdHNEYXRhOiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgc3RhdHM6IHBheWxvYWQuc3RhdHMsXG4gICAgICAgIHN0YXRzTGFzdFVwZGF0ZWRBdDogcGF5bG9hZC5jdXJyZW50VGltZSxcbiAgICAgIH07XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gYml0cmF0ZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZ2V0Qml0cmF0ZUxhYmVsKGJpdHJhdGUpIHtcbiAgY29uc3QgYml0cmF0ZUluS2JwcyA9IGJpdHJhdGUgLyAxMDAwO1xuICBpZiAoYml0cmF0ZUluS2JwcyA+PSAxMDAwKSB7XG4gICAgY29uc3QgYml0cmF0ZUluTWJwcyA9IGJpdHJhdGVJbkticHMgLyAxMDAwO1xuICAgIGNvbnN0IHJvdW5kZWRCaXRyYXRlSW5NYnBzID0gTWF0aC5yb3VuZChiaXRyYXRlSW5NYnBzICogMTApIC8gMTA7XG4gICAgcmV0dXJuIGAgQCAke3JvdW5kZWRCaXRyYXRlSW5NYnBzfSBNYnBzYDtcbiAgfVxuICByZXR1cm4gYCBAICR7TWF0aC5yb3VuZChiaXRyYXRlSW5LYnBzKX0ga2Jwc2A7XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHF1YWxpdHlcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGdldFF1YWxpdHlMYWJlbChxdWFsaXR5KSB7XG4gIGNvbnN0IGhlaWdodCA9IE1hdGgucm91bmQocXVhbGl0eS5oZWlnaHQgLyAyMCkgKiAyMDtcbiAgY29uc3QgdGV4dCA9IGAke2hlaWdodH1wYDtcbiAgY29uc3Qgc3VmZml4ID0gaGVpZ2h0ID49IDcyMCA/ICcgSEQnIDogJyc7XG4gIGNvbnN0IGJpdHJhdGUgPSBnZXRCaXRyYXRlTGFiZWwocXVhbGl0eS5iaXRyYXRlKTtcblxuICByZXR1cm4geyB0ZXh0LCBzdWZmaXgsIGJpdHJhdGUgfTtcbn1cbiJdLCJuYW1lcyI6WyJxb3NBY3Rpb25UeXBlcyIsInNoYXJlZFFvc0FjdGlvblR5cGVzIiwiaW5pdGlhbFN0YXRlIiwic2VsZWN0ZWRJZCIsInF1YWxpdGllcyIsImxvYWRpbmciLCJzdGF0cyIsInN0YXRzTGFzdFVwZGF0ZWRBdCIsInN0YXRlIiwidHlwZSIsInBheWxvYWQiLCJzZXRTZWxlY3RlZFF1YWxpdHkiLCJpZCIsInNldFF1YWxpdHlMb2FkaW5nIiwic2V0UXVhbGl0aWVzIiwibWFwIiwidHJhY2siLCJsYWJlbCIsImdldFF1YWxpdHlMYWJlbCIsInNldFN0YXRzRGF0YSIsImN1cnJlbnRUaW1lIiwiZ2V0Qml0cmF0ZUxhYmVsIiwiYml0cmF0ZSIsImJpdHJhdGVJbkticHMiLCJiaXRyYXRlSW5NYnBzIiwicm91bmRlZEJpdHJhdGVJbk1icHMiLCJNYXRoIiwicm91bmQiLCJxdWFsaXR5IiwiaGVpZ2h0IiwidGV4dCIsInN1ZmZpeCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/store/reducers/qos.js\n");

/***/ }),

/***/ "../js/cronus/store/reducers/seekbar.js":
/*!**********************************************!*\
  !*** ../js/cronus/store/reducers/seekbar.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var shared_store_types_seekbar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/store/types/seekbar */ \"../js/shared/store/types/seekbar.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nvar initialState = {\n  activeMarker: undefined\n};\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case shared_store_types_seekbar__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setActiveMarker:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        activeMarker: payload.activeMarker\n      });\n\n    case shared_store_types_seekbar__WEBPACK_IMPORTED_MODULE_0__[\"default\"].clearActiveMarker:\n      return initialState;\n\n    default:\n      return state;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL3JlZHVjZXJzL3NlZWtiYXIuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUVBLElBQU1DLFlBQVksR0FBRztBQUNuQkMsRUFBQUEsWUFBWSxFQUFFQztBQURLLENBQXJCO0FBSUEsNkJBQWUsc0NBQW1EO0FBQUEsTUFBekNDLEtBQXlDLHVFQUFqQ0gsWUFBaUM7O0FBQUE7QUFBQSxNQUFqQkksSUFBaUIsUUFBakJBLElBQWlCO0FBQUEsTUFBWEMsT0FBVyxRQUFYQSxPQUFXOztBQUNoRSxVQUFRRCxJQUFSO0FBQ0UsU0FBS0wsa0ZBQUw7QUFDRSw2Q0FBWUksS0FBWjtBQUFtQkYsUUFBQUEsWUFBWSxFQUFFSSxPQUFPLENBQUNKO0FBQXpDOztBQUNGLFNBQUtGLG9GQUFMO0FBQ0UsYUFBT0MsWUFBUDs7QUFDRjtBQUNFLGFBQU9HLEtBQVA7QUFOSjtBQVFEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvc3RvcmUvcmVkdWNlcnMvc2Vla2Jhci5qcz8wNWIyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzZWVrYmFyQWN0aW9uVHlwZXMgZnJvbSAnc2hhcmVkL3N0b3JlL3R5cGVzL3NlZWtiYXInO1xuXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gIGFjdGl2ZU1hcmtlcjogdW5kZWZpbmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCB7IHR5cGUsIHBheWxvYWQgfSkge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIHNlZWtiYXJBY3Rpb25UeXBlcy5zZXRBY3RpdmVNYXJrZXI6XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgYWN0aXZlTWFya2VyOiBwYXlsb2FkLmFjdGl2ZU1hcmtlciB9O1xuICAgIGNhc2Ugc2Vla2JhckFjdGlvblR5cGVzLmNsZWFyQWN0aXZlTWFya2VyOlxuICAgICAgcmV0dXJuIGluaXRpYWxTdGF0ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG4iXSwibmFtZXMiOlsic2Vla2JhckFjdGlvblR5cGVzIiwiaW5pdGlhbFN0YXRlIiwiYWN0aXZlTWFya2VyIiwidW5kZWZpbmVkIiwic3RhdGUiLCJ0eXBlIiwicGF5bG9hZCIsInNldEFjdGl2ZU1hcmtlciIsImNsZWFyQWN0aXZlTWFya2VyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/store/reducers/seekbar.js\n");

/***/ }),

/***/ "../js/cronus/store/reducers/settings.js":
/*!***********************************************!*\
  !*** ../js/cronus/store/reducers/settings.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var shared_store_types_settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/store/types/settings */ \"../js/shared/store/types/settings.js\");\n/* harmony import */ var shared_lib_storage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/lib/storage */ \"../js/shared/lib/storage.js\");\n/* harmony import */ var cronus_config_initial__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/config/initial */ \"../js/cronus/config/initial.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nfunction getInitialState() {\n  return {\n    debug: shared_lib_storage__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(shared_lib_storage__WEBPACK_IMPORTED_MODULE_1__.debugConsoleStorageKey) || !!(0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_2__.getInitialConfig)('debug'),\n    isTitleVisible: true\n  };\n}\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getInitialState();\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case shared_store_types_settings__WEBPACK_IMPORTED_MODULE_0__[\"default\"].toggleDebug:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        debug: payload\n      });\n\n    case shared_store_types_settings__WEBPACK_IMPORTED_MODULE_0__[\"default\"].toggleTitleVisibility:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isTitleVisible: payload\n      });\n\n    default:\n      return state;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL3JlZHVjZXJzL3NldHRpbmdzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0ksZUFBVCxHQUEyQjtBQUN6QixTQUFPO0FBQ0xDLElBQUFBLEtBQUssRUFBRUosOERBQUEsQ0FBWUMsc0VBQVosS0FBdUMsQ0FBQyxDQUFDQyx1RUFBZ0IsQ0FBQyxPQUFELENBRDNEO0FBRUxJLElBQUFBLGNBQWMsRUFBRTtBQUZYLEdBQVA7QUFJRDs7QUFFRCw2QkFBZSxzQ0FBd0Q7QUFBQSxNQUE5Q0MsS0FBOEMsdUVBQXRDSixlQUFlLEVBQXVCOztBQUFBO0FBQUEsTUFBakJLLElBQWlCLFFBQWpCQSxJQUFpQjtBQUFBLE1BQVhDLE9BQVcsUUFBWEEsT0FBVzs7QUFDckUsVUFBUUQsSUFBUjtBQUNFLFNBQUtULCtFQUFMO0FBQ0UsNkNBQ0tRLEtBREw7QUFFRUgsUUFBQUEsS0FBSyxFQUFFSztBQUZUOztBQUlGLFNBQUtWLHlGQUFMO0FBQ0UsNkNBQ0tRLEtBREw7QUFFRUQsUUFBQUEsY0FBYyxFQUFFRztBQUZsQjs7QUFJRjtBQUNFLGFBQU9GLEtBQVA7QUFaSjtBQWNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvc3RvcmUvcmVkdWNlcnMvc2V0dGluZ3MuanM/OWE2OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc2V0dGluZ3NBY3Rpb25UeXBlcyBmcm9tICdzaGFyZWQvc3RvcmUvdHlwZXMvc2V0dGluZ3MnO1xuaW1wb3J0IHN0b3JhZ2UsIHsgZGVidWdDb25zb2xlU3RvcmFnZUtleSB9IGZyb20gJ3NoYXJlZC9saWIvc3RvcmFnZSc7XG5pbXBvcnQgeyBnZXRJbml0aWFsQ29uZmlnIH0gZnJvbSAnY3JvbnVzL2NvbmZpZy9pbml0aWFsJztcblxuZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICByZXR1cm4ge1xuICAgIGRlYnVnOiBzdG9yYWdlLmdldChkZWJ1Z0NvbnNvbGVTdG9yYWdlS2V5KSB8fCAhIWdldEluaXRpYWxDb25maWcoJ2RlYnVnJyksXG4gICAgaXNUaXRsZVZpc2libGU6IHRydWUsXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChzdGF0ZSA9IGdldEluaXRpYWxTdGF0ZSgpLCB7IHR5cGUsIHBheWxvYWQgfSkge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIHNldHRpbmdzQWN0aW9uVHlwZXMudG9nZ2xlRGVidWc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgZGVidWc6IHBheWxvYWQsXG4gICAgICB9O1xuICAgIGNhc2Ugc2V0dGluZ3NBY3Rpb25UeXBlcy50b2dnbGVUaXRsZVZpc2liaWxpdHk6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgaXNUaXRsZVZpc2libGU6IHBheWxvYWQsXG4gICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJzZXR0aW5nc0FjdGlvblR5cGVzIiwic3RvcmFnZSIsImRlYnVnQ29uc29sZVN0b3JhZ2VLZXkiLCJnZXRJbml0aWFsQ29uZmlnIiwiZ2V0SW5pdGlhbFN0YXRlIiwiZGVidWciLCJnZXQiLCJpc1RpdGxlVmlzaWJsZSIsInN0YXRlIiwidHlwZSIsInBheWxvYWQiLCJ0b2dnbGVEZWJ1ZyIsInRvZ2dsZVRpdGxlVmlzaWJpbGl0eSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/store/reducers/settings.js\n");

/***/ }),

/***/ "../js/cronus/store/reducers/share.js":
/*!********************************************!*\
  !*** ../js/cronus/store/reducers/share.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var player_utils_object_pick__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! player-utils/object/pick */ \"../node_modules/player-utils/object/pick.js\");\n/* harmony import */ var cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/store/types/umsModules */ \"../js/cronus/store/types/umsModules.js\");\n/* harmony import */ var cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/store/types/reset */ \"../js/cronus/store/types/reset.js\");\n/* harmony import */ var cronus_store_actions_reset__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/store/actions/reset */ \"../js/cronus/store/actions/reset.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar initialState = {\n  facebook: undefined,\n  twitter: undefined,\n  mail: undefined,\n  embed: undefined,\n  copyLink: undefined,\n  enabled: false\n};\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setShareModule:\n      {\n        var module = payload.module;\n\n        var _pick = (0,player_utils_object_pick__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(module, ['facebook', 'twitter', 'mail', 'embed', 'copy-link']),\n            facebook = _pick.facebook,\n            twitter = _pick.twitter,\n            mail = _pick.mail,\n            embed = _pick.embed,\n            copyLink = _pick['copy-link'];\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          facebook: facebook,\n          twitter: twitter,\n          mail: mail,\n          // if it is truthy, we will show the copy link button\n          embed: embed,\n          copyLink: copyLink,\n          enabled: !!module\n        });\n      }\n\n    case cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_2__[\"default\"].reset:\n      {\n        var resetType = payload.type;\n        return resetType === cronus_store_actions_reset__WEBPACK_IMPORTED_MODULE_3__.RESET_TYPES.mediaChange ? initialState : state;\n      }\n\n    default:\n      return state;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL3JlZHVjZXJzL3NoYXJlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQSxJQUFNSSxZQUFZLEdBQUc7QUFDbkJDLEVBQUFBLFFBQVEsRUFBRUMsU0FEUztBQUVuQkMsRUFBQUEsT0FBTyxFQUFFRCxTQUZVO0FBR25CRSxFQUFBQSxJQUFJLEVBQUVGLFNBSGE7QUFJbkJHLEVBQUFBLEtBQUssRUFBRUgsU0FKWTtBQUtuQkksRUFBQUEsUUFBUSxFQUFFSixTQUxTO0FBTW5CSyxFQUFBQSxPQUFPLEVBQUU7QUFOVSxDQUFyQjtBQVNBLDZCQUFlLHNDQUFtRDtBQUFBLE1BQXpDQyxLQUF5Qyx1RUFBakNSLFlBQWlDOztBQUFBO0FBQUEsTUFBakJTLElBQWlCLFFBQWpCQSxJQUFpQjtBQUFBLE1BQVhDLE9BQVcsUUFBWEEsT0FBVzs7QUFDaEUsVUFBUUQsSUFBUjtBQUNFLFNBQUtaLG9GQUFMO0FBQTBDO0FBQ3hDLFlBQVFlLE1BQVIsR0FBbUJGLE9BQW5CLENBQVFFLE1BQVI7O0FBQ0Esb0JBTUloQixvRUFBSSxDQUFDZ0IsTUFBRCxFQUFTLENBQUMsVUFBRCxFQUFhLFNBQWIsRUFBd0IsTUFBeEIsRUFBZ0MsT0FBaEMsRUFBeUMsV0FBekMsQ0FBVCxDQU5SO0FBQUEsWUFDRVgsUUFERixTQUNFQSxRQURGO0FBQUEsWUFFRUUsT0FGRixTQUVFQSxPQUZGO0FBQUEsWUFHRUMsSUFIRixTQUdFQSxJQUhGO0FBQUEsWUFJRUMsS0FKRixTQUlFQSxLQUpGO0FBQUEsWUFLZUMsUUFMZixTQUtFLFdBTEY7O0FBT0EsK0NBQ0tFLEtBREw7QUFFRVAsVUFBQUEsUUFBUSxFQUFSQSxRQUZGO0FBR0VFLFVBQUFBLE9BQU8sRUFBUEEsT0FIRjtBQUlFQyxVQUFBQSxJQUFJLEVBQUpBLElBSkY7QUFJUTtBQUNOQyxVQUFBQSxLQUFLLEVBQUxBLEtBTEY7QUFNRUMsVUFBQUEsUUFBUSxFQUFSQSxRQU5GO0FBT0VDLFVBQUFBLE9BQU8sRUFBRSxDQUFDLENBQUNLO0FBUGI7QUFTRDs7QUFDRCxTQUFLZCxzRUFBTDtBQUF1QjtBQUNyQixZQUFjZ0IsU0FBZCxHQUE0QkosT0FBNUIsQ0FBUUQsSUFBUjtBQUNBLGVBQU9LLFNBQVMsS0FBS2YsK0VBQWQsR0FBd0NDLFlBQXhDLEdBQXVEUSxLQUE5RDtBQUNEOztBQUNEO0FBQ0UsYUFBT0EsS0FBUDtBQXpCSjtBQTJCRCIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vanMvY3JvbnVzL3N0b3JlL3JlZHVjZXJzL3NoYXJlLmpzP2YyZjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBpY2sgZnJvbSAncGxheWVyLXV0aWxzL29iamVjdC9waWNrJztcbmltcG9ydCB1bXNNb2R1bGVBY3Rpb25UeXBlcyBmcm9tICdjcm9udXMvc3RvcmUvdHlwZXMvdW1zTW9kdWxlcyc7XG5pbXBvcnQgcmVzZXRUeXBlcyBmcm9tICdjcm9udXMvc3RvcmUvdHlwZXMvcmVzZXQnO1xuaW1wb3J0IHsgUkVTRVRfVFlQRVMgfSBmcm9tICdjcm9udXMvc3RvcmUvYWN0aW9ucy9yZXNldCc7XG5cbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcbiAgZmFjZWJvb2s6IHVuZGVmaW5lZCxcbiAgdHdpdHRlcjogdW5kZWZpbmVkLFxuICBtYWlsOiB1bmRlZmluZWQsXG4gIGVtYmVkOiB1bmRlZmluZWQsXG4gIGNvcHlMaW5rOiB1bmRlZmluZWQsXG4gIGVuYWJsZWQ6IGZhbHNlLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCB7IHR5cGUsIHBheWxvYWQgfSkge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIHVtc01vZHVsZUFjdGlvblR5cGVzLnNldFNoYXJlTW9kdWxlOiB7XG4gICAgICBjb25zdCB7IG1vZHVsZSB9ID0gcGF5bG9hZDtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZmFjZWJvb2ssXG4gICAgICAgIHR3aXR0ZXIsXG4gICAgICAgIG1haWwsXG4gICAgICAgIGVtYmVkLFxuICAgICAgICAnY29weS1saW5rJzogY29weUxpbmssXG4gICAgICB9ID0gcGljayhtb2R1bGUsIFsnZmFjZWJvb2snLCAndHdpdHRlcicsICdtYWlsJywgJ2VtYmVkJywgJ2NvcHktbGluayddKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBmYWNlYm9vayxcbiAgICAgICAgdHdpdHRlcixcbiAgICAgICAgbWFpbCwgLy8gaWYgaXQgaXMgdHJ1dGh5LCB3ZSB3aWxsIHNob3cgdGhlIGNvcHkgbGluayBidXR0b25cbiAgICAgICAgZW1iZWQsXG4gICAgICAgIGNvcHlMaW5rLFxuICAgICAgICBlbmFibGVkOiAhIW1vZHVsZSxcbiAgICAgIH07XG4gICAgfVxuICAgIGNhc2UgcmVzZXRUeXBlcy5yZXNldDoge1xuICAgICAgY29uc3QgeyB0eXBlOiByZXNldFR5cGUgfSA9IHBheWxvYWQ7XG4gICAgICByZXR1cm4gcmVzZXRUeXBlID09PSBSRVNFVF9UWVBFUy5tZWRpYUNoYW5nZSA/IGluaXRpYWxTdGF0ZSA6IHN0YXRlO1xuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG4iXSwibmFtZXMiOlsicGljayIsInVtc01vZHVsZUFjdGlvblR5cGVzIiwicmVzZXRUeXBlcyIsIlJFU0VUX1RZUEVTIiwiaW5pdGlhbFN0YXRlIiwiZmFjZWJvb2siLCJ1bmRlZmluZWQiLCJ0d2l0dGVyIiwibWFpbCIsImVtYmVkIiwiY29weUxpbmsiLCJlbmFibGVkIiwic3RhdGUiLCJ0eXBlIiwicGF5bG9hZCIsInNldFNoYXJlTW9kdWxlIiwibW9kdWxlIiwicmVzZXQiLCJyZXNldFR5cGUiLCJtZWRpYUNoYW5nZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/store/reducers/share.js\n");

/***/ }),

/***/ "../js/cronus/store/reducers/slideDeck.js":
/*!************************************************!*\
  !*** ../js/cronus/store/reducers/slideDeck.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! player-utils/object/get */ \"../node_modules/player-utils/object/get.js\");\n/* harmony import */ var shared_store_types_slideDeck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/store/types/slideDeck */ \"../js/shared/store/types/slideDeck.js\");\n/* harmony import */ var cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/store/types/umsModules */ \"../js/cronus/store/types/umsModules.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar initialState = {\n  isEnabled: false,\n  slides: [],\n  currentSlide: null,\n  slideIndexPanelVisible: false,\n  onboarding: false,\n  module: null\n};\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case shared_store_types_slideDeck__WEBPACK_IMPORTED_MODULE_1__[\"default\"].disable:\n      return initialState;\n\n    case shared_store_types_slideDeck__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setSlides:\n      {\n        var slides = payload.slides.slice().sort(function (a, b) {\n          return (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(a, 'start', -1) - (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(b, 'start', -1);\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          slides: slides,\n          isEnabled: true\n        });\n      }\n\n    case shared_store_types_slideDeck__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setCurrentSlide:\n      {\n        var url = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(payload, 'slide.url', '');\n        var currentSlide = url.length ? payload.slide : null;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          currentSlide: currentSlide,\n          isEnabled: true\n        });\n      }\n\n    case shared_store_types_slideDeck__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setOnboarding:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        onboarding: payload.onboarding\n      });\n\n    case shared_store_types_slideDeck__WEBPACK_IMPORTED_MODULE_1__[\"default\"].toggleSlideIndexPanel:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        slideIndexPanelVisible: payload\n      });\n\n    case cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_2__[\"default\"].setSlidesModule:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        module: payload.module\n      });\n\n    default:\n      return state;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL3JlZHVjZXJzL3NsaWRlRGVjay5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBRUEsSUFBTUcsWUFBWSxHQUFHO0FBQ25CQyxFQUFBQSxTQUFTLEVBQUUsS0FEUTtBQUVuQkMsRUFBQUEsTUFBTSxFQUFFLEVBRlc7QUFHbkJDLEVBQUFBLFlBQVksRUFBRSxJQUhLO0FBSW5CQyxFQUFBQSxzQkFBc0IsRUFBRSxLQUpMO0FBS25CQyxFQUFBQSxVQUFVLEVBQUUsS0FMTztBQU1uQkMsRUFBQUEsTUFBTSxFQUFFO0FBTlcsQ0FBckI7QUFTQSw2QkFBZSxzQ0FBbUQ7QUFBQSxNQUF6Q0MsS0FBeUMsdUVBQWpDUCxZQUFpQzs7QUFBQTtBQUFBLE1BQWpCUSxJQUFpQixRQUFqQkEsSUFBaUI7QUFBQSxNQUFYQyxPQUFXLFFBQVhBLE9BQVc7O0FBQ2hFLFVBQVFELElBQVI7QUFDRSxTQUFLViw0RUFBTDtBQUNFLGFBQU9FLFlBQVA7O0FBQ0YsU0FBS0YsOEVBQUw7QUFBcUM7QUFDbkMsWUFBTUksTUFBTSxHQUFHTyxPQUFPLENBQUNQLE1BQVIsQ0FDWlUsS0FEWSxHQUVaQyxJQUZZLENBRVAsVUFBQ0MsQ0FBRCxFQUFJQyxDQUFKO0FBQUEsaUJBQVVsQixtRUFBRyxDQUFDaUIsQ0FBRCxFQUFJLE9BQUosRUFBYSxDQUFDLENBQWQsQ0FBSCxHQUFzQmpCLG1FQUFHLENBQUNrQixDQUFELEVBQUksT0FBSixFQUFhLENBQUMsQ0FBZCxDQUFuQztBQUFBLFNBRk8sQ0FBZjtBQUlBLCtDQUNLUixLQURMO0FBRUVMLFVBQUFBLE1BQU0sRUFBTkEsTUFGRjtBQUdFRCxVQUFBQSxTQUFTLEVBQUU7QUFIYjtBQUtEOztBQUNELFNBQUtILG9GQUFMO0FBQTJDO0FBQ3pDLFlBQU1tQixHQUFHLEdBQUdwQixtRUFBRyxDQUFDWSxPQUFELEVBQVUsV0FBVixFQUF1QixFQUF2QixDQUFmO0FBQ0EsWUFBTU4sWUFBWSxHQUFHYyxHQUFHLENBQUNDLE1BQUosR0FBYVQsT0FBTyxDQUFDVSxLQUFyQixHQUE2QixJQUFsRDtBQUNBLCtDQUNLWixLQURMO0FBRUVKLFVBQUFBLFlBQVksRUFBWkEsWUFGRjtBQUdFRixVQUFBQSxTQUFTLEVBQUU7QUFIYjtBQUtEOztBQUNELFNBQUtILGtGQUFMO0FBQ0UsNkNBQVlTLEtBQVo7QUFBbUJGLFFBQUFBLFVBQVUsRUFBRUksT0FBTyxDQUFDSjtBQUF2Qzs7QUFDRixTQUFLUCwwRkFBTDtBQUNFLDZDQUFZUyxLQUFaO0FBQW1CSCxRQUFBQSxzQkFBc0IsRUFBRUs7QUFBM0M7O0FBQ0YsU0FBS1YscUZBQUw7QUFDRSw2Q0FBWVEsS0FBWjtBQUFtQkQsUUFBQUEsTUFBTSxFQUFFRyxPQUFPLENBQUNIO0FBQW5DOztBQUNGO0FBQ0UsYUFBT0MsS0FBUDtBQTlCSjtBQWdDRCIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vanMvY3JvbnVzL3N0b3JlL3JlZHVjZXJzL3NsaWRlRGVjay5qcz9jMTI4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXQgZnJvbSAncGxheWVyLXV0aWxzL29iamVjdC9nZXQnO1xuaW1wb3J0IHNsaWRlRGVja0FjdGlvblR5cGVzIGZyb20gJ3NoYXJlZC9zdG9yZS90eXBlcy9zbGlkZURlY2snO1xuaW1wb3J0IHVtc01vZHVsZXNBY3Rpb25UeXBlcyBmcm9tICdjcm9udXMvc3RvcmUvdHlwZXMvdW1zTW9kdWxlcyc7XG5cbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcbiAgaXNFbmFibGVkOiBmYWxzZSxcbiAgc2xpZGVzOiBbXSxcbiAgY3VycmVudFNsaWRlOiBudWxsLFxuICBzbGlkZUluZGV4UGFuZWxWaXNpYmxlOiBmYWxzZSxcbiAgb25ib2FyZGluZzogZmFsc2UsXG4gIG1vZHVsZTogbnVsbCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgeyB0eXBlLCBwYXlsb2FkIH0pIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBzbGlkZURlY2tBY3Rpb25UeXBlcy5kaXNhYmxlOlxuICAgICAgcmV0dXJuIGluaXRpYWxTdGF0ZTtcbiAgICBjYXNlIHNsaWRlRGVja0FjdGlvblR5cGVzLnNldFNsaWRlczoge1xuICAgICAgY29uc3Qgc2xpZGVzID0gcGF5bG9hZC5zbGlkZXNcbiAgICAgICAgLnNsaWNlKClcbiAgICAgICAgLnNvcnQoKGEsIGIpID0+IGdldChhLCAnc3RhcnQnLCAtMSkgLSBnZXQoYiwgJ3N0YXJ0JywgLTEpKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHNsaWRlcyxcbiAgICAgICAgaXNFbmFibGVkOiB0cnVlLFxuICAgICAgfTtcbiAgICB9XG4gICAgY2FzZSBzbGlkZURlY2tBY3Rpb25UeXBlcy5zZXRDdXJyZW50U2xpZGU6IHtcbiAgICAgIGNvbnN0IHVybCA9IGdldChwYXlsb2FkLCAnc2xpZGUudXJsJywgJycpO1xuICAgICAgY29uc3QgY3VycmVudFNsaWRlID0gdXJsLmxlbmd0aCA/IHBheWxvYWQuc2xpZGUgOiBudWxsO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGN1cnJlbnRTbGlkZSxcbiAgICAgICAgaXNFbmFibGVkOiB0cnVlLFxuICAgICAgfTtcbiAgICB9XG4gICAgY2FzZSBzbGlkZURlY2tBY3Rpb25UeXBlcy5zZXRPbmJvYXJkaW5nOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIG9uYm9hcmRpbmc6IHBheWxvYWQub25ib2FyZGluZyB9O1xuICAgIGNhc2Ugc2xpZGVEZWNrQWN0aW9uVHlwZXMudG9nZ2xlU2xpZGVJbmRleFBhbmVsOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHNsaWRlSW5kZXhQYW5lbFZpc2libGU6IHBheWxvYWQgfTtcbiAgICBjYXNlIHVtc01vZHVsZXNBY3Rpb25UeXBlcy5zZXRTbGlkZXNNb2R1bGU6XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgbW9kdWxlOiBwYXlsb2FkLm1vZHVsZSB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJnZXQiLCJzbGlkZURlY2tBY3Rpb25UeXBlcyIsInVtc01vZHVsZXNBY3Rpb25UeXBlcyIsImluaXRpYWxTdGF0ZSIsImlzRW5hYmxlZCIsInNsaWRlcyIsImN1cnJlbnRTbGlkZSIsInNsaWRlSW5kZXhQYW5lbFZpc2libGUiLCJvbmJvYXJkaW5nIiwibW9kdWxlIiwic3RhdGUiLCJ0eXBlIiwicGF5bG9hZCIsImRpc2FibGUiLCJzZXRTbGlkZXMiLCJzbGljZSIsInNvcnQiLCJhIiwiYiIsInNldEN1cnJlbnRTbGlkZSIsInVybCIsImxlbmd0aCIsInNsaWRlIiwic2V0T25ib2FyZGluZyIsInRvZ2dsZVNsaWRlSW5kZXhQYW5lbCIsInNldFNsaWRlc01vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/store/reducers/slideDeck.js\n");

/***/ }),

/***/ "../js/cronus/store/reducers/tracking.js":
/*!***********************************************!*\
  !*** ../js/cronus/store/reducers/tracking.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var cronus_store_types_tracking__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/store/types/tracking */ \"../js/cronus/store/types/tracking.js\");\n/* harmony import */ var cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/store/types/reset */ \"../js/cronus/store/types/reset.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar initialState = {\n  initialLoadingTime: undefined,\n  umsConnectionStartTime: undefined,\n  umsConnectionConnectedTime: undefined,\n  streamModuleReceivedTime: undefined,\n  firstFrameTime: undefined,\n  bufferingStartTime: undefined,\n  qualityChangeStartTime: undefined\n};\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case cronus_store_types_tracking__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setInitialLoadingTime:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          initialLoadingTime: payload\n        });\n      }\n\n    case cronus_store_types_tracking__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setUmsConnectionStartTime:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          umsConnectionStartTime: payload\n        });\n      }\n\n    case cronus_store_types_tracking__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setUmsConnectionConnectedTime:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          umsConnectionConnectedTime: payload\n        });\n      }\n\n    case cronus_store_types_tracking__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setStreamModuleReceivedTime:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          streamModuleReceivedTime: payload\n        });\n      }\n\n    case cronus_store_types_tracking__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setFirstFrameTime:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          firstFrameTime: payload\n        });\n      }\n\n    case cronus_store_types_tracking__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setBufferingStartTime:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          bufferingStartTime: payload\n        });\n      }\n\n    case cronus_store_types_tracking__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setQualityChangeStartTime:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          qualityChangeStartTime: payload\n        });\n      }\n\n    case cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_1__[\"default\"].reset:\n      {\n        return _objectSpread(_objectSpread({}, initialState), {}, {\n          initialLoadingTime: state.initialLoadingTime\n        });\n      }\n\n    default:\n      return state;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL3JlZHVjZXJzL3RyYWNraW5nLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFFQSxJQUFNRSxZQUFZLEdBQUc7QUFDbkJDLEVBQUFBLGtCQUFrQixFQUFFQyxTQUREO0FBRW5CQyxFQUFBQSxzQkFBc0IsRUFBRUQsU0FGTDtBQUduQkUsRUFBQUEsMEJBQTBCLEVBQUVGLFNBSFQ7QUFJbkJHLEVBQUFBLHdCQUF3QixFQUFFSCxTQUpQO0FBS25CSSxFQUFBQSxjQUFjLEVBQUVKLFNBTEc7QUFNbkJLLEVBQUFBLGtCQUFrQixFQUFFTCxTQU5EO0FBT25CTSxFQUFBQSxzQkFBc0IsRUFBRU47QUFQTCxDQUFyQjtBQVVBLDZCQUFlLHNDQUFtRDtBQUFBLE1BQXpDTyxLQUF5Qyx1RUFBakNULFlBQWlDOztBQUFBO0FBQUEsTUFBakJVLElBQWlCLFFBQWpCQSxJQUFpQjtBQUFBLE1BQVhDLE9BQVcsUUFBWEEsT0FBVzs7QUFDaEUsVUFBUUQsSUFBUjtBQUNFLFNBQUtaLHlGQUFMO0FBQWdEO0FBQzlDLCtDQUFZVyxLQUFaO0FBQW1CUixVQUFBQSxrQkFBa0IsRUFBRVU7QUFBdkM7QUFDRDs7QUFDRCxTQUFLYiw2RkFBTDtBQUFvRDtBQUNsRCwrQ0FBWVcsS0FBWjtBQUFtQk4sVUFBQUEsc0JBQXNCLEVBQUVRO0FBQTNDO0FBQ0Q7O0FBQ0QsU0FBS2IsaUdBQUw7QUFBd0Q7QUFDdEQsK0NBQVlXLEtBQVo7QUFBbUJMLFVBQUFBLDBCQUEwQixFQUFFTztBQUEvQztBQUNEOztBQUNELFNBQUtiLCtGQUFMO0FBQXNEO0FBQ3BELCtDQUFZVyxLQUFaO0FBQW1CSixVQUFBQSx3QkFBd0IsRUFBRU07QUFBN0M7QUFDRDs7QUFDRCxTQUFLYixxRkFBTDtBQUE0QztBQUMxQywrQ0FBWVcsS0FBWjtBQUFtQkgsVUFBQUEsY0FBYyxFQUFFSztBQUFuQztBQUNEOztBQUNELFNBQUtiLHlGQUFMO0FBQWdEO0FBQzlDLCtDQUFZVyxLQUFaO0FBQW1CRixVQUFBQSxrQkFBa0IsRUFBRUk7QUFBdkM7QUFDRDs7QUFDRCxTQUFLYiw2RkFBTDtBQUFvRDtBQUNsRCwrQ0FBWVcsS0FBWjtBQUFtQkQsVUFBQUEsc0JBQXNCLEVBQUVHO0FBQTNDO0FBQ0Q7O0FBQ0QsU0FBS1osc0VBQUw7QUFBdUI7QUFDckIsK0NBQ0tDLFlBREw7QUFFRUMsVUFBQUEsa0JBQWtCLEVBQUVRLEtBQUssQ0FBQ1I7QUFGNUI7QUFJRDs7QUFDRDtBQUNFLGFBQU9RLEtBQVA7QUE3Qko7QUErQkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy9zdG9yZS9yZWR1Y2Vycy90cmFja2luZy5qcz80ZmZjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0cmFja2luZ0FjdGlvblR5cGVzIGZyb20gJ2Nyb251cy9zdG9yZS90eXBlcy90cmFja2luZyc7XG5pbXBvcnQgcmVzZXRUeXBlcyBmcm9tICdjcm9udXMvc3RvcmUvdHlwZXMvcmVzZXQnO1xuXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gIGluaXRpYWxMb2FkaW5nVGltZTogdW5kZWZpbmVkLFxuICB1bXNDb25uZWN0aW9uU3RhcnRUaW1lOiB1bmRlZmluZWQsXG4gIHVtc0Nvbm5lY3Rpb25Db25uZWN0ZWRUaW1lOiB1bmRlZmluZWQsXG4gIHN0cmVhbU1vZHVsZVJlY2VpdmVkVGltZTogdW5kZWZpbmVkLFxuICBmaXJzdEZyYW1lVGltZTogdW5kZWZpbmVkLFxuICBidWZmZXJpbmdTdGFydFRpbWU6IHVuZGVmaW5lZCxcbiAgcXVhbGl0eUNoYW5nZVN0YXJ0VGltZTogdW5kZWZpbmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCB7IHR5cGUsIHBheWxvYWQgfSkge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIHRyYWNraW5nQWN0aW9uVHlwZXMuc2V0SW5pdGlhbExvYWRpbmdUaW1lOiB7XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgaW5pdGlhbExvYWRpbmdUaW1lOiBwYXlsb2FkIH07XG4gICAgfVxuICAgIGNhc2UgdHJhY2tpbmdBY3Rpb25UeXBlcy5zZXRVbXNDb25uZWN0aW9uU3RhcnRUaW1lOiB7XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgdW1zQ29ubmVjdGlvblN0YXJ0VGltZTogcGF5bG9hZCB9O1xuICAgIH1cbiAgICBjYXNlIHRyYWNraW5nQWN0aW9uVHlwZXMuc2V0VW1zQ29ubmVjdGlvbkNvbm5lY3RlZFRpbWU6IHtcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCB1bXNDb25uZWN0aW9uQ29ubmVjdGVkVGltZTogcGF5bG9hZCB9O1xuICAgIH1cbiAgICBjYXNlIHRyYWNraW5nQWN0aW9uVHlwZXMuc2V0U3RyZWFtTW9kdWxlUmVjZWl2ZWRUaW1lOiB7XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgc3RyZWFtTW9kdWxlUmVjZWl2ZWRUaW1lOiBwYXlsb2FkIH07XG4gICAgfVxuICAgIGNhc2UgdHJhY2tpbmdBY3Rpb25UeXBlcy5zZXRGaXJzdEZyYW1lVGltZToge1xuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGZpcnN0RnJhbWVUaW1lOiBwYXlsb2FkIH07XG4gICAgfVxuICAgIGNhc2UgdHJhY2tpbmdBY3Rpb25UeXBlcy5zZXRCdWZmZXJpbmdTdGFydFRpbWU6IHtcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBidWZmZXJpbmdTdGFydFRpbWU6IHBheWxvYWQgfTtcbiAgICB9XG4gICAgY2FzZSB0cmFja2luZ0FjdGlvblR5cGVzLnNldFF1YWxpdHlDaGFuZ2VTdGFydFRpbWU6IHtcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBxdWFsaXR5Q2hhbmdlU3RhcnRUaW1lOiBwYXlsb2FkIH07XG4gICAgfVxuICAgIGNhc2UgcmVzZXRUeXBlcy5yZXNldDoge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uaW5pdGlhbFN0YXRlLFxuICAgICAgICBpbml0aWFsTG9hZGluZ1RpbWU6IHN0YXRlLmluaXRpYWxMb2FkaW5nVGltZSxcbiAgICAgIH07XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJ0cmFja2luZ0FjdGlvblR5cGVzIiwicmVzZXRUeXBlcyIsImluaXRpYWxTdGF0ZSIsImluaXRpYWxMb2FkaW5nVGltZSIsInVuZGVmaW5lZCIsInVtc0Nvbm5lY3Rpb25TdGFydFRpbWUiLCJ1bXNDb25uZWN0aW9uQ29ubmVjdGVkVGltZSIsInN0cmVhbU1vZHVsZVJlY2VpdmVkVGltZSIsImZpcnN0RnJhbWVUaW1lIiwiYnVmZmVyaW5nU3RhcnRUaW1lIiwicXVhbGl0eUNoYW5nZVN0YXJ0VGltZSIsInN0YXRlIiwidHlwZSIsInBheWxvYWQiLCJzZXRJbml0aWFsTG9hZGluZ1RpbWUiLCJzZXRVbXNDb25uZWN0aW9uU3RhcnRUaW1lIiwic2V0VW1zQ29ubmVjdGlvbkNvbm5lY3RlZFRpbWUiLCJzZXRTdHJlYW1Nb2R1bGVSZWNlaXZlZFRpbWUiLCJzZXRGaXJzdEZyYW1lVGltZSIsInNldEJ1ZmZlcmluZ1N0YXJ0VGltZSIsInNldFF1YWxpdHlDaGFuZ2VTdGFydFRpbWUiLCJyZXNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/store/reducers/tracking.js\n");

/***/ }),

/***/ "../js/cronus/store/reducers/ums.js":
/*!******************************************!*\
  !*** ../js/cronus/store/reducers/ums.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var shared_store_types_ums__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/store/types/ums */ \"../js/shared/store/types/ums.js\");\n/* harmony import */ var cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/store/types/umsModules */ \"../js/cronus/store/types/umsModules.js\");\n/* harmony import */ var shared_store_types_content__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/store/types/content */ \"../js/shared/store/types/content.js\");\n/* harmony import */ var cronus_logic_lock_hashHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/logic/lock/hashHelper */ \"../js/cronus/logic/lock/hashHelper.js\");\n/* harmony import */ var cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! cronus/store/types/reset */ \"../js/cronus/store/types/reset.js\");\n/* harmony import */ var cronus_config_initial__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cronus/config/initial */ \"../js/cronus/config/initial.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\nvar initialState = {\n  hash: undefined,\n  password: undefined,\n  info: {},\n  id: null,\n  lock: {\n    type: '',\n    data: {}\n  },\n  viewerAuthToken: (0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_5__.getInitialConfig)('viewerToken')\n};\n\nfunction isHashValid(hash) {\n  return hash !== 'false';\n}\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case shared_store_types_ums__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addPassword:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        password: payload.password,\n        lock: {\n          type: '',\n          data: {}\n        }\n      });\n\n    case shared_store_types_ums__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addHash:\n      {\n        var hashInvalid = !isHashValid(payload.hash);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          hashInvalid: hashInvalid,\n          hash: payload.hash,\n          lock: {\n            type: '',\n            data: {}\n          }\n        });\n      }\n\n    case shared_store_types_ums__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setLockInfo:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lock: {\n          type: payload.type,\n          data: payload.data\n        }\n      });\n\n    case shared_store_types_ums__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setUmsInfo:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        info: payload.info\n      });\n\n    case cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setMetaModule:\n      {\n        var module = payload.module;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          id: module.umsId\n        });\n      }\n\n    case shared_store_types_ums__WEBPACK_IMPORTED_MODULE_0__[\"default\"].removeHash:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        hash: null\n      });\n\n    case cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_4__[\"default\"].reset:\n      {\n        return _objectSpread(_objectSpread({}, initialState), {}, {\n          hash: state.hash,\n          password: state.password\n        });\n      }\n\n    case shared_store_types_content__WEBPACK_IMPORTED_MODULE_2__[\"default\"].setMediaChange:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          hash: cronus_logic_lock_hashHelper__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getHashFromLocalStorage(),\n          password: cronus_logic_lock_hashHelper__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getPasswordFromSessionStorage(),\n          lock: {\n            type: '',\n            data: {}\n          }\n        });\n      }\n\n    default:\n      return state;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL3JlZHVjZXJzL3Vtcy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsSUFBTU0sWUFBWSxHQUFHO0FBQ25CQyxFQUFBQSxJQUFJLEVBQUVDLFNBRGE7QUFFbkJDLEVBQUFBLFFBQVEsRUFBRUQsU0FGUztBQUduQkUsRUFBQUEsSUFBSSxFQUFFLEVBSGE7QUFJbkJDLEVBQUFBLEVBQUUsRUFBRSxJQUplO0FBS25CQyxFQUFBQSxJQUFJLEVBQUU7QUFDSkMsSUFBQUEsSUFBSSxFQUFFLEVBREY7QUFFSkMsSUFBQUEsSUFBSSxFQUFFO0FBRkYsR0FMYTtBQVNuQkMsRUFBQUEsZUFBZSxFQUFFVix1RUFBZ0IsQ0FBQyxhQUFEO0FBVGQsQ0FBckI7O0FBWUEsU0FBU1csV0FBVCxDQUFxQlQsSUFBckIsRUFBMkI7QUFDekIsU0FBT0EsSUFBSSxLQUFLLE9BQWhCO0FBQ0Q7O0FBRUQsNkJBQWUsc0NBQW1EO0FBQUEsTUFBekNVLEtBQXlDLHVFQUFqQ1gsWUFBaUM7O0FBQUE7QUFBQSxNQUFqQk8sSUFBaUIsUUFBakJBLElBQWlCO0FBQUEsTUFBWEssT0FBVyxRQUFYQSxPQUFXOztBQUNoRSxVQUFRTCxJQUFSO0FBQ0UsU0FBS2IsMEVBQUw7QUFDRSw2Q0FDS2lCLEtBREw7QUFFRVIsUUFBQUEsUUFBUSxFQUFFUyxPQUFPLENBQUNULFFBRnBCO0FBR0VHLFFBQUFBLElBQUksRUFBRTtBQUNKQyxVQUFBQSxJQUFJLEVBQUUsRUFERjtBQUVKQyxVQUFBQSxJQUFJLEVBQUU7QUFGRjtBQUhSOztBQVFGLFNBQUtkLHNFQUFMO0FBQTZCO0FBQzNCLFlBQU1xQixXQUFXLEdBQUcsQ0FBQ0wsV0FBVyxDQUFDRSxPQUFPLENBQUNYLElBQVQsQ0FBaEM7QUFFQSwrQ0FDS1UsS0FETDtBQUVFSSxVQUFBQSxXQUFXLEVBQVhBLFdBRkY7QUFHRWQsVUFBQUEsSUFBSSxFQUFFVyxPQUFPLENBQUNYLElBSGhCO0FBSUVLLFVBQUFBLElBQUksRUFBRTtBQUNKQyxZQUFBQSxJQUFJLEVBQUUsRUFERjtBQUVKQyxZQUFBQSxJQUFJLEVBQUU7QUFGRjtBQUpSO0FBU0Q7O0FBQ0QsU0FBS2QsMEVBQUw7QUFDRSw2Q0FDS2lCLEtBREw7QUFFRUwsUUFBQUEsSUFBSSxFQUFFO0FBQ0pDLFVBQUFBLElBQUksRUFBRUssT0FBTyxDQUFDTCxJQURWO0FBRUpDLFVBQUFBLElBQUksRUFBRUksT0FBTyxDQUFDSjtBQUZWO0FBRlI7O0FBT0YsU0FBS2QseUVBQUw7QUFDRSw2Q0FBWWlCLEtBQVo7QUFBbUJQLFFBQUFBLElBQUksRUFBRVEsT0FBTyxDQUFDUjtBQUFqQzs7QUFDRixTQUFLVCxtRkFBTDtBQUEwQztBQUN4QyxZQUFRd0IsTUFBUixHQUFtQlAsT0FBbkIsQ0FBUU8sTUFBUjtBQUNBLCtDQUFZUixLQUFaO0FBQW1CTixVQUFBQSxFQUFFLEVBQUVjLE1BQU0sQ0FBQ0M7QUFBOUI7QUFDRDs7QUFDRCxTQUFLMUIseUVBQUw7QUFDRSw2Q0FBWWlCLEtBQVo7QUFBbUJWLFFBQUFBLElBQUksRUFBRTtBQUF6Qjs7QUFDRixTQUFLSCxzRUFBTDtBQUF1QjtBQUNyQiwrQ0FBWUUsWUFBWjtBQUEwQkMsVUFBQUEsSUFBSSxFQUFFVSxLQUFLLENBQUNWLElBQXRDO0FBQTRDRSxVQUFBQSxRQUFRLEVBQUVRLEtBQUssQ0FBQ1I7QUFBNUQ7QUFDRDs7QUFDRCxTQUFLUCxpRkFBTDtBQUF3QztBQUN0QywrQ0FDS2UsS0FETDtBQUVFVixVQUFBQSxJQUFJLEVBQUVKLDRGQUFBLEVBRlI7QUFHRU0sVUFBQUEsUUFBUSxFQUFFTixrR0FBQSxFQUhaO0FBSUVTLFVBQUFBLElBQUksRUFBRTtBQUNKQyxZQUFBQSxJQUFJLEVBQUUsRUFERjtBQUVKQyxZQUFBQSxJQUFJLEVBQUU7QUFGRjtBQUpSO0FBU0Q7O0FBQ0Q7QUFDRSxhQUFPRyxLQUFQO0FBdERKO0FBd0REIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvc3RvcmUvcmVkdWNlcnMvdW1zLmpzP2NlOTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHVtc0FjdGlvblR5cGVzIGZyb20gJ3NoYXJlZC9zdG9yZS90eXBlcy91bXMnO1xuaW1wb3J0IHVtc01vZHVsZXNBY3Rpb25UeXBlcyBmcm9tICdjcm9udXMvc3RvcmUvdHlwZXMvdW1zTW9kdWxlcyc7XG5pbXBvcnQgY29udGVudEFjdGlvblR5cGVzIGZyb20gJ3NoYXJlZC9zdG9yZS90eXBlcy9jb250ZW50JztcbmltcG9ydCBoYXNoSGVscGVyIGZyb20gJ2Nyb251cy9sb2dpYy9sb2NrL2hhc2hIZWxwZXInO1xuaW1wb3J0IHJlc2V0VHlwZXMgZnJvbSAnY3JvbnVzL3N0b3JlL3R5cGVzL3Jlc2V0JztcbmltcG9ydCB7IGdldEluaXRpYWxDb25maWcgfSBmcm9tICdjcm9udXMvY29uZmlnL2luaXRpYWwnO1xuXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gIGhhc2g6IHVuZGVmaW5lZCxcbiAgcGFzc3dvcmQ6IHVuZGVmaW5lZCxcbiAgaW5mbzoge30sXG4gIGlkOiBudWxsLFxuICBsb2NrOiB7XG4gICAgdHlwZTogJycsXG4gICAgZGF0YToge30sXG4gIH0sXG4gIHZpZXdlckF1dGhUb2tlbjogZ2V0SW5pdGlhbENvbmZpZygndmlld2VyVG9rZW4nKSxcbn07XG5cbmZ1bmN0aW9uIGlzSGFzaFZhbGlkKGhhc2gpIHtcbiAgcmV0dXJuIGhhc2ggIT09ICdmYWxzZSc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgeyB0eXBlLCBwYXlsb2FkIH0pIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSB1bXNBY3Rpb25UeXBlcy5hZGRQYXNzd29yZDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBwYXNzd29yZDogcGF5bG9hZC5wYXNzd29yZCxcbiAgICAgICAgbG9jazoge1xuICAgICAgICAgIHR5cGU6ICcnLFxuICAgICAgICAgIGRhdGE6IHt9LFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICBjYXNlIHVtc0FjdGlvblR5cGVzLmFkZEhhc2g6IHtcbiAgICAgIGNvbnN0IGhhc2hJbnZhbGlkID0gIWlzSGFzaFZhbGlkKHBheWxvYWQuaGFzaCk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBoYXNoSW52YWxpZCxcbiAgICAgICAgaGFzaDogcGF5bG9hZC5oYXNoLFxuICAgICAgICBsb2NrOiB7XG4gICAgICAgICAgdHlwZTogJycsXG4gICAgICAgICAgZGF0YToge30sXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH1cbiAgICBjYXNlIHVtc0FjdGlvblR5cGVzLnNldExvY2tJbmZvOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGxvY2s6IHtcbiAgICAgICAgICB0eXBlOiBwYXlsb2FkLnR5cGUsXG4gICAgICAgICAgZGF0YTogcGF5bG9hZC5kYXRhLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICBjYXNlIHVtc0FjdGlvblR5cGVzLnNldFVtc0luZm86XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgaW5mbzogcGF5bG9hZC5pbmZvIH07XG4gICAgY2FzZSB1bXNNb2R1bGVzQWN0aW9uVHlwZXMuc2V0TWV0YU1vZHVsZToge1xuICAgICAgY29uc3QgeyBtb2R1bGUgfSA9IHBheWxvYWQ7XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgaWQ6IG1vZHVsZS51bXNJZCB9O1xuICAgIH1cbiAgICBjYXNlIHVtc0FjdGlvblR5cGVzLnJlbW92ZUhhc2g6XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgaGFzaDogbnVsbCB9O1xuICAgIGNhc2UgcmVzZXRUeXBlcy5yZXNldDoge1xuICAgICAgcmV0dXJuIHsgLi4uaW5pdGlhbFN0YXRlLCBoYXNoOiBzdGF0ZS5oYXNoLCBwYXNzd29yZDogc3RhdGUucGFzc3dvcmQgfTtcbiAgICB9XG4gICAgY2FzZSBjb250ZW50QWN0aW9uVHlwZXMuc2V0TWVkaWFDaGFuZ2U6IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBoYXNoOiBoYXNoSGVscGVyLmdldEhhc2hGcm9tTG9jYWxTdG9yYWdlKCksXG4gICAgICAgIHBhc3N3b3JkOiBoYXNoSGVscGVyLmdldFBhc3N3b3JkRnJvbVNlc3Npb25TdG9yYWdlKCksXG4gICAgICAgIGxvY2s6IHtcbiAgICAgICAgICB0eXBlOiAnJyxcbiAgICAgICAgICBkYXRhOiB7fSxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJ1bXNBY3Rpb25UeXBlcyIsInVtc01vZHVsZXNBY3Rpb25UeXBlcyIsImNvbnRlbnRBY3Rpb25UeXBlcyIsImhhc2hIZWxwZXIiLCJyZXNldFR5cGVzIiwiZ2V0SW5pdGlhbENvbmZpZyIsImluaXRpYWxTdGF0ZSIsImhhc2giLCJ1bmRlZmluZWQiLCJwYXNzd29yZCIsImluZm8iLCJpZCIsImxvY2siLCJ0eXBlIiwiZGF0YSIsInZpZXdlckF1dGhUb2tlbiIsImlzSGFzaFZhbGlkIiwic3RhdGUiLCJwYXlsb2FkIiwiYWRkUGFzc3dvcmQiLCJhZGRIYXNoIiwiaGFzaEludmFsaWQiLCJzZXRMb2NrSW5mbyIsInNldFVtc0luZm8iLCJzZXRNZXRhTW9kdWxlIiwibW9kdWxlIiwidW1zSWQiLCJyZW1vdmVIYXNoIiwicmVzZXQiLCJzZXRNZWRpYUNoYW5nZSIsImdldEhhc2hGcm9tTG9jYWxTdG9yYWdlIiwiZ2V0UGFzc3dvcmRGcm9tU2Vzc2lvblN0b3JhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/store/reducers/ums.js\n");

/***/ }),

/***/ "../js/cronus/store/reducers/viewers.js":
/*!**********************************************!*\
  !*** ../js/cronus/store/reducers/viewers.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/store/types/umsModules */ \"../js/cronus/store/types/umsModules.js\");\n/* harmony import */ var cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/store/types/reset */ \"../js/cronus/store/types/reset.js\");\n/* harmony import */ var cronus_store_actions_reset__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/store/actions/reset */ \"../js/cronus/store/actions/reset.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar initialState = {\n  allTimeTotal: null,\n  allViewers: null,\n  viewers: null\n};\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setAllTimeTotalModule:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allTimeTotal: payload.module\n      });\n\n    case cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setAllViewersModule:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allViewers: payload.module\n      });\n\n    case cronus_store_types_umsModules__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setViewersModule:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        viewers: payload.module\n      });\n\n    case cronus_store_types_reset__WEBPACK_IMPORTED_MODULE_1__[\"default\"].reset:\n      {\n        var resetType = payload.type;\n        return resetType === cronus_store_actions_reset__WEBPACK_IMPORTED_MODULE_2__.RESET_TYPES.mediaChange ? initialState : state;\n      }\n\n    default:\n      return state;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL3JlZHVjZXJzL3ZpZXdlcnMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUVBLElBQU1HLFlBQVksR0FBRztBQUNuQkMsRUFBQUEsWUFBWSxFQUFFLElBREs7QUFFbkJDLEVBQUFBLFVBQVUsRUFBRSxJQUZPO0FBR25CQyxFQUFBQSxPQUFPLEVBQUU7QUFIVSxDQUFyQjtBQU1BLDZCQUFlLHNDQUFtRDtBQUFBLE1BQXpDQyxLQUF5Qyx1RUFBakNKLFlBQWlDOztBQUFBO0FBQUEsTUFBakJLLElBQWlCLFFBQWpCQSxJQUFpQjtBQUFBLE1BQVhDLE9BQVcsUUFBWEEsT0FBVzs7QUFDaEUsVUFBUUQsSUFBUjtBQUNFLFNBQUtSLDJGQUFMO0FBQ0UsNkNBQVlPLEtBQVo7QUFBbUJILFFBQUFBLFlBQVksRUFBRUssT0FBTyxDQUFDRTtBQUF6Qzs7QUFDRixTQUFLWCx5RkFBTDtBQUNFLDZDQUFZTyxLQUFaO0FBQW1CRixRQUFBQSxVQUFVLEVBQUVJLE9BQU8sQ0FBQ0U7QUFBdkM7O0FBQ0YsU0FBS1gsc0ZBQUw7QUFDRSw2Q0FBWU8sS0FBWjtBQUFtQkQsUUFBQUEsT0FBTyxFQUFFRyxPQUFPLENBQUNFO0FBQXBDOztBQUNGLFNBQUtWLHNFQUFMO0FBQXVCO0FBQ3JCLFlBQWNjLFNBQWQsR0FBNEJOLE9BQTVCLENBQVFELElBQVI7QUFDQSxlQUFPTyxTQUFTLEtBQUtiLCtFQUFkLEdBQXdDQyxZQUF4QyxHQUF1REksS0FBOUQ7QUFDRDs7QUFDRDtBQUNFLGFBQU9BLEtBQVA7QUFaSjtBQWNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvc3RvcmUvcmVkdWNlcnMvdmlld2Vycy5qcz9iZWE0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB1bXNNb2R1bGVzQWN0aW9uVHlwZXMgZnJvbSAnY3JvbnVzL3N0b3JlL3R5cGVzL3Vtc01vZHVsZXMnO1xuaW1wb3J0IHJlc2V0VHlwZXMgZnJvbSAnY3JvbnVzL3N0b3JlL3R5cGVzL3Jlc2V0JztcbmltcG9ydCB7IFJFU0VUX1RZUEVTIH0gZnJvbSAnY3JvbnVzL3N0b3JlL2FjdGlvbnMvcmVzZXQnO1xuXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gIGFsbFRpbWVUb3RhbDogbnVsbCxcbiAgYWxsVmlld2VyczogbnVsbCxcbiAgdmlld2VyczogbnVsbCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgeyB0eXBlLCBwYXlsb2FkIH0pIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSB1bXNNb2R1bGVzQWN0aW9uVHlwZXMuc2V0QWxsVGltZVRvdGFsTW9kdWxlOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGFsbFRpbWVUb3RhbDogcGF5bG9hZC5tb2R1bGUgfTtcbiAgICBjYXNlIHVtc01vZHVsZXNBY3Rpb25UeXBlcy5zZXRBbGxWaWV3ZXJzTW9kdWxlOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGFsbFZpZXdlcnM6IHBheWxvYWQubW9kdWxlIH07XG4gICAgY2FzZSB1bXNNb2R1bGVzQWN0aW9uVHlwZXMuc2V0Vmlld2Vyc01vZHVsZTpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCB2aWV3ZXJzOiBwYXlsb2FkLm1vZHVsZSB9O1xuICAgIGNhc2UgcmVzZXRUeXBlcy5yZXNldDoge1xuICAgICAgY29uc3QgeyB0eXBlOiByZXNldFR5cGUgfSA9IHBheWxvYWQ7XG4gICAgICByZXR1cm4gcmVzZXRUeXBlID09PSBSRVNFVF9UWVBFUy5tZWRpYUNoYW5nZSA/IGluaXRpYWxTdGF0ZSA6IHN0YXRlO1xuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG4iXSwibmFtZXMiOlsidW1zTW9kdWxlc0FjdGlvblR5cGVzIiwicmVzZXRUeXBlcyIsIlJFU0VUX1RZUEVTIiwiaW5pdGlhbFN0YXRlIiwiYWxsVGltZVRvdGFsIiwiYWxsVmlld2VycyIsInZpZXdlcnMiLCJzdGF0ZSIsInR5cGUiLCJwYXlsb2FkIiwic2V0QWxsVGltZVRvdGFsTW9kdWxlIiwibW9kdWxlIiwic2V0QWxsVmlld2Vyc01vZHVsZSIsInNldFZpZXdlcnNNb2R1bGUiLCJyZXNldCIsInJlc2V0VHlwZSIsIm1lZGlhQ2hhbmdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/store/reducers/viewers.js\n");

/***/ }),

/***/ "../js/cronus/store/types/ads.js":
/*!***************************************!*\
  !*** ../js/cronus/store/types/ads.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  setPosition: 'SET_POSITION',\n  setRuleset: 'SET_RULESET'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL3R5cGVzL2Fkcy5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsK0RBQWU7QUFDYkEsRUFBQUEsV0FBVyxFQUFFLGNBREE7QUFFYkMsRUFBQUEsVUFBVSxFQUFFO0FBRkMsQ0FBZiIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vanMvY3JvbnVzL3N0b3JlL3R5cGVzL2Fkcy5qcz8zZThiIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgc2V0UG9zaXRpb246ICdTRVRfUE9TSVRJT04nLFxuICBzZXRSdWxlc2V0OiAnU0VUX1JVTEVTRVQnLFxufTtcbiJdLCJuYW1lcyI6WyJzZXRQb3NpdGlvbiIsInNldFJ1bGVzZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/store/types/ads.js\n");

/***/ }),

/***/ "../js/cronus/store/types/content.js":
/*!*******************************************!*\
  !*** ../js/cronus/store/types/content.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  setInitialSeekTimeInMs: 'SET_INITIAL_SEEK_TIME_IN_MS',\n  setInitialApiSeekTimeInMs: 'SET_INITIAL_API_SEEK_TIME_IN_MS',\n  setMediaChange: 'SET_MEDIA_CHANGE'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL3R5cGVzL2NvbnRlbnQuanMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLCtEQUFlO0FBQ2JBLEVBQUFBLHNCQUFzQixFQUFFLDZCQURYO0FBRWJDLEVBQUFBLHlCQUF5QixFQUFFLGlDQUZkO0FBR2JDLEVBQUFBLGNBQWMsRUFBRTtBQUhILENBQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy9zdG9yZS90eXBlcy9jb250ZW50LmpzPzg0N2UiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuICBzZXRJbml0aWFsU2Vla1RpbWVJbk1zOiAnU0VUX0lOSVRJQUxfU0VFS19USU1FX0lOX01TJyxcbiAgc2V0SW5pdGlhbEFwaVNlZWtUaW1lSW5NczogJ1NFVF9JTklUSUFMX0FQSV9TRUVLX1RJTUVfSU5fTVMnLFxuICBzZXRNZWRpYUNoYW5nZTogJ1NFVF9NRURJQV9DSEFOR0UnLFxufTtcbiJdLCJuYW1lcyI6WyJzZXRJbml0aWFsU2Vla1RpbWVJbk1zIiwic2V0SW5pdGlhbEFwaVNlZWtUaW1lSW5NcyIsInNldE1lZGlhQ2hhbmdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/store/types/content.js\n");

/***/ }),

/***/ "../js/cronus/store/types/playback.js":
/*!********************************************!*\
  !*** ../js/cronus/store/types/playback.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  setVideoTagDuration: 'SET_VIDEO_TAG_DURATION',\n  setInitPTS: 'SET_INIT_PTS',\n  setCanPlay: 'SET_CAN_PLAY',\n  setCaptionPosition: 'SET_CAPTION_POSITION'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL3R5cGVzL3BsYXliYWNrLmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZTtBQUNiQSxFQUFBQSxtQkFBbUIsRUFBRSx3QkFEUjtBQUViQyxFQUFBQSxVQUFVLEVBQUUsY0FGQztBQUdiQyxFQUFBQSxVQUFVLEVBQUUsY0FIQztBQUliQyxFQUFBQSxrQkFBa0IsRUFBRTtBQUpQLENBQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy9zdG9yZS90eXBlcy9wbGF5YmFjay5qcz8xNDc1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgc2V0VmlkZW9UYWdEdXJhdGlvbjogJ1NFVF9WSURFT19UQUdfRFVSQVRJT04nLFxuICBzZXRJbml0UFRTOiAnU0VUX0lOSVRfUFRTJyxcbiAgc2V0Q2FuUGxheTogJ1NFVF9DQU5fUExBWScsXG4gIHNldENhcHRpb25Qb3NpdGlvbjogJ1NFVF9DQVBUSU9OX1BPU0lUSU9OJyxcbn07XG4iXSwibmFtZXMiOlsic2V0VmlkZW9UYWdEdXJhdGlvbiIsInNldEluaXRQVFMiLCJzZXRDYW5QbGF5Iiwic2V0Q2FwdGlvblBvc2l0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/store/types/playback.js\n");

/***/ }),

/***/ "../js/cronus/store/types/qos.js":
/*!***************************************!*\
  !*** ../js/cronus/store/types/qos.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  setSelectedQuality: 'SET_SELECTED_QUALITY',\n  setQualityLoading: 'SET_QUALITY_LOADING',\n  setQualities: 'SET_QUALITIES'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL3R5cGVzL3Fvcy5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsK0RBQWU7QUFDYkEsRUFBQUEsa0JBQWtCLEVBQUUsc0JBRFA7QUFFYkMsRUFBQUEsaUJBQWlCLEVBQUUscUJBRk47QUFHYkMsRUFBQUEsWUFBWSxFQUFFO0FBSEQsQ0FBZiIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vanMvY3JvbnVzL3N0b3JlL3R5cGVzL3Fvcy5qcz81ODFlIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgc2V0U2VsZWN0ZWRRdWFsaXR5OiAnU0VUX1NFTEVDVEVEX1FVQUxJVFknLFxuICBzZXRRdWFsaXR5TG9hZGluZzogJ1NFVF9RVUFMSVRZX0xPQURJTkcnLFxuICBzZXRRdWFsaXRpZXM6ICdTRVRfUVVBTElUSUVTJyxcbn07XG4iXSwibmFtZXMiOlsic2V0U2VsZWN0ZWRRdWFsaXR5Iiwic2V0UXVhbGl0eUxvYWRpbmciLCJzZXRRdWFsaXRpZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/store/types/qos.js\n");

/***/ }),

/***/ "../js/cronus/store/types/reset.js":
/*!*****************************************!*\
  !*** ../js/cronus/store/types/reset.js ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  reset: 'RESET'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL3R5cGVzL3Jlc2V0LmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZTtBQUNiQSxFQUFBQSxLQUFLLEVBQUU7QUFETSxDQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvc3RvcmUvdHlwZXMvcmVzZXQuanM/N2RhNiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gIHJlc2V0OiAnUkVTRVQnLFxufTtcbiJdLCJuYW1lcyI6WyJyZXNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/store/types/reset.js\n");

/***/ }),

/***/ "../js/cronus/store/types/tracking.js":
/*!********************************************!*\
  !*** ../js/cronus/store/types/tracking.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  setInitialLoadingTime: 'SET_INITIAL_LOADING_TIME',\n  setUmsConnectionStartTime: 'SET_UMS_CONNECTION_START_TIME',\n  setUmsConnectionConnectedTime: 'SET_UMS_CONNECTION_CONNECTED_TIME',\n  setStreamModuleReceivedTime: 'SET_STREAM_MODULE_RECEIVED_TIME',\n  setFirstFrameTime: 'SET_FIRST_FRAME_TIME',\n  setBufferingStartTime: 'SET_BUFFERING_START_TIME',\n  setQualityChangeStartTime: 'SET_QUALITY_CHANGE_START_TIME'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL3R5cGVzL3RyYWNraW5nLmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZTtBQUNiQSxFQUFBQSxxQkFBcUIsRUFBRSwwQkFEVjtBQUViQyxFQUFBQSx5QkFBeUIsRUFBRSwrQkFGZDtBQUdiQyxFQUFBQSw2QkFBNkIsRUFBRSxtQ0FIbEI7QUFJYkMsRUFBQUEsMkJBQTJCLEVBQUUsaUNBSmhCO0FBS2JDLEVBQUFBLGlCQUFpQixFQUFFLHNCQUxOO0FBTWJDLEVBQUFBLHFCQUFxQixFQUFFLDBCQU5WO0FBT2JDLEVBQUFBLHlCQUF5QixFQUFFO0FBUGQsQ0FBZiIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vanMvY3JvbnVzL3N0b3JlL3R5cGVzL3RyYWNraW5nLmpzPzJlZjkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuICBzZXRJbml0aWFsTG9hZGluZ1RpbWU6ICdTRVRfSU5JVElBTF9MT0FESU5HX1RJTUUnLFxuICBzZXRVbXNDb25uZWN0aW9uU3RhcnRUaW1lOiAnU0VUX1VNU19DT05ORUNUSU9OX1NUQVJUX1RJTUUnLFxuICBzZXRVbXNDb25uZWN0aW9uQ29ubmVjdGVkVGltZTogJ1NFVF9VTVNfQ09OTkVDVElPTl9DT05ORUNURURfVElNRScsXG4gIHNldFN0cmVhbU1vZHVsZVJlY2VpdmVkVGltZTogJ1NFVF9TVFJFQU1fTU9EVUxFX1JFQ0VJVkVEX1RJTUUnLFxuICBzZXRGaXJzdEZyYW1lVGltZTogJ1NFVF9GSVJTVF9GUkFNRV9USU1FJyxcbiAgc2V0QnVmZmVyaW5nU3RhcnRUaW1lOiAnU0VUX0JVRkZFUklOR19TVEFSVF9USU1FJyxcbiAgc2V0UXVhbGl0eUNoYW5nZVN0YXJ0VGltZTogJ1NFVF9RVUFMSVRZX0NIQU5HRV9TVEFSVF9USU1FJyxcbn07XG4iXSwibmFtZXMiOlsic2V0SW5pdGlhbExvYWRpbmdUaW1lIiwic2V0VW1zQ29ubmVjdGlvblN0YXJ0VGltZSIsInNldFVtc0Nvbm5lY3Rpb25Db25uZWN0ZWRUaW1lIiwic2V0U3RyZWFtTW9kdWxlUmVjZWl2ZWRUaW1lIiwic2V0Rmlyc3RGcmFtZVRpbWUiLCJzZXRCdWZmZXJpbmdTdGFydFRpbWUiLCJzZXRRdWFsaXR5Q2hhbmdlU3RhcnRUaW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/store/types/tracking.js\n");

/***/ }),

/***/ "../js/cronus/store/types/umsModules.js":
/*!**********************************************!*\
  !*** ../js/cronus/store/types/umsModules.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  setStreamModule: 'SET_STREAM_MODULE',\n  setMetaModule: 'SET_META_MODULE',\n  setAllTimeTotalModule: 'SET_ALL_TIME_TOTAL_MODULE',\n  setAllViewersModule: 'SET_ALL_VIEWERS_MODULE',\n  setViewersModule: 'SET_VIEWERS_MODULE',\n  setLogoModule: 'SET_LOGO_MODULE',\n  setShareModule: 'SET_SHARE_MODULE',\n  setBroadcasterModule: 'SET_BROADCASTER_MODULE',\n  setLiveCTAModule: 'SET_LIVE_CTA_MODULE',\n  setThumbnailModule: 'SET_THUMBNAIL_MODULE',\n  setPollModule: 'SET_POLL_MODULE',\n  setCaptionSearchModule: 'SET_CAPTION_SEARCH_MODULE',\n  setSlidesModule: 'SET_SLIDES_MODULE'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3N0b3JlL3R5cGVzL3Vtc01vZHVsZXMuanMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLCtEQUFlO0FBQ2JBLEVBQUFBLGVBQWUsRUFBRSxtQkFESjtBQUViQyxFQUFBQSxhQUFhLEVBQUUsaUJBRkY7QUFHYkMsRUFBQUEscUJBQXFCLEVBQUUsMkJBSFY7QUFJYkMsRUFBQUEsbUJBQW1CLEVBQUUsd0JBSlI7QUFLYkMsRUFBQUEsZ0JBQWdCLEVBQUUsb0JBTEw7QUFNYkMsRUFBQUEsYUFBYSxFQUFFLGlCQU5GO0FBT2JDLEVBQUFBLGNBQWMsRUFBRSxrQkFQSDtBQVFiQyxFQUFBQSxvQkFBb0IsRUFBRSx3QkFSVDtBQVNiQyxFQUFBQSxnQkFBZ0IsRUFBRSxxQkFUTDtBQVViQyxFQUFBQSxrQkFBa0IsRUFBRSxzQkFWUDtBQVdiQyxFQUFBQSxhQUFhLEVBQUUsaUJBWEY7QUFZYkMsRUFBQUEsc0JBQXNCLEVBQUUsMkJBWlg7QUFhYkMsRUFBQUEsZUFBZSxFQUFFO0FBYkosQ0FBZiIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vanMvY3JvbnVzL3N0b3JlL3R5cGVzL3Vtc01vZHVsZXMuanM/MDZhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gIHNldFN0cmVhbU1vZHVsZTogJ1NFVF9TVFJFQU1fTU9EVUxFJyxcbiAgc2V0TWV0YU1vZHVsZTogJ1NFVF9NRVRBX01PRFVMRScsXG4gIHNldEFsbFRpbWVUb3RhbE1vZHVsZTogJ1NFVF9BTExfVElNRV9UT1RBTF9NT0RVTEUnLFxuICBzZXRBbGxWaWV3ZXJzTW9kdWxlOiAnU0VUX0FMTF9WSUVXRVJTX01PRFVMRScsXG4gIHNldFZpZXdlcnNNb2R1bGU6ICdTRVRfVklFV0VSU19NT0RVTEUnLFxuICBzZXRMb2dvTW9kdWxlOiAnU0VUX0xPR09fTU9EVUxFJyxcbiAgc2V0U2hhcmVNb2R1bGU6ICdTRVRfU0hBUkVfTU9EVUxFJyxcbiAgc2V0QnJvYWRjYXN0ZXJNb2R1bGU6ICdTRVRfQlJPQURDQVNURVJfTU9EVUxFJyxcbiAgc2V0TGl2ZUNUQU1vZHVsZTogJ1NFVF9MSVZFX0NUQV9NT0RVTEUnLFxuICBzZXRUaHVtYm5haWxNb2R1bGU6ICdTRVRfVEhVTUJOQUlMX01PRFVMRScsXG4gIHNldFBvbGxNb2R1bGU6ICdTRVRfUE9MTF9NT0RVTEUnLFxuICBzZXRDYXB0aW9uU2VhcmNoTW9kdWxlOiAnU0VUX0NBUFRJT05fU0VBUkNIX01PRFVMRScsXG4gIHNldFNsaWRlc01vZHVsZTogJ1NFVF9TTElERVNfTU9EVUxFJyxcbn07XG4iXSwibmFtZXMiOlsic2V0U3RyZWFtTW9kdWxlIiwic2V0TWV0YU1vZHVsZSIsInNldEFsbFRpbWVUb3RhbE1vZHVsZSIsInNldEFsbFZpZXdlcnNNb2R1bGUiLCJzZXRWaWV3ZXJzTW9kdWxlIiwic2V0TG9nb01vZHVsZSIsInNldFNoYXJlTW9kdWxlIiwic2V0QnJvYWRjYXN0ZXJNb2R1bGUiLCJzZXRMaXZlQ1RBTW9kdWxlIiwic2V0VGh1bWJuYWlsTW9kdWxlIiwic2V0UG9sbE1vZHVsZSIsInNldENhcHRpb25TZWFyY2hNb2R1bGUiLCJzZXRTbGlkZXNNb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/cronus/store/types/umsModules.js\n");

/***/ }),

/***/ "../js/cronus/tracking/index.js":
/*!**************************************!*\
  !*** ../js/cronus/tracking/index.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var ustream_centrallogging__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ustream-centrallogging */ \"../node_modules/ustream-centrallogging/dist/ustream-centrallogging.js\");\n/* harmony import */ var ustream_centrallogging__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ustream_centrallogging__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ustream_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ustream-env */ \"../node_modules/ustream-env/dist/ustream-env.js\");\n/* harmony import */ var ustream_env__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(ustream_env__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var player_utils_object_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! player-utils/object/get */ \"../node_modules/player-utils/object/get.js\");\n/* harmony import */ var shared_lib_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! shared/lib/logger */ \"../js/shared/lib/logger/index.js\");\n/* harmony import */ var shared_data_domainMapping__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! shared/data/domainMapping */ \"../js/shared/data/domainMapping.js\");\n/* harmony import */ var shared_consts__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! shared/consts */ \"../js/shared/consts.js\");\n/* harmony import */ var cronus_store__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! cronus/store */ \"../js/cronus/store/index.js\");\n/* harmony import */ var cronus_store_selectors__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! cronus/store/selectors */ \"../js/cronus/store/selectors/index.js\");\n/* harmony import */ var cronus_config_initial__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! cronus/config/initial */ \"../js/cronus/config/initial.js\");\n/* harmony import */ var cronus_tracking_payloads__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! cronus/tracking/payloads */ \"../js/cronus/tracking/payloads.js\");\n/* harmony import */ var cronus_tracking_types__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! cronus/tracking/types */ \"../js/cronus/tracking/types.js\");\n/* harmony import */ var cronus_tracking_watcher__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! cronus/tracking/watcher */ \"../js/cronus/tracking/watcher.js\");\n/* harmony import */ var cronus_env__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! cronus/env */ \"../js/cronus/env/index.js\");\n/* harmony import */ var shared_store_actions_content__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! shared/store/actions/content */ \"../js/shared/store/actions/content.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar debugLogger = (0,shared_lib_logger__WEBPACK_IMPORTED_MODULE_3__.createLoggerForModule)('cronus/tracking/index');\nvar eventsOnce = {};\n\nvar logger = function createLogger() {\n  var _window, _window$location;\n\n  /**\n   * @param {string|boolean} errorType\n   * @param {Array.<Object>|boolean} sentPayloads\n   */\n  function onComplete(errorType, sentPayloads) {\n    if (errorType) {\n      debugLogger.debug('error:', errorType);\n      return;\n    }\n\n    sentPayloads.forEach(function (sentPayload) {\n      debugLogger.debug('sent:', sentPayload);\n    });\n  }\n\n  var config = {\n    subdomain: 'eventtracking-log',\n    protocol: ((_window = window) === null || _window === void 0 ? void 0 : (_window$location = _window.location) === null || _window$location === void 0 ? void 0 : _window$location.hostname) === 'localhost' ? 'https:' : '',\n    tag: 'eventtracking.web.player',\n    type: 'web',\n    callback: onComplete\n  };\n  var eventtrackingUrl = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(shared_data_domainMapping__WEBPACK_IMPORTED_MODULE_4__[\"default\"].config, 'eventtrackingUrl', '');\n  /**\n   * The subdomain part of the configuration could not contain a \".\" character\n   * therefore if the URL is \"eventtracking-log.services.video.ibm.com\",\n   * the subdomain should be \"eventtracking-log\" and the domain should be\n   * the rest of the URL (\"services.video.ibm.com\")\n   */\n\n  var matches = eventtrackingUrl.match(/^([^.]+)\\.(.+)$/);\n\n  if (matches) {\n    var _matches = _slicedToArray(matches, 3),\n        subdomain = _matches[1],\n        restOfTheURL = _matches[2];\n\n    config.subdomain = subdomain;\n    config.domain = restOfTheURL;\n  }\n\n  return ustream_centrallogging__WEBPACK_IMPORTED_MODULE_0___default().create(config);\n}();\n\nfunction isEnabled() {\n  return !!(ustream_env__WEBPACK_IMPORTED_MODULE_1___default().storage);\n}\n\nfunction once(type) {\n  if (eventsOnce[type]) {\n    return {\n      send: function noop() {}\n    };\n  }\n\n  eventsOnce[type] = true;\n  return {\n    send: send.bind(this, type)\n  };\n}\n\nfunction transport(payload) {\n  return {\n    send: send.bind(this, undefined, {}, payload)\n  };\n}\n/**\n * @param {Object} state\n * @returns {string}\n */\n\n\nfunction getContentType(state) {\n  var mediaType = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_7__.getMediaType)(state);\n\n  switch (mediaType) {\n    case shared_store_actions_content__WEBPACK_IMPORTED_MODULE_13__.MEDIA_TYPES.live:\n      return 'live';\n\n    case shared_store_actions_content__WEBPACK_IMPORTED_MODULE_13__.MEDIA_TYPES.recorded:\n      return 'video';\n\n    case shared_store_actions_content__WEBPACK_IMPORTED_MODULE_13__.MEDIA_TYPES.offairImage:\n      return 'offairimage';\n\n    case shared_store_actions_content__WEBPACK_IMPORTED_MODULE_13__.MEDIA_TYPES.offairSlide:\n      return 'offairslide';\n\n    case shared_store_actions_content__WEBPACK_IMPORTED_MODULE_13__.MEDIA_TYPES.offairVideo:\n      return 'offairvideo';\n\n    case shared_store_actions_content__WEBPACK_IMPORTED_MODULE_13__.MEDIA_TYPES.offairScreen:\n      return 'offairscreen';\n\n    default:\n      return 'unknown';\n  }\n}\n\nfunction send(type) {\n  var _objectSpread2;\n\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var transportPayload = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (!isEnabled()) {\n    return;\n  }\n\n  var payload = type ? cronus_tracking_payloads__WEBPACK_IMPORTED_MODULE_9__.PAYLOADS[type](options) : transportPayload;\n  var flashVersion = (ustream_env__WEBPACK_IMPORTED_MODULE_1___default().swf) ? ustream_env__WEBPACK_IMPORTED_MODULE_1___default().swf.join('.') : 'none';\n  var idKey = (0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_8__.getInitialConfig)('contentType') === 'channel' ? 'channel_id' : 'recorded_id';\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_6__.wrappedStore.getState();\n  var cluster = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_7__.getCluster)(state);\n  var contentType = getContentType(state);\n  payload.data = _objectSpread((_objectSpread2 = {\n    cluster: cluster\n  }, _defineProperty(_objectSpread2, idKey, cronus_env__WEBPACK_IMPORTED_MODULE_12__[\"default\"].getId()), _defineProperty(_objectSpread2, \"branch_name\", (0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_8__.getInitialConfig)('branchName')), _defineProperty(_objectSpread2, \"player_version\", 'v6_hlsjs'), _defineProperty(_objectSpread2, \"flash_version\", flashVersion), _defineProperty(_objectSpread2, \"buildNumber\", shared_consts__WEBPACK_IMPORTED_MODULE_5__[\"default\"].BUILD_NUMBER), _defineProperty(_objectSpread2, \"broadcaster_user_id\", (0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_8__.getInitialConfig)('ownerId')), _defineProperty(_objectSpread2, \"contentType\", contentType), _objectSpread2), payload.data);\n  logger.send(payload);\n}\n\nfunction init() {\n  cronus_tracking_watcher__WEBPACK_IMPORTED_MODULE_11__[\"default\"].init({\n    send: send,\n    PAYLOADS: cronus_tracking_payloads__WEBPACK_IMPORTED_MODULE_9__.PAYLOADS,\n    TYPES: cronus_tracking_types__WEBPACK_IMPORTED_MODULE_10__.TYPES,\n    isEnabled: isEnabled\n  });\n}\n\nfunction reset() {\n  eventsOnce = {};\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  init: init,\n  reset: reset,\n  send: send,\n  once: once,\n  transport: transport,\n  isEnabled: isEnabled,\n  TYPES: cronus_tracking_types__WEBPACK_IMPORTED_MODULE_10__.TYPES,\n  PAYLOADS: cronus_tracking_payloads__WEBPACK_IMPORTED_MODULE_9__.PAYLOADS\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../js/cronus/tracking/index.js\n");

/***/ }),

/***/ "../js/cronus/tracking/levels.js":
/*!***************************************!*\
  !*** ../js/cronus/tracking/levels.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LEVELS\": function() { return /* binding */ LEVELS; }\n/* harmony export */ });\nvar LEVELS = {\n  // Designates very severe error events that will presumably lead\n  // the application to abort.\n  FATAL: 100,\n  // Designates error events that might still allow the application\n  // to continue running.\n  ERROR: 200,\n  // Designates potentially harmful situations.\n  WARN: 300,\n  // Designates informational messages that highlight the progress of\n  // the application at coarse-grained level.\n  INFO: 400,\n  // Designates fine-grained informational events that are most\n  // useful to debug an application.\n  DEBUG: 500\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3RyYWNraW5nL2xldmVscy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sSUFBTUEsTUFBTSxHQUFHO0FBQ3BCO0FBQ0E7QUFDQUMsRUFBQUEsS0FBSyxFQUFFLEdBSGE7QUFLcEI7QUFDQTtBQUNBQyxFQUFBQSxLQUFLLEVBQUUsR0FQYTtBQVNwQjtBQUNBQyxFQUFBQSxJQUFJLEVBQUUsR0FWYztBQVlwQjtBQUNBO0FBQ0FDLEVBQUFBLElBQUksRUFBRSxHQWRjO0FBZ0JwQjtBQUNBO0FBQ0FDLEVBQUFBLEtBQUssRUFBRTtBQWxCYSxDQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvdHJhY2tpbmcvbGV2ZWxzLmpzPzMwZGMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IExFVkVMUyA9IHtcbiAgLy8gRGVzaWduYXRlcyB2ZXJ5IHNldmVyZSBlcnJvciBldmVudHMgdGhhdCB3aWxsIHByZXN1bWFibHkgbGVhZFxuICAvLyB0aGUgYXBwbGljYXRpb24gdG8gYWJvcnQuXG4gIEZBVEFMOiAxMDAsXG5cbiAgLy8gRGVzaWduYXRlcyBlcnJvciBldmVudHMgdGhhdCBtaWdodCBzdGlsbCBhbGxvdyB0aGUgYXBwbGljYXRpb25cbiAgLy8gdG8gY29udGludWUgcnVubmluZy5cbiAgRVJST1I6IDIwMCxcblxuICAvLyBEZXNpZ25hdGVzIHBvdGVudGlhbGx5IGhhcm1mdWwgc2l0dWF0aW9ucy5cbiAgV0FSTjogMzAwLFxuXG4gIC8vIERlc2lnbmF0ZXMgaW5mb3JtYXRpb25hbCBtZXNzYWdlcyB0aGF0IGhpZ2hsaWdodCB0aGUgcHJvZ3Jlc3Mgb2ZcbiAgLy8gdGhlIGFwcGxpY2F0aW9uIGF0IGNvYXJzZS1ncmFpbmVkIGxldmVsLlxuICBJTkZPOiA0MDAsXG5cbiAgLy8gRGVzaWduYXRlcyBmaW5lLWdyYWluZWQgaW5mb3JtYXRpb25hbCBldmVudHMgdGhhdCBhcmUgbW9zdFxuICAvLyB1c2VmdWwgdG8gZGVidWcgYW4gYXBwbGljYXRpb24uXG4gIERFQlVHOiA1MDAsXG59O1xuIl0sIm5hbWVzIjpbIkxFVkVMUyIsIkZBVEFMIiwiRVJST1IiLCJXQVJOIiwiSU5GTyIsIkRFQlVHIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/tracking/levels.js\n");

/***/ }),

/***/ "../js/cronus/tracking/payloads.js":
/*!*****************************************!*\
  !*** ../js/cronus/tracking/payloads.js ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PAYLOADS\": function() { return /* binding */ PAYLOADS; }\n/* harmony export */ });\n/* harmony import */ var cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/tracking/types */ \"../js/cronus/tracking/types.js\");\n/* harmony import */ var cronus_tracking_levels__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/tracking/levels */ \"../js/cronus/tracking/levels.js\");\nvar _PAYLOADS;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n/**\n * @param {string|undefined} url\n * @returns {string|undefined}\n */\n\nfunction normalizeProviderUrl(url) {\n  if (typeof url !== 'string') {\n    return undefined;\n  }\n\n  try {\n    var _URL = new URL(url),\n        protocol = _URL.protocol,\n        hostname = _URL.hostname;\n\n    return \"\".concat(protocol, \"//\").concat(hostname);\n  } catch (e) {\n    return undefined;\n  }\n}\n\nvar PAYLOADS = (_PAYLOADS = {}, _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.initialLoadingStarted, function (_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n  return {\n    message: 'Initial loading started',\n    data: {\n      category: 'Loading',\n      item: 'initial loading',\n      action: 'started',\n      width: width,\n      height: height\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.initialLoadingCompleted, function () {\n  return {\n    message: 'Initial loading completed',\n    data: {\n      category: 'Loading',\n      item: 'initial loading',\n      action: 'completed'\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.umsConnectionStarted, function (_ref2) {\n  var autoplay = _ref2.autoplay,\n      timeSpentFromInit = _ref2.timeSpentFromInit;\n  return {\n    message: 'UMS connection started',\n    data: {\n      category: 'Loading',\n      item: 'UMS connection',\n      action: 'connected',\n      autoplay: autoplay,\n      time_spent_from_init: timeSpentFromInit\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.umsConnectionCompleted, function (_ref3) {\n  var autoplay = _ref3.autoplay,\n      timeSpent = _ref3.timeSpent,\n      timeSpentFromInit = _ref3.timeSpentFromInit;\n  return {\n    message: 'UMS connection completed',\n    data: {\n      category: 'Loading',\n      item: 'UMS connection',\n      action: 'connected',\n      autoplay: autoplay,\n      time_spent: timeSpent,\n      time_spent_from_init: timeSpentFromInit\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.streamModuleReceived, function (_ref4) {\n  var autoplay = _ref4.autoplay,\n      timeSpent = _ref4.timeSpent,\n      timeSpentFromInit = _ref4.timeSpentFromInit;\n  return {\n    message: 'Stream module received',\n    data: {\n      category: 'Loading',\n      item: 'stream module',\n      action: 'received',\n      autoplay: autoplay,\n      time_spent: timeSpent,\n      time_spent_from_init: timeSpentFromInit\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.firstTimeUpdate, function (_ref5) {\n  var autoplay = _ref5.autoplay,\n      timeSpent = _ref5.timeSpent,\n      timeSpentFromInit = _ref5.timeSpentFromInit;\n  return {\n    message: 'First time update',\n    data: {\n      category: 'Playback',\n      item: 'playback',\n      action: 'started',\n      autoplay: autoplay,\n      time_spent: timeSpent,\n      time_spent_from_init: timeSpentFromInit\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.bufferingStarted, function (_ref6) {\n  var segmentSize = _ref6.segmentSize,\n      netSpeed = _ref6.netSpeed,\n      currentBitrateInKbps = _ref6.currentBitrateInKbps,\n      currentHeight = _ref6.currentHeight;\n  return {\n    message: 'Buffering started',\n    data: {\n      category: 'Loading',\n      item: 'buffering',\n      action: 'started',\n      segment_size: segmentSize,\n      net_speed: netSpeed,\n      current_kbps: currentBitrateInKbps,\n      current_height: currentHeight\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.bufferingCompleted, function (_ref7) {\n  var timeSpent = _ref7.timeSpent,\n      segmentSize = _ref7.segmentSize,\n      netSpeed = _ref7.netSpeed,\n      currentBitrateInKbps = _ref7.currentBitrateInKbps,\n      currentHeight = _ref7.currentHeight;\n  return {\n    message: 'Buffering completed',\n    data: {\n      category: 'Loading',\n      item: 'buffering',\n      action: 'completed',\n      time_spent: timeSpent,\n      segment_size: segmentSize,\n      net_speed: netSpeed,\n      current_kbps: currentBitrateInKbps,\n      current_height: currentHeight\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.streamTypeSelected, function () {\n  return {\n    message: 'Streamtype selected',\n    data: {\n      category: 'Playback',\n      item: 'initial loading',\n      action: 'selected'\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.playbackRequestedWithAutoplay, function () {\n  return {\n    message: 'Playback requested',\n    data: {\n      category: 'Playback',\n      item: 'playback',\n      action: 'requested - autoplay'\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.playbackStarted, function (_ref8) {\n  var streamType = _ref8.streamType;\n  return {\n    message: 'Playback started',\n    data: {\n      category: 'Playback',\n      item: 'playback',\n      action: 'started',\n      stream_type: streamType\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.turnOnCC, function (_ref9) {\n  var mediaType = _ref9.mediaType,\n      language = _ref9.language;\n  return {\n    message: 'Turn on CC',\n    data: {\n      category: 'Interaction',\n      item: 'CC',\n      action: 'turn_on',\n      type: mediaType,\n      language: language\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.turnOffCC, function (_ref10) {\n  var mediaType = _ref10.mediaType,\n      language = _ref10.language;\n  return {\n    message: 'Turn off CC',\n    data: {\n      category: 'Interaction',\n      item: 'CC',\n      action: 'turn_off',\n      type: mediaType,\n      language: language\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.playbackStartedWithCC, function (_ref11) {\n  var isBroadcasterSelection = _ref11.isBroadcasterSelection,\n      language = _ref11.language;\n  return {\n    message: 'Playback started with CC',\n    data: {\n      category: 'Playback',\n      item: 'CC',\n      action: 'displayed',\n      cc_type: isBroadcasterSelection ? 'from_broadcaster' : 'from_viewer',\n      language: language\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.liveStatusChanged, function (_ref12) {\n  var isLive = _ref12.isLive;\n  return {\n    message: 'Live status changed',\n    data: {\n      category: 'Playback',\n      item: 'live status',\n      action: 'changed',\n      status: isLive ? 'live' : 'off air'\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.offairContentDisplayed, function (_ref13) {\n  var offairContentType = _ref13.offairContentType;\n  return {\n    message: 'Offair content displayed',\n    data: {\n      category: 'Playback',\n      item: 'off air content',\n      action: 'displayed',\n      offair_content_type: offairContentType\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.umsConnectionLost, function (_ref14) {\n  var reason = _ref14.reason;\n  return {\n    message: 'UMS connection lost',\n    data: {\n      category: 'Playback',\n      item: 'UMS connection',\n      action: 'lost',\n      reason: reason\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.playerClosed, function () {\n  return {\n    message: 'Player closed',\n    data: {\n      category: 'Playback',\n      item: 'playback',\n      action: 'player closed'\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.qualityChangeStarted, function (_ref15) {\n  var fromBitrateInKbps = _ref15.fromBitrateInKbps,\n      fromHeight = _ref15.fromHeight;\n  return {\n    message: 'quality change',\n    data: {\n      category: 'Playback',\n      item: 'quality change',\n      action: 'started',\n      from_kbps: fromBitrateInKbps,\n      from_height: fromHeight\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.qualityChangeCompleted, function (_ref16) {\n  var toBitrateInKbps = _ref16.toBitrateInKbps,\n      toHeight = _ref16.toHeight,\n      timeSpent = _ref16.timeSpent,\n      bufferSpent = _ref16.bufferSpent;\n  return {\n    message: 'quality change',\n    data: {\n      category: 'Playback',\n      item: 'quality change',\n      action: 'completed',\n      to_kbps: toBitrateInKbps,\n      to_height: toHeight,\n      time_spent: timeSpent,\n      buffer_spent: bufferSpent\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.qualityChangeCanceled, function (_ref17) {\n  var timeSpent = _ref17.timeSpent,\n      bufferSpent = _ref17.bufferSpent;\n  return {\n    message: 'quality change',\n    data: {\n      category: 'Playback',\n      item: 'quality change',\n      action: 'canceled',\n      time_spent: timeSpent,\n      buffer_spent: bufferSpent\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.seekStarted, function () {\n  return {\n    message: 'Seek started',\n    data: {\n      category: 'Playback',\n      item: 'playback',\n      action: 'started'\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.seekCompleted, function () {\n  return {\n    message: 'Seek completed',\n    data: {\n      category: 'Playback',\n      item: 'playback',\n      action: 'completed'\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.endOfStream, function () {\n  return {\n    message: 'End of stream',\n    data: {\n      category: 'Playback',\n      item: 'end of stream',\n      action: ''\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.offairContentChanged, function (_ref18) {\n  var prevId = _ref18.prevId,\n      nextId = _ref18.nextId;\n  return {\n    message: 'Offair content changed',\n    data: {\n      category: 'Playback',\n      item: 'off air content',\n      action: 'change',\n      prevId: prevId,\n      nextId: nextId\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.errorLoggerLoaded, function () {\n  return {\n    message: 'Error logger loaded',\n    data: {\n      category: 'Error',\n      item: 'load',\n      action: '',\n      level: cronus_tracking_levels__WEBPACK_IMPORTED_MODULE_1__.LEVELS.INFO\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.heartbeat, function () {\n  var _ref19 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref19$position = _ref19.position,\n      position = _ref19$position === void 0 ? -1 : _ref19$position,\n      provider = _ref19.provider,\n      videoHeight = _ref19.videoHeight,\n      videoWidth = _ref19.videoWidth;\n\n  return {\n    message: 'heartbeat',\n    data: {\n      category: 'Error',\n      item: 'heartbeat',\n      action: '',\n      level: cronus_tracking_levels__WEBPACK_IMPORTED_MODULE_1__.LEVELS.INFO,\n      position: position,\n      provider: normalizeProviderUrl(provider),\n      videoHeight: videoHeight,\n      videoWidth: videoWidth\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.reload, function () {\n  return {\n    message: 'reload',\n    data: {\n      category: 'Error',\n      item: 'reload',\n      action: '',\n      level: cronus_tracking_levels__WEBPACK_IMPORTED_MODULE_1__.LEVELS.WARN\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.zeroStreamModule, function () {\n  return {\n    message: 'zero stream module received',\n    data: {\n      category: 'Error',\n      item: 'zero_stream_module',\n      action: '',\n      level: cronus_tracking_levels__WEBPACK_IMPORTED_MODULE_1__.LEVELS.WARN\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.emptyStreamModule, function () {\n  return {\n    message: 'empty stream module received',\n    data: {\n      category: 'Error',\n      item: 'empty_stream_module',\n      action: '',\n      level: cronus_tracking_levels__WEBPACK_IMPORTED_MODULE_1__.LEVELS.WARN\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.unhandledException, function (_ref20) {\n  var message = _ref20.message,\n      stack = _ref20.stack;\n  return {\n    message: 'Unhandled exception',\n    data: {\n      category: 'Unhandled exception',\n      item: 'unhandled exception',\n      action: '',\n      message: message,\n      stack: stack\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.providerChange, function (_ref21) {\n  var _ref21$reason = _ref21.reason,\n      reason = _ref21$reason === void 0 ? 'unknown' : _ref21$reason,\n      provider = _ref21.provider;\n  return {\n    message: reason,\n    data: {\n      category: 'Error',\n      item: 'provider_change',\n      action: '',\n      provider: normalizeProviderUrl(provider)\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.notAllowed, function (_ref22) {\n  var errorMessage = _ref22.errorMessage;\n  return {\n    message: 'Playback not allowed',\n    data: {\n      category: 'Error',\n      item: 'hlsjs not allowed',\n      action: '',\n      level: cronus_tracking_levels__WEBPACK_IMPORTED_MODULE_1__.LEVELS.WARN,\n      error_message: errorMessage\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.unsupportedContent, function () {\n  return {\n    message: 'Unsupported content',\n    data: {\n      category: 'Error',\n      item: 'hlsjs unsupported content',\n      action: '',\n      level: cronus_tracking_levels__WEBPACK_IMPORTED_MODULE_1__.LEVELS.FATAL\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.manifestParsingError, function () {\n  return {\n    message: 'Manifest parsing error',\n    data: {\n      category: 'Error',\n      item: 'hlsjs manifest parsing error',\n      action: '',\n      level: cronus_tracking_levels__WEBPACK_IMPORTED_MODULE_1__.LEVELS.ERROR\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.manifestEmptyError, function () {\n  return {\n    message: 'Manifest empty error',\n    data: {\n      category: 'Error',\n      item: 'hlsjs manifest empty error',\n      action: '',\n      level: cronus_tracking_levels__WEBPACK_IMPORTED_MODULE_1__.LEVELS.WARN\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.manifestLoadingError, function (_ref23) {\n  var errorCode = _ref23.errorCode,\n      errorMessage = _ref23.errorMessage,\n      errorDetail = _ref23.errorDetail;\n  return {\n    message: 'Manifest loading error',\n    data: {\n      category: 'Error',\n      item: 'hlsjs manifest loading error',\n      action: '',\n      level: cronus_tracking_levels__WEBPACK_IMPORTED_MODULE_1__.LEVELS.ERROR,\n      error_code: errorCode,\n      error_message: errorMessage,\n      error_type: errorDetail\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.manifestLoadingTimeout, function (_ref24) {\n  var errorDetail = _ref24.errorDetail;\n  return {\n    message: 'Manifest loading timeout',\n    data: {\n      category: 'Error',\n      item: 'hlsjs manifest loading timeout',\n      action: '',\n      level: cronus_tracking_levels__WEBPACK_IMPORTED_MODULE_1__.LEVELS.ERROR,\n      error_type: errorDetail\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.segmentLoadingError, function (_ref25) {\n  var errorCode = _ref25.errorCode,\n      errorMessage = _ref25.errorMessage;\n  return {\n    message: 'Segment loading error',\n    data: {\n      category: 'Error',\n      item: 'hlsjs segment loading error',\n      action: '',\n      level: cronus_tracking_levels__WEBPACK_IMPORTED_MODULE_1__.LEVELS.ERROR,\n      error_code: errorCode,\n      error_message: errorMessage\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.segmentLoadingTimeout, function () {\n  return {\n    message: 'Segment loading timeout',\n    data: {\n      category: 'Error',\n      item: 'hlsjs segment loading timeout',\n      action: '',\n      level: cronus_tracking_levels__WEBPACK_IMPORTED_MODULE_1__.LEVELS.ERROR\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.segmentParsingError, function (_ref26) {\n  var reason = _ref26.reason;\n  return {\n    message: reason,\n    data: {\n      category: 'Error',\n      item: 'hlsjs segment parsing error',\n      action: '',\n      level: cronus_tracking_levels__WEBPACK_IMPORTED_MODULE_1__.LEVELS.ERROR\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.progressStalled, function (_ref27) {\n  var timeout = _ref27.timeout;\n  return {\n    message: 'Progress stalled',\n    data: {\n      category: 'Error',\n      item: 'hlsjs progress stalled',\n      action: '',\n      level: cronus_tracking_levels__WEBPACK_IMPORTED_MODULE_1__.LEVELS.ERROR,\n      timeout: timeout\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.playbackHasNotBegun, function (_ref28) {\n  var timeout = _ref28.timeout;\n  return {\n    message: 'Playback has not begun',\n    data: {\n      category: 'Error',\n      item: 'hlsjs playback has not begun',\n      action: '',\n      level: cronus_tracking_levels__WEBPACK_IMPORTED_MODULE_1__.LEVELS.FATAL,\n      timeout: timeout\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.longBuffering, function (_ref29) {\n  var timeout = _ref29.timeout;\n  return {\n    message: 'Long buffering',\n    data: {\n      category: 'Error',\n      item: 'hlsjs long buffering',\n      action: '',\n      level: cronus_tracking_levels__WEBPACK_IMPORTED_MODULE_1__.LEVELS.WARN,\n      timeout: timeout\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.mediaError, function (_ref30) {\n  var errorCode = _ref30.errorCode,\n      provider = _ref30.provider;\n  var message;\n\n  switch (errorCode) {\n    // The fetching of the associated resource was aborted by the\n    // user's request.\n    case 1:\n      message = 'aborted';\n      break;\n    // Some kind of network error occurred which prevented the media\n    // from being successfully fetched, despite having previously been\n    // available.\n\n    case 2:\n      message = 'network';\n      break;\n    // Despite having previously been determined to be usable, an error\n    // occurred while trying to decode the media resource, resulting in\n    // an error.\n\n    case 3:\n      message = 'decode';\n      break;\n    // The associated resource or media provider object (such as a\n    // MediaStream) has been found to be unsuitable.\n\n    case 4:\n      message = 'unsupported';\n      break;\n\n    default:\n      message = 'unknown';\n      break;\n  }\n\n  return {\n    message: message,\n    data: {\n      category: 'Error',\n      item: 'hlsjs media error',\n      action: '',\n      level: cronus_tracking_levels__WEBPACK_IMPORTED_MODULE_1__.LEVELS.ERROR,\n      provider: normalizeProviderUrl(provider)\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.prerollStarted, function () {\n  return {\n    message: 'Preroll started',\n    data: {\n      category: 'Ad',\n      item: 'Preroll',\n      action: 'started'\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.prerollFinished, function () {\n  return {\n    message: 'Preroll finished',\n    data: {\n      category: 'Ad',\n      item: 'Preroll',\n      action: 'finished'\n    }\n  };\n}), _defineProperty(_PAYLOADS, cronus_tracking_types__WEBPACK_IMPORTED_MODULE_0__.TYPES.audioChunkAppendError, function (_ref31) {\n  var start = _ref31.start,\n      end = _ref31.end;\n  return {\n    message: 'Audio chunk append error',\n    data: {\n      category: 'Debug',\n      item: 'audio chunk append error',\n      action: '',\n      error_message: \"frag.start: \".concat(start, \", frag.end: \").concat(end)\n    }\n  };\n}), _PAYLOADS);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../js/cronus/tracking/payloads.js\n");

/***/ }),

/***/ "../js/cronus/tracking/types.js":
/*!**************************************!*\
  !*** ../js/cronus/tracking/types.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TYPES\": function() { return /* binding */ TYPES; }\n/* harmony export */ });\nvar TYPES = Object.freeze({\n  // LOADING\n  initialLoadingStarted: 'initialLoadingStarted',\n  initialLoadingCompleted: 'initialLoadingCompleted',\n  umsConnectionStarted: 'umsConnectionStarted',\n  umsConnectionCompleted: 'umsConnectionCompleted',\n  streamModuleReceived: 'streamModuleReceived',\n  firstTimeUpdate: 'firstTimeUpdate',\n  bufferingStarted: 'bufferingStarted',\n  bufferingCompleted: 'bufferingCompleted',\n  // PLAYBACK\n  streamTypeSelected: 'streamTypeSelected',\n  playbackRequestedWithAutoplay: 'playbackRequestedWithAutoplay',\n  playbackStarted: 'playbackStarted',\n  turnOnCC: 'turnOnCC',\n  turnOffCC: 'turnOffCC',\n  playbackStartedWithCC: 'playbackStartedWithCC',\n  liveStatusChanged: 'liveStatusChanged',\n  offairContentDisplayed: 'offairContentDisplayed',\n  playerClosed: 'playerClosed',\n  umsConnectionLost: 'umsConnectionLost',\n  qualityChangeStarted: 'qualityChangeStarted',\n  qualityChangeCompleted: 'qualityChangeCompleted',\n  qualityChangeCanceled: 'qualityChangeCanceled',\n  seekStarted: 'seekStarted',\n  seekCompleted: 'seekCompleted',\n  endOfStream: 'endOfStream',\n  offairContentChanged: 'offairContentChanged',\n  // ERRORS\n  errorLoggerLoaded: 'errorLoggerLoaded',\n  heartbeat: 'heartbeat',\n  reload: 'reload',\n  zeroStreamModule: 'zeroStreamModule',\n  emptyStreamModule: 'emptyStreamModule',\n  unhandledException: 'unhandledException',\n  providerChange: 'providerChange',\n  // HLS.JS\n  notAllowed: 'notAllowed',\n  unsupportedContent: 'unsupportedContent',\n  manifestParsingError: 'manifestParsingError',\n  manifestEmptyError: 'manifestEmptyError',\n  manifestLoadingError: 'manifestLoadingError',\n  manifestLoadingTimeout: 'manifestLoadingTimeout',\n  segmentLoadingError: 'segmentLoadingError',\n  segmentLoadingTimeout: 'segmentLoadingTimeout',\n  segmentParsingError: 'segmentParsingError',\n  progressStalled: 'progressStalled',\n  playbackHasNotBegun: 'playbackHasNotBegun',\n  longBuffering: 'longBuffering',\n  mediaError: 'mediaError',\n  // Ad\n  prerollStarted: 'prerollStarted',\n  prerollFinished: 'prerollFinished',\n  // Debug\n  audioChunkAppendError: 'audioChunkAppendError'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3RyYWNraW5nL3R5cGVzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxJQUFNQSxLQUFLLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjO0FBQ2pDO0FBQ0FDLEVBQUFBLHFCQUFxQixFQUFFLHVCQUZVO0FBR2pDQyxFQUFBQSx1QkFBdUIsRUFBRSx5QkFIUTtBQUlqQ0MsRUFBQUEsb0JBQW9CLEVBQUUsc0JBSlc7QUFLakNDLEVBQUFBLHNCQUFzQixFQUFFLHdCQUxTO0FBTWpDQyxFQUFBQSxvQkFBb0IsRUFBRSxzQkFOVztBQU9qQ0MsRUFBQUEsZUFBZSxFQUFFLGlCQVBnQjtBQVFqQ0MsRUFBQUEsZ0JBQWdCLEVBQUUsa0JBUmU7QUFTakNDLEVBQUFBLGtCQUFrQixFQUFFLG9CQVRhO0FBVWpDO0FBQ0FDLEVBQUFBLGtCQUFrQixFQUFFLG9CQVhhO0FBWWpDQyxFQUFBQSw2QkFBNkIsRUFBRSwrQkFaRTtBQWFqQ0MsRUFBQUEsZUFBZSxFQUFFLGlCQWJnQjtBQWNqQ0MsRUFBQUEsUUFBUSxFQUFFLFVBZHVCO0FBZWpDQyxFQUFBQSxTQUFTLEVBQUUsV0Fmc0I7QUFnQmpDQyxFQUFBQSxxQkFBcUIsRUFBRSx1QkFoQlU7QUFpQmpDQyxFQUFBQSxpQkFBaUIsRUFBRSxtQkFqQmM7QUFrQmpDQyxFQUFBQSxzQkFBc0IsRUFBRSx3QkFsQlM7QUFtQmpDQyxFQUFBQSxZQUFZLEVBQUUsY0FuQm1CO0FBb0JqQ0MsRUFBQUEsaUJBQWlCLEVBQUUsbUJBcEJjO0FBcUJqQ0MsRUFBQUEsb0JBQW9CLEVBQUUsc0JBckJXO0FBc0JqQ0MsRUFBQUEsc0JBQXNCLEVBQUUsd0JBdEJTO0FBdUJqQ0MsRUFBQUEscUJBQXFCLEVBQUUsdUJBdkJVO0FBd0JqQ0MsRUFBQUEsV0FBVyxFQUFFLGFBeEJvQjtBQXlCakNDLEVBQUFBLGFBQWEsRUFBRSxlQXpCa0I7QUEwQmpDQyxFQUFBQSxXQUFXLEVBQUUsYUExQm9CO0FBMkJqQ0MsRUFBQUEsb0JBQW9CLEVBQUUsc0JBM0JXO0FBNEJqQztBQUNBQyxFQUFBQSxpQkFBaUIsRUFBRSxtQkE3QmM7QUE4QmpDQyxFQUFBQSxTQUFTLEVBQUUsV0E5QnNCO0FBK0JqQ0MsRUFBQUEsTUFBTSxFQUFFLFFBL0J5QjtBQWdDakNDLEVBQUFBLGdCQUFnQixFQUFFLGtCQWhDZTtBQWlDakNDLEVBQUFBLGlCQUFpQixFQUFFLG1CQWpDYztBQWtDakNDLEVBQUFBLGtCQUFrQixFQUFFLG9CQWxDYTtBQW1DakNDLEVBQUFBLGNBQWMsRUFBRSxnQkFuQ2lCO0FBb0NqQztBQUNBQyxFQUFBQSxVQUFVLEVBQUUsWUFyQ3FCO0FBc0NqQ0MsRUFBQUEsa0JBQWtCLEVBQUUsb0JBdENhO0FBdUNqQ0MsRUFBQUEsb0JBQW9CLEVBQUUsc0JBdkNXO0FBd0NqQ0MsRUFBQUEsa0JBQWtCLEVBQUUsb0JBeENhO0FBeUNqQ0MsRUFBQUEsb0JBQW9CLEVBQUUsc0JBekNXO0FBMENqQ0MsRUFBQUEsc0JBQXNCLEVBQUUsd0JBMUNTO0FBMkNqQ0MsRUFBQUEsbUJBQW1CLEVBQUUscUJBM0NZO0FBNENqQ0MsRUFBQUEscUJBQXFCLEVBQUUsdUJBNUNVO0FBNkNqQ0MsRUFBQUEsbUJBQW1CLEVBQUUscUJBN0NZO0FBOENqQ0MsRUFBQUEsZUFBZSxFQUFFLGlCQTlDZ0I7QUErQ2pDQyxFQUFBQSxtQkFBbUIsRUFBRSxxQkEvQ1k7QUFnRGpDQyxFQUFBQSxhQUFhLEVBQUUsZUFoRGtCO0FBaURqQ0MsRUFBQUEsVUFBVSxFQUFFLFlBakRxQjtBQWtEakM7QUFDQUMsRUFBQUEsY0FBYyxFQUFFLGdCQW5EaUI7QUFvRGpDQyxFQUFBQSxlQUFlLEVBQUUsaUJBcERnQjtBQXFEakM7QUFDQUMsRUFBQUEscUJBQXFCLEVBQUU7QUF0RFUsQ0FBZCxDQUFkIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9qcy9jcm9udXMvdHJhY2tpbmcvdHlwZXMuanM/NmY5YyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgVFlQRVMgPSBPYmplY3QuZnJlZXplKHtcbiAgLy8gTE9BRElOR1xuICBpbml0aWFsTG9hZGluZ1N0YXJ0ZWQ6ICdpbml0aWFsTG9hZGluZ1N0YXJ0ZWQnLFxuICBpbml0aWFsTG9hZGluZ0NvbXBsZXRlZDogJ2luaXRpYWxMb2FkaW5nQ29tcGxldGVkJyxcbiAgdW1zQ29ubmVjdGlvblN0YXJ0ZWQ6ICd1bXNDb25uZWN0aW9uU3RhcnRlZCcsXG4gIHVtc0Nvbm5lY3Rpb25Db21wbGV0ZWQ6ICd1bXNDb25uZWN0aW9uQ29tcGxldGVkJyxcbiAgc3RyZWFtTW9kdWxlUmVjZWl2ZWQ6ICdzdHJlYW1Nb2R1bGVSZWNlaXZlZCcsXG4gIGZpcnN0VGltZVVwZGF0ZTogJ2ZpcnN0VGltZVVwZGF0ZScsXG4gIGJ1ZmZlcmluZ1N0YXJ0ZWQ6ICdidWZmZXJpbmdTdGFydGVkJyxcbiAgYnVmZmVyaW5nQ29tcGxldGVkOiAnYnVmZmVyaW5nQ29tcGxldGVkJyxcbiAgLy8gUExBWUJBQ0tcbiAgc3RyZWFtVHlwZVNlbGVjdGVkOiAnc3RyZWFtVHlwZVNlbGVjdGVkJyxcbiAgcGxheWJhY2tSZXF1ZXN0ZWRXaXRoQXV0b3BsYXk6ICdwbGF5YmFja1JlcXVlc3RlZFdpdGhBdXRvcGxheScsXG4gIHBsYXliYWNrU3RhcnRlZDogJ3BsYXliYWNrU3RhcnRlZCcsXG4gIHR1cm5PbkNDOiAndHVybk9uQ0MnLFxuICB0dXJuT2ZmQ0M6ICd0dXJuT2ZmQ0MnLFxuICBwbGF5YmFja1N0YXJ0ZWRXaXRoQ0M6ICdwbGF5YmFja1N0YXJ0ZWRXaXRoQ0MnLFxuICBsaXZlU3RhdHVzQ2hhbmdlZDogJ2xpdmVTdGF0dXNDaGFuZ2VkJyxcbiAgb2ZmYWlyQ29udGVudERpc3BsYXllZDogJ29mZmFpckNvbnRlbnREaXNwbGF5ZWQnLFxuICBwbGF5ZXJDbG9zZWQ6ICdwbGF5ZXJDbG9zZWQnLFxuICB1bXNDb25uZWN0aW9uTG9zdDogJ3Vtc0Nvbm5lY3Rpb25Mb3N0JyxcbiAgcXVhbGl0eUNoYW5nZVN0YXJ0ZWQ6ICdxdWFsaXR5Q2hhbmdlU3RhcnRlZCcsXG4gIHF1YWxpdHlDaGFuZ2VDb21wbGV0ZWQ6ICdxdWFsaXR5Q2hhbmdlQ29tcGxldGVkJyxcbiAgcXVhbGl0eUNoYW5nZUNhbmNlbGVkOiAncXVhbGl0eUNoYW5nZUNhbmNlbGVkJyxcbiAgc2Vla1N0YXJ0ZWQ6ICdzZWVrU3RhcnRlZCcsXG4gIHNlZWtDb21wbGV0ZWQ6ICdzZWVrQ29tcGxldGVkJyxcbiAgZW5kT2ZTdHJlYW06ICdlbmRPZlN0cmVhbScsXG4gIG9mZmFpckNvbnRlbnRDaGFuZ2VkOiAnb2ZmYWlyQ29udGVudENoYW5nZWQnLFxuICAvLyBFUlJPUlNcbiAgZXJyb3JMb2dnZXJMb2FkZWQ6ICdlcnJvckxvZ2dlckxvYWRlZCcsXG4gIGhlYXJ0YmVhdDogJ2hlYXJ0YmVhdCcsXG4gIHJlbG9hZDogJ3JlbG9hZCcsXG4gIHplcm9TdHJlYW1Nb2R1bGU6ICd6ZXJvU3RyZWFtTW9kdWxlJyxcbiAgZW1wdHlTdHJlYW1Nb2R1bGU6ICdlbXB0eVN0cmVhbU1vZHVsZScsXG4gIHVuaGFuZGxlZEV4Y2VwdGlvbjogJ3VuaGFuZGxlZEV4Y2VwdGlvbicsXG4gIHByb3ZpZGVyQ2hhbmdlOiAncHJvdmlkZXJDaGFuZ2UnLFxuICAvLyBITFMuSlNcbiAgbm90QWxsb3dlZDogJ25vdEFsbG93ZWQnLFxuICB1bnN1cHBvcnRlZENvbnRlbnQ6ICd1bnN1cHBvcnRlZENvbnRlbnQnLFxuICBtYW5pZmVzdFBhcnNpbmdFcnJvcjogJ21hbmlmZXN0UGFyc2luZ0Vycm9yJyxcbiAgbWFuaWZlc3RFbXB0eUVycm9yOiAnbWFuaWZlc3RFbXB0eUVycm9yJyxcbiAgbWFuaWZlc3RMb2FkaW5nRXJyb3I6ICdtYW5pZmVzdExvYWRpbmdFcnJvcicsXG4gIG1hbmlmZXN0TG9hZGluZ1RpbWVvdXQ6ICdtYW5pZmVzdExvYWRpbmdUaW1lb3V0JyxcbiAgc2VnbWVudExvYWRpbmdFcnJvcjogJ3NlZ21lbnRMb2FkaW5nRXJyb3InLFxuICBzZWdtZW50TG9hZGluZ1RpbWVvdXQ6ICdzZWdtZW50TG9hZGluZ1RpbWVvdXQnLFxuICBzZWdtZW50UGFyc2luZ0Vycm9yOiAnc2VnbWVudFBhcnNpbmdFcnJvcicsXG4gIHByb2dyZXNzU3RhbGxlZDogJ3Byb2dyZXNzU3RhbGxlZCcsXG4gIHBsYXliYWNrSGFzTm90QmVndW46ICdwbGF5YmFja0hhc05vdEJlZ3VuJyxcbiAgbG9uZ0J1ZmZlcmluZzogJ2xvbmdCdWZmZXJpbmcnLFxuICBtZWRpYUVycm9yOiAnbWVkaWFFcnJvcicsXG4gIC8vIEFkXG4gIHByZXJvbGxTdGFydGVkOiAncHJlcm9sbFN0YXJ0ZWQnLFxuICBwcmVyb2xsRmluaXNoZWQ6ICdwcmVyb2xsRmluaXNoZWQnLFxuICAvLyBEZWJ1Z1xuICBhdWRpb0NodW5rQXBwZW5kRXJyb3I6ICdhdWRpb0NodW5rQXBwZW5kRXJyb3InLFxufSk7XG4iXSwibmFtZXMiOlsiVFlQRVMiLCJPYmplY3QiLCJmcmVlemUiLCJpbml0aWFsTG9hZGluZ1N0YXJ0ZWQiLCJpbml0aWFsTG9hZGluZ0NvbXBsZXRlZCIsInVtc0Nvbm5lY3Rpb25TdGFydGVkIiwidW1zQ29ubmVjdGlvbkNvbXBsZXRlZCIsInN0cmVhbU1vZHVsZVJlY2VpdmVkIiwiZmlyc3RUaW1lVXBkYXRlIiwiYnVmZmVyaW5nU3RhcnRlZCIsImJ1ZmZlcmluZ0NvbXBsZXRlZCIsInN0cmVhbVR5cGVTZWxlY3RlZCIsInBsYXliYWNrUmVxdWVzdGVkV2l0aEF1dG9wbGF5IiwicGxheWJhY2tTdGFydGVkIiwidHVybk9uQ0MiLCJ0dXJuT2ZmQ0MiLCJwbGF5YmFja1N0YXJ0ZWRXaXRoQ0MiLCJsaXZlU3RhdHVzQ2hhbmdlZCIsIm9mZmFpckNvbnRlbnREaXNwbGF5ZWQiLCJwbGF5ZXJDbG9zZWQiLCJ1bXNDb25uZWN0aW9uTG9zdCIsInF1YWxpdHlDaGFuZ2VTdGFydGVkIiwicXVhbGl0eUNoYW5nZUNvbXBsZXRlZCIsInF1YWxpdHlDaGFuZ2VDYW5jZWxlZCIsInNlZWtTdGFydGVkIiwic2Vla0NvbXBsZXRlZCIsImVuZE9mU3RyZWFtIiwib2ZmYWlyQ29udGVudENoYW5nZWQiLCJlcnJvckxvZ2dlckxvYWRlZCIsImhlYXJ0YmVhdCIsInJlbG9hZCIsInplcm9TdHJlYW1Nb2R1bGUiLCJlbXB0eVN0cmVhbU1vZHVsZSIsInVuaGFuZGxlZEV4Y2VwdGlvbiIsInByb3ZpZGVyQ2hhbmdlIiwibm90QWxsb3dlZCIsInVuc3VwcG9ydGVkQ29udGVudCIsIm1hbmlmZXN0UGFyc2luZ0Vycm9yIiwibWFuaWZlc3RFbXB0eUVycm9yIiwibWFuaWZlc3RMb2FkaW5nRXJyb3IiLCJtYW5pZmVzdExvYWRpbmdUaW1lb3V0Iiwic2VnbWVudExvYWRpbmdFcnJvciIsInNlZ21lbnRMb2FkaW5nVGltZW91dCIsInNlZ21lbnRQYXJzaW5nRXJyb3IiLCJwcm9ncmVzc1N0YWxsZWQiLCJwbGF5YmFja0hhc05vdEJlZ3VuIiwibG9uZ0J1ZmZlcmluZyIsIm1lZGlhRXJyb3IiLCJwcmVyb2xsU3RhcnRlZCIsInByZXJvbGxGaW5pc2hlZCIsImF1ZGlvQ2h1bmtBcHBlbmRFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/tracking/types.js\n");

/***/ }),

/***/ "../js/cronus/tracking/watcher.js":
/*!****************************************!*\
  !*** ../js/cronus/tracking/watcher.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! player-utils/object/get */ \"../node_modules/player-utils/object/get.js\");\n/* harmony import */ var shared_lib_storage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/lib/storage */ \"../js/shared/lib/storage.js\");\n/* harmony import */ var shared_lib_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/lib/logger */ \"../js/shared/lib/logger/index.js\");\n/* harmony import */ var cronus_store__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/store */ \"../js/cronus/store/index.js\");\n/* harmony import */ var cronus_env__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! cronus/env */ \"../js/cronus/env/index.js\");\n/* harmony import */ var shared_store_selectors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! shared/store/selectors */ \"../js/shared/store/selectors/index.js\");\n/* harmony import */ var cronus_store_selectors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! cronus/store/selectors */ \"../js/cronus/store/selectors/index.js\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\nvar debugLogger = (0,shared_lib_logger__WEBPACK_IMPORTED_MODULE_2__.createLoggerForModule)('cronus/tracking/watcher');\nvar messagesSentAt = {};\nvar unsubscribe = {};\nvar isPlaying = false;\nvar RELOAD_TIME = 'reloadTime';\nvar timeouts = {\n  progress: undefined,\n  buffer: undefined,\n  playing: undefined,\n  heartbeat: undefined,\n  streamModule: undefined\n};\nvar tracking = {\n  PAYLOADS: {},\n  TYPES: {},\n  send: function send() {},\n  isEnabled: function isEnabled() {\n    return true;\n  }\n};\nvar delays = {\n  buffer: 10,\n  // sec after it sends buffer empty report\n  progress: 7,\n  // progress stopped\n  playing: 15,\n  // playing not started\n  logsend: 29,\n  // resend same log\n  heartbeat: 30,\n  // send a ping to logger\n  reload: 30,\n  // if load same cid in init\n  unrecoveredStalled: 5,\n  // atlas detected a stalled error\n  streamModule: 5 // flot stream module\n\n};\n\nfunction safeSend(type, payload) {\n  if (!tracking.isEnabled()) {\n    return;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(messagesSentAt, type)) {\n    messagesSentAt[type] = 0;\n  }\n\n  var time = Date.now();\n\n  if (time - messagesSentAt[type] < delays.logsend * 1000) {\n    return;\n  }\n\n  messagesSentAt[type] = time;\n  tracking.send(type, payload);\n}\n\nfunction startHeartBeat() {\n  var _video$height, _video$width;\n\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.getState();\n\n  var _getVideoSize = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_5__.getVideoSize)(state),\n      video = _getVideoSize.video;\n\n  var currentProvider = (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_6__.getCurrentProvider)(state);\n  var heartbeatPayload = {\n    position: -1,\n    provider: (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(currentProvider, 'url'),\n    videoHeight: (_video$height = video === null || video === void 0 ? void 0 : video.height) !== null && _video$height !== void 0 ? _video$height : 0,\n    videoWidth: (_video$width = video === null || video === void 0 ? void 0 : video.width) !== null && _video$width !== void 0 ? _video$width : 0\n  };\n  safeSend(tracking.TYPES.heartbeat, heartbeatPayload);\n  timeouts.heartbeat = setTimeout(startHeartBeat, delays.heartbeat * 1000);\n}\n\nfunction checkReload() {\n  var reload = shared_lib_storage__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(RELOAD_TIME);\n  var isReloadWithinDelay = reload && Date.now() - reload.time < delays.reload * 1000;\n\n  if (isReloadWithinDelay && reload.mid === cronus_env__WEBPACK_IMPORTED_MODULE_4__[\"default\"].getMid()) {\n    safeSend(tracking.TYPES.reload);\n  }\n\n  window.addEventListener('beforeunload', onBeforeUnload);\n}\n\nfunction onContentAccessUpdate() {\n  clearStreamModuleTimeout();\n}\n\nfunction onEmptyModuleUpdate(_ref) {\n  var data = _ref.data;\n  var lastModuleInfo = data[data.length - 1];\n\n  if (lastModuleInfo && lastModuleInfo.isEmpty) {\n    startStreamModuleTimeout(tracking.TYPES.emptyStreamModule);\n    return;\n  }\n\n  clearStreamModuleTimeout();\n}\n\nfunction onTimeupdateChange() {\n  if (!isPlaying) {\n    return;\n  }\n\n  timeouts.buffer = clearTimeout(timeouts.buffer);\n  timeouts.progress = clearTimeout(timeouts.progress);\n  timeouts.playing = clearTimeout(timeouts.playing);\n  timeouts.progress = setTimeout(function () {\n    safeSend(tracking.TYPES.progressStalled, {\n      timeout: delays.progress * 1000\n    });\n    debugLogger.error('progress stalled');\n  }, delays.progress * 1000);\n}\n\nfunction onPlayingChange(playing) {\n  isPlaying = playing;\n\n  if (!playing) {\n    timeouts.progress = clearTimeout(timeouts.progress);\n    timeouts.buffer = clearTimeout(timeouts.buffer);\n    timeouts.playing = clearTimeout(timeouts.playing);\n    return;\n  }\n\n  timeouts.playing = setTimeout(function () {\n    safeSend(tracking.TYPES.playbackHasNotBegun, {\n      timeout: delays.playing * 1000\n    });\n    debugLogger.fatal('playback has not begun');\n  }, delays.playing * 1000);\n}\n\nfunction onBufferingStarted() {\n  timeouts.buffer = setTimeout(function () {\n    safeSend(tracking.TYPES.longBuffering, {\n      timeout: delays.buffer * 1000\n    });\n    debugLogger.fatal('long buffer empty');\n  }, delays.buffer * 1000);\n}\n\nfunction onUnload() {\n  tracking.send(tracking.TYPES.playerClosed);\n}\n\nfunction onBeforeUnload() {\n  shared_lib_storage__WEBPACK_IMPORTED_MODULE_1__[\"default\"].set(RELOAD_TIME, {\n    time: Date.now(),\n    mid: cronus_env__WEBPACK_IMPORTED_MODULE_4__[\"default\"].getMid()\n  });\n}\n\nfunction startStreamModuleTimeout(type) {\n  if (timeouts.streamModule !== undefined) {\n    clearStreamModuleTimeout();\n  }\n\n  timeouts.streamModule = setTimeout(function () {\n    safeSend(type);\n    debugLogger.fatal(type);\n  }, delays.streamModule * 1000);\n}\n\nfunction clearStreamModuleTimeout() {\n  timeouts.streamModule = clearTimeout(timeouts.streamModule);\n}\n\nfunction init(_ref2) {\n  var send = _ref2.send,\n      PAYLOADS = _ref2.PAYLOADS,\n      TYPES = _ref2.TYPES,\n      isEnabled = _ref2.isEnabled;\n\n  if (!isEnabled) {\n    reset();\n  }\n\n  tracking.PAYLOADS = PAYLOADS;\n  tracking.TYPES = TYPES;\n  tracking.send = send;\n  tracking.isEnabled = isEnabled;\n  safeSend(tracking.TYPES.errorLoggerLoaded);\n  checkReload();\n  startHeartBeat();\n  startStreamModuleTimeout(tracking.TYPES.zeroStreamModule);\n  unsubscribe.contentAccess = cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.subscribe('provider.contentAccess', onContentAccessUpdate);\n  unsubscribe.emptyModule = cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.subscribe('debug.EMPTY_MODULE', onEmptyModuleUpdate);\n  unsubscribe.timeUpdate = cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.subscribe('playback.currentTime', onTimeupdateChange);\n  unsubscribe.playing = cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.subscribe('playback.playing', onPlayingChange);\n  unsubscribe.bufferStart = cronus_store__WEBPACK_IMPORTED_MODULE_3__.wrappedStore.subscribe('tracking.bufferingStartTime', onBufferingStarted);\n  window.addEventListener('unload', onUnload);\n}\n\nfunction reset() {\n  Object.values(unsubscribe).forEach(function (cb) {\n    return cb();\n  });\n  Object.entries(timeouts).forEach(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        key = _ref4[0],\n        timeoutId = _ref4[1];\n\n    timeouts[key] = clearTimeout(timeoutId);\n  });\n  window.removeEventListener('beforeunload', onBeforeUnload);\n  window.removeEventListener('unload', onUnload);\n  messagesSentAt = {};\n  unsubscribe = {};\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  init: init,\n  reset: reset\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../js/cronus/tracking/watcher.js\n");

/***/ }),

/***/ "../js/cronus/ums/ModuleOrganizer.js":
/*!*******************************************!*\
  !*** ../js/cronus/ums/ModuleOrganizer.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _default; }\n/* harmony export */ });\n/* harmony import */ var shared_lib_util_streamModule__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/lib/util/streamModule */ \"../js/shared/lib/util/streamModule.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n\n/**\n * This module waits for the \"stream\" and \"meta\" module and ensures that\n * they arrive in order.\n */\n\nvar _default = /*#__PURE__*/function () {\n  function _default() {\n    _classCallCheck(this, _default);\n\n    this.queue = {\n      meta: null,\n      stream: null\n    };\n    this.done = false;\n  }\n  /**\n   * @param {object} - e.g. { \"stream\": { ... }, \"thumbnail\": { ... } }\n   * @returns {object}\n   */\n\n\n  _createClass(_default, [{\n    key: \"process\",\n    value: function process(modules) {\n      if (this.done) {\n        return modules;\n      }\n\n      var meta = modules.meta,\n          stream = modules.stream;\n      var hasMeta = !!meta;\n      var hasStream = stream && !(0,shared_lib_util_streamModule__WEBPACK_IMPORTED_MODULE_0__.isStreamFormatEmpty)(stream);\n\n      if (hasMeta && hasStream) {\n        this.done = true;\n        return modules;\n      }\n\n      if (hasMeta && !hasStream) {\n        if (this.queue.stream) {\n          this.done = true;\n          return _objectSpread(_objectSpread({}, modules), {}, {\n            stream: this.queue.stream\n          });\n        }\n\n        this.queue.meta = meta;\n        return _objectSpread(_objectSpread({}, modules), {}, {\n          meta: undefined\n        });\n      }\n\n      if (!hasMeta && hasStream) {\n        if (this.queue.meta) {\n          this.done = true;\n          return _objectSpread(_objectSpread({}, modules), {}, {\n            meta: this.queue.meta\n          });\n        }\n\n        this.queue.stream = stream;\n        return _objectSpread(_objectSpread({}, modules), {}, {\n          stream: undefined\n        });\n      }\n\n      return modules;\n    }\n  }]);\n\n  return _default;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvY3JvbnVzL3Vtcy9Nb2R1bGVPcmdhbml6ZXIuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFRSxzQkFBYztBQUFBOztBQUNaLFNBQUtDLEtBQUwsR0FBYTtBQUNYQyxNQUFBQSxJQUFJLEVBQUUsSUFESztBQUVYQyxNQUFBQSxNQUFNLEVBQUU7QUFGRyxLQUFiO0FBSUEsU0FBS0MsSUFBTCxHQUFZLEtBQVo7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBOzs7OztXQUNFLGlCQUFRQyxPQUFSLEVBQWlCO0FBQ2YsVUFBSSxLQUFLRCxJQUFULEVBQWU7QUFDYixlQUFPQyxPQUFQO0FBQ0Q7O0FBRUQsVUFBUUgsSUFBUixHQUF5QkcsT0FBekIsQ0FBUUgsSUFBUjtBQUFBLFVBQWNDLE1BQWQsR0FBeUJFLE9BQXpCLENBQWNGLE1BQWQ7QUFDQSxVQUFNRyxPQUFPLEdBQUcsQ0FBQyxDQUFDSixJQUFsQjtBQUNBLFVBQU1LLFNBQVMsR0FBR0osTUFBTSxJQUFJLENBQUNILGlGQUFtQixDQUFDRyxNQUFELENBQWhEOztBQUNBLFVBQUlHLE9BQU8sSUFBSUMsU0FBZixFQUEwQjtBQUN4QixhQUFLSCxJQUFMLEdBQVksSUFBWjtBQUNBLGVBQU9DLE9BQVA7QUFDRDs7QUFFRCxVQUFJQyxPQUFPLElBQUksQ0FBQ0MsU0FBaEIsRUFBMkI7QUFDekIsWUFBSSxLQUFLTixLQUFMLENBQVdFLE1BQWYsRUFBdUI7QUFDckIsZUFBS0MsSUFBTCxHQUFZLElBQVo7QUFDQSxpREFBWUMsT0FBWjtBQUFxQkYsWUFBQUEsTUFBTSxFQUFFLEtBQUtGLEtBQUwsQ0FBV0U7QUFBeEM7QUFDRDs7QUFFRCxhQUFLRixLQUFMLENBQVdDLElBQVgsR0FBa0JBLElBQWxCO0FBQ0EsK0NBQVlHLE9BQVo7QUFBcUJILFVBQUFBLElBQUksRUFBRU07QUFBM0I7QUFDRDs7QUFFRCxVQUFJLENBQUNGLE9BQUQsSUFBWUMsU0FBaEIsRUFBMkI7QUFDekIsWUFBSSxLQUFLTixLQUFMLENBQVdDLElBQWYsRUFBcUI7QUFDbkIsZUFBS0UsSUFBTCxHQUFZLElBQVo7QUFDQSxpREFBWUMsT0FBWjtBQUFxQkgsWUFBQUEsSUFBSSxFQUFFLEtBQUtELEtBQUwsQ0FBV0M7QUFBdEM7QUFDRDs7QUFFRCxhQUFLRCxLQUFMLENBQVdFLE1BQVgsR0FBb0JBLE1BQXBCO0FBQ0EsK0NBQVlFLE9BQVo7QUFBcUJGLFVBQUFBLE1BQU0sRUFBRUs7QUFBN0I7QUFDRDs7QUFFRCxhQUFPSCxPQUFQO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy91bXMvTW9kdWxlT3JnYW5pemVyLmpzP2YzMjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNTdHJlYW1Gb3JtYXRFbXB0eSB9IGZyb20gJ3NoYXJlZC9saWIvdXRpbC9zdHJlYW1Nb2R1bGUnO1xuXG4vKipcbiAqIFRoaXMgbW9kdWxlIHdhaXRzIGZvciB0aGUgXCJzdHJlYW1cIiBhbmQgXCJtZXRhXCIgbW9kdWxlIGFuZCBlbnN1cmVzIHRoYXRcbiAqIHRoZXkgYXJyaXZlIGluIG9yZGVyLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucXVldWUgPSB7XG4gICAgICBtZXRhOiBudWxsLFxuICAgICAgc3RyZWFtOiBudWxsLFxuICAgIH07XG4gICAgdGhpcy5kb25lID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IC0gZS5nLiB7IFwic3RyZWFtXCI6IHsgLi4uIH0sIFwidGh1bWJuYWlsXCI6IHsgLi4uIH0gfVxuICAgKiBAcmV0dXJucyB7b2JqZWN0fVxuICAgKi9cbiAgcHJvY2Vzcyhtb2R1bGVzKSB7XG4gICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgcmV0dXJuIG1vZHVsZXM7XG4gICAgfVxuXG4gICAgY29uc3QgeyBtZXRhLCBzdHJlYW0gfSA9IG1vZHVsZXM7XG4gICAgY29uc3QgaGFzTWV0YSA9ICEhbWV0YTtcbiAgICBjb25zdCBoYXNTdHJlYW0gPSBzdHJlYW0gJiYgIWlzU3RyZWFtRm9ybWF0RW1wdHkoc3RyZWFtKTtcbiAgICBpZiAoaGFzTWV0YSAmJiBoYXNTdHJlYW0pIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbW9kdWxlcztcbiAgICB9XG5cbiAgICBpZiAoaGFzTWV0YSAmJiAhaGFzU3RyZWFtKSB7XG4gICAgICBpZiAodGhpcy5xdWV1ZS5zdHJlYW0pIHtcbiAgICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHsgLi4ubW9kdWxlcywgc3RyZWFtOiB0aGlzLnF1ZXVlLnN0cmVhbSB9O1xuICAgICAgfVxuXG4gICAgICB0aGlzLnF1ZXVlLm1ldGEgPSBtZXRhO1xuICAgICAgcmV0dXJuIHsgLi4ubW9kdWxlcywgbWV0YTogdW5kZWZpbmVkIH07XG4gICAgfVxuXG4gICAgaWYgKCFoYXNNZXRhICYmIGhhc1N0cmVhbSkge1xuICAgICAgaWYgKHRoaXMucXVldWUubWV0YSkge1xuICAgICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgICAgICByZXR1cm4geyAuLi5tb2R1bGVzLCBtZXRhOiB0aGlzLnF1ZXVlLm1ldGEgfTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5xdWV1ZS5zdHJlYW0gPSBzdHJlYW07XG4gICAgICByZXR1cm4geyAuLi5tb2R1bGVzLCBzdHJlYW06IHVuZGVmaW5lZCB9O1xuICAgIH1cblxuICAgIHJldHVybiBtb2R1bGVzO1xuICB9XG59XG4iXSwibmFtZXMiOlsiaXNTdHJlYW1Gb3JtYXRFbXB0eSIsInF1ZXVlIiwibWV0YSIsInN0cmVhbSIsImRvbmUiLCJtb2R1bGVzIiwiaGFzTWV0YSIsImhhc1N0cmVhbSIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../js/cronus/ums/ModuleOrganizer.js\n");

/***/ }),

/***/ "../js/cronus/ums/debug.js":
/*!*********************************!*\
  !*** ../js/cronus/ums/debug.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"init\": function() { return /* binding */ init; },\n/* harmony export */   \"onUmsLog\": function() { return /* binding */ onUmsLog; },\n/* harmony export */   \"reset\": function() { return /* binding */ reset; }\n/* harmony export */ });\n/* harmony import */ var player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! player-utils/object/get */ \"../node_modules/player-utils/object/get.js\");\n/* harmony import */ var cronus_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/store */ \"../js/cronus/store/index.js\");\n/* harmony import */ var shared_store_actions_debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/store/actions/debug */ \"../js/shared/store/actions/debug.js\");\n/* harmony import */ var shared_lib_util_streamModule__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! shared/lib/util/streamModule */ \"../js/shared/lib/util/streamModule.js\");\n/* harmony import */ var shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! shared/ui/components/DebugOverlayConsts */ \"../js/shared/ui/components/DebugOverlayConsts.js\");\n/* harmony import */ var shared_lib_logger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! shared/lib/logger */ \"../js/shared/lib/logger/index.js\");\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\nvar WS_CLOSE_EVENTS = {\n  CLOSE_NORMAL: 1000,\n  CLOSE_GOING_AWAY: 1001,\n  CLOSE_PROTOCOL_ERROR: 1002,\n  CLOSE_UNSUPPORTED: 1003,\n  CLOSE_NO_STATUS: 1005,\n  CLOSE_ABNORMAL: 1006,\n  CLOSE_INCONSISTENT_DATA_RECEIVED: 1007,\n  CLOSE_POLICY_VIOLATE: 1008,\n  CLOSE_TOO_LARGE: 1009,\n  CLOSE_MISSING_EXTENSION: 1010,\n  CLOSE_UNEXPECTED_CONDITION: 1011,\n  CLOSE_FAILED_TLS_HANDSHAKE: 1015\n};\nvar initTimeTreshold = 5000;\nvar maxAllowedRejectsNum = 3;\nvar firstOpenedEventDate = null;\nvar firstMetaModuleEventDate = null;\nvar firstStreamModuleEventDate = null;\nvar timingMeasured = false;\nvar initTimeout = null;\nvar initStartedAt = null;\nvar rejectsCounterAll = 0;\nvar checkedHostnames = [];\nvar debugLogger = (0,shared_lib_logger__WEBPACK_IMPORTED_MODULE_5__.createLoggerForModule)('ums/debug');\n\nfunction checkConnectionInit(log) {\n  var _log = _slicedToArray(log, 2),\n\n  /* date */\n  msg = _log[1];\n\n  var currentTime = Date.now();\n\n  if (typeof msg === 'string' && msg.trim() === 'opened') {\n    if (currentTime - initStartedAt < initTimeTreshold) {\n      clearTimeout(initTimeout);\n    }\n\n    cronus_store__WEBPACK_IMPORTED_MODULE_1__.wrappedStore.dispatch((0,shared_store_actions_debug__WEBPACK_IMPORTED_MODULE_2__.addFlotInitDiagnostics)({\n      inited: true\n    }));\n  }\n}\n\nfunction checkTiming(log) {\n  var _log2 = _slicedToArray(log, 3),\n      date = _log2[0],\n      msg = _log2[1],\n      data = _log2[2];\n\n  if (typeof msg === 'string' && msg.trim() === 'opening' && !firstOpenedEventDate) {\n    firstOpenedEventDate = date;\n  }\n\n  if (typeof msg === 'string' && msg.includes('message')) {\n    var modules = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(data, '1.0', {});\n\n    if (!firstMetaModuleEventDate && modules.meta) {\n      firstMetaModuleEventDate = date;\n    }\n\n    if (!firstStreamModuleEventDate && modules.stream && !(0,shared_lib_util_streamModule__WEBPACK_IMPORTED_MODULE_3__.isStreamFormatEmpty)(modules.stream)) {\n      firstStreamModuleEventDate = date;\n    }\n  }\n\n  if (!timingMeasured && firstMetaModuleEventDate && firstStreamModuleEventDate && firstOpenedEventDate) {\n    timingMeasured = true;\n    var lastEvent = Math.max(firstMetaModuleEventDate, firstStreamModuleEventDate);\n    var timeToStartInMs = lastEvent - firstOpenedEventDate;\n    cronus_store__WEBPACK_IMPORTED_MODULE_1__.wrappedStore.dispatch((0,shared_store_actions_debug__WEBPACK_IMPORTED_MODULE_2__.addFlotTimingDiagnostics)({\n      timeToStartInMs: timeToStartInMs\n    }));\n  }\n}\n\nfunction checkDisconnects(log) {\n  var _log3 = _slicedToArray(log, 3),\n\n  /* date */\n  msg = _log3[1],\n      data = _log3[2];\n\n  if (typeof msg === 'string' && msg.trim() === 'closed' && data) {\n    var _data = _slicedToArray(data, 2),\n        eventName = _data[0],\n        message = _data[1];\n\n    var reason = \"\".concat(WS_CLOSE_EVENTS[eventName], \" \").concat(eventName);\n\n    if (message) {\n      reason = \"\".concat(reason, \" \").concat(message);\n    }\n\n    cronus_store__WEBPACK_IMPORTED_MODULE_1__.wrappedStore.dispatch((0,shared_store_actions_debug__WEBPACK_IMPORTED_MODULE_2__.addFlotDisconnectError)({\n      level: shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_4__.STATUS.WARNING,\n      timeStamp: Date.now(),\n      msg: reason\n    }));\n  }\n}\n\nfunction checkRejects(log) {\n  var _log4 = _slicedToArray(log, 3),\n\n  /* date */\n  msg = _log4[1],\n      data = _log4[2];\n\n  if (typeof msg === 'string' && msg.trim() === 'message' && (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(data, 'cmd') === 'reject') {\n    rejectsCounterAll += 1;\n    var reason = data && data.args ? Object.keys(data.args[0])[0] : 'unknown';\n\n    if (reason.trim() === 'cluster') {\n      cronus_store__WEBPACK_IMPORTED_MODULE_1__.wrappedStore.dispatch((0,shared_store_actions_debug__WEBPACK_IMPORTED_MODULE_2__.addFlotRejectError)({\n        level: shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_4__.STATUS.ERROR,\n        timeStamp: Date.now(),\n        msg: reason\n      }));\n    }\n\n    if (rejectsCounterAll > maxAllowedRejectsNum) {\n      cronus_store__WEBPACK_IMPORTED_MODULE_1__.wrappedStore.dispatch((0,shared_store_actions_debug__WEBPACK_IMPORTED_MODULE_2__.addFlotRejectError)({\n        level: shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_4__.STATUS.ERROR,\n        timeStamp: Date.now(),\n        msg: reason\n      }));\n    }\n  }\n}\n\nfunction checkEmptyModules(log) {\n  var _log5 = _slicedToArray(log, 3),\n      date = _log5[0],\n      msg = _log5[1],\n      data = _log5[2];\n\n  if (typeof msg === 'string' && msg.includes('message')) {\n    var modules = (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(data, '1.0', {});\n\n    if (modules.stream) {\n      var isEmpty = (0,shared_lib_util_streamModule__WEBPACK_IMPORTED_MODULE_3__.isStreamFormatEmpty)(modules.stream);\n      cronus_store__WEBPACK_IMPORTED_MODULE_1__.wrappedStore.dispatch((0,shared_store_actions_debug__WEBPACK_IMPORTED_MODULE_2__.addFlotEmptyStreamModuleError)({\n        level: shared_ui_components_DebugOverlayConsts__WEBPACK_IMPORTED_MODULE_4__.STATUS.WARNING,\n        timeStamp: date,\n        msg: isEmpty ? 'Stream module empty' : 'Stream module found',\n        isEmpty: isEmpty\n      }));\n    }\n  }\n}\n/**\n * @param {string} url\n */\n\n\nfunction downloadConnectionInfo(url) {\n  var _URL = new URL(url),\n      protocol = _URL.protocol,\n      hostname = _URL.hostname;\n\n  var isLongpoll = /https?/.test(protocol);\n\n  if (isLongpoll) {\n    return;\n  }\n\n  checkedHostnames = checkedHostnames.filter(function (_ref) {\n    var checkedAt = _ref.checkedAt;\n    return Math.abs(Date.now() - checkedAt) < 60 * 1000;\n  });\n\n  if (checkedHostnames.some(function (v) {\n    return v.hostname === hostname;\n  })) {\n    return;\n  }\n\n  checkedHostnames.push({\n    hostname: hostname,\n    checkedAt: Date.now()\n  });\n  debugLogger.debug('Download connection info', {\n    hostname: hostname\n  });\n  var httpProtocol = /wss/.test(protocol) ? 'https:' : 'http:';\n  var connectionCheckUrl = \"\".concat(httpProtocol, \"//\").concat(hostname, \"/connectioncheck\");\n  fetch(connectionCheckUrl).then(function (response) {\n    return response.json();\n  }).then(function (info) {\n    return debugLogger.debug('Connection info received', {\n      hostname: hostname,\n      info: info\n    });\n  }).catch(function (e) {\n    return debugLogger.error('Connection info failed', {\n      hostname: hostname,\n      error: e.message\n    });\n  });\n}\n\nfunction onUmsLog(mediaId, _ref2) {\n  var _ref3 = _toArray(_ref2),\n      date\n  /* module */\n  = _ref3[0],\n      data = _ref3.slice(2);\n\n  if ((0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(data, '0') === 'url') {\n    downloadConnectionInfo(data[1]);\n  }\n\n  debugLogger.debug(\"ums.log \".concat(mediaId), data);\n  var log = [date].concat(_toConsumableArray(data));\n  checkConnectionInit(log);\n  checkTiming(log);\n  checkDisconnects(log);\n  checkRejects(log);\n  checkEmptyModules(log);\n}\nfunction init() {\n  reset();\n  initStartedAt = Date.now();\n  initTimeout = setTimeout(function () {\n    cronus_store__WEBPACK_IMPORTED_MODULE_1__.wrappedStore.dispatch((0,shared_store_actions_debug__WEBPACK_IMPORTED_MODULE_2__.addFlotInitDiagnostics)({\n      inited: false\n    }));\n  }, initTimeTreshold);\n}\nfunction reset() {\n  firstOpenedEventDate = null;\n  firstMetaModuleEventDate = null;\n  firstStreamModuleEventDate = null;\n  timingMeasured = false;\n\n  if (initTimeout !== null) {\n    clearTimeout(initTimeout);\n  }\n\n  initTimeout = null;\n  initStartedAt = null;\n  rejectsCounterAll = 0;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../js/cronus/ums/debug.js\n");

/***/ }),

/***/ "../js/cronus/ums/index.js":
/*!*********************************!*\
  !*** ../js/cronus/ums/index.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var ustream_ums__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ustream-ums */ \"../../ustream-ums/dist/ustream-ums.amd.js\");\n/* harmony import */ var ustream_ums__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ustream_ums__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! player-utils/object/get */ \"../node_modules/player-utils/object/get.js\");\n/* harmony import */ var cronus_ums_modules__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/ums/modules */ \"../js/cronus/ums/modules.js\");\n/* harmony import */ var cronus_reporting__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cronus/reporting */ \"../js/cronus/reporting/index.js\");\n/* harmony import */ var cronus_ums_debug__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! cronus/ums/debug */ \"../js/cronus/ums/debug.js\");\n/* harmony import */ var cronus_config_initial__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cronus/config/initial */ \"../js/cronus/config/initial.js\");\n/* harmony import */ var shared_lib_logger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! shared/lib/logger */ \"../js/shared/lib/logger/index.js\");\n/* harmony import */ var shared_data_domainMapping__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! shared/data/domainMapping */ \"../js/shared/data/domainMapping.js\");\n/* harmony import */ var shared_consts__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! shared/consts */ \"../js/shared/consts.js\");\n/* harmony import */ var shared_data_referrer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! shared/data/referrer */ \"../js/shared/data/referrer.js\");\n/* harmony import */ var cronus_store_selectors__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! cronus/store/selectors */ \"../js/cronus/store/selectors/index.js\");\n/* harmony import */ var shared_store_selectors__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! shared/store/selectors */ \"../js/shared/store/selectors/index.js\");\n/* harmony import */ var cronus_logic_lock_lockManager__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! cronus/logic/lock/lockManager */ \"../js/cronus/logic/lock/lockManager.js\");\n/* harmony import */ var cronus_store__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! cronus/store */ \"../js/cronus/store/index.js\");\n/* harmony import */ var shared_store_actions_content__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! shared/store/actions/content */ \"../js/shared/store/actions/content.js\");\n/* harmony import */ var shared_store_actions_provider__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! shared/store/actions/provider */ \"../js/shared/store/actions/provider.js\");\n/* harmony import */ var cronus_store_actions_tracking__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! cronus/store/actions/tracking */ \"../js/cronus/store/actions/tracking.js\");\n/* harmony import */ var cronus_logic_sdcdnHandler__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! cronus/logic/sdcdnHandler */ \"../js/cronus/logic/sdcdnHandler.js\");\n/* harmony import */ var cronus_tracking__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! cronus/tracking */ \"../js/cronus/tracking/index.js\");\n/* harmony import */ var cronus_ums_ModuleOrganizer__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! cronus/ums/ModuleOrganizer */ \"../js/cronus/ums/ModuleOrganizer.js\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar umsInstances = {};\nvar organizers = {};\nvar debugLogger = (0,shared_lib_logger__WEBPACK_IMPORTED_MODULE_6__.createLoggerForModule)('logic/ums/umsHandler');\n\nfunction onEcdnStat(data) {\n  switch (data.type) {\n    case 'overlay':\n      cronus_store__WEBPACK_IMPORTED_MODULE_13__.wrappedStore.dispatch((0,shared_store_actions_provider__WEBPACK_IMPORTED_MODULE_15__.setProvidersStats)(data.data));\n      break;\n\n    case 'report':\n      cronus_reporting__WEBPACK_IMPORTED_MODULE_3__[\"default\"].aggregate(cronus_reporting__WEBPACK_IMPORTED_MODULE_3__[\"default\"].TYPES.ecdnTest, {\n        data: data.data\n      });\n      break;\n\n    default:\n      debugLogger.debug('Unexpected command from sdcdn stats reporting', data.type);\n  }\n}\n\nfunction onComplete(mediaId, data) {\n  var organizer = organizers[mediaId];\n\n  if (!organizer) {\n    return;\n  }\n\n  var organizedModules = organizer.process(data);\n  cronus_ums_modules__WEBPACK_IMPORTED_MODULE_2__[\"default\"].update(mediaId, organizedModules);\n}\n\nfunction onUpdate(mediaId, args) {\n  var module = args[0];\n  cronus_logic_sdcdnHandler__WEBPACK_IMPORTED_MODULE_17__[\"default\"].onStat = onEcdnStat;\n  cronus_logic_sdcdnHandler__WEBPACK_IMPORTED_MODULE_17__[\"default\"].onComplete = onComplete;\n  cronus_logic_sdcdnHandler__WEBPACK_IMPORTED_MODULE_17__[\"default\"].update(mediaId, module);\n}\n\nfunction getInstance(mediaId) {\n  return umsInstances[mediaId];\n}\n\nfunction getInfo(mediaId) {\n  var instance = getInstance(mediaId);\n\n  if (!instance) {\n    return {};\n  }\n\n  return instance.internals || {};\n}\n\nfunction getUmsConnectionParams(mediaId) {\n  var _mediaId$split = mediaId.split('.'),\n      _mediaId$split2 = _slicedToArray(_mediaId$split, 2),\n      app = _mediaId$split2[0],\n      id = _mediaId$split2[1];\n\n  var longpoll = (0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_5__.getInitialConfig)('useLongpoll');\n  var sessionId = (0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_5__.getInitialConfig)('sessionId');\n  var flot = (0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_5__.getInitialConfig)('flot');\n  var bdtools = (0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_5__.getInitialConfig)('bdtools');\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_13__.wrappedStore.getState();\n  var mediaType = state.content.mediaType;\n  var umsParams = {\n    app: app,\n    id: id,\n    referrer: shared_data_referrer__WEBPACK_IMPORTED_MODULE_9__[\"default\"],\n    connectParams: {\n      appId: 7,\n      appVersion: 1\n    },\n    longpoll: longpoll,\n    sessionId: sessionId,\n    ignoreTrim: true,\n    flotAddress: flot ? decodeURI(flot) : false,\n    bdtools: bdtools,\n    buildNumber: shared_consts__WEBPACK_IMPORTED_MODULE_8__[\"default\"].BUILD_NUMBER,\n    clusterHost: shared_data_domainMapping__WEBPACK_IMPORTED_MODULE_7__[\"default\"].config.ums,\n    isOffairRecorded: mediaType === shared_store_actions_content__WEBPACK_IMPORTED_MODULE_14__.MEDIA_TYPES.offairVideo,\n    password: (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_11__.getPassword)(state)\n  };\n  var viewerAuthToken = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_11__.getViewerAuthToken)(state);\n\n  if (viewerAuthToken) {\n    umsParams.viewerAuthToken = viewerAuthToken;\n  } else {\n    umsParams.hash = (0,shared_store_selectors__WEBPACK_IMPORTED_MODULE_11__.getHash)(state);\n  }\n\n  debugLogger.debug(\"create ums connection. mid: \".concat(mediaId), {\n    umsParams: umsParams\n  });\n  return umsParams;\n}\n\nfunction onUmsReject(mediaId, reason) {\n  debugLogger.debug('ums reject', {\n    reason: reason\n  });\n  cronus_logic_lock_lockManager__WEBPACK_IMPORTED_MODULE_12__.handleReject((0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_10__.getMediaId)(cronus_store__WEBPACK_IMPORTED_MODULE_13__.wrappedStore.getState()), reason);\n  cronus_store__WEBPACK_IMPORTED_MODULE_13__.wrappedStore.dispatch((0,cronus_store_actions_tracking__WEBPACK_IMPORTED_MODULE_16__.setUmsConnectionStartTime)(undefined));\n  cronus_store__WEBPACK_IMPORTED_MODULE_13__.wrappedStore.dispatch((0,cronus_store_actions_tracking__WEBPACK_IMPORTED_MODULE_16__.setUmsConnectionConnectedTime)(undefined));\n}\n\nfunction onUmsOpen(mediaId) {\n  cronus_reporting__WEBPACK_IMPORTED_MODULE_3__[\"default\"].onUmsOpen(mediaId);\n  var state = cronus_store__WEBPACK_IMPORTED_MODULE_13__.wrappedStore.getState();\n  var now = performance.now();\n  var timeSpent = now - (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_10__.getUmsConnectionStartTime)(state);\n  cronus_tracking__WEBPACK_IMPORTED_MODULE_18__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_18__[\"default\"].TYPES.umsConnectionCompleted, {\n    autoplay: !!(0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_5__.getInitialConfig)('autoplay'),\n    timeSpentFromInit: now - (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_10__.getInitialLoadingTime)(state),\n    timeSpent: timeSpent\n  });\n  cronus_store__WEBPACK_IMPORTED_MODULE_13__.wrappedStore.dispatch((0,cronus_store_actions_tracking__WEBPACK_IMPORTED_MODULE_16__.setUmsConnectionConnectedTime)(now));\n  cronus_reporting__WEBPACK_IMPORTED_MODULE_3__[\"default\"].aggregate(cronus_reporting__WEBPACK_IMPORTED_MODULE_3__[\"default\"].TYPES.umsConnected, {\n    timeSpent: timeSpent\n  });\n  cronus_reporting__WEBPACK_IMPORTED_MODULE_3__[\"default\"].aggregate(cronus_reporting__WEBPACK_IMPORTED_MODULE_3__[\"default\"].TYPES.branchName, {\n    branchName: (0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_5__.getInitialConfig)('branchName')\n  });\n}\n\nfunction onUmsClose(event) {\n  var reason = {\n    code: (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(event, 'closeEvent.code', -1),\n    closeReason: (0,player_utils_object_get__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(event, 'closeEvent.reason', -1)\n  };\n  cronus_tracking__WEBPACK_IMPORTED_MODULE_18__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_18__[\"default\"].TYPES.umsConnectionLost, {\n    reason: reason\n  });\n}\n\nfunction destroy(mediaId) {\n  var instance = umsInstances[mediaId];\n\n  if (instance) {\n    instance.destroy();\n    delete umsInstances[mediaId];\n    delete organizers[mediaId];\n    cronus_ums_debug__WEBPACK_IMPORTED_MODULE_4__.reset();\n  }\n}\n\nfunction destroyAll() {\n  Object.keys(umsInstances).forEach(function (umsInstanceMediaId) {\n    return destroy(umsInstanceMediaId);\n  });\n  umsInstances = {};\n  organizers = {};\n}\n\nfunction destroyAllOthers(mediaId) {\n  Object.keys(umsInstances).filter(function (umsInstanceMediaId) {\n    return umsInstanceMediaId !== mediaId;\n  }).forEach(function (umsInstanceMediaId) {\n    return destroy(umsInstanceMediaId);\n  });\n}\n\nfunction init(mediaId) {\n  if (umsInstances[mediaId] !== undefined) {\n    return;\n  }\n\n  cronus_ums_debug__WEBPACK_IMPORTED_MODULE_4__.init();\n  var now = performance.now();\n  cronus_tracking__WEBPACK_IMPORTED_MODULE_18__[\"default\"].send(cronus_tracking__WEBPACK_IMPORTED_MODULE_18__[\"default\"].TYPES.umsConnectionStarted, {\n    timeSpentFromInit: now - (0,cronus_store_selectors__WEBPACK_IMPORTED_MODULE_10__.getInitialLoadingTime)(cronus_store__WEBPACK_IMPORTED_MODULE_13__.wrappedStore.getState()),\n    autoplay: !!(0,cronus_config_initial__WEBPACK_IMPORTED_MODULE_5__.getInitialConfig)('autoplay')\n  });\n  cronus_store__WEBPACK_IMPORTED_MODULE_13__.wrappedStore.dispatch((0,cronus_store_actions_tracking__WEBPACK_IMPORTED_MODULE_16__.setUmsConnectionStartTime)(now));\n  var umsParams = getUmsConnectionParams(mediaId);\n  var umsInstance = ustream_ums__WEBPACK_IMPORTED_MODULE_0___default()(umsParams);\n  umsInstance.on(umsInstance.event.OPEN, onUmsOpen.bind(null, mediaId));\n  umsInstance.on(umsInstance.event.CLOSE, onUmsClose);\n  umsInstance.on(umsInstance.event.REJECT, onUmsReject.bind(null, mediaId));\n  umsInstance.on(umsInstance.event.UPDATE, onUpdate.bind(null, mediaId));\n  umsInstance.on(umsInstance.event.LOG, cronus_ums_debug__WEBPACK_IMPORTED_MODULE_4__.onUmsLog.bind(null, mediaId));\n  umsInstance.connect();\n  umsInstances[mediaId] = umsInstance;\n  organizers[mediaId] = new cronus_ums_ModuleOrganizer__WEBPACK_IMPORTED_MODULE_19__[\"default\"]();\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  init: init,\n  getInstance: getInstance,\n  getInfo: getInfo,\n  destroy: destroy,\n  destroyAll: destroyAll,\n  destroyAllOthers: destroyAllOthers\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../js/cronus/ums/index.js\n");

/***/ }),

/***/ "../js/cronus/ums/modules.js":
/*!***********************************!*\
  !*** ../js/cronus/ums/modules.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var cronus_store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cronus/store */ \"../js/cronus/store/index.js\");\n/* harmony import */ var cronus_store_actions_umsModules__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cronus/store/actions/umsModules */ \"../js/cronus/store/actions/umsModules.js\");\n/* harmony import */ var cronus_embedApi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cronus/embedApi */ \"../js/cronus/embedApi/index.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n\n\n\nvar availableModules = ['advert', 'allTimeTotal', 'allViewers', 'broadcaster', 'caption', 'livecta', 'logo', 'meta', 'poll', 'qos', 'share', 'slides', 'stream', 'tcdn', 'thumbnail', 'viewers', 'caption'];\n/**\n * @param {*} module\n * @return {boolean}\n */\n\nfunction isEmptyModule(module) {\n  if (module === null) {\n    return true;\n  }\n\n  if (Array.isArray(module)) {\n    return module.length === 0;\n  }\n\n  if (_typeof(module) === 'object') {\n    return Object.keys(module).length === 0;\n  }\n\n  return false;\n}\n/**\n * @param {MediaId} mediaId\n * @param {Object} modules\n */\n\n\nfunction update(mediaId, modules) {\n  availableModules.forEach(function (moduleName) {\n    if (modules[moduleName] !== undefined) {\n      dispatchToStore({\n        name: moduleName,\n        module: modules[moduleName],\n        mediaId: mediaId\n      });\n    }\n  });\n}\n/**\n * @param {{ name: string, module: *, mediaId: MediaId }} args\n */\n\n\nfunction dispatchToStore(_ref) {\n  var name = _ref.name,\n      module = _ref.module,\n      mediaId = _ref.mediaId;\n\n  switch (name) {\n    case 'stream':\n      return cronus_store__WEBPACK_IMPORTED_MODULE_0__[\"default\"].dispatch((0,cronus_store_actions_umsModules__WEBPACK_IMPORTED_MODULE_1__.setStreamModule)(mediaId, module));\n\n    case 'meta':\n      cronus_embedApi__WEBPACK_IMPORTED_MODULE_2__.sendEvent(cronus_embedApi__WEBPACK_IMPORTED_MODULE_2__.EVENTS.meta, module);\n      return cronus_store__WEBPACK_IMPORTED_MODULE_0__[\"default\"].dispatch((0,cronus_store_actions_umsModules__WEBPACK_IMPORTED_MODULE_1__.setMetaModule)(mediaId, module));\n\n    case 'allTimeTotal':\n      return cronus_store__WEBPACK_IMPORTED_MODULE_0__[\"default\"].dispatch((0,cronus_store_actions_umsModules__WEBPACK_IMPORTED_MODULE_1__.setAllTimeTotalModule)(mediaId, module));\n\n    case 'allViewers':\n      return null;\n    // we don't use this module right now\n\n    case 'viewers':\n      return cronus_store__WEBPACK_IMPORTED_MODULE_0__[\"default\"].dispatch((0,cronus_store_actions_umsModules__WEBPACK_IMPORTED_MODULE_1__.setViewersModule)(mediaId, module));\n\n    case 'logo':\n      return cronus_store__WEBPACK_IMPORTED_MODULE_0__[\"default\"].dispatch((0,cronus_store_actions_umsModules__WEBPACK_IMPORTED_MODULE_1__.setLogoModule)(mediaId, module));\n\n    case 'share':\n      return cronus_store__WEBPACK_IMPORTED_MODULE_0__[\"default\"].dispatch((0,cronus_store_actions_umsModules__WEBPACK_IMPORTED_MODULE_1__.setShareModule)(mediaId, module));\n\n    case 'broadcaster':\n      return cronus_store__WEBPACK_IMPORTED_MODULE_0__[\"default\"].dispatch((0,cronus_store_actions_umsModules__WEBPACK_IMPORTED_MODULE_1__.setBroadcasterModule)(mediaId, module));\n\n    case 'livecta':\n      return cronus_store__WEBPACK_IMPORTED_MODULE_0__[\"default\"].dispatch((0,cronus_store_actions_umsModules__WEBPACK_IMPORTED_MODULE_1__.setLiveCTAModule)(mediaId, module));\n\n    case 'thumbnail':\n      return cronus_store__WEBPACK_IMPORTED_MODULE_0__[\"default\"].dispatch((0,cronus_store_actions_umsModules__WEBPACK_IMPORTED_MODULE_1__.setThumbnailModule)(mediaId, module));\n\n    case 'poll':\n      if (isEmptyModule(module)) {\n        return undefined;\n      }\n\n      return cronus_store__WEBPACK_IMPORTED_MODULE_0__[\"default\"].dispatch((0,cronus_store_actions_umsModules__WEBPACK_IMPORTED_MODULE_1__.setPollModule)(mediaId, module));\n\n    case 'caption':\n      return cronus_store__WEBPACK_IMPORTED_MODULE_0__[\"default\"].dispatch((0,cronus_store_actions_umsModules__WEBPACK_IMPORTED_MODULE_1__.setCaptionSearchModule)(mediaId, module));\n\n    case 'slides':\n      return cronus_store__WEBPACK_IMPORTED_MODULE_0__[\"default\"].dispatch((0,cronus_store_actions_umsModules__WEBPACK_IMPORTED_MODULE_1__.setSlidesModule)(mediaId, module));\n\n    default:\n      return null;\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  update: update\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFPaEIsNkRBQUEsQ0FBZVEsaUZBQWdCLENBQUNlLE9BQUQsRUFBVVAsTUFBVixDQUEvQixDQUFQOztBQUNGLFNBQUssV0FBTDtBQUNFLGFBQU9oQiw2REFBQSxDQUFlUyxtRkFBa0IsQ0FBQ2MsT0FBRCxFQUFVUCxNQUFWLENBQWpDLENBQVA7O0FBQ0YsU0FBSyxNQUFMO0FBQ0UsVUFBSUQsYUFBYSxDQUFDQyxNQUFELENBQWpCLEVBQTJCO0FBQ3pCLGVBQU9XLFNBQVA7QUFDRDs7QUFDRCxhQUFPM0IsNkRBQUEsQ0FBZVUsOEVBQWEsQ0FBQ2EsT0FBRCxFQUFVUCxNQUFWLENBQTVCLENBQVA7O0FBQ0YsU0FBSyxTQUFMO0FBQ0UsYUFBT2hCLDZEQUFBLENBQWVXLHVGQUFzQixDQUFDWSxPQUFELEVBQVVQLE1BQVYsQ0FBckMsQ0FBUDs7QUFDRixTQUFLLFFBQUw7QUFDRSxhQUFPaEIsNkRBQUEsQ0FBZVksZ0ZBQWUsQ0FBQ1csT0FBRCxFQUFVUCxNQUFWLENBQTlCLENBQVA7O0FBQ0Y7QUFDRSxhQUFPLElBQVA7QUFoQ0o7QUFrQ0Q7O0FBRUQsK0RBQWU7QUFDYk0sRUFBQUEsTUFBTSxFQUFOQTtBQURhLENBQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL2Nyb251cy91bXMvbW9kdWxlcy5qcz80ZDlmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdG9yZSBmcm9tICdjcm9udXMvc3RvcmUnO1xuaW1wb3J0IHtcbiAgc2V0U3RyZWFtTW9kdWxlLFxuICBzZXRNZXRhTW9kdWxlLFxuICBzZXRBbGxUaW1lVG90YWxNb2R1bGUsXG4gIHNldFZpZXdlcnNNb2R1bGUsXG4gIHNldExvZ29Nb2R1bGUsXG4gIHNldFNoYXJlTW9kdWxlLFxuICBzZXRCcm9hZGNhc3Rlck1vZHVsZSxcbiAgc2V0TGl2ZUNUQU1vZHVsZSxcbiAgc2V0VGh1bWJuYWlsTW9kdWxlLFxuICBzZXRQb2xsTW9kdWxlLFxuICBzZXRDYXB0aW9uU2VhcmNoTW9kdWxlLFxuICBzZXRTbGlkZXNNb2R1bGUsXG59IGZyb20gJ2Nyb251cy9zdG9yZS9hY3Rpb25zL3Vtc01vZHVsZXMnO1xuaW1wb3J0ICogYXMgZW1iZWRBcGkgZnJvbSAnY3JvbnVzL2VtYmVkQXBpJztcblxuY29uc3QgYXZhaWxhYmxlTW9kdWxlcyA9IFtcbiAgJ2FkdmVydCcsXG4gICdhbGxUaW1lVG90YWwnLFxuICAnYWxsVmlld2VycycsXG4gICdicm9hZGNhc3RlcicsXG4gICdjYXB0aW9uJyxcbiAgJ2xpdmVjdGEnLFxuICAnbG9nbycsXG4gICdtZXRhJyxcbiAgJ3BvbGwnLFxuICAncW9zJyxcbiAgJ3NoYXJlJyxcbiAgJ3NsaWRlcycsXG4gICdzdHJlYW0nLFxuICAndGNkbicsXG4gICd0aHVtYm5haWwnLFxuICAndmlld2VycycsXG4gICdjYXB0aW9uJyxcbl07XG5cbi8qKlxuICogQHBhcmFtIHsqfSBtb2R1bGVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzRW1wdHlNb2R1bGUobW9kdWxlKSB7XG4gIGlmIChtb2R1bGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KG1vZHVsZSkpIHtcbiAgICByZXR1cm4gbW9kdWxlLmxlbmd0aCA9PT0gMDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhtb2R1bGUpLmxlbmd0aCA9PT0gMDtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge01lZGlhSWR9IG1lZGlhSWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBtb2R1bGVzXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZShtZWRpYUlkLCBtb2R1bGVzKSB7XG4gIGF2YWlsYWJsZU1vZHVsZXMuZm9yRWFjaCgobW9kdWxlTmFtZSkgPT4ge1xuICAgIGlmIChtb2R1bGVzW21vZHVsZU5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGRpc3BhdGNoVG9TdG9yZSh7XG4gICAgICAgIG5hbWU6IG1vZHVsZU5hbWUsXG4gICAgICAgIG1vZHVsZTogbW9kdWxlc1ttb2R1bGVOYW1lXSxcbiAgICAgICAgbWVkaWFJZCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHt7IG5hbWU6IHN0cmluZywgbW9kdWxlOiAqLCBtZWRpYUlkOiBNZWRpYUlkIH19IGFyZ3NcbiAqL1xuZnVuY3Rpb24gZGlzcGF0Y2hUb1N0b3JlKHsgbmFtZSwgbW9kdWxlLCBtZWRpYUlkIH0pIHtcbiAgc3dpdGNoIChuYW1lKSB7XG4gICAgY2FzZSAnc3RyZWFtJzpcbiAgICAgIHJldHVybiBzdG9yZS5kaXNwYXRjaChzZXRTdHJlYW1Nb2R1bGUobWVkaWFJZCwgbW9kdWxlKSk7XG4gICAgY2FzZSAnbWV0YSc6XG4gICAgICBlbWJlZEFwaS5zZW5kRXZlbnQoZW1iZWRBcGkuRVZFTlRTLm1ldGEsIG1vZHVsZSk7XG4gICAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2goc2V0TWV0YU1vZHVsZShtZWRpYUlkLCBtb2R1bGUpKTtcbiAgICBjYXNlICdhbGxUaW1lVG90YWwnOlxuICAgICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoKHNldEFsbFRpbWVUb3RhbE1vZHVsZShtZWRpYUlkLCBtb2R1bGUpKTtcbiAgICBjYXNlICdhbGxWaWV3ZXJzJzpcbiAgICAgIHJldHVybiBudWxsOyAvLyB3ZSBkb24ndCB1c2UgdGhpcyBtb2R1bGUgcmlnaHQgbm93XG4gICAgY2FzZSAndmlld2Vycyc6XG4gICAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2goc2V0Vmlld2Vyc01vZHVsZShtZWRpYUlkLCBtb2R1bGUpKTtcbiAgICBjYXNlICdsb2dvJzpcbiAgICAgIHJldHVybiBzdG9yZS5kaXNwYXRjaChzZXRMb2dvTW9kdWxlKG1lZGlhSWQsIG1vZHVsZSkpO1xuICAgIGNhc2UgJ3NoYXJlJzpcbiAgICAgIHJldHVybiBzdG9yZS5kaXNwYXRjaChzZXRTaGFyZU1vZHVsZShtZWRpYUlkLCBtb2R1bGUpKTtcbiAgICBjYXNlICdicm9hZGNhc3Rlcic6XG4gICAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2goc2V0QnJvYWRjYXN0ZXJNb2R1bGUobWVkaWFJZCwgbW9kdWxlKSk7XG4gICAgY2FzZSAnbGl2ZWN0YSc6XG4gICAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2goc2V0TGl2ZUNUQU1vZHVsZShtZWRpYUlkLCBtb2R1bGUpKTtcbiAgICBjYXNlICd0aHVtYm5haWwnOlxuICAgICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoKHNldFRodW1ibmFpbE1vZHVsZShtZWRpYUlkLCBtb2R1bGUpKTtcbiAgICBjYXNlICdwb2xsJzpcbiAgICAgIGlmIChpc0VtcHR5TW9kdWxlKG1vZHVsZSkpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdG9yZS5kaXNwYXRjaChzZXRQb2xsTW9kdWxlKG1lZGlhSWQsIG1vZHVsZSkpO1xuICAgIGNhc2UgJ2NhcHRpb24nOlxuICAgICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoKHNldENhcHRpb25TZWFyY2hNb2R1bGUobWVkaWFJZCwgbW9kdWxlKSk7XG4gICAgY2FzZSAnc2xpZGVzJzpcbiAgICAgIHJldHVybiBzdG9yZS5kaXNwYXRjaChzZXRTbGlkZXNNb2R1bGUobWVkaWFJZCwgbW9kdWxlKSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdXBkYXRlLFxufTtcbiJdLCJuYW1lcyI6WyJzdG9yZSIsInNldFN0cmVhbU1vZHVsZSIsInNldE1ldGFNb2R1bGUiLCJzZXRBbGxUaW1lVG90YWxNb2R1bGUiLCJzZXRWaWV3ZXJzTW9kdWxlIiwic2V0TG9nb01vZHVsZSIsInNldFNoYXJlTW9kdWxlIiwic2V0QnJvYWRjYXN0ZXJNb2R1bGUiLCJzZXRMaXZlQ1RBTW9kdWxlIiwic2V0VGh1bWJuYWlsTW9kdWxlIiwic2V0UG9sbE1vZHVsZSIsInNldENhcHRpb25TZWFyY2hNb2R1bGUiLCJzZXRTbGlkZXNNb2R1bGUiLCJlbWJlZEFwaSIsImF2YWlsYWJsZU1vZHVsZXMiLCJpc0VtcHR5TW9kdWxlIiwibW9kdWxlIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwiT2JqZWN0Iiwia2V5cyIsInVwZGF0ZSIsIm1lZGlhSWQiLCJtb2R1bGVzIiwiZm9yRWFjaCIsIm1vZHVsZU5hbWUiLCJ1bmRlZmluZWQiLCJkaXNwYXRjaFRvU3RvcmUiLCJuYW1lIiwiZGlzcGF0Y2giLCJzZW5kRXZlbnQiLCJFVkVOVFMiLCJtZXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/cronus/ums/modules.js\n");

/***/ }),

/***/ "../js/shared/lib/util/getXHRErrorReason.js":
/*!**************************************************!*\
  !*** ../js/shared/lib/util/getXHRErrorReason.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ getXHRErrorReason; }\n/* harmony export */ });\n/**\n * @param {XMLHttpRequest} xhr\n * @returns {string|undefined}\n */\nfunction getXHRErrorReason(xhr) {\n  var responseAsString;\n\n  if (xhr.response instanceof ArrayBuffer) {\n    responseAsString = new TextDecoder('utf-8').decode(xhr.response);\n  } else if (typeof xhr.response === 'string') {\n    responseAsString = xhr.response;\n  } else {\n    return undefined;\n  }\n\n  try {\n    var json = JSON.parse(responseAsString);\n    return json.error;\n  } catch (e) {\n    return undefined;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvc2hhcmVkL2xpYi91dGlsL2dldFhIUkVycm9yUmVhc29uLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNlLFNBQVNBLGlCQUFULENBQTJCQyxHQUEzQixFQUFnQztBQUM3QyxNQUFJQyxnQkFBSjs7QUFDQSxNQUFJRCxHQUFHLENBQUNFLFFBQUosWUFBd0JDLFdBQTVCLEVBQXlDO0FBQ3ZDRixJQUFBQSxnQkFBZ0IsR0FBRyxJQUFJRyxXQUFKLENBQWdCLE9BQWhCLEVBQXlCQyxNQUF6QixDQUFnQ0wsR0FBRyxDQUFDRSxRQUFwQyxDQUFuQjtBQUNELEdBRkQsTUFFTyxJQUFJLE9BQU9GLEdBQUcsQ0FBQ0UsUUFBWCxLQUF3QixRQUE1QixFQUFzQztBQUMzQ0QsSUFBQUEsZ0JBQWdCLEdBQUdELEdBQUcsQ0FBQ0UsUUFBdkI7QUFDRCxHQUZNLE1BRUE7QUFDTCxXQUFPSSxTQUFQO0FBQ0Q7O0FBRUQsTUFBSTtBQUNGLFFBQU1DLElBQUksR0FBR0MsSUFBSSxDQUFDQyxLQUFMLENBQVdSLGdCQUFYLENBQWI7QUFDQSxXQUFPTSxJQUFJLENBQUNHLEtBQVo7QUFDRCxHQUhELENBR0UsT0FBT0MsQ0FBUCxFQUFVO0FBQ1YsV0FBT0wsU0FBUDtBQUNEO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL3NoYXJlZC9saWIvdXRpbC9nZXRYSFJFcnJvclJlYXNvbi5qcz9jMWY1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhcmFtIHtYTUxIdHRwUmVxdWVzdH0geGhyXG4gKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0WEhSRXJyb3JSZWFzb24oeGhyKSB7XG4gIGxldCByZXNwb25zZUFzU3RyaW5nO1xuICBpZiAoeGhyLnJlc3BvbnNlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXNwb25zZUFzU3RyaW5nID0gbmV3IFRleHREZWNvZGVyKCd1dGYtOCcpLmRlY29kZSh4aHIucmVzcG9uc2UpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB4aHIucmVzcG9uc2UgPT09ICdzdHJpbmcnKSB7XG4gICAgcmVzcG9uc2VBc1N0cmluZyA9IHhoci5yZXNwb25zZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBqc29uID0gSlNPTi5wYXJzZShyZXNwb25zZUFzU3RyaW5nKTtcbiAgICByZXR1cm4ganNvbi5lcnJvcjtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJnZXRYSFJFcnJvclJlYXNvbiIsInhociIsInJlc3BvbnNlQXNTdHJpbmciLCJyZXNwb25zZSIsIkFycmF5QnVmZmVyIiwiVGV4dERlY29kZXIiLCJkZWNvZGUiLCJ1bmRlZmluZWQiLCJqc29uIiwiSlNPTiIsInBhcnNlIiwiZXJyb3IiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/shared/lib/util/getXHRErrorReason.js\n");

/***/ }),

/***/ "../js/shared/lib/util/segmentParser.js":
/*!**********************************************!*\
  !*** ../js/shared/lib/util/segmentParser.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getSegmentMeta\": function() { return /* binding */ getSegmentMeta; }\n/* harmony export */ });\n/* harmony import */ var mp4_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mp4-parser */ \"../node_modules/mp4-parser/dist/mp4-parser.min.js\");\n/* harmony import */ var mp4_parser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mp4_parser__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\n * @param {Uint8Array} segment\n * @returns {{ start: number, end: number, keyFrames: Array<number> }}\n */\n\nfunction getSegmentMeta(segment) {\n  var container = (0,mp4_parser__WEBPACK_IMPORTED_MODULE_0__.parse)(segment);\n  var fragments = (0,mp4_parser__WEBPACK_IMPORTED_MODULE_0__.getFragments)(container);\n\n  if (fragments.length === 0) {\n    return {\n      start: 0,\n      end: 0,\n      keyFrames: []\n    };\n  }\n\n  var firstFragment = fragments[0];\n  var firstTimestampInMs = firstFragment.start;\n  var lastFragment = fragments[fragments.length - 1];\n  var lastTimestampInMs = lastFragment.end;\n  var keyFrames = fragments.filter(function (_ref) {\n    var containsRAP = _ref.containsRAP;\n    return containsRAP;\n  }).map(function (_ref2) {\n    var startInMs = _ref2.start;\n    return startInMs / 1000;\n  });\n  return {\n    start: firstTimestampInMs / 1000,\n    end: lastTimestampInMs / 1000,\n    keyFrames: keyFrames\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvc2hhcmVkL2xpYi91dGlsL3NlZ21lbnRQYXJzZXIuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFDTyxTQUFTRSxjQUFULENBQXdCQyxPQUF4QixFQUFpQztBQUN0QyxNQUFNQyxTQUFTLEdBQUdKLGlEQUFLLENBQUNHLE9BQUQsQ0FBdkI7QUFDQSxNQUFNRSxTQUFTLEdBQUdKLHdEQUFZLENBQUNHLFNBQUQsQ0FBOUI7O0FBRUEsTUFBSUMsU0FBUyxDQUFDQyxNQUFWLEtBQXFCLENBQXpCLEVBQTRCO0FBQzFCLFdBQU87QUFDTEMsTUFBQUEsS0FBSyxFQUFFLENBREY7QUFFTEMsTUFBQUEsR0FBRyxFQUFFLENBRkE7QUFHTEMsTUFBQUEsU0FBUyxFQUFFO0FBSE4sS0FBUDtBQUtEOztBQUVELE1BQU1DLGFBQWEsR0FBR0wsU0FBUyxDQUFDLENBQUQsQ0FBL0I7QUFDQSxNQUFNTSxrQkFBa0IsR0FBR0QsYUFBYSxDQUFDSCxLQUF6QztBQUNBLE1BQU1LLFlBQVksR0FBR1AsU0FBUyxDQUFDQSxTQUFTLENBQUNDLE1BQVYsR0FBbUIsQ0FBcEIsQ0FBOUI7QUFDQSxNQUFNTyxpQkFBaUIsR0FBR0QsWUFBWSxDQUFDSixHQUF2QztBQUVBLE1BQU1DLFNBQVMsR0FBR0osU0FBUyxDQUN4QlMsTUFEZSxDQUNSO0FBQUEsUUFBR0MsV0FBSCxRQUFHQSxXQUFIO0FBQUEsV0FBcUJBLFdBQXJCO0FBQUEsR0FEUSxFQUVmQyxHQUZlLENBRVg7QUFBQSxRQUFVQyxTQUFWLFNBQUdWLEtBQUg7QUFBQSxXQUEwQlUsU0FBUyxHQUFHLElBQXRDO0FBQUEsR0FGVyxDQUFsQjtBQUlBLFNBQU87QUFDTFYsSUFBQUEsS0FBSyxFQUFFSSxrQkFBa0IsR0FBRyxJQUR2QjtBQUVMSCxJQUFBQSxHQUFHLEVBQUVLLGlCQUFpQixHQUFHLElBRnBCO0FBR0xKLElBQUFBLFNBQVMsRUFBVEE7QUFISyxHQUFQO0FBS0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c3RyZWFtUGxheWVyLy4uL2pzL3NoYXJlZC9saWIvdXRpbC9zZWdtZW50UGFyc2VyLmpzPzE3NTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2UsIGdldEZyYWdtZW50cyB9IGZyb20gJ21wNC1wYXJzZXInO1xuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gc2VnbWVudFxuICogQHJldHVybnMge3sgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIsIGtleUZyYW1lczogQXJyYXk8bnVtYmVyPiB9fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VnbWVudE1ldGEoc2VnbWVudCkge1xuICBjb25zdCBjb250YWluZXIgPSBwYXJzZShzZWdtZW50KTtcbiAgY29uc3QgZnJhZ21lbnRzID0gZ2V0RnJhZ21lbnRzKGNvbnRhaW5lcik7XG5cbiAgaWYgKGZyYWdtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnQ6IDAsXG4gICAgICBlbmQ6IDAsXG4gICAgICBrZXlGcmFtZXM6IFtdLFxuICAgIH07XG4gIH1cblxuICBjb25zdCBmaXJzdEZyYWdtZW50ID0gZnJhZ21lbnRzWzBdO1xuICBjb25zdCBmaXJzdFRpbWVzdGFtcEluTXMgPSBmaXJzdEZyYWdtZW50LnN0YXJ0O1xuICBjb25zdCBsYXN0RnJhZ21lbnQgPSBmcmFnbWVudHNbZnJhZ21lbnRzLmxlbmd0aCAtIDFdO1xuICBjb25zdCBsYXN0VGltZXN0YW1wSW5NcyA9IGxhc3RGcmFnbWVudC5lbmQ7XG5cbiAgY29uc3Qga2V5RnJhbWVzID0gZnJhZ21lbnRzXG4gICAgLmZpbHRlcigoeyBjb250YWluc1JBUCB9KSA9PiBjb250YWluc1JBUClcbiAgICAubWFwKCh7IHN0YXJ0OiBzdGFydEluTXMgfSkgPT4gc3RhcnRJbk1zIC8gMTAwMCk7XG5cbiAgcmV0dXJuIHtcbiAgICBzdGFydDogZmlyc3RUaW1lc3RhbXBJbk1zIC8gMTAwMCxcbiAgICBlbmQ6IGxhc3RUaW1lc3RhbXBJbk1zIC8gMTAwMCxcbiAgICBrZXlGcmFtZXMsXG4gIH07XG59XG4iXSwibmFtZXMiOlsicGFyc2UiLCJnZXRGcmFnbWVudHMiLCJnZXRTZWdtZW50TWV0YSIsInNlZ21lbnQiLCJjb250YWluZXIiLCJmcmFnbWVudHMiLCJsZW5ndGgiLCJzdGFydCIsImVuZCIsImtleUZyYW1lcyIsImZpcnN0RnJhZ21lbnQiLCJmaXJzdFRpbWVzdGFtcEluTXMiLCJsYXN0RnJhZ21lbnQiLCJsYXN0VGltZXN0YW1wSW5NcyIsImZpbHRlciIsImNvbnRhaW5zUkFQIiwibWFwIiwic3RhcnRJbk1zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/shared/lib/util/segmentParser.js\n");

/***/ }),

/***/ "../js/shared/store/actions/ads.js":
/*!*****************************************!*\
  !*** ../js/shared/store/actions/ads.js ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"setAdsPlaying\": function() { return /* binding */ setAdsPlaying; }\n/* harmony export */ });\n/* harmony import */ var shared_store_types_ads__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/store/types/ads */ \"../js/shared/store/types/ads.js\");\n\nfunction setAdsPlaying(adsPlaying) {\n  return {\n    type: shared_store_types_ads__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setAdsPlaying,\n    payload: {\n      adsPlaying: adsPlaying\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvc2hhcmVkL3N0b3JlL2FjdGlvbnMvYWRzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFFTyxTQUFTQyxhQUFULENBQXVCQyxVQUF2QixFQUFtQztBQUN4QyxTQUFPO0FBQ0xDLElBQUFBLElBQUksRUFBRUgsNEVBREQ7QUFFTEksSUFBQUEsT0FBTyxFQUFFO0FBQ1BGLE1BQUFBLFVBQVUsRUFBVkE7QUFETztBQUZKLEdBQVA7QUFNRCIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vanMvc2hhcmVkL3N0b3JlL2FjdGlvbnMvYWRzLmpzPzQzZDMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFkc1R5cGVzIGZyb20gJ3NoYXJlZC9zdG9yZS90eXBlcy9hZHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0QWRzUGxheWluZyhhZHNQbGF5aW5nKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogYWRzVHlwZXMuc2V0QWRzUGxheWluZyxcbiAgICBwYXlsb2FkOiB7XG4gICAgICBhZHNQbGF5aW5nLFxuICAgIH0sXG4gIH07XG59XG4iXSwibmFtZXMiOlsiYWRzVHlwZXMiLCJzZXRBZHNQbGF5aW5nIiwiYWRzUGxheWluZyIsInR5cGUiLCJwYXlsb2FkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../js/shared/store/actions/ads.js\n");

/***/ }),

/***/ "../js/shared/store/types/ads.js":
/*!***************************************!*\
  !*** ../js/shared/store/types/ads.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  setAdsPlaying: 'SET_ADS_PLAYING'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vanMvc2hhcmVkL3N0b3JlL3R5cGVzL2Fkcy5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsK0RBQWU7QUFDYkEsRUFBQUEsYUFBYSxFQUFFO0FBREYsQ0FBZiIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vanMvc2hhcmVkL3N0b3JlL3R5cGVzL2Fkcy5qcz81NmQxIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgc2V0QWRzUGxheWluZzogJ1NFVF9BRFNfUExBWUlORycsXG59O1xuIl0sIm5hbWVzIjpbInNldEFkc1BsYXlpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../js/shared/store/types/ads.js\n");

/***/ }),

/***/ "../node_modules/can-autoplay/build/can-autoplay.es.js":
/*!*************************************************************!*\
  !*** ../node_modules/can-autoplay/build/can-autoplay.es.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* global Blob */\n// This file is generated. Do not edit this file directly.\n// Command: 'npm run generate' should be used to update the content.\n\n/**\n * @type {Blob}\n */\nvar AUDIO = new Blob([new Uint8Array([255, 227, 24, 196, 0, 0, 0, 3, 72, 1, 64, 0, 0, 4, 132, 16, 31, 227, 192, 225, 76, 255, 67, 12, 255, 221, 27, 255, 228, 97, 73, 63, 255, 195, 131, 69, 192, 232, 223, 255, 255, 207, 102, 239, 255, 255, 255, 101, 158, 206, 70, 20, 59, 255, 254, 95, 70, 149, 66, 4, 16, 128, 0, 2, 2, 32, 240, 138, 255, 36, 106, 183, 255, 227, 24, 196, 59, 11, 34, 62, 80, 49, 135, 40, 0, 253, 29, 191, 209, 200, 141, 71, 7, 255, 252, 152, 74, 15, 130, 33, 185, 6, 63, 255, 252, 195, 70, 203, 86, 53, 15, 255, 255, 247, 103, 76, 121, 64, 32, 47, 255, 34, 227, 194, 209, 138, 76, 65, 77, 69, 51, 46, 57, 55, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 255, 227, 24, 196, 73, 13, 153, 210, 100, 81, 135, 56, 0, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170])], { type: 'audio/mpeg' });\n\n/**\n * @type {Blob}\n */\nvar VIDEO = new Blob([new Uint8Array([0, 0, 0, 28, 102, 116, 121, 112, 105, 115, 111, 109, 0, 0, 2, 0, 105, 115, 111, 109, 105, 115, 111, 50, 109, 112, 52, 49, 0, 0, 0, 8, 102, 114, 101, 101, 0, 0, 2, 239, 109, 100, 97, 116, 33, 16, 5, 32, 164, 27, 255, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 33, 16, 5, 32, 164, 27, 255, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 167, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 2, 194, 109, 111, 111, 118, 0, 0, 0, 108, 109, 118, 104, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 232, 0, 0, 0, 47, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 1, 236, 116, 114, 97, 107, 0, 0, 0, 92, 116, 107, 104, 100, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 101, 100, 116, 115, 0, 0, 0, 28, 101, 108, 115, 116, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 47, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 100, 109, 100, 105, 97, 0, 0, 0, 32, 109, 100, 104, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172, 68, 0, 0, 8, 0, 85, 196, 0, 0, 0, 0, 0, 45, 104, 100, 108, 114, 0, 0, 0, 0, 0, 0, 0, 0, 115, 111, 117, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 111, 117, 110, 100, 72, 97, 110, 100, 108, 101, 114, 0, 0, 0, 1, 15, 109, 105, 110, 102, 0, 0, 0, 16, 115, 109, 104, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 100, 105, 110, 102, 0, 0, 0, 28, 100, 114, 101, 102, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 117, 114, 108, 32, 0, 0, 0, 1, 0, 0, 0, 211, 115, 116, 98, 108, 0, 0, 0, 103, 115, 116, 115, 100, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 87, 109, 112, 52, 97, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 16, 0, 0, 0, 0, 172, 68, 0, 0, 0, 0, 0, 51, 101, 115, 100, 115, 0, 0, 0, 0, 3, 128, 128, 128, 34, 0, 2, 0, 4, 128, 128, 128, 20, 64, 21, 0, 0, 0, 0, 1, 244, 0, 0, 1, 243, 249, 5, 128, 128, 128, 2, 18, 16, 6, 128, 128, 128, 1, 2, 0, 0, 0, 24, 115, 116, 116, 115, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 4, 0, 0, 0, 0, 28, 115, 116, 115, 99, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 28, 115, 116, 115, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 115, 0, 0, 1, 116, 0, 0, 0, 20, 115, 116, 99, 111, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 44, 0, 0, 0, 98, 117, 100, 116, 97, 0, 0, 0, 90, 109, 101, 116, 97, 0, 0, 0, 0, 0, 0, 0, 33, 104, 100, 108, 114, 0, 0, 0, 0, 0, 0, 0, 0, 109, 100, 105, 114, 97, 112, 112, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 105, 108, 115, 116, 0, 0, 0, 37, 169, 116, 111, 111, 0, 0, 0, 29, 100, 97, 116, 97, 0, 0, 0, 1, 0, 0, 0, 0, 76, 97, 118, 102, 53, 54, 46, 52, 48, 46, 49, 48, 49])], { type: 'video/mp4' });\n\n/* global URL */\nfunction setupDefaultValues(options) {\n  return Object.assign({\n    muted: false,\n    timeout: 250,\n    inline: false\n  }, options);\n}\n\nfunction startPlayback(_ref, elementCallback) {\n  var muted = _ref.muted,\n      timeout = _ref.timeout,\n      inline = _ref.inline;\n\n  var _elementCallback = elementCallback(),\n      element = _elementCallback.element,\n      source = _elementCallback.source;\n\n  var playResult = void 0;\n  var timeoutId = void 0;\n  var sendOutput = void 0;\n\n  element.muted = muted;\n  if (muted === true) {\n    element.setAttribute('muted', 'muted');\n  }\n  // indicates that the video is to be played \"inline\",\n  // that is within the element's playback area.\n  if (inline === true) {\n    element.setAttribute('playsinline', 'playsinline');\n  }\n\n  element.src = source;\n\n  return new Promise(function (resolve) {\n    playResult = element.play();\n    timeoutId = setTimeout(function () {\n      sendOutput(false, new Error('Timeout ' + timeout + ' ms has been reached'));\n    }, timeout);\n    sendOutput = function sendOutput(result) {\n      var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      // Clean up to avoid MediaElementLeak\n      element.remove();\n      element.srcObject = null;\n\n      clearTimeout(timeoutId);\n      resolve({ result: result, error: error });\n    };\n\n    if (playResult !== undefined) {\n      playResult.then(function () {\n        return sendOutput(true);\n      }).catch(function (playError) {\n        return sendOutput(false, playError);\n      });\n    } else {\n      sendOutput(true);\n    }\n  });\n}\n\n//\n// API\n//\n\nfunction video(options) {\n  options = setupDefaultValues(options);\n  return startPlayback(options, function () {\n    return {\n      element: document.createElement('video'),\n      source: URL.createObjectURL(VIDEO)\n    };\n  });\n}\n\nfunction audio(options) {\n  options = setupDefaultValues(options);\n  return startPlayback(options, function () {\n    return {\n      element: document.createElement('audio'),\n      source: URL.createObjectURL(AUDIO)\n    };\n  });\n}\n\nvar index = { audio: audio, video: video };\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (index);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL2Nhbi1hdXRvcGxheS9idWlsZC9jYW4tYXV0b3BsYXkuZXMuanMuanMiLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVU7QUFDVjtBQUNBLHlnQ0FBeWdDLG9CQUFvQjs7QUFFN2hDO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsNDJKQUE0MkosbUJBQW1COztBQUUvM0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCLDhCQUE4QjtBQUM5Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1AsTUFBTTtBQUNOO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBLGNBQWM7O0FBRWQsK0RBQWUsS0FBSyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9ub2RlX21vZHVsZXMvY2FuLWF1dG9wbGF5L2J1aWxkL2Nhbi1hdXRvcGxheS5lcy5qcz84YTlmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbCBCbG9iICovXG4vLyBUaGlzIGZpbGUgaXMgZ2VuZXJhdGVkLiBEbyBub3QgZWRpdCB0aGlzIGZpbGUgZGlyZWN0bHkuXG4vLyBDb21tYW5kOiAnbnBtIHJ1biBnZW5lcmF0ZScgc2hvdWxkIGJlIHVzZWQgdG8gdXBkYXRlIHRoZSBjb250ZW50LlxuXG4vKipcbiAqIEB0eXBlIHtCbG9ifVxuICovXG52YXIgQVVESU8gPSBuZXcgQmxvYihbbmV3IFVpbnQ4QXJyYXkoWzI1NSwgMjI3LCAyNCwgMTk2LCAwLCAwLCAwLCAzLCA3MiwgMSwgNjQsIDAsIDAsIDQsIDEzMiwgMTYsIDMxLCAyMjcsIDE5MiwgMjI1LCA3NiwgMjU1LCA2NywgMTIsIDI1NSwgMjIxLCAyNywgMjU1LCAyMjgsIDk3LCA3MywgNjMsIDI1NSwgMTk1LCAxMzEsIDY5LCAxOTIsIDIzMiwgMjIzLCAyNTUsIDI1NSwgMjA3LCAxMDIsIDIzOSwgMjU1LCAyNTUsIDI1NSwgMTAxLCAxNTgsIDIwNiwgNzAsIDIwLCA1OSwgMjU1LCAyNTQsIDk1LCA3MCwgMTQ5LCA2NiwgNCwgMTYsIDEyOCwgMCwgMiwgMiwgMzIsIDI0MCwgMTM4LCAyNTUsIDM2LCAxMDYsIDE4MywgMjU1LCAyMjcsIDI0LCAxOTYsIDU5LCAxMSwgMzQsIDYyLCA4MCwgNDksIDEzNSwgNDAsIDAsIDI1MywgMjksIDE5MSwgMjA5LCAyMDAsIDE0MSwgNzEsIDcsIDI1NSwgMjUyLCAxNTIsIDc0LCAxNSwgMTMwLCAzMywgMTg1LCA2LCA2MywgMjU1LCAyNTIsIDE5NSwgNzAsIDIwMywgODYsIDUzLCAxNSwgMjU1LCAyNTUsIDI0NywgMTAzLCA3NiwgMTIxLCA2NCwgMzIsIDQ3LCAyNTUsIDM0LCAyMjcsIDE5NCwgMjA5LCAxMzgsIDc2LCA2NSwgNzcsIDY5LCA1MSwgNDYsIDU3LCA1NSwgMTcwLCAxNzAsIDE3MCwgMTcwLCAxNzAsIDE3MCwgMTcwLCAxNzAsIDE3MCwgMTcwLCAyNTUsIDIyNywgMjQsIDE5NiwgNzMsIDEzLCAxNTMsIDIxMCwgMTAwLCA4MSwgMTM1LCA1NiwgMCwgMTcwLCAxNzAsIDE3MCwgMTcwLCAxNzAsIDE3MCwgMTcwLCAxNzAsIDE3MCwgMTcwLCAxNzAsIDE3MCwgMTcwLCAxNzAsIDE3MCwgMTcwLCAxNzAsIDE3MCwgMTcwLCAxNzAsIDE3MCwgMTcwLCAxNzAsIDE3MCwgMTcwLCAxNzAsIDE3MCwgMTcwLCAxNzAsIDE3MCwgMTcwLCAxNzAsIDE3MCwgMTcwLCAxNzAsIDE3MCwgMTcwLCAxNzAsIDE3MCwgMTcwLCAxNzAsIDE3MCwgMTcwLCAxNzAsIDE3MCwgMTcwLCAxNzAsIDE3MCwgMTcwLCAxNzAsIDE3MCwgMTcwLCAxNzAsIDE3MCwgMTcwLCAxNzAsIDE3MCwgMTcwLCAxNzBdKV0sIHsgdHlwZTogJ2F1ZGlvL21wZWcnIH0pO1xuXG4vKipcbiAqIEB0eXBlIHtCbG9ifVxuICovXG52YXIgVklERU8gPSBuZXcgQmxvYihbbmV3IFVpbnQ4QXJyYXkoWzAsIDAsIDAsIDI4LCAxMDIsIDExNiwgMTIxLCAxMTIsIDEwNSwgMTE1LCAxMTEsIDEwOSwgMCwgMCwgMiwgMCwgMTA1LCAxMTUsIDExMSwgMTA5LCAxMDUsIDExNSwgMTExLCA1MCwgMTA5LCAxMTIsIDUyLCA0OSwgMCwgMCwgMCwgOCwgMTAyLCAxMTQsIDEwMSwgMTAxLCAwLCAwLCAyLCAyMzksIDEwOSwgMTAwLCA5NywgMTE2LCAzMywgMTYsIDUsIDMyLCAxNjQsIDI3LCAyNTUsIDE5MiwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgNTUsIDE2NywgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMTEyLCAzMywgMTYsIDUsIDMyLCAxNjQsIDI3LCAyNTUsIDE5MiwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgNTUsIDE2NywgMTI4LCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAxMTIsIDAsIDAsIDIsIDE5NCwgMTA5LCAxMTEsIDExMSwgMTE4LCAwLCAwLCAwLCAxMDgsIDEwOSwgMTE4LCAxMDQsIDEwMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMywgMjMyLCAwLCAwLCAwLCA0NywgMCwgMSwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgNjQsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDMsIDAsIDAsIDEsIDIzNiwgMTE2LCAxMTQsIDk3LCAxMDcsIDAsIDAsIDAsIDkyLCAxMTYsIDEwNywgMTA0LCAxMDAsIDAsIDAsIDAsIDMsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDIsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDQ3LCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAxLCAxLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCA2NCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMzYsIDEwMSwgMTAwLCAxMTYsIDExNSwgMCwgMCwgMCwgMjgsIDEwMSwgMTA4LCAxMTUsIDExNiwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgNDcsIDAsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDEsIDEwMCwgMTA5LCAxMDAsIDEwNSwgOTcsIDAsIDAsIDAsIDMyLCAxMDksIDEwMCwgMTA0LCAxMDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDE3MiwgNjgsIDAsIDAsIDgsIDAsIDg1LCAxOTYsIDAsIDAsIDAsIDAsIDAsIDQ1LCAxMDQsIDEwMCwgMTA4LCAxMTQsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDExNSwgMTExLCAxMTcsIDExMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgODMsIDExMSwgMTE3LCAxMTAsIDEwMCwgNzIsIDk3LCAxMTAsIDEwMCwgMTA4LCAxMDEsIDExNCwgMCwgMCwgMCwgMSwgMTUsIDEwOSwgMTA1LCAxMTAsIDEwMiwgMCwgMCwgMCwgMTYsIDExNSwgMTA5LCAxMDQsIDEwMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMzYsIDEwMCwgMTA1LCAxMTAsIDEwMiwgMCwgMCwgMCwgMjgsIDEwMCwgMTE0LCAxMDEsIDEwMiwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMTIsIDExNywgMTE0LCAxMDgsIDMyLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAyMTEsIDExNSwgMTE2LCA5OCwgMTA4LCAwLCAwLCAwLCAxMDMsIDExNSwgMTE2LCAxMTUsIDEwMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgODcsIDEwOSwgMTEyLCA1MiwgOTcsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDIsIDAsIDE2LCAwLCAwLCAwLCAwLCAxNzIsIDY4LCAwLCAwLCAwLCAwLCAwLCA1MSwgMTAxLCAxMTUsIDEwMCwgMTE1LCAwLCAwLCAwLCAwLCAzLCAxMjgsIDEyOCwgMTI4LCAzNCwgMCwgMiwgMCwgNCwgMTI4LCAxMjgsIDEyOCwgMjAsIDY0LCAyMSwgMCwgMCwgMCwgMCwgMSwgMjQ0LCAwLCAwLCAxLCAyNDMsIDI0OSwgNSwgMTI4LCAxMjgsIDEyOCwgMiwgMTgsIDE2LCA2LCAxMjgsIDEyOCwgMTI4LCAxLCAyLCAwLCAwLCAwLCAyNCwgMTE1LCAxMTYsIDExNiwgMTE1LCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAyLCAwLCAwLCA0LCAwLCAwLCAwLCAwLCAyOCwgMTE1LCAxMTYsIDExNSwgOTksIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDIsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDI4LCAxMTUsIDExNiwgMTE1LCAxMjIsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDIsIDAsIDAsIDEsIDExNSwgMCwgMCwgMSwgMTE2LCAwLCAwLCAwLCAyMCwgMTE1LCAxMTYsIDk5LCAxMTEsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDQ0LCAwLCAwLCAwLCA5OCwgMTE3LCAxMDAsIDExNiwgOTcsIDAsIDAsIDAsIDkwLCAxMDksIDEwMSwgMTE2LCA5NywgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMzMsIDEwNCwgMTAwLCAxMDgsIDExNCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMTA5LCAxMDAsIDEwNSwgMTE0LCA5NywgMTEyLCAxMTIsIDEwOCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgNDUsIDEwNSwgMTA4LCAxMTUsIDExNiwgMCwgMCwgMCwgMzcsIDE2OSwgMTE2LCAxMTEsIDExMSwgMCwgMCwgMCwgMjksIDEwMCwgOTcsIDExNiwgOTcsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDc2LCA5NywgMTE4LCAxMDIsIDUzLCA1NCwgNDYsIDUyLCA0OCwgNDYsIDQ5LCA0OCwgNDldKV0sIHsgdHlwZTogJ3ZpZGVvL21wNCcgfSk7XG5cbi8qIGdsb2JhbCBVUkwgKi9cbmZ1bmN0aW9uIHNldHVwRGVmYXVsdFZhbHVlcyhvcHRpb25zKSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHtcbiAgICBtdXRlZDogZmFsc2UsXG4gICAgdGltZW91dDogMjUwLFxuICAgIGlubGluZTogZmFsc2VcbiAgfSwgb3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0UGxheWJhY2soX3JlZiwgZWxlbWVudENhbGxiYWNrKSB7XG4gIHZhciBtdXRlZCA9IF9yZWYubXV0ZWQsXG4gICAgICB0aW1lb3V0ID0gX3JlZi50aW1lb3V0LFxuICAgICAgaW5saW5lID0gX3JlZi5pbmxpbmU7XG5cbiAgdmFyIF9lbGVtZW50Q2FsbGJhY2sgPSBlbGVtZW50Q2FsbGJhY2soKSxcbiAgICAgIGVsZW1lbnQgPSBfZWxlbWVudENhbGxiYWNrLmVsZW1lbnQsXG4gICAgICBzb3VyY2UgPSBfZWxlbWVudENhbGxiYWNrLnNvdXJjZTtcblxuICB2YXIgcGxheVJlc3VsdCA9IHZvaWQgMDtcbiAgdmFyIHRpbWVvdXRJZCA9IHZvaWQgMDtcbiAgdmFyIHNlbmRPdXRwdXQgPSB2b2lkIDA7XG5cbiAgZWxlbWVudC5tdXRlZCA9IG11dGVkO1xuICBpZiAobXV0ZWQgPT09IHRydWUpIHtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnbXV0ZWQnLCAnbXV0ZWQnKTtcbiAgfVxuICAvLyBpbmRpY2F0ZXMgdGhhdCB0aGUgdmlkZW8gaXMgdG8gYmUgcGxheWVkIFwiaW5saW5lXCIsXG4gIC8vIHRoYXQgaXMgd2l0aGluIHRoZSBlbGVtZW50J3MgcGxheWJhY2sgYXJlYS5cbiAgaWYgKGlubGluZSA9PT0gdHJ1ZSkge1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdwbGF5c2lubGluZScsICdwbGF5c2lubGluZScpO1xuICB9XG5cbiAgZWxlbWVudC5zcmMgPSBzb3VyY2U7XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgcGxheVJlc3VsdCA9IGVsZW1lbnQucGxheSgpO1xuICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgc2VuZE91dHB1dChmYWxzZSwgbmV3IEVycm9yKCdUaW1lb3V0ICcgKyB0aW1lb3V0ICsgJyBtcyBoYXMgYmVlbiByZWFjaGVkJykpO1xuICAgIH0sIHRpbWVvdXQpO1xuICAgIHNlbmRPdXRwdXQgPSBmdW5jdGlvbiBzZW5kT3V0cHV0KHJlc3VsdCkge1xuICAgICAgdmFyIGVycm9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuXG4gICAgICAvLyBDbGVhbiB1cCB0byBhdm9pZCBNZWRpYUVsZW1lbnRMZWFrXG4gICAgICBlbGVtZW50LnJlbW92ZSgpO1xuICAgICAgZWxlbWVudC5zcmNPYmplY3QgPSBudWxsO1xuXG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgIHJlc29sdmUoeyByZXN1bHQ6IHJlc3VsdCwgZXJyb3I6IGVycm9yIH0pO1xuICAgIH07XG5cbiAgICBpZiAocGxheVJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwbGF5UmVzdWx0LnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gc2VuZE91dHB1dCh0cnVlKTtcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChwbGF5RXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHNlbmRPdXRwdXQoZmFsc2UsIHBsYXlFcnJvcik7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VuZE91dHB1dCh0cnVlKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vL1xuLy8gQVBJXG4vL1xuXG5mdW5jdGlvbiB2aWRlbyhvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBzZXR1cERlZmF1bHRWYWx1ZXMob3B0aW9ucyk7XG4gIHJldHVybiBzdGFydFBsYXliYWNrKG9wdGlvbnMsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZWxlbWVudDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKSxcbiAgICAgIHNvdXJjZTogVVJMLmNyZWF0ZU9iamVjdFVSTChWSURFTylcbiAgICB9O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYXVkaW8ob3B0aW9ucykge1xuICBvcHRpb25zID0gc2V0dXBEZWZhdWx0VmFsdWVzKG9wdGlvbnMpO1xuICByZXR1cm4gc3RhcnRQbGF5YmFjayhvcHRpb25zLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVsZW1lbnQ6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2F1ZGlvJyksXG4gICAgICBzb3VyY2U6IFVSTC5jcmVhdGVPYmplY3RVUkwoQVVESU8pXG4gICAgfTtcbiAgfSk7XG59XG5cbnZhciBpbmRleCA9IHsgYXVkaW86IGF1ZGlvLCB2aWRlbzogdmlkZW8gfTtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/can-autoplay/build/can-autoplay.es.js\n");

/***/ }),

/***/ "../node_modules/hls.js/dist/hls.js":
/*!******************************************!*\
  !*** ../node_modules/hls.js/dist/hls.js ***!
  \******************************************/
/***/ (function(module) {

eval("typeof window !== \"undefined\" &&\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_562__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_562__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_562__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__nested_webpack_require_562__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__nested_webpack_require_562__.d = function(exports, name, getter) {\n/******/ \t\tif(!__nested_webpack_require_562__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__nested_webpack_require_562__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__nested_webpack_require_562__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __nested_webpack_require_562__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__nested_webpack_require_562__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __nested_webpack_require_562__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__nested_webpack_require_562__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__nested_webpack_require_562__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__nested_webpack_require_562__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__nested_webpack_require_562__.p = \"/dist/\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __nested_webpack_require_562__(__nested_webpack_require_562__.s = \"./src/hls.ts\");\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"./node_modules/eventemitter3/index.js\":\n/*!*********************************************!*\\\n  !*** ./node_modules/eventemitter3/index.js ***!\n  \\*********************************************/\n/*! no static exports found */\n/*! ModuleConcatenation bailout: Module is not an ECMAScript module */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif (true) {\n  module.exports = EventEmitter;\n}\n\n\n/***/ }),\n\n/***/ \"./node_modules/url-toolkit/src/url-toolkit.js\":\n/*!*****************************************************!*\\\n  !*** ./node_modules/url-toolkit/src/url-toolkit.js ***!\n  \\*****************************************************/\n/*! no static exports found */\n/*! ModuleConcatenation bailout: Module is not an ECMAScript module */\n/***/ (function(module, exports, __webpack_require__) {\n\n// see https://tools.ietf.org/html/rfc1808\n\n(function (root) {\n  var URL_REGEX = /^((?:[a-zA-Z0-9+\\-.]+:)?)(\\/\\/[^\\/?#]*)?((?:[^\\/?#]*\\/)*[^;?#]*)?(;[^?#]*)?(\\?[^#]*)?(#.*)?$/;\n  var FIRST_SEGMENT_REGEX = /^([^\\/?#]*)(.*)$/;\n  var SLASH_DOT_REGEX = /(?:\\/|^)\\.(?=\\/)/g;\n  var SLASH_DOT_DOT_REGEX = /(?:\\/|^)\\.\\.\\/(?!\\.\\.\\/)[^\\/]*(?=\\/)/g;\n\n  var URLToolkit = {\n    // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //\n    // E.g\n    // With opts.alwaysNormalize = false (default, spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g\n    // With opts.alwaysNormalize = true (not spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/g\n    buildAbsoluteURL: function (baseURL, relativeURL, opts) {\n      opts = opts || {};\n      // remove any remaining space and CRLF\n      baseURL = baseURL.trim();\n      relativeURL = relativeURL.trim();\n      if (!relativeURL) {\n        // 2a) If the embedded URL is entirely empty, it inherits the\n        // entire base URL (i.e., is set equal to the base URL)\n        // and we are done.\n        if (!opts.alwaysNormalize) {\n          return baseURL;\n        }\n        var basePartsForNormalise = URLToolkit.parseURL(baseURL);\n        if (!basePartsForNormalise) {\n          throw new Error('Error trying to parse base URL.');\n        }\n        basePartsForNormalise.path = URLToolkit.normalizePath(\n          basePartsForNormalise.path\n        );\n        return URLToolkit.buildURLFromParts(basePartsForNormalise);\n      }\n      var relativeParts = URLToolkit.parseURL(relativeURL);\n      if (!relativeParts) {\n        throw new Error('Error trying to parse relative URL.');\n      }\n      if (relativeParts.scheme) {\n        // 2b) If the embedded URL starts with a scheme name, it is\n        // interpreted as an absolute URL and we are done.\n        if (!opts.alwaysNormalize) {\n          return relativeURL;\n        }\n        relativeParts.path = URLToolkit.normalizePath(relativeParts.path);\n        return URLToolkit.buildURLFromParts(relativeParts);\n      }\n      var baseParts = URLToolkit.parseURL(baseURL);\n      if (!baseParts) {\n        throw new Error('Error trying to parse base URL.');\n      }\n      if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {\n        // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc\n        // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'\n        var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);\n        baseParts.netLoc = pathParts[1];\n        baseParts.path = pathParts[2];\n      }\n      if (baseParts.netLoc && !baseParts.path) {\n        baseParts.path = '/';\n      }\n      var builtParts = {\n        // 2c) Otherwise, the embedded URL inherits the scheme of\n        // the base URL.\n        scheme: baseParts.scheme,\n        netLoc: relativeParts.netLoc,\n        path: null,\n        params: relativeParts.params,\n        query: relativeParts.query,\n        fragment: relativeParts.fragment,\n      };\n      if (!relativeParts.netLoc) {\n        // 3) If the embedded URL's <net_loc> is non-empty, we skip to\n        // Step 7.  Otherwise, the embedded URL inherits the <net_loc>\n        // (if any) of the base URL.\n        builtParts.netLoc = baseParts.netLoc;\n        // 4) If the embedded URL path is preceded by a slash \"/\", the\n        // path is not relative and we skip to Step 7.\n        if (relativeParts.path[0] !== '/') {\n          if (!relativeParts.path) {\n            // 5) If the embedded URL path is empty (and not preceded by a\n            // slash), then the embedded URL inherits the base URL path\n            builtParts.path = baseParts.path;\n            // 5a) if the embedded URL's <params> is non-empty, we skip to\n            // step 7; otherwise, it inherits the <params> of the base\n            // URL (if any) and\n            if (!relativeParts.params) {\n              builtParts.params = baseParts.params;\n              // 5b) if the embedded URL's <query> is non-empty, we skip to\n              // step 7; otherwise, it inherits the <query> of the base\n              // URL (if any) and we skip to step 7.\n              if (!relativeParts.query) {\n                builtParts.query = baseParts.query;\n              }\n            }\n          } else {\n            // 6) The last segment of the base URL's path (anything\n            // following the rightmost slash \"/\", or the entire path if no\n            // slash is present) is removed and the embedded URL's path is\n            // appended in its place.\n            var baseURLPath = baseParts.path;\n            var newPath =\n              baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) +\n              relativeParts.path;\n            builtParts.path = URLToolkit.normalizePath(newPath);\n          }\n        }\n      }\n      if (builtParts.path === null) {\n        builtParts.path = opts.alwaysNormalize\n          ? URLToolkit.normalizePath(relativeParts.path)\n          : relativeParts.path;\n      }\n      return URLToolkit.buildURLFromParts(builtParts);\n    },\n    parseURL: function (url) {\n      var parts = URL_REGEX.exec(url);\n      if (!parts) {\n        return null;\n      }\n      return {\n        scheme: parts[1] || '',\n        netLoc: parts[2] || '',\n        path: parts[3] || '',\n        params: parts[4] || '',\n        query: parts[5] || '',\n        fragment: parts[6] || '',\n      };\n    },\n    normalizePath: function (path) {\n      // The following operations are\n      // then applied, in order, to the new path:\n      // 6a) All occurrences of \"./\", where \".\" is a complete path\n      // segment, are removed.\n      // 6b) If the path ends with \".\" as a complete path segment,\n      // that \".\" is removed.\n      path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');\n      // 6c) All occurrences of \"<segment>/../\", where <segment> is a\n      // complete path segment not equal to \"..\", are removed.\n      // Removal of these path segments is performed iteratively,\n      // removing the leftmost matching pattern on each iteration,\n      // until no matching pattern remains.\n      // 6d) If the path ends with \"<segment>/..\", where <segment> is a\n      // complete path segment not equal to \"..\", that\n      // \"<segment>/..\" is removed.\n      while (\n        path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length\n      ) {}\n      return path.split('').reverse().join('');\n    },\n    buildURLFromParts: function (parts) {\n      return (\n        parts.scheme +\n        parts.netLoc +\n        parts.path +\n        parts.params +\n        parts.query +\n        parts.fragment\n      );\n    },\n  };\n\n  if (true)\n    module.exports = URLToolkit;\n  else {}\n})(this);\n\n\n/***/ }),\n\n/***/ \"./node_modules/webworkify-webpack/index.js\":\n/*!**************************************************!*\\\n  !*** ./node_modules/webworkify-webpack/index.js ***!\n  \\**************************************************/\n/*! no static exports found */\n/*! ModuleConcatenation bailout: Module is not an ECMAScript module */\n/***/ (function(module, exports, __nested_webpack_require_21062__) {\n\nfunction webpackBootstrapFunc (modules) {\n/******/  // The module cache\n/******/  var installedModules = {};\n\n/******/  // The require function\n/******/  function __nested_webpack_require_21240__(moduleId) {\n\n/******/    // Check if module is in cache\n/******/    if(installedModules[moduleId])\n/******/      return installedModules[moduleId].exports;\n\n/******/    // Create a new module (and put it into the cache)\n/******/    var module = installedModules[moduleId] = {\n/******/      i: moduleId,\n/******/      l: false,\n/******/      exports: {}\n/******/    };\n\n/******/    // Execute the module function\n/******/    modules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_21240__);\n\n/******/    // Flag the module as loaded\n/******/    module.l = true;\n\n/******/    // Return the exports of the module\n/******/    return module.exports;\n/******/  }\n\n/******/  // expose the modules object (__webpack_modules__)\n/******/  __nested_webpack_require_21240__.m = modules;\n\n/******/  // expose the module cache\n/******/  __nested_webpack_require_21240__.c = installedModules;\n\n/******/  // identity function for calling harmony imports with the correct context\n/******/  __nested_webpack_require_21240__.i = function(value) { return value; };\n\n/******/  // define getter function for harmony exports\n/******/  __nested_webpack_require_21240__.d = function(exports, name, getter) {\n/******/    if(!__nested_webpack_require_21240__.o(exports, name)) {\n/******/      Object.defineProperty(exports, name, {\n/******/        configurable: false,\n/******/        enumerable: true,\n/******/        get: getter\n/******/      });\n/******/    }\n/******/  };\n\n/******/  // define __esModule on exports\n/******/  __nested_webpack_require_21240__.r = function(exports) {\n/******/    Object.defineProperty(exports, '__esModule', { value: true });\n/******/  };\n\n/******/  // getDefaultExport function for compatibility with non-harmony modules\n/******/  __nested_webpack_require_21240__.n = function(module) {\n/******/    var getter = module && module.__esModule ?\n/******/      function getDefault() { return module['default']; } :\n/******/      function getModuleExports() { return module; };\n/******/    __nested_webpack_require_21240__.d(getter, 'a', getter);\n/******/    return getter;\n/******/  };\n\n/******/  // Object.prototype.hasOwnProperty.call\n/******/  __nested_webpack_require_21240__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/  // __webpack_public_path__\n/******/  __nested_webpack_require_21240__.p = \"/\";\n\n/******/  // on error function for async loading\n/******/  __nested_webpack_require_21240__.oe = function(err) { console.error(err); throw err; };\n\n  var f = __nested_webpack_require_21240__(__nested_webpack_require_21240__.s = ENTRY_MODULE)\n  return f.default || f // try to call default if defined to also support babel esmodule exports\n}\n\nvar moduleNameReqExp = '[\\\\.|\\\\-|\\\\+|\\\\w|\\/|@]+'\nvar dependencyRegExp = '\\\\(\\\\s*(\\/\\\\*.*?\\\\*\\/)?\\\\s*.*?(' + moduleNameReqExp + ').*?\\\\)' // additional chars when output.pathinfo is true\n\n// http://stackoverflow.com/a/2593661/130442\nfunction quoteRegExp (str) {\n  return (str + '').replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&')\n}\n\nfunction isNumeric(n) {\n  return !isNaN(1 * n); // 1 * n converts integers, integers as string (\"123\"), 1e3 and \"1e3\" to integers and strings to NaN\n}\n\nfunction getModuleDependencies (sources, module, queueName) {\n  var retval = {}\n  retval[queueName] = []\n\n  var fnString = module.toString()\n  var wrapperSignature = fnString.match(/^function\\s?\\w*\\(\\w+,\\s*\\w+,\\s*(\\w+)\\)/)\n  if (!wrapperSignature) return retval\n  var webpackRequireName = wrapperSignature[1]\n\n  // main bundle deps\n  var re = new RegExp('(\\\\\\\\n|\\\\W)' + quoteRegExp(webpackRequireName) + dependencyRegExp, 'g')\n  var match\n  while ((match = re.exec(fnString))) {\n    if (match[3] === 'dll-reference') continue\n    retval[queueName].push(match[3])\n  }\n\n  // dll deps\n  re = new RegExp('\\\\(' + quoteRegExp(webpackRequireName) + '\\\\(\"(dll-reference\\\\s(' + moduleNameReqExp + '))\"\\\\)\\\\)' + dependencyRegExp, 'g')\n  while ((match = re.exec(fnString))) {\n    if (!sources[match[2]]) {\n      retval[queueName].push(match[1])\n      sources[match[2]] = __nested_webpack_require_21062__(match[1]).m\n    }\n    retval[match[2]] = retval[match[2]] || []\n    retval[match[2]].push(match[4])\n  }\n\n  // convert 1e3 back to 1000 - this can be important after uglify-js converted 1000 to 1e3\n  var keys = Object.keys(retval);\n  for (var i = 0; i < keys.length; i++) {\n    for (var j = 0; j < retval[keys[i]].length; j++) {\n      if (isNumeric(retval[keys[i]][j])) {\n        retval[keys[i]][j] = 1 * retval[keys[i]][j];\n      }\n    }\n  }\n\n  return retval\n}\n\nfunction hasValuesInQueues (queues) {\n  var keys = Object.keys(queues)\n  return keys.reduce(function (hasValues, key) {\n    return hasValues || queues[key].length > 0\n  }, false)\n}\n\nfunction getRequiredModules (sources, moduleId) {\n  var modulesQueue = {\n    main: [moduleId]\n  }\n  var requiredModules = {\n    main: []\n  }\n  var seenModules = {\n    main: {}\n  }\n\n  while (hasValuesInQueues(modulesQueue)) {\n    var queues = Object.keys(modulesQueue)\n    for (var i = 0; i < queues.length; i++) {\n      var queueName = queues[i]\n      var queue = modulesQueue[queueName]\n      var moduleToCheck = queue.pop()\n      seenModules[queueName] = seenModules[queueName] || {}\n      if (seenModules[queueName][moduleToCheck] || !sources[queueName][moduleToCheck]) continue\n      seenModules[queueName][moduleToCheck] = true\n      requiredModules[queueName] = requiredModules[queueName] || []\n      requiredModules[queueName].push(moduleToCheck)\n      var newModules = getModuleDependencies(sources, sources[queueName][moduleToCheck], queueName)\n      var newModulesKeys = Object.keys(newModules)\n      for (var j = 0; j < newModulesKeys.length; j++) {\n        modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]] || []\n        modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]].concat(newModules[newModulesKeys[j]])\n      }\n    }\n  }\n\n  return requiredModules\n}\n\nmodule.exports = function (moduleId, options) {\n  options = options || {}\n  var sources = {\n    main: __nested_webpack_require_21062__.m\n  }\n\n  var requiredModules = options.all ? { main: Object.keys(sources.main) } : getRequiredModules(sources, moduleId)\n\n  var src = ''\n\n  Object.keys(requiredModules).filter(function (m) { return m !== 'main' }).forEach(function (module) {\n    var entryModule = 0\n    while (requiredModules[module][entryModule]) {\n      entryModule++\n    }\n    requiredModules[module].push(entryModule)\n    sources[module][entryModule] = '(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })'\n    src = src + 'var ' + module + ' = (' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(entryModule)) + ')({' + requiredModules[module].map(function (id) { return '' + JSON.stringify(id) + ': ' + sources[module][id].toString() }).join(',') + '});\\n'\n  })\n\n  src = src + 'new ((' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(moduleId)) + ')({' + requiredModules.main.map(function (id) { return '' + JSON.stringify(id) + ': ' + sources.main[id].toString() }).join(',') + '}))(self);'\n\n  var blob = new window.Blob([src], { type: 'text/javascript' })\n  if (options.bare) { return blob }\n\n  var URL = window.URL || window.webkitURL || window.mozURL || window.msURL\n\n  var workerUrl = URL.createObjectURL(blob)\n  var worker = new window.Worker(workerUrl)\n  worker.objectURL = workerUrl\n\n  return worker\n}\n\n\n/***/ }),\n\n/***/ \"./src/crypt/decrypter.js\":\n/*!********************************************!*\\\n  !*** ./src/crypt/decrypter.js + 3 modules ***!\n  \\********************************************/\n/*! exports provided: default */\n/*! ModuleConcatenation bailout: Cannot concat with ./src/errors.ts because of ./src/hls.ts */\n/*! ModuleConcatenation bailout: Cannot concat with ./src/events.js because of ./src/hls.ts */\n/*! ModuleConcatenation bailout: Cannot concat with ./src/utils/get-self-scope.js because of ./src/hls.ts */\n/*! ModuleConcatenation bailout: Cannot concat with ./src/utils/logger.js because of ./src/hls.ts */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_29202__) {\n\n\"use strict\";\n// ESM COMPAT FLAG\n__nested_webpack_require_29202__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/crypt/aes-crypto.js\nvar AESCrypto = /*#__PURE__*/function () {\n  function AESCrypto(subtle, iv) {\n    this.subtle = subtle;\n    this.aesIV = iv;\n  }\n\n  var _proto = AESCrypto.prototype;\n\n  _proto.decrypt = function decrypt(data, key) {\n    return this.subtle.decrypt({\n      name: 'AES-CBC',\n      iv: this.aesIV\n    }, key, data);\n  };\n\n  return AESCrypto;\n}();\n\n\n// CONCATENATED MODULE: ./src/crypt/fast-aes-key.js\nvar FastAESKey = /*#__PURE__*/function () {\n  function FastAESKey(subtle, key) {\n    this.subtle = subtle;\n    this.key = key;\n  }\n\n  var _proto = FastAESKey.prototype;\n\n  _proto.expandKey = function expandKey() {\n    return this.subtle.importKey('raw', this.key, {\n      name: 'AES-CBC'\n    }, false, ['encrypt', 'decrypt']);\n  };\n\n  return FastAESKey;\n}();\n\n/* harmony default export */ var fast_aes_key = (FastAESKey);\n// CONCATENATED MODULE: ./src/crypt/aes-decryptor.js\n// PKCS7\nfunction removePadding(buffer) {\n  var outputBytes = buffer.byteLength;\n  var paddingBytes = outputBytes && new DataView(buffer).getUint8(outputBytes - 1);\n\n  if (paddingBytes) {\n    return buffer.slice(0, outputBytes - paddingBytes);\n  } else {\n    return buffer;\n  }\n}\n\nvar AESDecryptor = /*#__PURE__*/function () {\n  function AESDecryptor() {\n    // Static after running initTable\n    this.rcon = [0x0, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n    this.subMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)];\n    this.invSubMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)];\n    this.sBox = new Uint32Array(256);\n    this.invSBox = new Uint32Array(256); // Changes during runtime\n\n    this.key = new Uint32Array(0);\n    this.initTable();\n  } // Using view.getUint32() also swaps the byte order.\n\n\n  var _proto = AESDecryptor.prototype;\n\n  _proto.uint8ArrayToUint32Array_ = function uint8ArrayToUint32Array_(arrayBuffer) {\n    var view = new DataView(arrayBuffer);\n    var newArray = new Uint32Array(4);\n\n    for (var i = 0; i < 4; i++) {\n      newArray[i] = view.getUint32(i * 4);\n    }\n\n    return newArray;\n  };\n\n  _proto.initTable = function initTable() {\n    var sBox = this.sBox;\n    var invSBox = this.invSBox;\n    var subMix = this.subMix;\n    var subMix0 = subMix[0];\n    var subMix1 = subMix[1];\n    var subMix2 = subMix[2];\n    var subMix3 = subMix[3];\n    var invSubMix = this.invSubMix;\n    var invSubMix0 = invSubMix[0];\n    var invSubMix1 = invSubMix[1];\n    var invSubMix2 = invSubMix[2];\n    var invSubMix3 = invSubMix[3];\n    var d = new Uint32Array(256);\n    var x = 0;\n    var xi = 0;\n    var i = 0;\n\n    for (i = 0; i < 256; i++) {\n      if (i < 128) {\n        d[i] = i << 1;\n      } else {\n        d[i] = i << 1 ^ 0x11b;\n      }\n    }\n\n    for (i = 0; i < 256; i++) {\n      var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;\n      sx = sx >>> 8 ^ sx & 0xff ^ 0x63;\n      sBox[x] = sx;\n      invSBox[sx] = x; // Compute multiplication\n\n      var x2 = d[x];\n      var x4 = d[x2];\n      var x8 = d[x4]; // Compute sub/invSub bytes, mix columns tables\n\n      var t = d[sx] * 0x101 ^ sx * 0x1010100;\n      subMix0[x] = t << 24 | t >>> 8;\n      subMix1[x] = t << 16 | t >>> 16;\n      subMix2[x] = t << 8 | t >>> 24;\n      subMix3[x] = t; // Compute inv sub bytes, inv mix columns tables\n\n      t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n      invSubMix0[sx] = t << 24 | t >>> 8;\n      invSubMix1[sx] = t << 16 | t >>> 16;\n      invSubMix2[sx] = t << 8 | t >>> 24;\n      invSubMix3[sx] = t; // Compute next counter\n\n      if (!x) {\n        x = xi = 1;\n      } else {\n        x = x2 ^ d[d[d[x8 ^ x2]]];\n        xi ^= d[d[xi]];\n      }\n    }\n  };\n\n  _proto.expandKey = function expandKey(keyBuffer) {\n    // convert keyBuffer to Uint32Array\n    var key = this.uint8ArrayToUint32Array_(keyBuffer);\n    var sameKey = true;\n    var offset = 0;\n\n    while (offset < key.length && sameKey) {\n      sameKey = key[offset] === this.key[offset];\n      offset++;\n    }\n\n    if (sameKey) {\n      return;\n    }\n\n    this.key = key;\n    var keySize = this.keySize = key.length;\n\n    if (keySize !== 4 && keySize !== 6 && keySize !== 8) {\n      throw new Error('Invalid aes key size=' + keySize);\n    }\n\n    var ksRows = this.ksRows = (keySize + 6 + 1) * 4;\n    var ksRow;\n    var invKsRow;\n    var keySchedule = this.keySchedule = new Uint32Array(ksRows);\n    var invKeySchedule = this.invKeySchedule = new Uint32Array(ksRows);\n    var sbox = this.sBox;\n    var rcon = this.rcon;\n    var invSubMix = this.invSubMix;\n    var invSubMix0 = invSubMix[0];\n    var invSubMix1 = invSubMix[1];\n    var invSubMix2 = invSubMix[2];\n    var invSubMix3 = invSubMix[3];\n    var prev;\n    var t;\n\n    for (ksRow = 0; ksRow < ksRows; ksRow++) {\n      if (ksRow < keySize) {\n        prev = keySchedule[ksRow] = key[ksRow];\n        continue;\n      }\n\n      t = prev;\n\n      if (ksRow % keySize === 0) {\n        // Rot word\n        t = t << 8 | t >>> 24; // Sub word\n\n        t = sbox[t >>> 24] << 24 | sbox[t >>> 16 & 0xff] << 16 | sbox[t >>> 8 & 0xff] << 8 | sbox[t & 0xff]; // Mix Rcon\n\n        t ^= rcon[ksRow / keySize | 0] << 24;\n      } else if (keySize > 6 && ksRow % keySize === 4) {\n        // Sub word\n        t = sbox[t >>> 24] << 24 | sbox[t >>> 16 & 0xff] << 16 | sbox[t >>> 8 & 0xff] << 8 | sbox[t & 0xff];\n      }\n\n      keySchedule[ksRow] = prev = (keySchedule[ksRow - keySize] ^ t) >>> 0;\n    }\n\n    for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n      ksRow = ksRows - invKsRow;\n\n      if (invKsRow & 3) {\n        t = keySchedule[ksRow];\n      } else {\n        t = keySchedule[ksRow - 4];\n      }\n\n      if (invKsRow < 4 || ksRow <= 4) {\n        invKeySchedule[invKsRow] = t;\n      } else {\n        invKeySchedule[invKsRow] = invSubMix0[sbox[t >>> 24]] ^ invSubMix1[sbox[t >>> 16 & 0xff]] ^ invSubMix2[sbox[t >>> 8 & 0xff]] ^ invSubMix3[sbox[t & 0xff]];\n      }\n\n      invKeySchedule[invKsRow] = invKeySchedule[invKsRow] >>> 0;\n    }\n  } // Adding this as a method greatly improves performance.\n  ;\n\n  _proto.networkToHostOrderSwap = function networkToHostOrderSwap(word) {\n    return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;\n  };\n\n  _proto.decrypt = function decrypt(inputArrayBuffer, offset, aesIV, removePKCS7Padding) {\n    var nRounds = this.keySize + 6;\n    var invKeySchedule = this.invKeySchedule;\n    var invSBOX = this.invSBox;\n    var invSubMix = this.invSubMix;\n    var invSubMix0 = invSubMix[0];\n    var invSubMix1 = invSubMix[1];\n    var invSubMix2 = invSubMix[2];\n    var invSubMix3 = invSubMix[3];\n    var initVector = this.uint8ArrayToUint32Array_(aesIV);\n    var initVector0 = initVector[0];\n    var initVector1 = initVector[1];\n    var initVector2 = initVector[2];\n    var initVector3 = initVector[3];\n    var inputInt32 = new Int32Array(inputArrayBuffer);\n    var outputInt32 = new Int32Array(inputInt32.length);\n    var t0, t1, t2, t3;\n    var s0, s1, s2, s3;\n    var inputWords0, inputWords1, inputWords2, inputWords3;\n    var ksRow, i;\n    var swapWord = this.networkToHostOrderSwap;\n\n    while (offset < inputInt32.length) {\n      inputWords0 = swapWord(inputInt32[offset]);\n      inputWords1 = swapWord(inputInt32[offset + 1]);\n      inputWords2 = swapWord(inputInt32[offset + 2]);\n      inputWords3 = swapWord(inputInt32[offset + 3]);\n      s0 = inputWords0 ^ invKeySchedule[0];\n      s1 = inputWords3 ^ invKeySchedule[1];\n      s2 = inputWords2 ^ invKeySchedule[2];\n      s3 = inputWords1 ^ invKeySchedule[3];\n      ksRow = 4; // Iterate through the rounds of decryption\n\n      for (i = 1; i < nRounds; i++) {\n        t0 = invSubMix0[s0 >>> 24] ^ invSubMix1[s1 >> 16 & 0xff] ^ invSubMix2[s2 >> 8 & 0xff] ^ invSubMix3[s3 & 0xff] ^ invKeySchedule[ksRow];\n        t1 = invSubMix0[s1 >>> 24] ^ invSubMix1[s2 >> 16 & 0xff] ^ invSubMix2[s3 >> 8 & 0xff] ^ invSubMix3[s0 & 0xff] ^ invKeySchedule[ksRow + 1];\n        t2 = invSubMix0[s2 >>> 24] ^ invSubMix1[s3 >> 16 & 0xff] ^ invSubMix2[s0 >> 8 & 0xff] ^ invSubMix3[s1 & 0xff] ^ invKeySchedule[ksRow + 2];\n        t3 = invSubMix0[s3 >>> 24] ^ invSubMix1[s0 >> 16 & 0xff] ^ invSubMix2[s1 >> 8 & 0xff] ^ invSubMix3[s2 & 0xff] ^ invKeySchedule[ksRow + 3]; // Update state\n\n        s0 = t0;\n        s1 = t1;\n        s2 = t2;\n        s3 = t3;\n        ksRow = ksRow + 4;\n      } // Shift rows, sub bytes, add round key\n\n\n      t0 = invSBOX[s0 >>> 24] << 24 ^ invSBOX[s1 >> 16 & 0xff] << 16 ^ invSBOX[s2 >> 8 & 0xff] << 8 ^ invSBOX[s3 & 0xff] ^ invKeySchedule[ksRow];\n      t1 = invSBOX[s1 >>> 24] << 24 ^ invSBOX[s2 >> 16 & 0xff] << 16 ^ invSBOX[s3 >> 8 & 0xff] << 8 ^ invSBOX[s0 & 0xff] ^ invKeySchedule[ksRow + 1];\n      t2 = invSBOX[s2 >>> 24] << 24 ^ invSBOX[s3 >> 16 & 0xff] << 16 ^ invSBOX[s0 >> 8 & 0xff] << 8 ^ invSBOX[s1 & 0xff] ^ invKeySchedule[ksRow + 2];\n      t3 = invSBOX[s3 >>> 24] << 24 ^ invSBOX[s0 >> 16 & 0xff] << 16 ^ invSBOX[s1 >> 8 & 0xff] << 8 ^ invSBOX[s2 & 0xff] ^ invKeySchedule[ksRow + 3];\n      ksRow = ksRow + 3; // Write\n\n      outputInt32[offset] = swapWord(t0 ^ initVector0);\n      outputInt32[offset + 1] = swapWord(t3 ^ initVector1);\n      outputInt32[offset + 2] = swapWord(t2 ^ initVector2);\n      outputInt32[offset + 3] = swapWord(t1 ^ initVector3); // reset initVector to last 4 unsigned int\n\n      initVector0 = inputWords0;\n      initVector1 = inputWords1;\n      initVector2 = inputWords2;\n      initVector3 = inputWords3;\n      offset = offset + 4;\n    }\n\n    return removePKCS7Padding ? removePadding(outputInt32.buffer) : outputInt32.buffer;\n  };\n\n  _proto.destroy = function destroy() {\n    this.key = undefined;\n    this.keySize = undefined;\n    this.ksRows = undefined;\n    this.sBox = undefined;\n    this.invSBox = undefined;\n    this.subMix = undefined;\n    this.invSubMix = undefined;\n    this.keySchedule = undefined;\n    this.invKeySchedule = undefined;\n    this.rcon = undefined;\n  };\n\n  return AESDecryptor;\n}();\n\n/* harmony default export */ var aes_decryptor = (AESDecryptor);\n// EXTERNAL MODULE: ./src/errors.ts\nvar errors = __nested_webpack_require_29202__(\"./src/errors.ts\");\n\n// EXTERNAL MODULE: ./src/utils/logger.js\nvar logger = __nested_webpack_require_29202__(\"./src/utils/logger.js\");\n\n// EXTERNAL MODULE: ./src/events.js\nvar events = __nested_webpack_require_29202__(\"./src/events.js\");\n\n// EXTERNAL MODULE: ./src/utils/get-self-scope.js\nvar get_self_scope = __nested_webpack_require_29202__(\"./src/utils/get-self-scope.js\");\n\n// CONCATENATED MODULE: ./src/crypt/decrypter.js\n\n\n\n\n\n\n // see https://stackoverflow.com/a/11237259/589493\n\nvar global = Object(get_self_scope[\"getSelfScope\"])(); // safeguard for code that might run both on worker and main thread\n\nvar decrypter_Decrypter = /*#__PURE__*/function () {\n  function Decrypter(observer, config, _temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        _ref$removePKCS7Paddi = _ref.removePKCS7Padding,\n        removePKCS7Padding = _ref$removePKCS7Paddi === void 0 ? true : _ref$removePKCS7Paddi;\n\n    this.logEnabled = true;\n    this.observer = observer;\n    this.config = config;\n    this.removePKCS7Padding = removePKCS7Padding; // built in decryptor expects PKCS7 padding\n\n    if (removePKCS7Padding) {\n      try {\n        var browserCrypto = global.crypto;\n\n        if (browserCrypto) {\n          this.subtle = browserCrypto.subtle || browserCrypto.webkitSubtle;\n        }\n      } catch (e) {}\n    }\n\n    this.disableWebCrypto = !this.subtle;\n  }\n\n  var _proto = Decrypter.prototype;\n\n  _proto.isSync = function isSync() {\n    return this.disableWebCrypto && this.config.enableSoftwareAES;\n  };\n\n  _proto.decrypt = function decrypt(data, key, iv, callback) {\n    var _this = this;\n\n    if (this.disableWebCrypto && this.config.enableSoftwareAES) {\n      if (this.logEnabled) {\n        logger[\"logger\"].log('JS AES decrypt');\n        this.logEnabled = false;\n      }\n\n      var decryptor = this.decryptor;\n\n      if (!decryptor) {\n        this.decryptor = decryptor = new aes_decryptor();\n      }\n\n      decryptor.expandKey(key);\n      callback(decryptor.decrypt(data, 0, iv, this.removePKCS7Padding));\n    } else {\n      if (this.logEnabled) {\n        logger[\"logger\"].log('WebCrypto AES decrypt');\n        this.logEnabled = false;\n      }\n\n      var subtle = this.subtle;\n\n      if (this.key !== key) {\n        this.key = key;\n        this.fastAesKey = new fast_aes_key(subtle, key);\n      }\n\n      this.fastAesKey.expandKey().then(function (aesKey) {\n        // decrypt using web crypto\n        var crypto = new AESCrypto(subtle, iv);\n        crypto.decrypt(data, aesKey).catch(function (err) {\n          _this.onWebCryptoError(err, data, key, iv, callback);\n        }).then(function (result) {\n          callback(result);\n        });\n      }).catch(function (err) {\n        _this.onWebCryptoError(err, data, key, iv, callback);\n      });\n    }\n  };\n\n  _proto.onWebCryptoError = function onWebCryptoError(err, data, key, iv, callback) {\n    if (this.config.enableSoftwareAES) {\n      logger[\"logger\"].log('WebCrypto Error, disable WebCrypto API');\n      this.disableWebCrypto = true;\n      this.logEnabled = true;\n      this.decrypt(data, key, iv, callback);\n    } else {\n      logger[\"logger\"].error(\"decrypting error : \" + err.message);\n      this.observer.trigger(events[\"default\"].ERROR, {\n        type: errors[\"ErrorTypes\"].MEDIA_ERROR,\n        details: errors[\"ErrorDetails\"].FRAG_DECRYPT_ERROR,\n        fatal: true,\n        reason: err.message\n      });\n    }\n  };\n\n  _proto.destroy = function destroy() {\n    var decryptor = this.decryptor;\n\n    if (decryptor) {\n      decryptor.destroy();\n      this.decryptor = undefined;\n    }\n  };\n\n  return Decrypter;\n}();\n\n/* harmony default export */ var decrypter = __webpack_exports__[\"default\"] = (decrypter_Decrypter);\n\n/***/ }),\n\n/***/ \"./src/demux/demuxer-inline.js\":\n/*!**************************************************!*\\\n  !*** ./src/demux/demuxer-inline.js + 12 modules ***!\n  \\**************************************************/\n/*! exports provided: default */\n/*! ModuleConcatenation bailout: Cannot concat with ./src/crypt/decrypter.js because of ./src/hls.ts */\n/*! ModuleConcatenation bailout: Cannot concat with ./src/demux/id3.js because of ./src/hls.ts */\n/*! ModuleConcatenation bailout: Cannot concat with ./src/demux/mp4demuxer.js because of ./src/hls.ts */\n/*! ModuleConcatenation bailout: Cannot concat with ./src/errors.ts because of ./src/hls.ts */\n/*! ModuleConcatenation bailout: Cannot concat with ./src/events.js because of ./src/hls.ts */\n/*! ModuleConcatenation bailout: Cannot concat with ./src/polyfills/number.js because of ./src/hls.ts */\n/*! ModuleConcatenation bailout: Cannot concat with ./src/utils/get-self-scope.js because of ./src/hls.ts */\n/*! ModuleConcatenation bailout: Cannot concat with ./src/utils/logger.js because of ./src/hls.ts */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_44123__) {\n\n\"use strict\";\n// ESM COMPAT FLAG\n__nested_webpack_require_44123__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/events.js\nvar events = __nested_webpack_require_44123__(\"./src/events.js\");\n\n// EXTERNAL MODULE: ./src/errors.ts\nvar errors = __nested_webpack_require_44123__(\"./src/errors.ts\");\n\n// EXTERNAL MODULE: ./src/crypt/decrypter.js + 3 modules\nvar crypt_decrypter = __nested_webpack_require_44123__(\"./src/crypt/decrypter.js\");\n\n// EXTERNAL MODULE: ./src/polyfills/number.js\nvar number = __nested_webpack_require_44123__(\"./src/polyfills/number.js\");\n\n// EXTERNAL MODULE: ./src/utils/logger.js\nvar logger = __nested_webpack_require_44123__(\"./src/utils/logger.js\");\n\n// EXTERNAL MODULE: ./src/utils/get-self-scope.js\nvar get_self_scope = __nested_webpack_require_44123__(\"./src/utils/get-self-scope.js\");\n\n// CONCATENATED MODULE: ./src/demux/adts.js\n/**\n * ADTS parser helper\n * @link https://wiki.multimedia.cx/index.php?title=ADTS\n */\n\n\n\n\nfunction getAudioConfig(observer, data, offset, audioCodec) {\n  var adtsObjectType,\n      // :int\n  adtsSampleingIndex,\n      // :int\n  adtsExtensionSampleingIndex,\n      // :int\n  adtsChanelConfig,\n      // :int\n  config,\n      userAgent = navigator.userAgent.toLowerCase(),\n      manifestCodec = audioCodec,\n      adtsSampleingRates = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350]; // byte 2\n\n  adtsObjectType = ((data[offset + 2] & 0xC0) >>> 6) + 1;\n  adtsSampleingIndex = (data[offset + 2] & 0x3C) >>> 2;\n\n  if (adtsSampleingIndex > adtsSampleingRates.length - 1) {\n    observer.trigger(events[\"default\"].ERROR, {\n      type: errors[\"ErrorTypes\"].MEDIA_ERROR,\n      details: errors[\"ErrorDetails\"].FRAG_PARSING_ERROR,\n      fatal: true,\n      reason: \"invalid ADTS sampling index:\" + adtsSampleingIndex\n    });\n    return;\n  }\n\n  adtsChanelConfig = (data[offset + 2] & 0x01) << 2; // byte 3\n\n  adtsChanelConfig |= (data[offset + 3] & 0xC0) >>> 6;\n  logger[\"logger\"].log(\"manifest codec:\" + audioCodec + \",ADTS data:type:\" + adtsObjectType + \",sampleingIndex:\" + adtsSampleingIndex + \"[\" + adtsSampleingRates[adtsSampleingIndex] + \"Hz],channelConfig:\" + adtsChanelConfig); // firefox: freq less than 24kHz = AAC SBR (HE-AAC)\n\n  if (/firefox/i.test(userAgent)) {\n    if (adtsSampleingIndex >= 6) {\n      adtsObjectType = 5;\n      config = new Array(4); // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies\n      // there is a factor 2 between frame sample rate and output sample rate\n      // multiply frequency by 2 (see table below, equivalent to substract 3)\n\n      adtsExtensionSampleingIndex = adtsSampleingIndex - 3;\n    } else {\n      adtsObjectType = 2;\n      config = new Array(2);\n      adtsExtensionSampleingIndex = adtsSampleingIndex;\n    } // Android : always use AAC\n\n  } else if (userAgent.indexOf('android') !== -1) {\n    adtsObjectType = 2;\n    config = new Array(2);\n    adtsExtensionSampleingIndex = adtsSampleingIndex;\n  } else {\n    /*  for other browsers (Chrome/Vivaldi/Opera ...)\n        always force audio type to be HE-AAC SBR, as some browsers do not support audio codec switch properly (like Chrome ...)\n    */\n    adtsObjectType = 5;\n    config = new Array(4); // if (manifest codec is HE-AAC or HE-AACv2) OR (manifest codec not specified AND frequency less than 24kHz)\n\n    if (audioCodec && (audioCodec.indexOf('mp4a.40.29') !== -1 || audioCodec.indexOf('mp4a.40.5') !== -1) || !audioCodec && adtsSampleingIndex >= 6) {\n      // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies\n      // there is a factor 2 between frame sample rate and output sample rate\n      // multiply frequency by 2 (see table below, equivalent to substract 3)\n      adtsExtensionSampleingIndex = adtsSampleingIndex - 3;\n    } else {\n      // if (manifest codec is AAC) AND (frequency less than 24kHz AND nb channel is 1) OR (manifest codec not specified and mono audio)\n      // Chrome fails to play back with low frequency AAC LC mono when initialized with HE-AAC.  This is not a problem with stereo.\n      if (audioCodec && audioCodec.indexOf('mp4a.40.2') !== -1 && (adtsSampleingIndex >= 6 && adtsChanelConfig === 1 || /vivaldi/i.test(userAgent)) || !audioCodec && adtsChanelConfig === 1) {\n        adtsObjectType = 2;\n        config = new Array(2);\n      }\n\n      adtsExtensionSampleingIndex = adtsSampleingIndex;\n    }\n  }\n  /* refer to http://wiki.multimedia.cx/index.php?title=MPEG-4_Audio#Audio_Specific_Config\n      ISO 14496-3 (AAC).pdf - Table 1.13 — Syntax of AudioSpecificConfig()\n    Audio Profile / Audio Object Type\n    0: Null\n    1: AAC Main\n    2: AAC LC (Low Complexity)\n    3: AAC SSR (Scalable Sample Rate)\n    4: AAC LTP (Long Term Prediction)\n    5: SBR (Spectral Band Replication)\n    6: AAC Scalable\n   sampling freq\n    0: 96000 Hz\n    1: 88200 Hz\n    2: 64000 Hz\n    3: 48000 Hz\n    4: 44100 Hz\n    5: 32000 Hz\n    6: 24000 Hz\n    7: 22050 Hz\n    8: 16000 Hz\n    9: 12000 Hz\n    10: 11025 Hz\n    11: 8000 Hz\n    12: 7350 Hz\n    13: Reserved\n    14: Reserved\n    15: frequency is written explictly\n    Channel Configurations\n    These are the channel configurations:\n    0: Defined in AOT Specifc Config\n    1: 1 channel: front-center\n    2: 2 channels: front-left, front-right\n  */\n  // audioObjectType = profile => profile, the MPEG-4 Audio Object Type minus 1\n\n\n  config[0] = adtsObjectType << 3; // samplingFrequencyIndex\n\n  config[0] |= (adtsSampleingIndex & 0x0E) >> 1;\n  config[1] |= (adtsSampleingIndex & 0x01) << 7; // channelConfiguration\n\n  config[1] |= adtsChanelConfig << 3;\n\n  if (adtsObjectType === 5) {\n    // adtsExtensionSampleingIndex\n    config[1] |= (adtsExtensionSampleingIndex & 0x0E) >> 1;\n    config[2] = (adtsExtensionSampleingIndex & 0x01) << 7; // adtsObjectType (force to 2, chrome is checking that object type is less than 5 ???\n    //    https://chromium.googlesource.com/chromium/src.git/+/master/media/formats/mp4/aac.cc\n\n    config[2] |= 2 << 2;\n    config[3] = 0;\n  }\n\n  return {\n    config: config,\n    samplerate: adtsSampleingRates[adtsSampleingIndex],\n    channelCount: adtsChanelConfig,\n    codec: 'mp4a.40.' + adtsObjectType,\n    manifestCodec: manifestCodec\n  };\n}\nfunction isHeaderPattern(data, offset) {\n  return data[offset] === 0xff && (data[offset + 1] & 0xf6) === 0xf0;\n}\nfunction getHeaderLength(data, offset) {\n  return data[offset + 1] & 0x01 ? 7 : 9;\n}\nfunction getFullFrameLength(data, offset) {\n  return (data[offset + 3] & 0x03) << 11 | data[offset + 4] << 3 | (data[offset + 5] & 0xE0) >>> 5;\n}\nfunction isHeader(data, offset) {\n  // Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1\n  // Layer bits (position 14 and 15) in header should be always 0 for ADTS\n  // More info https://wiki.multimedia.cx/index.php?title=ADTS\n  if (offset + 1 < data.length && isHeaderPattern(data, offset)) {\n    return true;\n  }\n\n  return false;\n}\nfunction adts_probe(data, offset) {\n  // same as isHeader but we also check that ADTS frame follows last ADTS frame\n  // or end of data is reached\n  if (isHeader(data, offset)) {\n    // ADTS header Length\n    var headerLength = getHeaderLength(data, offset);\n\n    if (offset + headerLength >= data.length) {\n      return false;\n    } // ADTS frame Length\n\n\n    var frameLength = getFullFrameLength(data, offset);\n\n    if (frameLength <= headerLength) {\n      return false;\n    }\n\n    var newOffset = offset + frameLength;\n\n    if (newOffset === data.length || newOffset + 1 < data.length && isHeaderPattern(data, newOffset)) {\n      return true;\n    }\n  }\n\n  return false;\n}\nfunction initTrackConfig(track, observer, data, offset, audioCodec) {\n  if (!track.samplerate) {\n    var config = getAudioConfig(observer, data, offset, audioCodec);\n    track.config = config.config;\n    track.samplerate = config.samplerate;\n    track.channelCount = config.channelCount;\n    track.codec = config.codec;\n    track.manifestCodec = config.manifestCodec;\n    logger[\"logger\"].log(\"parsed codec:\" + track.codec + \",rate:\" + config.samplerate + \",nb channel:\" + config.channelCount);\n  }\n}\nfunction getFrameDuration(samplerate) {\n  return 1024 * 90000 / samplerate;\n}\nfunction parseFrameHeader(data, offset, pts, frameIndex, frameDuration) {\n  var headerLength, frameLength, stamp;\n  var length = data.length; // The protection skip bit tells us if we have 2 bytes of CRC data at the end of the ADTS header\n\n  headerLength = getHeaderLength(data, offset); // retrieve frame size\n\n  frameLength = getFullFrameLength(data, offset);\n  frameLength -= headerLength;\n\n  if (frameLength > 0 && offset + headerLength + frameLength <= length) {\n    stamp = pts + frameIndex * frameDuration; // logger.log(`AAC frame, offset/length/total/pts:${offset+headerLength}/${frameLength}/${data.byteLength}/${(stamp/90).toFixed(0)}`);\n\n    return {\n      headerLength: headerLength,\n      frameLength: frameLength,\n      stamp: stamp\n    };\n  }\n\n  return undefined;\n}\nfunction appendFrame(track, data, offset, pts, frameIndex) {\n  var frameDuration = getFrameDuration(track.samplerate);\n  var header = parseFrameHeader(data, offset, pts, frameIndex, frameDuration);\n\n  if (header) {\n    var stamp = header.stamp;\n    var headerLength = header.headerLength;\n    var frameLength = header.frameLength; // logger.log(`AAC frame, offset/length/total/pts:${offset+headerLength}/${frameLength}/${data.byteLength}/${(stamp/90).toFixed(0)}`);\n\n    var aacSample = {\n      unit: data.subarray(offset + headerLength, offset + headerLength + frameLength),\n      pts: stamp,\n      dts: stamp\n    };\n    track.samples.push(aacSample);\n    return {\n      sample: aacSample,\n      length: frameLength + headerLength\n    };\n  }\n\n  return undefined;\n}\n// EXTERNAL MODULE: ./src/demux/id3.js\nvar id3 = __nested_webpack_require_44123__(\"./src/demux/id3.js\");\n\n// CONCATENATED MODULE: ./src/demux/aacdemuxer.js\n\n\n/**\n * AAC demuxer\n */\n\n\n\n\nvar aacdemuxer_AACDemuxer = /*#__PURE__*/function () {\n  function AACDemuxer(observer, remuxer, config) {\n    this.observer = observer;\n    this.config = config;\n    this.remuxer = remuxer;\n  }\n\n  var _proto = AACDemuxer.prototype;\n\n  _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, duration) {\n    this._audioTrack = {\n      container: 'audio/adts',\n      type: 'audio',\n      id: 0,\n      sequenceNumber: 0,\n      isAAC: true,\n      samples: [],\n      len: 0,\n      manifestCodec: audioCodec,\n      duration: duration,\n      inputTimeScale: 90000\n    };\n  };\n\n  _proto.resetTimeStamp = function resetTimeStamp() {};\n\n  AACDemuxer.probe = function probe(data) {\n    if (!data) {\n      return false;\n    } // Check for the ADTS sync word\n    // Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1\n    // Layer bits (position 14 and 15) in header should be always 0 for ADTS\n    // More info https://wiki.multimedia.cx/index.php?title=ADTS\n\n\n    var id3Data = id3[\"default\"].getID3Data(data, 0) || [];\n    var offset = id3Data.length;\n\n    for (var length = data.length; offset < length; offset++) {\n      if (adts_probe(data, offset)) {\n        logger[\"logger\"].log('ADTS sync word found !');\n        return true;\n      }\n    }\n\n    return false;\n  } // feed incoming data to the front of the parsing pipeline\n  ;\n\n  _proto.append = function append(data, timeOffset, contiguous, accurateTimeOffset) {\n    var track = this._audioTrack;\n    var id3Data = id3[\"default\"].getID3Data(data, 0) || [];\n    var timestamp = id3[\"default\"].getTimeStamp(id3Data);\n    var pts = Object(number[\"isFiniteNumber\"])(timestamp) ? timestamp * 90 : timeOffset * 90000;\n    var frameIndex = 0;\n    var stamp = pts;\n    var length = data.length;\n    var offset = id3Data.length;\n    var id3Samples = [{\n      pts: stamp,\n      dts: stamp,\n      data: id3Data\n    }];\n\n    while (offset < length - 1) {\n      if (isHeader(data, offset) && offset + 5 < length) {\n        initTrackConfig(track, this.observer, data, offset, track.manifestCodec);\n        var frame = appendFrame(track, data, offset, pts, frameIndex);\n\n        if (frame) {\n          offset += frame.length;\n          stamp = frame.sample.pts;\n          frameIndex++;\n        } else {\n          logger[\"logger\"].log('Unable to parse AAC frame');\n          break;\n        }\n      } else if (id3[\"default\"].isHeader(data, offset)) {\n        id3Data = id3[\"default\"].getID3Data(data, offset);\n        id3Samples.push({\n          pts: stamp,\n          dts: stamp,\n          data: id3Data\n        });\n        offset += id3Data.length;\n      } else {\n        // nothing found, keep looking\n        offset++;\n      }\n    }\n\n    this.remuxer.remux(track, {\n      samples: []\n    }, {\n      samples: id3Samples,\n      inputTimeScale: 90000\n    }, {\n      samples: []\n    }, timeOffset, contiguous, accurateTimeOffset);\n  };\n\n  _proto.destroy = function destroy() {};\n\n  return AACDemuxer;\n}();\n\n/* harmony default export */ var aacdemuxer = (aacdemuxer_AACDemuxer);\n// EXTERNAL MODULE: ./src/demux/mp4demuxer.js\nvar mp4demuxer = __nested_webpack_require_44123__(\"./src/demux/mp4demuxer.js\");\n\n// CONCATENATED MODULE: ./src/demux/mpegaudio.js\n/**\n *  MPEG parser helper\n */\nvar MpegAudio = {\n  BitratesMap: [32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160],\n  SamplingRateMap: [44100, 48000, 32000, 22050, 24000, 16000, 11025, 12000, 8000],\n  SamplesCoefficients: [// MPEG 2.5\n  [0, // Reserved\n  72, // Layer3\n  144, // Layer2\n  12 // Layer1\n  ], // Reserved\n  [0, // Reserved\n  0, // Layer3\n  0, // Layer2\n  0 // Layer1\n  ], // MPEG 2\n  [0, // Reserved\n  72, // Layer3\n  144, // Layer2\n  12 // Layer1\n  ], // MPEG 1\n  [0, // Reserved\n  144, // Layer3\n  144, // Layer2\n  12 // Layer1\n  ]],\n  BytesInSlot: [0, // Reserved\n  1, // Layer3\n  1, // Layer2\n  4 // Layer1\n  ],\n  appendFrame: function appendFrame(track, data, offset, pts, frameIndex) {\n    // Using http://www.datavoyage.com/mpgscript/mpeghdr.htm as a reference\n    if (offset + 24 > data.length) {\n      return undefined;\n    }\n\n    var header = this.parseHeader(data, offset);\n\n    if (header && offset + header.frameLength <= data.length) {\n      var frameDuration = header.samplesPerFrame * 90000 / header.sampleRate;\n      var stamp = pts + frameIndex * frameDuration;\n      var sample = {\n        unit: data.subarray(offset, offset + header.frameLength),\n        pts: stamp,\n        dts: stamp\n      };\n      track.config = [];\n      track.channelCount = header.channelCount;\n      track.samplerate = header.sampleRate;\n      track.samples.push(sample);\n      return {\n        sample: sample,\n        length: header.frameLength\n      };\n    }\n\n    return undefined;\n  },\n  parseHeader: function parseHeader(data, offset) {\n    var headerB = data[offset + 1] >> 3 & 3;\n    var headerC = data[offset + 1] >> 1 & 3;\n    var headerE = data[offset + 2] >> 4 & 15;\n    var headerF = data[offset + 2] >> 2 & 3;\n    var headerG = data[offset + 2] >> 1 & 1;\n\n    if (headerB !== 1 && headerE !== 0 && headerE !== 15 && headerF !== 3) {\n      var columnInBitrates = headerB === 3 ? 3 - headerC : headerC === 3 ? 3 : 4;\n      var bitRate = MpegAudio.BitratesMap[columnInBitrates * 14 + headerE - 1] * 1000;\n      var columnInSampleRates = headerB === 3 ? 0 : headerB === 2 ? 1 : 2;\n      var sampleRate = MpegAudio.SamplingRateMap[columnInSampleRates * 3 + headerF];\n      var channelCount = data[offset + 3] >> 6 === 3 ? 1 : 2; // If bits of channel mode are `11` then it is a single channel (Mono)\n\n      var sampleCoefficient = MpegAudio.SamplesCoefficients[headerB][headerC];\n      var bytesInSlot = MpegAudio.BytesInSlot[headerC];\n      var samplesPerFrame = sampleCoefficient * 8 * bytesInSlot;\n      var frameLength = parseInt(sampleCoefficient * bitRate / sampleRate + headerG, 10) * bytesInSlot;\n      return {\n        sampleRate: sampleRate,\n        channelCount: channelCount,\n        frameLength: frameLength,\n        samplesPerFrame: samplesPerFrame\n      };\n    }\n\n    return undefined;\n  },\n  isHeaderPattern: function isHeaderPattern(data, offset) {\n    return data[offset] === 0xff && (data[offset + 1] & 0xe0) === 0xe0 && (data[offset + 1] & 0x06) !== 0x00;\n  },\n  isHeader: function isHeader(data, offset) {\n    // Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1\n    // Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)\n    // More info http://www.mp3-tech.org/programmer/frame_header.html\n    if (offset + 1 < data.length && this.isHeaderPattern(data, offset)) {\n      return true;\n    }\n\n    return false;\n  },\n  probe: function probe(data, offset) {\n    // same as isHeader but we also check that MPEG frame follows last MPEG frame\n    // or end of data is reached\n    if (offset + 1 < data.length && this.isHeaderPattern(data, offset)) {\n      // MPEG header Length\n      var headerLength = 4; // MPEG frame Length\n\n      var header = this.parseHeader(data, offset);\n      var frameLength = headerLength;\n\n      if (header && header.frameLength) {\n        frameLength = header.frameLength;\n      }\n\n      var newOffset = offset + frameLength;\n\n      if (newOffset === data.length || newOffset + 1 < data.length && this.isHeaderPattern(data, newOffset)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n};\n/* harmony default export */ var mpegaudio = (MpegAudio);\n// CONCATENATED MODULE: ./src/demux/exp-golomb.js\n/**\n * Parser for exponential Golomb codes, a variable-bitwidth number encoding scheme used by h264.\n*/\n\n\nvar exp_golomb_ExpGolomb = /*#__PURE__*/function () {\n  function ExpGolomb(data) {\n    this.data = data; // the number of bytes left to examine in this.data\n\n    this.bytesAvailable = data.byteLength; // the current word being examined\n\n    this.word = 0; // :uint\n    // the number of bits left to examine in the current word\n\n    this.bitsAvailable = 0; // :uint\n  } // ():void\n\n\n  var _proto = ExpGolomb.prototype;\n\n  _proto.loadWord = function loadWord() {\n    var data = this.data,\n        bytesAvailable = this.bytesAvailable,\n        position = data.byteLength - bytesAvailable,\n        workingBytes = new Uint8Array(4),\n        availableBytes = Math.min(4, bytesAvailable);\n\n    if (availableBytes === 0) {\n      throw new Error('no bytes available');\n    }\n\n    workingBytes.set(data.subarray(position, position + availableBytes));\n    this.word = new DataView(workingBytes.buffer).getUint32(0); // track the amount of this.data that has been processed\n\n    this.bitsAvailable = availableBytes * 8;\n    this.bytesAvailable -= availableBytes;\n  } // (count:int):void\n  ;\n\n  _proto.skipBits = function skipBits(count) {\n    var skipBytes; // :int\n\n    if (this.bitsAvailable > count) {\n      this.word <<= count;\n      this.bitsAvailable -= count;\n    } else {\n      count -= this.bitsAvailable;\n      skipBytes = count >> 3;\n      count -= skipBytes >> 3;\n      this.bytesAvailable -= skipBytes;\n      this.loadWord();\n      this.word <<= count;\n      this.bitsAvailable -= count;\n    }\n  } // (size:int):uint\n  ;\n\n  _proto.readBits = function readBits(size) {\n    var bits = Math.min(this.bitsAvailable, size),\n        // :uint\n    valu = this.word >>> 32 - bits; // :uint\n\n    if (size > 32) {\n      logger[\"logger\"].error('Cannot read more than 32 bits at a time');\n    }\n\n    this.bitsAvailable -= bits;\n\n    if (this.bitsAvailable > 0) {\n      this.word <<= bits;\n    } else if (this.bytesAvailable > 0) {\n      this.loadWord();\n    }\n\n    bits = size - bits;\n\n    if (bits > 0 && this.bitsAvailable) {\n      return valu << bits | this.readBits(bits);\n    } else {\n      return valu;\n    }\n  } // ():uint\n  ;\n\n  _proto.skipLZ = function skipLZ() {\n    var leadingZeroCount; // :uint\n\n    for (leadingZeroCount = 0; leadingZeroCount < this.bitsAvailable; ++leadingZeroCount) {\n      if ((this.word & 0x80000000 >>> leadingZeroCount) !== 0) {\n        // the first bit of working word is 1\n        this.word <<= leadingZeroCount;\n        this.bitsAvailable -= leadingZeroCount;\n        return leadingZeroCount;\n      }\n    } // we exhausted word and still have not found a 1\n\n\n    this.loadWord();\n    return leadingZeroCount + this.skipLZ();\n  } // ():void\n  ;\n\n  _proto.skipUEG = function skipUEG() {\n    this.skipBits(1 + this.skipLZ());\n  } // ():void\n  ;\n\n  _proto.skipEG = function skipEG() {\n    this.skipBits(1 + this.skipLZ());\n  } // ():uint\n  ;\n\n  _proto.readUEG = function readUEG() {\n    var clz = this.skipLZ(); // :uint\n\n    return this.readBits(clz + 1) - 1;\n  } // ():int\n  ;\n\n  _proto.readEG = function readEG() {\n    var valu = this.readUEG(); // :int\n\n    if (0x01 & valu) {\n      // the number is odd if the low order bit is set\n      return 1 + valu >>> 1; // add 1 to make it even, and divide by 2\n    } else {\n      return -1 * (valu >>> 1); // divide by two then make it negative\n    }\n  } // Some convenience functions\n  // :Boolean\n  ;\n\n  _proto.readBoolean = function readBoolean() {\n    return this.readBits(1) === 1;\n  } // ():int\n  ;\n\n  _proto.readUByte = function readUByte() {\n    return this.readBits(8);\n  } // ():int\n  ;\n\n  _proto.readUShort = function readUShort() {\n    return this.readBits(16);\n  } // ():int\n  ;\n\n  _proto.readUInt = function readUInt() {\n    return this.readBits(32);\n  }\n  /**\n   * Advance the ExpGolomb decoder past a scaling list. The scaling\n   * list is optionally transmitted as part of a sequence parameter\n   * set and is not relevant to transmuxing.\n   * @param count {number} the number of entries in this scaling list\n   * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n   */\n  ;\n\n  _proto.skipScalingList = function skipScalingList(count) {\n    var lastScale = 8,\n        nextScale = 8,\n        j,\n        deltaScale;\n\n    for (j = 0; j < count; j++) {\n      if (nextScale !== 0) {\n        deltaScale = this.readEG();\n        nextScale = (lastScale + deltaScale + 256) % 256;\n      }\n\n      lastScale = nextScale === 0 ? lastScale : nextScale;\n    }\n  }\n  /**\n   * Read a sequence parameter set and return some interesting video\n   * properties. A sequence parameter set is the H264 metadata that\n   * describes the properties of upcoming video frames.\n   * @param data {Uint8Array} the bytes of a sequence parameter set\n   * @return {object} an object with configuration parsed from the\n   * sequence parameter set, including the dimensions of the\n   * associated video frames.\n   */\n  ;\n\n  _proto.readSPS = function readSPS() {\n    var frameCropLeftOffset = 0,\n        frameCropRightOffset = 0,\n        frameCropTopOffset = 0,\n        frameCropBottomOffset = 0,\n        profileIdc,\n        profileCompat,\n        levelIdc,\n        numRefFramesInPicOrderCntCycle,\n        picWidthInMbsMinus1,\n        picHeightInMapUnitsMinus1,\n        frameMbsOnlyFlag,\n        scalingListCount,\n        i,\n        readUByte = this.readUByte.bind(this),\n        readBits = this.readBits.bind(this),\n        readUEG = this.readUEG.bind(this),\n        readBoolean = this.readBoolean.bind(this),\n        skipBits = this.skipBits.bind(this),\n        skipEG = this.skipEG.bind(this),\n        skipUEG = this.skipUEG.bind(this),\n        skipScalingList = this.skipScalingList.bind(this);\n    readUByte();\n    profileIdc = readUByte(); // profile_idc\n\n    profileCompat = readBits(5); // constraint_set[0-4]_flag, u(5)\n\n    skipBits(3); // reserved_zero_3bits u(3),\n\n    levelIdc = readUByte(); // level_idc u(8)\n\n    skipUEG(); // seq_parameter_set_id\n    // some profiles have more optional data we don't need\n\n    if (profileIdc === 100 || profileIdc === 110 || profileIdc === 122 || profileIdc === 244 || profileIdc === 44 || profileIdc === 83 || profileIdc === 86 || profileIdc === 118 || profileIdc === 128) {\n      var chromaFormatIdc = readUEG();\n\n      if (chromaFormatIdc === 3) {\n        skipBits(1);\n      } // separate_colour_plane_flag\n\n\n      skipUEG(); // bit_depth_luma_minus8\n\n      skipUEG(); // bit_depth_chroma_minus8\n\n      skipBits(1); // qpprime_y_zero_transform_bypass_flag\n\n      if (readBoolean()) {\n        // seq_scaling_matrix_present_flag\n        scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;\n\n        for (i = 0; i < scalingListCount; i++) {\n          if (readBoolean()) {\n            // seq_scaling_list_present_flag[ i ]\n            if (i < 6) {\n              skipScalingList(16);\n            } else {\n              skipScalingList(64);\n            }\n          }\n        }\n      }\n    }\n\n    skipUEG(); // log2_max_frame_num_minus4\n\n    var picOrderCntType = readUEG();\n\n    if (picOrderCntType === 0) {\n      readUEG(); // log2_max_pic_order_cnt_lsb_minus4\n    } else if (picOrderCntType === 1) {\n      skipBits(1); // delta_pic_order_always_zero_flag\n\n      skipEG(); // offset_for_non_ref_pic\n\n      skipEG(); // offset_for_top_to_bottom_field\n\n      numRefFramesInPicOrderCntCycle = readUEG();\n\n      for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n        skipEG();\n      } // offset_for_ref_frame[ i ]\n\n    }\n\n    skipUEG(); // max_num_ref_frames\n\n    skipBits(1); // gaps_in_frame_num_value_allowed_flag\n\n    picWidthInMbsMinus1 = readUEG();\n    picHeightInMapUnitsMinus1 = readUEG();\n    frameMbsOnlyFlag = readBits(1);\n\n    if (frameMbsOnlyFlag === 0) {\n      skipBits(1);\n    } // mb_adaptive_frame_field_flag\n\n\n    skipBits(1); // direct_8x8_inference_flag\n\n    if (readBoolean()) {\n      // frame_cropping_flag\n      frameCropLeftOffset = readUEG();\n      frameCropRightOffset = readUEG();\n      frameCropTopOffset = readUEG();\n      frameCropBottomOffset = readUEG();\n    }\n\n    var pixelRatio = [1, 1];\n\n    if (readBoolean()) {\n      // vui_parameters_present_flag\n      if (readBoolean()) {\n        // aspect_ratio_info_present_flag\n        var aspectRatioIdc = readUByte();\n\n        switch (aspectRatioIdc) {\n          case 1:\n            pixelRatio = [1, 1];\n            break;\n\n          case 2:\n            pixelRatio = [12, 11];\n            break;\n\n          case 3:\n            pixelRatio = [10, 11];\n            break;\n\n          case 4:\n            pixelRatio = [16, 11];\n            break;\n\n          case 5:\n            pixelRatio = [40, 33];\n            break;\n\n          case 6:\n            pixelRatio = [24, 11];\n            break;\n\n          case 7:\n            pixelRatio = [20, 11];\n            break;\n\n          case 8:\n            pixelRatio = [32, 11];\n            break;\n\n          case 9:\n            pixelRatio = [80, 33];\n            break;\n\n          case 10:\n            pixelRatio = [18, 11];\n            break;\n\n          case 11:\n            pixelRatio = [15, 11];\n            break;\n\n          case 12:\n            pixelRatio = [64, 33];\n            break;\n\n          case 13:\n            pixelRatio = [160, 99];\n            break;\n\n          case 14:\n            pixelRatio = [4, 3];\n            break;\n\n          case 15:\n            pixelRatio = [3, 2];\n            break;\n\n          case 16:\n            pixelRatio = [2, 1];\n            break;\n\n          case 255:\n            {\n              pixelRatio = [readUByte() << 8 | readUByte(), readUByte() << 8 | readUByte()];\n              break;\n            }\n        }\n      }\n    }\n\n    return {\n      width: Math.ceil((picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2),\n      height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - (frameMbsOnlyFlag ? 2 : 4) * (frameCropTopOffset + frameCropBottomOffset),\n      pixelRatio: pixelRatio\n    };\n  };\n\n  _proto.readSliceType = function readSliceType() {\n    // skip NALu type\n    this.readUByte(); // discard first_mb_in_slice\n\n    this.readUEG(); // return slice_type\n\n    return this.readUEG();\n  };\n\n  return ExpGolomb;\n}();\n\n/* harmony default export */ var exp_golomb = (exp_golomb_ExpGolomb);\n// CONCATENATED MODULE: ./src/demux/sample-aes.js\n/**\n * SAMPLE-AES decrypter\n*/\n\n\nvar sample_aes_SampleAesDecrypter = /*#__PURE__*/function () {\n  function SampleAesDecrypter(observer, config, decryptdata, discardEPB) {\n    this.decryptdata = decryptdata;\n    this.discardEPB = discardEPB;\n    this.decrypter = new crypt_decrypter[\"default\"](observer, config, {\n      removePKCS7Padding: false\n    });\n  }\n\n  var _proto = SampleAesDecrypter.prototype;\n\n  _proto.decryptBuffer = function decryptBuffer(encryptedData, callback) {\n    this.decrypter.decrypt(encryptedData, this.decryptdata.key.buffer, this.decryptdata.iv.buffer, callback);\n  } // AAC - encrypt all full 16 bytes blocks starting from offset 16\n  ;\n\n  _proto.decryptAacSample = function decryptAacSample(samples, sampleIndex, callback, sync) {\n    var curUnit = samples[sampleIndex].unit;\n    var encryptedData = curUnit.subarray(16, curUnit.length - curUnit.length % 16);\n    var encryptedBuffer = encryptedData.buffer.slice(encryptedData.byteOffset, encryptedData.byteOffset + encryptedData.length);\n    var localthis = this;\n    this.decryptBuffer(encryptedBuffer, function (decryptedData) {\n      decryptedData = new Uint8Array(decryptedData);\n      curUnit.set(decryptedData, 16);\n\n      if (!sync) {\n        localthis.decryptAacSamples(samples, sampleIndex + 1, callback);\n      }\n    });\n  };\n\n  _proto.decryptAacSamples = function decryptAacSamples(samples, sampleIndex, callback) {\n    for (;; sampleIndex++) {\n      if (sampleIndex >= samples.length) {\n        callback();\n        return;\n      }\n\n      if (samples[sampleIndex].unit.length < 32) {\n        continue;\n      }\n\n      var sync = this.decrypter.isSync();\n      this.decryptAacSample(samples, sampleIndex, callback, sync);\n\n      if (!sync) {\n        return;\n      }\n    }\n  } // AVC - encrypt one 16 bytes block out of ten, starting from offset 32\n  ;\n\n  _proto.getAvcEncryptedData = function getAvcEncryptedData(decodedData) {\n    var encryptedDataLen = Math.floor((decodedData.length - 48) / 160) * 16 + 16;\n    var encryptedData = new Int8Array(encryptedDataLen);\n    var outputPos = 0;\n\n    for (var inputPos = 32; inputPos <= decodedData.length - 16; inputPos += 160, outputPos += 16) {\n      encryptedData.set(decodedData.subarray(inputPos, inputPos + 16), outputPos);\n    }\n\n    return encryptedData;\n  };\n\n  _proto.getAvcDecryptedUnit = function getAvcDecryptedUnit(decodedData, decryptedData) {\n    decryptedData = new Uint8Array(decryptedData);\n    var inputPos = 0;\n\n    for (var outputPos = 32; outputPos <= decodedData.length - 16; outputPos += 160, inputPos += 16) {\n      decodedData.set(decryptedData.subarray(inputPos, inputPos + 16), outputPos);\n    }\n\n    return decodedData;\n  };\n\n  _proto.decryptAvcSample = function decryptAvcSample(samples, sampleIndex, unitIndex, callback, curUnit, sync) {\n    var decodedData = this.discardEPB(curUnit.data);\n    var encryptedData = this.getAvcEncryptedData(decodedData);\n    var localthis = this;\n    this.decryptBuffer(encryptedData.buffer, function (decryptedData) {\n      curUnit.data = localthis.getAvcDecryptedUnit(decodedData, decryptedData);\n\n      if (!sync) {\n        localthis.decryptAvcSamples(samples, sampleIndex, unitIndex + 1, callback);\n      }\n    });\n  };\n\n  _proto.decryptAvcSamples = function decryptAvcSamples(samples, sampleIndex, unitIndex, callback) {\n    for (;; sampleIndex++, unitIndex = 0) {\n      if (sampleIndex >= samples.length) {\n        callback();\n        return;\n      }\n\n      var curUnits = samples[sampleIndex].units;\n\n      for (;; unitIndex++) {\n        if (unitIndex >= curUnits.length) {\n          break;\n        }\n\n        var curUnit = curUnits[unitIndex];\n\n        if (curUnit.data.length <= 48 || curUnit.type !== 1 && curUnit.type !== 5) {\n          continue;\n        }\n\n        var sync = this.decrypter.isSync();\n        this.decryptAvcSample(samples, sampleIndex, unitIndex, callback, curUnit, sync);\n\n        if (!sync) {\n          return;\n        }\n      }\n    }\n  };\n\n  return SampleAesDecrypter;\n}();\n\n/* harmony default export */ var sample_aes = (sample_aes_SampleAesDecrypter);\n// CONCATENATED MODULE: ./src/demux/tsdemuxer.js\n/**\n * highly optimized TS demuxer:\n * parse PAT, PMT\n * extract PES packet from audio and video PIDs\n * extract AVC/H264 NAL units and AAC/ADTS samples from PES packet\n * trigger the remuxer upon parsing completion\n * it also tries to workaround as best as it can audio codec switch (HE-AAC to AAC and vice versa), without having to restart the MediaSource.\n * it also controls the remuxing process :\n * upon discontinuity or level switch detection, it will also notifies the remuxer so that it can reset its state.\n*/\n\n\n\n\n // import Hex from '../utils/hex';\n\n\n\n // We are using fixed track IDs for driving the MP4 remuxer\n// instead of following the TS PIDs.\n// There is no reason not to do this and some browsers/SourceBuffer-demuxers\n// may not like if there are TrackID \"switches\"\n// See https://github.com/video-dev/hls.js/issues/1331\n// Here we are mapping our internal track types to constant MP4 track IDs\n// With MSE currently one can only have one track of each, and we are muxing\n// whatever video/audio rendition in them.\n\nvar RemuxerTrackIdConfig = {\n  video: 1,\n  audio: 2,\n  id3: 3,\n  text: 4\n};\n\nvar tsdemuxer_TSDemuxer = /*#__PURE__*/function () {\n  function TSDemuxer(observer, remuxer, config, typeSupported) {\n    this.observer = observer;\n    this.config = config;\n    this.typeSupported = typeSupported;\n    this.remuxer = remuxer;\n    this.sampleAes = null;\n    this.pmtUnknownTypes = {};\n  }\n\n  var _proto = TSDemuxer.prototype;\n\n  _proto.setDecryptData = function setDecryptData(decryptdata) {\n    if (decryptdata != null && decryptdata.key != null && decryptdata.method === 'SAMPLE-AES') {\n      this.sampleAes = new sample_aes(this.observer, this.config, decryptdata, this.discardEPB);\n    } else {\n      this.sampleAes = null;\n    }\n  };\n\n  TSDemuxer.probe = function probe(data) {\n    var syncOffset = TSDemuxer._syncOffset(data);\n\n    if (syncOffset < 0) {\n      return false;\n    } else {\n      if (syncOffset) {\n        logger[\"logger\"].warn(\"MPEG2-TS detected but first sync word found @ offset \" + syncOffset + \", junk ahead ?\");\n      }\n\n      return true;\n    }\n  };\n\n  TSDemuxer._syncOffset = function _syncOffset(data) {\n    // scan 1000 first bytes\n    var scanwindow = Math.min(1000, data.length - 3 * 188);\n    var i = 0;\n\n    while (i < scanwindow) {\n      // a TS fragment should contain at least 3 TS packets, a PAT, a PMT, and one PID, each starting with 0x47\n      if (data[i] === 0x47 && data[i + 188] === 0x47 && data[i + 2 * 188] === 0x47) {\n        return i;\n      } else {\n        i++;\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * Creates a track model internal to demuxer used to drive remuxing input\n   *\n   * @param {string} type 'audio' | 'video' | 'id3' | 'text'\n   * @param {number} duration\n   * @return {object} TSDemuxer's internal track model\n   */\n  ;\n\n  TSDemuxer.createTrack = function createTrack(type, duration) {\n    return {\n      container: type === 'video' || type === 'audio' ? 'video/mp2t' : undefined,\n      type: type,\n      id: RemuxerTrackIdConfig[type],\n      pid: -1,\n      inputTimeScale: 90000,\n      sequenceNumber: 0,\n      samples: [],\n      dropped: type === 'video' ? 0 : undefined,\n      isAAC: type === 'audio' ? true : undefined,\n      duration: type === 'audio' ? duration : undefined\n    };\n  }\n  /**\n   * Initializes a new init segment on the demuxer/remuxer interface. Needed for discontinuities/track-switches (or at stream start)\n   * Resets all internal track instances of the demuxer.\n   *\n   * @override Implements generic demuxing/remuxing interface (see DemuxerInline)\n   * @param {object} initSegment\n   * @param {string} audioCodec\n   * @param {string} videoCodec\n   * @param {number} duration (in TS timescale = 90kHz)\n   */\n  ;\n\n  _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, duration) {\n    this.pmtParsed = false;\n    this._pmtId = -1;\n    this.pmtUnknownTypes = {};\n    this._avcTrack = TSDemuxer.createTrack('video', duration);\n    this._audioTrack = TSDemuxer.createTrack('audio', duration);\n    this._id3Track = TSDemuxer.createTrack('id3', duration);\n    this._txtTrack = TSDemuxer.createTrack('text', duration); // flush any partial content\n\n    this.aacOverFlow = null;\n    this.aacLastPTS = null;\n    this.avcSample = null;\n    this.audioCodec = audioCodec;\n    this.videoCodec = videoCodec;\n    this._duration = duration;\n  }\n  /**\n   *\n   * @override\n   */\n  ;\n\n  _proto.resetTimeStamp = function resetTimeStamp() {} // feed incoming data to the front of the parsing pipeline\n  ;\n\n  _proto.append = function append(data, timeOffset, contiguous, accurateTimeOffset) {\n    var start,\n        len = data.length,\n        stt,\n        pid,\n        atf,\n        offset,\n        pes,\n        unknownPIDs = false;\n    this.pmtUnknownTypes = {};\n    this.contiguous = contiguous;\n\n    var pmtParsed = this.pmtParsed,\n        avcTrack = this._avcTrack,\n        audioTrack = this._audioTrack,\n        id3Track = this._id3Track,\n        avcId = avcTrack.pid,\n        audioId = audioTrack.pid,\n        id3Id = id3Track.pid,\n        pmtId = this._pmtId,\n        avcData = avcTrack.pesData,\n        audioData = audioTrack.pesData,\n        id3Data = id3Track.pesData,\n        parsePAT = this._parsePAT,\n        parsePMT = this._parsePMT.bind(this),\n        parsePES = this._parsePES,\n        parseAVCPES = this._parseAVCPES.bind(this),\n        parseAACPES = this._parseAACPES.bind(this),\n        parseMPEGPES = this._parseMPEGPES.bind(this),\n        parseID3PES = this._parseID3PES.bind(this);\n\n    var syncOffset = TSDemuxer._syncOffset(data); // don't parse last TS packet if incomplete\n\n\n    len -= (len + syncOffset) % 188; // loop through TS packets\n\n    for (start = syncOffset; start < len; start += 188) {\n      if (data[start] === 0x47) {\n        stt = !!(data[start + 1] & 0x40); // pid is a 13-bit field starting at the last bit of TS[1]\n\n        pid = ((data[start + 1] & 0x1f) << 8) + data[start + 2];\n        atf = (data[start + 3] & 0x30) >> 4; // if an adaption field is present, its length is specified by the fifth byte of the TS packet header.\n\n        if (atf > 1) {\n          offset = start + 5 + data[start + 4]; // continue if there is only adaptation field\n\n          if (offset === start + 188) {\n            continue;\n          }\n        } else {\n          offset = start + 4;\n        }\n\n        switch (pid) {\n          case avcId:\n            if (stt) {\n              if (avcData && (pes = parsePES(avcData))) {\n                parseAVCPES(pes, false);\n              }\n\n              avcData = {\n                data: [],\n                size: 0\n              };\n            }\n\n            if (avcData) {\n              avcData.data.push(data.subarray(offset, start + 188));\n              avcData.size += start + 188 - offset;\n            }\n\n            break;\n\n          case audioId:\n            if (stt) {\n              if (audioData && (pes = parsePES(audioData))) {\n                if (audioTrack.isAAC) {\n                  parseAACPES(pes);\n                } else {\n                  parseMPEGPES(pes);\n                }\n              }\n\n              audioData = {\n                data: [],\n                size: 0\n              };\n            }\n\n            if (audioData) {\n              audioData.data.push(data.subarray(offset, start + 188));\n              audioData.size += start + 188 - offset;\n            }\n\n            break;\n\n          case id3Id:\n            if (stt) {\n              if (id3Data && (pes = parsePES(id3Data))) {\n                parseID3PES(pes);\n              }\n\n              id3Data = {\n                data: [],\n                size: 0\n              };\n            }\n\n            if (id3Data) {\n              id3Data.data.push(data.subarray(offset, start + 188));\n              id3Data.size += start + 188 - offset;\n            }\n\n            break;\n\n          case 0:\n            if (stt) {\n              offset += data[offset] + 1;\n            }\n\n            pmtId = this._pmtId = parsePAT(data, offset);\n            break;\n\n          case pmtId:\n            if (stt) {\n              offset += data[offset] + 1;\n            }\n\n            var parsedPIDs = parsePMT(data, offset, this.typeSupported.mpeg === true || this.typeSupported.mp3 === true, this.sampleAes != null); // only update track id if track PID found while parsing PMT\n            // this is to avoid resetting the PID to -1 in case\n            // track PID transiently disappears from the stream\n            // this could happen in case of transient missing audio samples for example\n            // NOTE this is only the PID of the track as found in TS,\n            // but we are not using this for MP4 track IDs.\n\n            avcId = parsedPIDs.avc;\n\n            if (avcId > 0) {\n              avcTrack.pid = avcId;\n            }\n\n            audioId = parsedPIDs.audio;\n\n            if (audioId > 0) {\n              audioTrack.pid = audioId;\n              audioTrack.isAAC = parsedPIDs.isAAC;\n            }\n\n            id3Id = parsedPIDs.id3;\n\n            if (id3Id > 0) {\n              id3Track.pid = id3Id;\n            }\n\n            if (unknownPIDs && !pmtParsed) {\n              logger[\"logger\"].log('reparse from beginning');\n              unknownPIDs = false; // we set it to -188, the += 188 in the for loop will reset start to 0\n\n              start = syncOffset - 188;\n            }\n\n            pmtParsed = this.pmtParsed = true;\n            break;\n\n          case 17:\n          case 0x1fff:\n            break;\n\n          default:\n            unknownPIDs = true;\n            break;\n        }\n      } else {\n        this.observer.trigger(events[\"default\"].ERROR, {\n          type: errors[\"ErrorTypes\"].MEDIA_ERROR,\n          details: errors[\"ErrorDetails\"].FRAG_PARSING_ERROR,\n          fatal: false,\n          reason: 'TS packet did not start with 0x47'\n        });\n      }\n    } // try to parse last PES packets\n\n\n    if (avcData && (pes = parsePES(avcData))) {\n      parseAVCPES(pes, true);\n      avcTrack.pesData = null;\n    } else {\n      // either avcData null or PES truncated, keep it for next frag parsing\n      avcTrack.pesData = avcData;\n    }\n\n    if (audioData && (pes = parsePES(audioData))) {\n      if (audioTrack.isAAC) {\n        parseAACPES(pes);\n      } else {\n        parseMPEGPES(pes);\n      }\n\n      audioTrack.pesData = null;\n    } else {\n      if (audioData && audioData.size) {\n        logger[\"logger\"].log('last AAC PES packet truncated,might overlap between fragments');\n      } // either audioData null or PES truncated, keep it for next frag parsing\n\n\n      audioTrack.pesData = audioData;\n    }\n\n    if (id3Data && (pes = parsePES(id3Data))) {\n      parseID3PES(pes);\n      id3Track.pesData = null;\n    } else {\n      // either id3Data null or PES truncated, keep it for next frag parsing\n      id3Track.pesData = id3Data;\n    }\n\n    if (this.sampleAes == null) {\n      this.remuxer.remux(audioTrack, avcTrack, id3Track, this._txtTrack, timeOffset, contiguous, accurateTimeOffset);\n    } else {\n      this.decryptAndRemux(audioTrack, avcTrack, id3Track, this._txtTrack, timeOffset, contiguous, accurateTimeOffset);\n    }\n  };\n\n  _proto.decryptAndRemux = function decryptAndRemux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset) {\n    if (audioTrack.samples && audioTrack.isAAC) {\n      var localthis = this;\n      this.sampleAes.decryptAacSamples(audioTrack.samples, 0, function () {\n        localthis.decryptAndRemuxAvc(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset);\n      });\n    } else {\n      this.decryptAndRemuxAvc(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset);\n    }\n  };\n\n  _proto.decryptAndRemuxAvc = function decryptAndRemuxAvc(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset) {\n    if (videoTrack.samples) {\n      var localthis = this;\n      this.sampleAes.decryptAvcSamples(videoTrack.samples, 0, 0, function () {\n        localthis.remuxer.remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset);\n      });\n    } else {\n      this.remuxer.remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset);\n    }\n  };\n\n  _proto.destroy = function destroy() {\n    this._initPTS = this._initDTS = undefined;\n    this._duration = 0;\n  };\n\n  _proto._parsePAT = function _parsePAT(data, offset) {\n    // skip the PSI header and parse the first PMT entry\n    return (data[offset + 10] & 0x1F) << 8 | data[offset + 11]; // logger.log('PMT PID:'  + this._pmtId);\n  };\n\n  _proto._trackUnknownPmt = function _trackUnknownPmt(type, logLevel, message) {\n    // Only log unknown and unsupported stream types once per append or stream (by resetting this.pmtUnknownTypes)\n    // For more information on elementary stream types see:\n    // https://en.wikipedia.org/wiki/Program-specific_information#Elementary_stream_types\n    var result = this.pmtUnknownTypes[type] || 0;\n\n    if (result === 0) {\n      this.pmtUnknownTypes[type] = 0;\n      logLevel.call(logger[\"logger\"], message);\n    }\n\n    this.pmtUnknownTypes[type]++;\n    return result;\n  };\n\n  _proto._parsePMT = function _parsePMT(data, offset, mpegSupported, isSampleAes) {\n    var sectionLength,\n        tableEnd,\n        programInfoLength,\n        pid,\n        result = {\n      audio: -1,\n      avc: -1,\n      id3: -1,\n      isAAC: true\n    };\n    sectionLength = (data[offset + 1] & 0x0f) << 8 | data[offset + 2];\n    tableEnd = offset + 3 + sectionLength - 4; // to determine where the table is, we have to figure out how\n    // long the program info descriptors are\n\n    programInfoLength = (data[offset + 10] & 0x0f) << 8 | data[offset + 11]; // advance the offset to the first entry in the mapping table\n\n    offset += 12 + programInfoLength;\n\n    while (offset < tableEnd) {\n      pid = (data[offset + 1] & 0x1F) << 8 | data[offset + 2];\n\n      switch (data[offset]) {\n        case 0xcf:\n          // SAMPLE-AES AAC\n          if (!isSampleAes) {\n            this._trackUnknownPmt(data[offset], logger[\"logger\"].warn, 'ADTS AAC with AES-128-CBC frame encryption found in unencrypted stream');\n\n            break;\n          }\n\n        /* falls through */\n        // ISO/IEC 13818-7 ADTS AAC (MPEG-2 lower bit-rate audio)\n\n        case 0x0f:\n          // logger.log('AAC PID:'  + pid);\n          if (result.audio === -1) {\n            result.audio = pid;\n          }\n\n          break;\n        // Packetized metadata (ID3)\n\n        case 0x15:\n          // logger.log('ID3 PID:'  + pid);\n          if (result.id3 === -1) {\n            result.id3 = pid;\n          }\n\n          break;\n\n        case 0xdb:\n          // SAMPLE-AES AVC\n          if (!isSampleAes) {\n            this._trackUnknownPmt(data[offset], logger[\"logger\"].warn, 'H.264 with AES-128-CBC slice encryption found in unencrypted stream');\n\n            break;\n          }\n\n        /* falls through */\n        // ITU-T Rec. H.264 and ISO/IEC 14496-10 (lower bit-rate video)\n\n        case 0x1b:\n          // logger.log('AVC PID:'  + pid);\n          if (result.avc === -1) {\n            result.avc = pid;\n          }\n\n          break;\n        // ISO/IEC 11172-3 (MPEG-1 audio)\n        // or ISO/IEC 13818-3 (MPEG-2 halved sample rate audio)\n\n        case 0x03:\n        case 0x04:\n          // logger.log('MPEG PID:'  + pid);\n          if (!mpegSupported) {\n            this._trackUnknownPmt(data[offset], logger[\"logger\"].warn, 'MPEG audio found, not supported in this browser');\n          } else if (result.audio === -1) {\n            result.audio = pid;\n            result.isAAC = false;\n          }\n\n          break;\n\n        case 0x24:\n          this._trackUnknownPmt(data[offset], logger[\"logger\"].warn, 'Unsupported HEVC stream type found');\n\n          break;\n\n        default:\n          this._trackUnknownPmt(data[offset], logger[\"logger\"].log, 'Unknown stream type:' + data[offset]);\n\n          break;\n      } // move to the next table entry\n      // skip past the elementary stream descriptors, if present\n\n\n      offset += ((data[offset + 3] & 0x0F) << 8 | data[offset + 4]) + 5;\n    }\n\n    return result;\n  };\n\n  _proto._parsePES = function _parsePES(stream) {\n    var i = 0,\n        frag,\n        pesFlags,\n        pesPrefix,\n        pesLen,\n        pesHdrLen,\n        pesData,\n        pesPts,\n        pesDts,\n        payloadStartOffset,\n        data = stream.data; // safety check\n\n    if (!stream || stream.size === 0) {\n      return null;\n    } // we might need up to 19 bytes to read PES header\n    // if first chunk of data is less than 19 bytes, let's merge it with following ones until we get 19 bytes\n    // usually only one merge is needed (and this is rare ...)\n\n\n    while (data[0].length < 19 && data.length > 1) {\n      var newData = new Uint8Array(data[0].length + data[1].length);\n      newData.set(data[0]);\n      newData.set(data[1], data[0].length);\n      data[0] = newData;\n      data.splice(1, 1);\n    } // retrieve PTS/DTS from first fragment\n\n\n    frag = data[0];\n    pesPrefix = (frag[0] << 16) + (frag[1] << 8) + frag[2];\n\n    if (pesPrefix === 1) {\n      pesLen = (frag[4] << 8) + frag[5]; // if PES parsed length is not zero and greater than total received length, stop parsing. PES might be truncated\n      // minus 6 : PES header size\n\n      if (pesLen && pesLen > stream.size - 6) {\n        return null;\n      }\n\n      pesFlags = frag[7];\n\n      if (pesFlags & 0xC0) {\n        /* PES header described here : http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n            as PTS / DTS is 33 bit we cannot use bitwise operator in JS,\n            as Bitwise operators treat their operands as a sequence of 32 bits */\n        pesPts = (frag[9] & 0x0E) * 536870912 + // 1 << 29\n        (frag[10] & 0xFF) * 4194304 + // 1 << 22\n        (frag[11] & 0xFE) * 16384 + // 1 << 14\n        (frag[12] & 0xFF) * 128 + // 1 << 7\n        (frag[13] & 0xFE) / 2;\n\n        if (pesFlags & 0x40) {\n          pesDts = (frag[14] & 0x0E) * 536870912 + // 1 << 29\n          (frag[15] & 0xFF) * 4194304 + // 1 << 22\n          (frag[16] & 0xFE) * 16384 + // 1 << 14\n          (frag[17] & 0xFF) * 128 + // 1 << 7\n          (frag[18] & 0xFE) / 2;\n\n          if (pesPts - pesDts > 60 * 90000) {\n            logger[\"logger\"].warn(Math.round((pesPts - pesDts) / 90000) + \"s delta between PTS and DTS, align them\");\n            pesPts = pesDts;\n          }\n        } else {\n          pesDts = pesPts;\n        }\n      }\n\n      pesHdrLen = frag[8]; // 9 bytes : 6 bytes for PES header + 3 bytes for PES extension\n\n      payloadStartOffset = pesHdrLen + 9;\n\n      if (stream.size <= payloadStartOffset) {\n        return null;\n      }\n\n      stream.size -= payloadStartOffset; // reassemble PES packet\n\n      pesData = new Uint8Array(stream.size);\n\n      for (var j = 0, dataLen = data.length; j < dataLen; j++) {\n        frag = data[j];\n        var len = frag.byteLength;\n\n        if (payloadStartOffset) {\n          if (payloadStartOffset > len) {\n            // trim full frag if PES header bigger than frag\n            payloadStartOffset -= len;\n            continue;\n          } else {\n            // trim partial frag if PES header smaller than frag\n            frag = frag.subarray(payloadStartOffset);\n            len -= payloadStartOffset;\n            payloadStartOffset = 0;\n          }\n        }\n\n        pesData.set(frag, i);\n        i += len;\n      }\n\n      if (pesLen) {\n        // payload size : remove PES header + PES extension\n        pesLen -= pesHdrLen + 3;\n      }\n\n      return {\n        data: pesData,\n        pts: pesPts,\n        dts: pesDts,\n        len: pesLen\n      };\n    } else {\n      return null;\n    }\n  };\n\n  _proto.pushAccesUnit = function pushAccesUnit(avcSample, avcTrack) {\n    if (avcSample.units.length && avcSample.frame) {\n      var samples = avcTrack.samples;\n      var nbSamples = samples.length; // if sample does not have PTS/DTS, patch with last sample PTS/DTS\n\n      if (isNaN(avcSample.pts)) {\n        if (nbSamples) {\n          var lastSample = samples[nbSamples - 1];\n          avcSample.pts = lastSample.pts;\n          avcSample.dts = lastSample.dts;\n        } else {\n          // dropping samples, no timestamp found\n          avcTrack.dropped++;\n          return;\n        }\n      } // only push AVC sample if starting with a keyframe is not mandatory OR\n      //    if keyframe already found in this fragment OR\n      //       keyframe found in last fragment (track.sps) AND\n      //          samples already appended (we already found a keyframe in this fragment) OR fragment is contiguous\n\n\n      if (!this.config.forceKeyFrameOnDiscontinuity || avcSample.key === true || avcTrack.sps && (nbSamples || this.contiguous)) {\n        avcSample.id = nbSamples;\n        samples.push(avcSample);\n      } else {\n        // dropped samples, track it\n        avcTrack.dropped++;\n      }\n    }\n\n    if (avcSample.debug.length) {\n      logger[\"logger\"].log(avcSample.pts + '/' + avcSample.dts + ':' + avcSample.debug);\n    }\n  };\n\n  _proto._parseAVCPES = function _parseAVCPES(pes, last) {\n    var _this = this;\n\n    // logger.log('parse new PES');\n    var track = this._avcTrack,\n        units = this._parseAVCNALu(pes.data),\n        debug = false,\n        expGolombDecoder,\n        avcSample = this.avcSample,\n        push,\n        spsfound = false,\n        i,\n        pushAccesUnit = this.pushAccesUnit.bind(this),\n        createAVCSample = function createAVCSample(key, pts, dts, debug) {\n      return {\n        key: key,\n        pts: pts,\n        dts: dts,\n        units: [],\n        debug: debug\n      };\n    }; // free pes.data to save up some memory\n\n\n    pes.data = null; // if new NAL units found and last sample still there, let's push ...\n    // this helps parsing streams with missing AUD (only do this if AUD never found)\n\n    if (avcSample && units.length && !track.audFound) {\n      pushAccesUnit(avcSample, track);\n      avcSample = this.avcSample = createAVCSample(false, pes.pts, pes.dts, '');\n    }\n\n    units.forEach(function (unit) {\n      switch (unit.type) {\n        // NDR\n        case 1:\n          push = true;\n\n          if (!avcSample) {\n            avcSample = _this.avcSample = createAVCSample(true, pes.pts, pes.dts, '');\n          }\n\n          if (debug) {\n            avcSample.debug += 'NDR ';\n          }\n\n          avcSample.frame = true;\n          var data = unit.data; // only check slice type to detect KF in case SPS found in same packet (any keyframe is preceded by SPS ...)\n\n          if (spsfound && data.length > 4) {\n            // retrieve slice type by parsing beginning of NAL unit (follow H264 spec, slice_header definition) to detect keyframe embedded in NDR\n            var sliceType = new exp_golomb(data).readSliceType(); // 2 : I slice, 4 : SI slice, 7 : I slice, 9: SI slice\n            // SI slice : A slice that is coded using intra prediction only and using quantisation of the prediction samples.\n            // An SI slice can be coded such that its decoded samples can be constructed identically to an SP slice.\n            // I slice: A slice that is not an SI slice that is decoded using intra prediction only.\n            // if (sliceType === 2 || sliceType === 7) {\n\n            if (sliceType === 2 || sliceType === 4 || sliceType === 7 || sliceType === 9) {\n              avcSample.key = true;\n            }\n          }\n\n          break;\n        // IDR\n\n        case 5:\n          push = true; // handle PES not starting with AUD\n\n          if (!avcSample) {\n            avcSample = _this.avcSample = createAVCSample(true, pes.pts, pes.dts, '');\n          }\n\n          if (debug) {\n            avcSample.debug += 'IDR ';\n          }\n\n          avcSample.key = true;\n          avcSample.frame = true;\n          break;\n        // SEI\n\n        case 6:\n          push = true;\n\n          if (debug && avcSample) {\n            avcSample.debug += 'SEI ';\n          }\n\n          expGolombDecoder = new exp_golomb(_this.discardEPB(unit.data)); // skip frameType\n\n          expGolombDecoder.readUByte();\n          var payloadType = 0;\n          var payloadSize = 0;\n          var endOfCaptions = false;\n          var b = 0;\n\n          while (!endOfCaptions && expGolombDecoder.bytesAvailable > 1) {\n            payloadType = 0;\n\n            do {\n              b = expGolombDecoder.readUByte();\n              payloadType += b;\n            } while (b === 0xFF); // Parse payload size.\n\n\n            payloadSize = 0;\n\n            do {\n              b = expGolombDecoder.readUByte();\n              payloadSize += b;\n            } while (b === 0xFF); // TODO: there can be more than one payload in an SEI packet...\n            // TODO: need to read type and size in a while loop to get them all\n\n\n            if (payloadType === 4 && expGolombDecoder.bytesAvailable !== 0) {\n              endOfCaptions = true;\n              var countryCode = expGolombDecoder.readUByte();\n\n              if (countryCode === 181) {\n                var providerCode = expGolombDecoder.readUShort();\n\n                if (providerCode === 49) {\n                  var userStructure = expGolombDecoder.readUInt();\n\n                  if (userStructure === 0x47413934) {\n                    var userDataType = expGolombDecoder.readUByte(); // Raw CEA-608 bytes wrapped in CEA-708 packet\n\n                    if (userDataType === 3) {\n                      var firstByte = expGolombDecoder.readUByte();\n                      var secondByte = expGolombDecoder.readUByte();\n                      var totalCCs = 31 & firstByte;\n                      var byteArray = [firstByte, secondByte];\n\n                      for (i = 0; i < totalCCs; i++) {\n                        // 3 bytes per CC\n                        byteArray.push(expGolombDecoder.readUByte());\n                        byteArray.push(expGolombDecoder.readUByte());\n                        byteArray.push(expGolombDecoder.readUByte());\n                      }\n\n                      _this._insertSampleInOrder(_this._txtTrack.samples, {\n                        type: 3,\n                        pts: pes.pts,\n                        bytes: byteArray\n                      });\n                    }\n                  }\n                }\n              }\n            } else if (payloadType === 5 && expGolombDecoder.bytesAvailable !== 0) {\n              endOfCaptions = true;\n\n              if (payloadSize > 16) {\n                var uuidStrArray = [];\n\n                for (i = 0; i < 16; i++) {\n                  uuidStrArray.push(expGolombDecoder.readUByte().toString(16));\n\n                  if (i === 3 || i === 5 || i === 7 || i === 9) {\n                    uuidStrArray.push('-');\n                  }\n                }\n\n                var length = payloadSize - 16;\n                var userDataPayloadBytes = new Uint8Array(length);\n\n                for (i = 0; i < length; i++) {\n                  userDataPayloadBytes[i] = expGolombDecoder.readUByte();\n                }\n\n                _this._insertSampleInOrder(_this._txtTrack.samples, {\n                  pts: pes.pts,\n                  payloadType: payloadType,\n                  uuid: uuidStrArray.join(''),\n                  userDataBytes: userDataPayloadBytes,\n                  userData: Object(id3[\"utf8ArrayToStr\"])(userDataPayloadBytes.buffer)\n                });\n              }\n            } else if (payloadSize < expGolombDecoder.bytesAvailable) {\n              for (i = 0; i < payloadSize; i++) {\n                expGolombDecoder.readUByte();\n              }\n            }\n          }\n\n          break;\n        // SPS\n\n        case 7:\n          push = true;\n          spsfound = true;\n\n          if (debug && avcSample) {\n            avcSample.debug += 'SPS ';\n          }\n\n          if (!track.sps) {\n            expGolombDecoder = new exp_golomb(unit.data);\n            var config = expGolombDecoder.readSPS();\n            track.width = config.width;\n            track.height = config.height;\n            track.pixelRatio = config.pixelRatio;\n            track.sps = [unit.data];\n            track.duration = _this._duration;\n            var codecarray = unit.data.subarray(1, 4);\n            var codecstring = 'avc1.';\n\n            for (i = 0; i < 3; i++) {\n              var h = codecarray[i].toString(16);\n\n              if (h.length < 2) {\n                h = '0' + h;\n              }\n\n              codecstring += h;\n            }\n\n            track.codec = codecstring;\n          }\n\n          break;\n        // PPS\n\n        case 8:\n          push = true;\n\n          if (debug && avcSample) {\n            avcSample.debug += 'PPS ';\n          }\n\n          if (!track.pps) {\n            track.pps = [unit.data];\n          }\n\n          break;\n        // AUD\n\n        case 9:\n          push = false;\n          track.audFound = true;\n\n          if (avcSample) {\n            pushAccesUnit(avcSample, track);\n          }\n\n          avcSample = _this.avcSample = createAVCSample(false, pes.pts, pes.dts, debug ? 'AUD ' : '');\n          break;\n        // Filler Data\n\n        case 12:\n          push = false;\n          break;\n\n        default:\n          push = false;\n\n          if (avcSample) {\n            avcSample.debug += 'unknown NAL ' + unit.type + ' ';\n          }\n\n          break;\n      }\n\n      if (avcSample && push) {\n        var _units = avcSample.units;\n\n        _units.push(unit);\n      }\n    }); // if last PES packet, push samples\n\n    if (last && avcSample) {\n      pushAccesUnit(avcSample, track);\n      this.avcSample = null;\n    }\n  };\n\n  _proto._insertSampleInOrder = function _insertSampleInOrder(arr, data) {\n    var len = arr.length;\n\n    if (len > 0) {\n      if (data.pts >= arr[len - 1].pts) {\n        arr.push(data);\n      } else {\n        for (var pos = len - 1; pos >= 0; pos--) {\n          if (data.pts < arr[pos].pts) {\n            arr.splice(pos, 0, data);\n            break;\n          }\n        }\n      }\n    } else {\n      arr.push(data);\n    }\n  };\n\n  _proto._getLastNalUnit = function _getLastNalUnit() {\n    var avcSample = this.avcSample,\n        lastUnit; // try to fallback to previous sample if current one is empty\n\n    if (!avcSample || avcSample.units.length === 0) {\n      var track = this._avcTrack,\n          samples = track.samples;\n      avcSample = samples[samples.length - 1];\n    }\n\n    if (avcSample) {\n      var units = avcSample.units;\n      lastUnit = units[units.length - 1];\n    }\n\n    return lastUnit;\n  };\n\n  _proto._parseAVCNALu = function _parseAVCNALu(array) {\n    var i = 0,\n        len = array.byteLength,\n        value,\n        overflow,\n        track = this._avcTrack,\n        state = track.naluState || 0,\n        lastState = state;\n    var units = [],\n        unit,\n        unitType,\n        lastUnitStart = -1,\n        lastUnitType; // logger.log('PES:' + Hex.hexDump(array));\n\n    if (state === -1) {\n      // special use case where we found 3 or 4-byte start codes exactly at the end of previous PES packet\n      lastUnitStart = 0; // NALu type is value read from offset 0\n\n      lastUnitType = array[0] & 0x1f;\n      state = 0;\n      i = 1;\n    }\n\n    while (i < len) {\n      value = array[i++]; // optimization. state 0 and 1 are the predominant case. let's handle them outside of the switch/case\n\n      if (!state) {\n        state = value ? 0 : 1;\n        continue;\n      }\n\n      if (state === 1) {\n        state = value ? 0 : 2;\n        continue;\n      } // here we have state either equal to 2 or 3\n\n\n      if (!value) {\n        state = 3;\n      } else if (value === 1) {\n        if (lastUnitStart >= 0) {\n          unit = {\n            data: array.subarray(lastUnitStart, i - state - 1),\n            type: lastUnitType\n          }; // logger.log('pushing NALU, type/size:' + unit.type + '/' + unit.data.byteLength);\n\n          units.push(unit);\n        } else {\n          // lastUnitStart is undefined => this is the first start code found in this PES packet\n          // first check if start code delimiter is overlapping between 2 PES packets,\n          // ie it started in last packet (lastState not zero)\n          // and ended at the beginning of this PES packet (i <= 4 - lastState)\n          var lastUnit = this._getLastNalUnit();\n\n          if (lastUnit) {\n            if (lastState && i <= 4 - lastState) {\n              // start delimiter overlapping between PES packets\n              // strip start delimiter bytes from the end of last NAL unit\n              // check if lastUnit had a state different from zero\n              if (lastUnit.state) {\n                // strip last bytes\n                lastUnit.data = lastUnit.data.subarray(0, lastUnit.data.byteLength - lastState);\n              }\n            } // If NAL units are not starting right at the beginning of the PES packet, push preceding data into previous NAL unit.\n\n\n            overflow = i - state - 1;\n\n            if (overflow > 0) {\n              // logger.log('first NALU found with overflow:' + overflow);\n              var tmp = new Uint8Array(lastUnit.data.byteLength + overflow);\n              tmp.set(lastUnit.data, 0);\n              tmp.set(array.subarray(0, overflow), lastUnit.data.byteLength);\n              lastUnit.data = tmp;\n            }\n          }\n        } // check if we can read unit type\n\n\n        if (i < len) {\n          unitType = array[i] & 0x1f; // logger.log('find NALU @ offset:' + i + ',type:' + unitType);\n\n          lastUnitStart = i;\n          lastUnitType = unitType;\n          state = 0;\n        } else {\n          // not enough byte to read unit type. let's read it on next PES parsing\n          state = -1;\n        }\n      } else {\n        state = 0;\n      }\n    }\n\n    if (lastUnitStart >= 0 && state >= 0) {\n      unit = {\n        data: array.subarray(lastUnitStart, len),\n        type: lastUnitType,\n        state: state\n      };\n      units.push(unit); // logger.log('pushing NALU, type/size/state:' + unit.type + '/' + unit.data.byteLength + '/' + state);\n    } // no NALu found\n\n\n    if (units.length === 0) {\n      // append pes.data to previous NAL unit\n      var _lastUnit = this._getLastNalUnit();\n\n      if (_lastUnit) {\n        var _tmp = new Uint8Array(_lastUnit.data.byteLength + array.byteLength);\n\n        _tmp.set(_lastUnit.data, 0);\n\n        _tmp.set(array, _lastUnit.data.byteLength);\n\n        _lastUnit.data = _tmp;\n      }\n    }\n\n    track.naluState = state;\n    return units;\n  }\n  /**\n   * remove Emulation Prevention bytes from a RBSP\n   */\n  ;\n\n  _proto.discardEPB = function discardEPB(data) {\n    var length = data.byteLength,\n        EPBPositions = [],\n        i = 1,\n        newLength,\n        newData; // Find all `Emulation Prevention Bytes`\n\n    while (i < length - 2) {\n      if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n        EPBPositions.push(i + 2);\n        i += 2;\n      } else {\n        i++;\n      }\n    } // If no Emulation Prevention Bytes were found just return the original\n    // array\n\n\n    if (EPBPositions.length === 0) {\n      return data;\n    } // Create a new array to hold the NAL unit data\n\n\n    newLength = length - EPBPositions.length;\n    newData = new Uint8Array(newLength);\n    var sourceIndex = 0;\n\n    for (i = 0; i < newLength; sourceIndex++, i++) {\n      if (sourceIndex === EPBPositions[0]) {\n        // Skip this byte\n        sourceIndex++; // Remove this position index\n\n        EPBPositions.shift();\n      }\n\n      newData[i] = data[sourceIndex];\n    }\n\n    return newData;\n  };\n\n  _proto._parseAACPES = function _parseAACPES(pes) {\n    var track = this._audioTrack,\n        data = pes.data,\n        pts = pes.pts,\n        startOffset = 0,\n        aacOverFlow = this.aacOverFlow,\n        aacLastPTS = this.aacLastPTS,\n        frameDuration,\n        frameIndex,\n        offset,\n        stamp,\n        len;\n\n    if (aacOverFlow) {\n      var tmp = new Uint8Array(aacOverFlow.byteLength + data.byteLength);\n      tmp.set(aacOverFlow, 0);\n      tmp.set(data, aacOverFlow.byteLength); // logger.log(`AAC: append overflowing ${aacOverFlow.byteLength} bytes to beginning of new PES`);\n\n      data = tmp;\n    } // look for ADTS header (0xFFFx)\n\n\n    for (offset = startOffset, len = data.length; offset < len - 1; offset++) {\n      if (isHeader(data, offset)) {\n        break;\n      }\n    } // if ADTS header does not start straight from the beginning of the PES payload, raise an error\n\n\n    if (offset) {\n      var reason, fatal;\n\n      if (offset < len - 1) {\n        reason = \"AAC PES did not start with ADTS header,offset:\" + offset;\n        fatal = false;\n      } else {\n        reason = 'no ADTS header found in AAC PES';\n        fatal = true;\n      }\n\n      logger[\"logger\"].warn(\"parsing error:\" + reason);\n      this.observer.trigger(events[\"default\"].ERROR, {\n        type: errors[\"ErrorTypes\"].MEDIA_ERROR,\n        details: errors[\"ErrorDetails\"].FRAG_PARSING_ERROR,\n        fatal: fatal,\n        reason: reason\n      });\n\n      if (fatal) {\n        return;\n      }\n    }\n\n    initTrackConfig(track, this.observer, data, offset, this.audioCodec);\n    frameIndex = 0;\n    frameDuration = getFrameDuration(track.samplerate); // if last AAC frame is overflowing, we should ensure timestamps are contiguous:\n    // first sample PTS should be equal to last sample PTS + frameDuration\n\n    if (aacOverFlow && aacLastPTS) {\n      var newPTS = aacLastPTS + frameDuration;\n\n      if (Math.abs(newPTS - pts) > 1) {\n        logger[\"logger\"].log(\"AAC: align PTS for overlapping frames by \" + Math.round((newPTS - pts) / 90));\n        pts = newPTS;\n      }\n    } // scan for aac samples\n\n\n    while (offset < len) {\n      if (isHeader(data, offset)) {\n        if (offset + 5 < len) {\n          var frame = appendFrame(track, data, offset, pts, frameIndex);\n\n          if (frame) {\n            offset += frame.length;\n            stamp = frame.sample.pts;\n            frameIndex++;\n            continue;\n          }\n        } // We are at an ADTS header, but do not have enough data for a frame\n        // Remaining data will be added to aacOverFlow\n\n\n        break;\n      } else {\n        // nothing found, keep looking\n        offset++;\n      }\n    }\n\n    if (offset < len) {\n      aacOverFlow = data.subarray(offset, len); // logger.log(`AAC: overflow detected:${len-offset}`);\n    } else {\n      aacOverFlow = null;\n    }\n\n    this.aacOverFlow = aacOverFlow;\n    this.aacLastPTS = stamp;\n  };\n\n  _proto._parseMPEGPES = function _parseMPEGPES(pes) {\n    var data = pes.data;\n    var length = data.length;\n    var frameIndex = 0;\n    var offset = 0;\n    var pts = pes.pts;\n\n    while (offset < length) {\n      if (mpegaudio.isHeader(data, offset)) {\n        var frame = mpegaudio.appendFrame(this._audioTrack, data, offset, pts, frameIndex);\n\n        if (frame) {\n          offset += frame.length;\n          frameIndex++;\n        } else {\n          // logger.log('Unable to parse Mpeg audio frame');\n          break;\n        }\n      } else {\n        // nothing found, keep looking\n        offset++;\n      }\n    }\n  };\n\n  _proto._parseID3PES = function _parseID3PES(pes) {\n    this._id3Track.samples.push(pes);\n  };\n\n  return TSDemuxer;\n}();\n\n/* harmony default export */ var tsdemuxer = (tsdemuxer_TSDemuxer);\n// CONCATENATED MODULE: ./src/demux/mp3demuxer.js\n/**\n * MP3 demuxer\n */\n\n\n\n\nvar mp3demuxer_MP3Demuxer = /*#__PURE__*/function () {\n  function MP3Demuxer(observer, remuxer, config) {\n    this.observer = observer;\n    this.config = config;\n    this.remuxer = remuxer;\n  }\n\n  var _proto = MP3Demuxer.prototype;\n\n  _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, duration) {\n    this._audioTrack = {\n      container: 'audio/mpeg',\n      type: 'audio',\n      id: -1,\n      sequenceNumber: 0,\n      isAAC: false,\n      samples: [],\n      len: 0,\n      manifestCodec: audioCodec,\n      duration: duration,\n      inputTimeScale: 90000\n    };\n  };\n\n  _proto.resetTimeStamp = function resetTimeStamp() {};\n\n  MP3Demuxer.probe = function probe(data) {\n    // check if data contains ID3 timestamp and MPEG sync word\n    var offset, length;\n    var id3Data = id3[\"default\"].getID3Data(data, 0);\n\n    if (id3Data && id3[\"default\"].getTimeStamp(id3Data) !== undefined) {\n      // Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1\n      // Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)\n      // More info http://www.mp3-tech.org/programmer/frame_header.html\n      for (offset = id3Data.length, length = Math.min(data.length - 1, offset + 100); offset < length; offset++) {\n        if (mpegaudio.probe(data, offset)) {\n          logger[\"logger\"].log('MPEG Audio sync word found !');\n          return true;\n        }\n      }\n    }\n\n    return false;\n  } // feed incoming data to the front of the parsing pipeline\n  ;\n\n  _proto.append = function append(data, timeOffset, contiguous, accurateTimeOffset) {\n    var id3Data = id3[\"default\"].getID3Data(data, 0) || [];\n    var timestamp = id3[\"default\"].getTimeStamp(id3Data);\n    var pts = timestamp !== undefined ? 90 * timestamp : timeOffset * 90000;\n    var offset = id3Data.length;\n    var length = data.length;\n    var frameIndex = 0,\n        stamp = 0;\n    var track = this._audioTrack;\n    var id3Samples = [{\n      pts: pts,\n      dts: pts,\n      data: id3Data\n    }];\n\n    while (offset < length) {\n      if (mpegaudio.isHeader(data, offset)) {\n        var frame = mpegaudio.appendFrame(track, data, offset, pts, frameIndex);\n\n        if (frame) {\n          offset += frame.length;\n          stamp = frame.sample.pts;\n          frameIndex++;\n        } else {\n          // logger.log('Unable to parse Mpeg audio frame');\n          break;\n        }\n      } else if (id3[\"default\"].isHeader(data, offset)) {\n        id3Data = id3[\"default\"].getID3Data(data, offset);\n        id3Samples.push({\n          pts: stamp,\n          dts: stamp,\n          data: id3Data\n        });\n        offset += id3Data.length;\n      } else {\n        // nothing found, keep looking\n        offset++;\n      }\n    }\n\n    this.remuxer.remux(track, {\n      samples: []\n    }, {\n      samples: id3Samples,\n      inputTimeScale: 90000\n    }, {\n      samples: []\n    }, timeOffset, contiguous, accurateTimeOffset);\n  };\n\n  _proto.destroy = function destroy() {};\n\n  return MP3Demuxer;\n}();\n\n/* harmony default export */ var mp3demuxer = (mp3demuxer_MP3Demuxer);\n// CONCATENATED MODULE: ./src/remux/aac-helper.js\n/**\n *  AAC helper\n */\nvar AAC = /*#__PURE__*/function () {\n  function AAC() {}\n\n  AAC.getSilentFrame = function getSilentFrame(codec, channelCount) {\n    switch (codec) {\n      case 'mp4a.40.2':\n        if (channelCount === 1) {\n          return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);\n        } else if (channelCount === 2) {\n          return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);\n        } else if (channelCount === 3) {\n          return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e]);\n        } else if (channelCount === 4) {\n          return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38]);\n        } else if (channelCount === 5) {\n          return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38]);\n        } else if (channelCount === 6) {\n          return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0]);\n        }\n\n        break;\n      // handle HE-AAC below (mp4a.40.5 / mp4a.40.29)\n\n      default:\n        if (channelCount === 1) {\n          // ffmpeg -y -f lavfi -i \"aevalsrc=0:d=0.05\" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n          return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x4e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x1c, 0x6, 0xf1, 0xc1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);\n        } else if (channelCount === 2) {\n          // ffmpeg -y -f lavfi -i \"aevalsrc=0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n          return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);\n        } else if (channelCount === 3) {\n          // ffmpeg -y -f lavfi -i \"aevalsrc=0|0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n          return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);\n        }\n\n        break;\n    }\n\n    return null;\n  };\n\n  return AAC;\n}();\n\n/* harmony default export */ var aac_helper = (AAC);\n// CONCATENATED MODULE: ./src/remux/mp4-generator.js\n/**\n * Generate MP4 Box\n*/\nvar UINT32_MAX = Math.pow(2, 32) - 1;\n\nvar MP4 = /*#__PURE__*/function () {\n  function MP4() {}\n\n  MP4.init = function init() {\n    MP4.types = {\n      avc1: [],\n      // codingname\n      avcC: [],\n      btrt: [],\n      dinf: [],\n      dref: [],\n      esds: [],\n      ftyp: [],\n      hdlr: [],\n      mdat: [],\n      mdhd: [],\n      mdia: [],\n      mfhd: [],\n      minf: [],\n      moof: [],\n      moov: [],\n      mp4a: [],\n      '.mp3': [],\n      mvex: [],\n      mvhd: [],\n      pasp: [],\n      sdtp: [],\n      stbl: [],\n      stco: [],\n      stsc: [],\n      stsd: [],\n      stsz: [],\n      stts: [],\n      tfdt: [],\n      tfhd: [],\n      traf: [],\n      trak: [],\n      trun: [],\n      trex: [],\n      tkhd: [],\n      vmhd: [],\n      smhd: []\n    };\n    var i;\n\n    for (i in MP4.types) {\n      if (MP4.types.hasOwnProperty(i)) {\n        MP4.types[i] = [i.charCodeAt(0), i.charCodeAt(1), i.charCodeAt(2), i.charCodeAt(3)];\n      }\n    }\n\n    var videoHdlr = new Uint8Array([0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // pre_defined\n    0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'\n    ]);\n    var audioHdlr = new Uint8Array([0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // pre_defined\n    0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'\n    ]);\n    MP4.HDLR_TYPES = {\n      'video': videoHdlr,\n      'audio': audioHdlr\n    };\n    var dref = new Uint8Array([0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x01, // entry_count\n    0x00, 0x00, 0x00, 0x0c, // entry_size\n    0x75, 0x72, 0x6c, 0x20, // 'url' type\n    0x00, // version 0\n    0x00, 0x00, 0x01 // entry_flags\n    ]);\n    var stco = new Uint8Array([0x00, // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00 // entry_count\n    ]);\n    MP4.STTS = MP4.STSC = MP4.STCO = stco;\n    MP4.STSZ = new Uint8Array([0x00, // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // sample_size\n    0x00, 0x00, 0x00, 0x00 // sample_count\n    ]);\n    MP4.VMHD = new Uint8Array([0x00, // version\n    0x00, 0x00, 0x01, // flags\n    0x00, 0x00, // graphicsmode\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // opcolor\n    ]);\n    MP4.SMHD = new Uint8Array([0x00, // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, // balance\n    0x00, 0x00 // reserved\n    ]);\n    MP4.STSD = new Uint8Array([0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x01]); // entry_count\n\n    var majorBrand = new Uint8Array([105, 115, 111, 109]); // isom\n\n    var avc1Brand = new Uint8Array([97, 118, 99, 49]); // avc1\n\n    var minorVersion = new Uint8Array([0, 0, 0, 1]);\n    MP4.FTYP = MP4.box(MP4.types.ftyp, majorBrand, minorVersion, majorBrand, avc1Brand);\n    MP4.DINF = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, dref));\n  };\n\n  MP4.box = function box(type) {\n    var payload = Array.prototype.slice.call(arguments, 1),\n        size = 8,\n        i = payload.length,\n        len = i,\n        result; // calculate the total size we need to allocate\n\n    while (i--) {\n      size += payload[i].byteLength;\n    }\n\n    result = new Uint8Array(size);\n    result[0] = size >> 24 & 0xff;\n    result[1] = size >> 16 & 0xff;\n    result[2] = size >> 8 & 0xff;\n    result[3] = size & 0xff;\n    result.set(type, 4); // copy the payload into the result\n\n    for (i = 0, size = 8; i < len; i++) {\n      // copy payload[i] array @ offset size\n      result.set(payload[i], size);\n      size += payload[i].byteLength;\n    }\n\n    return result;\n  };\n\n  MP4.hdlr = function hdlr(type) {\n    return MP4.box(MP4.types.hdlr, MP4.HDLR_TYPES[type]);\n  };\n\n  MP4.mdat = function mdat(data) {\n    return MP4.box(MP4.types.mdat, data);\n  };\n\n  MP4.mdhd = function mdhd(timescale, duration) {\n    duration *= timescale;\n    var upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n    var lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n    return MP4.box(MP4.types.mdhd, new Uint8Array([0x01, // version 1\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // creation_time\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // modification_time\n    timescale >> 24 & 0xFF, timescale >> 16 & 0xFF, timescale >> 8 & 0xFF, timescale & 0xFF, // timescale\n    upperWordDuration >> 24, upperWordDuration >> 16 & 0xFF, upperWordDuration >> 8 & 0xFF, upperWordDuration & 0xFF, lowerWordDuration >> 24, lowerWordDuration >> 16 & 0xFF, lowerWordDuration >> 8 & 0xFF, lowerWordDuration & 0xFF, 0x55, 0xc4, // 'und' language (undetermined)\n    0x00, 0x00]));\n  };\n\n  MP4.mdia = function mdia(track) {\n    return MP4.box(MP4.types.mdia, MP4.mdhd(track.timescale, track.duration), MP4.hdlr(track.type), MP4.minf(track));\n  };\n\n  MP4.mfhd = function mfhd(sequenceNumber) {\n    return MP4.box(MP4.types.mfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // flags\n    sequenceNumber >> 24, sequenceNumber >> 16 & 0xFF, sequenceNumber >> 8 & 0xFF, sequenceNumber & 0xFF // sequence_number\n    ]));\n  };\n\n  MP4.minf = function minf(track) {\n    if (track.type === 'audio') {\n      return MP4.box(MP4.types.minf, MP4.box(MP4.types.smhd, MP4.SMHD), MP4.DINF, MP4.stbl(track));\n    } else {\n      return MP4.box(MP4.types.minf, MP4.box(MP4.types.vmhd, MP4.VMHD), MP4.DINF, MP4.stbl(track));\n    }\n  };\n\n  MP4.moof = function moof(sn, baseMediaDecodeTime, track) {\n    return MP4.box(MP4.types.moof, MP4.mfhd(sn), MP4.traf(track, baseMediaDecodeTime));\n  }\n  /**\n  * @param tracks... (optional) {array} the tracks associated with this movie\n  */\n  ;\n\n  MP4.moov = function moov(tracks) {\n    var i = tracks.length,\n        boxes = [];\n\n    while (i--) {\n      boxes[i] = MP4.trak(tracks[i]);\n    }\n\n    return MP4.box.apply(null, [MP4.types.moov, MP4.mvhd(tracks[0].timescale, tracks[0].duration)].concat(boxes).concat(MP4.mvex(tracks)));\n  };\n\n  MP4.mvex = function mvex(tracks) {\n    var i = tracks.length,\n        boxes = [];\n\n    while (i--) {\n      boxes[i] = MP4.trex(tracks[i]);\n    }\n\n    return MP4.box.apply(null, [MP4.types.mvex].concat(boxes));\n  };\n\n  MP4.mvhd = function mvhd(timescale, duration) {\n    duration *= timescale;\n    var upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n    var lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n    var bytes = new Uint8Array([0x01, // version 1\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // creation_time\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // modification_time\n    timescale >> 24 & 0xFF, timescale >> 16 & 0xFF, timescale >> 8 & 0xFF, timescale & 0xFF, // timescale\n    upperWordDuration >> 24, upperWordDuration >> 16 & 0xFF, upperWordDuration >> 8 & 0xFF, upperWordDuration & 0xFF, lowerWordDuration >> 24, lowerWordDuration >> 16 & 0xFF, lowerWordDuration >> 8 & 0xFF, lowerWordDuration & 0xFF, 0x00, 0x01, 0x00, 0x00, // 1.0 rate\n    0x01, 0x00, // 1.0 volume\n    0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined\n    0xff, 0xff, 0xff, 0xff // next_track_ID\n    ]);\n    return MP4.box(MP4.types.mvhd, bytes);\n  };\n\n  MP4.sdtp = function sdtp(track) {\n    var samples = track.samples || [],\n        bytes = new Uint8Array(4 + samples.length),\n        flags,\n        i; // leave the full box header (4 bytes) all zero\n    // write the sample table\n\n    for (i = 0; i < samples.length; i++) {\n      flags = samples[i].flags;\n      bytes[i + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;\n    }\n\n    return MP4.box(MP4.types.sdtp, bytes);\n  };\n\n  MP4.stbl = function stbl(track) {\n    return MP4.box(MP4.types.stbl, MP4.stsd(track), MP4.box(MP4.types.stts, MP4.STTS), MP4.box(MP4.types.stsc, MP4.STSC), MP4.box(MP4.types.stsz, MP4.STSZ), MP4.box(MP4.types.stco, MP4.STCO));\n  };\n\n  MP4.avc1 = function avc1(track) {\n    var sps = [],\n        pps = [],\n        i,\n        data,\n        len; // assemble the SPSs\n\n    for (i = 0; i < track.sps.length; i++) {\n      data = track.sps[i];\n      len = data.byteLength;\n      sps.push(len >>> 8 & 0xFF);\n      sps.push(len & 0xFF); // SPS\n\n      sps = sps.concat(Array.prototype.slice.call(data));\n    } // assemble the PPSs\n\n\n    for (i = 0; i < track.pps.length; i++) {\n      data = track.pps[i];\n      len = data.byteLength;\n      pps.push(len >>> 8 & 0xFF);\n      pps.push(len & 0xFF);\n      pps = pps.concat(Array.prototype.slice.call(data));\n    }\n\n    var avcc = MP4.box(MP4.types.avcC, new Uint8Array([0x01, // version\n    sps[3], // profile\n    sps[4], // profile compat\n    sps[5], // level\n    0xfc | 3, // lengthSizeMinusOne, hard-coded to 4 bytes\n    0xE0 | track.sps.length // 3bit reserved (111) + numOfSequenceParameterSets\n    ].concat(sps).concat([track.pps.length // numOfPictureParameterSets\n    ]).concat(pps))),\n        // \"PPS\"\n    width = track.width,\n        height = track.height,\n        hSpacing = track.pixelRatio[0],\n        vSpacing = track.pixelRatio[1];\n    return MP4.box(MP4.types.avc1, new Uint8Array([0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, // reserved\n    0x00, 0x01, // data_reference_index\n    0x00, 0x00, // pre_defined\n    0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined\n    width >> 8 & 0xFF, width & 0xff, // width\n    height >> 8 & 0xFF, height & 0xff, // height\n    0x00, 0x48, 0x00, 0x00, // horizresolution\n    0x00, 0x48, 0x00, 0x00, // vertresolution\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x01, // frame_count\n    0x12, 0x64, 0x61, 0x69, 0x6C, // dailymotion/hls.js\n    0x79, 0x6D, 0x6F, 0x74, 0x69, 0x6F, 0x6E, 0x2F, 0x68, 0x6C, 0x73, 0x2E, 0x6A, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // compressorname\n    0x00, 0x18, // depth = 24\n    0x11, 0x11]), // pre_defined = -1\n    avcc, MP4.box(MP4.types.btrt, new Uint8Array([0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB\n    0x00, 0x2d, 0xc6, 0xc0, // maxBitrate\n    0x00, 0x2d, 0xc6, 0xc0])), // avgBitrate\n    MP4.box(MP4.types.pasp, new Uint8Array([hSpacing >> 24, // hSpacing\n    hSpacing >> 16 & 0xFF, hSpacing >> 8 & 0xFF, hSpacing & 0xFF, vSpacing >> 24, // vSpacing\n    vSpacing >> 16 & 0xFF, vSpacing >> 8 & 0xFF, vSpacing & 0xFF])));\n  };\n\n  MP4.esds = function esds(track) {\n    var configlen = track.config.length;\n    return new Uint8Array([0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x03, // descriptor_type\n    0x17 + configlen, // length\n    0x00, 0x01, // es_id\n    0x00, // stream_priority\n    0x04, // descriptor_type\n    0x0f + configlen, // length\n    0x40, // codec : mpeg4_audio\n    0x15, // stream_type\n    0x00, 0x00, 0x00, // buffer_size\n    0x00, 0x00, 0x00, 0x00, // maxBitrate\n    0x00, 0x00, 0x00, 0x00, // avgBitrate\n    0x05 // descriptor_type\n    ].concat([configlen]).concat(track.config).concat([0x06, 0x01, 0x02])); // GASpecificConfig)); // length + audio config descriptor\n  };\n\n  MP4.mp4a = function mp4a(track) {\n    var samplerate = track.samplerate;\n    return MP4.box(MP4.types.mp4a, new Uint8Array([0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, // reserved\n    0x00, 0x01, // data_reference_index\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, track.channelCount, // channelcount\n    0x00, 0x10, // sampleSize:16bits\n    0x00, 0x00, 0x00, 0x00, // reserved2\n    samplerate >> 8 & 0xFF, samplerate & 0xff, //\n    0x00, 0x00]), MP4.box(MP4.types.esds, MP4.esds(track)));\n  };\n\n  MP4.mp3 = function mp3(track) {\n    var samplerate = track.samplerate;\n    return MP4.box(MP4.types['.mp3'], new Uint8Array([0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, // reserved\n    0x00, 0x01, // data_reference_index\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, track.channelCount, // channelcount\n    0x00, 0x10, // sampleSize:16bits\n    0x00, 0x00, 0x00, 0x00, // reserved2\n    samplerate >> 8 & 0xFF, samplerate & 0xff, //\n    0x00, 0x00]));\n  };\n\n  MP4.stsd = function stsd(track) {\n    if (track.type === 'audio') {\n      if (!track.isAAC && track.codec === 'mp3') {\n        return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp3(track));\n      }\n\n      return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp4a(track));\n    } else {\n      return MP4.box(MP4.types.stsd, MP4.STSD, MP4.avc1(track));\n    }\n  };\n\n  MP4.tkhd = function tkhd(track) {\n    var id = track.id,\n        duration = track.duration * track.timescale,\n        width = track.width,\n        height = track.height,\n        upperWordDuration = Math.floor(duration / (UINT32_MAX + 1)),\n        lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n    return MP4.box(MP4.types.tkhd, new Uint8Array([0x01, // version 1\n    0x00, 0x00, 0x07, // flags\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // creation_time\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // modification_time\n    id >> 24 & 0xFF, id >> 16 & 0xFF, id >> 8 & 0xFF, id & 0xFF, // track_ID\n    0x00, 0x00, 0x00, 0x00, // reserved\n    upperWordDuration >> 24, upperWordDuration >> 16 & 0xFF, upperWordDuration >> 8 & 0xFF, upperWordDuration & 0xFF, lowerWordDuration >> 24, lowerWordDuration >> 16 & 0xFF, lowerWordDuration >> 8 & 0xFF, lowerWordDuration & 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, // layer\n    0x00, 0x00, // alternate_group\n    0x00, 0x00, // non-audio track volume\n    0x00, 0x00, // reserved\n    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n    width >> 8 & 0xFF, width & 0xFF, 0x00, 0x00, // width\n    height >> 8 & 0xFF, height & 0xFF, 0x00, 0x00 // height\n    ]));\n  };\n\n  MP4.traf = function traf(track, baseMediaDecodeTime) {\n    var sampleDependencyTable = MP4.sdtp(track),\n        id = track.id,\n        upperWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime / (UINT32_MAX + 1)),\n        lowerWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime % (UINT32_MAX + 1));\n    return MP4.box(MP4.types.traf, MP4.box(MP4.types.tfhd, new Uint8Array([0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    id >> 24, id >> 16 & 0XFF, id >> 8 & 0XFF, id & 0xFF // track_ID\n    ])), MP4.box(MP4.types.tfdt, new Uint8Array([0x01, // version 1\n    0x00, 0x00, 0x00, // flags\n    upperWordBaseMediaDecodeTime >> 24, upperWordBaseMediaDecodeTime >> 16 & 0XFF, upperWordBaseMediaDecodeTime >> 8 & 0XFF, upperWordBaseMediaDecodeTime & 0xFF, lowerWordBaseMediaDecodeTime >> 24, lowerWordBaseMediaDecodeTime >> 16 & 0XFF, lowerWordBaseMediaDecodeTime >> 8 & 0XFF, lowerWordBaseMediaDecodeTime & 0xFF])), MP4.trun(track, sampleDependencyTable.length + 16 + // tfhd\n    20 + // tfdt\n    8 + // traf header\n    16 + // mfhd\n    8 + // moof header\n    8), // mdat header\n    sampleDependencyTable);\n  }\n  /**\n   * Generate a track box.\n   * @param track {object} a track definition\n   * @return {Uint8Array} the track box\n   */\n  ;\n\n  MP4.trak = function trak(track) {\n    track.duration = track.duration || 0xffffffff;\n    return MP4.box(MP4.types.trak, MP4.tkhd(track), MP4.mdia(track));\n  };\n\n  MP4.trex = function trex(track) {\n    var id = track.id;\n    return MP4.box(MP4.types.trex, new Uint8Array([0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    id >> 24, id >> 16 & 0XFF, id >> 8 & 0XFF, id & 0xFF, // track_ID\n    0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n    0x00, 0x00, 0x00, 0x00, // default_sample_duration\n    0x00, 0x00, 0x00, 0x00, // default_sample_size\n    0x00, 0x01, 0x00, 0x01 // default_sample_flags\n    ]));\n  };\n\n  MP4.trun = function trun(track, offset) {\n    var samples = track.samples || [],\n        len = samples.length,\n        arraylen = 12 + 16 * len,\n        array = new Uint8Array(arraylen),\n        i,\n        sample,\n        duration,\n        size,\n        flags,\n        cts;\n    offset += 8 + arraylen;\n    array.set([0x00, // version 0\n    0x00, 0x0f, 0x01, // flags\n    len >>> 24 & 0xFF, len >>> 16 & 0xFF, len >>> 8 & 0xFF, len & 0xFF, // sample_count\n    offset >>> 24 & 0xFF, offset >>> 16 & 0xFF, offset >>> 8 & 0xFF, offset & 0xFF // data_offset\n    ], 0);\n\n    for (i = 0; i < len; i++) {\n      sample = samples[i];\n      duration = sample.duration;\n      size = sample.size;\n      flags = sample.flags;\n      cts = sample.cts;\n      array.set([duration >>> 24 & 0xFF, duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, // sample_duration\n      size >>> 24 & 0xFF, size >>> 16 & 0xFF, size >>> 8 & 0xFF, size & 0xFF, // sample_size\n      flags.isLeading << 2 | flags.dependsOn, flags.isDependedOn << 6 | flags.hasRedundancy << 4 | flags.paddingValue << 1 | flags.isNonSync, flags.degradPrio & 0xF0 << 8, flags.degradPrio & 0x0F, // sample_flags\n      cts >>> 24 & 0xFF, cts >>> 16 & 0xFF, cts >>> 8 & 0xFF, cts & 0xFF // sample_composition_time_offset\n      ], 12 + 16 * i);\n    }\n\n    return MP4.box(MP4.types.trun, array);\n  };\n\n  MP4.initSegment = function initSegment(tracks) {\n    if (!MP4.types) {\n      MP4.init();\n    }\n\n    var movie = MP4.moov(tracks),\n        result;\n    result = new Uint8Array(MP4.FTYP.byteLength + movie.byteLength);\n    result.set(MP4.FTYP);\n    result.set(movie, MP4.FTYP.byteLength);\n    return result;\n  };\n\n  return MP4;\n}();\n\n/* harmony default export */ var mp4_generator = (MP4);\n// CONCATENATED MODULE: ./src/utils/timescale-conversion.ts\nvar MPEG_TS_CLOCK_FREQ_HZ = 90000;\nfunction toTimescaleFromScale(value, destScale, srcScale, round) {\n  if (srcScale === void 0) {\n    srcScale = 1;\n  }\n\n  if (round === void 0) {\n    round = false;\n  }\n\n  return toTimescaleFromBase(value, destScale, 1 / srcScale);\n}\nfunction toTimescaleFromBase(value, destScale, srcBase, round) {\n  if (srcBase === void 0) {\n    srcBase = 1;\n  }\n\n  if (round === void 0) {\n    round = false;\n  }\n\n  var result = value * destScale * srcBase; // equivalent to `(value * scale) / (1 / base)`\n\n  return round ? Math.round(result) : result;\n}\nfunction toMsFromMpegTsClock(value, round) {\n  if (round === void 0) {\n    round = false;\n  }\n\n  return toTimescaleFromBase(value, 1000, 1 / MPEG_TS_CLOCK_FREQ_HZ, round);\n}\nfunction toMpegTsClockFromTimescale(value, srcScale) {\n  if (srcScale === void 0) {\n    srcScale = 1;\n  }\n\n  return toTimescaleFromBase(value, MPEG_TS_CLOCK_FREQ_HZ, 1 / srcScale);\n}\n// CONCATENATED MODULE: ./src/remux/mp4-remuxer.js\n/**\n * fMP4 remuxer\n*/\n\n\n\n\n\n\nvar MAX_SILENT_FRAME_DURATION_90KHZ = toMpegTsClockFromTimescale(10);\nvar PTS_DTS_SHIFT_TOLERANCE_90KHZ = toMpegTsClockFromTimescale(0.2);\nvar chromeVersion = null;\n\nvar mp4_remuxer_MP4Remuxer = /*#__PURE__*/function () {\n  function MP4Remuxer(observer, config, typeSupported, vendor) {\n    this.observer = observer;\n    this.config = config;\n    this.typeSupported = typeSupported;\n    this.ISGenerated = false;\n\n    if (chromeVersion === null) {\n      var result = navigator.userAgent.match(/Chrome\\/(\\d+)/i);\n      chromeVersion = result ? parseInt(result[1]) : 0;\n    }\n  }\n\n  var _proto = MP4Remuxer.prototype;\n\n  _proto.destroy = function destroy() {};\n\n  _proto.resetTimeStamp = function resetTimeStamp(defaultTimeStamp) {\n    this._initPTS = this._initDTS = defaultTimeStamp;\n  };\n\n  _proto.resetInitSegment = function resetInitSegment() {\n    this.ISGenerated = false;\n  };\n\n  _proto.getVideoStartPts = function getVideoStartPts(videoSamples) {\n    var rolloverDetected = false;\n    var startPTS = videoSamples.reduce(function (minPTS, sample) {\n      var delta = sample.pts - minPTS;\n\n      if (delta < -4294967296) {\n        // 2^32, see PTSNormalize for reasoning, but we're hitting a rollover here, and we don't want that to impact the timeOffset calculation\n        rolloverDetected = true;\n        return PTSNormalize(minPTS, sample.pts);\n      } else if (delta > 0) {\n        return minPTS;\n      } else {\n        return sample.pts;\n      }\n    }, videoSamples[0].pts);\n\n    if (rolloverDetected) {\n      logger[\"logger\"].debug('PTS rollover detected');\n    }\n\n    return startPTS;\n  };\n\n  _proto.remux = function remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset) {\n    // generate Init Segment if needed\n    if (!this.ISGenerated) {\n      this.generateIS(audioTrack, videoTrack, timeOffset);\n    }\n\n    if (this.ISGenerated) {\n      var nbAudioSamples = audioTrack.samples.length;\n      var nbVideoSamples = videoTrack.samples.length;\n      var audioTimeOffset = timeOffset;\n      var videoTimeOffset = timeOffset;\n\n      if (nbAudioSamples && nbVideoSamples) {\n        // timeOffset is expected to be the offset of the first timestamp of this fragment (first DTS)\n        // if first audio DTS is not aligned with first video DTS then we need to take that into account\n        // when providing timeOffset to remuxAudio / remuxVideo. if we don't do that, there might be a permanent / small\n        // drift between audio and video streams\n        var startPTS = this.getVideoStartPts(videoTrack.samples);\n        var tsDelta = PTSNormalize(audioTrack.samples[0].pts, startPTS) - startPTS;\n        var audiovideoTimestampDelta = tsDelta / videoTrack.inputTimeScale;\n        audioTimeOffset += Math.max(0, audiovideoTimestampDelta);\n        videoTimeOffset += Math.max(0, -audiovideoTimestampDelta);\n      } // Purposefully remuxing audio before video, so that remuxVideo can use nextAudioPts, which is\n      // calculated in remuxAudio.\n      // logger.log('nb AAC samples:' + audioTrack.samples.length);\n\n\n      if (nbAudioSamples) {\n        // if initSegment was generated without video samples, regenerate it again\n        if (!audioTrack.timescale) {\n          logger[\"logger\"].warn('regenerate InitSegment as audio detected');\n          this.generateIS(audioTrack, videoTrack, timeOffset);\n        }\n\n        var audioData = this.remuxAudio(audioTrack, audioTimeOffset, contiguous, accurateTimeOffset); // logger.log('nb AVC samples:' + videoTrack.samples.length);\n\n        if (nbVideoSamples) {\n          var audioTrackLength;\n\n          if (audioData) {\n            audioTrackLength = audioData.endPTS - audioData.startPTS;\n          } // if initSegment was generated without video samples, regenerate it again\n\n\n          if (!videoTrack.timescale) {\n            logger[\"logger\"].warn('regenerate InitSegment as video detected');\n            this.generateIS(audioTrack, videoTrack, timeOffset);\n          }\n\n          this.remuxVideo(videoTrack, videoTimeOffset, contiguous, audioTrackLength);\n        }\n      } else {\n        // logger.log('nb AVC samples:' + videoTrack.samples.length);\n        if (nbVideoSamples) {\n          var videoData = this.remuxVideo(videoTrack, videoTimeOffset, contiguous, 0, accurateTimeOffset);\n\n          if (videoData && audioTrack.codec) {\n            this.remuxEmptyAudio(audioTrack, audioTimeOffset, contiguous, videoData);\n          }\n        }\n      }\n    } // logger.log('nb ID3 samples:' + audioTrack.samples.length);\n\n\n    if (id3Track.samples.length) {\n      this.remuxID3(id3Track, timeOffset);\n    } // logger.log('nb ID3 samples:' + audioTrack.samples.length);\n\n\n    if (textTrack.samples.length) {\n      this.remuxText(textTrack, timeOffset);\n    } // notify end of parsing\n\n\n    this.observer.trigger(events[\"default\"].FRAG_PARSED);\n  };\n\n  _proto.generateIS = function generateIS(audioTrack, videoTrack, timeOffset) {\n    var observer = this.observer,\n        audioSamples = audioTrack.samples,\n        videoSamples = videoTrack.samples,\n        typeSupported = this.typeSupported,\n        container = 'audio/mp4',\n        tracks = {},\n        data = {\n      tracks: tracks\n    },\n        computePTSDTS = this._initPTS === undefined,\n        initPTS,\n        initDTS;\n\n    if (computePTSDTS) {\n      initPTS = initDTS = Infinity;\n    }\n\n    if (audioTrack.config && audioSamples.length) {\n      // let's use audio sampling rate as MP4 time scale.\n      // rationale is that there is a integer nb of audio frames per audio sample (1024 for AAC)\n      // using audio sampling rate here helps having an integer MP4 frame duration\n      // this avoids potential rounding issue and AV sync issue\n      audioTrack.timescale = audioTrack.samplerate;\n      logger[\"logger\"].log(\"audio sampling rate : \" + audioTrack.samplerate);\n\n      if (!audioTrack.isAAC) {\n        if (typeSupported.mpeg) {\n          // Chrome and Safari\n          container = 'audio/mpeg';\n          audioTrack.codec = '';\n        } else if (typeSupported.mp3) {\n          // Firefox\n          audioTrack.codec = 'mp3';\n        }\n      }\n\n      tracks.audio = {\n        container: container,\n        codec: audioTrack.codec,\n        initSegment: !audioTrack.isAAC && typeSupported.mpeg ? new Uint8Array() : mp4_generator.initSegment([audioTrack]),\n        metadata: {\n          channelCount: audioTrack.channelCount\n        }\n      };\n\n      if (computePTSDTS) {\n        // remember first PTS of this demuxing context. for audio, PTS = DTS\n        initPTS = initDTS = audioSamples[0].pts - Math.round(audioTrack.inputTimeScale * timeOffset);\n      }\n    }\n\n    if (videoTrack.sps && videoTrack.pps && videoSamples.length) {\n      // let's use input time scale as MP4 video timescale\n      // we use input time scale straight away to avoid rounding issues on frame duration / cts computation\n      var inputTimeScale = videoTrack.inputTimeScale;\n      videoTrack.timescale = inputTimeScale;\n      tracks.video = {\n        container: 'video/mp4',\n        codec: videoTrack.codec,\n        initSegment: mp4_generator.initSegment([videoTrack]),\n        metadata: {\n          width: videoTrack.width,\n          height: videoTrack.height\n        }\n      };\n\n      if (computePTSDTS) {\n        var startPTS = this.getVideoStartPts(videoSamples);\n        var startOffset = Math.round(inputTimeScale * timeOffset);\n        initDTS = Math.min(initDTS, PTSNormalize(videoSamples[0].dts, startPTS) - startOffset);\n        initPTS = Math.min(initPTS, startPTS - startOffset);\n        this.observer.trigger(events[\"default\"].INIT_PTS_FOUND, {\n          initPTS: initPTS\n        });\n      }\n    } else if (computePTSDTS && tracks.audio) {\n      // initPTS found for audio-only stream with main and alt audio\n      this.observer.trigger(events[\"default\"].INIT_PTS_FOUND, {\n        initPTS: initPTS\n      });\n    }\n\n    if (Object.keys(tracks).length) {\n      observer.trigger(events[\"default\"].FRAG_PARSING_INIT_SEGMENT, data);\n      this.ISGenerated = true;\n\n      if (computePTSDTS) {\n        this._initPTS = initPTS;\n        this._initDTS = initDTS;\n      }\n    } else {\n      observer.trigger(events[\"default\"].ERROR, {\n        type: errors[\"ErrorTypes\"].MEDIA_ERROR,\n        details: errors[\"ErrorDetails\"].FRAG_PARSING_ERROR,\n        fatal: false,\n        reason: 'no audio/video samples found'\n      });\n    }\n  };\n\n  _proto.remuxVideo = function remuxVideo(track, timeOffset, contiguous, audioTrackLength) {\n    var timeScale = track.timescale;\n    var inputSamples = track.samples;\n    var outputSamples = [];\n    var nbSamples = inputSamples.length;\n    var initPTS = this._initPTS;\n    var offset = 8;\n    var mp4SampleDuration;\n    var mdat;\n    var moof;\n    var firstDTS;\n    var lastDTS;\n    var minPTS = Number.POSITIVE_INFINITY;\n    var maxPTS = Number.NEGATIVE_INFINITY;\n    var ptsDtsShift = 0;\n    var sortSamples = false; // if parsed fragment is contiguous with last one, let's use last DTS value as reference\n\n    var nextAvcDts = this.nextAvcDts;\n\n    if (nbSamples === 0) {\n      return;\n    }\n\n    if (!contiguous) {\n      var pts = timeOffset * timeScale;\n      var cts = inputSamples[0].pts - PTSNormalize(inputSamples[0].dts, inputSamples[0].pts); // if not contiguous, let's use target timeOffset\n\n      nextAvcDts = pts - cts;\n    } // PTS is coded on 33bits, and can loop from -2^32 to 2^32\n    // PTSNormalize will make PTS/DTS value monotonic, we use last known DTS value as reference value\n\n\n    for (var i = 0; i < nbSamples; i++) {\n      var sample = inputSamples[i];\n      sample.pts = PTSNormalize(sample.pts - initPTS, nextAvcDts);\n      sample.dts = PTSNormalize(sample.dts - initPTS, nextAvcDts);\n\n      if (sample.dts > sample.pts) {\n        ptsDtsShift = Math.max(Math.min(ptsDtsShift, sample.pts - sample.dts), -1 * PTS_DTS_SHIFT_TOLERANCE_90KHZ);\n      }\n\n      if (sample.dts < inputSamples[i > 0 ? i - 1 : i].dts) {\n        sortSamples = true;\n      }\n    } // sort video samples by DTS then PTS then demux id order\n\n\n    if (sortSamples) {\n      inputSamples.sort(function (a, b) {\n        var deltadts = a.dts - b.dts;\n        var deltapts = a.pts - b.pts;\n        return deltadts || deltapts || a.id - b.id;\n      });\n    } // Get first/last DTS\n\n\n    firstDTS = inputSamples[0].dts;\n    lastDTS = inputSamples[nbSamples - 1].dts; // on Safari let's signal the same sample duration for all samples\n    // sample duration (as expected by trun MP4 boxes), should be the delta between sample DTS\n    // set this constant duration as being the avg delta between consecutive DTS.\n\n    var averageSampleDuration = Math.round((lastDTS - firstDTS) / (nbSamples - 1)); // handle broken streams with PTS < DTS, tolerance up 0.2 seconds\n\n    if (ptsDtsShift < 0) {\n      if (ptsDtsShift < averageSampleDuration * -2) {\n        // Fix for \"CNN special report, with CC\" in test-streams (including Safari browser)\n        // With large PTS < DTS errors such as this, we want to correct CTS while maintaining increasing DTS values\n        logger[\"logger\"].warn(\"PTS < DTS detected in video samples, offsetting DTS from PTS by \" + toMsFromMpegTsClock(-averageSampleDuration, true) + \" ms\");\n        var lastDts = ptsDtsShift;\n\n        for (var _i = 0; _i < nbSamples; _i++) {\n          inputSamples[_i].dts = lastDts = Math.max(lastDts, inputSamples[_i].pts - averageSampleDuration);\n          inputSamples[_i].pts = Math.max(lastDts, inputSamples[_i].pts);\n        }\n      } else {\n        // Fix for \"Custom IV with bad PTS DTS\" in test-streams\n        // With smaller PTS < DTS errors we can simply move all DTS back. This increases CTS without causing buffer gaps or decode errors in Safari\n        logger[\"logger\"].warn(\"PTS < DTS detected in video samples, shifting DTS by \" + toMsFromMpegTsClock(ptsDtsShift, true) + \" ms to overcome this issue\");\n\n        for (var _i2 = 0; _i2 < nbSamples; _i2++) {\n          inputSamples[_i2].dts = inputSamples[_i2].dts + ptsDtsShift;\n        }\n      }\n\n      firstDTS = inputSamples[0].dts;\n      lastDTS = inputSamples[nbSamples - 1].dts;\n    } // if fragment are contiguous, detect hole/overlapping between fragments\n\n\n    if (contiguous) {\n      // check timestamp continuity across consecutive fragments (this is to remove inter-fragment gap/hole)\n      var delta = firstDTS - nextAvcDts;\n      var foundHole = delta > averageSampleDuration;\n      var foundOverlap = delta < -1;\n\n      if (foundHole || foundOverlap) {\n        if (foundHole) {\n          logger[\"logger\"].warn(\"AVC: \" + toMsFromMpegTsClock(delta, true) + \" ms (\" + delta + \"dts) hole between fragments detected, filling it\");\n        } else {\n          logger[\"logger\"].warn(\"AVC: \" + toMsFromMpegTsClock(-delta, true) + \" ms (\" + delta + \"dts) overlapping between fragments detected\");\n        }\n\n        firstDTS = nextAvcDts;\n        var firstPTS = inputSamples[0].pts - delta;\n        inputSamples[0].dts = firstDTS;\n        inputSamples[0].pts = firstPTS;\n        logger[\"logger\"].log(\"Video: First PTS/DTS adjusted: \" + toMsFromMpegTsClock(firstPTS, true) + \"/\" + toMsFromMpegTsClock(firstDTS, true) + \", delta: \" + toMsFromMpegTsClock(delta, true) + \" ms\");\n      }\n    }\n\n    if (chromeVersion && chromeVersion < 75) {\n      firstDTS = Math.max(0, firstDTS);\n    }\n\n    var nbNalu = 0;\n    var naluLen = 0;\n\n    for (var _i3 = 0; _i3 < nbSamples; _i3++) {\n      // compute total/avc sample length and nb of NAL units\n      var _sample = inputSamples[_i3];\n      var units = _sample.units;\n      var nbUnits = units.length;\n      var sampleLen = 0;\n\n      for (var j = 0; j < nbUnits; j++) {\n        sampleLen += units[j].data.length;\n      }\n\n      naluLen += sampleLen;\n      nbNalu += nbUnits;\n      _sample.length = sampleLen; // normalize PTS/DTS\n      // ensure sample monotonic DTS\n\n      _sample.dts = Math.max(_sample.dts, firstDTS); // ensure that computed value is greater or equal than sample DTS\n\n      _sample.pts = Math.max(_sample.pts, _sample.dts, 0);\n      minPTS = Math.min(_sample.pts, minPTS);\n      maxPTS = Math.max(_sample.pts, maxPTS);\n    }\n\n    lastDTS = inputSamples[nbSamples - 1].dts;\n    /* concatenate the video data and construct the mdat in place\n      (need 8 more bytes to fill length and mpdat type) */\n\n    var mdatSize = naluLen + 4 * nbNalu + 8;\n\n    try {\n      mdat = new Uint8Array(mdatSize);\n    } catch (err) {\n      this.observer.trigger(events[\"default\"].ERROR, {\n        type: errors[\"ErrorTypes\"].MUX_ERROR,\n        details: errors[\"ErrorDetails\"].REMUX_ALLOC_ERROR,\n        fatal: false,\n        bytes: mdatSize,\n        reason: \"fail allocating video mdat \" + mdatSize\n      });\n      return;\n    }\n\n    var view = new DataView(mdat.buffer);\n    view.setUint32(0, mdatSize);\n    mdat.set(mp4_generator.types.mdat, 4);\n\n    for (var _i4 = 0; _i4 < nbSamples; _i4++) {\n      var avcSample = inputSamples[_i4];\n      var avcSampleUnits = avcSample.units;\n      var mp4SampleLength = 0;\n      var compositionTimeOffset = void 0; // convert NALU bitstream to MP4 format (prepend NALU with size field)\n\n      for (var _j = 0, _nbUnits = avcSampleUnits.length; _j < _nbUnits; _j++) {\n        var unit = avcSampleUnits[_j];\n        var unitData = unit.data;\n        var unitDataLen = unit.data.byteLength;\n        view.setUint32(offset, unitDataLen);\n        offset += 4;\n        mdat.set(unitData, offset);\n        offset += unitDataLen;\n        mp4SampleLength += 4 + unitDataLen;\n      } // expected sample duration is the Decoding Timestamp diff of consecutive samples\n\n\n      if (_i4 < nbSamples - 1) {\n        mp4SampleDuration = inputSamples[_i4 + 1].dts - avcSample.dts;\n      } else {\n        var config = this.config;\n        var lastFrameDuration = avcSample.dts - inputSamples[_i4 > 0 ? _i4 - 1 : _i4].dts;\n\n        if (config.stretchShortVideoTrack) {\n          // In some cases, a segment's audio track duration may exceed the video track duration.\n          // Since we've already remuxed audio, and we know how long the audio track is, we look to\n          // see if the delta to the next segment is longer than maxBufferHole.\n          // If so, playback would potentially get stuck, so we artificially inflate\n          // the duration of the last frame to minimize any potential gap between segments.\n          var maxBufferHole = config.maxBufferHole;\n          var gapTolerance = Math.floor(maxBufferHole * timeScale);\n          var deltaToFrameEnd = (audioTrackLength ? minPTS + audioTrackLength * timeScale : this.nextAudioPts) - avcSample.pts;\n\n          if (deltaToFrameEnd > gapTolerance) {\n            // We subtract lastFrameDuration from deltaToFrameEnd to try to prevent any video\n            // frame overlap. maxBufferHole should be >> lastFrameDuration anyway.\n            mp4SampleDuration = deltaToFrameEnd - lastFrameDuration;\n\n            if (mp4SampleDuration < 0) {\n              mp4SampleDuration = lastFrameDuration;\n            }\n\n            logger[\"logger\"].log(\"It is approximately \" + toMsFromMpegTsClock(deltaToFrameEnd, false) + \" ms to the next segment; using duration \" + toMsFromMpegTsClock(mp4SampleDuration, false) + \" ms for the last video frame.\");\n          } else {\n            mp4SampleDuration = lastFrameDuration;\n          }\n        } else {\n          mp4SampleDuration = lastFrameDuration;\n        }\n      }\n\n      compositionTimeOffset = Math.round(avcSample.pts - avcSample.dts); // console.log('PTS/DTS/initDTS/normPTS/normDTS/relative PTS : ${avcSample.pts}/${avcSample.dts}/${initDTS}/${ptsnorm}/${dtsnorm}/${(avcSample.pts/4294967296).toFixed(3)}');\n\n      outputSamples.push({\n        size: mp4SampleLength,\n        // constant duration\n        duration: mp4SampleDuration,\n        cts: compositionTimeOffset,\n        flags: {\n          isLeading: 0,\n          isDependedOn: 0,\n          hasRedundancy: 0,\n          degradPrio: 0,\n          dependsOn: avcSample.key ? 2 : 1,\n          isNonSync: avcSample.key ? 0 : 1\n        }\n      });\n    } // next AVC sample DTS should be equal to last sample DTS + last sample duration (in PES timescale)\n\n\n    this.nextAvcDts = lastDTS + mp4SampleDuration;\n    var dropped = track.dropped;\n    track.nbNalu = 0;\n    track.dropped = 0;\n\n    if (outputSamples.length && navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {\n      var flags = outputSamples[0].flags; // chrome workaround, mark first sample as being a Random Access Point to avoid sourcebuffer append issue\n      // https://code.google.com/p/chromium/issues/detail?id=229412\n\n      flags.dependsOn = 2;\n      flags.isNonSync = 0;\n    }\n\n    track.samples = outputSamples;\n    moof = mp4_generator.moof(track.sequenceNumber++, firstDTS, track);\n    track.samples = [];\n    var data = {\n      data1: moof,\n      data2: mdat,\n      startPTS: minPTS / timeScale,\n      endPTS: (maxPTS + mp4SampleDuration) / timeScale,\n      startDTS: firstDTS / timeScale,\n      endDTS: this.nextAvcDts / timeScale,\n      type: 'video',\n      hasAudio: false,\n      hasVideo: true,\n      nb: outputSamples.length,\n      dropped: dropped\n    };\n    this.observer.trigger(events[\"default\"].FRAG_PARSING_DATA, data);\n    return data;\n  };\n\n  _proto.remuxAudio = function remuxAudio(track, timeOffset, contiguous, accurateTimeOffset) {\n    var inputTimeScale = track.inputTimeScale;\n    var mp4timeScale = track.timescale;\n    var scaleFactor = inputTimeScale / mp4timeScale;\n    var mp4SampleDuration = track.isAAC ? 1024 : 1152;\n    var inputSampleDuration = mp4SampleDuration * scaleFactor;\n    var initPTS = this._initPTS;\n    var rawMPEG = !track.isAAC && this.typeSupported.mpeg;\n    var mp4Sample;\n    var fillFrame;\n    var mdat;\n    var moof;\n    var firstPTS;\n    var lastPTS;\n    var offset = rawMPEG ? 0 : 8;\n    var inputSamples = track.samples;\n    var outputSamples = [];\n    var nextAudioPts = this.nextAudioPts; // for audio samples, also consider consecutive fragments as being contiguous (even if a level switch occurs),\n    // for sake of clarity:\n    // consecutive fragments are frags with\n    //  - less than 100ms gaps between new time offset (if accurate) and next expected PTS OR\n    //  - less than 20 audio frames distance\n    // contiguous fragments are consecutive fragments from same quality level (same level, new SN = old SN + 1)\n    // this helps ensuring audio continuity\n    // and this also avoids audio glitches/cut when switching quality, or reporting wrong duration on first audio frame\n\n    contiguous |= inputSamples.length && nextAudioPts && (accurateTimeOffset && Math.abs(timeOffset - nextAudioPts / inputTimeScale) < 0.1 || Math.abs(inputSamples[0].pts - nextAudioPts - initPTS) < 20 * inputSampleDuration); // compute normalized PTS\n\n    inputSamples.forEach(function (sample) {\n      sample.pts = sample.dts = PTSNormalize(sample.pts - initPTS, timeOffset * inputTimeScale);\n    }); // filter out sample with negative PTS that are not playable anyway\n    // if we don't remove these negative samples, they will shift all audio samples forward.\n    // leading to audio overlap between current / next fragment\n\n    inputSamples = inputSamples.filter(function (sample) {\n      return sample.pts >= 0;\n    }); // in case all samples have negative PTS, and have been filtered out, return now\n\n    if (inputSamples.length === 0) {\n      return;\n    }\n\n    if (!contiguous) {\n      if (!accurateTimeOffset) {\n        // if frag are mot contiguous and if we cant trust time offset, let's use first sample PTS as next audio PTS\n        nextAudioPts = inputSamples[0].pts;\n      } else {\n        // if timeOffset is accurate, let's use it as predicted next audio PTS\n        nextAudioPts = Math.max(0, timeOffset * inputTimeScale);\n      }\n    } // If the audio track is missing samples, the frames seem to get \"left-shifted\" within the\n    // resulting mp4 segment, causing sync issues and leaving gaps at the end of the audio segment.\n    // In an effort to prevent this from happening, we inject frames here where there are gaps.\n    // When possible, we inject a silent frame; when that's not possible, we duplicate the last\n    // frame.\n\n\n    if (track.isAAC) {\n      var maxAudioFramesDrift = this.config.maxAudioFramesDrift;\n\n      for (var i = 0, nextPts = nextAudioPts; i < inputSamples.length;) {\n        // First, let's see how far off this frame is from where we expect it to be\n        var sample = inputSamples[i];\n        var pts = sample.pts;\n        var delta = pts - nextPts; // If we're overlapping by more than a duration, drop this sample\n\n        if (delta <= -maxAudioFramesDrift * inputSampleDuration) {\n          if (contiguous || i > 0) {\n            logger[\"logger\"].warn(\"Dropping 1 audio frame @ \" + toMsFromMpegTsClock(nextPts, true) / 1000 + \"s due to \" + toMsFromMpegTsClock(delta, true) + \" ms overlap.\");\n            inputSamples.splice(i, 1); // Don't touch nextPtsNorm or i\n          } else {\n            // When changing qualities we can't trust that audio has been appended up to nextAudioPts\n            // Warn about the overlap but do not drop samples as that can introduce buffer gaps\n            logger[\"logger\"].warn(\"Audio frame @ \" + toMsFromMpegTsClock(pts, true) / 1000 + \"s overlaps nextAudioPts by \" + toMsFromMpegTsClock(delta, true) + \" ms.\");\n            nextPts = pts + inputSampleDuration;\n            i++;\n          }\n        } // eslint-disable-line brace-style\n        // Insert missing frames if:\n        // 1: We're more than maxAudioFramesDrift frame away\n        // 2: Not more than MAX_SILENT_FRAME_DURATION away\n        // 3: currentTime (aka nextPtsNorm) is not 0\n        else if (delta >= maxAudioFramesDrift * inputSampleDuration && delta < MAX_SILENT_FRAME_DURATION_90KHZ && nextPts) {\n            var missing = Math.round(delta / inputSampleDuration);\n            logger[\"logger\"].warn(\"Injecting \" + missing + \" audio frames @ \" + toMsFromMpegTsClock(nextPts, true) / 1000 + \"s due to \" + toMsFromMpegTsClock(delta, true) + \" ms gap.\");\n\n            for (var j = 0; j < missing; j++) {\n              var newStamp = Math.max(nextPts, 0);\n              fillFrame = aac_helper.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);\n\n              if (!fillFrame) {\n                logger[\"logger\"].log('Unable to get silent frame for given audio codec; duplicating last frame instead.');\n                fillFrame = sample.unit.subarray();\n              }\n\n              inputSamples.splice(i, 0, {\n                unit: fillFrame,\n                pts: newStamp,\n                dts: newStamp\n              });\n              nextPts += inputSampleDuration;\n              i++;\n            } // Adjust sample to next expected pts\n\n\n            sample.pts = sample.dts = nextPts;\n            nextPts += inputSampleDuration;\n            i++;\n          } else {\n            // Otherwise, just adjust pts\n            if (Math.abs(delta) > 0.1 * inputSampleDuration) {// logger.log(`Invalid frame delta ${Math.round(delta + inputSampleDuration)} at PTS ${Math.round(pts / 90)} (should be ${Math.round(inputSampleDuration)}).`);\n            }\n\n            sample.pts = sample.dts = nextPts;\n            nextPts += inputSampleDuration;\n            i++;\n          }\n      }\n    } // compute mdat size, as we eventually filtered/added some samples\n\n\n    var nbSamples = inputSamples.length;\n    var mdatSize = 0;\n\n    while (nbSamples--) {\n      mdatSize += inputSamples[nbSamples].unit.byteLength;\n    }\n\n    for (var _j2 = 0, _nbSamples = inputSamples.length; _j2 < _nbSamples; _j2++) {\n      var audioSample = inputSamples[_j2];\n      var unit = audioSample.unit;\n      var _pts = audioSample.pts; // logger.log(`Audio/PTS:${toMsFromMpegTsClock(pts, true)}`);\n      // if not first sample\n\n      if (lastPTS !== undefined && mp4Sample) {\n        mp4Sample.duration = Math.round((_pts - lastPTS) / scaleFactor);\n      } else {\n        var _delta = _pts - nextAudioPts;\n\n        var numMissingFrames = 0; // if fragment are contiguous, detect hole/overlapping between fragments\n        // contiguous fragments are consecutive fragments from same quality level (same level, new SN = old SN + 1)\n\n        if (contiguous && track.isAAC) {\n          // log delta\n          if (_delta) {\n            if (_delta > 0 && _delta < MAX_SILENT_FRAME_DURATION_90KHZ) {\n              // Q: why do we have to round here, shouldn't this always result in an integer if timestamps are correct,\n              // and if not, shouldn't we actually Math.ceil() instead?\n              numMissingFrames = Math.round((_pts - nextAudioPts) / inputSampleDuration);\n              logger[\"logger\"].log(toMsFromMpegTsClock(_delta, true) + \" ms hole between AAC samples detected,filling it\");\n\n              if (numMissingFrames > 0) {\n                fillFrame = aac_helper.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);\n\n                if (!fillFrame) {\n                  fillFrame = unit.subarray();\n                }\n\n                mdatSize += numMissingFrames * fillFrame.length;\n              } // if we have frame overlap, overlapping for more than half a frame duraion\n\n            } else if (_delta < -12) {\n              // drop overlapping audio frames... browser will deal with it\n              logger[\"logger\"].log(\"drop overlapping AAC sample, expected/parsed/delta: \" + toMsFromMpegTsClock(nextAudioPts, true) + \" ms / \" + toMsFromMpegTsClock(_pts, true) + \" ms / \" + toMsFromMpegTsClock(-_delta, true) + \" ms\");\n              mdatSize -= unit.byteLength;\n              continue;\n            } // set PTS/DTS to expected PTS/DTS\n\n\n            _pts = nextAudioPts;\n          }\n        } // remember first PTS of our audioSamples\n\n\n        firstPTS = _pts;\n\n        if (mdatSize > 0) {\n          mdatSize += offset;\n\n          try {\n            mdat = new Uint8Array(mdatSize);\n          } catch (err) {\n            this.observer.trigger(events[\"default\"].ERROR, {\n              type: errors[\"ErrorTypes\"].MUX_ERROR,\n              details: errors[\"ErrorDetails\"].REMUX_ALLOC_ERROR,\n              fatal: false,\n              bytes: mdatSize,\n              reason: \"fail allocating audio mdat \" + mdatSize\n            });\n            return;\n          }\n\n          if (!rawMPEG) {\n            var view = new DataView(mdat.buffer);\n            view.setUint32(0, mdatSize);\n            mdat.set(mp4_generator.types.mdat, 4);\n          }\n        } else {\n          // no audio samples\n          return;\n        }\n\n        for (var _i5 = 0; _i5 < numMissingFrames; _i5++) {\n          fillFrame = aac_helper.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);\n\n          if (!fillFrame) {\n            logger[\"logger\"].log('Unable to get silent frame for given audio codec; duplicating this frame instead.');\n            fillFrame = unit.subarray();\n          }\n\n          mdat.set(fillFrame, offset);\n          offset += fillFrame.byteLength;\n          mp4Sample = {\n            size: fillFrame.byteLength,\n            cts: 0,\n            duration: 1024,\n            flags: {\n              isLeading: 0,\n              isDependedOn: 0,\n              hasRedundancy: 0,\n              degradPrio: 0,\n              dependsOn: 1\n            }\n          };\n          outputSamples.push(mp4Sample);\n        }\n      }\n\n      mdat.set(unit, offset);\n      var unitLen = unit.byteLength;\n      offset += unitLen; // console.log('PTS/DTS/initDTS/normPTS/normDTS/relative PTS : ${audioSample.pts}/${audioSample.dts}/${initDTS}/${ptsnorm}/${dtsnorm}/${(audioSample.pts/4294967296).toFixed(3)}');\n\n      mp4Sample = {\n        size: unitLen,\n        cts: 0,\n        duration: 0,\n        flags: {\n          isLeading: 0,\n          isDependedOn: 0,\n          hasRedundancy: 0,\n          degradPrio: 0,\n          dependsOn: 1\n        }\n      };\n      outputSamples.push(mp4Sample);\n      lastPTS = _pts;\n    }\n\n    var lastSampleDuration = 0;\n    nbSamples = outputSamples.length; // set last sample duration as being identical to previous sample\n\n    if (nbSamples >= 2) {\n      lastSampleDuration = outputSamples[nbSamples - 2].duration;\n      mp4Sample.duration = lastSampleDuration;\n    }\n\n    if (nbSamples) {\n      // next audio sample PTS should be equal to last sample PTS + duration\n      this.nextAudioPts = nextAudioPts = lastPTS + scaleFactor * lastSampleDuration; // logger.log('Audio/PTS/PTSend:' + audioSample.pts.toFixed(0) + '/' + this.nextAacDts.toFixed(0));\n\n      track.samples = outputSamples;\n\n      if (rawMPEG) {\n        moof = new Uint8Array();\n      } else {\n        moof = mp4_generator.moof(track.sequenceNumber++, firstPTS / scaleFactor, track);\n      }\n\n      track.samples = [];\n      var start = firstPTS / inputTimeScale;\n      var end = nextAudioPts / inputTimeScale;\n      var audioData = {\n        data1: moof,\n        data2: mdat,\n        startPTS: start,\n        endPTS: end,\n        startDTS: start,\n        endDTS: end,\n        type: 'audio',\n        hasAudio: true,\n        hasVideo: false,\n        nb: nbSamples\n      };\n      this.observer.trigger(events[\"default\"].FRAG_PARSING_DATA, audioData);\n      return audioData;\n    }\n\n    return null;\n  };\n\n  _proto.remuxEmptyAudio = function remuxEmptyAudio(track, timeOffset, contiguous, videoData) {\n    var inputTimeScale = track.inputTimeScale;\n    var mp4timeScale = track.samplerate ? track.samplerate : inputTimeScale;\n    var scaleFactor = inputTimeScale / mp4timeScale;\n    var nextAudioPts = this.nextAudioPts; // sync with video's timestamp\n\n    var startDTS = (nextAudioPts !== undefined ? nextAudioPts : videoData.startDTS * inputTimeScale) + this._initDTS;\n    var endDTS = videoData.endDTS * inputTimeScale + this._initDTS; // one sample's duration value\n\n    var sampleDuration = 1024;\n    var frameDuration = scaleFactor * sampleDuration; // samples count of this segment's duration\n\n    var nbSamples = Math.ceil((endDTS - startDTS) / frameDuration); // silent frame\n\n    var silentFrame = aac_helper.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);\n    logger[\"logger\"].warn('remux empty Audio'); // Can't remux if we can't generate a silent frame...\n\n    if (!silentFrame) {\n      logger[\"logger\"].trace('Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec!');\n      return;\n    }\n\n    var samples = [];\n\n    for (var i = 0; i < nbSamples; i++) {\n      var stamp = startDTS + i * frameDuration;\n      samples.push({\n        unit: silentFrame,\n        pts: stamp,\n        dts: stamp\n      });\n    }\n\n    track.samples = samples;\n    this.remuxAudio(track, timeOffset, contiguous);\n  };\n\n  _proto.remuxID3 = function remuxID3(track, timeOffset) {\n    var length = track.samples.length;\n\n    if (!length) {\n      return;\n    }\n\n    var inputTimeScale = track.inputTimeScale;\n    var initPTS = this._initPTS;\n    var initDTS = this._initDTS; // consume samples\n\n    for (var index = 0; index < length; index++) {\n      var sample = track.samples[index]; // setting id3 pts, dts to relative time\n      // using this._initPTS and this._initDTS to calculate relative time\n\n      sample.pts = PTSNormalize(sample.pts - initPTS, timeOffset * inputTimeScale) / inputTimeScale;\n      sample.dts = PTSNormalize(sample.dts - initDTS, timeOffset * inputTimeScale) / inputTimeScale;\n    }\n\n    this.observer.trigger(events[\"default\"].FRAG_PARSING_METADATA, {\n      samples: track.samples\n    });\n    track.samples = [];\n  };\n\n  _proto.remuxText = function remuxText(track, timeOffset) {\n    var length = track.samples.length;\n    var inputTimeScale = track.inputTimeScale;\n    var initPTS = this._initPTS; // consume samples\n\n    if (length) {\n      for (var index = 0; index < length; index++) {\n        var sample = track.samples[index]; // setting text pts, dts to relative time\n        // using this._initPTS and this._initDTS to calculate relative time\n\n        sample.pts = PTSNormalize(sample.pts - initPTS, timeOffset * inputTimeScale) / inputTimeScale;\n      }\n\n      track.samples.sort(function (a, b) {\n        return a.pts - b.pts;\n      });\n      this.observer.trigger(events[\"default\"].FRAG_PARSING_USERDATA, {\n        samples: track.samples\n      });\n    }\n\n    track.samples = [];\n  };\n\n  return MP4Remuxer;\n}();\n\nfunction PTSNormalize(value, reference) {\n  var offset;\n\n  if (reference === undefined) {\n    return value;\n  }\n\n  if (reference < value) {\n    // - 2^33\n    offset = -8589934592;\n  } else {\n    // + 2^33\n    offset = 8589934592;\n  }\n  /* PTS is 33bit (from 0 to 2^33 -1)\n    if diff between value and reference is bigger than half of the amplitude (2^32) then it means that\n    PTS looping occured. fill the gap */\n\n\n  while (Math.abs(value - reference) > 4294967296) {\n    value += offset;\n  }\n\n  return value;\n}\n\n/* harmony default export */ var mp4_remuxer = (mp4_remuxer_MP4Remuxer);\n// CONCATENATED MODULE: ./src/remux/passthrough-remuxer.js\n/**\n * passthrough remuxer\n*/\n\n\nvar passthrough_remuxer_PassThroughRemuxer = /*#__PURE__*/function () {\n  function PassThroughRemuxer(observer) {\n    this.observer = observer;\n  }\n\n  var _proto = PassThroughRemuxer.prototype;\n\n  _proto.destroy = function destroy() {};\n\n  _proto.resetTimeStamp = function resetTimeStamp() {};\n\n  _proto.resetInitSegment = function resetInitSegment() {};\n\n  _proto.remux = function remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset, rawData) {\n    var observer = this.observer;\n    var streamType = '';\n\n    if (audioTrack) {\n      streamType += 'audio';\n    }\n\n    if (videoTrack) {\n      streamType += 'video';\n    }\n\n    observer.trigger(events[\"default\"].FRAG_PARSING_DATA, {\n      data1: rawData,\n      startPTS: timeOffset,\n      startDTS: timeOffset,\n      type: streamType,\n      hasAudio: !!audioTrack,\n      hasVideo: !!videoTrack,\n      nb: 1,\n      dropped: 0\n    }); // notify end of parsing\n\n    observer.trigger(events[\"default\"].FRAG_PARSED);\n  };\n\n  return PassThroughRemuxer;\n}();\n\n/* harmony default export */ var passthrough_remuxer = (passthrough_remuxer_PassThroughRemuxer);\n// CONCATENATED MODULE: ./src/demux/demuxer-inline.js\n/**\n *\n * inline demuxer: probe fragments and instantiate\n * appropriate demuxer depending on content type (TSDemuxer, AACDemuxer, ...)\n *\n */\n\n\n\n\n\n\n\n\n\n\n // see https://stackoverflow.com/a/11237259/589493\n\nvar global = Object(get_self_scope[\"getSelfScope\"])(); // safeguard for code that might run both on worker and main thread\n\nvar now; // performance.now() not available on WebWorker, at least on Safari Desktop\n\ntry {\n  now = global.performance.now.bind(global.performance);\n} catch (err) {\n  logger[\"logger\"].debug('Unable to use Performance API on this environment');\n  now = global.Date.now;\n}\n\nvar demuxer_inline_DemuxerInline = /*#__PURE__*/function () {\n  function DemuxerInline(observer, typeSupported, config, vendor) {\n    this.observer = observer;\n    this.typeSupported = typeSupported;\n    this.config = config;\n    this.vendor = vendor;\n  }\n\n  var _proto = DemuxerInline.prototype;\n\n  _proto.destroy = function destroy() {\n    var demuxer = this.demuxer;\n\n    if (demuxer) {\n      demuxer.destroy();\n    }\n  };\n\n  _proto.push = function push(data, decryptdata, initSegment, audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS) {\n    var _this = this;\n\n    if (data.byteLength > 0 && decryptdata != null && decryptdata.key != null && decryptdata.method === 'AES-128') {\n      var decrypter = this.decrypter;\n\n      if (decrypter == null) {\n        decrypter = this.decrypter = new crypt_decrypter[\"default\"](this.observer, this.config);\n      }\n\n      var startTime = now();\n      decrypter.decrypt(data, decryptdata.key.buffer, decryptdata.iv.buffer, function (decryptedData) {\n        var endTime = now();\n\n        _this.observer.trigger(events[\"default\"].FRAG_DECRYPTED, {\n          stats: {\n            tstart: startTime,\n            tdecrypt: endTime\n          }\n        });\n\n        _this.pushDecrypted(new Uint8Array(decryptedData), decryptdata, new Uint8Array(initSegment), audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS);\n      });\n    } else {\n      this.pushDecrypted(new Uint8Array(data), decryptdata, new Uint8Array(initSegment), audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS);\n    }\n  };\n\n  _proto.pushDecrypted = function pushDecrypted(data, decryptdata, initSegment, audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS) {\n    var demuxer = this.demuxer;\n    var remuxer = this.remuxer;\n\n    if (!demuxer || // in case of continuity change, or track switch\n    // we might switch from content type (AAC container to TS container, or TS to fmp4 for example)\n    discontinuity || trackSwitch) {\n      var observer = this.observer;\n      var typeSupported = this.typeSupported;\n      var config = this.config; // probing order is TS/MP4/AAC/MP3\n\n      var muxConfig = [{\n        demux: tsdemuxer,\n        remux: mp4_remuxer\n      }, {\n        demux: mp4demuxer[\"default\"],\n        remux: passthrough_remuxer\n      }, {\n        demux: aacdemuxer,\n        remux: mp4_remuxer\n      }, {\n        demux: mp3demuxer,\n        remux: mp4_remuxer\n      }]; // probe for content type\n\n      var mux;\n\n      for (var i = 0, len = muxConfig.length; i < len; i++) {\n        mux = muxConfig[i];\n\n        if (mux.demux.probe(data)) {\n          break;\n        }\n      }\n\n      if (!mux) {\n        observer.trigger(events[\"default\"].ERROR, {\n          type: errors[\"ErrorTypes\"].MEDIA_ERROR,\n          details: errors[\"ErrorDetails\"].FRAG_PARSING_ERROR,\n          fatal: true,\n          reason: 'no demux matching with content found'\n        });\n        return;\n      } // so let's check that current remuxer and demuxer are still valid\n\n\n      if (!remuxer || !(remuxer instanceof mux.remux)) {\n        remuxer = new mux.remux(observer, config, typeSupported, this.vendor);\n      }\n\n      if (!demuxer || !(demuxer instanceof mux.demux)) {\n        demuxer = new mux.demux(observer, remuxer, config, typeSupported);\n        this.probe = mux.demux.probe;\n      }\n\n      this.demuxer = demuxer;\n      this.remuxer = remuxer;\n    }\n\n    if (discontinuity || trackSwitch) {\n      demuxer.resetInitSegment(initSegment, audioCodec, videoCodec, duration);\n      remuxer.resetInitSegment();\n    }\n\n    if (discontinuity) {\n      demuxer.resetTimeStamp(defaultInitPTS);\n      remuxer.resetTimeStamp(defaultInitPTS);\n    }\n\n    if (typeof demuxer.setDecryptData === 'function') {\n      demuxer.setDecryptData(decryptdata);\n    }\n\n    demuxer.append(data, timeOffset, contiguous, accurateTimeOffset);\n  };\n\n  return DemuxerInline;\n}();\n\n/* harmony default export */ var demuxer_inline = __webpack_exports__[\"default\"] = (demuxer_inline_DemuxerInline);\n\n/***/ }),\n\n/***/ \"./src/demux/demuxer-worker.js\":\n/*!*************************************!*\\\n  !*** ./src/demux/demuxer-worker.js ***!\n  \\*************************************/\n/*! exports provided: default */\n/*! ModuleConcatenation bailout: Module is referenced from these modules with unsupported syntax: ./src/demux/demuxer.js (referenced with require.resolve) */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_182581__) {\n\n\"use strict\";\n__nested_webpack_require_182581__.r(__webpack_exports__);\n/* harmony import */ var _demux_demuxer_inline__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_182581__(/*! ../demux/demuxer-inline */ \"./src/demux/demuxer-inline.js\");\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_182581__(/*! ../events */ \"./src/events.js\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_182581__(/*! ../utils/logger */ \"./src/utils/logger.js\");\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_182581__(/*! eventemitter3 */ \"./node_modules/eventemitter3/index.js\");\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__nested_webpack_require_182581__.n(eventemitter3__WEBPACK_IMPORTED_MODULE_3__);\n/* demuxer web worker.\n *  - listen to worker message, and trigger DemuxerInline upon reception of Fragments.\n *  - provides MP4 Boxes back to main thread using [transferable objects](https://developers.google.com/web/updates/2011/12/Transferable-Objects-Lightning-Fast) in order to minimize message passing overhead.\n */\n\n\n\n\n\nvar DemuxerWorker = function DemuxerWorker(self) {\n  // observer setup\n  var observer = new eventemitter3__WEBPACK_IMPORTED_MODULE_3__[\"EventEmitter\"]();\n\n  observer.trigger = function trigger(event) {\n    for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      data[_key - 1] = arguments[_key];\n    }\n\n    observer.emit.apply(observer, [event, event].concat(data));\n  };\n\n  observer.off = function off(event) {\n    for (var _len2 = arguments.length, data = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      data[_key2 - 1] = arguments[_key2];\n    }\n\n    observer.removeListener.apply(observer, [event].concat(data));\n  };\n\n  var forwardMessage = function forwardMessage(ev, data) {\n    self.postMessage({\n      event: ev,\n      data: data\n    });\n  };\n\n  self.addEventListener('message', function (ev) {\n    var data = ev.data; // console.log('demuxer cmd:' + data.cmd);\n\n    switch (data.cmd) {\n      case 'init':\n        var config = JSON.parse(data.config);\n        self.demuxer = new _demux_demuxer_inline__WEBPACK_IMPORTED_MODULE_0__[\"default\"](observer, data.typeSupported, config, data.vendor);\n        Object(_utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"enableLogs\"])(config.debug); // signal end of worker init\n\n        forwardMessage('init', null);\n        break;\n\n      case 'demux':\n        self.demuxer.push(data.data, data.decryptdata, data.initSegment, data.audioCodec, data.videoCodec, data.timeOffset, data.discontinuity, data.trackSwitch, data.contiguous, data.duration, data.accurateTimeOffset, data.defaultInitPTS);\n        break;\n\n      default:\n        break;\n    }\n  }); // forward events to main thread\n\n  observer.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"default\"].FRAG_DECRYPTED, forwardMessage);\n  observer.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"default\"].FRAG_PARSING_INIT_SEGMENT, forwardMessage);\n  observer.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"default\"].FRAG_PARSED, forwardMessage);\n  observer.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ERROR, forwardMessage);\n  observer.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"default\"].FRAG_PARSING_METADATA, forwardMessage);\n  observer.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"default\"].FRAG_PARSING_USERDATA, forwardMessage);\n  observer.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"default\"].INIT_PTS_FOUND, forwardMessage); // special case for FRAG_PARSING_DATA: pass data1/data2 as transferable object (no copy)\n\n  observer.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"default\"].FRAG_PARSING_DATA, function (ev, data) {\n    var transferable = [];\n    var message = {\n      event: ev,\n      data: data\n    };\n\n    if (data.data1) {\n      message.data1 = data.data1.buffer;\n      transferable.push(data.data1.buffer);\n      delete data.data1;\n    }\n\n    if (data.data2) {\n      message.data2 = data.data2.buffer;\n      transferable.push(data.data2.buffer);\n      delete data.data2;\n    }\n\n    self.postMessage(message, transferable);\n  });\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (DemuxerWorker);\n\n/***/ }),\n\n/***/ \"./src/demux/id3.js\":\n/*!**************************!*\\\n  !*** ./src/demux/id3.js ***!\n  \\**************************/\n/*! exports provided: default, utf8ArrayToStr */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_187044__) {\n\n\"use strict\";\n__nested_webpack_require_187044__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_187044__.d(__webpack_exports__, \"utf8ArrayToStr\", function() { return utf8ArrayToStr; });\n/* harmony import */ var _utils_get_self_scope__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_187044__(/*! ../utils/get-self-scope */ \"./src/utils/get-self-scope.js\");\n\n/**\n * ID3 parser\n */\n\nvar ID3 = /*#__PURE__*/function () {\n  function ID3() {}\n\n  /**\n   * Returns true if an ID3 header can be found at offset in data\n   * @param {Uint8Array} data - The data to search in\n   * @param {number} offset - The offset at which to start searching\n   * @return {boolean} - True if an ID3 header is found\n   */\n  ID3.isHeader = function isHeader(data, offset) {\n    /*\n    * http://id3.org/id3v2.3.0\n    * [0]     = 'I'\n    * [1]     = 'D'\n    * [2]     = '3'\n    * [3,4]   = {Version}\n    * [5]     = {Flags}\n    * [6-9]   = {ID3 Size}\n    *\n    * An ID3v2 tag can be detected with the following pattern:\n    *  $49 44 33 yy yy xx zz zz zz zz\n    * Where yy is less than $FF, xx is the 'flags' byte and zz is less than $80\n    */\n    if (offset + 10 <= data.length) {\n      // look for 'ID3' identifier\n      if (data[offset] === 0x49 && data[offset + 1] === 0x44 && data[offset + 2] === 0x33) {\n        // check version is within range\n        if (data[offset + 3] < 0xFF && data[offset + 4] < 0xFF) {\n          // check size is within range\n          if (data[offset + 6] < 0x80 && data[offset + 7] < 0x80 && data[offset + 8] < 0x80 && data[offset + 9] < 0x80) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Returns true if an ID3 footer can be found at offset in data\n   * @param {Uint8Array} data - The data to search in\n   * @param {number} offset - The offset at which to start searching\n   * @return {boolean} - True if an ID3 footer is found\n   */\n  ;\n\n  ID3.isFooter = function isFooter(data, offset) {\n    /*\n    * The footer is a copy of the header, but with a different identifier\n    */\n    if (offset + 10 <= data.length) {\n      // look for '3DI' identifier\n      if (data[offset] === 0x33 && data[offset + 1] === 0x44 && data[offset + 2] === 0x49) {\n        // check version is within range\n        if (data[offset + 3] < 0xFF && data[offset + 4] < 0xFF) {\n          // check size is within range\n          if (data[offset + 6] < 0x80 && data[offset + 7] < 0x80 && data[offset + 8] < 0x80 && data[offset + 9] < 0x80) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Returns any adjacent ID3 tags found in data starting at offset, as one block of data\n   * @param {Uint8Array} data - The data to search in\n   * @param {number} offset - The offset at which to start searching\n   * @return {Uint8Array} - The block of data containing any ID3 tags found\n   */\n  ;\n\n  ID3.getID3Data = function getID3Data(data, offset) {\n    var front = offset;\n    var length = 0;\n\n    while (ID3.isHeader(data, offset)) {\n      // ID3 header is 10 bytes\n      length += 10;\n\n      var size = ID3._readSize(data, offset + 6);\n\n      length += size;\n\n      if (ID3.isFooter(data, offset + 10)) {\n        // ID3 footer is 10 bytes\n        length += 10;\n      }\n\n      offset += length;\n    }\n\n    if (length > 0) {\n      return data.subarray(front, front + length);\n    }\n\n    return undefined;\n  };\n\n  ID3._readSize = function _readSize(data, offset) {\n    var size = 0;\n    size = (data[offset] & 0x7f) << 21;\n    size |= (data[offset + 1] & 0x7f) << 14;\n    size |= (data[offset + 2] & 0x7f) << 7;\n    size |= data[offset + 3] & 0x7f;\n    return size;\n  }\n  /**\n   * Searches for the Elementary Stream timestamp found in the ID3 data chunk\n   * @param {Uint8Array} data - Block of data containing one or more ID3 tags\n   * @return {number} - The timestamp\n   */\n  ;\n\n  ID3.getTimeStamp = function getTimeStamp(data) {\n    var frames = ID3.getID3Frames(data);\n\n    for (var i = 0; i < frames.length; i++) {\n      var frame = frames[i];\n\n      if (ID3.isTimeStampFrame(frame)) {\n        return ID3._readTimeStamp(frame);\n      }\n    }\n\n    return undefined;\n  }\n  /**\n   * Returns true if the ID3 frame is an Elementary Stream timestamp frame\n   * @param {ID3 frame} frame\n   */\n  ;\n\n  ID3.isTimeStampFrame = function isTimeStampFrame(frame) {\n    return frame && frame.key === 'PRIV' && frame.info === 'com.apple.streaming.transportStreamTimestamp';\n  };\n\n  ID3._getFrameData = function _getFrameData(data) {\n    /*\n    Frame ID       $xx xx xx xx (four characters)\n    Size           $xx xx xx xx\n    Flags          $xx xx\n    */\n    var type = String.fromCharCode(data[0], data[1], data[2], data[3]);\n\n    var size = ID3._readSize(data, 4); // skip frame id, size, and flags\n\n\n    var offset = 10;\n    return {\n      type: type,\n      size: size,\n      data: data.subarray(offset, offset + size)\n    };\n  }\n  /**\n   * Returns an array of ID3 frames found in all the ID3 tags in the id3Data\n   * @param {Uint8Array} id3Data - The ID3 data containing one or more ID3 tags\n   * @return {ID3 frame[]} - Array of ID3 frame objects\n   */\n  ;\n\n  ID3.getID3Frames = function getID3Frames(id3Data) {\n    var offset = 0;\n    var frames = [];\n\n    while (ID3.isHeader(id3Data, offset)) {\n      var size = ID3._readSize(id3Data, offset + 6); // skip past ID3 header\n\n\n      offset += 10;\n      var end = offset + size; // loop through frames in the ID3 tag\n\n      while (offset + 8 < end) {\n        var frameData = ID3._getFrameData(id3Data.subarray(offset));\n\n        var frame = ID3._decodeFrame(frameData);\n\n        if (frame) {\n          frames.push(frame);\n        } // skip frame header and frame data\n\n\n        offset += frameData.size + 10;\n      }\n\n      if (ID3.isFooter(id3Data, offset)) {\n        offset += 10;\n      }\n    }\n\n    return frames;\n  };\n\n  ID3._decodeFrame = function _decodeFrame(frame) {\n    if (frame.type === 'PRIV') {\n      return ID3._decodePrivFrame(frame);\n    } else if (frame.type[0] === 'W') {\n      return ID3._decodeURLFrame(frame);\n    }\n\n    return ID3._decodeTextFrame(frame);\n  };\n\n  ID3._readTimeStamp = function _readTimeStamp(timeStampFrame) {\n    if (timeStampFrame.data.byteLength === 8) {\n      var data = new Uint8Array(timeStampFrame.data); // timestamp is 33 bit expressed as a big-endian eight-octet number,\n      // with the upper 31 bits set to zero.\n\n      var pts33Bit = data[3] & 0x1;\n      var timestamp = (data[4] << 23) + (data[5] << 15) + (data[6] << 7) + data[7];\n      timestamp /= 45;\n\n      if (pts33Bit) {\n        timestamp += 47721858.84;\n      } // 2^32 / 90\n\n\n      return Math.round(timestamp);\n    }\n\n    return undefined;\n  };\n\n  ID3._decodePrivFrame = function _decodePrivFrame(frame) {\n    /*\n    Format: <text string>\\0<binary data>\n    */\n    if (frame.size < 2) {\n      return undefined;\n    }\n\n    var owner = ID3._utf8ArrayToStr(frame.data, true);\n\n    var privateData = new Uint8Array(frame.data.subarray(owner.length + 1));\n    return {\n      key: frame.type,\n      info: owner,\n      data: privateData.buffer\n    };\n  };\n\n  ID3._decodeTextFrame = function _decodeTextFrame(frame) {\n    if (frame.size < 2) {\n      return undefined;\n    }\n\n    if (frame.type === 'TXXX') {\n      /*\n      Format:\n      [0]   = {Text Encoding}\n      [1-?] = {Description}\\0{Value}\n      */\n      var index = 1;\n\n      var description = ID3._utf8ArrayToStr(frame.data.subarray(index), true);\n\n      index += description.length + 1;\n\n      var value = ID3._utf8ArrayToStr(frame.data.subarray(index));\n\n      return {\n        key: frame.type,\n        info: description,\n        data: value\n      };\n    } else {\n      /*\n      Format:\n      [0]   = {Text Encoding}\n      [1-?] = {Value}\n      */\n      var text = ID3._utf8ArrayToStr(frame.data.subarray(1));\n\n      return {\n        key: frame.type,\n        data: text\n      };\n    }\n  };\n\n  ID3._decodeURLFrame = function _decodeURLFrame(frame) {\n    if (frame.type === 'WXXX') {\n      /*\n      Format:\n      [0]   = {Text Encoding}\n      [1-?] = {Description}\\0{URL}\n      */\n      if (frame.size < 2) {\n        return undefined;\n      }\n\n      var index = 1;\n\n      var description = ID3._utf8ArrayToStr(frame.data.subarray(index), true);\n\n      index += description.length + 1;\n\n      var value = ID3._utf8ArrayToStr(frame.data.subarray(index));\n\n      return {\n        key: frame.type,\n        info: description,\n        data: value\n      };\n    } else {\n      /*\n      Format:\n      [0-?] = {URL}\n      */\n      var url = ID3._utf8ArrayToStr(frame.data);\n\n      return {\n        key: frame.type,\n        data: url\n      };\n    }\n  } // http://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript/22373197\n  // http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt\n\n  /* utf.js - UTF-8 <=> UTF-16 convertion\n   *\n   * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>\n   * Version: 1.0\n   * LastModified: Dec 25 1999\n   * This library is free.  You can redistribute it and/or modify it.\n   */\n  ;\n\n  ID3._utf8ArrayToStr = function _utf8ArrayToStr(array, exitOnNull) {\n    if (exitOnNull === void 0) {\n      exitOnNull = false;\n    }\n\n    var decoder = getTextDecoder();\n\n    if (decoder) {\n      var decoded = decoder.decode(array);\n\n      if (exitOnNull) {\n        // grab up to the first null\n        var idx = decoded.indexOf('\\0');\n        return idx !== -1 ? decoded.substring(0, idx) : decoded;\n      } // remove any null characters\n\n\n      return decoded.replace(/\\0/g, '');\n    }\n\n    var len = array.length;\n    var c;\n    var char2;\n    var char3;\n    var out = '';\n    var i = 0;\n\n    while (i < len) {\n      c = array[i++];\n\n      if (c === 0x00 && exitOnNull) {\n        return out;\n      } else if (c === 0x00 || c === 0x03) {\n        // If the character is 3 (END_OF_TEXT) or 0 (NULL) then skip it\n        continue;\n      }\n\n      switch (c >> 4) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n          // 0xxxxxxx\n          out += String.fromCharCode(c);\n          break;\n\n        case 12:\n        case 13:\n          // 110x xxxx   10xx xxxx\n          char2 = array[i++];\n          out += String.fromCharCode((c & 0x1F) << 6 | char2 & 0x3F);\n          break;\n\n        case 14:\n          // 1110 xxxx  10xx xxxx  10xx xxxx\n          char2 = array[i++];\n          char3 = array[i++];\n          out += String.fromCharCode((c & 0x0F) << 12 | (char2 & 0x3F) << 6 | (char3 & 0x3F) << 0);\n          break;\n\n        default:\n      }\n    }\n\n    return out;\n  };\n\n  return ID3;\n}();\n\nvar decoder;\n\nfunction getTextDecoder() {\n  var global = Object(_utils_get_self_scope__WEBPACK_IMPORTED_MODULE_0__[\"getSelfScope\"])(); // safeguard for code that might run both on worker and main thread\n\n  if (!decoder && typeof global.TextDecoder !== 'undefined') {\n    decoder = new global.TextDecoder('utf-8');\n  }\n\n  return decoder;\n}\n\nvar utf8ArrayToStr = ID3._utf8ArrayToStr;\n/* harmony default export */ __webpack_exports__[\"default\"] = (ID3);\n\n\n/***/ }),\n\n/***/ \"./src/demux/mp4demuxer.js\":\n/*!*********************************!*\\\n  !*** ./src/demux/mp4demuxer.js ***!\n  \\*********************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_198341__) {\n\n\"use strict\";\n__nested_webpack_require_198341__.r(__webpack_exports__);\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_198341__(/*! ../utils/logger */ \"./src/utils/logger.js\");\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_198341__(/*! ../events */ \"./src/events.js\");\n/**\n * MP4 demuxer\n */\n\n\nvar UINT32_MAX = Math.pow(2, 32) - 1;\n\nvar MP4Demuxer = /*#__PURE__*/function () {\n  function MP4Demuxer(observer, remuxer) {\n    this.observer = observer;\n    this.remuxer = remuxer;\n  }\n\n  var _proto = MP4Demuxer.prototype;\n\n  _proto.resetTimeStamp = function resetTimeStamp(initPTS) {\n    this.initPTS = initPTS;\n  };\n\n  _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, duration) {\n    // jshint unused:false\n    if (initSegment && initSegment.byteLength) {\n      var initData = this.initData = MP4Demuxer.parseInitSegment(initSegment); // default audio codec if nothing specified\n      // TODO : extract that from initsegment\n\n      if (audioCodec == null) {\n        audioCodec = 'mp4a.40.5';\n      }\n\n      if (videoCodec == null) {\n        videoCodec = 'avc1.42e01e';\n      }\n\n      var tracks = {};\n\n      if (initData.audio && initData.video) {\n        tracks.audiovideo = {\n          container: 'video/mp4',\n          codec: audioCodec + ',' + videoCodec,\n          initSegment: duration ? initSegment : null\n        };\n      } else {\n        if (initData.audio) {\n          tracks.audio = {\n            container: 'audio/mp4',\n            codec: audioCodec,\n            initSegment: duration ? initSegment : null\n          };\n        }\n\n        if (initData.video) {\n          tracks.video = {\n            container: 'video/mp4',\n            codec: videoCodec,\n            initSegment: duration ? initSegment : null\n          };\n        }\n      }\n\n      this.observer.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"default\"].FRAG_PARSING_INIT_SEGMENT, {\n        tracks: tracks\n      });\n    } else {\n      if (audioCodec) {\n        this.audioCodec = audioCodec;\n      }\n\n      if (videoCodec) {\n        this.videoCodec = videoCodec;\n      }\n    }\n  };\n\n  MP4Demuxer.probe = function probe(data) {\n    // ensure we find a moof box in the first 16 kB\n    return MP4Demuxer.findBox({\n      data: data,\n      start: 0,\n      end: Math.min(data.length, 16384)\n    }, ['moof']).length > 0;\n  };\n\n  MP4Demuxer.bin2str = function bin2str(buffer) {\n    return String.fromCharCode.apply(null, buffer);\n  };\n\n  MP4Demuxer.readUint16 = function readUint16(buffer, offset) {\n    if (buffer.data) {\n      offset += buffer.start;\n      buffer = buffer.data;\n    }\n\n    var val = buffer[offset] << 8 | buffer[offset + 1];\n    return val < 0 ? 65536 + val : val;\n  };\n\n  MP4Demuxer.readUint32 = function readUint32(buffer, offset) {\n    if (buffer.data) {\n      offset += buffer.start;\n      buffer = buffer.data;\n    }\n\n    var val = buffer[offset] << 24 | buffer[offset + 1] << 16 | buffer[offset + 2] << 8 | buffer[offset + 3];\n    return val < 0 ? 4294967296 + val : val;\n  };\n\n  MP4Demuxer.writeUint32 = function writeUint32(buffer, offset, value) {\n    if (buffer.data) {\n      offset += buffer.start;\n      buffer = buffer.data;\n    }\n\n    buffer[offset] = value >> 24;\n    buffer[offset + 1] = value >> 16 & 0xff;\n    buffer[offset + 2] = value >> 8 & 0xff;\n    buffer[offset + 3] = value & 0xff;\n  } // Find the data for a box specified by its path\n  ;\n\n  MP4Demuxer.findBox = function findBox(data, path) {\n    var results = [],\n        i,\n        size,\n        type,\n        end,\n        subresults,\n        start,\n        endbox;\n\n    if (data.data) {\n      start = data.start;\n      end = data.end;\n      data = data.data;\n    } else {\n      start = 0;\n      end = data.byteLength;\n    }\n\n    if (!path.length) {\n      // short-circuit the search for empty paths\n      return null;\n    }\n\n    for (i = start; i < end;) {\n      size = MP4Demuxer.readUint32(data, i);\n      type = MP4Demuxer.bin2str(data.subarray(i + 4, i + 8));\n      endbox = size > 1 ? i + size : end;\n\n      if (type === path[0]) {\n        if (path.length === 1) {\n          // this is the end of the path and we've found the box we were\n          // looking for\n          results.push({\n            data: data,\n            start: i + 8,\n            end: endbox\n          });\n        } else {\n          // recursively search for the next box along the path\n          subresults = MP4Demuxer.findBox({\n            data: data,\n            start: i + 8,\n            end: endbox\n          }, path.slice(1));\n\n          if (subresults.length) {\n            results = results.concat(subresults);\n          }\n        }\n      }\n\n      i = endbox;\n    } // we've finished searching all of data\n\n\n    return results;\n  };\n\n  MP4Demuxer.parseSegmentIndex = function parseSegmentIndex(initSegment) {\n    var moov = MP4Demuxer.findBox(initSegment, ['moov'])[0];\n    var moovEndOffset = moov ? moov.end : null; // we need this in case we need to chop of garbage of the end of current data\n\n    var index = 0;\n    var sidx = MP4Demuxer.findBox(initSegment, ['sidx']);\n    var references;\n\n    if (!sidx || !sidx[0]) {\n      return null;\n    }\n\n    references = [];\n    sidx = sidx[0];\n    var version = sidx.data[0]; // set initial offset, we skip the reference ID (not needed)\n\n    index = version === 0 ? 8 : 16;\n    var timescale = MP4Demuxer.readUint32(sidx, index);\n    index += 4; // TODO: parse earliestPresentationTime and firstOffset\n    // usually zero in our case\n\n    var earliestPresentationTime = 0;\n    var firstOffset = 0;\n\n    if (version === 0) {\n      index += 8;\n    } else {\n      index += 16;\n    } // skip reserved\n\n\n    index += 2;\n    var startByte = sidx.end + firstOffset;\n    var referencesCount = MP4Demuxer.readUint16(sidx, index);\n    index += 2;\n\n    for (var i = 0; i < referencesCount; i++) {\n      var referenceIndex = index;\n      var referenceInfo = MP4Demuxer.readUint32(sidx, referenceIndex);\n      referenceIndex += 4;\n      var referenceSize = referenceInfo & 0x7FFFFFFF;\n      var referenceType = (referenceInfo & 0x80000000) >>> 31;\n\n      if (referenceType === 1) {\n        console.warn('SIDX has hierarchical references (not supported)');\n        return;\n      }\n\n      var subsegmentDuration = MP4Demuxer.readUint32(sidx, referenceIndex);\n      referenceIndex += 4;\n      references.push({\n        referenceSize: referenceSize,\n        subsegmentDuration: subsegmentDuration,\n        // unscaled\n        info: {\n          duration: subsegmentDuration / timescale,\n          start: startByte,\n          end: startByte + referenceSize - 1\n        }\n      });\n      startByte += referenceSize; // Skipping 1 bit for |startsWithSap|, 3 bits for |sapType|, and 28 bits\n      // for |sapDelta|.\n\n      referenceIndex += 4; // skip to next ref\n\n      index = referenceIndex;\n    }\n\n    return {\n      earliestPresentationTime: earliestPresentationTime,\n      timescale: timescale,\n      version: version,\n      referencesCount: referencesCount,\n      references: references,\n      moovEndOffset: moovEndOffset\n    };\n  }\n  /**\n   * Parses an MP4 initialization segment and extracts stream type and\n   * timescale values for any declared tracks. Timescale values indicate the\n   * number of clock ticks per second to assume for time-based values\n   * elsewhere in the MP4.\n   *\n   * To determine the start time of an MP4, you need two pieces of\n   * information: the timescale unit and the earliest base media decode\n   * time. Multiple timescales can be specified within an MP4 but the\n   * base media decode time is always expressed in the timescale from\n   * the media header box for the track:\n   * ```\n   * moov > trak > mdia > mdhd.timescale\n   * moov > trak > mdia > hdlr\n   * ```\n   * @param init {Uint8Array} the bytes of the init segment\n   * @return {object} a hash of track type to timescale values or null if\n   * the init segment is malformed.\n   */\n  ;\n\n  MP4Demuxer.parseInitSegment = function parseInitSegment(initSegment) {\n    var result = [];\n    var traks = MP4Demuxer.findBox(initSegment, ['moov', 'trak']);\n    traks.forEach(function (trak) {\n      var tkhd = MP4Demuxer.findBox(trak, ['tkhd'])[0];\n\n      if (tkhd) {\n        var version = tkhd.data[tkhd.start];\n        var index = version === 0 ? 12 : 20;\n        var trackId = MP4Demuxer.readUint32(tkhd, index);\n        var mdhd = MP4Demuxer.findBox(trak, ['mdia', 'mdhd'])[0];\n\n        if (mdhd) {\n          version = mdhd.data[mdhd.start];\n          index = version === 0 ? 12 : 20;\n          var timescale = MP4Demuxer.readUint32(mdhd, index);\n          var hdlr = MP4Demuxer.findBox(trak, ['mdia', 'hdlr'])[0];\n\n          if (hdlr) {\n            var hdlrType = MP4Demuxer.bin2str(hdlr.data.subarray(hdlr.start + 8, hdlr.start + 12));\n            var type = {\n              'soun': 'audio',\n              'vide': 'video'\n            }[hdlrType];\n\n            if (type) {\n              // extract codec info. TODO : parse codec details to be able to build MIME type\n              var codecBox = MP4Demuxer.findBox(trak, ['mdia', 'minf', 'stbl', 'stsd']);\n\n              if (codecBox.length) {\n                codecBox = codecBox[0];\n                var codecType = MP4Demuxer.bin2str(codecBox.data.subarray(codecBox.start + 12, codecBox.start + 16));\n                _utils_logger__WEBPACK_IMPORTED_MODULE_0__[\"logger\"].log(\"MP4Demuxer:\" + type + \":\" + codecType + \" found\");\n              }\n\n              result[trackId] = {\n                timescale: timescale,\n                type: type\n              };\n              result[type] = {\n                timescale: timescale,\n                id: trackId\n              };\n            }\n          }\n        }\n      }\n    });\n    return result;\n  }\n  /**\n  * Determine the base media decode start time, in seconds, for an MP4\n  * fragment. If multiple fragments are specified, the earliest time is\n  * returned.\n  *\n  * The base media decode time can be parsed from track fragment\n  * metadata:\n  * ```\n  * moof > traf > tfdt.baseMediaDecodeTime\n  * ```\n  * It requires the timescale value from the mdhd to interpret.\n  *\n  * @param timescale {object} a hash of track ids to timescale values.\n  * @return {number} the earliest base media decode start time for the\n  * fragment, in seconds\n  */\n  ;\n\n  MP4Demuxer.getStartDTS = function getStartDTS(initData, fragment) {\n    var trafs, baseTimes, result; // we need info from two childrend of each track fragment box\n\n    trafs = MP4Demuxer.findBox(fragment, ['moof', 'traf']); // determine the start times for each track\n\n    baseTimes = [].concat.apply([], trafs.map(function (traf) {\n      return MP4Demuxer.findBox(traf, ['tfhd']).map(function (tfhd) {\n        var id, scale, baseTime; // get the track id from the tfhd\n\n        id = MP4Demuxer.readUint32(tfhd, 4); // assume a 90kHz clock if no timescale was specified\n\n        scale = initData[id].timescale || 90e3; // get the base media decode time from the tfdt\n\n        baseTime = MP4Demuxer.findBox(traf, ['tfdt']).map(function (tfdt) {\n          var version, result;\n          version = tfdt.data[tfdt.start];\n          result = MP4Demuxer.readUint32(tfdt, 4);\n\n          if (version === 1) {\n            result *= Math.pow(2, 32);\n            result += MP4Demuxer.readUint32(tfdt, 8);\n          }\n\n          return result;\n        })[0]; // convert base time to seconds\n\n        return baseTime / scale;\n      });\n    })); // return the minimum\n\n    result = Math.min.apply(null, baseTimes);\n    return isFinite(result) ? result : 0;\n  };\n\n  MP4Demuxer.offsetStartDTS = function offsetStartDTS(initData, fragment, timeOffset) {\n    MP4Demuxer.findBox(fragment, ['moof', 'traf']).map(function (traf) {\n      return MP4Demuxer.findBox(traf, ['tfhd']).map(function (tfhd) {\n        // get the track id from the tfhd\n        var id = MP4Demuxer.readUint32(tfhd, 4); // assume a 90kHz clock if no timescale was specified\n\n        var timescale = initData[id].timescale || 90e3; // get the base media decode time from the tfdt\n\n        MP4Demuxer.findBox(traf, ['tfdt']).map(function (tfdt) {\n          var version = tfdt.data[tfdt.start];\n          var baseMediaDecodeTime = MP4Demuxer.readUint32(tfdt, 4);\n\n          if (version === 0) {\n            MP4Demuxer.writeUint32(tfdt, 4, baseMediaDecodeTime - timeOffset * timescale);\n          } else {\n            baseMediaDecodeTime *= Math.pow(2, 32);\n            baseMediaDecodeTime += MP4Demuxer.readUint32(tfdt, 8);\n            baseMediaDecodeTime -= timeOffset * timescale;\n            baseMediaDecodeTime = Math.max(baseMediaDecodeTime, 0);\n            var upper = Math.floor(baseMediaDecodeTime / (UINT32_MAX + 1));\n            var lower = Math.floor(baseMediaDecodeTime % (UINT32_MAX + 1));\n            MP4Demuxer.writeUint32(tfdt, 4, upper);\n            MP4Demuxer.writeUint32(tfdt, 8, lower);\n          }\n        });\n      });\n    });\n  } // feed incoming data to the front of the parsing pipeline\n  ;\n\n  _proto.append = function append(data, timeOffset, contiguous, accurateTimeOffset) {\n    var initData = this.initData;\n\n    if (!initData) {\n      this.resetInitSegment(data, this.audioCodec, this.videoCodec, false);\n      initData = this.initData;\n    }\n\n    var startDTS,\n        initPTS = this.initPTS;\n\n    if (initPTS === undefined) {\n      var _startDTS = MP4Demuxer.getStartDTS(initData, data);\n\n      this.initPTS = initPTS = _startDTS - timeOffset;\n      this.observer.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"default\"].INIT_PTS_FOUND, {\n        initPTS: initPTS\n      });\n    }\n\n    MP4Demuxer.offsetStartDTS(initData, data, initPTS);\n    startDTS = MP4Demuxer.getStartDTS(initData, data);\n    this.remuxer.remux(initData.audio, initData.video, null, null, startDTS, contiguous, accurateTimeOffset, data);\n  };\n\n  _proto.destroy = function destroy() {};\n\n  return MP4Demuxer;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (MP4Demuxer);\n\n/***/ }),\n\n/***/ \"./src/errors.ts\":\n/*!***********************!*\\\n  !*** ./src/errors.ts ***!\n  \\***********************/\n/*! exports provided: ErrorTypes, ErrorDetails */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_212532__) {\n\n\"use strict\";\n__nested_webpack_require_212532__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_212532__.d(__webpack_exports__, \"ErrorTypes\", function() { return ErrorTypes; });\n/* harmony export (binding) */ __nested_webpack_require_212532__.d(__webpack_exports__, \"ErrorDetails\", function() { return ErrorDetails; });\nvar ErrorTypes;\n/**\n * @enum {ErrorDetails}\n * @typedef {string} ErrorDetail\n */\n\n(function (ErrorTypes) {\n  ErrorTypes[\"NETWORK_ERROR\"] = \"networkError\";\n  ErrorTypes[\"MEDIA_ERROR\"] = \"mediaError\";\n  ErrorTypes[\"KEY_SYSTEM_ERROR\"] = \"keySystemError\";\n  ErrorTypes[\"MUX_ERROR\"] = \"muxError\";\n  ErrorTypes[\"OTHER_ERROR\"] = \"otherError\";\n})(ErrorTypes || (ErrorTypes = {}));\n\nvar ErrorDetails;\n\n(function (ErrorDetails) {\n  ErrorDetails[\"KEY_SYSTEM_NO_KEYS\"] = \"keySystemNoKeys\";\n  ErrorDetails[\"KEY_SYSTEM_NO_ACCESS\"] = \"keySystemNoAccess\";\n  ErrorDetails[\"KEY_SYSTEM_NO_SESSION\"] = \"keySystemNoSession\";\n  ErrorDetails[\"KEY_SYSTEM_LICENSE_REQUEST_FAILED\"] = \"keySystemLicenseRequestFailed\";\n  ErrorDetails[\"KEY_SYSTEM_NO_INIT_DATA\"] = \"keySystemNoInitData\";\n  ErrorDetails[\"MANIFEST_LOAD_ERROR\"] = \"manifestLoadError\";\n  ErrorDetails[\"MANIFEST_LOAD_TIMEOUT\"] = \"manifestLoadTimeOut\";\n  ErrorDetails[\"MANIFEST_PARSING_ERROR\"] = \"manifestParsingError\";\n  ErrorDetails[\"MANIFEST_INCOMPATIBLE_CODECS_ERROR\"] = \"manifestIncompatibleCodecsError\";\n  ErrorDetails[\"LEVEL_EMPTY_ERROR\"] = \"levelEmptyError\";\n  ErrorDetails[\"LEVEL_LOAD_ERROR\"] = \"levelLoadError\";\n  ErrorDetails[\"LEVEL_LOAD_TIMEOUT\"] = \"levelLoadTimeOut\";\n  ErrorDetails[\"LEVEL_SWITCH_ERROR\"] = \"levelSwitchError\";\n  ErrorDetails[\"AUDIO_TRACK_LOAD_ERROR\"] = \"audioTrackLoadError\";\n  ErrorDetails[\"AUDIO_TRACK_LOAD_TIMEOUT\"] = \"audioTrackLoadTimeOut\";\n  ErrorDetails[\"FRAG_LOAD_ERROR\"] = \"fragLoadError\";\n  ErrorDetails[\"FRAG_LOAD_TIMEOUT\"] = \"fragLoadTimeOut\";\n  ErrorDetails[\"FRAG_DECRYPT_ERROR\"] = \"fragDecryptError\";\n  ErrorDetails[\"FRAG_PARSING_ERROR\"] = \"fragParsingError\";\n  ErrorDetails[\"REMUX_ALLOC_ERROR\"] = \"remuxAllocError\";\n  ErrorDetails[\"KEY_LOAD_ERROR\"] = \"keyLoadError\";\n  ErrorDetails[\"KEY_LOAD_TIMEOUT\"] = \"keyLoadTimeOut\";\n  ErrorDetails[\"BUFFER_ADD_CODEC_ERROR\"] = \"bufferAddCodecError\";\n  ErrorDetails[\"BUFFER_APPEND_ERROR\"] = \"bufferAppendError\";\n  ErrorDetails[\"BUFFER_APPENDING_ERROR\"] = \"bufferAppendingError\";\n  ErrorDetails[\"BUFFER_STALLED_ERROR\"] = \"bufferStalledError\";\n  ErrorDetails[\"BUFFER_FULL_ERROR\"] = \"bufferFullError\";\n  ErrorDetails[\"BUFFER_SEEK_OVER_HOLE\"] = \"bufferSeekOverHole\";\n  ErrorDetails[\"BUFFER_NUDGE_ON_STALL\"] = \"bufferNudgeOnStall\";\n  ErrorDetails[\"INTERNAL_EXCEPTION\"] = \"internalException\";\n})(ErrorDetails || (ErrorDetails = {}));\n\n/***/ }),\n\n/***/ \"./src/events.js\":\n/*!***********************!*\\\n  !*** ./src/events.js ***!\n  \\***********************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_215408__) {\n\n\"use strict\";\n__nested_webpack_require_215408__.r(__webpack_exports__);\n/**\n * @readonly\n * @enum {string}\n */\nvar HlsEvents = {\n  // fired before MediaSource is attaching to media element - data: { media }\n  MEDIA_ATTACHING: 'hlsMediaAttaching',\n  // fired when MediaSource has been succesfully attached to media element - data: { }\n  MEDIA_ATTACHED: 'hlsMediaAttached',\n  // fired before detaching MediaSource from media element - data: { }\n  MEDIA_DETACHING: 'hlsMediaDetaching',\n  // fired when MediaSource has been detached from media element - data: { }\n  MEDIA_DETACHED: 'hlsMediaDetached',\n  // fired when we buffer is going to be reset - data: { }\n  BUFFER_RESET: 'hlsBufferReset',\n  // fired when we know about the codecs that we need buffers for to push into - data: {tracks : { container, codec, levelCodec, initSegment, metadata }}\n  BUFFER_CODECS: 'hlsBufferCodecs',\n  // fired when sourcebuffers have been created - data: { tracks : tracks }\n  BUFFER_CREATED: 'hlsBufferCreated',\n  // fired when we append a segment to the buffer - data: { segment: segment object }\n  BUFFER_APPENDING: 'hlsBufferAppending',\n  // fired when we are done with appending a media segment to the buffer - data : { parent : segment parent that triggered BUFFER_APPENDING, pending : nb of segments waiting for appending for this segment parent}\n  BUFFER_APPENDED: 'hlsBufferAppended',\n  // fired when the stream is finished and we want to notify the media buffer that there will be no more data - data: { }\n  BUFFER_EOS: 'hlsBufferEos',\n  // fired when the media buffer should be flushed - data { startOffset, endOffset }\n  BUFFER_FLUSHING: 'hlsBufferFlushing',\n  // fired when the media buffer has been flushed - data: { }\n  BUFFER_FLUSHED: 'hlsBufferFlushed',\n  // fired to signal that a manifest loading starts - data: { url : manifestURL}\n  MANIFEST_LOADING: 'hlsManifestLoading',\n  // fired after manifest has been loaded - data: { levels : [available quality levels], audioTracks : [ available audio tracks], url : manifestURL, stats : { trequest, tfirst, tload, mtime}}\n  MANIFEST_LOADED: 'hlsManifestLoaded',\n  // fired after manifest has been parsed - data: { levels : [available quality levels], firstLevel : index of first quality level appearing in Manifest}\n  MANIFEST_PARSED: 'hlsManifestParsed',\n  // fired when a level switch is requested - data: { level : id of new level }\n  LEVEL_SWITCHING: 'hlsLevelSwitching',\n  // fired when a level switch is effective - data: { level : id of new level }\n  LEVEL_SWITCHED: 'hlsLevelSwitched',\n  // fired when a level playlist loading starts - data: { url : level URL, level : id of level being loaded}\n  LEVEL_LOADING: 'hlsLevelLoading',\n  // fired when a level playlist loading finishes - data: { details : levelDetails object, level : id of loaded level, stats : { trequest, tfirst, tload, mtime} }\n  LEVEL_LOADED: 'hlsLevelLoaded',\n  // fired when a level's details have been updated based on previous details, after it has been loaded - data: { details : levelDetails object, level : id of updated level }\n  LEVEL_UPDATED: 'hlsLevelUpdated',\n  // fired when a level's PTS information has been updated after parsing a fragment - data: { details : levelDetails object, level : id of updated level, drift: PTS drift observed when parsing last fragment }\n  LEVEL_PTS_UPDATED: 'hlsLevelPtsUpdated',\n  // fired to notify that levels have changed after removing a level - data: { levels : [available quality levels] }\n  LEVELS_UPDATED: 'hlsLevelsUpdated',\n  // fired to notify that audio track lists has been updated - data: { audioTracks : audioTracks }\n  AUDIO_TRACKS_UPDATED: 'hlsAudioTracksUpdated',\n  // fired when an audio track switching is requested - data: { id : audio track id }\n  AUDIO_TRACK_SWITCHING: 'hlsAudioTrackSwitching',\n  // fired when an audio track switch actually occurs - data: { id : audio track id }\n  AUDIO_TRACK_SWITCHED: 'hlsAudioTrackSwitched',\n  // fired when an audio track loading starts - data: { url : audio track URL, id : audio track id }\n  AUDIO_TRACK_LOADING: 'hlsAudioTrackLoading',\n  // fired when an audio track loading finishes - data: { details : levelDetails object, id : audio track id, stats : { trequest, tfirst, tload, mtime } }\n  AUDIO_TRACK_LOADED: 'hlsAudioTrackLoaded',\n  // fired to notify that subtitle track lists has been updated - data: { subtitleTracks : subtitleTracks }\n  SUBTITLE_TRACKS_UPDATED: 'hlsSubtitleTracksUpdated',\n  // fired when an subtitle track switch occurs - data: { id : subtitle track id }\n  SUBTITLE_TRACK_SWITCH: 'hlsSubtitleTrackSwitch',\n  // fired when a subtitle track loading starts - data: { url : subtitle track URL, id : subtitle track id }\n  SUBTITLE_TRACK_LOADING: 'hlsSubtitleTrackLoading',\n  // fired when a subtitle track loading finishes - data: { details : levelDetails object, id : subtitle track id, stats : { trequest, tfirst, tload, mtime } }\n  SUBTITLE_TRACK_LOADED: 'hlsSubtitleTrackLoaded',\n  // fired when a subtitle fragment has been processed - data: { success : boolean, frag : the processed frag }\n  SUBTITLE_FRAG_PROCESSED: 'hlsSubtitleFragProcessed',\n  // fired when a set of VTTCues to be managed externally has been parsed - data: { type: string, track: string, cues: [ VTTCue ] }\n  CUES_PARSED: 'hlsCuesParsed',\n  // fired when a text track to be managed externally is found - data: { tracks: [ { label: string, kind: string, default: boolean } ] }\n  NON_NATIVE_TEXT_TRACKS_FOUND: 'hlsNonNativeTextTracksFound',\n  // fired when the first timestamp is found - data: { id : demuxer id, initPTS: initPTS, frag : fragment object }\n  INIT_PTS_FOUND: 'hlsInitPtsFound',\n  // fired when a fragment loading starts - data: { frag : fragment object }\n  FRAG_LOADING: 'hlsFragLoading',\n  // fired when a fragment loading is progressing - data: { frag : fragment object, { trequest, tfirst, loaded } }\n  FRAG_LOAD_PROGRESS: 'hlsFragLoadProgress',\n  // Identifier for fragment load aborting for emergency switch down - data: { frag : fragment object }\n  FRAG_LOAD_EMERGENCY_ABORTED: 'hlsFragLoadEmergencyAborted',\n  // fired when a fragment loading is completed - data: { frag : fragment object, payload : fragment payload, stats : { trequest, tfirst, tload, length } }\n  FRAG_LOADED: 'hlsFragLoaded',\n  // fired when a fragment has finished decrypting - data: { id : demuxer id, frag: fragment object, payload : fragment payload, stats : { tstart, tdecrypt } }\n  FRAG_DECRYPTED: 'hlsFragDecrypted',\n  // fired when Init Segment has been extracted from fragment - data: { id : demuxer id, frag: fragment object, moov : moov MP4 box, codecs : codecs found while parsing fragment }\n  FRAG_PARSING_INIT_SEGMENT: 'hlsFragParsingInitSegment',\n  // fired when parsing sei text is completed - data: { id : demuxer id, frag: fragment object, samples : [ sei samples pes ] }\n  FRAG_PARSING_USERDATA: 'hlsFragParsingUserdata',\n  // fired when parsing id3 is completed - data: { id : demuxer id, frag: fragment object, samples : [ id3 samples pes ] }\n  FRAG_PARSING_METADATA: 'hlsFragParsingMetadata',\n  // fired when data have been extracted from fragment - data: { id : demuxer id, frag: fragment object, data1 : moof MP4 box or TS fragments, data2 : mdat MP4 box or null}\n  FRAG_PARSING_DATA: 'hlsFragParsingData',\n  // fired when fragment parsing is completed - data: { id : demuxer id, frag: fragment object }\n  FRAG_PARSED: 'hlsFragParsed',\n  // fired when fragment remuxed MP4 boxes have all been appended into SourceBuffer - data: { id : demuxer id, frag : fragment object, stats : { trequest, tfirst, tload, tparsed, tbuffered, length, bwEstimate } }\n  FRAG_BUFFERED: 'hlsFragBuffered',\n  // fired when fragment matching with current media position is changing - data : { id : demuxer id, frag : fragment object }\n  FRAG_CHANGED: 'hlsFragChanged',\n  // Identifier for a FPS drop event - data: { curentDropped, currentDecoded, totalDroppedFrames }\n  FPS_DROP: 'hlsFpsDrop',\n  // triggered when FPS drop triggers auto level capping - data: { level, droppedlevel }\n  FPS_DROP_LEVEL_CAPPING: 'hlsFpsDropLevelCapping',\n  // Identifier for an error event - data: { type : error type, details : error details, fatal : if true, hls.js cannot/will not try to recover, if false, hls.js will try to recover,other error specific data }\n  ERROR: 'hlsError',\n  // fired when hls.js instance starts destroying. Different from MEDIA_DETACHED as one could want to detach and reattach a media to the instance of hls.js to handle mid-rolls for example - data: { }\n  DESTROYING: 'hlsDestroying',\n  // fired when a decrypt key loading starts - data: { frag : fragment object }\n  KEY_LOADING: 'hlsKeyLoading',\n  // fired when a decrypt key loading is completed - data: { frag : fragment object, payload : key payload, stats : { trequest, tfirst, tload, length } }\n  KEY_LOADED: 'hlsKeyLoaded',\n  // fired upon stream controller state transitions - data: { previousState, nextState }\n  STREAM_STATE_TRANSITION: 'hlsStreamStateTransition',\n  // fired when the live back buffer is reached defined by the liveBackBufferLength config option - data : { bufferEnd: number }\n  LIVE_BACK_BUFFER_REACHED: 'hlsLiveBackBufferReached'\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (HlsEvents);\n\n/***/ }),\n\n/***/ \"./src/hls.ts\":\n/*!*********************************!*\\\n  !*** ./src/hls.ts + 50 modules ***!\n  \\*********************************/\n/*! exports provided: default */\n/*! ModuleConcatenation bailout: Cannot concat with ./src/crypt/decrypter.js because of ./src/demux/demuxer-worker.js */\n/*! ModuleConcatenation bailout: Cannot concat with ./src/demux/demuxer-inline.js because of ./src/demux/demuxer-worker.js */\n/*! ModuleConcatenation bailout: Cannot concat with ./src/demux/id3.js because of ./src/demux/demuxer-worker.js */\n/*! ModuleConcatenation bailout: Cannot concat with ./src/demux/mp4demuxer.js because of ./src/demux/demuxer-worker.js */\n/*! ModuleConcatenation bailout: Cannot concat with ./src/errors.ts because of ./src/demux/demuxer-worker.js */\n/*! ModuleConcatenation bailout: Cannot concat with ./src/events.js because of ./src/demux/demuxer-worker.js */\n/*! ModuleConcatenation bailout: Cannot concat with ./src/polyfills/number.js because of ./src/demux/demuxer-worker.js */\n/*! ModuleConcatenation bailout: Cannot concat with ./src/utils/get-self-scope.js because of ./src/demux/demuxer-worker.js */\n/*! ModuleConcatenation bailout: Cannot concat with ./src/utils/logger.js because of ./src/demux/demuxer-worker.js */\n/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/eventemitter3/index.js (<- Module is not an ECMAScript module) */\n/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/url-toolkit/src/url-toolkit.js (<- Module is not an ECMAScript module) */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_226214__) {\n\n\"use strict\";\n// ESM COMPAT FLAG\n__nested_webpack_require_226214__.r(__webpack_exports__);\n\n// EXPORTS\n__nested_webpack_require_226214__.d(__webpack_exports__, \"default\", function() { return /* binding */ hls_Hls; });\n\n// NAMESPACE OBJECT: ./src/utils/cues.ts\nvar cues_namespaceObject = {};\n__nested_webpack_require_226214__.r(cues_namespaceObject);\n__nested_webpack_require_226214__.d(cues_namespaceObject, \"newCue\", function() { return newCue; });\n\n// EXTERNAL MODULE: ./node_modules/url-toolkit/src/url-toolkit.js\nvar url_toolkit = __nested_webpack_require_226214__(\"./node_modules/url-toolkit/src/url-toolkit.js\");\n\n// EXTERNAL MODULE: ./src/errors.ts\nvar errors = __nested_webpack_require_226214__(\"./src/errors.ts\");\n\n// EXTERNAL MODULE: ./src/polyfills/number.js\nvar number = __nested_webpack_require_226214__(\"./src/polyfills/number.js\");\n\n// EXTERNAL MODULE: ./src/events.js\nvar events = __nested_webpack_require_226214__(\"./src/events.js\");\n\n// EXTERNAL MODULE: ./src/utils/logger.js\nvar logger = __nested_webpack_require_226214__(\"./src/utils/logger.js\");\n\n// CONCATENATED MODULE: ./src/event-handler.ts\n/*\n*\n* All objects in the event handling chain should inherit from this class\n*\n*/\n\n\n\nvar FORBIDDEN_EVENT_NAMES = {\n  'hlsEventGeneric': true,\n  'hlsHandlerDestroying': true,\n  'hlsHandlerDestroyed': true\n};\n\nvar event_handler_EventHandler = /*#__PURE__*/function () {\n  function EventHandler(hls) {\n    this.hls = void 0;\n    this.handledEvents = void 0;\n    this.useGenericHandler = void 0;\n    this.hls = hls;\n    this.onEvent = this.onEvent.bind(this);\n\n    for (var _len = arguments.length, events = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      events[_key - 1] = arguments[_key];\n    }\n\n    this.handledEvents = events;\n    this.useGenericHandler = true;\n    this.registerListeners();\n  }\n\n  var _proto = EventHandler.prototype;\n\n  _proto.destroy = function destroy() {\n    this.onHandlerDestroying();\n    this.unregisterListeners();\n    this.onHandlerDestroyed();\n  };\n\n  _proto.onHandlerDestroying = function onHandlerDestroying() {};\n\n  _proto.onHandlerDestroyed = function onHandlerDestroyed() {};\n\n  _proto.isEventHandler = function isEventHandler() {\n    return typeof this.handledEvents === 'object' && this.handledEvents.length && typeof this.onEvent === 'function';\n  };\n\n  _proto.registerListeners = function registerListeners() {\n    if (this.isEventHandler()) {\n      this.handledEvents.forEach(function (event) {\n        if (FORBIDDEN_EVENT_NAMES[event]) {\n          throw new Error('Forbidden event-name: ' + event);\n        }\n\n        this.hls.on(event, this.onEvent);\n      }, this);\n    }\n  };\n\n  _proto.unregisterListeners = function unregisterListeners() {\n    if (this.isEventHandler()) {\n      this.handledEvents.forEach(function (event) {\n        this.hls.off(event, this.onEvent);\n      }, this);\n    }\n  }\n  /**\n   * arguments: event (string), data (any)\n   */\n  ;\n\n  _proto.onEvent = function onEvent(event, data) {\n    this.onEventGeneric(event, data);\n  };\n\n  _proto.onEventGeneric = function onEventGeneric(event, data) {\n    var eventToFunction = function eventToFunction(event, data) {\n      var funcName = 'on' + event.replace('hls', '');\n\n      if (typeof this[funcName] !== 'function') {\n        throw new Error(\"Event \" + event + \" has no generic handler in this \" + this.constructor.name + \" class (tried \" + funcName + \")\");\n      }\n\n      return this[funcName].bind(this, data);\n    };\n\n    try {\n      eventToFunction.call(this, event, data).call();\n    } catch (err) {\n      logger[\"logger\"].error(\"An internal error happened while handling event \" + event + \". Error message: \\\"\" + err.message + \"\\\". Here is a stacktrace:\", err);\n      this.hls.trigger(events[\"default\"].ERROR, {\n        type: errors[\"ErrorTypes\"].OTHER_ERROR,\n        details: errors[\"ErrorDetails\"].INTERNAL_EXCEPTION,\n        fatal: false,\n        event: event,\n        err: err\n      });\n    }\n  };\n\n  return EventHandler;\n}();\n\n/* harmony default export */ var event_handler = (event_handler_EventHandler);\n// CONCATENATED MODULE: ./src/types/loader.ts\n/**\n * `type` property values for this loaders' context object\n * @enum\n *\n */\nvar PlaylistContextType;\n/**\n * @enum {string}\n */\n\n(function (PlaylistContextType) {\n  PlaylistContextType[\"MANIFEST\"] = \"manifest\";\n  PlaylistContextType[\"LEVEL\"] = \"level\";\n  PlaylistContextType[\"AUDIO_TRACK\"] = \"audioTrack\";\n  PlaylistContextType[\"SUBTITLE_TRACK\"] = \"subtitleTrack\";\n})(PlaylistContextType || (PlaylistContextType = {}));\n\nvar PlaylistLevelType;\n\n(function (PlaylistLevelType) {\n  PlaylistLevelType[\"MAIN\"] = \"main\";\n  PlaylistLevelType[\"AUDIO\"] = \"audio\";\n  PlaylistLevelType[\"SUBTITLE\"] = \"subtitle\";\n})(PlaylistLevelType || (PlaylistLevelType = {}));\n// EXTERNAL MODULE: ./src/demux/mp4demuxer.js\nvar mp4demuxer = __nested_webpack_require_226214__(\"./src/demux/mp4demuxer.js\");\n\n// CONCATENATED MODULE: ./src/loader/level-key.ts\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar level_key_LevelKey = /*#__PURE__*/function () {\n  function LevelKey(baseURI, relativeURI) {\n    this._uri = null;\n    this.baseuri = void 0;\n    this.reluri = void 0;\n    this.method = null;\n    this.key = null;\n    this.iv = null;\n    this.baseuri = baseURI;\n    this.reluri = relativeURI;\n  }\n\n  _createClass(LevelKey, [{\n    key: \"uri\",\n    get: function get() {\n      if (!this._uri && this.reluri) {\n        this._uri = Object(url_toolkit[\"buildAbsoluteURL\"])(this.baseuri, this.reluri, {\n          alwaysNormalize: true\n        });\n      }\n\n      return this._uri;\n    }\n  }]);\n\n  return LevelKey;\n}();\n\n\n// CONCATENATED MODULE: ./src/loader/fragment.ts\n\n\n\nfunction fragment_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction fragment_createClass(Constructor, protoProps, staticProps) { if (protoProps) fragment_defineProperties(Constructor.prototype, protoProps); if (staticProps) fragment_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\nvar ElementaryStreamTypes;\n\n(function (ElementaryStreamTypes) {\n  ElementaryStreamTypes[\"AUDIO\"] = \"audio\";\n  ElementaryStreamTypes[\"VIDEO\"] = \"video\";\n})(ElementaryStreamTypes || (ElementaryStreamTypes = {}));\n\nvar fragment_Fragment = /*#__PURE__*/function () {\n  function Fragment() {\n    var _this$_elementaryStre;\n\n    this._url = null;\n    this._byteRange = null;\n    this._decryptdata = null;\n    this._elementaryStreams = (_this$_elementaryStre = {}, _this$_elementaryStre[ElementaryStreamTypes.AUDIO] = false, _this$_elementaryStre[ElementaryStreamTypes.VIDEO] = false, _this$_elementaryStre);\n    this.deltaPTS = 0;\n    this.rawProgramDateTime = null;\n    this.programDateTime = null;\n    this.title = null;\n    this.tagList = [];\n    this.cc = void 0;\n    this.type = void 0;\n    this.relurl = void 0;\n    this.baseurl = void 0;\n    this.duration = void 0;\n    this.start = void 0;\n    this.sn = 0;\n    this.urlId = 0;\n    this.level = 0;\n    this.levelkey = void 0;\n    this.loader = void 0;\n  }\n\n  var _proto = Fragment.prototype;\n\n  // setByteRange converts a EXT-X-BYTERANGE attribute into a two element array\n  _proto.setByteRange = function setByteRange(value, previousFrag) {\n    var params = value.split('@', 2);\n    var byteRange = [];\n\n    if (params.length === 1) {\n      byteRange[0] = previousFrag ? previousFrag.byteRangeEndOffset : 0;\n    } else {\n      byteRange[0] = parseInt(params[1]);\n    }\n\n    byteRange[1] = parseInt(params[0]) + byteRange[0];\n    this._byteRange = byteRange;\n  };\n\n  /**\n   * @param {ElementaryStreamTypes} type\n   */\n  _proto.addElementaryStream = function addElementaryStream(type) {\n    this._elementaryStreams[type] = true;\n  }\n  /**\n   * @param {ElementaryStreamTypes} type\n   */\n  ;\n\n  _proto.hasElementaryStream = function hasElementaryStream(type) {\n    return this._elementaryStreams[type] === true;\n  }\n  /**\n   * Utility method for parseLevelPlaylist to create an initialization vector for a given segment\n   * @param {number} segmentNumber - segment number to generate IV with\n   * @returns {Uint8Array}\n   */\n  ;\n\n  _proto.createInitializationVector = function createInitializationVector(segmentNumber) {\n    var uint8View = new Uint8Array(16);\n\n    for (var i = 12; i < 16; i++) {\n      uint8View[i] = segmentNumber >> 8 * (15 - i) & 0xff;\n    }\n\n    return uint8View;\n  }\n  /**\n   * Utility method for parseLevelPlaylist to get a fragment's decryption data from the currently parsed encryption key data\n   * @param levelkey - a playlist's encryption info\n   * @param segmentNumber - the fragment's segment number\n   * @returns {LevelKey} - an object to be applied as a fragment's decryptdata\n   */\n  ;\n\n  _proto.setDecryptDataFromLevelKey = function setDecryptDataFromLevelKey(levelkey, segmentNumber) {\n    var decryptdata = levelkey;\n\n    if ((levelkey === null || levelkey === void 0 ? void 0 : levelkey.method) && levelkey.uri && !levelkey.iv) {\n      decryptdata = new level_key_LevelKey(levelkey.baseuri, levelkey.reluri);\n      decryptdata.method = levelkey.method;\n      decryptdata.iv = this.createInitializationVector(segmentNumber);\n    }\n\n    return decryptdata;\n  };\n\n  fragment_createClass(Fragment, [{\n    key: \"url\",\n    get: function get() {\n      if (!this._url && this.relurl) {\n        this._url = Object(url_toolkit[\"buildAbsoluteURL\"])(this.baseurl, this.relurl, {\n          alwaysNormalize: true\n        });\n      }\n\n      return this._url;\n    },\n    set: function set(value) {\n      this._url = value;\n    }\n  }, {\n    key: \"byteRange\",\n    get: function get() {\n      if (!this._byteRange) {\n        return [];\n      }\n\n      return this._byteRange;\n    }\n    /**\n     * @type {number}\n     */\n\n  }, {\n    key: \"byteRangeStartOffset\",\n    get: function get() {\n      return this.byteRange[0];\n    }\n  }, {\n    key: \"byteRangeEndOffset\",\n    get: function get() {\n      return this.byteRange[1];\n    }\n  }, {\n    key: \"decryptdata\",\n    get: function get() {\n      if (!this.levelkey && !this._decryptdata) {\n        return null;\n      }\n\n      if (!this._decryptdata && this.levelkey) {\n        var sn = this.sn;\n\n        if (typeof sn !== 'number') {\n          // We are fetching decryption data for a initialization segment\n          // If the segment was encrypted with AES-128\n          // It must have an IV defined. We cannot substitute the Segment Number in.\n          if (this.levelkey && this.levelkey.method === 'AES-128' && !this.levelkey.iv) {\n            logger[\"logger\"].warn(\"missing IV for initialization segment with method=\\\"\" + this.levelkey.method + \"\\\" - compliance issue\");\n          }\n          /*\n          Be converted to a Number.\n          'initSegment' will become NaN.\n          NaN, which when converted through ToInt32() -> +0.\n          ---\n          Explicitly set sn to resulting value from implicit conversions 'initSegment' values for IV generation.\n          */\n\n\n          sn = 0;\n        }\n\n        this._decryptdata = this.setDecryptDataFromLevelKey(this.levelkey, sn);\n      }\n\n      return this._decryptdata;\n    }\n  }, {\n    key: \"endProgramDateTime\",\n    get: function get() {\n      if (this.programDateTime === null) {\n        return null;\n      }\n\n      if (!Object(number[\"isFiniteNumber\"])(this.programDateTime)) {\n        return null;\n      }\n\n      var duration = !Object(number[\"isFiniteNumber\"])(this.duration) ? 0 : this.duration;\n      return this.programDateTime + duration * 1000;\n    }\n  }, {\n    key: \"encrypted\",\n    get: function get() {\n      return !!(this.decryptdata && this.decryptdata.uri !== null && this.decryptdata.key === null);\n    }\n  }]);\n\n  return Fragment;\n}();\n\n\n// CONCATENATED MODULE: ./src/loader/level.js\n\n\nfunction level_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction level_createClass(Constructor, protoProps, staticProps) { if (protoProps) level_defineProperties(Constructor.prototype, protoProps); if (staticProps) level_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar level_Level = /*#__PURE__*/function () {\n  function Level(baseUrl) {\n    // Please keep properties in alphabetical order\n    this.endCC = 0;\n    this.endSN = 0;\n    this.fragments = [];\n    this.initSegment = null;\n    this.live = true;\n    this.needSidxRanges = false;\n    this.startCC = 0;\n    this.startSN = 0;\n    this.startTimeOffset = null;\n    this.targetduration = 0;\n    this.totalduration = 0;\n    this.type = null;\n    this.url = baseUrl;\n    this.version = null;\n  }\n\n  level_createClass(Level, [{\n    key: \"hasProgramDateTime\",\n    get: function get() {\n      return !!(this.fragments[0] && Object(number[\"isFiniteNumber\"])(this.fragments[0].programDateTime));\n    }\n  }]);\n\n  return Level;\n}();\n\n\n// CONCATENATED MODULE: ./src/utils/attr-list.js\nvar DECIMAL_RESOLUTION_REGEX = /^(\\d+)x(\\d+)$/; // eslint-disable-line no-useless-escape\n\nvar ATTR_LIST_REGEX = /\\s*(.+?)\\s*=((?:\\\".*?\\\")|.*?)(?:,|$)/g; // eslint-disable-line no-useless-escape\n// adapted from https://github.com/kanongil/node-m3u8parse/blob/master/attrlist.js\n\nvar AttrList = /*#__PURE__*/function () {\n  function AttrList(attrs) {\n    if (typeof attrs === 'string') {\n      attrs = AttrList.parseAttrList(attrs);\n    }\n\n    for (var attr in attrs) {\n      if (attrs.hasOwnProperty(attr)) {\n        this[attr] = attrs[attr];\n      }\n    }\n  }\n\n  var _proto = AttrList.prototype;\n\n  _proto.decimalInteger = function decimalInteger(attrName) {\n    var intValue = parseInt(this[attrName], 10);\n\n    if (intValue > Number.MAX_SAFE_INTEGER) {\n      return Infinity;\n    }\n\n    return intValue;\n  };\n\n  _proto.hexadecimalInteger = function hexadecimalInteger(attrName) {\n    if (this[attrName]) {\n      var stringValue = (this[attrName] || '0x').slice(2);\n      stringValue = (stringValue.length & 1 ? '0' : '') + stringValue;\n      var value = new Uint8Array(stringValue.length / 2);\n\n      for (var i = 0; i < stringValue.length / 2; i++) {\n        value[i] = parseInt(stringValue.slice(i * 2, i * 2 + 2), 16);\n      }\n\n      return value;\n    } else {\n      return null;\n    }\n  };\n\n  _proto.hexadecimalIntegerAsNumber = function hexadecimalIntegerAsNumber(attrName) {\n    var intValue = parseInt(this[attrName], 16);\n\n    if (intValue > Number.MAX_SAFE_INTEGER) {\n      return Infinity;\n    }\n\n    return intValue;\n  };\n\n  _proto.decimalFloatingPoint = function decimalFloatingPoint(attrName) {\n    return parseFloat(this[attrName]);\n  };\n\n  _proto.enumeratedString = function enumeratedString(attrName) {\n    return this[attrName];\n  };\n\n  _proto.decimalResolution = function decimalResolution(attrName) {\n    var res = DECIMAL_RESOLUTION_REGEX.exec(this[attrName]);\n\n    if (res === null) {\n      return undefined;\n    }\n\n    return {\n      width: parseInt(res[1], 10),\n      height: parseInt(res[2], 10)\n    };\n  };\n\n  AttrList.parseAttrList = function parseAttrList(input) {\n    var match,\n        attrs = {};\n    ATTR_LIST_REGEX.lastIndex = 0;\n\n    while ((match = ATTR_LIST_REGEX.exec(input)) !== null) {\n      var value = match[2],\n          quote = '\"';\n\n      if (value.indexOf(quote) === 0 && value.lastIndexOf(quote) === value.length - 1) {\n        value = value.slice(1, -1);\n      }\n\n      attrs[match[1]] = value;\n    }\n\n    return attrs;\n  };\n\n  return AttrList;\n}();\n\n/* harmony default export */ var attr_list = (AttrList);\n// CONCATENATED MODULE: ./src/utils/codecs.ts\n// from http://mp4ra.org/codecs.html\nvar sampleEntryCodesISO = {\n  audio: {\n    'a3ds': true,\n    'ac-3': true,\n    'ac-4': true,\n    'alac': true,\n    'alaw': true,\n    'dra1': true,\n    'dts+': true,\n    'dts-': true,\n    'dtsc': true,\n    'dtse': true,\n    'dtsh': true,\n    'ec-3': true,\n    'enca': true,\n    'g719': true,\n    'g726': true,\n    'm4ae': true,\n    'mha1': true,\n    'mha2': true,\n    'mhm1': true,\n    'mhm2': true,\n    'mlpa': true,\n    'mp4a': true,\n    'raw ': true,\n    'Opus': true,\n    'samr': true,\n    'sawb': true,\n    'sawp': true,\n    'sevc': true,\n    'sqcp': true,\n    'ssmv': true,\n    'twos': true,\n    'ulaw': true\n  },\n  video: {\n    'avc1': true,\n    'avc2': true,\n    'avc3': true,\n    'avc4': true,\n    'avcp': true,\n    'drac': true,\n    'dvav': true,\n    'dvhe': true,\n    'encv': true,\n    'hev1': true,\n    'hvc1': true,\n    'mjp2': true,\n    'mp4v': true,\n    'mvc1': true,\n    'mvc2': true,\n    'mvc3': true,\n    'mvc4': true,\n    'resv': true,\n    'rv60': true,\n    's263': true,\n    'svc1': true,\n    'svc2': true,\n    'vc-1': true,\n    'vp08': true,\n    'vp09': true\n  }\n};\n\nfunction isCodecType(codec, type) {\n  var typeCodes = sampleEntryCodesISO[type];\n  return !!typeCodes && typeCodes[codec.slice(0, 4)] === true;\n}\n\nfunction isCodecSupportedInMp4(codec, type) {\n  return MediaSource.isTypeSupported((type || 'video') + \"/mp4;codecs=\\\"\" + codec + \"\\\"\");\n}\n\n\n// CONCATENATED MODULE: ./src/loader/m3u8-parser.ts\n\n\n\n\n\n\n\n\n\n\n\n/**\n * M3U8 parser\n * @module\n */\n// https://regex101.com is your friend\nvar MASTER_PLAYLIST_REGEX = /(?:#EXT-X-STREAM-INF:([^\\n\\r]*)[\\r\\n]+([^\\r\\n]+)|#EXT-X-SESSION-DATA:([^\\n\\r]*)[\\r\\n]+)/g;\nvar MASTER_PLAYLIST_MEDIA_REGEX = /#EXT-X-MEDIA:(.*)/g;\nvar LEVEL_PLAYLIST_REGEX_FAST = new RegExp([/#EXTINF:\\s*(\\d*(?:\\.\\d+)?)(?:,(.*)\\s+)?/.source, // duration (#EXTINF:<duration>,<title>), group 1 => duration, group 2 => title\n/|(?!#)([\\S+ ?]+)/.source, // segment URI, group 3 => the URI (note newline is not eaten)\n/|#EXT-X-BYTERANGE:*(.+)/.source, // next segment's byterange, group 4 => range spec (x@y)\n/|#EXT-X-PROGRAM-DATE-TIME:(.+)/.source, // next segment's program date/time group 5 => the datetime spec\n/|#.*/.source // All other non-segment oriented tags will match with all groups empty\n].join(''), 'g');\nvar LEVEL_PLAYLIST_REGEX_SLOW = /(?:(?:#(EXTM3U))|(?:#EXT-X-(PLAYLIST-TYPE):(.+))|(?:#EXT-X-(MEDIA-SEQUENCE): *(\\d+))|(?:#EXT-X-(TARGETDURATION): *(\\d+))|(?:#EXT-X-(KEY):(.+))|(?:#EXT-X-(START):(.+))|(?:#EXT-X-(ENDLIST))|(?:#EXT-X-(DISCONTINUITY-SEQ)UENCE:(\\d+))|(?:#EXT-X-(DIS)CONTINUITY))|(?:#EXT-X-(VERSION):(\\d+))|(?:#EXT-X-(MAP):(.+))|(?:(#)([^:]*):(.*))|(?:(#)(.*))(?:.*)\\r?\\n?/;\nvar MP4_REGEX_SUFFIX = /\\.(mp4|m4s|m4v|m4a)$/i;\n\nvar m3u8_parser_M3U8Parser = /*#__PURE__*/function () {\n  function M3U8Parser() {}\n\n  M3U8Parser.findGroup = function findGroup(groups, mediaGroupId) {\n    for (var i = 0; i < groups.length; i++) {\n      var group = groups[i];\n\n      if (group.id === mediaGroupId) {\n        return group;\n      }\n    }\n  };\n\n  M3U8Parser.convertAVC1ToAVCOTI = function convertAVC1ToAVCOTI(codec) {\n    var avcdata = codec.split('.');\n    var result;\n\n    if (avcdata.length > 2) {\n      result = avcdata.shift() + '.';\n      result += parseInt(avcdata.shift()).toString(16);\n      result += ('000' + parseInt(avcdata.shift()).toString(16)).substr(-4);\n    } else {\n      result = codec;\n    }\n\n    return result;\n  };\n\n  M3U8Parser.resolve = function resolve(url, baseUrl) {\n    return url_toolkit[\"buildAbsoluteURL\"](baseUrl, url, {\n      alwaysNormalize: true\n    });\n  };\n\n  M3U8Parser.parseMasterPlaylist = function parseMasterPlaylist(string, baseurl) {\n    // TODO(typescript-level)\n    var levels = [];\n    var sessionData = {};\n    var hasSessionData = false;\n    MASTER_PLAYLIST_REGEX.lastIndex = 0; // TODO(typescript-level)\n\n    function setCodecs(codecs, level) {\n      ['video', 'audio'].forEach(function (type) {\n        var filtered = codecs.filter(function (codec) {\n          return isCodecType(codec, type);\n        });\n\n        if (filtered.length) {\n          var preferred = filtered.filter(function (codec) {\n            return codec.lastIndexOf('avc1', 0) === 0 || codec.lastIndexOf('mp4a', 0) === 0;\n          });\n          level[type + \"Codec\"] = preferred.length > 0 ? preferred[0] : filtered[0]; // remove from list\n\n          codecs = codecs.filter(function (codec) {\n            return filtered.indexOf(codec) === -1;\n          });\n        }\n      });\n      level.unknownCodecs = codecs;\n    }\n\n    var result;\n\n    while ((result = MASTER_PLAYLIST_REGEX.exec(string)) != null) {\n      if (result[1]) {\n        // '#EXT-X-STREAM-INF' is found, parse level tag  in group 1\n        // TODO(typescript-level)\n        var level = {};\n        var attrs = level.attrs = new attr_list(result[1]);\n        level.url = M3U8Parser.resolve(result[2], baseurl);\n        var resolution = attrs.decimalResolution('RESOLUTION');\n\n        if (resolution) {\n          level.width = resolution.width;\n          level.height = resolution.height;\n        }\n\n        level.bitrate = attrs.decimalInteger('AVERAGE-BANDWIDTH') || attrs.decimalInteger('BANDWIDTH');\n        level.name = attrs.NAME;\n        setCodecs([].concat((attrs.CODECS || '').split(/[ ,]+/)), level);\n\n        if (level.videoCodec && level.videoCodec.indexOf('avc1') !== -1) {\n          level.videoCodec = M3U8Parser.convertAVC1ToAVCOTI(level.videoCodec);\n        }\n\n        levels.push(level);\n      } else if (result[3]) {\n        // '#EXT-X-SESSION-DATA' is found, parse session data in group 3\n        var sessionAttrs = new attr_list(result[3]);\n\n        if (sessionAttrs['DATA-ID']) {\n          hasSessionData = true;\n          sessionData[sessionAttrs['DATA-ID']] = sessionAttrs;\n        }\n      }\n    }\n\n    return {\n      levels: levels,\n      sessionData: hasSessionData ? sessionData : null\n    };\n  };\n\n  M3U8Parser.parseMasterPlaylistMedia = function parseMasterPlaylistMedia(string, baseurl, type, audioGroups) {\n    if (audioGroups === void 0) {\n      audioGroups = [];\n    }\n\n    var result;\n    var medias = [];\n    var id = 0;\n    MASTER_PLAYLIST_MEDIA_REGEX.lastIndex = 0;\n\n    while ((result = MASTER_PLAYLIST_MEDIA_REGEX.exec(string)) !== null) {\n      var attrs = new attr_list(result[1]);\n\n      if (attrs.TYPE === type) {\n        var media = {\n          attrs: attrs,\n          id: id++,\n          groupId: attrs['GROUP-ID'],\n          instreamId: attrs['INSTREAM-ID'],\n          name: attrs.NAME || attrs.LANGUAGE,\n          type: type,\n          default: attrs.DEFAULT === 'YES',\n          autoselect: attrs.AUTOSELECT === 'YES',\n          forced: attrs.FORCED === 'YES',\n          lang: attrs.LANGUAGE\n        };\n\n        if (attrs.URI) {\n          media.url = M3U8Parser.resolve(attrs.URI, baseurl);\n        }\n\n        if (audioGroups.length) {\n          // If there are audio groups signalled in the manifest, let's look for a matching codec string for this track\n          var groupCodec = M3U8Parser.findGroup(audioGroups, media.groupId); // If we don't find the track signalled, lets use the first audio groups codec we have\n          // Acting as a best guess\n\n          media.audioCodec = groupCodec ? groupCodec.codec : audioGroups[0].codec;\n        }\n\n        medias.push(media);\n      }\n    }\n\n    return medias;\n  };\n\n  M3U8Parser.parseLevelPlaylist = function parseLevelPlaylist(string, baseurl, id, type, levelUrlId) {\n    var currentSN = 0;\n    var totalduration = 0;\n    var level = new level_Level(baseurl);\n    var discontinuityCounter = 0;\n    var prevFrag = null;\n    var frag = new fragment_Fragment();\n    var result;\n    var i;\n    var levelkey;\n    var firstPdtIndex = null;\n    LEVEL_PLAYLIST_REGEX_FAST.lastIndex = 0;\n\n    while ((result = LEVEL_PLAYLIST_REGEX_FAST.exec(string)) !== null) {\n      var duration = result[1];\n\n      if (duration) {\n        // INF\n        frag.duration = parseFloat(duration); // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n\n        var title = (' ' + result[2]).slice(1);\n        frag.title = title || null;\n        frag.tagList.push(title ? ['INF', duration, title] : ['INF', duration]);\n      } else if (result[3]) {\n        // url\n        if (Object(number[\"isFiniteNumber\"])(frag.duration)) {\n          var sn = currentSN++;\n          frag.type = type;\n          frag.start = totalduration;\n\n          if (levelkey) {\n            frag.levelkey = levelkey;\n          }\n\n          frag.sn = sn;\n          frag.level = id;\n          frag.cc = discontinuityCounter;\n          frag.urlId = levelUrlId;\n          frag.baseurl = baseurl; // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n\n          frag.relurl = (' ' + result[3]).slice(1);\n          assignProgramDateTime(frag, prevFrag);\n          level.fragments.push(frag);\n          prevFrag = frag;\n          totalduration += frag.duration;\n          frag = new fragment_Fragment();\n        }\n      } else if (result[4]) {\n        // X-BYTERANGE\n        var data = (' ' + result[4]).slice(1);\n\n        if (prevFrag) {\n          frag.setByteRange(data, prevFrag);\n        } else {\n          frag.setByteRange(data);\n        }\n      } else if (result[5]) {\n        // PROGRAM-DATE-TIME\n        // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n        frag.rawProgramDateTime = (' ' + result[5]).slice(1);\n        frag.tagList.push(['PROGRAM-DATE-TIME', frag.rawProgramDateTime]);\n\n        if (firstPdtIndex === null) {\n          firstPdtIndex = level.fragments.length;\n        }\n      } else {\n        result = result[0].match(LEVEL_PLAYLIST_REGEX_SLOW);\n\n        if (!result) {\n          logger[\"logger\"].warn('No matches on slow regex match for level playlist!');\n          continue;\n        }\n\n        for (i = 1; i < result.length; i++) {\n          if (typeof result[i] !== 'undefined') {\n            break;\n          }\n        } // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n\n\n        var value1 = (' ' + result[i + 1]).slice(1);\n        var value2 = (' ' + result[i + 2]).slice(1);\n\n        switch (result[i]) {\n          case '#':\n            frag.tagList.push(value2 ? [value1, value2] : [value1]);\n            break;\n\n          case 'PLAYLIST-TYPE':\n            level.type = value1.toUpperCase();\n            break;\n\n          case 'MEDIA-SEQUENCE':\n            currentSN = level.startSN = parseInt(value1);\n            break;\n\n          case 'TARGETDURATION':\n            level.targetduration = parseFloat(value1);\n            break;\n\n          case 'VERSION':\n            level.version = parseInt(value1);\n            break;\n\n          case 'EXTM3U':\n            break;\n\n          case 'ENDLIST':\n            level.live = false;\n            break;\n\n          case 'DIS':\n            discontinuityCounter++;\n            frag.tagList.push(['DIS']);\n            break;\n\n          case 'DISCONTINUITY-SEQ':\n            discontinuityCounter = parseInt(value1);\n            break;\n\n          case 'KEY':\n            {\n              // https://tools.ietf.org/html/rfc8216#section-4.3.2.4\n              var decryptparams = value1;\n              var keyAttrs = new attr_list(decryptparams);\n              var decryptmethod = keyAttrs.enumeratedString('METHOD');\n              var decrypturi = keyAttrs.URI;\n              var decryptiv = keyAttrs.hexadecimalInteger('IV'); // From RFC: This attribute is OPTIONAL; its absence indicates an implicit value of \"identity\".\n\n              var decryptkeyformat = keyAttrs.KEYFORMAT || 'identity';\n\n              if (decryptkeyformat === 'com.apple.streamingkeydelivery') {\n                logger[\"logger\"].warn('Keyformat com.apple.streamingkeydelivery is not supported');\n                continue;\n              }\n\n              if (decryptmethod) {\n                levelkey = new level_key_LevelKey(baseurl, decrypturi);\n\n                if (decrypturi && ['AES-128', 'SAMPLE-AES', 'SAMPLE-AES-CENC'].indexOf(decryptmethod) >= 0) {\n                  levelkey.method = decryptmethod;\n                  levelkey.key = null; // Initialization Vector (IV)\n\n                  levelkey.iv = decryptiv;\n                }\n              }\n\n              break;\n            }\n\n          case 'START':\n            {\n              var startAttrs = new attr_list(value1);\n              var startTimeOffset = startAttrs.decimalFloatingPoint('TIME-OFFSET'); // TIME-OFFSET can be 0\n\n              if (Object(number[\"isFiniteNumber\"])(startTimeOffset)) {\n                level.startTimeOffset = startTimeOffset;\n              }\n\n              break;\n            }\n\n          case 'MAP':\n            {\n              var mapAttrs = new attr_list(value1);\n              frag.relurl = mapAttrs.URI;\n\n              if (mapAttrs.BYTERANGE) {\n                frag.setByteRange(mapAttrs.BYTERANGE);\n              }\n\n              frag.baseurl = baseurl;\n              frag.level = id;\n              frag.type = type;\n              frag.sn = 'initSegment';\n              level.initSegment = frag;\n              frag = new fragment_Fragment();\n              frag.rawProgramDateTime = level.initSegment.rawProgramDateTime;\n              break;\n            }\n\n          default:\n            logger[\"logger\"].warn(\"line parsed but not handled: \" + result);\n            break;\n        }\n      }\n    }\n\n    frag = prevFrag; // logger.log('found ' + level.fragments.length + ' fragments');\n\n    if (frag && !frag.relurl) {\n      level.fragments.pop();\n      totalduration -= frag.duration;\n    }\n\n    level.totalduration = totalduration;\n    level.averagetargetduration = totalduration / level.fragments.length;\n    level.endSN = currentSN - 1;\n    level.startCC = level.fragments[0] ? level.fragments[0].cc : 0;\n    level.endCC = discontinuityCounter;\n\n    if (!level.initSegment && level.fragments.length) {\n      // this is a bit lurky but HLS really has no other way to tell us\n      // if the fragments are TS or MP4, except if we download them :/\n      // but this is to be able to handle SIDX.\n      if (level.fragments.every(function (frag) {\n        return MP4_REGEX_SUFFIX.test(frag.relurl);\n      })) {\n        logger[\"logger\"].warn('MP4 fragments found but no init segment (probably no MAP, incomplete M3U8), trying to fetch SIDX');\n        frag = new fragment_Fragment();\n        frag.relurl = level.fragments[0].relurl;\n        frag.baseurl = baseurl;\n        frag.level = id;\n        frag.type = type;\n        frag.sn = 'initSegment';\n        level.initSegment = frag;\n        level.needSidxRanges = true;\n      }\n    }\n    /**\n     * Backfill any missing PDT values\n       \"If the first EXT-X-PROGRAM-DATE-TIME tag in a Playlist appears after\n       one or more Media Segment URIs, the client SHOULD extrapolate\n       backward from that tag (using EXTINF durations and/or media\n       timestamps) to associate dates with those segments.\"\n     * We have already extrapolated forward, but all fragments up to the first instance of PDT do not have their PDTs\n     * computed.\n     */\n\n\n    if (firstPdtIndex) {\n      backfillProgramDateTimes(level.fragments, firstPdtIndex);\n    }\n\n    return level;\n  };\n\n  return M3U8Parser;\n}();\n\n\n\nfunction backfillProgramDateTimes(fragments, startIndex) {\n  var fragPrev = fragments[startIndex];\n\n  for (var i = startIndex - 1; i >= 0; i--) {\n    var frag = fragments[i];\n    frag.programDateTime = fragPrev.programDateTime - frag.duration * 1000;\n    fragPrev = frag;\n  }\n}\n\nfunction assignProgramDateTime(frag, prevFrag) {\n  if (frag.rawProgramDateTime) {\n    frag.programDateTime = Date.parse(frag.rawProgramDateTime);\n  } else if (prevFrag === null || prevFrag === void 0 ? void 0 : prevFrag.programDateTime) {\n    frag.programDateTime = prevFrag.endProgramDateTime;\n  }\n\n  if (!Object(number[\"isFiniteNumber\"])(frag.programDateTime)) {\n    frag.programDateTime = null;\n    frag.rawProgramDateTime = null;\n  }\n}\n// CONCATENATED MODULE: ./src/loader/playlist-loader.ts\n\n\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n/**\n * PlaylistLoader - delegate for media manifest/playlist loading tasks. Takes care of parsing media to internal data-models.\n *\n * Once loaded, dispatches events with parsed data-models of manifest/levels/audio/subtitle tracks.\n *\n * Uses loader(s) set in config to do actual internal loading of resource tasks.\n *\n * @module\n *\n */\n\n\n\n\n\n\n\nvar _window = window,\n    performance = _window.performance;\n/**\n * @constructor\n */\n\nvar playlist_loader_PlaylistLoader = /*#__PURE__*/function (_EventHandler) {\n  _inheritsLoose(PlaylistLoader, _EventHandler);\n\n  /**\n   * @constructs\n   * @param {Hls} hls\n   */\n  function PlaylistLoader(hls) {\n    var _this;\n\n    _this = _EventHandler.call(this, hls, events[\"default\"].MANIFEST_LOADING, events[\"default\"].LEVEL_LOADING, events[\"default\"].AUDIO_TRACK_LOADING, events[\"default\"].SUBTITLE_TRACK_LOADING) || this;\n    _this.loaders = {};\n    return _this;\n  }\n  /**\n   * @param {PlaylistContextType} type\n   * @returns {boolean}\n   */\n\n\n  PlaylistLoader.canHaveQualityLevels = function canHaveQualityLevels(type) {\n    return type !== PlaylistContextType.AUDIO_TRACK && type !== PlaylistContextType.SUBTITLE_TRACK;\n  }\n  /**\n   * Map context.type to LevelType\n   * @param {PlaylistLoaderContext} context\n   * @returns {LevelType}\n   */\n  ;\n\n  PlaylistLoader.mapContextToLevelType = function mapContextToLevelType(context) {\n    var type = context.type;\n\n    switch (type) {\n      case PlaylistContextType.AUDIO_TRACK:\n        return PlaylistLevelType.AUDIO;\n\n      case PlaylistContextType.SUBTITLE_TRACK:\n        return PlaylistLevelType.SUBTITLE;\n\n      default:\n        return PlaylistLevelType.MAIN;\n    }\n  };\n\n  PlaylistLoader.getResponseUrl = function getResponseUrl(response, context) {\n    var url = response.url; // responseURL not supported on some browsers (it is used to detect URL redirection)\n    // data-uri mode also not supported (but no need to detect redirection)\n\n    if (url === undefined || url.indexOf('data:') === 0) {\n      // fallback to initial URL\n      url = context.url;\n    }\n\n    return url;\n  }\n  /**\n   * Returns defaults or configured loader-type overloads (pLoader and loader config params)\n   * Default loader is XHRLoader (see utils)\n   * @param {PlaylistLoaderContext} context\n   * @returns {Loader} or other compatible configured overload\n   */\n  ;\n\n  var _proto = PlaylistLoader.prototype;\n\n  _proto.createInternalLoader = function createInternalLoader(context) {\n    var config = this.hls.config;\n    var PLoader = config.pLoader;\n    var Loader = config.loader; // TODO(typescript-config): Verify once config is typed that InternalLoader always returns a Loader\n\n    var InternalLoader = PLoader || Loader;\n    var loader = new InternalLoader(config); // TODO - Do we really need to assign the instance or if the dep has been lost\n\n    context.loader = loader;\n    this.loaders[context.type] = loader;\n    return loader;\n  };\n\n  _proto.getInternalLoader = function getInternalLoader(context) {\n    return this.loaders[context.type];\n  };\n\n  _proto.resetInternalLoader = function resetInternalLoader(contextType) {\n    if (this.loaders[contextType]) {\n      delete this.loaders[contextType];\n    }\n  }\n  /**\n   * Call `destroy` on all internal loader instances mapped (one per context type)\n   */\n  ;\n\n  _proto.destroyInternalLoaders = function destroyInternalLoaders() {\n    for (var contextType in this.loaders) {\n      var loader = this.loaders[contextType];\n\n      if (loader) {\n        loader.destroy();\n      }\n\n      this.resetInternalLoader(contextType);\n    }\n  };\n\n  _proto.destroy = function destroy() {\n    this.destroyInternalLoaders();\n\n    _EventHandler.prototype.destroy.call(this);\n  };\n\n  _proto.onManifestLoading = function onManifestLoading(data) {\n    this.load({\n      url: data.url,\n      type: PlaylistContextType.MANIFEST,\n      level: 0,\n      id: null,\n      responseType: 'text'\n    });\n  };\n\n  _proto.onLevelLoading = function onLevelLoading(data) {\n    this.load({\n      url: data.url,\n      type: PlaylistContextType.LEVEL,\n      level: data.level,\n      id: data.id,\n      responseType: 'text'\n    });\n  };\n\n  _proto.onAudioTrackLoading = function onAudioTrackLoading(data) {\n    this.load({\n      url: data.url,\n      type: PlaylistContextType.AUDIO_TRACK,\n      level: null,\n      id: data.id,\n      responseType: 'text'\n    });\n  };\n\n  _proto.onSubtitleTrackLoading = function onSubtitleTrackLoading(data) {\n    this.load({\n      url: data.url,\n      type: PlaylistContextType.SUBTITLE_TRACK,\n      level: null,\n      id: data.id,\n      responseType: 'text'\n    });\n  };\n\n  _proto.load = function load(context) {\n    var config = this.hls.config;\n    logger[\"logger\"].debug(\"Loading playlist of type \" + context.type + \", level: \" + context.level + \", id: \" + context.id); // Check if a loader for this context already exists\n\n    var loader = this.getInternalLoader(context);\n\n    if (loader) {\n      var loaderContext = loader.context;\n\n      if (loaderContext && loaderContext.url === context.url) {\n        // same URL can't overlap\n        logger[\"logger\"].trace('playlist request ongoing');\n        return false;\n      } else {\n        logger[\"logger\"].warn(\"aborting previous loader for type: \" + context.type);\n        loader.abort();\n      }\n    }\n\n    var maxRetry;\n    var timeout;\n    var retryDelay;\n    var maxRetryDelay; // apply different configs for retries depending on\n    // context (manifest, level, audio/subs playlist)\n\n    switch (context.type) {\n      case PlaylistContextType.MANIFEST:\n        maxRetry = config.manifestLoadingMaxRetry;\n        timeout = config.manifestLoadingTimeOut;\n        retryDelay = config.manifestLoadingRetryDelay;\n        maxRetryDelay = config.manifestLoadingMaxRetryTimeout;\n        break;\n\n      case PlaylistContextType.LEVEL:\n        // Disable internal loader retry logic, since we are managing retries in Level Controller\n        maxRetry = 0;\n        maxRetryDelay = 0;\n        retryDelay = 0;\n        timeout = config.levelLoadingTimeOut; // TODO Introduce retry settings for audio-track and subtitle-track, it should not use level retry config\n\n        break;\n\n      default:\n        maxRetry = config.levelLoadingMaxRetry;\n        timeout = config.levelLoadingTimeOut;\n        retryDelay = config.levelLoadingRetryDelay;\n        maxRetryDelay = config.levelLoadingMaxRetryTimeout;\n        break;\n    }\n\n    loader = this.createInternalLoader(context);\n    var loaderConfig = {\n      timeout: timeout,\n      maxRetry: maxRetry,\n      retryDelay: retryDelay,\n      maxRetryDelay: maxRetryDelay\n    };\n    var loaderCallbacks = {\n      onSuccess: this.loadsuccess.bind(this),\n      onError: this.loaderror.bind(this),\n      onTimeout: this.loadtimeout.bind(this)\n    };\n    logger[\"logger\"].debug(\"Calling internal loader delegate for URL: \" + context.url);\n    loader.load(context, loaderConfig, loaderCallbacks);\n    return true;\n  };\n\n  _proto.loadsuccess = function loadsuccess(response, stats, context, networkDetails) {\n    if (networkDetails === void 0) {\n      networkDetails = null;\n    }\n\n    if (context.isSidxRequest) {\n      this._handleSidxRequest(response, context);\n\n      this._handlePlaylistLoaded(response, stats, context, networkDetails);\n\n      return;\n    }\n\n    this.resetInternalLoader(context.type);\n\n    if (typeof response.data !== 'string') {\n      throw new Error('expected responseType of \"text\" for PlaylistLoader');\n    }\n\n    var string = response.data;\n    stats.tload = performance.now(); // stats.mtime = new Date(target.getResponseHeader('Last-Modified'));\n    // Validate if it is an M3U8 at all\n\n    if (string.indexOf('#EXTM3U') !== 0) {\n      this._handleManifestParsingError(response, context, 'no EXTM3U delimiter', networkDetails);\n\n      return;\n    } // Check if chunk-list or master. handle empty chunk list case (first EXTINF not signaled, but TARGETDURATION present)\n\n\n    if (string.indexOf('#EXTINF:') > 0 || string.indexOf('#EXT-X-TARGETDURATION:') > 0) {\n      this._handleTrackOrLevelPlaylist(response, stats, context, networkDetails);\n    } else {\n      this._handleMasterPlaylist(response, stats, context, networkDetails);\n    }\n  };\n\n  _proto.loaderror = function loaderror(response, context, networkDetails) {\n    if (networkDetails === void 0) {\n      networkDetails = null;\n    }\n\n    this._handleNetworkError(context, networkDetails, false, response);\n  };\n\n  _proto.loadtimeout = function loadtimeout(stats, context, networkDetails) {\n    if (networkDetails === void 0) {\n      networkDetails = null;\n    }\n\n    this._handleNetworkError(context, networkDetails, true);\n  } // TODO(typescript-config): networkDetails can currently be a XHR or Fetch impl,\n  // but with custom loaders it could be generic investigate this further when config is typed\n  ;\n\n  _proto._handleMasterPlaylist = function _handleMasterPlaylist(response, stats, context, networkDetails) {\n    var hls = this.hls;\n    var string = response.data;\n    var url = PlaylistLoader.getResponseUrl(response, context);\n\n    var _M3U8Parser$parseMast = m3u8_parser_M3U8Parser.parseMasterPlaylist(string, url),\n        levels = _M3U8Parser$parseMast.levels,\n        sessionData = _M3U8Parser$parseMast.sessionData;\n\n    if (!levels.length) {\n      this._handleManifestParsingError(response, context, 'no level found in manifest', networkDetails);\n\n      return;\n    } // multi level playlist, parse level info\n\n\n    var audioGroups = levels.map(function (level) {\n      return {\n        id: level.attrs.AUDIO,\n        codec: level.audioCodec\n      };\n    });\n    var audioTracks = m3u8_parser_M3U8Parser.parseMasterPlaylistMedia(string, url, 'AUDIO', audioGroups);\n    var subtitles = m3u8_parser_M3U8Parser.parseMasterPlaylistMedia(string, url, 'SUBTITLES');\n    var captions = m3u8_parser_M3U8Parser.parseMasterPlaylistMedia(string, url, 'CLOSED-CAPTIONS');\n\n    if (audioTracks.length) {\n      // check if we have found an audio track embedded in main playlist (audio track without URI attribute)\n      var embeddedAudioFound = false;\n      audioTracks.forEach(function (audioTrack) {\n        if (!audioTrack.url) {\n          embeddedAudioFound = true;\n        }\n      }); // if no embedded audio track defined, but audio codec signaled in quality level,\n      // we need to signal this main audio track this could happen with playlists with\n      // alt audio rendition in which quality levels (main)\n      // contains both audio+video. but with mixed audio track not signaled\n\n      if (embeddedAudioFound === false && levels[0].audioCodec && !levels[0].attrs.AUDIO) {\n        logger[\"logger\"].log('audio codec signaled in quality level, but no embedded audio track signaled, create one');\n        audioTracks.unshift({\n          type: 'main',\n          name: 'main',\n          default: false,\n          autoselect: false,\n          forced: false,\n          id: -1,\n          attrs: {},\n          url: ''\n        });\n      }\n    }\n\n    hls.trigger(events[\"default\"].MANIFEST_LOADED, {\n      levels: levels,\n      audioTracks: audioTracks,\n      subtitles: subtitles,\n      captions: captions,\n      url: url,\n      stats: stats,\n      networkDetails: networkDetails,\n      sessionData: sessionData\n    });\n  };\n\n  _proto._handleTrackOrLevelPlaylist = function _handleTrackOrLevelPlaylist(response, stats, context, networkDetails) {\n    var hls = this.hls;\n    var id = context.id,\n        level = context.level,\n        type = context.type;\n    var url = PlaylistLoader.getResponseUrl(response, context); // if the values are null, they will result in the else conditional\n\n    var levelUrlId = Object(number[\"isFiniteNumber\"])(id) ? id : 0;\n    var levelId = Object(number[\"isFiniteNumber\"])(level) ? level : levelUrlId;\n    var levelType = PlaylistLoader.mapContextToLevelType(context);\n    var levelDetails = m3u8_parser_M3U8Parser.parseLevelPlaylist(response.data, url, levelId, levelType, levelUrlId); // set stats on level structure\n    // TODO(jstackhouse): why? mixing concerns, is it just treated as value bag?\n\n    levelDetails.tload = stats.tload;\n\n    if (!levelDetails.fragments.length) {\n      hls.trigger(events[\"default\"].ERROR, {\n        type: errors[\"ErrorTypes\"].NETWORK_ERROR,\n        details: errors[\"ErrorDetails\"].LEVEL_EMPTY_ERROR,\n        fatal: false,\n        url: url,\n        reason: 'no fragments found in level',\n        level: typeof context.level === 'number' ? context.level : undefined\n      });\n      return;\n    } // We have done our first request (Manifest-type) and receive\n    // not a master playlist but a chunk-list (track/level)\n    // We fire the manifest-loaded event anyway with the parsed level-details\n    // by creating a single-level structure for it.\n\n\n    if (type === PlaylistContextType.MANIFEST) {\n      var singleLevel = {\n        url: url,\n        details: levelDetails\n      };\n      hls.trigger(events[\"default\"].MANIFEST_LOADED, {\n        levels: [singleLevel],\n        audioTracks: [],\n        url: url,\n        stats: stats,\n        networkDetails: networkDetails,\n        sessionData: null\n      });\n    } // save parsing time\n\n\n    stats.tparsed = performance.now(); // in case we need SIDX ranges\n    // return early after calling load for\n    // the SIDX box.\n\n    if (levelDetails.needSidxRanges) {\n      var sidxUrl = levelDetails.initSegment.url;\n      this.load({\n        url: sidxUrl,\n        isSidxRequest: true,\n        type: type,\n        level: level,\n        levelDetails: levelDetails,\n        id: id,\n        rangeStart: 0,\n        rangeEnd: 2048,\n        responseType: 'arraybuffer'\n      });\n      return;\n    } // extend the context with the new levelDetails property\n\n\n    context.levelDetails = levelDetails;\n\n    this._handlePlaylistLoaded(response, stats, context, networkDetails);\n  };\n\n  _proto._handleSidxRequest = function _handleSidxRequest(response, context) {\n    if (typeof response.data === 'string') {\n      throw new Error('sidx request must be made with responseType of array buffer');\n    }\n\n    var sidxInfo = mp4demuxer[\"default\"].parseSegmentIndex(new Uint8Array(response.data)); // if provided fragment does not contain sidx, early return\n\n    if (!sidxInfo) {\n      return;\n    }\n\n    var sidxReferences = sidxInfo.references;\n    var levelDetails = context.levelDetails;\n    sidxReferences.forEach(function (segmentRef, index) {\n      var segRefInfo = segmentRef.info;\n\n      if (!levelDetails) {\n        return;\n      }\n\n      var frag = levelDetails.fragments[index];\n\n      if (frag.byteRange.length === 0) {\n        frag.setByteRange(String(1 + segRefInfo.end - segRefInfo.start) + '@' + String(segRefInfo.start));\n      }\n    });\n\n    if (levelDetails) {\n      levelDetails.initSegment.setByteRange(String(sidxInfo.moovEndOffset) + '@0');\n    }\n  };\n\n  _proto._handleManifestParsingError = function _handleManifestParsingError(response, context, reason, networkDetails) {\n    this.hls.trigger(events[\"default\"].ERROR, {\n      type: errors[\"ErrorTypes\"].NETWORK_ERROR,\n      details: errors[\"ErrorDetails\"].MANIFEST_PARSING_ERROR,\n      fatal: true,\n      url: response.url,\n      reason: reason,\n      networkDetails: networkDetails\n    });\n  };\n\n  _proto._handleNetworkError = function _handleNetworkError(context, networkDetails, timeout, response) {\n    if (timeout === void 0) {\n      timeout = false;\n    }\n\n    if (response === void 0) {\n      response = null;\n    }\n\n    logger[\"logger\"].info(\"A network error occured while loading a \" + context.type + \"-type playlist\");\n    var details;\n    var fatal;\n    var loader = this.getInternalLoader(context);\n\n    switch (context.type) {\n      case PlaylistContextType.MANIFEST:\n        details = timeout ? errors[\"ErrorDetails\"].MANIFEST_LOAD_TIMEOUT : errors[\"ErrorDetails\"].MANIFEST_LOAD_ERROR;\n        fatal = true;\n        break;\n\n      case PlaylistContextType.LEVEL:\n        details = timeout ? errors[\"ErrorDetails\"].LEVEL_LOAD_TIMEOUT : errors[\"ErrorDetails\"].LEVEL_LOAD_ERROR;\n        fatal = false;\n        break;\n\n      case PlaylistContextType.AUDIO_TRACK:\n        details = timeout ? errors[\"ErrorDetails\"].AUDIO_TRACK_LOAD_TIMEOUT : errors[\"ErrorDetails\"].AUDIO_TRACK_LOAD_ERROR;\n        fatal = false;\n        break;\n\n      default:\n        // details = ...?\n        fatal = false;\n    }\n\n    if (loader) {\n      loader.abort();\n      this.resetInternalLoader(context.type);\n    } // TODO(typescript-events): when error events are handled, type this\n\n\n    var errorData = {\n      type: errors[\"ErrorTypes\"].NETWORK_ERROR,\n      details: details,\n      fatal: fatal,\n      url: context.url,\n      loader: loader,\n      context: context,\n      networkDetails: networkDetails\n    };\n\n    if (response) {\n      errorData.response = response;\n    }\n\n    this.hls.trigger(events[\"default\"].ERROR, errorData);\n  };\n\n  _proto._handlePlaylistLoaded = function _handlePlaylistLoaded(response, stats, context, networkDetails) {\n    var type = context.type,\n        level = context.level,\n        id = context.id,\n        levelDetails = context.levelDetails;\n\n    if (!levelDetails || !levelDetails.targetduration) {\n      this._handleManifestParsingError(response, context, 'invalid target duration', networkDetails);\n\n      return;\n    }\n\n    var canHaveLevels = PlaylistLoader.canHaveQualityLevels(context.type);\n\n    if (canHaveLevels) {\n      this.hls.trigger(events[\"default\"].LEVEL_LOADED, {\n        details: levelDetails,\n        level: level || 0,\n        id: id || 0,\n        stats: stats,\n        networkDetails: networkDetails\n      });\n    } else {\n      switch (type) {\n        case PlaylistContextType.AUDIO_TRACK:\n          this.hls.trigger(events[\"default\"].AUDIO_TRACK_LOADED, {\n            details: levelDetails,\n            id: id,\n            stats: stats,\n            networkDetails: networkDetails\n          });\n          break;\n\n        case PlaylistContextType.SUBTITLE_TRACK:\n          this.hls.trigger(events[\"default\"].SUBTITLE_TRACK_LOADED, {\n            details: levelDetails,\n            id: id,\n            stats: stats,\n            networkDetails: networkDetails\n          });\n          break;\n      }\n    }\n  };\n\n  return PlaylistLoader;\n}(event_handler);\n\n/* harmony default export */ var playlist_loader = (playlist_loader_PlaylistLoader);\n// CONCATENATED MODULE: ./src/loader/fragment-loader.js\n\n\n\nfunction fragment_loader_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n/*\n * Fragment Loader\n*/\n\n\n\n\n\nvar fragment_loader_FragmentLoader = /*#__PURE__*/function (_EventHandler) {\n  fragment_loader_inheritsLoose(FragmentLoader, _EventHandler);\n\n  function FragmentLoader(hls) {\n    var _this;\n\n    _this = _EventHandler.call(this, hls, events[\"default\"].FRAG_LOADING) || this;\n    _this.loaders = {};\n    return _this;\n  }\n\n  var _proto = FragmentLoader.prototype;\n\n  _proto.destroy = function destroy() {\n    var loaders = this.loaders;\n\n    for (var loaderName in loaders) {\n      var loader = loaders[loaderName];\n\n      if (loader) {\n        loader.destroy();\n      }\n    }\n\n    this.loaders = {};\n\n    _EventHandler.prototype.destroy.call(this);\n  };\n\n  _proto.onFragLoading = function onFragLoading(data) {\n    var frag = data.frag,\n        type = frag.type,\n        loaders = this.loaders,\n        config = this.hls.config,\n        FragmentILoader = config.fLoader,\n        DefaultILoader = config.loader; // reset fragment state\n\n    frag.loaded = 0;\n    var loader = loaders[type];\n\n    if (loader) {\n      logger[\"logger\"].warn(\"abort previous fragment loader for type: \" + type);\n      loader.abort();\n    }\n\n    loader = loaders[type] = frag.loader = config.fLoader ? new FragmentILoader(config) : new DefaultILoader(config);\n    var loaderContext, loaderConfig, loaderCallbacks;\n    loaderContext = {\n      url: frag.url,\n      frag: frag,\n      responseType: 'arraybuffer',\n      progressData: false\n    };\n    var start = frag.byteRangeStartOffset,\n        end = frag.byteRangeEndOffset;\n\n    if (Object(number[\"isFiniteNumber\"])(start) && Object(number[\"isFiniteNumber\"])(end)) {\n      loaderContext.rangeStart = start;\n      loaderContext.rangeEnd = end;\n    }\n\n    loaderConfig = {\n      timeout: config.fragLoadingTimeOut,\n      maxRetry: 0,\n      retryDelay: 0,\n      maxRetryDelay: config.fragLoadingMaxRetryTimeout\n    };\n    loaderCallbacks = {\n      onSuccess: this.loadsuccess.bind(this),\n      onError: this.loaderror.bind(this),\n      onTimeout: this.loadtimeout.bind(this),\n      onProgress: this.loadprogress.bind(this)\n    };\n    loader.load(loaderContext, loaderConfig, loaderCallbacks);\n  };\n\n  _proto.loadsuccess = function loadsuccess(response, stats, context, networkDetails) {\n    if (networkDetails === void 0) {\n      networkDetails = null;\n    }\n\n    var payload = response.data,\n        frag = context.frag; // detach fragment loader on load success\n\n    frag.loader = undefined;\n    this.loaders[frag.type] = undefined;\n    this.hls.trigger(events[\"default\"].FRAG_LOADED, {\n      payload: payload,\n      frag: frag,\n      stats: stats,\n      networkDetails: networkDetails\n    });\n  };\n\n  _proto.loaderror = function loaderror(response, context, networkDetails) {\n    if (networkDetails === void 0) {\n      networkDetails = null;\n    }\n\n    var frag = context.frag;\n    var loader = frag.loader;\n\n    if (loader) {\n      loader.abort();\n    }\n\n    this.loaders[frag.type] = undefined;\n    this.hls.trigger(events[\"default\"].ERROR, {\n      type: errors[\"ErrorTypes\"].NETWORK_ERROR,\n      details: errors[\"ErrorDetails\"].FRAG_LOAD_ERROR,\n      fatal: false,\n      frag: context.frag,\n      response: response,\n      networkDetails: networkDetails\n    });\n  };\n\n  _proto.loadtimeout = function loadtimeout(stats, context, networkDetails) {\n    if (networkDetails === void 0) {\n      networkDetails = null;\n    }\n\n    var frag = context.frag;\n    var loader = frag.loader;\n\n    if (loader) {\n      loader.abort();\n    }\n\n    this.loaders[frag.type] = undefined;\n    this.hls.trigger(events[\"default\"].ERROR, {\n      type: errors[\"ErrorTypes\"].NETWORK_ERROR,\n      details: errors[\"ErrorDetails\"].FRAG_LOAD_TIMEOUT,\n      fatal: false,\n      frag: context.frag,\n      networkDetails: networkDetails\n    });\n  } // data will be used for progressive parsing\n  ;\n\n  _proto.loadprogress = function loadprogress(stats, context, data, networkDetails) {\n    if (networkDetails === void 0) {\n      networkDetails = null;\n    }\n\n    // jshint ignore:line\n    var frag = context.frag;\n    frag.loaded = stats.loaded;\n    this.hls.trigger(events[\"default\"].FRAG_LOAD_PROGRESS, {\n      frag: frag,\n      stats: stats,\n      networkDetails: networkDetails\n    });\n  };\n\n  return FragmentLoader;\n}(event_handler);\n\n/* harmony default export */ var fragment_loader = (fragment_loader_FragmentLoader);\n// CONCATENATED MODULE: ./src/loader/key-loader.ts\nfunction key_loader_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n/*\n * Decrypt key Loader\n*/\n\n\n\n\n\nvar key_loader_KeyLoader = /*#__PURE__*/function (_EventHandler) {\n  key_loader_inheritsLoose(KeyLoader, _EventHandler);\n\n  function KeyLoader(hls) {\n    var _this;\n\n    _this = _EventHandler.call(this, hls, events[\"default\"].KEY_LOADING) || this;\n    _this.loaders = {};\n    _this.decryptkey = null;\n    _this.decrypturl = null;\n    return _this;\n  }\n\n  var _proto = KeyLoader.prototype;\n\n  _proto.destroy = function destroy() {\n    for (var loaderName in this.loaders) {\n      var loader = this.loaders[loaderName];\n\n      if (loader) {\n        loader.destroy();\n      }\n    }\n\n    this.loaders = {};\n\n    _EventHandler.prototype.destroy.call(this);\n  };\n\n  _proto.onKeyLoading = function onKeyLoading(data) {\n    var frag = data.frag;\n    var type = frag.type;\n    var loader = this.loaders[type];\n\n    if (!frag.decryptdata) {\n      logger[\"logger\"].warn('Missing decryption data on fragment in onKeyLoading');\n      return;\n    } // Load the key if the uri is different from previous one, or if the decrypt key has not yet been retrieved\n\n\n    var uri = frag.decryptdata.uri;\n\n    if (uri !== this.decrypturl || this.decryptkey === null) {\n      var config = this.hls.config;\n\n      if (loader) {\n        logger[\"logger\"].warn(\"abort previous key loader for type:\" + type);\n        loader.abort();\n      }\n\n      if (!uri) {\n        logger[\"logger\"].warn('key uri is falsy');\n        return;\n      }\n\n      frag.loader = this.loaders[type] = new config.loader(config);\n      this.decrypturl = uri;\n      this.decryptkey = null;\n      var loaderContext = {\n        url: uri,\n        frag: frag,\n        responseType: 'arraybuffer'\n      }; // maxRetry is 0 so that instead of retrying the same key on the same variant multiple times,\n      // key-loader will trigger an error and rely on stream-controller to handle retry logic.\n      // this will also align retry logic with fragment-loader\n\n      var loaderConfig = {\n        timeout: config.fragLoadingTimeOut,\n        maxRetry: 0,\n        retryDelay: config.fragLoadingRetryDelay,\n        maxRetryDelay: config.fragLoadingMaxRetryTimeout\n      };\n      var loaderCallbacks = {\n        onSuccess: this.loadsuccess.bind(this),\n        onError: this.loaderror.bind(this),\n        onTimeout: this.loadtimeout.bind(this)\n      };\n      frag.loader.load(loaderContext, loaderConfig, loaderCallbacks);\n    } else if (this.decryptkey) {\n      // Return the key if it's already been loaded\n      frag.decryptdata.key = this.decryptkey;\n      this.hls.trigger(events[\"default\"].KEY_LOADED, {\n        frag: frag\n      });\n    }\n  };\n\n  _proto.loadsuccess = function loadsuccess(response, stats, context) {\n    var frag = context.frag;\n\n    if (!frag.decryptdata) {\n      logger[\"logger\"].error('after key load, decryptdata unset');\n      return;\n    }\n\n    this.decryptkey = frag.decryptdata.key = new Uint8Array(response.data); // detach fragment loader on load success\n\n    frag.loader = undefined;\n    delete this.loaders[frag.type];\n    this.hls.trigger(events[\"default\"].KEY_LOADED, {\n      frag: frag\n    });\n  };\n\n  _proto.loaderror = function loaderror(response, context) {\n    var frag = context.frag;\n    var loader = frag.loader;\n\n    if (loader) {\n      loader.abort();\n    }\n\n    delete this.loaders[frag.type];\n    this.hls.trigger(events[\"default\"].ERROR, {\n      type: errors[\"ErrorTypes\"].NETWORK_ERROR,\n      details: errors[\"ErrorDetails\"].KEY_LOAD_ERROR,\n      fatal: false,\n      frag: frag,\n      response: response\n    });\n  };\n\n  _proto.loadtimeout = function loadtimeout(stats, context) {\n    var frag = context.frag;\n    var loader = frag.loader;\n\n    if (loader) {\n      loader.abort();\n    }\n\n    delete this.loaders[frag.type];\n    this.hls.trigger(events[\"default\"].ERROR, {\n      type: errors[\"ErrorTypes\"].NETWORK_ERROR,\n      details: errors[\"ErrorDetails\"].KEY_LOAD_TIMEOUT,\n      fatal: false,\n      frag: frag\n    });\n  };\n\n  return KeyLoader;\n}(event_handler);\n\n/* harmony default export */ var key_loader = (key_loader_KeyLoader);\n// CONCATENATED MODULE: ./src/controller/fragment-tracker.js\n\n\nfunction fragment_tracker_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n\n\nvar FragmentState = {\n  NOT_LOADED: 'NOT_LOADED',\n  APPENDING: 'APPENDING',\n  PARTIAL: 'PARTIAL',\n  OK: 'OK'\n};\nvar fragment_tracker_FragmentTracker = /*#__PURE__*/function (_EventHandler) {\n  fragment_tracker_inheritsLoose(FragmentTracker, _EventHandler);\n\n  function FragmentTracker(hls) {\n    var _this;\n\n    _this = _EventHandler.call(this, hls, events[\"default\"].BUFFER_APPENDED, events[\"default\"].FRAG_BUFFERED, events[\"default\"].FRAG_LOADED) || this;\n    _this.bufferPadding = 0.2;\n    _this.fragments = Object.create(null);\n    _this.timeRanges = Object.create(null);\n    _this.config = hls.config;\n    return _this;\n  }\n\n  var _proto = FragmentTracker.prototype;\n\n  _proto.destroy = function destroy() {\n    this.fragments = Object.create(null);\n    this.timeRanges = Object.create(null);\n    this.config = null;\n    event_handler.prototype.destroy.call(this);\n\n    _EventHandler.prototype.destroy.call(this);\n  }\n  /**\n   * Return a Fragment that match the position and levelType.\n   * If not found any Fragment, return null\n   * @param {number} position\n   * @param {LevelType} levelType\n   * @returns {Fragment|null}\n   */\n  ;\n\n  _proto.getBufferedFrag = function getBufferedFrag(position, levelType) {\n    var fragments = this.fragments;\n    var bufferedFrags = Object.keys(fragments).filter(function (key) {\n      var fragmentEntity = fragments[key];\n\n      if (fragmentEntity.body.type !== levelType) {\n        return false;\n      }\n\n      if (!fragmentEntity.buffered) {\n        return false;\n      }\n\n      var frag = fragmentEntity.body;\n      return frag.startPTS <= position && position <= frag.endPTS;\n    });\n\n    if (bufferedFrags.length === 0) {\n      return null;\n    } else {\n      // https://github.com/video-dev/hls.js/pull/1545#discussion_r166229566\n      var bufferedFragKey = bufferedFrags.pop();\n      return fragments[bufferedFragKey].body;\n    }\n  }\n  /**\n   * Partial fragments effected by coded frame eviction will be removed\n   * The browser will unload parts of the buffer to free up memory for new buffer data\n   * Fragments will need to be reloaded when the buffer is freed up, removing partial fragments will allow them to reload(since there might be parts that are still playable)\n   * @param {String} elementaryStream The elementaryStream of media this is (eg. video/audio)\n   * @param {TimeRanges} timeRange TimeRange object from a sourceBuffer\n   */\n  ;\n\n  _proto.detectEvictedFragments = function detectEvictedFragments(elementaryStream, timeRange) {\n    var _this2 = this;\n\n    // Check if any flagged fragments have been unloaded\n    Object.keys(this.fragments).forEach(function (key) {\n      var fragmentEntity = _this2.fragments[key];\n\n      if (!fragmentEntity || !fragmentEntity.buffered) {\n        return;\n      }\n\n      var esData = fragmentEntity.range[elementaryStream];\n\n      if (!esData) {\n        return;\n      }\n\n      var fragmentTimes = esData.time;\n\n      for (var i = 0; i < fragmentTimes.length; i++) {\n        var time = fragmentTimes[i];\n\n        if (!_this2.isTimeBuffered(time.startPTS, time.endPTS, timeRange)) {\n          // Unregister partial fragment as it needs to load again to be reused\n          _this2.removeFragment(fragmentEntity.body);\n\n          break;\n        }\n      }\n    });\n  }\n  /**\n   * Checks if the fragment passed in is loaded in the buffer properly\n   * Partially loaded fragments will be registered as a partial fragment\n   * @param {Object} fragment Check the fragment against all sourceBuffers loaded\n   */\n  ;\n\n  _proto.detectPartialFragments = function detectPartialFragments(fragment) {\n    var _this3 = this;\n\n    var fragKey = this.getFragmentKey(fragment);\n    var fragmentEntity = this.fragments[fragKey];\n\n    if (fragmentEntity) {\n      fragmentEntity.buffered = true;\n      Object.keys(this.timeRanges).forEach(function (elementaryStream) {\n        if (fragment.hasElementaryStream(elementaryStream)) {\n          var timeRange = _this3.timeRanges[elementaryStream]; // Check for malformed fragments\n          // Gaps need to be calculated for each elementaryStream\n\n          fragmentEntity.range[elementaryStream] = _this3.getBufferedTimes(fragment.startPTS, fragment.endPTS, timeRange);\n        }\n      });\n    }\n  };\n\n  _proto.getBufferedTimes = function getBufferedTimes(startPTS, endPTS, timeRange) {\n    var fragmentTimes = [];\n    var startTime, endTime;\n    var fragmentPartial = false;\n\n    for (var i = 0; i < timeRange.length; i++) {\n      startTime = timeRange.start(i) - this.bufferPadding;\n      endTime = timeRange.end(i) + this.bufferPadding;\n\n      if (startPTS >= startTime && endPTS <= endTime) {\n        // Fragment is entirely contained in buffer\n        // No need to check the other timeRange times since it's completely playable\n        fragmentTimes.push({\n          startPTS: Math.max(startPTS, timeRange.start(i)),\n          endPTS: Math.min(endPTS, timeRange.end(i))\n        });\n        break;\n      } else if (startPTS < endTime && endPTS > startTime) {\n        // Check for intersection with buffer\n        // Get playable sections of the fragment\n        fragmentTimes.push({\n          startPTS: Math.max(startPTS, timeRange.start(i)),\n          endPTS: Math.min(endPTS, timeRange.end(i))\n        });\n        fragmentPartial = true;\n      } else if (endPTS <= startTime) {\n        // No need to check the rest of the timeRange as it is in order\n        break;\n      }\n    }\n\n    return {\n      time: fragmentTimes,\n      partial: fragmentPartial\n    };\n  };\n\n  _proto.getFragmentKey = function getFragmentKey(fragment) {\n    return fragment.type + \"_\" + fragment.level + \"_\" + fragment.urlId + \"_\" + fragment.sn;\n  }\n  /**\n   * Gets the partial fragment for a certain time\n   * @param {Number} time\n   * @returns {Object} fragment Returns a partial fragment at a time or null if there is no partial fragment\n   */\n  ;\n\n  _proto.getPartialFragment = function getPartialFragment(time) {\n    var _this4 = this;\n\n    var timePadding, startTime, endTime;\n    var bestFragment = null;\n    var bestOverlap = 0;\n    Object.keys(this.fragments).forEach(function (key) {\n      var fragmentEntity = _this4.fragments[key];\n\n      if (_this4.isPartial(fragmentEntity)) {\n        startTime = fragmentEntity.body.startPTS - _this4.bufferPadding;\n        endTime = fragmentEntity.body.endPTS + _this4.bufferPadding;\n\n        if (time >= startTime && time <= endTime) {\n          // Use the fragment that has the most padding from start and end time\n          timePadding = Math.min(time - startTime, endTime - time);\n\n          if (bestOverlap <= timePadding) {\n            bestFragment = fragmentEntity.body;\n            bestOverlap = timePadding;\n          }\n        }\n      }\n    });\n    return bestFragment;\n  }\n  /**\n   * @param {Object} fragment The fragment to check\n   * @returns {String} Returns the fragment state when a fragment never loaded or if it partially loaded\n   */\n  ;\n\n  _proto.getState = function getState(fragment) {\n    var fragKey = this.getFragmentKey(fragment);\n    var fragmentEntity = this.fragments[fragKey];\n    var state = FragmentState.NOT_LOADED;\n\n    if (fragmentEntity !== undefined) {\n      if (!fragmentEntity.buffered) {\n        state = FragmentState.APPENDING;\n      } else if (this.isPartial(fragmentEntity) === true) {\n        state = FragmentState.PARTIAL;\n      } else {\n        state = FragmentState.OK;\n      }\n    }\n\n    return state;\n  };\n\n  _proto.isPartial = function isPartial(fragmentEntity) {\n    return fragmentEntity.buffered === true && (fragmentEntity.range.video !== undefined && fragmentEntity.range.video.partial === true || fragmentEntity.range.audio !== undefined && fragmentEntity.range.audio.partial === true);\n  };\n\n  _proto.isTimeBuffered = function isTimeBuffered(startPTS, endPTS, timeRange) {\n    var startTime, endTime;\n\n    for (var i = 0; i < timeRange.length; i++) {\n      startTime = timeRange.start(i) - this.bufferPadding;\n      endTime = timeRange.end(i) + this.bufferPadding;\n\n      if (startPTS >= startTime && endPTS <= endTime) {\n        return true;\n      }\n\n      if (endPTS <= startTime) {\n        // No need to check the rest of the timeRange as it is in order\n        return false;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Fires when a fragment loading is completed\n   */\n  ;\n\n  _proto.onFragLoaded = function onFragLoaded(e) {\n    var fragment = e.frag; // don't track initsegment (for which sn is not a number)\n    // don't track frags used for bitrateTest, they're irrelevant.\n\n    if (!Object(number[\"isFiniteNumber\"])(fragment.sn) || fragment.bitrateTest) {\n      return;\n    }\n\n    this.fragments[this.getFragmentKey(fragment)] = {\n      body: fragment,\n      range: Object.create(null),\n      buffered: false\n    };\n  }\n  /**\n   * Fires when the buffer is updated\n   */\n  ;\n\n  _proto.onBufferAppended = function onBufferAppended(e) {\n    var _this5 = this;\n\n    // Store the latest timeRanges loaded in the buffer\n    this.timeRanges = e.timeRanges;\n    Object.keys(this.timeRanges).forEach(function (elementaryStream) {\n      var timeRange = _this5.timeRanges[elementaryStream];\n\n      _this5.detectEvictedFragments(elementaryStream, timeRange);\n    });\n  }\n  /**\n   * Fires after a fragment has been loaded into the source buffer\n   */\n  ;\n\n  _proto.onFragBuffered = function onFragBuffered(e) {\n    this.detectPartialFragments(e.frag);\n  }\n  /**\n   * Return true if fragment tracker has the fragment.\n   * @param {Object} fragment\n   * @returns {boolean}\n   */\n  ;\n\n  _proto.hasFragment = function hasFragment(fragment) {\n    var fragKey = this.getFragmentKey(fragment);\n    return this.fragments[fragKey] !== undefined;\n  }\n  /**\n   * Remove a fragment from fragment tracker until it is loaded again\n   * @param {Object} fragment The fragment to remove\n   */\n  ;\n\n  _proto.removeFragment = function removeFragment(fragment) {\n    var fragKey = this.getFragmentKey(fragment);\n    delete this.fragments[fragKey];\n  }\n  /**\n   * Remove all fragments from fragment tracker.\n   */\n  ;\n\n  _proto.removeAllFragments = function removeAllFragments() {\n    this.fragments = Object.create(null);\n  };\n\n  return FragmentTracker;\n}(event_handler);\n// CONCATENATED MODULE: ./src/utils/binary-search.ts\nvar BinarySearch = {\n  /**\n   * Searches for an item in an array which matches a certain condition.\n   * This requires the condition to only match one item in the array,\n   * and for the array to be ordered.\n   *\n   * @param {Array<T>} list The array to search.\n   * @param {BinarySearchComparison<T>} comparisonFn\n   *      Called and provided a candidate item as the first argument.\n   *      Should return:\n   *          > -1 if the item should be located at a lower index than the provided item.\n   *          > 1 if the item should be located at a higher index than the provided item.\n   *          > 0 if the item is the item you're looking for.\n   *\n   * @return {T | null} The object if it is found or null otherwise.\n   */\n  search: function search(list, comparisonFn) {\n    var minIndex = 0;\n    var maxIndex = list.length - 1;\n    var currentIndex = null;\n    var currentElement = null;\n\n    while (minIndex <= maxIndex) {\n      currentIndex = (minIndex + maxIndex) / 2 | 0;\n      currentElement = list[currentIndex];\n      var comparisonResult = comparisonFn(currentElement);\n\n      if (comparisonResult > 0) {\n        minIndex = currentIndex + 1;\n      } else if (comparisonResult < 0) {\n        maxIndex = currentIndex - 1;\n      } else {\n        return currentElement;\n      }\n    }\n\n    return null;\n  }\n};\n/* harmony default export */ var binary_search = (BinarySearch);\n// CONCATENATED MODULE: ./src/utils/buffer-helper.ts\n/**\n * @module BufferHelper\n *\n * Providing methods dealing with buffer length retrieval for example.\n *\n * In general, a helper around HTML5 MediaElement TimeRanges gathered from `buffered` property.\n *\n * Also @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/buffered\n*/\nvar BufferHelper = /*#__PURE__*/function () {\n  function BufferHelper() {}\n\n  /**\n   * Return true if `media`'s buffered include `position`\n   * @param {Bufferable} media\n   * @param {number} position\n   * @returns {boolean}\n   */\n  BufferHelper.isBuffered = function isBuffered(media, position) {\n    try {\n      if (media) {\n        var buffered = media.buffered;\n\n        for (var i = 0; i < buffered.length; i++) {\n          if (position >= buffered.start(i) && position <= buffered.end(i)) {\n            return true;\n          }\n        }\n      }\n    } catch (error) {// this is to catch\n      // InvalidStateError: Failed to read the 'buffered' property from 'SourceBuffer':\n      // This SourceBuffer has been removed from the parent media source\n    }\n\n    return false;\n  };\n\n  BufferHelper.bufferInfo = function bufferInfo(media, pos, maxHoleDuration) {\n    try {\n      if (media) {\n        var vbuffered = media.buffered;\n        var buffered = [];\n        var i;\n\n        for (i = 0; i < vbuffered.length; i++) {\n          buffered.push({\n            start: vbuffered.start(i),\n            end: vbuffered.end(i)\n          });\n        }\n\n        return this.bufferedInfo(buffered, pos, maxHoleDuration);\n      }\n    } catch (error) {// this is to catch\n      // InvalidStateError: Failed to read the 'buffered' property from 'SourceBuffer':\n      // This SourceBuffer has been removed from the parent media source\n    }\n\n    return {\n      len: 0,\n      start: pos,\n      end: pos,\n      nextStart: undefined\n    };\n  };\n\n  BufferHelper.bufferedInfo = function bufferedInfo(buffered, pos, maxHoleDuration) {\n    // sort on buffer.start/smaller end (IE does not always return sorted buffered range)\n    buffered.sort(function (a, b) {\n      var diff = a.start - b.start;\n\n      if (diff) {\n        return diff;\n      } else {\n        return b.end - a.end;\n      }\n    });\n    var buffered2 = [];\n\n    if (maxHoleDuration) {\n      // there might be some small holes between buffer time range\n      // consider that holes smaller than maxHoleDuration are irrelevant and build another\n      // buffer time range representations that discards those holes\n      for (var i = 0; i < buffered.length; i++) {\n        var buf2len = buffered2.length;\n\n        if (buf2len) {\n          var buf2end = buffered2[buf2len - 1].end; // if small hole (value between 0 or maxHoleDuration ) or overlapping (negative)\n\n          if (buffered[i].start - buf2end < maxHoleDuration) {\n            // merge overlapping time ranges\n            // update lastRange.end only if smaller than item.end\n            // e.g.  [ 1, 15] with  [ 2,8] => [ 1,15] (no need to modify lastRange.end)\n            // whereas [ 1, 8] with  [ 2,15] => [ 1,15] ( lastRange should switch from [1,8] to [1,15])\n            if (buffered[i].end > buf2end) {\n              buffered2[buf2len - 1].end = buffered[i].end;\n            }\n          } else {\n            // big hole\n            buffered2.push(buffered[i]);\n          }\n        } else {\n          // first value\n          buffered2.push(buffered[i]);\n        }\n      }\n    } else {\n      buffered2 = buffered;\n    }\n\n    var bufferLen = 0; // bufferStartNext can possibly be undefined based on the conditional logic below\n\n    var bufferStartNext; // bufferStart and bufferEnd are buffer boundaries around current video position\n\n    var bufferStart = pos;\n    var bufferEnd = pos;\n\n    for (var _i = 0; _i < buffered2.length; _i++) {\n      var start = buffered2[_i].start,\n          end = buffered2[_i].end; // logger.log('buf start/end:' + buffered.start(i) + '/' + buffered.end(i));\n\n      if (pos + maxHoleDuration >= start && pos < end) {\n        // play position is inside this buffer TimeRange, retrieve end of buffer position and buffer length\n        bufferStart = start;\n        bufferEnd = end;\n        bufferLen = bufferEnd - pos;\n      } else if (pos + maxHoleDuration < start) {\n        bufferStartNext = start;\n        break;\n      }\n    }\n\n    return {\n      len: bufferLen,\n      start: bufferStart,\n      end: bufferEnd,\n      nextStart: bufferStartNext\n    };\n  };\n\n  return BufferHelper;\n}();\n// EXTERNAL MODULE: ./node_modules/eventemitter3/index.js\nvar eventemitter3 = __nested_webpack_require_226214__(\"./node_modules/eventemitter3/index.js\");\n\n// EXTERNAL MODULE: ./node_modules/webworkify-webpack/index.js\nvar webworkify_webpack = __nested_webpack_require_226214__(\"./node_modules/webworkify-webpack/index.js\");\n\n// EXTERNAL MODULE: ./src/demux/demuxer-inline.js + 12 modules\nvar demuxer_inline = __nested_webpack_require_226214__(\"./src/demux/demuxer-inline.js\");\n\n// CONCATENATED MODULE: ./src/utils/mediasource-helper.ts\n/**\n * MediaSource helper\n */\nfunction getMediaSource() {\n  return window.MediaSource || window.WebKitMediaSource;\n}\n// EXTERNAL MODULE: ./src/utils/get-self-scope.js\nvar get_self_scope = __nested_webpack_require_226214__(\"./src/utils/get-self-scope.js\");\n\n// CONCATENATED MODULE: ./src/observer.ts\nfunction observer_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n\n/**\n * Simple adapter sub-class of Nodejs-like EventEmitter.\n */\n\nvar Observer = /*#__PURE__*/function (_EventEmitter) {\n  observer_inheritsLoose(Observer, _EventEmitter);\n\n  function Observer() {\n    return _EventEmitter.apply(this, arguments) || this;\n  }\n\n  var _proto = Observer.prototype;\n\n  /**\n   * We simply want to pass along the event-name itself\n   * in every call to a handler, which is the purpose of our `trigger` method\n   * extending the standard API.\n   */\n  _proto.trigger = function trigger(event) {\n    for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      data[_key - 1] = arguments[_key];\n    }\n\n    this.emit.apply(this, [event, event].concat(data));\n  };\n\n  return Observer;\n}(eventemitter3[\"EventEmitter\"]);\n// CONCATENATED MODULE: ./src/demux/demuxer.js\n\n\n\n\n\n\n\n\n\n // see https://stackoverflow.com/a/11237259/589493\n\nvar global = Object(get_self_scope[\"getSelfScope\"])(); // safeguard for code that might run both on worker and main thread\n\nvar demuxer_MediaSource = getMediaSource() || {\n  isTypeSupported: function isTypeSupported() {\n    return false;\n  }\n};\n\nvar demuxer_Demuxer = /*#__PURE__*/function () {\n  function Demuxer(hls, id) {\n    var _this = this;\n\n    this.hls = hls;\n    this.id = id;\n    var observer = this.observer = new Observer();\n    var config = hls.config;\n\n    var forwardMessage = function forwardMessage(ev, data) {\n      data = data || {};\n      data.frag = _this.frag;\n      data.id = _this.id;\n      hls.trigger(ev, data);\n    }; // forward events to main thread\n\n\n    observer.on(events[\"default\"].FRAG_DECRYPTED, forwardMessage);\n    observer.on(events[\"default\"].FRAG_PARSING_INIT_SEGMENT, forwardMessage);\n    observer.on(events[\"default\"].FRAG_PARSING_DATA, forwardMessage);\n    observer.on(events[\"default\"].FRAG_PARSED, forwardMessage);\n    observer.on(events[\"default\"].ERROR, forwardMessage);\n    observer.on(events[\"default\"].FRAG_PARSING_METADATA, forwardMessage);\n    observer.on(events[\"default\"].FRAG_PARSING_USERDATA, forwardMessage);\n    observer.on(events[\"default\"].INIT_PTS_FOUND, forwardMessage);\n    var typeSupported = {\n      mp4: demuxer_MediaSource.isTypeSupported('video/mp4'),\n      mpeg: demuxer_MediaSource.isTypeSupported('audio/mpeg'),\n      mp3: demuxer_MediaSource.isTypeSupported('audio/mp4; codecs=\"mp3\"')\n    }; // navigator.vendor is not always available in Web Worker\n    // refer to https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/navigator\n\n    var vendor = navigator.vendor;\n\n    if (config.enableWorker && typeof Worker !== 'undefined') {\n      logger[\"logger\"].log('demuxing in webworker');\n      var w;\n\n      try {\n        w = this.w = webworkify_webpack(/*require.resolve*/(/*! ../demux/demuxer-worker.js */ \"./src/demux/demuxer-worker.js\"));\n        this.onwmsg = this.onWorkerMessage.bind(this);\n        w.addEventListener('message', this.onwmsg);\n\n        w.onerror = function (event) {\n          hls.trigger(events[\"default\"].ERROR, {\n            type: errors[\"ErrorTypes\"].OTHER_ERROR,\n            details: errors[\"ErrorDetails\"].INTERNAL_EXCEPTION,\n            fatal: true,\n            event: 'demuxerWorker',\n            err: {\n              message: event.message + ' (' + event.filename + ':' + event.lineno + ')'\n            }\n          });\n        };\n\n        w.postMessage({\n          cmd: 'init',\n          typeSupported: typeSupported,\n          vendor: vendor,\n          id: id,\n          config: JSON.stringify(config)\n        });\n      } catch (err) {\n        logger[\"logger\"].warn('Error in worker:', err);\n        logger[\"logger\"].error('Error while initializing DemuxerWorker, fallback on DemuxerInline');\n\n        if (w) {\n          // revoke the Object URL that was used to create demuxer worker, so as not to leak it\n          global.URL.revokeObjectURL(w.objectURL);\n        }\n\n        this.demuxer = new demuxer_inline[\"default\"](observer, typeSupported, config, vendor);\n        this.w = undefined;\n      }\n    } else {\n      this.demuxer = new demuxer_inline[\"default\"](observer, typeSupported, config, vendor);\n    }\n  }\n\n  var _proto = Demuxer.prototype;\n\n  _proto.destroy = function destroy() {\n    var w = this.w;\n\n    if (w) {\n      w.removeEventListener('message', this.onwmsg);\n      w.terminate();\n      this.w = null;\n    } else {\n      var demuxer = this.demuxer;\n\n      if (demuxer) {\n        demuxer.destroy();\n        this.demuxer = null;\n      }\n    }\n\n    var observer = this.observer;\n\n    if (observer) {\n      observer.removeAllListeners();\n      this.observer = null;\n    }\n  };\n\n  _proto.push = function push(data, initSegment, audioCodec, videoCodec, frag, duration, accurateTimeOffset, defaultInitPTS) {\n    var w = this.w;\n    var timeOffset = Object(number[\"isFiniteNumber\"])(frag.startPTS) ? frag.startPTS : frag.start;\n    var decryptdata = frag.decryptdata;\n    var lastFrag = this.frag;\n    var discontinuity = !(lastFrag && frag.cc === lastFrag.cc);\n    var trackSwitch = !(lastFrag && frag.level === lastFrag.level);\n    var nextSN = lastFrag && frag.sn === lastFrag.sn + 1;\n    var contiguous = !trackSwitch && nextSN;\n\n    if (discontinuity) {\n      logger[\"logger\"].log(this.id + \":discontinuity detected\");\n    }\n\n    if (trackSwitch) {\n      logger[\"logger\"].log(this.id + \":switch detected\");\n    }\n\n    this.frag = frag;\n\n    if (w) {\n      // post fragment payload as transferable objects for ArrayBuffer (no copy)\n      w.postMessage({\n        cmd: 'demux',\n        data: data,\n        decryptdata: decryptdata,\n        initSegment: initSegment,\n        audioCodec: audioCodec,\n        videoCodec: videoCodec,\n        timeOffset: timeOffset,\n        discontinuity: discontinuity,\n        trackSwitch: trackSwitch,\n        contiguous: contiguous,\n        duration: duration,\n        accurateTimeOffset: accurateTimeOffset,\n        defaultInitPTS: defaultInitPTS\n      }, data instanceof ArrayBuffer ? [data] : []);\n    } else {\n      var demuxer = this.demuxer;\n\n      if (demuxer) {\n        demuxer.push(data, decryptdata, initSegment, audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS);\n      }\n    }\n  };\n\n  _proto.onWorkerMessage = function onWorkerMessage(ev) {\n    var data = ev.data,\n        hls = this.hls;\n\n    switch (data.event) {\n      case 'init':\n        // revoke the Object URL that was used to create demuxer worker, so as not to leak it\n        global.URL.revokeObjectURL(this.w.objectURL);\n        break;\n      // special case for FRAG_PARSING_DATA: data1 and data2 are transferable objects\n\n      case events[\"default\"].FRAG_PARSING_DATA:\n        data.data.data1 = new Uint8Array(data.data1);\n\n        if (data.data2) {\n          data.data.data2 = new Uint8Array(data.data2);\n        }\n\n      /* falls through */\n\n      default:\n        data.data = data.data || {};\n        data.data.frag = this.frag;\n        data.data.id = this.id;\n        hls.trigger(data.event, data.data);\n        break;\n    }\n  };\n\n  return Demuxer;\n}();\n\n/* harmony default export */ var demux_demuxer = (demuxer_Demuxer);\n// CONCATENATED MODULE: ./src/controller/level-helper.js\n\n\n\n\n\n/**\n * @module LevelHelper\n *\n * Providing methods dealing with playlist sliding and drift\n *\n * TODO: Create an actual `Level` class/model that deals with all this logic in an object-oriented-manner.\n *\n * */\n\nfunction addGroupId(level, type, id) {\n  switch (type) {\n    case 'audio':\n      if (!level.audioGroupIds) {\n        level.audioGroupIds = [];\n      }\n\n      level.audioGroupIds.push(id);\n      break;\n\n    case 'text':\n      if (!level.textGroupIds) {\n        level.textGroupIds = [];\n      }\n\n      level.textGroupIds.push(id);\n      break;\n  }\n}\nfunction updatePTS(fragments, fromIdx, toIdx) {\n  var fragFrom = fragments[fromIdx],\n      fragTo = fragments[toIdx],\n      fragToPTS = fragTo.startPTS; // if we know startPTS[toIdx]\n\n  if (Object(number[\"isFiniteNumber\"])(fragToPTS)) {\n    // update fragment duration.\n    // it helps to fix drifts between playlist reported duration and fragment real duration\n    if (toIdx > fromIdx) {\n      fragFrom.duration = fragToPTS - fragFrom.start;\n\n      if (fragFrom.duration < 0) {\n        logger[\"logger\"].warn(\"negative duration computed for frag \" + fragFrom.sn + \",level \" + fragFrom.level + \", there should be some duration drift between playlist and fragment!\");\n      }\n    } else {\n      fragTo.duration = fragFrom.start - fragToPTS;\n\n      if (fragTo.duration < 0) {\n        logger[\"logger\"].warn(\"negative duration computed for frag \" + fragTo.sn + \",level \" + fragTo.level + \", there should be some duration drift between playlist and fragment!\");\n      }\n    }\n  } else {\n    // we dont know startPTS[toIdx]\n    if (toIdx > fromIdx) {\n      var contiguous = fragFrom.cc === fragTo.cc;\n      fragTo.start = fragFrom.start + (contiguous && fragFrom.minEndPTS ? fragFrom.minEndPTS - fragFrom.start : fragFrom.duration);\n    } else {\n      fragTo.start = Math.max(fragFrom.start - fragTo.duration, 0);\n    }\n  }\n}\nfunction updateFragPTSDTS(details, frag, startPTS, endPTS, startDTS, endDTS) {\n  // update frag PTS/DTS\n  var maxStartPTS = startPTS;\n  var minEndPTS = endPTS;\n\n  if (Object(number[\"isFiniteNumber\"])(frag.startPTS)) {\n    // delta PTS between audio and video\n    var deltaPTS = Math.abs(frag.startPTS - startPTS);\n\n    if (!Object(number[\"isFiniteNumber\"])(frag.deltaPTS)) {\n      frag.deltaPTS = deltaPTS;\n    } else {\n      frag.deltaPTS = Math.max(deltaPTS, frag.deltaPTS);\n    }\n\n    maxStartPTS = Math.max(startPTS, frag.startPTS);\n    startPTS = Math.min(startPTS, frag.startPTS);\n    minEndPTS = Math.min(endPTS, frag.endPTS);\n    endPTS = Math.max(endPTS, frag.endPTS);\n    startDTS = Math.min(startDTS, frag.startDTS);\n    endDTS = Math.max(endDTS, frag.endDTS);\n  }\n\n  var drift = startPTS - frag.start;\n  frag.start = frag.startPTS = startPTS;\n  frag.maxStartPTS = maxStartPTS;\n  frag.endPTS = endPTS;\n  frag.minEndPTS = minEndPTS;\n  frag.startDTS = startDTS;\n  frag.endDTS = endDTS;\n  frag.duration = endPTS - startPTS;\n  var sn = frag.sn; // exit if sn out of range\n\n  if (!details || sn < details.startSN || sn > details.endSN) {\n    return 0;\n  }\n\n  var fragIdx, fragments, i;\n  fragIdx = sn - details.startSN;\n  fragments = details.fragments; // update frag reference in fragments array\n  // rationale is that fragments array might not contain this frag object.\n  // this will happen if playlist has been refreshed between frag loading and call to updateFragPTSDTS()\n  // if we don't update frag, we won't be able to propagate PTS info on the playlist\n  // resulting in invalid sliding computation\n\n  fragments[fragIdx] = frag; // adjust fragment PTS/duration from seqnum-1 to frag 0\n\n  for (i = fragIdx; i > 0; i--) {\n    updatePTS(fragments, i, i - 1);\n  } // adjust fragment PTS/duration from seqnum to last frag\n\n\n  for (i = fragIdx; i < fragments.length - 1; i++) {\n    updatePTS(fragments, i, i + 1);\n  }\n\n  details.PTSKnown = true;\n  return drift;\n}\nfunction mergeDetails(oldDetails, newDetails) {\n  // potentially retrieve cached initsegment\n  if (newDetails.initSegment && oldDetails.initSegment) {\n    newDetails.initSegment = oldDetails.initSegment;\n  } // check if old/new playlists have fragments in common\n  // loop through overlapping SN and update startPTS , cc, and duration if any found\n\n\n  var ccOffset = 0;\n  var PTSFrag;\n  mapFragmentIntersection(oldDetails, newDetails, function (oldFrag, newFrag) {\n    ccOffset = oldFrag.cc - newFrag.cc;\n\n    if (Object(number[\"isFiniteNumber\"])(oldFrag.startPTS)) {\n      newFrag.start = newFrag.startPTS = oldFrag.startPTS;\n      newFrag.endPTS = oldFrag.endPTS;\n      newFrag.duration = oldFrag.duration;\n      newFrag.backtracked = oldFrag.backtracked;\n      newFrag.dropped = oldFrag.dropped;\n      PTSFrag = newFrag;\n    } // PTS is known when there are overlapping segments\n\n\n    newDetails.PTSKnown = true;\n  });\n\n  if (!newDetails.PTSKnown) {\n    return;\n  }\n\n  if (ccOffset) {\n    logger[\"logger\"].log('discontinuity sliding from playlist, take drift into account');\n    var newFragments = newDetails.fragments;\n\n    for (var i = 0; i < newFragments.length; i++) {\n      newFragments[i].cc += ccOffset;\n    }\n  } // if at least one fragment contains PTS info, recompute PTS information for all fragments\n\n\n  if (PTSFrag) {\n    updateFragPTSDTS(newDetails, PTSFrag, PTSFrag.startPTS, PTSFrag.endPTS, PTSFrag.startDTS, PTSFrag.endDTS);\n  } else {\n    // ensure that delta is within oldFragments range\n    // also adjust sliding in case delta is 0 (we could have old=[50-60] and new=old=[50-61])\n    // in that case we also need to adjust start offset of all fragments\n    adjustSliding(oldDetails, newDetails);\n  } // if we are here, it means we have fragments overlapping between\n  // old and new level. reliable PTS info is thus relying on old level\n\n\n  newDetails.PTSKnown = oldDetails.PTSKnown;\n}\nfunction mergeSubtitlePlaylists(oldPlaylist, newPlaylist, referenceStart) {\n  if (referenceStart === void 0) {\n    referenceStart = 0;\n  }\n\n  var lastIndex = -1;\n  mapFragmentIntersection(oldPlaylist, newPlaylist, function (oldFrag, newFrag, index) {\n    newFrag.start = oldFrag.start;\n    lastIndex = index;\n  });\n  var frags = newPlaylist.fragments;\n\n  if (lastIndex < 0) {\n    frags.forEach(function (frag) {\n      frag.start += referenceStart;\n    });\n    return;\n  }\n\n  for (var i = lastIndex + 1; i < frags.length; i++) {\n    frags[i].start = frags[i - 1].start + frags[i - 1].duration;\n  }\n}\nfunction mapFragmentIntersection(oldPlaylist, newPlaylist, intersectionFn) {\n  if (!oldPlaylist || !newPlaylist) {\n    return;\n  }\n\n  var start = Math.max(oldPlaylist.startSN, newPlaylist.startSN) - newPlaylist.startSN;\n  var end = Math.min(oldPlaylist.endSN, newPlaylist.endSN) - newPlaylist.startSN;\n  var delta = newPlaylist.startSN - oldPlaylist.startSN;\n\n  for (var i = start; i <= end; i++) {\n    var oldFrag = oldPlaylist.fragments[delta + i];\n    var newFrag = newPlaylist.fragments[i];\n\n    if (!oldFrag || !newFrag) {\n      break;\n    }\n\n    intersectionFn(oldFrag, newFrag, i);\n  }\n}\nfunction adjustSliding(oldPlaylist, newPlaylist) {\n  var delta = newPlaylist.startSN - oldPlaylist.startSN;\n  var oldFragments = oldPlaylist.fragments;\n  var newFragments = newPlaylist.fragments;\n\n  if (delta < 0 || delta > oldFragments.length) {\n    return;\n  }\n\n  for (var i = 0; i < newFragments.length; i++) {\n    newFragments[i].start += oldFragments[delta].start;\n  }\n}\nfunction computeReloadInterval(currentPlaylist, newPlaylist, lastRequestTime) {\n  var reloadInterval = 1000 * (newPlaylist.averagetargetduration ? newPlaylist.averagetargetduration : newPlaylist.targetduration);\n  var minReloadInterval = reloadInterval / 2;\n\n  if (currentPlaylist && newPlaylist.endSN === currentPlaylist.endSN) {\n    // follow HLS Spec, If the client reloads a Playlist file and finds that it has not\n    // changed then it MUST wait for a period of one-half the target\n    // duration before retrying.\n    reloadInterval = minReloadInterval;\n  }\n\n  if (lastRequestTime) {\n    reloadInterval = Math.max(minReloadInterval, reloadInterval - (window.performance.now() - lastRequestTime));\n  } // in any case, don't reload more than half of target duration\n\n\n  return Math.round(reloadInterval);\n}\n// CONCATENATED MODULE: ./src/utils/time-ranges.ts\n/**\n *  TimeRanges to string helper\n */\nvar TimeRanges = {\n  toString: function toString(r) {\n    var log = '';\n    var len = r.length;\n\n    for (var i = 0; i < len; i++) {\n      log += '[' + r.start(i).toFixed(3) + ',' + r.end(i).toFixed(3) + ']';\n    }\n\n    return log;\n  }\n};\n/* harmony default export */ var time_ranges = (TimeRanges);\n// CONCATENATED MODULE: ./src/utils/discontinuities.js\n\n\n\nfunction findFirstFragWithCC(fragments, cc) {\n  var firstFrag = null;\n\n  for (var i = 0; i < fragments.length; i += 1) {\n    var currentFrag = fragments[i];\n\n    if (currentFrag && currentFrag.cc === cc) {\n      firstFrag = currentFrag;\n      break;\n    }\n  }\n\n  return firstFrag;\n}\nfunction findFragWithCC(fragments, CC) {\n  return binary_search.search(fragments, function (candidate) {\n    if (candidate.cc < CC) {\n      return 1;\n    } else if (candidate.cc > CC) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n}\nfunction shouldAlignOnDiscontinuities(lastFrag, lastLevel, details) {\n  var shouldAlign = false;\n\n  if (lastLevel && lastLevel.details && details) {\n    if (details.endCC > details.startCC || lastFrag && lastFrag.cc < details.startCC) {\n      shouldAlign = true;\n    }\n  }\n\n  return shouldAlign;\n} // Find the first frag in the previous level which matches the CC of the first frag of the new level\n\nfunction findDiscontinuousReferenceFrag(prevDetails, curDetails) {\n  var prevFrags = prevDetails.fragments;\n  var curFrags = curDetails.fragments;\n\n  if (!curFrags.length || !prevFrags.length) {\n    logger[\"logger\"].log('No fragments to align');\n    return;\n  }\n\n  var prevStartFrag = findFirstFragWithCC(prevFrags, curFrags[0].cc);\n\n  if (!prevStartFrag || prevStartFrag && !prevStartFrag.startPTS) {\n    logger[\"logger\"].log('No frag in previous level to align on');\n    return;\n  }\n\n  return prevStartFrag;\n}\nfunction adjustPts(sliding, details) {\n  details.fragments.forEach(function (frag) {\n    if (frag) {\n      var start = frag.start + sliding;\n      frag.start = frag.startPTS = start;\n      frag.endPTS = start + frag.duration;\n    }\n  });\n  details.PTSKnown = true;\n}\n/**\n * Using the parameters of the last level, this function computes PTS' of the new fragments so that they form a\n * contiguous stream with the last fragments.\n * The PTS of a fragment lets Hls.js know where it fits into a stream - by knowing every PTS, we know which fragment to\n * download at any given time. PTS is normally computed when the fragment is demuxed, so taking this step saves us time\n * and an extra download.\n * @param lastFrag\n * @param lastLevel\n * @param details\n */\n\nfunction alignStream(lastFrag, lastLevel, details) {\n  alignDiscontinuities(lastFrag, details, lastLevel);\n\n  if (!details.PTSKnown && lastLevel) {\n    // If the PTS wasn't figured out via discontinuity sequence that means there was no CC increase within the level.\n    // Aligning via Program Date Time should therefore be reliable, since PDT should be the same within the same\n    // discontinuity sequence.\n    alignPDT(details, lastLevel.details);\n  }\n}\n/**\n * Computes the PTS if a new level's fragments using the PTS of a fragment in the last level which shares the same\n * discontinuity sequence.\n * @param lastLevel - The details of the last loaded level\n * @param details - The details of the new level\n */\n\nfunction alignDiscontinuities(lastFrag, details, lastLevel) {\n  if (shouldAlignOnDiscontinuities(lastFrag, lastLevel, details)) {\n    var referenceFrag = findDiscontinuousReferenceFrag(lastLevel.details, details);\n\n    if (referenceFrag) {\n      logger[\"logger\"].log('Adjusting PTS using last level due to CC increase within current level');\n      adjustPts(referenceFrag.start, details);\n    }\n  }\n}\n/**\n * Computes the PTS of a new level's fragments using the difference in Program Date Time from the last level.\n * @param details - The details of the new level\n * @param lastDetails - The details of the last loaded level\n */\n\nfunction alignPDT(details, lastDetails) {\n  if (lastDetails && lastDetails.fragments.length) {\n    if (!details.hasProgramDateTime || !lastDetails.hasProgramDateTime) {\n      return;\n    } // if last level sliding is 1000 and its first frag PROGRAM-DATE-TIME is 2017-08-20 1:10:00 AM\n    // and if new details first frag PROGRAM DATE-TIME is 2017-08-20 1:10:08 AM\n    // then we can deduce that playlist B sliding is 1000+8 = 1008s\n\n\n    var lastPDT = lastDetails.fragments[0].programDateTime;\n    var newPDT = details.fragments[0].programDateTime; // date diff is in ms. frag.start is in seconds\n\n    var sliding = (newPDT - lastPDT) / 1000 + lastDetails.fragments[0].start;\n\n    if (Object(number[\"isFiniteNumber\"])(sliding)) {\n      logger[\"logger\"].log(\"adjusting PTS using programDateTime delta, sliding:\" + sliding.toFixed(3));\n      adjustPts(sliding, details);\n    }\n  }\n}\n// CONCATENATED MODULE: ./src/controller/fragment-finders.ts\n\n\n\n/**\n * Returns first fragment whose endPdt value exceeds the given PDT.\n * @param {Array<Fragment>} fragments - The array of candidate fragments\n * @param {number|null} [PDTValue = null] - The PDT value which must be exceeded\n * @param {number} [maxFragLookUpTolerance = 0] - The amount of time that a fragment's start/end can be within in order to be considered contiguous\n * @returns {*|null} fragment - The best matching fragment\n */\nfunction findFragmentByPDT(fragments, PDTValue, maxFragLookUpTolerance) {\n  if (PDTValue === null || !Array.isArray(fragments) || !fragments.length || !Object(number[\"isFiniteNumber\"])(PDTValue)) {\n    return null;\n  } // if less than start\n\n\n  var startPDT = fragments[0].programDateTime;\n\n  if (PDTValue < (startPDT || 0)) {\n    return null;\n  }\n\n  var endPDT = fragments[fragments.length - 1].endProgramDateTime;\n\n  if (PDTValue >= (endPDT || 0)) {\n    return null;\n  }\n\n  maxFragLookUpTolerance = maxFragLookUpTolerance || 0;\n\n  for (var seg = 0; seg < fragments.length; ++seg) {\n    var frag = fragments[seg];\n\n    if (pdtWithinToleranceTest(PDTValue, maxFragLookUpTolerance, frag)) {\n      return frag;\n    }\n  }\n\n  return null;\n}\n/**\n * Finds a fragment based on the SN of the previous fragment; or based on the needs of the current buffer.\n * This method compensates for small buffer gaps by applying a tolerance to the start of any candidate fragment, thus\n * breaking any traps which would cause the same fragment to be continuously selected within a small range.\n * @param {*} fragPrevious - The last frag successfully appended\n * @param {Array<Fragment>} fragments - The array of candidate fragments\n * @param {number} [bufferEnd = 0] - The end of the contiguous buffered range the playhead is currently within\n * @param {number} maxFragLookUpTolerance - The amount of time that a fragment's start/end can be within in order to be considered contiguous\n * @returns {*} foundFrag - The best matching fragment\n */\n\nfunction findFragmentByPTS(fragPrevious, fragments, bufferEnd, maxFragLookUpTolerance) {\n  if (bufferEnd === void 0) {\n    bufferEnd = 0;\n  }\n\n  if (maxFragLookUpTolerance === void 0) {\n    maxFragLookUpTolerance = 0;\n  }\n\n  var fragNext = null;\n\n  if (fragPrevious) {\n    fragNext = fragments[fragPrevious.sn - fragments[0].sn + 1];\n  } else if (bufferEnd === 0 && fragments[0].start === 0) {\n    fragNext = fragments[0];\n  } // Prefer the next fragment if it's within tolerance\n\n\n  if (fragNext && fragmentWithinToleranceTest(bufferEnd, maxFragLookUpTolerance, fragNext) === 0) {\n    return fragNext;\n  } // We might be seeking past the tolerance so find the best match\n\n\n  var foundFragment = binary_search.search(fragments, fragmentWithinToleranceTest.bind(null, bufferEnd, maxFragLookUpTolerance));\n\n  if (foundFragment) {\n    return foundFragment;\n  } // If no match was found return the next fragment after fragPrevious, or null\n\n\n  return fragNext;\n}\n/**\n * The test function used by the findFragmentBySn's BinarySearch to look for the best match to the current buffer conditions.\n * @param {*} candidate - The fragment to test\n * @param {number} [bufferEnd = 0] - The end of the current buffered range the playhead is currently within\n * @param {number} [maxFragLookUpTolerance = 0] - The amount of time that a fragment's start can be within in order to be considered contiguous\n * @returns {number} - 0 if it matches, 1 if too low, -1 if too high\n */\n\nfunction fragmentWithinToleranceTest(bufferEnd, maxFragLookUpTolerance, candidate) {\n  if (bufferEnd === void 0) {\n    bufferEnd = 0;\n  }\n\n  if (maxFragLookUpTolerance === void 0) {\n    maxFragLookUpTolerance = 0;\n  }\n\n  // offset should be within fragment boundary - config.maxFragLookUpTolerance\n  // this is to cope with situations like\n  // bufferEnd = 9.991\n  // frag[Ø] : [0,10]\n  // frag[1] : [10,20]\n  // bufferEnd is within frag[0] range ... although what we are expecting is to return frag[1] here\n  //              frag start               frag start+duration\n  //                  |-----------------------------|\n  //              <--->                         <--->\n  //  ...--------><-----------------------------><---------....\n  // previous frag         matching fragment         next frag\n  //  return -1             return 0                 return 1\n  // logger.log(`level/sn/start/end/bufEnd:${level}/${candidate.sn}/${candidate.start}/${(candidate.start+candidate.duration)}/${bufferEnd}`);\n  // Set the lookup tolerance to be small enough to detect the current segment - ensures we don't skip over very small segments\n  var candidateLookupTolerance = Math.min(maxFragLookUpTolerance, candidate.duration + (candidate.deltaPTS ? candidate.deltaPTS : 0));\n\n  if (candidate.start + candidate.duration - candidateLookupTolerance <= bufferEnd) {\n    return 1;\n  } else if (candidate.start - candidateLookupTolerance > bufferEnd && candidate.start) {\n    // if maxFragLookUpTolerance will have negative value then don't return -1 for first element\n    return -1;\n  }\n\n  return 0;\n}\n/**\n * The test function used by the findFragmentByPdt's BinarySearch to look for the best match to the current buffer conditions.\n * This function tests the candidate's program date time values, as represented in Unix time\n * @param {*} candidate - The fragment to test\n * @param {number} [pdtBufferEnd = 0] - The Unix time representing the end of the current buffered range\n * @param {number} [maxFragLookUpTolerance = 0] - The amount of time that a fragment's start can be within in order to be considered contiguous\n * @returns {boolean} True if contiguous, false otherwise\n */\n\nfunction pdtWithinToleranceTest(pdtBufferEnd, maxFragLookUpTolerance, candidate) {\n  var candidateLookupTolerance = Math.min(maxFragLookUpTolerance, candidate.duration + (candidate.deltaPTS ? candidate.deltaPTS : 0)) * 1000; // endProgramDateTime can be null, default to zero\n\n  var endProgramDateTime = candidate.endProgramDateTime || 0;\n  return endProgramDateTime - candidateLookupTolerance > pdtBufferEnd;\n}\n// CONCATENATED MODULE: ./src/controller/gap-controller.js\n\n\n\n\nvar STALL_MINIMUM_DURATION_MS = 250;\nvar MAX_START_GAP_JUMP = 2.0;\nvar SKIP_BUFFER_HOLE_STEP_SECONDS = 0.1;\nvar SKIP_BUFFER_RANGE_START = 0.05;\n\nvar gap_controller_GapController = /*#__PURE__*/function () {\n  function GapController(config, media, fragmentTracker, hls) {\n    this.config = config;\n    this.media = media;\n    this.fragmentTracker = fragmentTracker;\n    this.hls = hls;\n    this.nudgeRetry = 0;\n    this.stallReported = false;\n    this.stalled = null;\n    this.moved = false;\n    this.seeking = false;\n  }\n  /**\n   * Checks if the playhead is stuck within a gap, and if so, attempts to free it.\n   * A gap is an unbuffered range between two buffered ranges (or the start and the first buffered range).\n   *\n   * @param {number} lastCurrentTime Previously read playhead position\n   */\n\n\n  var _proto = GapController.prototype;\n\n  _proto.poll = function poll(lastCurrentTime) {\n    var config = this.config,\n        media = this.media,\n        stalled = this.stalled;\n    var currentTime = media.currentTime,\n        seeking = media.seeking;\n    var seeked = this.seeking && !seeking;\n    var beginSeek = !this.seeking && seeking;\n    this.seeking = seeking; // The playhead is moving, no-op\n\n    if (currentTime !== lastCurrentTime) {\n      this.moved = true;\n\n      if (stalled !== null) {\n        // The playhead is now moving, but was previously stalled\n        if (this.stallReported) {\n          var _stalledDuration = self.performance.now() - stalled;\n\n          logger[\"logger\"].warn(\"playback not stuck anymore @\" + currentTime + \", after \" + Math.round(_stalledDuration) + \"ms\");\n          this.stallReported = false;\n        }\n\n        this.stalled = null;\n        this.nudgeRetry = 0;\n      }\n\n      return;\n    } // Clear stalled state when beginning or finishing seeking so that we don't report stalls coming out of a seek\n\n\n    if (beginSeek || seeked) {\n      this.stalled = null;\n    } // The playhead should not be moving\n\n\n    if (media.paused || media.ended || media.playbackRate === 0 || !media.buffered.length) {\n      return;\n    }\n\n    var bufferInfo = BufferHelper.bufferInfo(media, currentTime, 0);\n    var isBuffered = bufferInfo.len > 0;\n    var nextStart = bufferInfo.nextStart || 0; // There is no playable buffer (waiting for buffer append)\n\n    if (!isBuffered && !nextStart) {\n      return;\n    }\n\n    if (seeking) {\n      // Waiting for seeking in a buffered range to complete\n      var hasEnoughBuffer = bufferInfo.len > MAX_START_GAP_JUMP; // Next buffered range is too far ahead to jump to while still seeking\n\n      var noBufferGap = !nextStart || nextStart - currentTime > MAX_START_GAP_JUMP && !this.fragmentTracker.getPartialFragment(currentTime);\n\n      if (hasEnoughBuffer || noBufferGap) {\n        return;\n      } // Reset moved state when seeking to a point in or before a gap\n\n\n      this.moved = false;\n    } // Skip start gaps if we haven't played, but the last poll detected the start of a stall\n    // The addition poll gives the browser a chance to jump the gap for us\n\n\n    if (!this.moved && this.stalled) {\n      // Jump start gaps within jump threshold\n      var startJump = Math.max(nextStart, bufferInfo.start || 0) - currentTime;\n\n      if (startJump > 0 && startJump <= MAX_START_GAP_JUMP) {\n        this._trySkipBufferHole(null);\n\n        return;\n      }\n    } // Start tracking stall time\n\n\n    var tnow = self.performance.now();\n\n    if (stalled === null) {\n      this.stalled = tnow;\n      return;\n    }\n\n    var stalledDuration = tnow - stalled;\n\n    if (!seeking && stalledDuration >= STALL_MINIMUM_DURATION_MS) {\n      // Report stalling after trying to fix\n      this._reportStall(bufferInfo.len);\n    }\n\n    var bufferedWithHoles = BufferHelper.bufferInfo(media, currentTime, config.maxBufferHole);\n\n    this._tryFixBufferStall(bufferedWithHoles, stalledDuration);\n  }\n  /**\n   * Detects and attempts to fix known buffer stalling issues.\n   * @param bufferInfo - The properties of the current buffer.\n   * @param stalledDurationMs - The amount of time Hls.js has been stalling for.\n   * @private\n   */\n  ;\n\n  _proto._tryFixBufferStall = function _tryFixBufferStall(bufferInfo, stalledDurationMs) {\n    var config = this.config,\n        fragmentTracker = this.fragmentTracker,\n        media = this.media;\n    var currentTime = media.currentTime;\n    var partial = fragmentTracker.getPartialFragment(currentTime);\n\n    if (partial) {\n      // Try to skip over the buffer hole caused by a partial fragment\n      // This method isn't limited by the size of the gap between buffered ranges\n      var targetTime = this._trySkipBufferHole(partial); // we return here in this case, meaning\n      // the branch below only executes when we don't handle a partial fragment\n\n\n      if (targetTime) {\n        return;\n      }\n    } // if we haven't had to skip over a buffer hole of a partial fragment\n    // we may just have to \"nudge\" the playlist as the browser decoding/rendering engine\n    // needs to cross some sort of threshold covering all source-buffers content\n    // to start playing properly.\n\n\n    if (bufferInfo.len > config.maxBufferHole && stalledDurationMs > config.highBufferWatchdogPeriod * 1000) {\n      logger[\"logger\"].warn('Trying to nudge playhead over buffer-hole'); // Try to nudge currentTime over a buffer hole if we've been stalling for the configured amount of seconds\n      // We only try to jump the hole if it's under the configured size\n      // Reset stalled so to rearm watchdog timer\n\n      this.stalled = null;\n\n      this._tryNudgeBuffer();\n    }\n  }\n  /**\n   * Triggers a BUFFER_STALLED_ERROR event, but only once per stall period.\n   * @param bufferLen - The playhead distance from the end of the current buffer segment.\n   * @private\n   */\n  ;\n\n  _proto._reportStall = function _reportStall(bufferLen) {\n    var hls = this.hls,\n        media = this.media,\n        stallReported = this.stallReported;\n\n    if (!stallReported) {\n      // Report stalled error once\n      this.stallReported = true;\n      logger[\"logger\"].warn(\"Playback stalling at @\" + media.currentTime + \" due to low buffer (buffer=\" + bufferLen + \")\");\n      hls.trigger(events[\"default\"].ERROR, {\n        type: errors[\"ErrorTypes\"].MEDIA_ERROR,\n        details: errors[\"ErrorDetails\"].BUFFER_STALLED_ERROR,\n        fatal: false,\n        buffer: bufferLen\n      });\n    }\n  }\n  /**\n   * Attempts to fix buffer stalls by jumping over known gaps caused by partial fragments\n   * @param partial - The partial fragment found at the current time (where playback is stalling).\n   * @private\n   */\n  ;\n\n  _proto._trySkipBufferHole = function _trySkipBufferHole(partial) {\n    var config = this.config,\n        hls = this.hls,\n        media = this.media;\n    var currentTime = media.currentTime;\n    var lastEndTime = 0; // Check if currentTime is between unbuffered regions of partial fragments\n\n    for (var i = 0; i < media.buffered.length; i++) {\n      var startTime = media.buffered.start(i);\n\n      if (currentTime + config.maxBufferHole >= lastEndTime && currentTime < startTime) {\n        var targetTime = Math.max(startTime + SKIP_BUFFER_RANGE_START, media.currentTime + SKIP_BUFFER_HOLE_STEP_SECONDS);\n        logger[\"logger\"].warn(\"skipping hole, adjusting currentTime from \" + currentTime + \" to \" + targetTime);\n        this.moved = true;\n        this.stalled = null;\n        media.currentTime = targetTime;\n\n        if (partial) {\n          hls.trigger(events[\"default\"].ERROR, {\n            type: errors[\"ErrorTypes\"].MEDIA_ERROR,\n            details: errors[\"ErrorDetails\"].BUFFER_SEEK_OVER_HOLE,\n            fatal: false,\n            reason: \"fragment loaded with buffer holes, seeking from \" + currentTime + \" to \" + targetTime,\n            frag: partial\n          });\n        }\n\n        return targetTime;\n      }\n\n      lastEndTime = media.buffered.end(i);\n    }\n\n    return 0;\n  }\n  /**\n   * Attempts to fix buffer stalls by advancing the mediaElement's current time by a small amount.\n   * @private\n   */\n  ;\n\n  _proto._tryNudgeBuffer = function _tryNudgeBuffer() {\n    var config = this.config,\n        hls = this.hls,\n        media = this.media;\n    var currentTime = media.currentTime;\n    var nudgeRetry = (this.nudgeRetry || 0) + 1;\n    this.nudgeRetry = nudgeRetry;\n\n    if (nudgeRetry < config.nudgeMaxRetry) {\n      var targetTime = currentTime + nudgeRetry * config.nudgeOffset; // playback stalled in buffered area ... let's nudge currentTime to try to overcome this\n\n      logger[\"logger\"].warn(\"Nudging 'currentTime' from \" + currentTime + \" to \" + targetTime);\n      media.currentTime = targetTime;\n      hls.trigger(events[\"default\"].ERROR, {\n        type: errors[\"ErrorTypes\"].MEDIA_ERROR,\n        details: errors[\"ErrorDetails\"].BUFFER_NUDGE_ON_STALL,\n        fatal: false\n      });\n    } else {\n      logger[\"logger\"].error(\"Playhead still not moving while enough data buffered @\" + currentTime + \" after \" + config.nudgeMaxRetry + \" nudges\");\n      hls.trigger(events[\"default\"].ERROR, {\n        type: errors[\"ErrorTypes\"].MEDIA_ERROR,\n        details: errors[\"ErrorDetails\"].BUFFER_STALLED_ERROR,\n        fatal: true\n      });\n    }\n  };\n\n  return GapController;\n}();\n\n\n// CONCATENATED MODULE: ./src/task-loop.ts\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction task_loop_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n\n\n/**\n * Sub-class specialization of EventHandler base class.\n *\n * TaskLoop allows to schedule a task function being called (optionnaly repeatedly) on the main loop,\n * scheduled asynchroneously, avoiding recursive calls in the same tick.\n *\n * The task itself is implemented in `doTick`. It can be requested and called for single execution\n * using the `tick` method.\n *\n * It will be assured that the task execution method (`tick`) only gets called once per main loop \"tick\",\n * no matter how often it gets requested for execution. Execution in further ticks will be scheduled accordingly.\n *\n * If further execution requests have already been scheduled on the next tick, it can be checked with `hasNextTick`,\n * and cancelled with `clearNextTick`.\n *\n * The task can be scheduled as an interval repeatedly with a period as parameter (see `setInterval`, `clearInterval`).\n *\n * Sub-classes need to implement the `doTick` method which will effectively have the task execution routine.\n *\n * Further explanations:\n *\n * The baseclass has a `tick` method that will schedule the doTick call. It may be called synchroneously\n * only for a stack-depth of one. On re-entrant calls, sub-sequent calls are scheduled for next main loop ticks.\n *\n * When the task execution (`tick` method) is called in re-entrant way this is detected and\n * we are limiting the task execution per call stack to exactly one, but scheduling/post-poning further\n * task processing on the next main loop iteration (also known as \"next tick\" in the Node/JS runtime lingo).\n */\nvar TaskLoop = /*#__PURE__*/function (_EventHandler) {\n  task_loop_inheritsLoose(TaskLoop, _EventHandler);\n\n  function TaskLoop(hls) {\n    var _this;\n\n    for (var _len = arguments.length, events = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      events[_key - 1] = arguments[_key];\n    }\n\n    _this = _EventHandler.call.apply(_EventHandler, [this, hls].concat(events)) || this;\n    _this._boundTick = void 0;\n    _this._tickTimer = null;\n    _this._tickInterval = null;\n    _this._tickCallCount = 0;\n    _this._boundTick = _this.tick.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  /**\n   * @override\n   */\n\n\n  var _proto = TaskLoop.prototype;\n\n  _proto.onHandlerDestroying = function onHandlerDestroying() {\n    // clear all timers before unregistering from event bus\n    this.clearNextTick();\n    this.clearInterval();\n  }\n  /**\n   * @returns {boolean}\n   */\n  ;\n\n  _proto.hasInterval = function hasInterval() {\n    return !!this._tickInterval;\n  }\n  /**\n   * @returns {boolean}\n   */\n  ;\n\n  _proto.hasNextTick = function hasNextTick() {\n    return !!this._tickTimer;\n  }\n  /**\n   * @param {number} millis Interval time (ms)\n   * @returns {boolean} True when interval has been scheduled, false when already scheduled (no effect)\n   */\n  ;\n\n  _proto.setInterval = function setInterval(millis) {\n    if (!this._tickInterval) {\n      this._tickInterval = self.setInterval(this._boundTick, millis);\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * @returns {boolean} True when interval was cleared, false when none was set (no effect)\n   */\n  ;\n\n  _proto.clearInterval = function clearInterval() {\n    if (this._tickInterval) {\n      self.clearInterval(this._tickInterval);\n      this._tickInterval = null;\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * @returns {boolean} True when timeout was cleared, false when none was set (no effect)\n   */\n  ;\n\n  _proto.clearNextTick = function clearNextTick() {\n    if (this._tickTimer) {\n      self.clearTimeout(this._tickTimer);\n      this._tickTimer = null;\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Will call the subclass doTick implementation in this main loop tick\n   * or in the next one (via setTimeout(,0)) in case it has already been called\n   * in this tick (in case this is a re-entrant call).\n   */\n  ;\n\n  _proto.tick = function tick() {\n    this._tickCallCount++;\n\n    if (this._tickCallCount === 1) {\n      this.doTick(); // re-entrant call to tick from previous doTick call stack\n      // -> schedule a call on the next main loop iteration to process this task processing request\n\n      if (this._tickCallCount > 1) {\n        // make sure only one timer exists at any time at max\n        this.clearNextTick();\n        this._tickTimer = self.setTimeout(this._boundTick, 0);\n      }\n\n      this._tickCallCount = 0;\n    }\n  }\n  /**\n   * For subclass to implement task logic\n   * @abstract\n   */\n  ;\n\n  _proto.doTick = function doTick() {};\n\n  return TaskLoop;\n}(event_handler);\n\n\n// CONCATENATED MODULE: ./src/controller/base-stream-controller.js\n\n\nfunction base_stream_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n\n\n\n\nvar State = {\n  STOPPED: 'STOPPED',\n  STARTING: 'STARTING',\n  IDLE: 'IDLE',\n  PAUSED: 'PAUSED',\n  KEY_LOADING: 'KEY_LOADING',\n  FRAG_LOADING: 'FRAG_LOADING',\n  FRAG_LOADING_WAITING_RETRY: 'FRAG_LOADING_WAITING_RETRY',\n  WAITING_TRACK: 'WAITING_TRACK',\n  PARSING: 'PARSING',\n  PARSED: 'PARSED',\n  BUFFER_FLUSHING: 'BUFFER_FLUSHING',\n  ENDED: 'ENDED',\n  ERROR: 'ERROR',\n  WAITING_INIT_PTS: 'WAITING_INIT_PTS',\n  WAITING_LEVEL: 'WAITING_LEVEL'\n};\n\nvar base_stream_controller_BaseStreamController = /*#__PURE__*/function (_TaskLoop) {\n  base_stream_controller_inheritsLoose(BaseStreamController, _TaskLoop);\n\n  function BaseStreamController() {\n    return _TaskLoop.apply(this, arguments) || this;\n  }\n\n  var _proto = BaseStreamController.prototype;\n\n  _proto.doTick = function doTick() {};\n\n  _proto.startLoad = function startLoad() {};\n\n  _proto.stopLoad = function stopLoad() {\n    var frag = this.fragCurrent;\n\n    if (frag) {\n      if (frag.loader) {\n        frag.loader.abort();\n      }\n\n      this.fragmentTracker.removeFragment(frag);\n    }\n\n    if (this.demuxer) {\n      this.demuxer.destroy();\n      this.demuxer = null;\n    }\n\n    this.fragCurrent = null;\n    this.fragPrevious = null;\n    this.clearInterval();\n    this.clearNextTick();\n    this.state = State.STOPPED;\n  };\n\n  _proto._streamEnded = function _streamEnded(bufferInfo, levelDetails) {\n    var fragCurrent = this.fragCurrent,\n        fragmentTracker = this.fragmentTracker; // we just got done loading the final fragment and there is no other buffered range after ...\n    // rationale is that in case there are any buffered ranges after, it means that there are unbuffered portion in between\n    // so we should not switch to ENDED in that case, to be able to buffer them\n    // dont switch to ENDED if we need to backtrack last fragment\n\n    if (!levelDetails.live && fragCurrent && !fragCurrent.backtracked && fragCurrent.sn === levelDetails.endSN && !bufferInfo.nextStart) {\n      var fragState = fragmentTracker.getState(fragCurrent);\n      return fragState === FragmentState.PARTIAL || fragState === FragmentState.OK;\n    }\n\n    return false;\n  };\n\n  _proto.onMediaSeeking = function onMediaSeeking() {\n    var config = this.config,\n        media = this.media,\n        mediaBuffer = this.mediaBuffer,\n        state = this.state;\n    var currentTime = media ? media.currentTime : null;\n    var bufferInfo = BufferHelper.bufferInfo(mediaBuffer || media, currentTime, this.config.maxBufferHole);\n    logger[\"logger\"].log(\"media seeking to \" + (Object(number[\"isFiniteNumber\"])(currentTime) ? currentTime.toFixed(3) : currentTime));\n\n    if (state === State.FRAG_LOADING) {\n      var fragCurrent = this.fragCurrent; // check if we are seeking to a unbuffered area AND if frag loading is in progress\n\n      if (bufferInfo.len === 0 && fragCurrent) {\n        var tolerance = config.maxFragLookUpTolerance;\n        var fragStartOffset = fragCurrent.start - tolerance;\n        var fragEndOffset = fragCurrent.start + fragCurrent.duration + tolerance; // check if we seek position will be out of currently loaded frag range : if out cancel frag load, if in, don't do anything\n\n        if (currentTime < fragStartOffset || currentTime > fragEndOffset) {\n          if (fragCurrent.loader) {\n            logger[\"logger\"].log('seeking outside of buffer while fragment load in progress, cancel fragment load');\n            fragCurrent.loader.abort();\n          }\n\n          this.fragCurrent = null;\n          this.fragPrevious = null; // switch to IDLE state to load new fragment\n\n          this.state = State.IDLE;\n        } else {\n          logger[\"logger\"].log('seeking outside of buffer but within currently loaded fragment range');\n        }\n      }\n    } else if (state === State.ENDED) {\n      // if seeking to unbuffered area, clean up fragPrevious\n      if (bufferInfo.len === 0) {\n        this.fragPrevious = null;\n        this.fragCurrent = null;\n      } // switch to IDLE state to check for potential new fragment\n\n\n      this.state = State.IDLE;\n    }\n\n    if (media) {\n      this.lastCurrentTime = currentTime;\n    } // in case seeking occurs although no media buffered, adjust startPosition and nextLoadPosition to seek target\n\n\n    if (!this.loadedmetadata) {\n      this.nextLoadPosition = this.startPosition = currentTime;\n    } // tick to speed up processing\n\n\n    this.tick();\n  };\n\n  _proto.onMediaEnded = function onMediaEnded() {\n    // reset startPosition and lastCurrentTime to restart playback @ stream beginning\n    this.startPosition = this.lastCurrentTime = 0;\n  };\n\n  _proto.onHandlerDestroying = function onHandlerDestroying() {\n    this.stopLoad();\n\n    _TaskLoop.prototype.onHandlerDestroying.call(this);\n  };\n\n  _proto.onHandlerDestroyed = function onHandlerDestroyed() {\n    this.state = State.STOPPED;\n    this.fragmentTracker = null;\n  };\n\n  _proto.computeLivePosition = function computeLivePosition(sliding, levelDetails) {\n    var targetLatency = this.config.liveSyncDuration !== undefined ? this.config.liveSyncDuration : this.config.liveSyncDurationCount * levelDetails.targetduration;\n    return sliding + Math.max(0, levelDetails.totalduration - targetLatency);\n  };\n\n  return BaseStreamController;\n}(TaskLoop);\n\n\n// CONCATENATED MODULE: ./src/controller/stream-controller.js\n\n\n\n\n\n\n\nfunction stream_controller_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction stream_controller_createClass(Constructor, protoProps, staticProps) { if (protoProps) stream_controller_defineProperties(Constructor.prototype, protoProps); if (staticProps) stream_controller_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction stream_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n/*\n * Stream Controller\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar TICK_INTERVAL = 100; // how often to tick in ms\n\nvar stream_controller_StreamController = /*#__PURE__*/function (_BaseStreamController) {\n  stream_controller_inheritsLoose(StreamController, _BaseStreamController);\n\n  function StreamController(hls, fragmentTracker) {\n    var _this;\n\n    _this = _BaseStreamController.call(this, hls, events[\"default\"].MEDIA_ATTACHED, events[\"default\"].MEDIA_DETACHING, events[\"default\"].MANIFEST_LOADING, events[\"default\"].MANIFEST_PARSED, events[\"default\"].LEVEL_LOADED, events[\"default\"].LEVELS_UPDATED, events[\"default\"].KEY_LOADED, events[\"default\"].FRAG_LOADED, events[\"default\"].FRAG_LOAD_EMERGENCY_ABORTED, events[\"default\"].FRAG_PARSING_INIT_SEGMENT, events[\"default\"].FRAG_PARSING_DATA, events[\"default\"].FRAG_PARSED, events[\"default\"].ERROR, events[\"default\"].AUDIO_TRACK_SWITCHING, events[\"default\"].AUDIO_TRACK_SWITCHED, events[\"default\"].BUFFER_CREATED, events[\"default\"].BUFFER_APPENDED, events[\"default\"].BUFFER_FLUSHED) || this;\n    _this.fragmentTracker = fragmentTracker;\n    _this.config = hls.config;\n    _this.audioCodecSwap = false;\n    _this._state = State.STOPPED;\n    _this.stallReported = false;\n    _this.gapController = null;\n    _this.altAudio = false;\n    _this.audioOnly = false;\n    _this.bitrateTest = false;\n    return _this;\n  }\n\n  var _proto = StreamController.prototype;\n\n  _proto.startLoad = function startLoad(startPosition) {\n    if (this.levels) {\n      var lastCurrentTime = this.lastCurrentTime,\n          hls = this.hls;\n      this.stopLoad();\n      this.setInterval(TICK_INTERVAL);\n      this.level = -1;\n      this.fragLoadError = 0;\n\n      if (!this.startFragRequested) {\n        // determine load level\n        var startLevel = hls.startLevel;\n\n        if (startLevel === -1) {\n          if (hls.config.testBandwidth) {\n            // -1 : guess start Level by doing a bitrate test by loading first fragment of lowest quality level\n            startLevel = 0;\n            this.bitrateTest = true;\n          } else {\n            startLevel = hls.nextAutoLevel;\n          }\n        } // set new level to playlist loader : this will trigger start level load\n        // hls.nextLoadLevel remains until it is set to a new value or until a new frag is successfully loaded\n\n\n        this.level = hls.nextLoadLevel = startLevel;\n        this.loadedmetadata = false;\n      } // if startPosition undefined but lastCurrentTime set, set startPosition to last currentTime\n\n\n      if (lastCurrentTime > 0 && startPosition === -1) {\n        logger[\"logger\"].log(\"override startPosition with lastCurrentTime @\" + lastCurrentTime.toFixed(3));\n        startPosition = lastCurrentTime;\n      }\n\n      this.state = State.IDLE;\n      this.nextLoadPosition = this.startPosition = this.lastCurrentTime = startPosition;\n      this.tick();\n    } else {\n      this.forceStartLoad = true;\n      this.state = State.STOPPED;\n    }\n  };\n\n  _proto.stopLoad = function stopLoad() {\n    this.forceStartLoad = false;\n\n    _BaseStreamController.prototype.stopLoad.call(this);\n  };\n\n  _proto.doTick = function doTick() {\n    switch (this.state) {\n      case State.BUFFER_FLUSHING:\n        // in buffer flushing state, reset fragLoadError counter\n        this.fragLoadError = 0;\n        break;\n\n      case State.IDLE:\n        this._doTickIdle();\n\n        break;\n\n      case State.WAITING_LEVEL:\n        var level = this.levels[this.level]; // check if playlist is already loaded\n\n        if (level && level.details) {\n          this.state = State.IDLE;\n        }\n\n        break;\n\n      case State.FRAG_LOADING_WAITING_RETRY:\n        var now = window.performance.now();\n        var retryDate = this.retryDate; // if current time is gt than retryDate, or if media seeking let's switch to IDLE state to retry loading\n\n        if (!retryDate || now >= retryDate || this.media && this.media.seeking) {\n          logger[\"logger\"].log('mediaController: retryDate reached, switch back to IDLE state');\n          this.state = State.IDLE;\n        }\n\n        break;\n\n      case State.ERROR:\n      case State.STOPPED:\n      case State.FRAG_LOADING:\n      case State.PARSING:\n      case State.PARSED:\n      case State.ENDED:\n        break;\n\n      default:\n        break;\n    } // check buffer\n\n\n    this._checkBuffer(); // check/update current fragment\n\n\n    this._checkFragmentChanged();\n  } // Ironically the \"idle\" state is the on we do the most logic in it seems ....\n  // NOTE: Maybe we could rather schedule a check for buffer length after half of the currently\n  //       played segment, or on pause/play/seek instead of naively checking every 100ms?\n  ;\n\n  _proto._doTickIdle = function _doTickIdle() {\n    var hls = this.hls,\n        config = hls.config,\n        media = this.media; // if start level not parsed yet OR\n    // if video not attached AND start fragment already requested OR start frag prefetch disable\n    // exit loop, as we either need more info (level not parsed) or we need media to be attached to load new fragment\n\n    if (this.levelLastLoaded === undefined || !media && (this.startFragRequested || !config.startFragPrefetch)) {\n      return;\n    } // If the \"main\" level is audio-only but we are loading an alternate track in the same group, do not load anything\n\n\n    if (this.altAudio && this.audioOnly) {\n      // Clear audio demuxer state so when switching back to main audio we're not still appending where we left off\n      this.demuxer.frag = null;\n      return;\n    } // if we have not yet loaded any fragment, start loading from start position\n\n\n    var pos;\n\n    if (this.loadedmetadata) {\n      pos = media.currentTime;\n    } else {\n      pos = this.nextLoadPosition;\n    } // determine next load level\n\n\n    var level = hls.nextLoadLevel,\n        levelInfo = this.levels[level];\n\n    if (!levelInfo) {\n      return;\n    }\n\n    var levelBitrate = levelInfo.bitrate,\n        maxBufLen; // compute max Buffer Length that we could get from this load level, based on level bitrate.\n\n    if (levelBitrate) {\n      maxBufLen = Math.max(8 * config.maxBufferSize / levelBitrate, config.maxBufferLength);\n    } else {\n      maxBufLen = config.maxBufferLength;\n    }\n\n    maxBufLen = Math.min(maxBufLen, config.maxMaxBufferLength); // determine next candidate fragment to be loaded, based on current position and end of buffer position\n    // ensure up to `config.maxMaxBufferLength` of buffer upfront\n\n    var maxBufferHole = pos < config.maxBufferHole ? Math.max(MAX_START_GAP_JUMP, config.maxBufferHole) : config.maxBufferHole;\n    var bufferInfo = BufferHelper.bufferInfo(this.mediaBuffer ? this.mediaBuffer : media, pos, maxBufferHole);\n    var bufferLen = bufferInfo.len; // Stay idle if we are still with buffer margins\n\n    if (bufferLen >= maxBufLen) {\n      return;\n    } // if buffer length is less than maxBufLen try to load a new fragment ...\n\n\n    logger[\"logger\"].trace(\"buffer length of \" + bufferLen.toFixed(3) + \" is below max of \" + maxBufLen.toFixed(3) + \". checking for more payload ...\"); // set next load level : this will trigger a playlist load if needed\n\n    this.level = hls.nextLoadLevel = level;\n    var levelDetails = levelInfo.details; // if level info not retrieved yet, switch state and wait for level retrieval\n    // if live playlist, ensure that new playlist has been refreshed to avoid loading/try to load\n    // a useless and outdated fragment (that might even introduce load error if it is already out of the live playlist)\n\n    if (!levelDetails || levelDetails.live && this.levelLastLoaded !== level) {\n      this.state = State.WAITING_LEVEL;\n      return;\n    }\n\n    if (this._streamEnded(bufferInfo, levelDetails)) {\n      var data = {};\n\n      if (this.altAudio) {\n        data.type = 'video';\n      }\n\n      this.hls.trigger(events[\"default\"].BUFFER_EOS, data);\n      this.state = State.ENDED;\n      return;\n    } // if we have the levelDetails for the selected variant, lets continue enrichen our stream (load keys/fragments or trigger EOS, etc..)\n\n\n    this._fetchPayloadOrEos(pos, bufferInfo, levelDetails);\n  };\n\n  _proto._fetchPayloadOrEos = function _fetchPayloadOrEos(pos, bufferInfo, levelDetails) {\n    var fragPrevious = this.fragPrevious,\n        level = this.level,\n        fragments = levelDetails.fragments,\n        fragLen = fragments.length; // empty playlist\n\n    if (fragLen === 0) {\n      return;\n    } // find fragment index, contiguous with end of buffer position\n\n\n    var start = fragments[0].start,\n        end = fragments[fragLen - 1].start + fragments[fragLen - 1].duration,\n        bufferEnd = bufferInfo.end,\n        frag;\n\n    if (levelDetails.initSegment && !levelDetails.initSegment.data) {\n      frag = levelDetails.initSegment;\n    } else {\n      // in case of live playlist we need to ensure that requested position is not located before playlist start\n      if (levelDetails.live) {\n        var initialLiveManifestSize = this.config.initialLiveManifestSize;\n\n        if (fragLen < initialLiveManifestSize) {\n          logger[\"logger\"].warn(\"Can not start playback of a level, reason: not enough fragments \" + fragLen + \" < \" + initialLiveManifestSize);\n          return;\n        }\n\n        frag = this._ensureFragmentAtLivePoint(levelDetails, bufferEnd, start, end, fragPrevious, fragments); // if it explicitely returns null don't load any fragment and exit function now\n\n        if (frag === null) {\n          return;\n        }\n      } else {\n        // VoD playlist: if bufferEnd before start of playlist, load first fragment\n        if (bufferEnd < start) {\n          frag = fragments[0];\n        }\n      }\n    }\n\n    if (!frag) {\n      frag = this._findFragment(start, fragPrevious, fragLen, fragments, bufferEnd, end, levelDetails);\n    }\n\n    if (frag) {\n      if (frag.encrypted) {\n        this._loadKey(frag, levelDetails);\n      } else {\n        this._loadFragment(frag, levelDetails, pos, bufferEnd);\n      }\n    }\n  };\n\n  _proto._ensureFragmentAtLivePoint = function _ensureFragmentAtLivePoint(levelDetails, bufferEnd, start, end, fragPrevious, fragments) {\n    var config = this.hls.config,\n        media = this.media;\n    var frag; // check if requested position is within seekable boundaries :\n    // logger.log(`start/pos/bufEnd/seeking:${start.toFixed(3)}/${pos.toFixed(3)}/${bufferEnd.toFixed(3)}/${this.media.seeking}`);\n\n    var maxLatency = Infinity;\n\n    if (config.liveMaxLatencyDuration !== undefined) {\n      maxLatency = config.liveMaxLatencyDuration;\n    } else if (Object(number[\"isFiniteNumber\"])(config.liveMaxLatencyDurationCount)) {\n      maxLatency = config.liveMaxLatencyDurationCount * levelDetails.targetduration;\n    }\n\n    if (bufferEnd < Math.max(start - config.maxFragLookUpTolerance, end - maxLatency)) {\n      var liveSyncPosition = this.liveSyncPosition = this.computeLivePosition(start, levelDetails);\n      bufferEnd = liveSyncPosition;\n\n      if (media && !media.paused && media.readyState && media.duration > liveSyncPosition && liveSyncPosition > media.currentTime) {\n        logger[\"logger\"].log(\"buffer end: \" + bufferEnd.toFixed(3) + \" is located too far from the end of live sliding playlist, reset currentTime to : \" + liveSyncPosition.toFixed(3));\n        media.currentTime = liveSyncPosition;\n      }\n\n      this.nextLoadPosition = liveSyncPosition;\n    } // if end of buffer greater than live edge, don't load any fragment\n    // this could happen if live playlist intermittently slides in the past.\n    // level 1 loaded [182580161,182580167]\n    // level 1 loaded [182580162,182580169]\n    // Loading 182580168 of [182580162 ,182580169],level 1 ..\n    // Loading 182580169 of [182580162 ,182580169],level 1 ..\n    // level 1 loaded [182580162,182580168] <============= here we should have bufferEnd > end. in that case break to avoid reloading 182580168\n    // level 1 loaded [182580164,182580171]\n    //\n    // don't return null in case media not loaded yet (readystate === 0)\n\n\n    if (levelDetails.PTSKnown && bufferEnd > end && media && media.readyState) {\n      return null;\n    }\n\n    if (this.startFragRequested && !levelDetails.PTSKnown) {\n      /* we are switching level on live playlist, but we don't have any PTS info for that quality level ...\n         try to load frag matching with next SN.\n         even if SN are not synchronized between playlists, loading this frag will help us\n         compute playlist sliding and find the right one after in case it was not the right consecutive one */\n      if (fragPrevious) {\n        if (levelDetails.hasProgramDateTime) {\n          // Relies on PDT in order to switch bitrates (Support EXT-X-DISCONTINUITY without EXT-X-DISCONTINUITY-SEQUENCE)\n          logger[\"logger\"].log(\"live playlist, switching playlist, load frag with same PDT: \" + fragPrevious.programDateTime);\n          frag = findFragmentByPDT(fragments, fragPrevious.endProgramDateTime, config.maxFragLookUpTolerance);\n        } else {\n          // Uses buffer and sequence number to calculate switch segment (required if using EXT-X-DISCONTINUITY-SEQUENCE)\n          var targetSN = fragPrevious.sn + 1;\n\n          if (targetSN >= levelDetails.startSN && targetSN <= levelDetails.endSN) {\n            var fragNext = fragments[targetSN - levelDetails.startSN];\n\n            if (fragPrevious.cc === fragNext.cc) {\n              frag = fragNext;\n              logger[\"logger\"].log(\"live playlist, switching playlist, load frag with next SN: \" + frag.sn);\n            }\n          } // next frag SN not available (or not with same continuity counter)\n          // look for a frag sharing the same CC\n\n\n          if (!frag) {\n            frag = binary_search.search(fragments, function (frag) {\n              return fragPrevious.cc - frag.cc;\n            });\n\n            if (frag) {\n              logger[\"logger\"].log(\"live playlist, switching playlist, load frag with same CC: \" + frag.sn);\n            }\n          }\n        }\n      }\n    }\n\n    return frag;\n  };\n\n  _proto._findFragment = function _findFragment(start, fragPreviousLoad, fragmentIndexRange, fragments, bufferEnd, end, levelDetails) {\n    var config = this.hls.config;\n    var fragNextLoad;\n\n    if (bufferEnd < end) {\n      var lookupTolerance = bufferEnd > end - config.maxFragLookUpTolerance ? 0 : config.maxFragLookUpTolerance; // Remove the tolerance if it would put the bufferEnd past the actual end of stream\n      // Uses buffer and sequence number to calculate switch segment (required if using EXT-X-DISCONTINUITY-SEQUENCE)\n\n      fragNextLoad = findFragmentByPTS(fragPreviousLoad, fragments, bufferEnd, lookupTolerance);\n    } else {\n      // reach end of playlist\n      fragNextLoad = fragments[fragmentIndexRange - 1];\n    }\n\n    if (fragNextLoad) {\n      var curSNIdx = fragNextLoad.sn - levelDetails.startSN;\n      var sameLevel = fragPreviousLoad && fragNextLoad.level === fragPreviousLoad.level;\n      var prevSnFrag = fragments[curSNIdx - 1];\n      var nextSnFrag = fragments[curSNIdx + 1]; // logger.log('find SN matching with pos:' +  bufferEnd + ':' + frag.sn);\n\n      if (fragPreviousLoad && fragNextLoad.sn === fragPreviousLoad.sn) {\n        if (sameLevel && !fragNextLoad.backtracked) {\n          if (fragNextLoad.sn < levelDetails.endSN) {\n            var deltaPTS = fragPreviousLoad.deltaPTS; // if there is a significant delta between audio and video, larger than max allowed hole,\n            // and if previous remuxed fragment did not start with a keyframe. (fragPrevious.dropped)\n            // let's try to load previous fragment again to get last keyframe\n            // then we will reload again current fragment (that way we should be able to fill the buffer hole ...)\n\n            if (deltaPTS && deltaPTS > config.maxBufferHole && fragPreviousLoad.dropped && curSNIdx) {\n              fragNextLoad = prevSnFrag;\n              logger[\"logger\"].warn('Previous fragment was dropped with large PTS gap between audio and video. Maybe fragment is not starting with a keyframe? Loading previous one to try to overcome this');\n            } else {\n              fragNextLoad = nextSnFrag;\n\n              if (this.fragmentTracker.getState(fragNextLoad) !== FragmentState.OK) {\n                logger[\"logger\"].log(\"Re-loading fragment with SN: \" + fragNextLoad.sn);\n              }\n            }\n          } else {\n            fragNextLoad = null;\n          }\n        } else if (fragNextLoad.backtracked) {\n          // Only backtrack a max of 1 consecutive fragment to prevent sliding back too far when little or no frags start with keyframes\n          if (nextSnFrag && nextSnFrag.backtracked) {\n            logger[\"logger\"].warn(\"Already backtracked from fragment \" + nextSnFrag.sn + \", will not backtrack to fragment \" + fragNextLoad.sn + \". Loading fragment \" + nextSnFrag.sn);\n            fragNextLoad = nextSnFrag;\n          } else {\n            // If a fragment has dropped frames and it's in a same level/sequence, load the previous fragment to try and find the keyframe\n            // Reset the dropped count now since it won't be reset until we parse the fragment again, which prevents infinite backtracking on the same segment\n            logger[\"logger\"].warn('Loaded fragment with dropped frames, backtracking 1 segment to find a keyframe');\n            fragNextLoad.dropped = 0;\n\n            if (prevSnFrag) {\n              fragNextLoad = prevSnFrag;\n              fragNextLoad.backtracked = true;\n            } else if (curSNIdx) {\n              // can't backtrack on very first fragment\n              fragNextLoad = null;\n            }\n          }\n        }\n      }\n    }\n\n    return fragNextLoad;\n  };\n\n  _proto._loadKey = function _loadKey(frag, levelDetails) {\n    logger[\"logger\"].log(\"Loading key for \" + frag.sn + \" of [\" + levelDetails.startSN + \"-\" + levelDetails.endSN + \"], level \" + this.level);\n    this.state = State.KEY_LOADING;\n    this.hls.trigger(events[\"default\"].KEY_LOADING, {\n      frag: frag\n    });\n  };\n\n  _proto._loadFragment = function _loadFragment(frag, levelDetails, pos, bufferEnd) {\n    // Check if fragment is not loaded\n    var fragState = this.fragmentTracker.getState(frag);\n    this.fragCurrent = frag;\n\n    if (frag.sn !== 'initSegment') {\n      this.startFragRequested = true;\n    } // Don't update nextLoadPosition for fragments which are not buffered\n\n\n    if (Object(number[\"isFiniteNumber\"])(frag.sn) && !frag.bitrateTest) {\n      this.nextLoadPosition = frag.start + frag.duration;\n    } // Allow backtracked fragments to load\n\n\n    if (frag.backtracked || fragState === FragmentState.NOT_LOADED || fragState === FragmentState.PARTIAL) {\n      frag.autoLevel = this.hls.autoLevelEnabled;\n      frag.bitrateTest = this.bitrateTest;\n      logger[\"logger\"].log(\"Loading \" + frag.sn + \" of [\" + levelDetails.startSN + \"-\" + levelDetails.endSN + \"], level \" + this.level + \", \" + (this.loadedmetadata ? 'currentTime' : 'nextLoadPosition') + \": \" + parseFloat(pos.toFixed(3)) + \", bufferEnd: \" + parseFloat(bufferEnd.toFixed(3)));\n      this.hls.trigger(events[\"default\"].FRAG_LOADING, {\n        frag: frag\n      }); // lazy demuxer init, as this could take some time ... do it during frag loading\n\n      if (!this.demuxer) {\n        this.demuxer = new demux_demuxer(this.hls, 'main');\n      }\n\n      this.state = State.FRAG_LOADING;\n    } else if (fragState === FragmentState.APPENDING) {\n      // Lower the buffer size and try again\n      if (this._reduceMaxBufferLength(frag.duration)) {\n        this.fragmentTracker.removeFragment(frag);\n      }\n    }\n  };\n\n  _proto.getBufferedFrag = function getBufferedFrag(position) {\n    return this.fragmentTracker.getBufferedFrag(position, PlaylistLevelType.MAIN);\n  };\n\n  _proto.followingBufferedFrag = function followingBufferedFrag(frag) {\n    if (frag) {\n      // try to get range of next fragment (500ms after this range)\n      return this.getBufferedFrag(frag.endPTS + 0.5);\n    }\n\n    return null;\n  };\n\n  _proto._checkFragmentChanged = function _checkFragmentChanged() {\n    var fragPlayingCurrent,\n        currentTime,\n        video = this.media;\n\n    if (video && video.readyState && video.seeking === false) {\n      currentTime = video.currentTime;\n      /* if video element is in seeked state, currentTime can only increase.\n        (assuming that playback rate is positive ...)\n        As sometimes currentTime jumps back to zero after a\n        media decode error, check this, to avoid seeking back to\n        wrong position after a media decode error\n      */\n\n      if (currentTime > this.lastCurrentTime) {\n        this.lastCurrentTime = currentTime;\n      }\n\n      if (BufferHelper.isBuffered(video, currentTime)) {\n        fragPlayingCurrent = this.getBufferedFrag(currentTime);\n      } else if (BufferHelper.isBuffered(video, currentTime + 0.1)) {\n        /* ensure that FRAG_CHANGED event is triggered at startup,\n          when first video frame is displayed and playback is paused.\n          add a tolerance of 100ms, in case current position is not buffered,\n          check if current pos+100ms is buffered and use that buffer range\n          for FRAG_CHANGED event reporting */\n        fragPlayingCurrent = this.getBufferedFrag(currentTime + 0.1);\n      }\n\n      if (fragPlayingCurrent) {\n        var fragPlaying = fragPlayingCurrent;\n\n        if (fragPlaying !== this.fragPlaying) {\n          this.hls.trigger(events[\"default\"].FRAG_CHANGED, {\n            frag: fragPlaying\n          });\n          var fragPlayingLevel = fragPlaying.level;\n\n          if (!this.fragPlaying || this.fragPlaying.level !== fragPlayingLevel) {\n            this.hls.trigger(events[\"default\"].LEVEL_SWITCHED, {\n              level: fragPlayingLevel\n            });\n          }\n\n          this.fragPlaying = fragPlaying;\n        }\n      }\n    }\n  }\n  /*\n    on immediate level switch :\n     - pause playback if playing\n     - cancel any pending load request\n     - and trigger a buffer flush\n  */\n  ;\n\n  _proto.immediateLevelSwitch = function immediateLevelSwitch() {\n    logger[\"logger\"].log('immediateLevelSwitch');\n\n    if (!this.immediateSwitch) {\n      this.immediateSwitch = true;\n      var media = this.media,\n          previouslyPaused;\n\n      if (media) {\n        previouslyPaused = media.paused;\n\n        if (!previouslyPaused) {\n          media.pause();\n        }\n      } else {\n        // don't restart playback after instant level switch in case media not attached\n        previouslyPaused = true;\n      }\n\n      this.previouslyPaused = previouslyPaused;\n    }\n\n    var fragCurrent = this.fragCurrent;\n\n    if (fragCurrent && fragCurrent.loader) {\n      fragCurrent.loader.abort();\n    }\n\n    this.fragCurrent = null; // flush everything\n\n    this.flushMainBuffer(0, Number.POSITIVE_INFINITY);\n  }\n  /**\n   * on immediate level switch end, after new fragment has been buffered:\n   * - nudge video decoder by slightly adjusting video currentTime (if currentTime buffered)\n   * - resume the playback if needed\n   */\n  ;\n\n  _proto.immediateLevelSwitchEnd = function immediateLevelSwitchEnd() {\n    var media = this.media;\n\n    if (media && media.buffered.length) {\n      this.immediateSwitch = false;\n\n      if (media.currentTime > 0 && BufferHelper.isBuffered(media, media.currentTime)) {\n        // only nudge if currentTime is buffered\n        media.currentTime -= 0.0001;\n      }\n\n      if (!this.previouslyPaused) {\n        media.play();\n      }\n    }\n  }\n  /**\n   * try to switch ASAP without breaking video playback:\n   * in order to ensure smooth but quick level switching,\n   * we need to find the next flushable buffer range\n   * we should take into account new segment fetch time\n   */\n  ;\n\n  _proto.nextLevelSwitch = function nextLevelSwitch() {\n    var media = this.media; // ensure that media is defined and that metadata are available (to retrieve currentTime)\n\n    if (media && media.readyState) {\n      var fetchdelay;\n      var fragPlayingCurrent = this.getBufferedFrag(media.currentTime);\n\n      if (fragPlayingCurrent && fragPlayingCurrent.startPTS > 1) {\n        // flush buffer preceding current fragment (flush until current fragment start offset)\n        // minus 1s to avoid video freezing, that could happen if we flush keyframe of current video ...\n        this.flushMainBuffer(0, fragPlayingCurrent.startPTS - 1);\n      }\n\n      if (!media.paused) {\n        // add a safety delay of 1s\n        var nextLevelId = this.hls.nextLoadLevel,\n            nextLevel = this.levels[nextLevelId],\n            fragLastKbps = this.fragLastKbps;\n\n        if (fragLastKbps && this.fragCurrent) {\n          fetchdelay = this.fragCurrent.duration * nextLevel.bitrate / (1000 * fragLastKbps) + 1;\n        } else {\n          fetchdelay = 0;\n        }\n      } else {\n        fetchdelay = 0;\n      } // logger.log('fetchdelay:'+fetchdelay);\n      // find buffer range that will be reached once new fragment will be fetched\n\n\n      var bufferedFrag = this.getBufferedFrag(media.currentTime + fetchdelay);\n\n      if (bufferedFrag) {\n        // we can flush buffer range following this one without stalling playback\n        var nextBufferedFrag = this.followingBufferedFrag(bufferedFrag);\n\n        if (nextBufferedFrag) {\n          // if we are here, we can also cancel any loading/demuxing in progress, as they are useless\n          var fragCurrent = this.fragCurrent;\n\n          if (fragCurrent && fragCurrent.loader) {\n            fragCurrent.loader.abort();\n          }\n\n          this.fragCurrent = null; // start flush position is the start PTS of next buffered frag.\n          // we use frag.naxStartPTS which is max(audio startPTS, video startPTS).\n          // in case there is a small PTS Delta between audio and video, using maxStartPTS avoids flushing last samples from current fragment\n\n          var startPts = Math.max(bufferedFrag.endPTS, nextBufferedFrag.maxStartPTS + Math.min(this.config.maxFragLookUpTolerance, nextBufferedFrag.duration));\n          this.flushMainBuffer(startPts, Number.POSITIVE_INFINITY);\n        }\n      }\n    }\n  };\n\n  _proto.flushMainBuffer = function flushMainBuffer(startOffset, endOffset) {\n    this.state = State.BUFFER_FLUSHING;\n    var flushScope = {\n      startOffset: startOffset,\n      endOffset: endOffset\n    }; // if alternate audio tracks are used, only flush video, otherwise flush everything\n\n    if (this.altAudio) {\n      flushScope.type = 'video';\n    }\n\n    this.hls.trigger(events[\"default\"].BUFFER_FLUSHING, flushScope);\n  };\n\n  _proto.onMediaAttached = function onMediaAttached(data) {\n    var media = this.media = this.mediaBuffer = data.media;\n    this.onvseeking = this.onMediaSeeking.bind(this);\n    this.onvseeked = this.onMediaSeeked.bind(this);\n    this.onvended = this.onMediaEnded.bind(this);\n    media.addEventListener('seeking', this.onvseeking);\n    media.addEventListener('seeked', this.onvseeked);\n    media.addEventListener('ended', this.onvended);\n    var config = this.config;\n\n    if (this.levels && config.autoStartLoad) {\n      this.hls.startLoad(config.startPosition);\n    }\n\n    this.gapController = new gap_controller_GapController(config, media, this.fragmentTracker, this.hls);\n  };\n\n  _proto.onMediaDetaching = function onMediaDetaching() {\n    var media = this.media;\n\n    if (media && media.ended) {\n      logger[\"logger\"].log('MSE detaching and video ended, reset startPosition');\n      this.startPosition = this.lastCurrentTime = 0;\n    } // reset fragment backtracked flag\n\n\n    var levels = this.levels;\n\n    if (levels) {\n      levels.forEach(function (level) {\n        if (level.details) {\n          level.details.fragments.forEach(function (fragment) {\n            fragment.backtracked = undefined;\n          });\n        }\n      });\n    } // remove video listeners\n\n\n    if (media) {\n      media.removeEventListener('seeking', this.onvseeking);\n      media.removeEventListener('seeked', this.onvseeked);\n      media.removeEventListener('ended', this.onvended);\n      this.onvseeking = this.onvseeked = this.onvended = null;\n    }\n\n    this.fragmentTracker.removeAllFragments();\n    this.media = this.mediaBuffer = null;\n    this.loadedmetadata = false;\n    this.stopLoad();\n  };\n\n  _proto.onMediaSeeked = function onMediaSeeked() {\n    var media = this.media;\n    var currentTime = media ? media.currentTime : undefined;\n\n    if (Object(number[\"isFiniteNumber\"])(currentTime)) {\n      logger[\"logger\"].log(\"media seeked to \" + currentTime.toFixed(3));\n    } // tick to speed up FRAGMENT_PLAYING triggering\n\n\n    this.tick();\n  };\n\n  _proto.onManifestLoading = function onManifestLoading() {\n    // reset buffer on manifest loading\n    logger[\"logger\"].log('trigger BUFFER_RESET');\n    this.hls.trigger(events[\"default\"].BUFFER_RESET);\n    this.fragmentTracker.removeAllFragments();\n    this.stalled = false;\n    this.startPosition = this.lastCurrentTime = 0;\n  };\n\n  _proto.onManifestParsed = function onManifestParsed(data) {\n    var aac = false,\n        heaac = false,\n        codec;\n    data.levels.forEach(function (level) {\n      // detect if we have different kind of audio codecs used amongst playlists\n      codec = level.audioCodec;\n\n      if (codec) {\n        if (codec.indexOf('mp4a.40.2') !== -1) {\n          aac = true;\n        }\n\n        if (codec.indexOf('mp4a.40.5') !== -1) {\n          heaac = true;\n        }\n      }\n    });\n    this.audioCodecSwitch = aac && heaac;\n\n    if (this.audioCodecSwitch) {\n      logger[\"logger\"].log('both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC');\n    }\n\n    this.altAudio = data.altAudio;\n    this.levels = data.levels;\n    this.startFragRequested = false;\n    var config = this.config;\n\n    if (config.autoStartLoad || this.forceStartLoad) {\n      this.hls.startLoad(config.startPosition);\n    }\n  };\n\n  _proto.onLevelLoaded = function onLevelLoaded(data) {\n    var newDetails = data.details;\n    var newLevelId = data.level;\n    var lastLevel = this.levels[this.levelLastLoaded];\n    var curLevel = this.levels[newLevelId];\n    var duration = newDetails.totalduration;\n    var sliding = 0;\n    logger[\"logger\"].log(\"level \" + newLevelId + \" loaded [\" + newDetails.startSN + \",\" + newDetails.endSN + \"],duration:\" + duration);\n\n    if (newDetails.live || curLevel.details && curLevel.details.live) {\n      var curDetails = curLevel.details;\n\n      if (curDetails && newDetails.fragments.length > 0) {\n        // we already have details for that level, merge them\n        mergeDetails(curDetails, newDetails);\n        sliding = newDetails.fragments[0].start;\n        this.liveSyncPosition = this.computeLivePosition(sliding, curDetails);\n\n        if (newDetails.PTSKnown && Object(number[\"isFiniteNumber\"])(sliding)) {\n          logger[\"logger\"].log(\"live playlist sliding:\" + sliding.toFixed(3));\n        } else {\n          logger[\"logger\"].log('live playlist - outdated PTS, unknown sliding');\n          alignStream(this.fragPrevious, lastLevel, newDetails);\n        }\n      } else {\n        logger[\"logger\"].log('live playlist - first load, unknown sliding');\n        newDetails.PTSKnown = false;\n        alignStream(this.fragPrevious, lastLevel, newDetails);\n      }\n    } else {\n      newDetails.PTSKnown = false;\n    } // override level info\n\n\n    curLevel.details = newDetails;\n    this.levelLastLoaded = newLevelId;\n    this.hls.trigger(events[\"default\"].LEVEL_UPDATED, {\n      details: newDetails,\n      level: newLevelId\n    });\n\n    if (this.startFragRequested === false) {\n      // compute start position if set to -1. use it straight away if value is defined\n      if (this.startPosition === -1 || this.lastCurrentTime === -1) {\n        // first, check if start time offset has been set in playlist, if yes, use this value\n        var startTimeOffset = newDetails.startTimeOffset;\n\n        if (Object(number[\"isFiniteNumber\"])(startTimeOffset)) {\n          if (startTimeOffset < 0) {\n            logger[\"logger\"].log(\"negative start time offset \" + startTimeOffset + \", count from end of last fragment\");\n            startTimeOffset = sliding + duration + startTimeOffset;\n          }\n\n          logger[\"logger\"].log(\"start time offset found in playlist, adjust startPosition to \" + startTimeOffset);\n          this.startPosition = startTimeOffset;\n        } else {\n          // if live playlist, set start position to be fragment N-this.config.liveSyncDurationCount (usually 3)\n          if (newDetails.live) {\n            this.startPosition = this.computeLivePosition(sliding, newDetails);\n            logger[\"logger\"].log(\"configure startPosition to \" + this.startPosition);\n          } else {\n            this.startPosition = 0;\n          }\n        }\n\n        this.lastCurrentTime = this.startPosition;\n      }\n\n      this.nextLoadPosition = this.startPosition;\n    } // only switch batck to IDLE state if we were waiting for level to start downloading a new fragment\n\n\n    if (this.state === State.WAITING_LEVEL) {\n      this.state = State.IDLE;\n    } // trigger handler right now\n\n\n    this.tick();\n  };\n\n  _proto.onKeyLoaded = function onKeyLoaded() {\n    if (this.state === State.KEY_LOADING) {\n      this.state = State.IDLE;\n      this.tick();\n    }\n  };\n\n  _proto.onFragLoaded = function onFragLoaded(data) {\n    var fragCurrent = this.fragCurrent,\n        hls = this.hls,\n        levels = this.levels,\n        media = this.media;\n    var fragLoaded = data.frag;\n\n    if (this.state === State.FRAG_LOADING && fragCurrent && fragLoaded.type === 'main' && fragLoaded.level === fragCurrent.level && fragLoaded.sn === fragCurrent.sn) {\n      var stats = data.stats;\n      var currentLevel = levels[fragCurrent.level];\n      var details = currentLevel.details; // reset frag bitrate test in any case after frag loaded event\n      // if this frag was loaded to perform a bitrate test AND if hls.nextLoadLevel is greater than 0\n      // then this means that we should be able to load a fragment at a higher quality level\n\n      this.bitrateTest = false;\n      this.stats = stats;\n      logger[\"logger\"].log(\"Loaded \" + fragCurrent.sn + \" of [\" + details.startSN + \" ,\" + details.endSN + \"],level \" + fragCurrent.level);\n\n      if (fragLoaded.bitrateTest && hls.nextLoadLevel) {\n        // switch back to IDLE state ... we just loaded a fragment to determine adequate start bitrate and initialize autoswitch algo\n        this.state = State.IDLE;\n        this.startFragRequested = false;\n        stats.tparsed = stats.tbuffered = window.performance.now();\n        hls.trigger(events[\"default\"].FRAG_BUFFERED, {\n          stats: stats,\n          frag: fragCurrent,\n          id: 'main'\n        });\n        this.tick();\n      } else if (fragLoaded.sn === 'initSegment') {\n        this.state = State.IDLE;\n        stats.tparsed = stats.tbuffered = window.performance.now();\n        details.initSegment.data = data.payload;\n        hls.trigger(events[\"default\"].FRAG_BUFFERED, {\n          stats: stats,\n          frag: fragCurrent,\n          id: 'main'\n        });\n        this.tick();\n      } else {\n        logger[\"logger\"].log(\"Parsing \" + fragCurrent.sn + \" of [\" + details.startSN + \" ,\" + details.endSN + \"],level \" + fragCurrent.level + \", cc \" + fragCurrent.cc);\n        this.state = State.PARSING;\n        this.pendingBuffering = true;\n        this.appended = false; // Bitrate test frags are not usually buffered so the fragment tracker ignores them. If Hls.js decides to buffer\n        // it (and therefore ends up at this line), then the fragment tracker needs to be manually informed.\n\n        if (fragLoaded.bitrateTest) {\n          fragLoaded.bitrateTest = false;\n          this.fragmentTracker.onFragLoaded({\n            frag: fragLoaded\n          });\n        } // time Offset is accurate if level PTS is known, or if playlist is not sliding (not live) and if media is not seeking (this is to overcome potential timestamp drifts between playlists and fragments)\n\n\n        var accurateTimeOffset = !(media && media.seeking) && (details.PTSKnown || !details.live);\n        var initSegmentData = details.initSegment ? details.initSegment.data : [];\n\n        var audioCodec = this._getAudioCodec(currentLevel); // transmux the MPEG-TS data to ISO-BMFF segments\n\n\n        var demuxer = this.demuxer = this.demuxer || new demux_demuxer(this.hls, 'main');\n        demuxer.push(data.payload, initSegmentData, audioCodec, currentLevel.videoCodec, fragCurrent, details.totalduration, accurateTimeOffset);\n      }\n    }\n\n    this.fragLoadError = 0;\n  };\n\n  _proto.onFragParsingInitSegment = function onFragParsingInitSegment(data) {\n    var fragCurrent = this.fragCurrent;\n    var fragNew = data.frag;\n\n    if (fragCurrent && data.id === 'main' && fragNew.sn === fragCurrent.sn && fragNew.level === fragCurrent.level && this.state === State.PARSING) {\n      var tracks = data.tracks,\n          trackName,\n          track;\n      this.audioOnly = tracks.audio && !tracks.video; // if audio track is expected to come from audio stream controller, discard any coming from main\n\n      if (this.altAudio && !this.audioOnly) {\n        delete tracks.audio;\n      } // include levelCodec in audio and video tracks\n\n\n      track = tracks.audio;\n\n      if (track) {\n        var audioCodec = this.levels[this.level].audioCodec,\n            ua = navigator.userAgent.toLowerCase();\n\n        if (audioCodec && this.audioCodecSwap) {\n          logger[\"logger\"].log('swapping playlist audio codec');\n\n          if (audioCodec.indexOf('mp4a.40.5') !== -1) {\n            audioCodec = 'mp4a.40.2';\n          } else {\n            audioCodec = 'mp4a.40.5';\n          }\n        } // in case AAC and HE-AAC audio codecs are signalled in manifest\n        // force HE-AAC , as it seems that most browsers prefers that way,\n        // except for mono streams OR on FF\n        // these conditions might need to be reviewed ...\n\n\n        if (this.audioCodecSwitch) {\n          // don't force HE-AAC if mono stream\n          if (track.metadata.channelCount !== 1 && // don't force HE-AAC if firefox\n          ua.indexOf('firefox') === -1) {\n            audioCodec = 'mp4a.40.5';\n          }\n        } // HE-AAC is broken on Android, always signal audio codec as AAC even if variant manifest states otherwise\n\n\n        if (ua.indexOf('android') !== -1 && track.container !== 'audio/mpeg') {\n          // Exclude mpeg audio\n          audioCodec = 'mp4a.40.2';\n          logger[\"logger\"].log(\"Android: force audio codec to \" + audioCodec);\n        }\n\n        track.levelCodec = audioCodec;\n        track.id = data.id;\n      }\n\n      track = tracks.video;\n\n      if (track) {\n        track.levelCodec = this.levels[this.level].videoCodec;\n        track.id = data.id;\n      }\n\n      this.hls.trigger(events[\"default\"].BUFFER_CODECS, tracks); // loop through tracks that are going to be provided to bufferController\n\n      for (trackName in tracks) {\n        track = tracks[trackName];\n        logger[\"logger\"].log(\"main track:\" + trackName + \",container:\" + track.container + \",codecs[level/parsed]=[\" + track.levelCodec + \"/\" + track.codec + \"]\");\n        var initSegment = track.initSegment;\n\n        if (initSegment) {\n          this.appended = true; // arm pending Buffering flag before appending a segment\n\n          this.pendingBuffering = true;\n          this.hls.trigger(events[\"default\"].BUFFER_APPENDING, {\n            type: trackName,\n            data: initSegment,\n            parent: 'main',\n            content: 'initSegment'\n          });\n        }\n      } // trigger handler right now\n\n\n      this.tick();\n    }\n  };\n\n  _proto.onFragParsingData = function onFragParsingData(data) {\n    var _this2 = this;\n\n    var fragCurrent = this.fragCurrent;\n    var fragNew = data.frag;\n\n    if (fragCurrent && data.id === 'main' && fragNew.sn === fragCurrent.sn && fragNew.level === fragCurrent.level && !(data.type === 'audio' && this.altAudio) && // filter out main audio if audio track is loaded through audio stream controller\n    this.state === State.PARSING) {\n      var level = this.levels[this.level],\n          frag = fragCurrent;\n\n      if (!Object(number[\"isFiniteNumber\"])(data.endPTS)) {\n        data.endPTS = data.startPTS + fragCurrent.duration;\n        data.endDTS = data.startDTS + fragCurrent.duration;\n      }\n\n      if (data.hasAudio === true) {\n        frag.addElementaryStream(ElementaryStreamTypes.AUDIO);\n      }\n\n      if (data.hasVideo === true) {\n        frag.addElementaryStream(ElementaryStreamTypes.VIDEO);\n      }\n\n      logger[\"logger\"].log(\"Parsed \" + data.type + \",PTS:[\" + data.startPTS.toFixed(3) + \",\" + data.endPTS.toFixed(3) + \"],DTS:[\" + data.startDTS.toFixed(3) + \"/\" + data.endDTS.toFixed(3) + \"],nb:\" + data.nb + \",dropped:\" + (data.dropped || 0)); // Detect gaps in a fragment  and try to fix it by finding a keyframe in the previous fragment (see _findFragments)\n\n      if (data.type === 'video') {\n        frag.dropped = data.dropped;\n\n        if (frag.dropped) {\n          if (!frag.backtracked) {\n            var levelDetails = level.details;\n\n            if (levelDetails && frag.sn === levelDetails.startSN) {\n              logger[\"logger\"].warn('missing video frame(s) on first frag, appending with gap', frag.sn);\n            } else {\n              logger[\"logger\"].warn('missing video frame(s), backtracking fragment', frag.sn); // Return back to the IDLE state without appending to buffer\n              // Causes findFragments to backtrack a segment and find the keyframe\n              // Audio fragments arriving before video sets the nextLoadPosition, causing _findFragments to skip the backtracked fragment\n\n              this.fragmentTracker.removeFragment(frag);\n              frag.backtracked = true;\n              this.nextLoadPosition = data.startPTS;\n              this.state = State.IDLE;\n              this.fragPrevious = frag;\n\n              if (this.demuxer) {\n                this.demuxer.destroy();\n                this.demuxer = null;\n              }\n\n              this.tick();\n              return;\n            }\n          } else {\n            logger[\"logger\"].warn('Already backtracked on this fragment, appending with the gap', frag.sn);\n          }\n        } else {\n          // Only reset the backtracked flag if we've loaded the frag without any dropped frames\n          frag.backtracked = false;\n        }\n      }\n\n      var drift = updateFragPTSDTS(level.details, frag, data.startPTS, data.endPTS, data.startDTS, data.endDTS),\n          hls = this.hls;\n      hls.trigger(events[\"default\"].LEVEL_PTS_UPDATED, {\n        details: level.details,\n        level: this.level,\n        drift: drift,\n        type: data.type,\n        start: data.startPTS,\n        end: data.endPTS\n      }); // has remuxer dropped video frames located before first keyframe ?\n\n      [data.data1, data.data2].forEach(function (buffer) {\n        // only append in PARSING state (rationale is that an appending error could happen synchronously on first segment appending)\n        // in that case it is useless to append following segments\n        if (buffer && buffer.length && _this2.state === State.PARSING) {\n          _this2.appended = true; // arm pending Buffering flag before appending a segment\n\n          _this2.pendingBuffering = true;\n          hls.trigger(events[\"default\"].BUFFER_APPENDING, {\n            type: data.type,\n            data: buffer,\n            parent: 'main',\n            content: 'data'\n          });\n        }\n      }); // trigger handler right now\n\n      this.tick();\n    }\n  };\n\n  _proto.onFragParsed = function onFragParsed(data) {\n    var fragCurrent = this.fragCurrent;\n    var fragNew = data.frag;\n\n    if (fragCurrent && data.id === 'main' && fragNew.sn === fragCurrent.sn && fragNew.level === fragCurrent.level && this.state === State.PARSING) {\n      this.stats.tparsed = window.performance.now();\n      this.state = State.PARSED;\n\n      this._checkAppendedParsed();\n    }\n  };\n\n  _proto.onAudioTrackSwitching = function onAudioTrackSwitching(data) {\n    // if any URL found on new audio track, it is an alternate audio track\n    var fromAltAudio = this.altAudio;\n    var altAudio = !!data.url;\n    var trackId = data.id; // if we switch on main audio, ensure that main fragment scheduling is synced with media.buffered\n    // don't do anything if we switch to alt audio: audio stream controller is handling it.\n    // we will just have to change buffer scheduling on audioTrackSwitched\n\n    if (!altAudio) {\n      if (this.mediaBuffer !== this.media) {\n        logger[\"logger\"].log('switching on main audio, use media.buffered to schedule main fragment loading');\n        this.mediaBuffer = this.media;\n        var fragCurrent = this.fragCurrent; // we need to refill audio buffer from main: cancel any frag loading to speed up audio switch\n\n        if (fragCurrent.loader) {\n          logger[\"logger\"].log('switching to main audio track, cancel main fragment load');\n          fragCurrent.loader.abort();\n        }\n\n        this.fragCurrent = null;\n        this.fragPrevious = null; // destroy demuxer to force init segment generation (following audio switch)\n\n        if (this.demuxer) {\n          this.demuxer.destroy();\n          this.demuxer = null;\n        } // switch to IDLE state to load new fragment\n\n\n        this.state = State.IDLE;\n      }\n\n      var hls = this.hls; // If switching from alt to main audio, flush all audio and trigger track switched\n\n      if (fromAltAudio) {\n        hls.trigger(events[\"default\"].BUFFER_FLUSHING, {\n          startOffset: 0,\n          endOffset: Number.POSITIVE_INFINITY,\n          type: 'audio'\n        });\n      }\n\n      hls.trigger(events[\"default\"].AUDIO_TRACK_SWITCHED, {\n        id: trackId\n      });\n    }\n  };\n\n  _proto.onAudioTrackSwitched = function onAudioTrackSwitched(data) {\n    var trackId = data.id,\n        altAudio = !!this.hls.audioTracks[trackId].url;\n\n    if (altAudio) {\n      var videoBuffer = this.videoBuffer; // if we switched on alternate audio, ensure that main fragment scheduling is synced with video sourcebuffer buffered\n\n      if (videoBuffer && this.mediaBuffer !== videoBuffer) {\n        logger[\"logger\"].log('switching on alternate audio, use video.buffered to schedule main fragment loading');\n        this.mediaBuffer = videoBuffer;\n      }\n    }\n\n    this.altAudio = altAudio;\n    this.tick();\n  };\n\n  _proto.onBufferCreated = function onBufferCreated(data) {\n    var tracks = data.tracks,\n        mediaTrack,\n        name,\n        alternate = false;\n\n    for (var type in tracks) {\n      var track = tracks[type];\n\n      if (track.id === 'main') {\n        name = type;\n        mediaTrack = track; // keep video source buffer reference\n\n        if (type === 'video') {\n          this.videoBuffer = tracks[type].buffer;\n        }\n      } else {\n        alternate = true;\n      }\n    }\n\n    if (alternate && mediaTrack) {\n      logger[\"logger\"].log(\"alternate track found, use \" + name + \".buffered to schedule main fragment loading\");\n      this.mediaBuffer = mediaTrack.buffer;\n    } else {\n      this.mediaBuffer = this.media;\n    }\n  };\n\n  _proto.onBufferAppended = function onBufferAppended(data) {\n    if (data.parent === 'main') {\n      var state = this.state;\n\n      if (state === State.PARSING || state === State.PARSED) {\n        // check if all buffers have been appended\n        this.pendingBuffering = data.pending > 0;\n\n        this._checkAppendedParsed();\n      }\n    }\n  };\n\n  _proto._checkAppendedParsed = function _checkAppendedParsed() {\n    // trigger handler right now\n    if (this.state === State.PARSED && (!this.appended || !this.pendingBuffering)) {\n      var frag = this.fragCurrent;\n\n      if (frag) {\n        var media = this.mediaBuffer ? this.mediaBuffer : this.media;\n        logger[\"logger\"].log(\"main buffered : \" + time_ranges.toString(media.buffered));\n        this.fragPrevious = frag;\n        var stats = this.stats;\n        stats.tbuffered = window.performance.now(); // we should get rid of this.fragLastKbps\n\n        this.fragLastKbps = Math.round(8 * stats.total / (stats.tbuffered - stats.tfirst));\n        this.hls.trigger(events[\"default\"].FRAG_BUFFERED, {\n          stats: stats,\n          frag: frag,\n          id: 'main'\n        });\n        this.state = State.IDLE;\n      } // Do not tick when _seekToStartPos needs to be called as seeking to the start can fail on live streams at this point\n\n\n      if (this.loadedmetadata || this.startPosition <= 0) {\n        this.tick();\n      }\n    }\n  };\n\n  _proto.onError = function onError(data) {\n    var frag = data.frag || this.fragCurrent; // don't handle frag error not related to main fragment\n\n    if (frag && frag.type !== 'main') {\n      return;\n    } // 0.5 : tolerance needed as some browsers stalls playback before reaching buffered end\n\n\n    var mediaBuffered = !!this.media && BufferHelper.isBuffered(this.media, this.media.currentTime) && BufferHelper.isBuffered(this.media, this.media.currentTime + 0.5);\n\n    switch (data.details) {\n      case errors[\"ErrorDetails\"].FRAG_LOAD_ERROR:\n      case errors[\"ErrorDetails\"].FRAG_LOAD_TIMEOUT:\n      case errors[\"ErrorDetails\"].KEY_LOAD_ERROR:\n      case errors[\"ErrorDetails\"].KEY_LOAD_TIMEOUT:\n        if (!data.fatal) {\n          // keep retrying until the limit will be reached\n          if (this.fragLoadError + 1 <= this.config.fragLoadingMaxRetry) {\n            // exponential backoff capped to config.fragLoadingMaxRetryTimeout\n            var delay = Math.min(Math.pow(2, this.fragLoadError) * this.config.fragLoadingRetryDelay, this.config.fragLoadingMaxRetryTimeout);\n            logger[\"logger\"].warn(\"mediaController: frag loading failed, retry in \" + delay + \" ms\");\n            this.retryDate = window.performance.now() + delay; // retry loading state\n            // if loadedmetadata is not set, it means that we are emergency switch down on first frag\n            // in that case, reset startFragRequested flag\n\n            if (!this.loadedmetadata) {\n              this.startFragRequested = false;\n              this.nextLoadPosition = this.startPosition;\n            }\n\n            this.fragLoadError++;\n            this.state = State.FRAG_LOADING_WAITING_RETRY;\n          } else {\n            logger[\"logger\"].error(\"mediaController: \" + data.details + \" reaches max retry, redispatch as fatal ...\"); // switch error to fatal\n\n            data.fatal = true;\n            this.state = State.ERROR;\n          }\n        }\n\n        break;\n\n      case errors[\"ErrorDetails\"].LEVEL_LOAD_ERROR:\n      case errors[\"ErrorDetails\"].LEVEL_LOAD_TIMEOUT:\n        if (this.state !== State.ERROR) {\n          if (data.fatal) {\n            // if fatal error, stop processing\n            this.state = State.ERROR;\n            logger[\"logger\"].warn(\"streamController: \" + data.details + \",switch to \" + this.state + \" state ...\");\n          } else {\n            // in case of non fatal error while loading level, if level controller is not retrying to load level , switch back to IDLE\n            if (!data.levelRetry && this.state === State.WAITING_LEVEL) {\n              this.state = State.IDLE;\n            }\n          }\n        }\n\n        break;\n\n      case errors[\"ErrorDetails\"].BUFFER_FULL_ERROR:\n        // if in appending state\n        if (data.parent === 'main' && (this.state === State.PARSING || this.state === State.PARSED)) {\n          // reduce max buf len if current position is buffered\n          if (mediaBuffered) {\n            this._reduceMaxBufferLength(this.config.maxBufferLength);\n\n            this.state = State.IDLE;\n          } else {\n            // current position is not buffered, but browser is still complaining about buffer full error\n            // this happens on IE/Edge, refer to https://github.com/video-dev/hls.js/pull/708\n            // in that case flush the whole buffer to recover\n            logger[\"logger\"].warn('buffer full error also media.currentTime is not buffered, flush everything');\n            this.fragCurrent = null; // flush everything\n\n            this.flushMainBuffer(0, Number.POSITIVE_INFINITY);\n          }\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  _proto._reduceMaxBufferLength = function _reduceMaxBufferLength(minLength) {\n    var config = this.config;\n\n    if (config.maxMaxBufferLength >= minLength) {\n      // reduce max buffer length as it might be too high. we do this to avoid loop flushing ...\n      config.maxMaxBufferLength /= 2;\n      logger[\"logger\"].warn(\"main:reduce max buffer length to \" + config.maxMaxBufferLength + \"s\");\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Checks the health of the buffer and attempts to resolve playback stalls.\n   * @private\n   */\n  ;\n\n  _proto._checkBuffer = function _checkBuffer() {\n    var media = this.media;\n\n    if (!media || media.readyState === 0) {\n      // Exit early if we don't have media or if the media hasn't bufferd anything yet (readyState 0)\n      return;\n    }\n\n    var mediaBuffer = this.mediaBuffer ? this.mediaBuffer : media;\n    var buffered = mediaBuffer.buffered;\n\n    if (!this.loadedmetadata && buffered.length) {\n      this.loadedmetadata = true;\n\n      this._seekToStartPos();\n    } else if (this.immediateSwitch) {\n      this.immediateLevelSwitchEnd();\n    } else {\n      this.gapController.poll(this.lastCurrentTime, buffered);\n    }\n  };\n\n  _proto.onFragLoadEmergencyAborted = function onFragLoadEmergencyAborted() {\n    this.state = State.IDLE; // if loadedmetadata is not set, it means that we are emergency switch down on first frag\n    // in that case, reset startFragRequested flag\n\n    if (!this.loadedmetadata) {\n      this.startFragRequested = false;\n      this.nextLoadPosition = this.startPosition;\n    }\n\n    this.tick();\n  };\n\n  _proto.onBufferFlushed = function onBufferFlushed() {\n    /* after successful buffer flushing, filter flushed fragments from bufferedFrags\n      use mediaBuffered instead of media (so that we will check against video.buffered ranges in case of alt audio track)\n    */\n    var media = this.mediaBuffer ? this.mediaBuffer : this.media;\n\n    if (media) {\n      // filter fragments potentially evicted from buffer. this is to avoid memleak on live streams\n      var elementaryStreamType = this.audioOnly ? ElementaryStreamTypes.AUDIO : ElementaryStreamTypes.VIDEO;\n      this.fragmentTracker.detectEvictedFragments(elementaryStreamType, media.buffered);\n    } // move to IDLE once flush complete. this should trigger new fragment loading\n\n\n    this.state = State.IDLE; // reset reference to frag\n\n    this.fragPrevious = null;\n  };\n\n  _proto.onLevelsUpdated = function onLevelsUpdated(data) {\n    this.levels = data.levels;\n  };\n\n  _proto.swapAudioCodec = function swapAudioCodec() {\n    this.audioCodecSwap = !this.audioCodecSwap;\n  }\n  /**\n   * Seeks to the set startPosition if not equal to the mediaElement's current time.\n   * @private\n   */\n  ;\n\n  _proto._seekToStartPos = function _seekToStartPos() {\n    var media = this.media;\n    var currentTime = media.currentTime;\n    var startPosition = this.startPosition; // only adjust currentTime if different from startPosition or if startPosition not buffered\n    // at that stage, there should be only one buffered range, as we reach that code after first fragment has been buffered\n\n    if (currentTime !== startPosition && startPosition >= 0) {\n      if (media.seeking) {\n        logger[\"logger\"].log(\"could not seek to \" + startPosition + \", already seeking at \" + currentTime);\n        return;\n      }\n\n      var bufferStart = media.buffered.length ? media.buffered.start(0) : 0;\n      var delta = bufferStart - startPosition;\n\n      if (delta > 0 && delta < this.config.maxBufferHole) {\n        logger[\"logger\"].log(\"adjusting start position by \" + delta + \" to match buffer start\");\n        startPosition += delta;\n        this.startPosition = startPosition;\n      }\n\n      logger[\"logger\"].log(\"seek to target start position \" + startPosition + \" from current time \" + currentTime + \". ready state \" + media.readyState);\n      media.currentTime = startPosition;\n    }\n  };\n\n  _proto._getAudioCodec = function _getAudioCodec(currentLevel) {\n    var audioCodec = this.config.defaultAudioCodec || currentLevel.audioCodec;\n\n    if (this.audioCodecSwap) {\n      logger[\"logger\"].log('swapping playlist audio codec');\n\n      if (audioCodec) {\n        if (audioCodec.indexOf('mp4a.40.5') !== -1) {\n          audioCodec = 'mp4a.40.2';\n        } else {\n          audioCodec = 'mp4a.40.5';\n        }\n      }\n    }\n\n    return audioCodec;\n  };\n\n  stream_controller_createClass(StreamController, [{\n    key: \"state\",\n    set: function set(nextState) {\n      if (this.state !== nextState) {\n        var previousState = this.state;\n        this._state = nextState;\n        logger[\"logger\"].log(\"main stream-controller: \" + previousState + \"->\" + nextState);\n        this.hls.trigger(events[\"default\"].STREAM_STATE_TRANSITION, {\n          previousState: previousState,\n          nextState: nextState\n        });\n      }\n    },\n    get: function get() {\n      return this._state;\n    }\n  }, {\n    key: \"currentLevel\",\n    get: function get() {\n      var media = this.media;\n\n      if (media) {\n        var frag = this.getBufferedFrag(media.currentTime);\n\n        if (frag) {\n          return frag.level;\n        }\n      }\n\n      return -1;\n    }\n  }, {\n    key: \"nextBufferedFrag\",\n    get: function get() {\n      var media = this.media;\n\n      if (media) {\n        // first get end range of current fragment\n        return this.followingBufferedFrag(this.getBufferedFrag(media.currentTime));\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"nextLevel\",\n    get: function get() {\n      var frag = this.nextBufferedFrag;\n\n      if (frag) {\n        return frag.level;\n      } else {\n        return -1;\n      }\n    }\n  }, {\n    key: \"liveSyncPosition\",\n    get: function get() {\n      return this._liveSyncPosition;\n    },\n    set: function set(value) {\n      this._liveSyncPosition = value;\n    }\n  }]);\n\n  return StreamController;\n}(base_stream_controller_BaseStreamController);\n\n/* harmony default export */ var stream_controller = (stream_controller_StreamController);\n// CONCATENATED MODULE: ./src/controller/level-controller.js\nfunction level_controller_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction level_controller_createClass(Constructor, protoProps, staticProps) { if (protoProps) level_controller_defineProperties(Constructor.prototype, protoProps); if (staticProps) level_controller_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction level_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n/*\n * Level Controller\n*/\n\n\n\n\n\n\nvar chromeOrFirefox;\n\nvar level_controller_LevelController = /*#__PURE__*/function (_EventHandler) {\n  level_controller_inheritsLoose(LevelController, _EventHandler);\n\n  function LevelController(hls) {\n    var _this;\n\n    _this = _EventHandler.call(this, hls, events[\"default\"].MANIFEST_LOADED, events[\"default\"].LEVEL_LOADED, events[\"default\"].AUDIO_TRACK_SWITCHED, events[\"default\"].FRAG_LOADED, events[\"default\"].ERROR) || this;\n    _this.canload = false;\n    _this.currentLevelIndex = null;\n    _this.manualLevelIndex = -1;\n    _this.timer = null;\n    chromeOrFirefox = /chrome|firefox/.test(navigator.userAgent.toLowerCase());\n    return _this;\n  }\n\n  var _proto = LevelController.prototype;\n\n  _proto.onHandlerDestroying = function onHandlerDestroying() {\n    this.clearTimer();\n    this.manualLevelIndex = -1;\n  };\n\n  _proto.clearTimer = function clearTimer() {\n    if (this.timer !== null) {\n      clearTimeout(this.timer);\n      this.timer = null;\n    }\n  };\n\n  _proto.startLoad = function startLoad() {\n    var levels = this._levels;\n    this.canload = true;\n    this.levelRetryCount = 0; // clean up live level details to force reload them, and reset load errors\n\n    if (levels) {\n      levels.forEach(function (level) {\n        level.loadError = 0;\n        var levelDetails = level.details;\n\n        if (levelDetails && levelDetails.live) {\n          level.details = undefined;\n        }\n      });\n    } // speed up live playlist refresh if timer exists\n\n\n    if (this.timer !== null) {\n      this.loadLevel();\n    }\n  };\n\n  _proto.stopLoad = function stopLoad() {\n    this.canload = false;\n  };\n\n  _proto.onManifestLoaded = function onManifestLoaded(data) {\n    var levels = [];\n    var audioTracks = [];\n    var bitrateStart;\n    var levelSet = {};\n    var levelFromSet = null;\n    var videoCodecFound = false;\n    var audioCodecFound = false; // regroup redundant levels together\n\n    data.levels.forEach(function (level) {\n      var attributes = level.attrs;\n      level.loadError = 0;\n      level.fragmentError = false;\n      videoCodecFound = videoCodecFound || !!level.videoCodec;\n      audioCodecFound = audioCodecFound || !!level.audioCodec; // erase audio codec info if browser does not support mp4a.40.34.\n      // demuxer will autodetect codec and fallback to mpeg/audio\n\n      if (chromeOrFirefox && level.audioCodec && level.audioCodec.indexOf('mp4a.40.34') !== -1) {\n        level.audioCodec = undefined;\n      }\n\n      levelFromSet = levelSet[level.bitrate]; // FIXME: we would also have to match the resolution here\n\n      if (!levelFromSet) {\n        level.url = [level.url];\n        level.urlId = 0;\n        levelSet[level.bitrate] = level;\n        levels.push(level);\n      } else {\n        levelFromSet.url.push(level.url);\n      }\n\n      if (attributes) {\n        if (attributes.AUDIO) {\n          addGroupId(levelFromSet || level, 'audio', attributes.AUDIO);\n        }\n\n        if (attributes.SUBTITLES) {\n          addGroupId(levelFromSet || level, 'text', attributes.SUBTITLES);\n        }\n      }\n    }); // remove audio-only level if we also have levels with audio+video codecs signalled\n\n    if (videoCodecFound && audioCodecFound) {\n      levels = levels.filter(function (_ref) {\n        var videoCodec = _ref.videoCodec;\n        return !!videoCodec;\n      });\n    } // only keep levels with supported audio/video codecs\n\n\n    levels = levels.filter(function (_ref2) {\n      var audioCodec = _ref2.audioCodec,\n          videoCodec = _ref2.videoCodec;\n      return (!audioCodec || isCodecSupportedInMp4(audioCodec, 'audio')) && (!videoCodec || isCodecSupportedInMp4(videoCodec, 'video'));\n    });\n\n    if (data.audioTracks) {\n      audioTracks = data.audioTracks.filter(function (track) {\n        return !track.audioCodec || isCodecSupportedInMp4(track.audioCodec, 'audio');\n      }); // Reassign id's after filtering since they're used as array indices\n\n      audioTracks.forEach(function (track, index) {\n        track.id = index;\n      });\n    }\n\n    if (levels.length > 0) {\n      // start bitrate is the first bitrate of the manifest\n      bitrateStart = levels[0].bitrate; // sort level on bitrate\n\n      levels.sort(function (a, b) {\n        return a.bitrate - b.bitrate;\n      });\n      this._levels = levels; // find index of first level in sorted levels\n\n      for (var i = 0; i < levels.length; i++) {\n        if (levels[i].bitrate === bitrateStart) {\n          this._firstLevel = i;\n          logger[\"logger\"].log(\"manifest loaded,\" + levels.length + \" level(s) found, first bitrate:\" + bitrateStart);\n          break;\n        }\n      } // Audio is only alternate if manifest include a URI along with the audio group tag,\n      // and this is not an audio-only stream where levels contain audio-only\n\n\n      var audioOnly = audioCodecFound && !videoCodecFound;\n      this.hls.trigger(events[\"default\"].MANIFEST_PARSED, {\n        levels: levels,\n        audioTracks: audioTracks,\n        firstLevel: this._firstLevel,\n        stats: data.stats,\n        audio: audioCodecFound,\n        video: videoCodecFound,\n        altAudio: !audioOnly && audioTracks.some(function (t) {\n          return !!t.url;\n        })\n      });\n    } else {\n      this.hls.trigger(events[\"default\"].ERROR, {\n        type: errors[\"ErrorTypes\"].MEDIA_ERROR,\n        details: errors[\"ErrorDetails\"].MANIFEST_INCOMPATIBLE_CODECS_ERROR,\n        fatal: true,\n        url: this.hls.url,\n        reason: 'no level with compatible codecs found in manifest'\n      });\n    }\n  };\n\n  _proto.setLevelInternal = function setLevelInternal(newLevel) {\n    var levels = this._levels;\n    var hls = this.hls; // check if level idx is valid\n\n    if (newLevel >= 0 && newLevel < levels.length) {\n      // stopping live reloading timer if any\n      this.clearTimer();\n\n      if (this.currentLevelIndex !== newLevel) {\n        logger[\"logger\"].log(\"switching to level \" + newLevel);\n        this.currentLevelIndex = newLevel;\n        var levelProperties = levels[newLevel];\n        levelProperties.level = newLevel;\n        hls.trigger(events[\"default\"].LEVEL_SWITCHING, levelProperties);\n      }\n\n      var level = levels[newLevel];\n      var levelDetails = level.details; // check if we need to load playlist for this level\n\n      if (!levelDetails || levelDetails.live) {\n        // level not retrieved yet, or live playlist we need to (re)load it\n        var urlId = level.urlId;\n        hls.trigger(events[\"default\"].LEVEL_LOADING, {\n          url: level.url[urlId],\n          level: newLevel,\n          id: urlId\n        });\n      }\n    } else {\n      // invalid level id given, trigger error\n      hls.trigger(events[\"default\"].ERROR, {\n        type: errors[\"ErrorTypes\"].OTHER_ERROR,\n        details: errors[\"ErrorDetails\"].LEVEL_SWITCH_ERROR,\n        level: newLevel,\n        fatal: false,\n        reason: 'invalid level idx'\n      });\n    }\n  };\n\n  _proto.onError = function onError(data) {\n    if (data.fatal) {\n      if (data.type === errors[\"ErrorTypes\"].NETWORK_ERROR) {\n        this.clearTimer();\n      }\n\n      return;\n    }\n\n    var levelError = false,\n        fragmentError = false;\n    var levelIndex; // try to recover not fatal errors\n\n    switch (data.details) {\n      case errors[\"ErrorDetails\"].FRAG_LOAD_ERROR:\n      case errors[\"ErrorDetails\"].FRAG_LOAD_TIMEOUT:\n      case errors[\"ErrorDetails\"].KEY_LOAD_ERROR:\n      case errors[\"ErrorDetails\"].KEY_LOAD_TIMEOUT:\n        levelIndex = data.frag.level;\n        fragmentError = true;\n        break;\n\n      case errors[\"ErrorDetails\"].LEVEL_LOAD_ERROR:\n      case errors[\"ErrorDetails\"].LEVEL_LOAD_TIMEOUT:\n        levelIndex = data.context.level;\n        levelError = true;\n        break;\n\n      case errors[\"ErrorDetails\"].REMUX_ALLOC_ERROR:\n        levelIndex = data.level;\n        levelError = true;\n        break;\n    }\n\n    if (levelIndex !== undefined) {\n      this.recoverLevel(data, levelIndex, levelError, fragmentError);\n    }\n  }\n  /**\n   * Switch to a redundant stream if any available.\n   * If redundant stream is not available, emergency switch down if ABR mode is enabled.\n   *\n   * @param {Object} errorEvent\n   * @param {Number} levelIndex current level index\n   * @param {Boolean} levelError\n   * @param {Boolean} fragmentError\n   */\n  // FIXME Find a better abstraction where fragment/level retry management is well decoupled\n  ;\n\n  _proto.recoverLevel = function recoverLevel(errorEvent, levelIndex, levelError, fragmentError) {\n    var _this2 = this;\n\n    var config = this.hls.config;\n    var errorDetails = errorEvent.details;\n    var level = this._levels[levelIndex];\n    var redundantLevels, delay, nextLevel;\n    level.loadError++;\n    level.fragmentError = fragmentError;\n\n    if (levelError) {\n      if (this.levelRetryCount + 1 <= config.levelLoadingMaxRetry) {\n        // exponential backoff capped to max retry timeout\n        delay = Math.min(Math.pow(2, this.levelRetryCount) * config.levelLoadingRetryDelay, config.levelLoadingMaxRetryTimeout); // Schedule level reload\n\n        this.timer = setTimeout(function () {\n          return _this2.loadLevel();\n        }, delay); // boolean used to inform stream controller not to switch back to IDLE on non fatal error\n\n        errorEvent.levelRetry = true;\n        this.levelRetryCount++;\n        logger[\"logger\"].warn(\"level controller, \" + errorDetails + \", retry in \" + delay + \" ms, current retry count is \" + this.levelRetryCount);\n      } else {\n        logger[\"logger\"].error(\"level controller, cannot recover from \" + errorDetails + \" error\");\n        this.currentLevelIndex = null; // stopping live reloading timer if any\n\n        this.clearTimer(); // switch error to fatal\n\n        errorEvent.fatal = true;\n        return;\n      }\n    } // Try any redundant streams if available for both errors: level and fragment\n    // If level.loadError reaches redundantLevels it means that we tried them all, no hope  => let's switch down\n\n\n    if (levelError || fragmentError) {\n      redundantLevels = level.url.length;\n\n      if (redundantLevels > 1 && level.loadError < redundantLevels) {\n        level.urlId = (level.urlId + 1) % redundantLevels;\n        level.details = undefined;\n        logger[\"logger\"].warn(\"level controller, \" + errorDetails + \" for level \" + levelIndex + \": switching to redundant URL-id \" + level.urlId); // console.log('Current audio track group ID:', this.hls.audioTracks[this.hls.audioTrack].groupId);\n        // console.log('New video quality level audio group id:', level.attrs.AUDIO);\n      } else {\n        // Search for available level\n        if (this.manualLevelIndex === -1) {\n          // When lowest level has been reached, let's start hunt from the top\n          nextLevel = levelIndex === 0 ? this._levels.length - 1 : levelIndex - 1;\n          logger[\"logger\"].warn(\"level controller, \" + errorDetails + \": switch to \" + nextLevel);\n          this.hls.nextAutoLevel = this.currentLevelIndex = nextLevel;\n        } else if (fragmentError) {\n          // Allow fragment retry as long as configuration allows.\n          // reset this._level so that another call to set level() will trigger again a frag load\n          logger[\"logger\"].warn(\"level controller, \" + errorDetails + \": reload a fragment\");\n          this.currentLevelIndex = null;\n        }\n      }\n    }\n  } // reset errors on the successful load of a fragment\n  ;\n\n  _proto.onFragLoaded = function onFragLoaded(_ref3) {\n    var frag = _ref3.frag;\n\n    if (frag !== undefined && frag.type === 'main') {\n      var level = this._levels[frag.level];\n\n      if (level !== undefined) {\n        level.fragmentError = false;\n        level.loadError = 0;\n        this.levelRetryCount = 0;\n      }\n    }\n  };\n\n  _proto.onLevelLoaded = function onLevelLoaded(data) {\n    var _this3 = this;\n\n    var level = data.level,\n        details = data.details; // only process level loaded events matching with expected level\n\n    if (level !== this.currentLevelIndex) {\n      return;\n    }\n\n    var curLevel = this._levels[level]; // reset level load error counter on successful level loaded only if there is no issues with fragments\n\n    if (!curLevel.fragmentError) {\n      curLevel.loadError = 0;\n      this.levelRetryCount = 0;\n    } // if current playlist is a live playlist, arm a timer to reload it\n\n\n    if (details.live) {\n      var reloadInterval = computeReloadInterval(curLevel.details, details, data.stats.trequest);\n      logger[\"logger\"].log(\"live playlist, reload in \" + Math.round(reloadInterval) + \" ms\");\n      this.timer = setTimeout(function () {\n        return _this3.loadLevel();\n      }, reloadInterval);\n    } else {\n      this.clearTimer();\n    }\n  };\n\n  _proto.onAudioTrackSwitched = function onAudioTrackSwitched(data) {\n    var audioGroupId = this.hls.audioTracks[data.id].groupId;\n    var currentLevel = this.hls.levels[this.currentLevelIndex];\n\n    if (!currentLevel) {\n      return;\n    }\n\n    if (currentLevel.audioGroupIds) {\n      var urlId = -1;\n\n      for (var i = 0; i < currentLevel.audioGroupIds.length; i++) {\n        if (currentLevel.audioGroupIds[i] === audioGroupId) {\n          urlId = i;\n          break;\n        }\n      }\n\n      if (urlId !== currentLevel.urlId) {\n        currentLevel.urlId = urlId;\n        this.startLoad();\n      }\n    }\n  };\n\n  _proto.loadLevel = function loadLevel() {\n    logger[\"logger\"].debug('call to loadLevel');\n\n    if (this.currentLevelIndex !== null && this.canload) {\n      var levelObject = this._levels[this.currentLevelIndex];\n\n      if (typeof levelObject === 'object' && levelObject.url.length > 0) {\n        var level = this.currentLevelIndex;\n        var id = levelObject.urlId;\n        var url = levelObject.url[id];\n        logger[\"logger\"].log(\"Attempt loading level index \" + level + \" with URL-id \" + id); // console.log('Current audio track group ID:', this.hls.audioTracks[this.hls.audioTrack].groupId);\n        // console.log('New video quality level audio group id:', levelObject.attrs.AUDIO, level);\n\n        this.hls.trigger(events[\"default\"].LEVEL_LOADING, {\n          url: url,\n          level: level,\n          id: id\n        });\n      }\n    }\n  };\n\n  _proto.removeLevel = function removeLevel(levelIndex, urlId) {\n    var levels = this.levels.filter(function (level, index) {\n      if (index !== levelIndex) {\n        return true;\n      }\n\n      if (level.url.length > 1 && urlId !== undefined) {\n        level.url = level.url.filter(function (url, id) {\n          return id !== urlId;\n        });\n        level.urlId = 0;\n        return true;\n      }\n\n      return false;\n    }).map(function (level, index) {\n      var details = level.details;\n\n      if (details && details.fragments) {\n        details.fragments.forEach(function (fragment) {\n          fragment.level = index;\n        });\n      }\n\n      return level;\n    });\n    this._levels = levels;\n    this.hls.trigger(events[\"default\"].LEVELS_UPDATED, {\n      levels: levels\n    });\n  };\n\n  level_controller_createClass(LevelController, [{\n    key: \"levels\",\n    get: function get() {\n      return this._levels;\n    }\n  }, {\n    key: \"level\",\n    get: function get() {\n      return this.currentLevelIndex;\n    },\n    set: function set(newLevel) {\n      var levels = this._levels;\n\n      if (levels) {\n        newLevel = Math.min(newLevel, levels.length - 1);\n\n        if (this.currentLevelIndex !== newLevel || !levels[newLevel].details) {\n          this.setLevelInternal(newLevel);\n        }\n      }\n    }\n  }, {\n    key: \"manualLevel\",\n    get: function get() {\n      return this.manualLevelIndex;\n    },\n    set: function set(newLevel) {\n      this.manualLevelIndex = newLevel;\n\n      if (this._startLevel === undefined) {\n        this._startLevel = newLevel;\n      }\n\n      if (newLevel !== -1) {\n        this.level = newLevel;\n      }\n    }\n  }, {\n    key: \"firstLevel\",\n    get: function get() {\n      return this._firstLevel;\n    },\n    set: function set(newLevel) {\n      this._firstLevel = newLevel;\n    }\n  }, {\n    key: \"startLevel\",\n    get: function get() {\n      // hls.startLevel takes precedence over config.startLevel\n      // if none of these values are defined, fallback on this._firstLevel (first quality level appearing in variant manifest)\n      if (this._startLevel === undefined) {\n        var configStartLevel = this.hls.config.startLevel;\n\n        if (configStartLevel !== undefined) {\n          return configStartLevel;\n        } else {\n          return this._firstLevel;\n        }\n      } else {\n        return this._startLevel;\n      }\n    },\n    set: function set(newLevel) {\n      this._startLevel = newLevel;\n    }\n  }, {\n    key: \"nextLoadLevel\",\n    get: function get() {\n      if (this.manualLevelIndex !== -1) {\n        return this.manualLevelIndex;\n      } else {\n        return this.hls.nextAutoLevel;\n      }\n    },\n    set: function set(nextLevel) {\n      this.level = nextLevel;\n\n      if (this.manualLevelIndex === -1) {\n        this.hls.nextAutoLevel = nextLevel;\n      }\n    }\n  }]);\n\n  return LevelController;\n}(event_handler);\n\n\n// EXTERNAL MODULE: ./src/demux/id3.js\nvar id3 = __nested_webpack_require_226214__(\"./src/demux/id3.js\");\n\n// CONCATENATED MODULE: ./src/utils/texttrack-utils.ts\nfunction sendAddTrackEvent(track, videoEl) {\n  var event;\n\n  try {\n    event = new Event('addtrack');\n  } catch (err) {\n    // for IE11\n    event = document.createEvent('Event');\n    event.initEvent('addtrack', false, false);\n  }\n\n  event.track = track;\n  videoEl.dispatchEvent(event);\n}\nfunction clearCurrentCues(track) {\n  if (track === null || track === void 0 ? void 0 : track.cues) {\n    while (track.cues.length > 0) {\n      track.removeCue(track.cues[0]);\n    }\n  }\n}\n/**\n *  Given a list of Cues, finds the closest cue matching the given time.\n *  Modified verison of binary search O(log(n)).\n *\n * @export\n * @param {(TextTrackCueList | TextTrackCue[])} cues - List of cues.\n * @param {number} time - Target time, to find closest cue to.\n * @returns {TextTrackCue}\n */\n\nfunction getClosestCue(cues, time) {\n  // If the offset is less than the first element, the first element is the closest.\n  if (time < cues[0].endTime) {\n    return cues[0];\n  } // If the offset is greater than the last cue, the last is the closest.\n\n\n  if (time > cues[cues.length - 1].endTime) {\n    return cues[cues.length - 1];\n  }\n\n  var left = 0;\n  var right = cues.length - 1;\n\n  while (left <= right) {\n    var mid = Math.floor((right + left) / 2);\n\n    if (time < cues[mid].endTime) {\n      right = mid - 1;\n    } else if (time > cues[mid].endTime) {\n      left = mid + 1;\n    } else {\n      // If it's not lower or higher, it must be equal.\n      return cues[mid];\n    }\n  } // At this point, left and right have swapped.\n  // No direct match was found, left or right element must be the closest. Check which one has the smallest diff.\n\n\n  return cues[left].endTime - time < time - cues[right].endTime ? cues[left] : cues[right];\n}\n// CONCATENATED MODULE: ./src/controller/id3-track-controller.js\nfunction id3_track_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n/*\n * id3 metadata track controller\n*/\n\n\n\n\nvar MIN_CUE_DURATION = 0.25;\n\nvar id3_track_controller_ID3TrackController = /*#__PURE__*/function (_EventHandler) {\n  id3_track_controller_inheritsLoose(ID3TrackController, _EventHandler);\n\n  function ID3TrackController(hls) {\n    var _this;\n\n    _this = _EventHandler.call(this, hls, events[\"default\"].MEDIA_ATTACHED, events[\"default\"].MEDIA_DETACHING, events[\"default\"].FRAG_PARSING_METADATA, events[\"default\"].LIVE_BACK_BUFFER_REACHED) || this;\n    _this.id3Track = undefined;\n    _this.media = undefined;\n    return _this;\n  }\n\n  var _proto = ID3TrackController.prototype;\n\n  _proto.destroy = function destroy() {\n    event_handler.prototype.destroy.call(this);\n  } // Add ID3 metatadata text track.\n  ;\n\n  _proto.onMediaAttached = function onMediaAttached(data) {\n    this.media = data.media;\n\n    if (!this.media) {}\n  };\n\n  _proto.onMediaDetaching = function onMediaDetaching() {\n    clearCurrentCues(this.id3Track);\n    this.id3Track = undefined;\n    this.media = undefined;\n  };\n\n  _proto.getID3Track = function getID3Track(textTracks) {\n    for (var i = 0; i < textTracks.length; i++) {\n      var textTrack = textTracks[i];\n\n      if (textTrack.kind === 'metadata' && textTrack.label === 'id3') {\n        // send 'addtrack' when reusing the textTrack for metadata,\n        // same as what we do for captions\n        sendAddTrackEvent(textTrack, this.media);\n        return textTrack;\n      }\n    }\n\n    return this.media.addTextTrack('metadata', 'id3');\n  };\n\n  _proto.onFragParsingMetadata = function onFragParsingMetadata(data) {\n    var fragment = data.frag;\n    var samples = data.samples; // create track dynamically\n\n    if (!this.id3Track) {\n      this.id3Track = this.getID3Track(this.media.textTracks);\n      this.id3Track.mode = 'hidden';\n    } // Attempt to recreate Safari functionality by creating\n    // WebKitDataCue objects when available and store the decoded\n    // ID3 data in the value property of the cue\n\n\n    var Cue = window.WebKitDataCue || window.VTTCue || window.TextTrackCue;\n\n    for (var i = 0; i < samples.length; i++) {\n      var frames = id3[\"default\"].getID3Frames(samples[i].data);\n\n      if (frames) {\n        // Ensure the pts is positive - sometimes it's reported as a small negative number\n        var startTime = Math.max(samples[i].pts, 0);\n        var endTime = i < samples.length - 1 ? samples[i + 1].pts : fragment.endPTS;\n\n        if (!endTime) {\n          endTime = fragment.start + fragment.duration;\n        }\n\n        var timeDiff = endTime - startTime;\n\n        if (timeDiff <= 0) {\n          endTime = startTime + MIN_CUE_DURATION;\n        }\n\n        for (var j = 0; j < frames.length; j++) {\n          var frame = frames[j]; // Safari doesn't put the timestamp frame in the TextTrack\n\n          if (!id3[\"default\"].isTimeStampFrame(frame)) {\n            var cue = new Cue(startTime, endTime, '');\n            cue.value = frame;\n            this.id3Track.addCue(cue);\n          }\n        }\n      }\n    }\n  };\n\n  _proto.onLiveBackBufferReached = function onLiveBackBufferReached(_ref) {\n    var bufferEnd = _ref.bufferEnd;\n    var id3Track = this.id3Track;\n\n    if (!id3Track || !id3Track.cues || !id3Track.cues.length) {\n      return;\n    }\n\n    var foundCue = getClosestCue(id3Track.cues, bufferEnd);\n\n    if (!foundCue) {\n      return;\n    }\n\n    while (id3Track.cues[0] !== foundCue) {\n      id3Track.removeCue(id3Track.cues[0]);\n    }\n  };\n\n  return ID3TrackController;\n}(event_handler);\n\n/* harmony default export */ var id3_track_controller = (id3_track_controller_ID3TrackController);\n// CONCATENATED MODULE: ./src/is-supported.ts\n\nfunction is_supported_isSupported() {\n  var mediaSource = getMediaSource();\n\n  if (!mediaSource) {\n    return false;\n  }\n\n  var sourceBuffer = self.SourceBuffer || self.WebKitSourceBuffer;\n  var isTypeSupported = mediaSource && typeof mediaSource.isTypeSupported === 'function' && mediaSource.isTypeSupported('video/mp4; codecs=\"avc1.42E01E,mp4a.40.2\"'); // if SourceBuffer is exposed ensure its API is valid\n  // safari and old version of Chrome doe not expose SourceBuffer globally so checking SourceBuffer.prototype is impossible\n\n  var sourceBufferValidAPI = !sourceBuffer || sourceBuffer.prototype && typeof sourceBuffer.prototype.appendBuffer === 'function' && typeof sourceBuffer.prototype.remove === 'function';\n  return !!isTypeSupported && !!sourceBufferValidAPI;\n}\n// CONCATENATED MODULE: ./src/utils/ewma.ts\n/*\n * compute an Exponential Weighted moving average\n * - https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average\n *  - heavily inspired from shaka-player\n */\nvar EWMA = /*#__PURE__*/function () {\n  //  About half of the estimated value will be from the last |halfLife| samples by weight.\n  function EWMA(halfLife) {\n    this.alpha_ = void 0;\n    this.estimate_ = void 0;\n    this.totalWeight_ = void 0;\n    // Larger values of alpha expire historical data more slowly.\n    this.alpha_ = halfLife ? Math.exp(Math.log(0.5) / halfLife) : 0;\n    this.estimate_ = 0;\n    this.totalWeight_ = 0;\n  }\n\n  var _proto = EWMA.prototype;\n\n  _proto.sample = function sample(weight, value) {\n    var adjAlpha = Math.pow(this.alpha_, weight);\n    this.estimate_ = value * (1 - adjAlpha) + adjAlpha * this.estimate_;\n    this.totalWeight_ += weight;\n  };\n\n  _proto.getTotalWeight = function getTotalWeight() {\n    return this.totalWeight_;\n  };\n\n  _proto.getEstimate = function getEstimate() {\n    if (this.alpha_) {\n      var zeroFactor = 1 - Math.pow(this.alpha_, this.totalWeight_);\n      return this.estimate_ / zeroFactor;\n    } else {\n      return this.estimate_;\n    }\n  };\n\n  return EWMA;\n}();\n\n/* harmony default export */ var ewma = (EWMA);\n// CONCATENATED MODULE: ./src/utils/ewma-bandwidth-estimator.ts\n/*\n * EWMA Bandwidth Estimator\n *  - heavily inspired from shaka-player\n * Tracks bandwidth samples and estimates available bandwidth.\n * Based on the minimum of two exponentially-weighted moving averages with\n * different half-lives.\n */\n\n\nvar ewma_bandwidth_estimator_EwmaBandWidthEstimator = /*#__PURE__*/function () {\n  // TODO(typescript-hls)\n  function EwmaBandWidthEstimator(hls, slow, fast, defaultEstimate) {\n    this.hls = void 0;\n    this.defaultEstimate_ = void 0;\n    this.minWeight_ = void 0;\n    this.minDelayMs_ = void 0;\n    this.slow_ = void 0;\n    this.fast_ = void 0;\n    this.hls = hls;\n    this.defaultEstimate_ = defaultEstimate;\n    this.minWeight_ = 0.001;\n    this.minDelayMs_ = 50;\n    this.slow_ = new ewma(slow);\n    this.fast_ = new ewma(fast);\n  }\n\n  var _proto = EwmaBandWidthEstimator.prototype;\n\n  _proto.sample = function sample(durationMs, numBytes) {\n    durationMs = Math.max(durationMs, this.minDelayMs_);\n    var numBits = 8 * numBytes,\n        // weight is duration in seconds\n    durationS = durationMs / 1000,\n        // value is bandwidth in bits/s\n    bandwidthInBps = numBits / durationS;\n    this.fast_.sample(durationS, bandwidthInBps);\n    this.slow_.sample(durationS, bandwidthInBps);\n  };\n\n  _proto.canEstimate = function canEstimate() {\n    var fast = this.fast_;\n    return fast && fast.getTotalWeight() >= this.minWeight_;\n  };\n\n  _proto.getEstimate = function getEstimate() {\n    if (this.canEstimate()) {\n      // console.log('slow estimate:'+ Math.round(this.slow_.getEstimate()));\n      // console.log('fast estimate:'+ Math.round(this.fast_.getEstimate()));\n      // Take the minimum of these two estimates.  This should have the effect of\n      // adapting down quickly, but up more slowly.\n      return Math.min(this.fast_.getEstimate(), this.slow_.getEstimate());\n    } else {\n      return this.defaultEstimate_;\n    }\n  };\n\n  _proto.destroy = function destroy() {};\n\n  return EwmaBandWidthEstimator;\n}();\n\n/* harmony default export */ var ewma_bandwidth_estimator = (ewma_bandwidth_estimator_EwmaBandWidthEstimator);\n// CONCATENATED MODULE: ./src/controller/abr-controller.js\n\n\n\nfunction abr_controller_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction abr_controller_createClass(Constructor, protoProps, staticProps) { if (protoProps) abr_controller_defineProperties(Constructor.prototype, protoProps); if (staticProps) abr_controller_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction abr_controller_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction abr_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n/*\n * simple ABR Controller\n *  - compute next level based on last fragment bw heuristics\n *  - implement an abandon rules triggered if we have less than 2 frag buffered and if computed bw shows that we risk buffer stalling\n */\n\n\n\n\n\n\nvar abr_controller_window = window,\n    abr_controller_performance = abr_controller_window.performance;\n\nvar abr_controller_AbrController = /*#__PURE__*/function (_EventHandler) {\n  abr_controller_inheritsLoose(AbrController, _EventHandler);\n\n  function AbrController(hls) {\n    var _this;\n\n    _this = _EventHandler.call(this, hls, events[\"default\"].FRAG_LOADING, events[\"default\"].FRAG_LOADED, events[\"default\"].FRAG_BUFFERED, events[\"default\"].ERROR) || this;\n    _this.lastLoadedFragLevel = 0;\n    _this._nextAutoLevel = -1;\n    _this.hls = hls;\n    _this.timer = null;\n    _this._bwEstimator = null;\n    _this.onCheck = _this._abandonRulesCheck.bind(abr_controller_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = AbrController.prototype;\n\n  _proto.destroy = function destroy() {\n    this.clearTimer();\n    event_handler.prototype.destroy.call(this);\n  };\n\n  _proto.onFragLoading = function onFragLoading(data) {\n    var frag = data.frag;\n\n    if (frag.type === 'main') {\n      if (!this.timer) {\n        this.fragCurrent = frag;\n        this.timer = setInterval(this.onCheck, 100);\n      } // lazy init of BwEstimator, rationale is that we use different params for Live/VoD\n      // so we need to wait for stream manifest / playlist type to instantiate it.\n\n\n      if (!this._bwEstimator) {\n        var hls = this.hls;\n        var config = hls.config;\n        var level = frag.level;\n        var isLive = hls.levels[level].details.live;\n        var ewmaFast;\n        var ewmaSlow;\n\n        if (isLive) {\n          ewmaFast = config.abrEwmaFastLive;\n          ewmaSlow = config.abrEwmaSlowLive;\n        } else {\n          ewmaFast = config.abrEwmaFastVoD;\n          ewmaSlow = config.abrEwmaSlowVoD;\n        }\n\n        this._bwEstimator = new ewma_bandwidth_estimator(hls, ewmaSlow, ewmaFast, config.abrEwmaDefaultEstimate);\n      }\n    }\n  };\n\n  _proto._abandonRulesCheck = function _abandonRulesCheck() {\n    /*\n      monitor fragment retrieval time...\n      we compute expected time of arrival of the complete fragment.\n      we compare it to expected time of buffer starvation\n    */\n    var hls = this.hls;\n    var video = hls.media;\n    var frag = this.fragCurrent;\n\n    if (!frag) {\n      return;\n    }\n\n    var loader = frag.loader; // if loader has been destroyed or loading has been aborted, stop timer and return\n\n    if (!loader || loader.stats && loader.stats.aborted) {\n      logger[\"logger\"].warn('frag loader destroy or aborted, disarm abandonRules');\n      this.clearTimer(); // reset forced auto level value so that next level will be selected\n\n      this._nextAutoLevel = -1;\n      return;\n    }\n\n    var stats = loader.stats;\n    /* only monitor frag retrieval time if\n    (video not paused OR first fragment being loaded(ready state === HAVE_NOTHING = 0)) AND autoswitching enabled AND not lowest level (=> means that we have several levels) */\n\n    if (video && stats && (!video.paused && video.playbackRate !== 0 || !video.readyState) && frag.autoLevel && frag.level) {\n      var requestDelay = abr_controller_performance.now() - stats.trequest;\n      var playbackRate = Math.abs(video.playbackRate); // monitor fragment load progress after half of expected fragment duration,to stabilize bitrate\n\n      if (requestDelay > 500 * frag.duration / playbackRate) {\n        var levels = hls.levels;\n        var loadRate = Math.max(1, stats.bw ? stats.bw / 8 : stats.loaded * 1000 / requestDelay); // byte/s; at least 1 byte/s to avoid division by zero\n        // compute expected fragment length using frag duration and level bitrate. also ensure that expected len is gte than already loaded size\n\n        var level = levels[frag.level];\n\n        if (!level) {\n          return;\n        }\n\n        var levelBitrate = level.realBitrate ? Math.max(level.realBitrate, level.bitrate) : level.bitrate;\n        var expectedLen = stats.total ? stats.total : Math.max(stats.loaded, Math.round(frag.duration * levelBitrate / 8));\n        var pos = video.currentTime;\n        var fragLoadedDelay = (expectedLen - stats.loaded) / loadRate;\n        var bufferStarvationDelay = (BufferHelper.bufferInfo(video, pos, hls.config.maxBufferHole).end - pos) / playbackRate; // consider emergency switch down only if we have less than 2 frag buffered AND\n        // time to finish loading current fragment is bigger than buffer starvation delay\n        // ie if we risk buffer starvation if bw does not increase quickly\n\n        if (bufferStarvationDelay < 2 * frag.duration / playbackRate && fragLoadedDelay > bufferStarvationDelay) {\n          var minAutoLevel = hls.minAutoLevel;\n          var fragLevelNextLoadedDelay;\n          var nextLoadLevel; // lets iterate through lower level and try to find the biggest one that could avoid rebuffering\n          // we start from current level - 1 and we step down , until we find a matching level\n\n          for (nextLoadLevel = frag.level - 1; nextLoadLevel > minAutoLevel; nextLoadLevel--) {\n            // compute time to load next fragment at lower level\n            // 0.8 : consider only 80% of current bw to be conservative\n            // 8 = bits per byte (bps/Bps)\n            var levelNextBitrate = levels[nextLoadLevel].realBitrate ? Math.max(levels[nextLoadLevel].realBitrate, levels[nextLoadLevel].bitrate) : levels[nextLoadLevel].bitrate;\n\n            var _fragLevelNextLoadedDelay = frag.duration * levelNextBitrate / (8 * 0.8 * loadRate);\n\n            if (_fragLevelNextLoadedDelay < bufferStarvationDelay) {\n              // we found a lower level that be rebuffering free with current estimated bw !\n              break;\n            }\n          } // only emergency switch down if it takes less time to load new fragment at lowest level instead\n          // of finishing loading current one ...\n\n\n          if (fragLevelNextLoadedDelay < fragLoadedDelay) {\n            logger[\"logger\"].warn(\"loading too slow, abort fragment loading and switch to level \" + nextLoadLevel + \":fragLoadedDelay[\" + nextLoadLevel + \"]<fragLoadedDelay[\" + (frag.level - 1) + \"];bufferStarvationDelay:\" + fragLevelNextLoadedDelay.toFixed(1) + \"<\" + fragLoadedDelay.toFixed(1) + \":\" + bufferStarvationDelay.toFixed(1)); // force next load level in auto mode\n\n            hls.nextLoadLevel = nextLoadLevel; // update bw estimate for this fragment before cancelling load (this will help reducing the bw)\n\n            this._bwEstimator.sample(requestDelay, stats.loaded); // abort fragment loading\n\n\n            loader.abort(); // stop abandon rules timer\n\n            this.clearTimer();\n            hls.trigger(events[\"default\"].FRAG_LOAD_EMERGENCY_ABORTED, {\n              frag: frag,\n              stats: stats\n            });\n          }\n        }\n      }\n    }\n  };\n\n  _proto.onFragLoaded = function onFragLoaded(data) {\n    var frag = data.frag;\n\n    if (frag.type === 'main' && Object(number[\"isFiniteNumber\"])(frag.sn)) {\n      // stop monitoring bw once frag loaded\n      this.clearTimer(); // store level id after successful fragment load\n\n      this.lastLoadedFragLevel = frag.level; // reset forced auto level value so that next level will be selected\n\n      this._nextAutoLevel = -1; // compute level average bitrate\n\n      if (this.hls.config.abrMaxWithRealBitrate) {\n        var level = this.hls.levels[frag.level];\n        var loadedBytes = (level.loaded ? level.loaded.bytes : 0) + data.stats.loaded;\n        var loadedDuration = (level.loaded ? level.loaded.duration : 0) + data.frag.duration;\n        level.loaded = {\n          bytes: loadedBytes,\n          duration: loadedDuration\n        };\n        level.realBitrate = Math.round(8 * loadedBytes / loadedDuration);\n      } // if fragment has been loaded to perform a bitrate test,\n\n\n      if (data.frag.bitrateTest) {\n        var stats = data.stats;\n        stats.tparsed = stats.tbuffered = stats.tload;\n        this.onFragBuffered(data);\n      }\n    }\n  };\n\n  _proto.onFragBuffered = function onFragBuffered(data) {\n    var stats = data.stats;\n    var frag = data.frag; // only update stats on first frag buffering\n    // if same frag is loaded multiple times, it might be in browser cache, and loaded quickly\n    // and leading to wrong bw estimation\n    // on bitrate test, also only update stats once (if tload = tbuffered == on FRAG_LOADED)\n\n    if (stats.aborted !== true && frag.type === 'main' && Object(number[\"isFiniteNumber\"])(frag.sn) && (!frag.bitrateTest || stats.tload === stats.tbuffered)) {\n      // use tparsed-trequest instead of tbuffered-trequest to compute fragLoadingProcessing; rationale is that  buffer appending only happens once media is attached\n      // in case we use config.startFragPrefetch while media is not attached yet, fragment might be parsed while media not attached yet, but it will only be buffered on media attached\n      // as a consequence it could happen really late in the process. meaning that appending duration might appears huge ... leading to underestimated throughput estimation\n      var fragLoadingProcessingMs = stats.tparsed - stats.trequest;\n      logger[\"logger\"].log(\"latency/loading/parsing/append/kbps:\" + Math.round(stats.tfirst - stats.trequest) + \"/\" + Math.round(stats.tload - stats.tfirst) + \"/\" + Math.round(stats.tparsed - stats.tload) + \"/\" + Math.round(stats.tbuffered - stats.tparsed) + \"/\" + Math.round(8 * stats.loaded / (stats.tbuffered - stats.trequest)));\n\n      this._bwEstimator.sample(fragLoadingProcessingMs, stats.loaded);\n\n      stats.bwEstimate = this._bwEstimator.getEstimate(); // if fragment has been loaded to perform a bitrate test, (hls.startLevel = -1), store bitrate test delay duration\n\n      if (frag.bitrateTest) {\n        this.bitrateTestDelay = fragLoadingProcessingMs / 1000;\n      } else {\n        this.bitrateTestDelay = 0;\n      }\n    }\n  };\n\n  _proto.onError = function onError(data) {\n    // stop timer in case of frag loading error\n    switch (data.details) {\n      case errors[\"ErrorDetails\"].FRAG_LOAD_ERROR:\n      case errors[\"ErrorDetails\"].FRAG_LOAD_TIMEOUT:\n        this.clearTimer();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  _proto.clearTimer = function clearTimer() {\n    clearInterval(this.timer);\n    this.timer = null;\n  } // return next auto level\n  ;\n\n  _proto._findBestLevel = function _findBestLevel(currentLevel, currentFragDuration, currentBw, minAutoLevel, maxAutoLevel, maxFetchDuration, bwFactor, bwUpFactor, levels) {\n    for (var i = maxAutoLevel; i >= minAutoLevel; i--) {\n      var levelInfo = levels[i];\n\n      if (!levelInfo) {\n        continue;\n      }\n\n      var levelDetails = levelInfo.details;\n      var avgDuration = levelDetails ? levelDetails.totalduration / levelDetails.fragments.length : currentFragDuration;\n      var live = levelDetails ? levelDetails.live : false;\n      var adjustedbw = void 0; // follow algorithm captured from stagefright :\n      // https://android.googlesource.com/platform/frameworks/av/+/master/media/libstagefright/httplive/LiveSession.cpp\n      // Pick the highest bandwidth stream below or equal to estimated bandwidth.\n      // consider only 80% of the available bandwidth, but if we are switching up,\n      // be even more conservative (70%) to avoid overestimating and immediately\n      // switching back.\n\n      if (i <= currentLevel) {\n        adjustedbw = bwFactor * currentBw;\n      } else {\n        adjustedbw = bwUpFactor * currentBw;\n      }\n\n      var bitrate = levels[i].realBitrate ? Math.max(levels[i].realBitrate, levels[i].bitrate) : levels[i].bitrate;\n      var fetchDuration = bitrate * avgDuration / adjustedbw;\n      logger[\"logger\"].trace(\"level/adjustedbw/bitrate/avgDuration/maxFetchDuration/fetchDuration: \" + i + \"/\" + Math.round(adjustedbw) + \"/\" + bitrate + \"/\" + avgDuration + \"/\" + maxFetchDuration + \"/\" + fetchDuration); // if adjusted bw is greater than level bitrate AND\n\n      if (adjustedbw > bitrate && ( // fragment fetchDuration unknown OR live stream OR fragment fetchDuration less than max allowed fetch duration, then this level matches\n      // we don't account for max Fetch Duration for live streams, this is to avoid switching down when near the edge of live sliding window ...\n      // special case to support startLevel = -1 (bitrateTest) on live streams : in that case we should not exit loop so that _findBestLevel will return -1\n      !fetchDuration || live && !this.bitrateTestDelay || fetchDuration < maxFetchDuration)) {\n        // as we are looping from highest to lowest, this will return the best achievable quality level\n        return i;\n      }\n    } // not enough time budget even with quality level 0 ... rebuffering might happen\n\n\n    return -1;\n  };\n\n  abr_controller_createClass(AbrController, [{\n    key: \"nextAutoLevel\",\n    get: function get() {\n      var forcedAutoLevel = this._nextAutoLevel;\n      var bwEstimator = this._bwEstimator; // in case next auto level has been forced, and bw not available or not reliable, return forced value\n\n      if (forcedAutoLevel !== -1 && (!bwEstimator || !bwEstimator.canEstimate())) {\n        return forcedAutoLevel;\n      } // compute next level using ABR logic\n\n\n      var nextABRAutoLevel = this._nextABRAutoLevel; // if forced auto level has been defined, use it to cap ABR computed quality level\n\n      if (forcedAutoLevel !== -1) {\n        nextABRAutoLevel = Math.min(forcedAutoLevel, nextABRAutoLevel);\n      }\n\n      return nextABRAutoLevel;\n    },\n    set: function set(nextLevel) {\n      this._nextAutoLevel = nextLevel;\n    }\n  }, {\n    key: \"_nextABRAutoLevel\",\n    get: function get() {\n      var hls = this.hls;\n      var maxAutoLevel = hls.maxAutoLevel,\n          levels = hls.levels,\n          config = hls.config,\n          minAutoLevel = hls.minAutoLevel;\n      var video = hls.media;\n      var currentLevel = this.lastLoadedFragLevel;\n      var currentFragDuration = this.fragCurrent ? this.fragCurrent.duration : 0;\n      var pos = video ? video.currentTime : 0; // playbackRate is the absolute value of the playback rate; if video.playbackRate is 0, we use 1 to load as\n      // if we're playing back at the normal rate.\n\n      var playbackRate = video && video.playbackRate !== 0 ? Math.abs(video.playbackRate) : 1.0;\n      var avgbw = this._bwEstimator ? this._bwEstimator.getEstimate() : config.abrEwmaDefaultEstimate; // bufferStarvationDelay is the wall-clock time left until the playback buffer is exhausted.\n\n      var bufferStarvationDelay = (BufferHelper.bufferInfo(video, pos, config.maxBufferHole).end - pos) / playbackRate; // First, look to see if we can find a level matching with our avg bandwidth AND that could also guarantee no rebuffering at all\n\n      var bestLevel = this._findBestLevel(currentLevel, currentFragDuration, avgbw, minAutoLevel, maxAutoLevel, bufferStarvationDelay, config.abrBandWidthFactor, config.abrBandWidthUpFactor, levels);\n\n      if (bestLevel >= 0) {\n        return bestLevel;\n      } else {\n        logger[\"logger\"].trace('rebuffering expected to happen, lets try to find a quality level minimizing the rebuffering'); // not possible to get rid of rebuffering ... let's try to find level that will guarantee less than maxStarvationDelay of rebuffering\n        // if no matching level found, logic will return 0\n\n        var maxStarvationDelay = currentFragDuration ? Math.min(currentFragDuration, config.maxStarvationDelay) : config.maxStarvationDelay;\n        var bwFactor = config.abrBandWidthFactor;\n        var bwUpFactor = config.abrBandWidthUpFactor;\n\n        if (bufferStarvationDelay === 0) {\n          // in case buffer is empty, let's check if previous fragment was loaded to perform a bitrate test\n          var bitrateTestDelay = this.bitrateTestDelay;\n\n          if (bitrateTestDelay) {\n            // if it is the case, then we need to adjust our max starvation delay using maxLoadingDelay config value\n            // max video loading delay used in  automatic start level selection :\n            // in that mode ABR controller will ensure that video loading time (ie the time to fetch the first fragment at lowest quality level +\n            // the time to fetch the fragment at the appropriate quality level is less than ```maxLoadingDelay``` )\n            // cap maxLoadingDelay and ensure it is not bigger 'than bitrate test' frag duration\n            var maxLoadingDelay = currentFragDuration ? Math.min(currentFragDuration, config.maxLoadingDelay) : config.maxLoadingDelay;\n            maxStarvationDelay = maxLoadingDelay - bitrateTestDelay;\n            logger[\"logger\"].trace(\"bitrate test took \" + Math.round(1000 * bitrateTestDelay) + \"ms, set first fragment max fetchDuration to \" + Math.round(1000 * maxStarvationDelay) + \" ms\"); // don't use conservative factor on bitrate test\n\n            bwFactor = bwUpFactor = 1;\n          }\n        }\n\n        bestLevel = this._findBestLevel(currentLevel, currentFragDuration, avgbw, minAutoLevel, maxAutoLevel, bufferStarvationDelay + maxStarvationDelay, bwFactor, bwUpFactor, levels);\n        return Math.max(bestLevel, 0);\n      }\n    }\n  }]);\n\n  return AbrController;\n}(event_handler);\n\n/* harmony default export */ var abr_controller = (abr_controller_AbrController);\n// CONCATENATED MODULE: ./src/controller/buffer-controller.ts\n\n\nfunction buffer_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n/*\n * Buffer Controller\n */\n\n\n\n\n\nvar buffer_controller_MediaSource = getMediaSource();\n\nvar buffer_controller_BufferController = /*#__PURE__*/function (_EventHandler) {\n  buffer_controller_inheritsLoose(BufferController, _EventHandler);\n\n  // the value that we have set mediasource.duration to\n  // (the actual duration may be tweaked slighly by the browser)\n  // the value that we want to set mediaSource.duration to\n  // the target duration of the current media playlist\n  // current stream state: true - for live broadcast, false - for VoD content\n  // cache the self generated object url to detect hijack of video tag\n  // signals that the sourceBuffers need to be flushed\n  // signals that mediaSource should have endOfStream called\n  // this is optional because this property is removed from the class sometimes\n  // The number of BUFFER_CODEC events received before any sourceBuffers are created\n  // The total number of BUFFER_CODEC events received\n  // A reference to the attached media element\n  // A reference to the active media source\n  // List of pending segments to be appended to source buffer\n  // A guard to see if we are currently appending to the source buffer\n  // counters\n  function BufferController(hls) {\n    var _this;\n\n    _this = _EventHandler.call(this, hls, events[\"default\"].MEDIA_ATTACHING, events[\"default\"].MEDIA_DETACHING, events[\"default\"].MANIFEST_PARSED, events[\"default\"].BUFFER_RESET, events[\"default\"].BUFFER_APPENDING, events[\"default\"].BUFFER_CODECS, events[\"default\"].BUFFER_EOS, events[\"default\"].BUFFER_FLUSHING, events[\"default\"].LEVEL_PTS_UPDATED, events[\"default\"].LEVEL_UPDATED) || this;\n    _this._msDuration = null;\n    _this._levelDuration = null;\n    _this._levelTargetDuration = 10;\n    _this._live = null;\n    _this._objectUrl = null;\n    _this._needsFlush = false;\n    _this._needsEos = false;\n    _this.config = void 0;\n    _this.audioTimestampOffset = void 0;\n    _this.bufferCodecEventsExpected = 0;\n    _this._bufferCodecEventsTotal = 0;\n    _this.media = null;\n    _this.mediaSource = null;\n    _this.segments = [];\n    _this.parent = void 0;\n    _this.appending = false;\n    _this.appended = 0;\n    _this.appendError = 0;\n    _this.flushBufferCounter = 0;\n    _this.tracks = {};\n    _this.pendingTracks = {};\n    _this.sourceBuffer = {};\n    _this.flushRange = [];\n\n    _this._onMediaSourceOpen = function () {\n      logger[\"logger\"].log('media source opened');\n\n      _this.hls.trigger(events[\"default\"].MEDIA_ATTACHED, {\n        media: _this.media\n      });\n\n      var mediaSource = _this.mediaSource;\n\n      if (mediaSource) {\n        // once received, don't listen anymore to sourceopen event\n        mediaSource.removeEventListener('sourceopen', _this._onMediaSourceOpen);\n      }\n\n      _this.checkPendingTracks();\n    };\n\n    _this._onMediaSourceClose = function () {\n      logger[\"logger\"].log('media source closed');\n    };\n\n    _this._onMediaSourceEnded = function () {\n      logger[\"logger\"].log('media source ended');\n    };\n\n    _this._onSBUpdateEnd = function () {\n      // update timestampOffset\n      if (_this.audioTimestampOffset && _this.sourceBuffer.audio) {\n        var audioBuffer = _this.sourceBuffer.audio;\n        logger[\"logger\"].warn(\"change mpeg audio timestamp offset from \" + audioBuffer.timestampOffset + \" to \" + _this.audioTimestampOffset);\n        audioBuffer.timestampOffset = _this.audioTimestampOffset;\n        delete _this.audioTimestampOffset;\n      }\n\n      if (_this._needsFlush) {\n        _this.doFlush();\n      }\n\n      if (_this._needsEos) {\n        _this.checkEos();\n      }\n\n      _this.appending = false;\n      var parent = _this.parent; // count nb of pending segments waiting for appending on this sourcebuffer\n\n      var pending = _this.segments.reduce(function (counter, segment) {\n        return segment.parent === parent ? counter + 1 : counter;\n      }, 0); // this.sourceBuffer is better to use than media.buffered as it is closer to the PTS data from the fragments\n\n\n      var timeRanges = {};\n      var sbSet = _this.sourceBuffer;\n\n      for (var streamType in sbSet) {\n        var sb = sbSet[streamType];\n\n        if (!sb) {\n          throw Error(\"handling source buffer update end error: source buffer for \" + streamType + \" uninitilized and unable to update buffered TimeRanges.\");\n        }\n\n        timeRanges[streamType] = sb.buffered;\n      }\n\n      _this.hls.trigger(events[\"default\"].BUFFER_APPENDED, {\n        parent: parent,\n        pending: pending,\n        timeRanges: timeRanges\n      }); // don't append in flushing mode\n\n\n      if (!_this._needsFlush) {\n        _this.doAppending();\n      }\n\n      _this.updateMediaElementDuration(); // appending goes first\n\n\n      if (pending === 0) {\n        _this.flushLiveBackBuffer();\n      }\n    };\n\n    _this._onSBUpdateError = function (event) {\n      logger[\"logger\"].error('sourceBuffer error:', event); // according to http://www.w3.org/TR/media-source/#sourcebuffer-append-error\n      // this error might not always be fatal (it is fatal if decode error is set, in that case\n      // it will be followed by a mediaElement error ...)\n\n      _this.hls.trigger(events[\"default\"].ERROR, {\n        type: errors[\"ErrorTypes\"].MEDIA_ERROR,\n        details: errors[\"ErrorDetails\"].BUFFER_APPENDING_ERROR,\n        fatal: false\n      }); // we don't need to do more than that, as accordin to the spec, updateend will be fired just after\n\n    };\n\n    _this.config = hls.config;\n    return _this;\n  }\n\n  var _proto = BufferController.prototype;\n\n  _proto.destroy = function destroy() {\n    event_handler.prototype.destroy.call(this);\n  };\n\n  _proto.onLevelPtsUpdated = function onLevelPtsUpdated(data) {\n    var type = data.type;\n    var audioTrack = this.tracks.audio; // Adjusting `SourceBuffer.timestampOffset` (desired point in the timeline where the next frames should be appended)\n    // in Chrome browser when we detect MPEG audio container and time delta between level PTS and `SourceBuffer.timestampOffset`\n    // is greater than 100ms (this is enough to handle seek for VOD or level change for LIVE videos). At the time of change we issue\n    // `SourceBuffer.abort()` and adjusting `SourceBuffer.timestampOffset` if `SourceBuffer.updating` is false or awaiting `updateend`\n    // event if SB is in updating state.\n    // More info here: https://github.com/video-dev/hls.js/issues/332#issuecomment-257986486\n\n    if (type === 'audio' && audioTrack && audioTrack.container === 'audio/mpeg') {\n      // Chrome audio mp3 track\n      var audioBuffer = this.sourceBuffer.audio;\n\n      if (!audioBuffer) {\n        throw Error('Level PTS Updated and source buffer for audio uninitalized');\n      }\n\n      var delta = Math.abs(audioBuffer.timestampOffset - data.start); // adjust timestamp offset if time delta is greater than 100ms\n\n      if (delta > 0.1) {\n        var updating = audioBuffer.updating;\n\n        try {\n          audioBuffer.abort();\n        } catch (err) {\n          logger[\"logger\"].warn('can not abort audio buffer: ' + err);\n        }\n\n        if (!updating) {\n          logger[\"logger\"].warn('change mpeg audio timestamp offset from ' + audioBuffer.timestampOffset + ' to ' + data.start);\n          audioBuffer.timestampOffset = data.start;\n        } else {\n          this.audioTimestampOffset = data.start;\n        }\n      }\n    }\n  };\n\n  _proto.onManifestParsed = function onManifestParsed(data) {\n    // in case of alt audio (where all tracks have urls) 2 BUFFER_CODECS events will be triggered, one per stream controller\n    // sourcebuffers will be created all at once when the expected nb of tracks will be reached\n    // in case alt audio is not used, only one BUFFER_CODEC event will be fired from main stream controller\n    // it will contain the expected nb of source buffers, no need to compute it\n    var codecEvents = 2;\n\n    if (data.audio && !data.video || !data.altAudio) {\n      codecEvents = 1;\n    }\n\n    this.bufferCodecEventsExpected = this._bufferCodecEventsTotal = codecEvents;\n    logger[\"logger\"].log(this.bufferCodecEventsExpected + \" bufferCodec event(s) expected\");\n  };\n\n  _proto.onMediaAttaching = function onMediaAttaching(data) {\n    var media = this.media = data.media;\n\n    if (media && buffer_controller_MediaSource) {\n      // setup the media source\n      var ms = this.mediaSource = new buffer_controller_MediaSource(); // Media Source listeners\n\n      ms.addEventListener('sourceopen', this._onMediaSourceOpen);\n      ms.addEventListener('sourceended', this._onMediaSourceEnded);\n      ms.addEventListener('sourceclose', this._onMediaSourceClose); // link video and media Source\n\n      media.src = window.URL.createObjectURL(ms); // cache the locally generated object url\n\n      this._objectUrl = media.src;\n    }\n  };\n\n  _proto.onMediaDetaching = function onMediaDetaching() {\n    logger[\"logger\"].log('media source detaching');\n    var ms = this.mediaSource;\n\n    if (ms) {\n      if (ms.readyState === 'open') {\n        try {\n          // endOfStream could trigger exception if any sourcebuffer is in updating state\n          // we don't really care about checking sourcebuffer state here,\n          // as we are anyway detaching the MediaSource\n          // let's just avoid this exception to propagate\n          ms.endOfStream();\n        } catch (err) {\n          logger[\"logger\"].warn(\"onMediaDetaching:\" + err.message + \" while calling endOfStream\");\n        }\n      }\n\n      ms.removeEventListener('sourceopen', this._onMediaSourceOpen);\n      ms.removeEventListener('sourceended', this._onMediaSourceEnded);\n      ms.removeEventListener('sourceclose', this._onMediaSourceClose); // Detach properly the MediaSource from the HTMLMediaElement as\n      // suggested in https://github.com/w3c/media-source/issues/53.\n\n      if (this.media) {\n        if (this._objectUrl) {\n          window.URL.revokeObjectURL(this._objectUrl);\n        } // clean up video tag src only if it's our own url. some external libraries might\n        // hijack the video tag and change its 'src' without destroying the Hls instance first\n\n\n        if (this.media.src === this._objectUrl) {\n          this.media.removeAttribute('src');\n          this.media.load();\n        } else {\n          logger[\"logger\"].warn('media.src was changed by a third party - skip cleanup');\n        }\n      }\n\n      this.mediaSource = null;\n      this.media = null;\n      this._objectUrl = null;\n      this.bufferCodecEventsExpected = this._bufferCodecEventsTotal;\n      this.pendingTracks = {};\n      this.tracks = {};\n      this.sourceBuffer = {};\n      this.flushRange = [];\n      this.segments = [];\n      this.appended = 0;\n    }\n\n    this.hls.trigger(events[\"default\"].MEDIA_DETACHED);\n  };\n\n  _proto.checkPendingTracks = function checkPendingTracks() {\n    var bufferCodecEventsExpected = this.bufferCodecEventsExpected,\n        pendingTracks = this.pendingTracks; // Check if we've received all of the expected bufferCodec events. When none remain, create all the sourceBuffers at once.\n    // This is important because the MSE spec allows implementations to throw QuotaExceededErrors if creating new sourceBuffers after\n    // data has been appended to existing ones.\n    // 2 tracks is the max (one for audio, one for video). If we've reach this max go ahead and create the buffers.\n\n    var pendingTracksCount = Object.keys(pendingTracks).length;\n\n    if (pendingTracksCount && !bufferCodecEventsExpected || pendingTracksCount === 2) {\n      // ok, let's create them now !\n      this.createSourceBuffers(pendingTracks);\n      this.pendingTracks = {}; // append any pending segments now !\n\n      this.doAppending();\n    }\n  };\n\n  _proto.onBufferReset = function onBufferReset() {\n    var sourceBuffer = this.sourceBuffer;\n\n    for (var type in sourceBuffer) {\n      var sb = sourceBuffer[type];\n\n      try {\n        if (sb) {\n          if (this.mediaSource) {\n            this.mediaSource.removeSourceBuffer(sb);\n          }\n\n          sb.removeEventListener('updateend', this._onSBUpdateEnd);\n          sb.removeEventListener('error', this._onSBUpdateError);\n        }\n      } catch (err) {}\n    }\n\n    this.sourceBuffer = {};\n    this.flushRange = [];\n    this.segments = [];\n    this.appended = 0;\n  };\n\n  _proto.onBufferCodecs = function onBufferCodecs(tracks) {\n    var _this2 = this;\n\n    // if source buffer(s) not created yet, appended buffer tracks in this.pendingTracks\n    // if sourcebuffers already created, do nothing ...\n    if (Object.keys(this.sourceBuffer).length) {\n      return;\n    }\n\n    Object.keys(tracks).forEach(function (trackName) {\n      _this2.pendingTracks[trackName] = tracks[trackName];\n    });\n    this.bufferCodecEventsExpected = Math.max(this.bufferCodecEventsExpected - 1, 0);\n\n    if (this.mediaSource && this.mediaSource.readyState === 'open') {\n      this.checkPendingTracks();\n    }\n  };\n\n  _proto.createSourceBuffers = function createSourceBuffers(tracks) {\n    var sourceBuffer = this.sourceBuffer,\n        mediaSource = this.mediaSource;\n\n    if (!mediaSource) {\n      throw Error('createSourceBuffers called when mediaSource was null');\n    }\n\n    for (var trackName in tracks) {\n      if (!sourceBuffer[trackName]) {\n        var track = tracks[trackName];\n\n        if (!track) {\n          throw Error(\"source buffer exists for track \" + trackName + \", however track does not\");\n        } // use levelCodec as first priority\n\n\n        var codec = track.levelCodec || track.codec;\n        var mimeType = track.container + \";codecs=\" + codec;\n        logger[\"logger\"].log(\"creating sourceBuffer(\" + mimeType + \")\");\n\n        try {\n          var sb = sourceBuffer[trackName] = mediaSource.addSourceBuffer(mimeType);\n          sb.addEventListener('updateend', this._onSBUpdateEnd);\n          sb.addEventListener('error', this._onSBUpdateError);\n          this.tracks[trackName] = {\n            buffer: sb,\n            codec: codec,\n            id: track.id,\n            container: track.container,\n            levelCodec: track.levelCodec\n          };\n        } catch (err) {\n          logger[\"logger\"].error(\"error while trying to add sourceBuffer:\" + err.message);\n          this.hls.trigger(events[\"default\"].ERROR, {\n            type: errors[\"ErrorTypes\"].MEDIA_ERROR,\n            details: errors[\"ErrorDetails\"].BUFFER_ADD_CODEC_ERROR,\n            fatal: false,\n            err: err,\n            mimeType: mimeType\n          });\n        }\n      }\n    }\n\n    this.hls.trigger(events[\"default\"].BUFFER_CREATED, {\n      tracks: this.tracks\n    });\n  };\n\n  _proto.onBufferAppending = function onBufferAppending(data) {\n    if (!this._needsFlush) {\n      if (!this.segments) {\n        this.segments = [data];\n      } else {\n        this.segments.push(data);\n      }\n\n      this.doAppending();\n    }\n  } // on BUFFER_EOS mark matching sourcebuffer(s) as ended and trigger checkEos()\n  // an undefined data.type will mark all buffers as EOS.\n  ;\n\n  _proto.onBufferEos = function onBufferEos(data) {\n    for (var type in this.sourceBuffer) {\n      if (!data.type || data.type === type) {\n        var sb = this.sourceBuffer[type];\n\n        if (sb && !sb.ended) {\n          sb.ended = true;\n          logger[\"logger\"].log(type + \" sourceBuffer now EOS\");\n        }\n      }\n    }\n\n    this.checkEos();\n  } // if all source buffers are marked as ended, signal endOfStream() to MediaSource.\n  ;\n\n  _proto.checkEos = function checkEos() {\n    var sourceBuffer = this.sourceBuffer,\n        mediaSource = this.mediaSource;\n\n    if (!mediaSource || mediaSource.readyState !== 'open') {\n      this._needsEos = false;\n      return;\n    }\n\n    for (var type in sourceBuffer) {\n      var sb = sourceBuffer[type];\n      if (!sb) continue;\n\n      if (!sb.ended) {\n        return;\n      }\n\n      if (sb.updating) {\n        this._needsEos = true;\n        return;\n      }\n    }\n\n    logger[\"logger\"].log('all media data are available, signal endOfStream() to MediaSource and stop loading fragment'); // Notify the media element that it now has all of the media data\n\n    try {\n      mediaSource.endOfStream();\n    } catch (e) {\n      logger[\"logger\"].warn('exception while calling mediaSource.endOfStream()');\n    }\n\n    this._needsEos = false;\n  };\n\n  _proto.onBufferFlushing = function onBufferFlushing(data) {\n    if (data.type) {\n      this.flushRange.push({\n        start: data.startOffset,\n        end: data.endOffset,\n        type: data.type\n      });\n    } else {\n      this.flushRange.push({\n        start: data.startOffset,\n        end: data.endOffset,\n        type: 'video'\n      });\n      this.flushRange.push({\n        start: data.startOffset,\n        end: data.endOffset,\n        type: 'audio'\n      });\n    } // attempt flush immediately\n\n\n    this.flushBufferCounter = 0;\n    this.doFlush();\n  };\n\n  _proto.flushLiveBackBuffer = function flushLiveBackBuffer() {\n    // clear back buffer for live only\n    if (!this._live) {\n      return;\n    }\n\n    var liveBackBufferLength = this.config.liveBackBufferLength;\n\n    if (!isFinite(liveBackBufferLength) || liveBackBufferLength < 0) {\n      return;\n    }\n\n    if (!this.media) {\n      logger[\"logger\"].error('flushLiveBackBuffer called without attaching media');\n      return;\n    }\n\n    var currentTime = this.media.currentTime;\n    var sourceBuffer = this.sourceBuffer;\n    var bufferTypes = Object.keys(sourceBuffer);\n    var targetBackBufferPosition = currentTime - Math.max(liveBackBufferLength, this._levelTargetDuration);\n\n    for (var index = bufferTypes.length - 1; index >= 0; index--) {\n      var bufferType = bufferTypes[index];\n      var sb = sourceBuffer[bufferType];\n\n      if (sb) {\n        var buffered = sb.buffered; // when target buffer start exceeds actual buffer start\n\n        if (buffered.length > 0 && targetBackBufferPosition > buffered.start(0)) {\n          // remove buffer up until current time minus minimum back buffer length (removing buffer too close to current\n          // time will lead to playback freezing)\n          // credits for level target duration - https://github.com/videojs/http-streaming/blob/3132933b6aa99ddefab29c10447624efd6fd6e52/src/segment-loader.js#L91\n          if (this.removeBufferRange(bufferType, sb, 0, targetBackBufferPosition)) {\n            this.hls.trigger(events[\"default\"].LIVE_BACK_BUFFER_REACHED, {\n              bufferEnd: targetBackBufferPosition\n            });\n          }\n        }\n      }\n    }\n  };\n\n  _proto.onLevelUpdated = function onLevelUpdated(_ref) {\n    var details = _ref.details;\n\n    if (details.fragments.length > 0) {\n      this._levelDuration = details.totalduration + details.fragments[0].start;\n      this._levelTargetDuration = details.averagetargetduration || details.targetduration || 10;\n      this._live = details.live;\n      this.updateMediaElementDuration();\n    }\n  }\n  /**\n   * Update Media Source duration to current level duration or override to Infinity if configuration parameter\n   * 'liveDurationInfinity` is set to `true`\n   * More details: https://github.com/video-dev/hls.js/issues/355\n   */\n  ;\n\n  _proto.updateMediaElementDuration = function updateMediaElementDuration() {\n    var config = this.config;\n    var duration;\n\n    if (this._levelDuration === null || !this.media || !this.mediaSource || !this.sourceBuffer || this.media.readyState === 0 || this.mediaSource.readyState !== 'open') {\n      return;\n    }\n\n    for (var type in this.sourceBuffer) {\n      var sb = this.sourceBuffer[type];\n\n      if (sb && sb.updating === true) {\n        // can't set duration whilst a buffer is updating\n        return;\n      }\n    }\n\n    duration = this.media.duration; // initialise to the value that the media source is reporting\n\n    if (this._msDuration === null) {\n      this._msDuration = this.mediaSource.duration;\n    }\n\n    if (this._live === true && config.liveDurationInfinity === true) {\n      // Override duration to Infinity\n      logger[\"logger\"].log('Media Source duration is set to Infinity');\n      this._msDuration = this.mediaSource.duration = Infinity;\n    } else if (this._levelDuration > this._msDuration && this._levelDuration > duration || !Object(number[\"isFiniteNumber\"])(duration)) {\n      // levelDuration was the last value we set.\n      // not using mediaSource.duration as the browser may tweak this value\n      // only update Media Source duration if its value increase, this is to avoid\n      // flushing already buffered portion when switching between quality level\n      logger[\"logger\"].log(\"Updating Media Source duration to \" + this._levelDuration.toFixed(3));\n      this._msDuration = this.mediaSource.duration = this._levelDuration;\n    }\n  };\n\n  _proto.doFlush = function doFlush() {\n    // loop through all buffer ranges to flush\n    while (this.flushRange.length) {\n      var range = this.flushRange[0]; // flushBuffer will abort any buffer append in progress and flush Audio/Video Buffer\n\n      if (this.flushBuffer(range.start, range.end, range.type)) {\n        // range flushed, remove from flush array\n        this.flushRange.shift();\n        this.flushBufferCounter = 0;\n      } else {\n        this._needsFlush = true; // avoid looping, wait for SB update end to retrigger a flush\n\n        return;\n      }\n    }\n\n    if (this.flushRange.length === 0) {\n      // everything flushed\n      this._needsFlush = false; // let's recompute this.appended, which is used to avoid flush looping\n\n      var appended = 0;\n      var sourceBuffer = this.sourceBuffer;\n\n      try {\n        for (var type in sourceBuffer) {\n          var sb = sourceBuffer[type];\n\n          if (sb) {\n            appended += sb.buffered.length;\n          }\n        }\n      } catch (error) {\n        // error could be thrown while accessing buffered, in case sourcebuffer has already been removed from MediaSource\n        // this is harmess at this stage, catch this to avoid reporting an internal exception\n        logger[\"logger\"].error('error while accessing sourceBuffer.buffered');\n      }\n\n      this.appended = appended;\n      this.hls.trigger(events[\"default\"].BUFFER_FLUSHED);\n    }\n  };\n\n  _proto.doAppending = function doAppending() {\n    var config = this.config,\n        hls = this.hls,\n        segments = this.segments,\n        sourceBuffer = this.sourceBuffer;\n\n    if (!Object.keys(sourceBuffer).length) {\n      // early exit if no source buffers have been initialized yet\n      return;\n    }\n\n    if (!this.media || this.media.error) {\n      this.segments = [];\n      logger[\"logger\"].error('trying to append although a media error occured, flush segment and abort');\n      return;\n    }\n\n    if (this.appending) {\n      // logger.log(`sb appending in progress`);\n      return;\n    }\n\n    var segment = segments.shift();\n\n    if (!segment) {\n      // handle undefined shift\n      return;\n    }\n\n    try {\n      var sb = sourceBuffer[segment.type];\n\n      if (!sb) {\n        // in case we don't have any source buffer matching with this segment type,\n        // it means that Mediasource fails to create sourcebuffer\n        // discard this segment, and trigger update end\n        this._onSBUpdateEnd();\n\n        return;\n      }\n\n      if (sb.updating) {\n        // if we are still updating the source buffer from the last segment, place this back at the front of the queue\n        segments.unshift(segment);\n        return;\n      } // reset sourceBuffer ended flag before appending segment\n\n\n      sb.ended = false; // logger.log(`appending ${segment.content} ${type} SB, size:${segment.data.length}, ${segment.parent}`);\n\n      this.parent = segment.parent;\n      sb.appendBuffer(segment.data);\n      this.appendError = 0;\n      this.appended++;\n      this.appending = true;\n    } catch (err) {\n      // in case any error occured while appending, put back segment in segments table\n      logger[\"logger\"].error(\"error while trying to append buffer:\" + err.message);\n      segments.unshift(segment);\n      var event = {\n        type: errors[\"ErrorTypes\"].MEDIA_ERROR,\n        parent: segment.parent,\n        details: '',\n        fatal: false\n      };\n\n      if (err.code === 22) {\n        // QuotaExceededError: http://www.w3.org/TR/html5/infrastructure.html#quotaexceedederror\n        // let's stop appending any segments, and report BUFFER_FULL_ERROR error\n        this.segments = [];\n        event.details = errors[\"ErrorDetails\"].BUFFER_FULL_ERROR;\n      } else {\n        this.appendError++;\n        event.details = errors[\"ErrorDetails\"].BUFFER_APPEND_ERROR;\n        /* with UHD content, we could get loop of quota exceeded error until\n          browser is able to evict some data from sourcebuffer. retrying help recovering this\n        */\n\n        if (this.appendError > config.appendErrorMaxRetry) {\n          logger[\"logger\"].log(\"fail \" + config.appendErrorMaxRetry + \" times to append segment in sourceBuffer\");\n          this.segments = [];\n          event.fatal = true;\n        }\n      }\n\n      hls.trigger(events[\"default\"].ERROR, event);\n    }\n  }\n  /*\n    flush specified buffered range,\n    return true once range has been flushed.\n    as sourceBuffer.remove() is asynchronous, flushBuffer will be retriggered on sourceBuffer update end\n  */\n  ;\n\n  _proto.flushBuffer = function flushBuffer(startOffset, endOffset, sbType) {\n    var sourceBuffer = this.sourceBuffer; // exit if no sourceBuffers are initialized\n\n    if (!Object.keys(sourceBuffer).length) {\n      return true;\n    }\n\n    var currentTime = 'null';\n\n    if (this.media) {\n      currentTime = this.media.currentTime.toFixed(3);\n    }\n\n    logger[\"logger\"].log(\"flushBuffer,pos/start/end: \" + currentTime + \"/\" + startOffset + \"/\" + endOffset); // safeguard to avoid infinite looping : don't try to flush more than the nb of appended segments\n\n    if (this.flushBufferCounter >= this.appended) {\n      logger[\"logger\"].warn('abort flushing too many retries');\n      return true;\n    }\n\n    var sb = sourceBuffer[sbType]; // we are going to flush buffer, mark source buffer as 'not ended'\n\n    if (sb) {\n      sb.ended = false;\n\n      if (!sb.updating) {\n        if (this.removeBufferRange(sbType, sb, startOffset, endOffset)) {\n          this.flushBufferCounter++;\n          return false;\n        }\n      } else {\n        logger[\"logger\"].warn('cannot flush, sb updating in progress');\n        return false;\n      }\n    }\n\n    logger[\"logger\"].log('buffer flushed'); // everything flushed !\n\n    return true;\n  }\n  /**\n   * Removes first buffered range from provided source buffer that lies within given start and end offsets.\n   *\n   * @param {string} type Type of the source buffer, logging purposes only.\n   * @param {SourceBuffer} sb Target SourceBuffer instance.\n   * @param {number} startOffset\n   * @param {number} endOffset\n   *\n   * @returns {boolean} True when source buffer remove requested.\n   */\n  ;\n\n  _proto.removeBufferRange = function removeBufferRange(type, sb, startOffset, endOffset) {\n    try {\n      for (var i = 0; i < sb.buffered.length; i++) {\n        var bufStart = sb.buffered.start(i);\n        var bufEnd = sb.buffered.end(i);\n        var removeStart = Math.max(bufStart, startOffset);\n        var removeEnd = Math.min(bufEnd, endOffset);\n        /* sometimes sourcebuffer.remove() does not flush\n          the exact expected time range.\n          to avoid rounding issues/infinite loop,\n          only flush buffer range of length greater than 500ms.\n        */\n\n        if (Math.min(removeEnd, bufEnd) - removeStart > 0.5) {\n          var currentTime = 'null';\n\n          if (this.media) {\n            currentTime = this.media.currentTime.toString();\n          }\n\n          logger[\"logger\"].log(\"sb remove \" + type + \" [\" + removeStart + \",\" + removeEnd + \"], of [\" + bufStart + \",\" + bufEnd + \"], pos:\" + currentTime);\n          sb.remove(removeStart, removeEnd);\n          return true;\n        }\n      }\n    } catch (error) {\n      logger[\"logger\"].warn('removeBufferRange failed', error);\n    }\n\n    return false;\n  };\n\n  return BufferController;\n}(event_handler);\n\n/* harmony default export */ var buffer_controller = (buffer_controller_BufferController);\n// CONCATENATED MODULE: ./src/controller/cap-level-controller.js\nfunction cap_level_controller_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction cap_level_controller_createClass(Constructor, protoProps, staticProps) { if (protoProps) cap_level_controller_defineProperties(Constructor.prototype, protoProps); if (staticProps) cap_level_controller_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction cap_level_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n/*\n * cap stream level to media size dimension controller\n*/\n\n\n\nvar cap_level_controller_CapLevelController = /*#__PURE__*/function (_EventHandler) {\n  cap_level_controller_inheritsLoose(CapLevelController, _EventHandler);\n\n  function CapLevelController(hls) {\n    var _this;\n\n    _this = _EventHandler.call(this, hls, events[\"default\"].FPS_DROP_LEVEL_CAPPING, events[\"default\"].MEDIA_ATTACHING, events[\"default\"].MANIFEST_PARSED, events[\"default\"].LEVELS_UPDATED, events[\"default\"].BUFFER_CODECS, events[\"default\"].MEDIA_DETACHING) || this;\n    _this.autoLevelCapping = Number.POSITIVE_INFINITY;\n    _this.firstLevel = null;\n    _this.levels = [];\n    _this.media = null;\n    _this.restrictedLevels = [];\n    _this.timer = null;\n    _this.clientRect = null;\n    return _this;\n  }\n\n  var _proto = CapLevelController.prototype;\n\n  _proto.destroy = function destroy() {\n    if (this.hls.config.capLevelToPlayerSize) {\n      this.media = null;\n      this.clientRect = null;\n      this.stopCapping();\n    }\n  };\n\n  _proto.onFpsDropLevelCapping = function onFpsDropLevelCapping(data) {\n    // Don't add a restricted level more than once\n    if (CapLevelController.isLevelAllowed(data.droppedLevel, this.restrictedLevels)) {\n      this.restrictedLevels.push(data.droppedLevel);\n    }\n  };\n\n  _proto.onMediaAttaching = function onMediaAttaching(data) {\n    this.media = data.media instanceof window.HTMLVideoElement ? data.media : null;\n  };\n\n  _proto.onManifestParsed = function onManifestParsed(data) {\n    var hls = this.hls;\n    this.restrictedLevels = [];\n    this.levels = data.levels;\n    this.firstLevel = data.firstLevel;\n\n    if (hls.config.capLevelToPlayerSize && data.video) {\n      // Start capping immediately if the manifest has signaled video codecs\n      this.startCapping();\n    }\n  } // Only activate capping when playing a video stream; otherwise, multi-bitrate audio-only streams will be restricted\n  // to the first level\n  ;\n\n  _proto.onBufferCodecs = function onBufferCodecs(data) {\n    var hls = this.hls;\n\n    if (hls.config.capLevelToPlayerSize && data.video) {\n      // If the manifest did not signal a video codec capping has been deferred until we're certain video is present\n      this.startCapping();\n    }\n  };\n\n  _proto.onLevelsUpdated = function onLevelsUpdated(data) {\n    this.levels = data.levels;\n  };\n\n  _proto.onMediaDetaching = function onMediaDetaching() {\n    this.stopCapping();\n  };\n\n  _proto.detectPlayerSize = function detectPlayerSize() {\n    if (this.media) {\n      var levelsLength = this.levels ? this.levels.length : 0;\n\n      if (levelsLength) {\n        var hls = this.hls;\n        hls.autoLevelCapping = this.getMaxLevel(levelsLength - 1);\n\n        if (hls.autoLevelCapping > this.autoLevelCapping) {\n          // if auto level capping has a higher value for the previous one, flush the buffer using nextLevelSwitch\n          // usually happen when the user go to the fullscreen mode.\n          hls.streamController.nextLevelSwitch();\n        }\n\n        this.autoLevelCapping = hls.autoLevelCapping;\n      }\n    }\n  }\n  /*\n  * returns level should be the one with the dimensions equal or greater than the media (player) dimensions (so the video will be downscaled)\n  */\n  ;\n\n  _proto.getMaxLevel = function getMaxLevel(capLevelIndex) {\n    var _this2 = this;\n\n    if (!this.levels) {\n      return -1;\n    }\n\n    var validLevels = this.levels.filter(function (level, index) {\n      return CapLevelController.isLevelAllowed(index, _this2.restrictedLevels) && index <= capLevelIndex;\n    });\n    this.clientRect = null;\n    return CapLevelController.getMaxLevelByMediaSize(validLevels, this.mediaWidth, this.mediaHeight);\n  };\n\n  _proto.startCapping = function startCapping() {\n    if (this.timer) {\n      // Don't reset capping if started twice; this can happen if the manifest signals a video codec\n      return;\n    }\n\n    this.autoLevelCapping = Number.POSITIVE_INFINITY;\n    this.hls.firstLevel = this.getMaxLevel(this.firstLevel);\n    clearInterval(this.timer);\n    this.timer = setInterval(this.detectPlayerSize.bind(this), 1000);\n    this.detectPlayerSize();\n  };\n\n  _proto.stopCapping = function stopCapping() {\n    this.restrictedLevels = [];\n    this.firstLevel = null;\n    this.autoLevelCapping = Number.POSITIVE_INFINITY;\n\n    if (this.timer) {\n      this.timer = clearInterval(this.timer);\n      this.timer = null;\n    }\n  };\n\n  _proto.getDimensions = function getDimensions() {\n    if (this.clientRect) {\n      return this.clientRect;\n    }\n\n    var media = this.media;\n    var boundsRect = {\n      width: 0,\n      height: 0\n    };\n\n    if (media) {\n      var clientRect = media.getBoundingClientRect();\n      boundsRect.width = clientRect.width;\n      boundsRect.height = clientRect.height;\n\n      if (!boundsRect.width && !boundsRect.height) {\n        // When the media element has no width or height (equivalent to not being in the DOM),\n        // then use its width and height attributes (media.width, media.height)\n        boundsRect.width = clientRect.right - clientRect.left || media.width || 0;\n        boundsRect.height = clientRect.bottom - clientRect.top || media.height || 0;\n      }\n    }\n\n    this.clientRect = boundsRect;\n    return boundsRect;\n  };\n\n  CapLevelController.isLevelAllowed = function isLevelAllowed(level, restrictedLevels) {\n    if (restrictedLevels === void 0) {\n      restrictedLevels = [];\n    }\n\n    return restrictedLevels.indexOf(level) === -1;\n  };\n\n  CapLevelController.getMaxLevelByMediaSize = function getMaxLevelByMediaSize(levels, width, height) {\n    if (!levels || levels && !levels.length) {\n      return -1;\n    } // Levels can have the same dimensions but differing bandwidths - since levels are ordered, we can look to the next\n    // to determine whether we've chosen the greatest bandwidth for the media's dimensions\n\n\n    var atGreatestBandiwdth = function atGreatestBandiwdth(curLevel, nextLevel) {\n      if (!nextLevel) {\n        return true;\n      }\n\n      return curLevel.width !== nextLevel.width || curLevel.height !== nextLevel.height;\n    }; // If we run through the loop without breaking, the media's dimensions are greater than every level, so default to\n    // the max level\n\n\n    var maxLevelIndex = levels.length - 1;\n\n    for (var i = 0; i < levels.length; i += 1) {\n      var level = levels[i];\n\n      if ((level.width >= width || level.height >= height) && atGreatestBandiwdth(level, levels[i + 1])) {\n        maxLevelIndex = i;\n        break;\n      }\n    }\n\n    return maxLevelIndex;\n  };\n\n  cap_level_controller_createClass(CapLevelController, [{\n    key: \"mediaWidth\",\n    get: function get() {\n      return this.getDimensions().width * CapLevelController.contentScaleFactor;\n    }\n  }, {\n    key: \"mediaHeight\",\n    get: function get() {\n      return this.getDimensions().height * CapLevelController.contentScaleFactor;\n    }\n  }], [{\n    key: \"contentScaleFactor\",\n    get: function get() {\n      var pixelRatio = 1;\n\n      try {\n        pixelRatio = window.devicePixelRatio;\n      } catch (e) {}\n\n      return pixelRatio;\n    }\n  }]);\n\n  return CapLevelController;\n}(event_handler);\n\n/* harmony default export */ var cap_level_controller = (cap_level_controller_CapLevelController);\n// CONCATENATED MODULE: ./src/controller/fps-controller.js\nfunction fps_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n/*\n * FPS Controller\n*/\n\n\n\nvar fps_controller_window = window,\n    fps_controller_performance = fps_controller_window.performance;\n\nvar fps_controller_FPSController = /*#__PURE__*/function (_EventHandler) {\n  fps_controller_inheritsLoose(FPSController, _EventHandler);\n\n  function FPSController(hls) {\n    return _EventHandler.call(this, hls, events[\"default\"].MEDIA_ATTACHING) || this;\n  }\n\n  var _proto = FPSController.prototype;\n\n  _proto.destroy = function destroy() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n\n    this.isVideoPlaybackQualityAvailable = false;\n  };\n\n  _proto.onMediaAttaching = function onMediaAttaching(data) {\n    var config = this.hls.config;\n\n    if (config.capLevelOnFPSDrop) {\n      var video = this.video = data.media instanceof window.HTMLVideoElement ? data.media : null;\n\n      if (typeof video.getVideoPlaybackQuality === 'function') {\n        this.isVideoPlaybackQualityAvailable = true;\n      }\n\n      clearInterval(this.timer);\n      this.timer = setInterval(this.checkFPSInterval.bind(this), config.fpsDroppedMonitoringPeriod);\n    }\n  };\n\n  _proto.checkFPS = function checkFPS(video, decodedFrames, droppedFrames) {\n    var currentTime = fps_controller_performance.now();\n\n    if (decodedFrames) {\n      if (this.lastTime) {\n        var currentPeriod = currentTime - this.lastTime,\n            currentDropped = droppedFrames - this.lastDroppedFrames,\n            currentDecoded = decodedFrames - this.lastDecodedFrames,\n            droppedFPS = 1000 * currentDropped / currentPeriod,\n            hls = this.hls;\n        hls.trigger(events[\"default\"].FPS_DROP, {\n          currentDropped: currentDropped,\n          currentDecoded: currentDecoded,\n          totalDroppedFrames: droppedFrames\n        });\n\n        if (droppedFPS > 0) {\n          // logger.log('checkFPS : droppedFPS/decodedFPS:' + droppedFPS/(1000 * currentDecoded / currentPeriod));\n          if (currentDropped > hls.config.fpsDroppedMonitoringThreshold * currentDecoded) {\n            var currentLevel = hls.currentLevel;\n            logger[\"logger\"].warn('drop FPS ratio greater than max allowed value for currentLevel: ' + currentLevel);\n\n            if (currentLevel > 0 && (hls.autoLevelCapping === -1 || hls.autoLevelCapping >= currentLevel)) {\n              currentLevel = currentLevel - 1;\n              hls.trigger(events[\"default\"].FPS_DROP_LEVEL_CAPPING, {\n                level: currentLevel,\n                droppedLevel: hls.currentLevel\n              });\n              hls.autoLevelCapping = currentLevel;\n              hls.streamController.nextLevelSwitch();\n            }\n          }\n        }\n      }\n\n      this.lastTime = currentTime;\n      this.lastDroppedFrames = droppedFrames;\n      this.lastDecodedFrames = decodedFrames;\n    }\n  };\n\n  _proto.checkFPSInterval = function checkFPSInterval() {\n    var video = this.video;\n\n    if (video) {\n      if (this.isVideoPlaybackQualityAvailable) {\n        var videoPlaybackQuality = video.getVideoPlaybackQuality();\n        this.checkFPS(video, videoPlaybackQuality.totalVideoFrames, videoPlaybackQuality.droppedVideoFrames);\n      } else {\n        this.checkFPS(video, video.webkitDecodedFrameCount, video.webkitDroppedFrameCount);\n      }\n    }\n  };\n\n  return FPSController;\n}(event_handler);\n\n/* harmony default export */ var fps_controller = (fps_controller_FPSController);\n// CONCATENATED MODULE: ./src/utils/xhr-loader.js\n/**\n * XHR based logger\n*/\n\n\nvar xhr_loader_XhrLoader = /*#__PURE__*/function () {\n  function XhrLoader(config) {\n    if (config && config.xhrSetup) {\n      this.xhrSetup = config.xhrSetup;\n    }\n  }\n\n  var _proto = XhrLoader.prototype;\n\n  _proto.destroy = function destroy() {\n    this.abort();\n    this.loader = null;\n  };\n\n  _proto.abort = function abort() {\n    var loader = this.loader;\n\n    if (loader && loader.readyState !== 4) {\n      this.stats.aborted = true;\n      loader.abort();\n    }\n\n    window.clearTimeout(this.requestTimeout);\n    this.requestTimeout = null;\n    window.clearTimeout(this.retryTimeout);\n    this.retryTimeout = null;\n  };\n\n  _proto.load = function load(context, config, callbacks) {\n    this.context = context;\n    this.config = config;\n    this.callbacks = callbacks;\n    this.stats = {\n      trequest: window.performance.now(),\n      retry: 0\n    };\n    this.retryDelay = config.retryDelay;\n    this.loadInternal();\n  };\n\n  _proto.loadInternal = function loadInternal() {\n    var xhr,\n        context = this.context;\n    xhr = this.loader = new window.XMLHttpRequest();\n    var stats = this.stats;\n    stats.tfirst = 0;\n    stats.loaded = 0;\n    var xhrSetup = this.xhrSetup;\n\n    try {\n      if (xhrSetup) {\n        try {\n          xhrSetup(xhr, context.url);\n        } catch (e) {\n          // fix xhrSetup: (xhr, url) => {xhr.setRequestHeader(\"Content-Language\", \"test\");}\n          // not working, as xhr.setRequestHeader expects xhr.readyState === OPEN\n          xhr.open('GET', context.url, true);\n          xhrSetup(xhr, context.url);\n        }\n      }\n\n      if (!xhr.readyState) {\n        xhr.open('GET', context.url, true);\n      }\n    } catch (e) {\n      // IE11 throws an exception on xhr.open if attempting to access an HTTP resource over HTTPS\n      this.callbacks.onError({\n        code: xhr.status,\n        text: e.message\n      }, context, xhr);\n      return;\n    }\n\n    if (context.rangeEnd) {\n      xhr.setRequestHeader('Range', 'bytes=' + context.rangeStart + '-' + (context.rangeEnd - 1));\n    }\n\n    xhr.onreadystatechange = this.readystatechange.bind(this);\n    xhr.onprogress = this.loadprogress.bind(this);\n    xhr.responseType = context.responseType; // setup timeout before we perform request\n\n    this.requestTimeout = window.setTimeout(this.loadtimeout.bind(this), this.config.timeout);\n    xhr.send();\n  };\n\n  _proto.readystatechange = function readystatechange(event) {\n    var xhr = event.currentTarget,\n        readyState = xhr.readyState,\n        stats = this.stats,\n        context = this.context,\n        config = this.config; // don't proceed if xhr has been aborted\n\n    if (stats.aborted) {\n      return;\n    } // >= HEADERS_RECEIVED\n\n\n    if (readyState >= 2) {\n      // clear xhr timeout and rearm it if readyState less than 4\n      window.clearTimeout(this.requestTimeout);\n\n      if (stats.tfirst === 0) {\n        stats.tfirst = Math.max(window.performance.now(), stats.trequest);\n      }\n\n      if (readyState === 4) {\n        var status = xhr.status; // http status between 200 to 299 are all successful\n\n        if (status >= 200 && status < 300) {\n          stats.tload = Math.max(stats.tfirst, window.performance.now());\n          var data, len;\n\n          if (context.responseType === 'arraybuffer') {\n            data = xhr.response;\n            len = data.byteLength;\n          } else {\n            data = xhr.responseText;\n            len = data.length;\n          }\n\n          stats.loaded = stats.total = len;\n          var response = {\n            url: xhr.responseURL,\n            data: data\n          };\n          this.callbacks.onSuccess(response, stats, context, xhr);\n        } else {\n          // if max nb of retries reached or if http status between 400 and 499 (such error cannot be recovered, retrying is useless), return error\n          if (stats.retry >= config.maxRetry || status >= 400 && status < 499) {\n            logger[\"logger\"].error(status + \" while loading \" + context.url);\n            this.callbacks.onError({\n              code: status,\n              text: xhr.statusText\n            }, context, xhr);\n          } else {\n            // retry\n            logger[\"logger\"].warn(status + \" while loading \" + context.url + \", retrying in \" + this.retryDelay + \"...\"); // aborts and resets internal state\n\n            this.destroy(); // schedule retry\n\n            this.retryTimeout = window.setTimeout(this.loadInternal.bind(this), this.retryDelay); // set exponential backoff\n\n            this.retryDelay = Math.min(2 * this.retryDelay, config.maxRetryDelay);\n            stats.retry++;\n          }\n        }\n      } else {\n        // readyState >= 2 AND readyState !==4 (readyState = HEADERS_RECEIVED || LOADING) rearm timeout as xhr not finished yet\n        this.requestTimeout = window.setTimeout(this.loadtimeout.bind(this), config.timeout);\n      }\n    }\n  };\n\n  _proto.loadtimeout = function loadtimeout() {\n    logger[\"logger\"].warn(\"timeout while loading \" + this.context.url);\n    this.callbacks.onTimeout(this.stats, this.context, null);\n  };\n\n  _proto.loadprogress = function loadprogress(event) {\n    var xhr = event.currentTarget,\n        stats = this.stats;\n    stats.loaded = event.loaded;\n\n    if (event.lengthComputable) {\n      stats.total = event.total;\n    }\n\n    var onProgress = this.callbacks.onProgress;\n\n    if (onProgress) {\n      // third arg is to provide on progress data\n      onProgress(stats, this.context, null, xhr);\n    }\n  };\n\n  return XhrLoader;\n}();\n\n/* harmony default export */ var xhr_loader = (xhr_loader_XhrLoader);\n// CONCATENATED MODULE: ./src/controller/audio-track-controller.js\nfunction audio_track_controller_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction audio_track_controller_createClass(Constructor, protoProps, staticProps) { if (protoProps) audio_track_controller_defineProperties(Constructor.prototype, protoProps); if (staticProps) audio_track_controller_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction audio_track_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n\n\n\n\n/**\n * @class AudioTrackController\n * @implements {EventHandler}\n *\n * Handles main manifest and audio-track metadata loaded,\n * owns and exposes the selectable audio-tracks data-models.\n *\n * Exposes internal interface to select available audio-tracks.\n *\n * Handles errors on loading audio-track playlists. Manages fallback mechanism\n * with redundants tracks (group-IDs).\n *\n * Handles level-loading and group-ID switches for video (fallback on video levels),\n * and eventually adapts the audio-track group-ID to match.\n *\n * @fires AUDIO_TRACK_LOADING\n * @fires AUDIO_TRACK_SWITCHING\n * @fires AUDIO_TRACKS_UPDATED\n * @fires ERROR\n *\n */\n\nvar audio_track_controller_AudioTrackController = /*#__PURE__*/function (_TaskLoop) {\n  audio_track_controller_inheritsLoose(AudioTrackController, _TaskLoop);\n\n  function AudioTrackController(hls) {\n    var _this;\n\n    _this = _TaskLoop.call(this, hls, events[\"default\"].MANIFEST_LOADING, events[\"default\"].MANIFEST_PARSED, events[\"default\"].AUDIO_TRACK_LOADED, events[\"default\"].AUDIO_TRACK_SWITCHED, events[\"default\"].LEVEL_LOADED, events[\"default\"].ERROR) || this;\n    /**\n     * @private\n     * Currently selected index in `tracks`\n     * @member {number} trackId\n     */\n\n    _this._trackId = -1;\n    /**\n     * @private\n     * If should select tracks according to default track attribute\n     * @member {boolean} _selectDefaultTrack\n     */\n\n    _this._selectDefaultTrack = true;\n    /**\n     * @public\n     * All tracks available\n     * @member {AudioTrack[]}\n     */\n\n    _this.tracks = [];\n    /**\n     * @public\n     * List of blacklisted audio track IDs (that have caused failure)\n     * @member {number[]}\n     */\n\n    _this.trackIdBlacklist = Object.create(null);\n    /**\n     * @public\n     * The currently running group ID for audio\n     * (we grab this on manifest-parsed and new level-loaded)\n     * @member {string}\n     */\n\n    _this.audioGroupId = null;\n    return _this;\n  }\n  /**\n   * Reset audio tracks on new manifest loading.\n   */\n\n\n  var _proto = AudioTrackController.prototype;\n\n  _proto.onManifestLoading = function onManifestLoading() {\n    this.tracks = [];\n    this._trackId = -1;\n    this._selectDefaultTrack = true;\n  }\n  /**\n   * Store tracks data from manifest parsed data.\n   *\n   * Trigger AUDIO_TRACKS_UPDATED event.\n   *\n   * @param {*} data\n   */\n  ;\n\n  _proto.onManifestParsed = function onManifestParsed(data) {\n    var tracks = this.tracks = data.audioTracks || [];\n    this.hls.trigger(events[\"default\"].AUDIO_TRACKS_UPDATED, {\n      audioTracks: tracks\n    });\n\n    this._selectAudioGroup(this.hls.nextLoadLevel);\n  }\n  /**\n   * Store track details of loaded track in our data-model.\n   *\n   * Set-up metadata update interval task for live-mode streams.\n   *\n   * @param {*} data\n   */\n  ;\n\n  _proto.onAudioTrackLoaded = function onAudioTrackLoaded(data) {\n    if (data.id >= this.tracks.length) {\n      logger[\"logger\"].warn('Invalid audio track id:', data.id);\n      return;\n    }\n\n    logger[\"logger\"].log(\"audioTrack \" + data.id + \" loaded\");\n    this.tracks[data.id].details = data.details; // check if current playlist is a live playlist\n    // and if we have already our reload interval setup\n\n    if (data.details.live && !this.hasInterval()) {\n      // if live playlist we will have to reload it periodically\n      // set reload period to playlist target duration\n      var updatePeriodMs = data.details.targetduration * 1000;\n      this.setInterval(updatePeriodMs);\n    }\n\n    if (!data.details.live && this.hasInterval()) {\n      // playlist is not live and timer is scheduled: cancel it\n      this.clearInterval();\n    }\n  }\n  /**\n   * Update the internal group ID to any audio-track we may have set manually\n   * or because of a failure-handling fallback.\n   *\n   * Quality-levels should update to that group ID in this case.\n   *\n   * @param {*} data\n   */\n  ;\n\n  _proto.onAudioTrackSwitched = function onAudioTrackSwitched(data) {\n    var audioGroupId = this.tracks[data.id].groupId;\n\n    if (audioGroupId && this.audioGroupId !== audioGroupId) {\n      this.audioGroupId = audioGroupId;\n    }\n  }\n  /**\n   * When a level gets loaded, if it has redundant audioGroupIds (in the same ordinality as it's redundant URLs)\n   * we are setting our audio-group ID internally to the one set, if it is different from the group ID currently set.\n   *\n   * If group-ID got update, we re-select the appropriate audio-track with this group-ID matching the currently\n   * selected one (based on NAME property).\n   *\n   * @param {*} data\n   */\n  ;\n\n  _proto.onLevelLoaded = function onLevelLoaded(data) {\n    this._selectAudioGroup(data.level);\n  }\n  /**\n   * Handle network errors loading audio track manifests\n   * and also pausing on any netwok errors.\n   *\n   * @param {ErrorEventData} data\n   */\n  ;\n\n  _proto.onError = function onError(data) {\n    // Only handle network errors\n    if (data.type !== errors[\"ErrorTypes\"].NETWORK_ERROR) {\n      return;\n    } // If fatal network error, cancel update task\n\n\n    if (data.fatal) {\n      this.clearInterval();\n    } // If not an audio-track loading error don't handle further\n\n\n    if (data.details !== errors[\"ErrorDetails\"].AUDIO_TRACK_LOAD_ERROR) {\n      return;\n    }\n\n    logger[\"logger\"].warn('Network failure on audio-track id:', data.context.id);\n\n    this._handleLoadError();\n  }\n  /**\n   * @type {AudioTrack[]} Audio-track list we own\n   */\n  ;\n\n  /**\n   * @private\n   * @param {number} newId\n   */\n  _proto._setAudioTrack = function _setAudioTrack(newId) {\n    // noop on same audio track id as already set\n    if (this._trackId === newId && this.tracks[this._trackId].details) {\n      logger[\"logger\"].debug('Same id as current audio-track passed, and track details available -> no-op');\n      return;\n    } // check if level idx is valid\n\n\n    if (newId < 0 || newId >= this.tracks.length) {\n      logger[\"logger\"].warn('Invalid id passed to audio-track controller');\n      return;\n    }\n\n    var audioTrack = this.tracks[newId];\n    logger[\"logger\"].log(\"Now switching to audio-track index \" + newId); // stopping live reloading timer if any\n\n    this.clearInterval();\n    this._trackId = newId;\n    var url = audioTrack.url,\n        type = audioTrack.type,\n        id = audioTrack.id;\n    this.hls.trigger(events[\"default\"].AUDIO_TRACK_SWITCHING, {\n      id: id,\n      type: type,\n      url: url\n    });\n\n    this._loadTrackDetailsIfNeeded(audioTrack);\n  }\n  /**\n   * @override\n   */\n  ;\n\n  _proto.doTick = function doTick() {\n    this._updateTrack(this._trackId);\n  }\n  /**\n   * @param levelId\n   * @private\n   */\n  ;\n\n  _proto._selectAudioGroup = function _selectAudioGroup(levelId) {\n    var levelInfo = this.hls.levels[levelId];\n\n    if (!levelInfo || !levelInfo.audioGroupIds) {\n      return;\n    }\n\n    var audioGroupId = levelInfo.audioGroupIds[levelInfo.urlId];\n\n    if (this.audioGroupId !== audioGroupId) {\n      this.audioGroupId = audioGroupId;\n\n      this._selectInitialAudioTrack();\n    }\n  }\n  /**\n   * Select initial track\n   * @private\n   */\n  ;\n\n  _proto._selectInitialAudioTrack = function _selectInitialAudioTrack() {\n    var _this2 = this;\n\n    var tracks = this.tracks;\n\n    if (!tracks.length) {\n      return;\n    }\n\n    var currentAudioTrack = this.tracks[this._trackId];\n    var name = null;\n\n    if (currentAudioTrack) {\n      name = currentAudioTrack.name;\n    } // Pre-select default tracks if there are any\n\n\n    if (this._selectDefaultTrack) {\n      var defaultTracks = tracks.filter(function (track) {\n        return track.default;\n      });\n\n      if (defaultTracks.length) {\n        tracks = defaultTracks;\n      } else {\n        logger[\"logger\"].warn('No default audio tracks defined');\n      }\n    }\n\n    var trackFound = false;\n\n    var traverseTracks = function traverseTracks() {\n      // Select track with right group ID\n      tracks.forEach(function (track) {\n        if (trackFound) {\n          return;\n        } // We need to match the (pre-)selected group ID\n        // and the NAME of the current track.\n\n\n        if ((!_this2.audioGroupId || track.groupId === _this2.audioGroupId) && (!name || name === track.name)) {\n          // If there was a previous track try to stay with the same `NAME`.\n          // It should be unique across tracks of same group, and consistent through redundant track groups.\n          _this2._setAudioTrack(track.id);\n\n          trackFound = true;\n        }\n      });\n    };\n\n    traverseTracks();\n\n    if (!trackFound) {\n      name = null;\n      traverseTracks();\n    }\n\n    if (!trackFound) {\n      logger[\"logger\"].error(\"No track found for running audio group-ID: \" + this.audioGroupId);\n      this.hls.trigger(events[\"default\"].ERROR, {\n        type: errors[\"ErrorTypes\"].MEDIA_ERROR,\n        details: errors[\"ErrorDetails\"].AUDIO_TRACK_LOAD_ERROR,\n        fatal: true\n      });\n    }\n  }\n  /**\n   * @private\n   * @param {AudioTrack} audioTrack\n   * @returns {boolean}\n   */\n  ;\n\n  _proto._needsTrackLoading = function _needsTrackLoading(audioTrack) {\n    var details = audioTrack.details,\n        url = audioTrack.url;\n\n    if (!details || details.live) {\n      // check if we face an audio track embedded in main playlist (audio track without URI attribute)\n      return !!url;\n    }\n\n    return false;\n  }\n  /**\n   * @private\n   * @param {AudioTrack} audioTrack\n   */\n  ;\n\n  _proto._loadTrackDetailsIfNeeded = function _loadTrackDetailsIfNeeded(audioTrack) {\n    if (this._needsTrackLoading(audioTrack)) {\n      var url = audioTrack.url,\n          id = audioTrack.id; // track not retrieved yet, or live playlist we need to (re)load it\n\n      logger[\"logger\"].log(\"loading audio-track playlist for id: \" + id);\n      this.hls.trigger(events[\"default\"].AUDIO_TRACK_LOADING, {\n        url: url,\n        id: id\n      });\n    }\n  }\n  /**\n   * @private\n   * @param {number} newId\n   */\n  ;\n\n  _proto._updateTrack = function _updateTrack(newId) {\n    // check if level idx is valid\n    if (newId < 0 || newId >= this.tracks.length) {\n      return;\n    } // stopping live reloading timer if any\n\n\n    this.clearInterval();\n    this._trackId = newId;\n    logger[\"logger\"].log(\"trying to update audio-track \" + newId);\n    var audioTrack = this.tracks[newId];\n\n    this._loadTrackDetailsIfNeeded(audioTrack);\n  }\n  /**\n   * @private\n   */\n  ;\n\n  _proto._handleLoadError = function _handleLoadError() {\n    // First, let's black list current track id\n    this.trackIdBlacklist[this._trackId] = true; // Let's try to fall back on a functional audio-track with the same group ID\n\n    var previousId = this._trackId;\n    var _this$tracks$previous = this.tracks[previousId],\n        name = _this$tracks$previous.name,\n        language = _this$tracks$previous.language,\n        groupId = _this$tracks$previous.groupId;\n    logger[\"logger\"].warn(\"Loading failed on audio track id: \" + previousId + \", group-id: \" + groupId + \", name/language: \\\"\" + name + \"\\\" / \\\"\" + language + \"\\\"\"); // Find a non-blacklisted track ID with the same NAME\n    // At least a track that is not blacklisted, thus on another group-ID.\n\n    var newId = previousId;\n\n    for (var i = 0; i < this.tracks.length; i++) {\n      if (this.trackIdBlacklist[i]) {\n        continue;\n      }\n\n      var newTrack = this.tracks[i];\n\n      if (newTrack.name === name) {\n        newId = i;\n        break;\n      }\n    }\n\n    if (newId === previousId) {\n      logger[\"logger\"].warn(\"No fallback audio-track found for name/language: \\\"\" + name + \"\\\" / \\\"\" + language + \"\\\"\");\n      return;\n    }\n\n    logger[\"logger\"].log('Attempting audio-track fallback id:', newId, 'group-id:', this.tracks[newId].groupId);\n\n    this._setAudioTrack(newId);\n  };\n\n  audio_track_controller_createClass(AudioTrackController, [{\n    key: \"audioTracks\",\n    get: function get() {\n      return this.tracks;\n    }\n    /**\n     * @type {number} Index into audio-tracks list of currently selected track.\n     */\n\n  }, {\n    key: \"audioTrack\",\n    get: function get() {\n      return this._trackId;\n    }\n    /**\n     * Select current track by index\n     */\n    ,\n    set: function set(newId) {\n      this._setAudioTrack(newId); // If audio track is selected from API then don't choose from the manifest default track\n\n\n      this._selectDefaultTrack = false;\n    }\n  }]);\n\n  return AudioTrackController;\n}(TaskLoop);\n\n/* harmony default export */ var audio_track_controller = (audio_track_controller_AudioTrackController);\n// CONCATENATED MODULE: ./src/controller/audio-stream-controller.js\n\n\n\n\nfunction audio_stream_controller_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction audio_stream_controller_createClass(Constructor, protoProps, staticProps) { if (protoProps) audio_stream_controller_defineProperties(Constructor.prototype, protoProps); if (staticProps) audio_stream_controller_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction audio_stream_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n/*\n * Audio Stream Controller\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar audio_stream_controller_window = window,\n    audio_stream_controller_performance = audio_stream_controller_window.performance;\nvar audio_stream_controller_TICK_INTERVAL = 100; // how often to tick in ms\n\nvar audio_stream_controller_AudioStreamController = /*#__PURE__*/function (_BaseStreamController) {\n  audio_stream_controller_inheritsLoose(AudioStreamController, _BaseStreamController);\n\n  function AudioStreamController(hls, fragmentTracker) {\n    var _this;\n\n    _this = _BaseStreamController.call(this, hls, events[\"default\"].MEDIA_ATTACHED, events[\"default\"].MEDIA_DETACHING, events[\"default\"].AUDIO_TRACKS_UPDATED, events[\"default\"].AUDIO_TRACK_SWITCHING, events[\"default\"].AUDIO_TRACK_LOADED, events[\"default\"].KEY_LOADED, events[\"default\"].FRAG_LOADED, events[\"default\"].FRAG_PARSING_INIT_SEGMENT, events[\"default\"].FRAG_PARSING_DATA, events[\"default\"].FRAG_PARSED, events[\"default\"].ERROR, events[\"default\"].BUFFER_RESET, events[\"default\"].BUFFER_CREATED, events[\"default\"].BUFFER_APPENDED, events[\"default\"].BUFFER_FLUSHED, events[\"default\"].INIT_PTS_FOUND) || this;\n    _this.fragmentTracker = fragmentTracker;\n    _this.config = hls.config;\n    _this.audioCodecSwap = false;\n    _this._state = State.STOPPED;\n    _this.initPTS = [];\n    _this.waitingFragment = null;\n    _this.videoTrackCC = null;\n    _this.waitingVideoCC = null;\n    return _this;\n  } // Signal that video PTS was found\n\n\n  var _proto = AudioStreamController.prototype;\n\n  _proto.onInitPtsFound = function onInitPtsFound(data) {\n    var demuxerId = data.id,\n        cc = data.frag.cc,\n        initPTS = data.initPTS;\n\n    if (demuxerId === 'main') {\n      // Always update the new INIT PTS\n      // Can change due level switch\n      this.initPTS[cc] = initPTS;\n      this.videoTrackCC = cc;\n      logger[\"logger\"].log(\"InitPTS for cc: \" + cc + \" found from main: \" + initPTS); // If we are waiting we need to demux/remux the waiting frag\n      // With the new initPTS\n\n      if (this.state === State.WAITING_INIT_PTS) {\n        this.tick();\n      }\n    }\n  };\n\n  _proto.startLoad = function startLoad(startPosition) {\n    if (this.tracks) {\n      var lastCurrentTime = this.lastCurrentTime;\n      this.stopLoad();\n      this.setInterval(audio_stream_controller_TICK_INTERVAL);\n      this.fragLoadError = 0;\n\n      if (lastCurrentTime > 0 && startPosition === -1) {\n        logger[\"logger\"].log(\"audio:override startPosition with lastCurrentTime @\" + lastCurrentTime.toFixed(3));\n        this.state = State.IDLE;\n      } else {\n        this.lastCurrentTime = this.startPosition ? this.startPosition : startPosition;\n        this.state = State.STARTING;\n      }\n\n      this.nextLoadPosition = this.startPosition = this.lastCurrentTime;\n      this.tick();\n    } else {\n      this.startPosition = startPosition;\n      this.state = State.STOPPED;\n    }\n  };\n\n  _proto.doTick = function doTick() {\n    var pos,\n        track,\n        trackDetails,\n        hls = this.hls,\n        config = hls.config; // logger.log('audioStream:' + this.state);\n\n    switch (this.state) {\n      case State.ERROR: // don't do anything in error state to avoid breaking further ...\n\n      case State.PAUSED: // don't do anything in paused state either ...\n\n      case State.BUFFER_FLUSHING:\n        break;\n\n      case State.STARTING:\n        this.state = State.WAITING_TRACK;\n        this.loadedmetadata = false;\n        break;\n\n      case State.IDLE:\n        var tracks = this.tracks; // audio tracks not received => exit loop\n\n        if (!tracks) {\n          break;\n        } // if video not attached AND\n        // start fragment already requested OR start frag prefetch disable\n        // exit loop\n        // => if media not attached but start frag prefetch is enabled and start frag not requested yet, we will not exit loop\n\n\n        if (!this.media && (this.startFragRequested || !config.startFragPrefetch)) {\n          break;\n        } // determine next candidate fragment to be loaded, based on current position and\n        //  end of buffer position\n        // if we have not yet loaded any fragment, start loading from start position\n\n\n        if (this.loadedmetadata) {\n          pos = this.media.currentTime;\n        } else {\n          pos = this.nextLoadPosition;\n\n          if (pos === undefined) {\n            break;\n          }\n        }\n\n        var media = this.mediaBuffer ? this.mediaBuffer : this.media;\n        var videoBuffer = this.videoBuffer ? this.videoBuffer : this.media;\n        var maxBufferHole = pos < config.maxBufferHole ? Math.max(MAX_START_GAP_JUMP, config.maxBufferHole) : config.maxBufferHole;\n        var bufferInfo = BufferHelper.bufferInfo(media, pos, maxBufferHole);\n        var mainBufferInfo = BufferHelper.bufferInfo(videoBuffer, pos, maxBufferHole);\n        var bufferLen = bufferInfo.len;\n        var bufferEnd = bufferInfo.end;\n        var fragPrevious = this.fragPrevious; // ensure we buffer at least config.maxBufferLength (default 30s) or config.maxMaxBufferLength (default: 600s)\n        // whichever is smaller.\n        // once we reach that threshold, don't buffer more than video (mainBufferInfo.len)\n\n        var maxConfigBuffer = Math.min(config.maxBufferLength, config.maxMaxBufferLength);\n        var maxBufLen = Math.max(maxConfigBuffer, mainBufferInfo.len);\n        var audioSwitch = this.audioSwitch;\n        var trackId = this.trackId; // if buffer length is less than maxBufLen try to load a new fragment\n\n        if ((bufferLen < maxBufLen || audioSwitch) && trackId < tracks.length) {\n          trackDetails = tracks[trackId].details; // if track info not retrieved yet, switch state and wait for track retrieval\n\n          if (typeof trackDetails === 'undefined') {\n            this.state = State.WAITING_TRACK;\n            break;\n          }\n\n          if (!audioSwitch && this._streamEnded(bufferInfo, trackDetails)) {\n            this.hls.trigger(events[\"default\"].BUFFER_EOS, {\n              type: 'audio'\n            });\n            this.state = State.ENDED;\n            return;\n          } // find fragment index, contiguous with end of buffer position\n\n\n          var fragments = trackDetails.fragments,\n              fragLen = fragments.length,\n              start = fragments[0].start,\n              end = fragments[fragLen - 1].start + fragments[fragLen - 1].duration,\n              frag; // When switching audio track, reload audio as close as possible to currentTime\n\n          if (audioSwitch) {\n            if (trackDetails.live && !trackDetails.PTSKnown) {\n              logger[\"logger\"].log('switching audiotrack, live stream, unknown PTS,load first fragment');\n              bufferEnd = 0;\n            } else {\n              bufferEnd = pos; // if currentTime (pos) is less than alt audio playlist start time, it means that alt audio is ahead of currentTime\n\n              if (trackDetails.PTSKnown && pos < start) {\n                // if everything is buffered from pos to start or if audio buffer upfront, let's seek to start\n                if (bufferInfo.end > start || bufferInfo.nextStart) {\n                  logger[\"logger\"].log('alt audio track ahead of main track, seek to start of alt audio track');\n                  this.media.currentTime = start + 0.05;\n                } else {\n                  return;\n                }\n              }\n            }\n          }\n\n          if (trackDetails.initSegment && !trackDetails.initSegment.data) {\n            frag = trackDetails.initSegment;\n          } // eslint-disable-line brace-style\n          // if bufferEnd before start of playlist, load first fragment\n          else if (bufferEnd <= start) {\n              frag = fragments[0];\n\n              if (this.videoTrackCC !== null && frag.cc !== this.videoTrackCC) {\n                // Ensure we find a fragment which matches the continuity of the video track\n                frag = findFragWithCC(fragments, this.videoTrackCC);\n              }\n\n              if (trackDetails.live && frag.loadIdx && frag.loadIdx === this.fragLoadIdx) {\n                // we just loaded this first fragment, and we are still lagging behind the start of the live playlist\n                // let's force seek to start\n                var nextBuffered = bufferInfo.nextStart ? bufferInfo.nextStart : start;\n                logger[\"logger\"].log(\"no alt audio available @currentTime:\" + this.media.currentTime + \", seeking @\" + (nextBuffered + 0.05));\n                this.media.currentTime = nextBuffered + 0.05;\n                return;\n              }\n            } else {\n              var foundFrag;\n              var maxFragLookUpTolerance = config.maxFragLookUpTolerance;\n              var fragNext = fragPrevious ? fragments[fragPrevious.sn - fragments[0].sn + 1] : undefined;\n\n              if (bufferEnd < end) {\n                if (bufferEnd > end - maxFragLookUpTolerance) {\n                  maxFragLookUpTolerance = 0;\n                } // Prefer the next fragment if it's within tolerance\n\n\n                if (fragNext && !fragmentWithinToleranceTest(bufferEnd, maxFragLookUpTolerance, fragNext)) {\n                  foundFrag = fragNext;\n                } else {\n                  foundFrag = binary_search.search(fragments, function (frag) {\n                    return fragmentWithinToleranceTest(bufferEnd, maxFragLookUpTolerance, frag);\n                  });\n                }\n              } else {\n                // reach end of playlist\n                foundFrag = fragments[fragLen - 1];\n              }\n\n              if (foundFrag) {\n                frag = foundFrag;\n                start = foundFrag.start; // logger.log('find SN matching with pos:' +  bufferEnd + ':' + frag.sn);\n\n                if (fragPrevious && frag.level === fragPrevious.level && frag.sn === fragPrevious.sn) {\n                  if (frag.sn < trackDetails.endSN) {\n                    frag = fragments[frag.sn + 1 - trackDetails.startSN];\n\n                    if (this.fragmentTracker.getState(frag) !== FragmentState.OK) {\n                      logger[\"logger\"].log(\"SN just loaded, load next one: \" + frag.sn);\n                    }\n                  } else {\n                    frag = null;\n                  }\n                }\n              }\n            }\n\n          if (frag) {\n            // logger.log('      loading frag ' + i +',pos/bufEnd:' + pos.toFixed(3) + '/' + bufferEnd.toFixed(3));\n            if (frag.encrypted) {\n              logger[\"logger\"].log(\"Loading key for \" + frag.sn + \" of [\" + trackDetails.startSN + \" ,\" + trackDetails.endSN + \"],track \" + trackId);\n              this.state = State.KEY_LOADING;\n              hls.trigger(events[\"default\"].KEY_LOADING, {\n                frag: frag\n              });\n            } else {\n              // only load if fragment is not loaded or if in audio switch\n              // we force a frag loading in audio switch as fragment tracker might not have evicted previous frags in case of quick audio switch\n              this.fragCurrent = frag;\n\n              if (audioSwitch || this.fragmentTracker.getState(frag) === FragmentState.NOT_LOADED) {\n                logger[\"logger\"].log(\"Loading \" + frag.sn + \", cc: \" + frag.cc + \" of [\" + trackDetails.startSN + \" ,\" + trackDetails.endSN + \"],track \" + trackId + \", \" + (this.loadedmetadata ? 'currentTime' : 'nextLoadPosition') + \": \" + pos + \", bufferEnd: \" + bufferEnd.toFixed(3));\n\n                if (frag.sn !== 'initSegment') {\n                  this.startFragRequested = true;\n                }\n\n                if (Object(number[\"isFiniteNumber\"])(frag.sn)) {\n                  this.nextLoadPosition = frag.start + frag.duration;\n                }\n\n                hls.trigger(events[\"default\"].FRAG_LOADING, {\n                  frag: frag\n                });\n                this.state = State.FRAG_LOADING;\n              }\n            }\n          }\n        }\n\n        break;\n\n      case State.WAITING_TRACK:\n        track = this.tracks[this.trackId]; // check if playlist is already loaded\n\n        if (track && track.details) {\n          this.state = State.IDLE;\n        }\n\n        break;\n\n      case State.FRAG_LOADING_WAITING_RETRY:\n        var now = audio_stream_controller_performance.now();\n        var retryDate = this.retryDate;\n        media = this.media;\n        var isSeeking = media && media.seeking; // if current time is gt than retryDate, or if media seeking let's switch to IDLE state to retry loading\n\n        if (!retryDate || now >= retryDate || isSeeking) {\n          logger[\"logger\"].log('audioStreamController: retryDate reached, switch back to IDLE state');\n          this.state = State.IDLE;\n        }\n\n        break;\n\n      case State.WAITING_INIT_PTS:\n        // Ensure we don't get stuck in the WAITING_INIT_PTS state if the waiting frag CC doesn't match any initPTS\n        var waitingFrag = this.waitingFragment;\n\n        if (waitingFrag) {\n          var waitingFragCC = waitingFrag.frag.cc;\n\n          if (this.initPTS[waitingFragCC] !== undefined) {\n            this.waitingFragment = null;\n            this.state = State.FRAG_LOADING;\n            this.onFragLoaded(waitingFrag);\n          } else if (this.videoTrackCC !== this.waitingVideoCC) {\n            // Drop waiting fragment if videoTrackCC has changed since waitingFragment was set and initPTS was not found\n            logger[\"logger\"].log(\"Waiting fragment cc (\" + waitingFragCC + \") cancelled because video is at cc \" + this.videoTrackCC);\n            this.clearWaitingFragment();\n          } else {\n            // Drop waiting fragment if an earlier fragment is needed\n            var _bufferInfo = BufferHelper.bufferInfo(this.mediaBuffer, this.media.currentTime, config.maxBufferHole);\n\n            var waitingFragmentAtPosition = fragmentWithinToleranceTest(_bufferInfo.end, config.maxFragLookUpTolerance, waitingFrag.frag);\n\n            if (waitingFragmentAtPosition < 0) {\n              logger[\"logger\"].log(\"Waiting fragment cc (\" + waitingFragCC + \") @ \" + waitingFrag.frag.start + \" cancelled because another fragment at \" + _bufferInfo.end + \" is needed\");\n              this.clearWaitingFragment();\n            }\n          }\n        } else {\n          this.state = State.IDLE;\n        }\n\n        break;\n\n      case State.STOPPED:\n      case State.FRAG_LOADING:\n      case State.PARSING:\n      case State.PARSED:\n      case State.ENDED:\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  _proto.clearWaitingFragment = function clearWaitingFragment() {\n    var waitingFrag = this.waitingFragment;\n\n    if (waitingFrag) {\n      this.fragmentTracker.removeFragment(waitingFrag.frag);\n      this.waitingFragment = null;\n      this.waitingVideoCC = null;\n      this.state = State.IDLE;\n    }\n  };\n\n  _proto.onMediaAttached = function onMediaAttached(data) {\n    var media = this.media = this.mediaBuffer = data.media;\n    this.onvseeking = this.onMediaSeeking.bind(this);\n    this.onvended = this.onMediaEnded.bind(this);\n    media.addEventListener('seeking', this.onvseeking);\n    media.addEventListener('ended', this.onvended);\n    var config = this.config;\n\n    if (this.tracks && config.autoStartLoad) {\n      this.startLoad(config.startPosition);\n    }\n  };\n\n  _proto.onMediaDetaching = function onMediaDetaching() {\n    var media = this.media;\n\n    if (media && media.ended) {\n      logger[\"logger\"].log('MSE detaching and video ended, reset startPosition');\n      this.startPosition = this.lastCurrentTime = 0;\n    } // remove video listeners\n\n\n    if (media) {\n      media.removeEventListener('seeking', this.onvseeking);\n      media.removeEventListener('ended', this.onvended);\n      this.onvseeking = this.onvseeked = this.onvended = null;\n    }\n\n    this.media = this.mediaBuffer = this.videoBuffer = null;\n    this.loadedmetadata = false;\n    this.fragmentTracker.removeAllFragments();\n    this.stopLoad();\n  };\n\n  _proto.onAudioTracksUpdated = function onAudioTracksUpdated(data) {\n    logger[\"logger\"].log('audio tracks updated');\n    this.tracks = data.audioTracks;\n  };\n\n  _proto.onAudioTrackSwitching = function onAudioTrackSwitching(data) {\n    // if any URL found on new audio track, it is an alternate audio track\n    var altAudio = !!data.url;\n    this.trackId = data.id;\n    this.fragCurrent = null;\n    this.clearWaitingFragment();\n    this.state = State.PAUSED; // destroy useless demuxer when switching audio to main\n\n    if (!altAudio) {\n      if (this.demuxer) {\n        this.demuxer.destroy();\n        this.demuxer = null;\n      }\n    } else {\n      // switching to audio track, start timer if not already started\n      this.setInterval(audio_stream_controller_TICK_INTERVAL);\n    } // should we switch tracks ?\n\n\n    if (altAudio) {\n      this.audioSwitch = true; // main audio track are handled by stream-controller, just do something if switching to alt audio track\n\n      this.state = State.IDLE;\n    }\n\n    this.tick();\n  };\n\n  _proto.onAudioTrackLoaded = function onAudioTrackLoaded(data) {\n    var newDetails = data.details,\n        trackId = data.id,\n        track = this.tracks[trackId],\n        curDetails = track.details,\n        duration = newDetails.totalduration,\n        sliding = 0;\n    logger[\"logger\"].log(\"track \" + trackId + \" loaded [\" + newDetails.startSN + \",\" + newDetails.endSN + \"],duration:\" + duration);\n\n    if (newDetails.live || curDetails && curDetails.live) {\n      if (curDetails && newDetails.fragments.length > 0) {\n        // we already have details for that level, merge them\n        mergeDetails(curDetails, newDetails);\n        sliding = newDetails.fragments[0].start; // TODO\n        // this.liveSyncPosition = this.computeLivePosition(sliding, curDetails);\n\n        if (newDetails.PTSKnown) {\n          logger[\"logger\"].log(\"live audio playlist sliding:\" + sliding.toFixed(3));\n        } else {\n          logger[\"logger\"].log('live audio playlist - outdated PTS, unknown sliding');\n        }\n      } else {\n        newDetails.PTSKnown = false;\n        logger[\"logger\"].log('live audio playlist - first load, unknown sliding');\n      }\n    } else {\n      newDetails.PTSKnown = false;\n    }\n\n    track.details = newDetails; // compute start position\n\n    if (!this.startFragRequested) {\n      // compute start position if set to -1. use it straight away if value is defined\n      if (this.startPosition === -1) {\n        // first, check if start time offset has been set in playlist, if yes, use this value\n        var startTimeOffset = newDetails.startTimeOffset;\n\n        if (Object(number[\"isFiniteNumber\"])(startTimeOffset)) {\n          logger[\"logger\"].log(\"start time offset found in playlist, adjust startPosition to \" + startTimeOffset);\n          this.startPosition = startTimeOffset;\n        } else {\n          if (newDetails.live) {\n            this.startPosition = this.computeLivePosition(sliding, newDetails);\n            logger[\"logger\"].log(\"compute startPosition for audio-track to \" + this.startPosition);\n          } else {\n            this.startPosition = 0;\n          }\n        }\n      }\n\n      this.nextLoadPosition = this.startPosition;\n    } // only switch batck to IDLE state if we were waiting for track to start downloading a new fragment\n\n\n    if (this.state === State.WAITING_TRACK) {\n      this.state = State.IDLE;\n    } // trigger handler right now\n\n\n    this.tick();\n  };\n\n  _proto.onKeyLoaded = function onKeyLoaded() {\n    if (this.state === State.KEY_LOADING) {\n      this.state = State.IDLE;\n      this.tick();\n    }\n  };\n\n  _proto.onFragLoaded = function onFragLoaded(data) {\n    var fragCurrent = this.fragCurrent,\n        fragLoaded = data.frag;\n\n    if (this.state === State.FRAG_LOADING && fragCurrent && fragLoaded.type === 'audio' && fragLoaded.level === fragCurrent.level && fragLoaded.sn === fragCurrent.sn) {\n      var track = this.tracks[this.trackId],\n          details = track.details,\n          duration = details.totalduration,\n          trackId = fragCurrent.level,\n          sn = fragCurrent.sn,\n          cc = fragCurrent.cc,\n          audioCodec = this.config.defaultAudioCodec || track.audioCodec || 'mp4a.40.2',\n          stats = this.stats = data.stats;\n\n      if (sn === 'initSegment') {\n        this.state = State.IDLE;\n        stats.tparsed = stats.tbuffered = audio_stream_controller_performance.now();\n        details.initSegment.data = data.payload;\n        this.hls.trigger(events[\"default\"].FRAG_BUFFERED, {\n          stats: stats,\n          frag: fragCurrent,\n          id: 'audio'\n        });\n        this.tick();\n      } else {\n        this.state = State.PARSING; // transmux the MPEG-TS data to ISO-BMFF segments\n\n        this.appended = false;\n\n        if (!this.demuxer) {\n          this.demuxer = new demux_demuxer(this.hls, 'audio');\n        } // Check if we have video initPTS\n        // If not we need to wait for it\n\n\n        var initPTS = this.initPTS[cc];\n        var initSegmentData = details.initSegment ? details.initSegment.data : [];\n\n        if (initPTS !== undefined) {\n          this.pendingBuffering = true;\n          logger[\"logger\"].log(\"Demuxing \" + sn + \" of [\" + details.startSN + \" ,\" + details.endSN + \"],track \" + trackId); // time Offset is accurate if level PTS is known, or if playlist is not sliding (not live)\n\n          var accurateTimeOffset = false; // details.PTSKnown || !details.live;\n\n          this.demuxer.push(data.payload, initSegmentData, audioCodec, null, fragCurrent, duration, accurateTimeOffset, initPTS);\n        } else {\n          logger[\"logger\"].log(\"Unknown video PTS for cc \" + cc + \", waiting for video PTS before demuxing audio frag \" + sn + \" of [\" + details.startSN + \" ,\" + details.endSN + \"],track \" + trackId);\n          this.waitingFragment = data;\n          this.waitingVideoCC = this.videoTrackCC;\n          this.state = State.WAITING_INIT_PTS;\n        }\n      }\n    }\n\n    this.fragLoadError = 0;\n  };\n\n  _proto.onFragParsingInitSegment = function onFragParsingInitSegment(data) {\n    var fragCurrent = this.fragCurrent;\n    var fragNew = data.frag;\n\n    if (fragCurrent && data.id === 'audio' && fragNew.sn === fragCurrent.sn && fragNew.level === fragCurrent.level && this.state === State.PARSING) {\n      var tracks = data.tracks,\n          track; // delete any video track found on audio demuxer\n\n      if (tracks.video) {\n        delete tracks.video;\n      } // include levelCodec in audio and video tracks\n\n\n      track = tracks.audio;\n\n      if (track) {\n        track.levelCodec = track.codec;\n        track.id = data.id;\n        this.hls.trigger(events[\"default\"].BUFFER_CODECS, tracks);\n        logger[\"logger\"].log(\"audio track:audio,container:\" + track.container + \",codecs[level/parsed]=[\" + track.levelCodec + \"/\" + track.codec + \"]\");\n        var initSegment = track.initSegment;\n\n        if (initSegment) {\n          var appendObj = {\n            type: 'audio',\n            data: initSegment,\n            parent: 'audio',\n            content: 'initSegment'\n          };\n\n          if (this.audioSwitch) {\n            this.pendingData = [appendObj];\n          } else {\n            this.appended = true; // arm pending Buffering flag before appending a segment\n\n            this.pendingBuffering = true;\n            this.hls.trigger(events[\"default\"].BUFFER_APPENDING, appendObj);\n          }\n        } // trigger handler right now\n\n\n        this.tick();\n      }\n    }\n  };\n\n  _proto.onFragParsingData = function onFragParsingData(data) {\n    var _this2 = this;\n\n    var fragCurrent = this.fragCurrent;\n    var fragNew = data.frag;\n\n    if (fragCurrent && data.id === 'audio' && data.type === 'audio' && fragNew.sn === fragCurrent.sn && fragNew.level === fragCurrent.level && this.state === State.PARSING) {\n      var trackId = this.trackId,\n          track = this.tracks[trackId],\n          hls = this.hls;\n\n      if (!Object(number[\"isFiniteNumber\"])(data.endPTS)) {\n        data.endPTS = data.startPTS + fragCurrent.duration;\n        data.endDTS = data.startDTS + fragCurrent.duration;\n      }\n\n      fragCurrent.addElementaryStream(ElementaryStreamTypes.AUDIO);\n      logger[\"logger\"].log(\"parsed \" + data.type + \",PTS:[\" + data.startPTS.toFixed(3) + \",\" + data.endPTS.toFixed(3) + \"],DTS:[\" + data.startDTS.toFixed(3) + \"/\" + data.endDTS.toFixed(3) + \"],nb:\" + data.nb);\n      updateFragPTSDTS(track.details, fragCurrent, data.startPTS, data.endPTS);\n      var media = this.media;\n      var appendOnBufferFlush = false; // Only flush audio from old audio tracks when PTS is known on new audio track\n\n      if (this.audioSwitch) {\n        if (media && media.readyState) {\n          var currentTime = media.currentTime;\n          logger[\"logger\"].log('switching audio track : currentTime:' + currentTime);\n\n          if (currentTime >= data.startPTS) {\n            logger[\"logger\"].log('switching audio track : flushing all audio');\n            this.state = State.BUFFER_FLUSHING;\n            hls.trigger(events[\"default\"].BUFFER_FLUSHING, {\n              startOffset: 0,\n              endOffset: Number.POSITIVE_INFINITY,\n              type: 'audio'\n            });\n            appendOnBufferFlush = true; // Lets announce that the initial audio track switch flush occur\n\n            this.audioSwitch = false;\n            hls.trigger(events[\"default\"].AUDIO_TRACK_SWITCHED, {\n              id: trackId\n            });\n          }\n        } else {\n          // Lets announce that the initial audio track switch flush occur\n          this.audioSwitch = false;\n          hls.trigger(events[\"default\"].AUDIO_TRACK_SWITCHED, {\n            id: trackId\n          });\n        }\n      }\n\n      var pendingData = this.pendingData;\n\n      if (!pendingData) {\n        logger[\"logger\"].warn('Apparently attempt to enqueue media payload without codec initialization data upfront');\n        hls.trigger(events[\"default\"].ERROR, {\n          type: errors[\"ErrorTypes\"].MEDIA_ERROR,\n          details: null,\n          fatal: true\n        });\n        return;\n      }\n\n      if (!this.audioSwitch) {\n        [data.data1, data.data2].forEach(function (buffer) {\n          if (buffer && buffer.length) {\n            pendingData.push({\n              type: data.type,\n              data: buffer,\n              parent: 'audio',\n              content: 'data'\n            });\n          }\n        });\n\n        if (!appendOnBufferFlush && pendingData.length) {\n          pendingData.forEach(function (appendObj) {\n            // only append in PARSING state (rationale is that an appending error could happen synchronously on first segment appending)\n            // in that case it is useless to append following segments\n            if (_this2.state === State.PARSING) {\n              // arm pending Buffering flag before appending a segment\n              _this2.pendingBuffering = true;\n\n              _this2.hls.trigger(events[\"default\"].BUFFER_APPENDING, appendObj);\n            }\n          });\n          this.pendingData = [];\n          this.appended = true;\n        }\n      } // trigger handler right now\n\n\n      this.tick();\n    }\n  };\n\n  _proto.onFragParsed = function onFragParsed(data) {\n    var fragCurrent = this.fragCurrent;\n    var fragNew = data.frag;\n\n    if (fragCurrent && data.id === 'audio' && fragNew.sn === fragCurrent.sn && fragNew.level === fragCurrent.level && this.state === State.PARSING) {\n      this.stats.tparsed = audio_stream_controller_performance.now();\n      this.state = State.PARSED;\n\n      this._checkAppendedParsed();\n    }\n  };\n\n  _proto.onBufferReset = function onBufferReset() {\n    // reset reference to sourcebuffers\n    this.mediaBuffer = this.videoBuffer = null;\n    this.loadedmetadata = false;\n  };\n\n  _proto.onBufferCreated = function onBufferCreated(data) {\n    var audioTrack = data.tracks.audio;\n\n    if (audioTrack) {\n      this.mediaBuffer = audioTrack.buffer;\n      this.loadedmetadata = true;\n    }\n\n    if (data.tracks.video) {\n      this.videoBuffer = data.tracks.video.buffer;\n    }\n  };\n\n  _proto.onBufferAppended = function onBufferAppended(data) {\n    if (data.parent === 'audio') {\n      var state = this.state;\n\n      if (state === State.PARSING || state === State.PARSED) {\n        // check if all buffers have been appended\n        this.pendingBuffering = data.pending > 0;\n\n        this._checkAppendedParsed();\n      }\n    }\n  };\n\n  _proto._checkAppendedParsed = function _checkAppendedParsed() {\n    // trigger handler right now\n    if (this.state === State.PARSED && (!this.appended || !this.pendingBuffering)) {\n      var frag = this.fragCurrent,\n          stats = this.stats,\n          hls = this.hls;\n\n      if (frag) {\n        this.fragPrevious = frag;\n        stats.tbuffered = audio_stream_controller_performance.now();\n        hls.trigger(events[\"default\"].FRAG_BUFFERED, {\n          stats: stats,\n          frag: frag,\n          id: 'audio'\n        });\n        var media = this.mediaBuffer ? this.mediaBuffer : this.media;\n\n        if (media) {\n          logger[\"logger\"].log(\"audio buffered : \" + time_ranges.toString(media.buffered));\n        }\n\n        if (this.audioSwitch && this.appended) {\n          this.audioSwitch = false;\n          hls.trigger(events[\"default\"].AUDIO_TRACK_SWITCHED, {\n            id: this.trackId\n          });\n        }\n\n        this.state = State.IDLE;\n      }\n\n      this.tick();\n    }\n  };\n\n  _proto.onError = function onError(data) {\n    var frag = data.frag; // don't handle frag error not related to audio fragment\n\n    if (frag && frag.type !== 'audio') {\n      return;\n    }\n\n    switch (data.details) {\n      case errors[\"ErrorDetails\"].FRAG_LOAD_ERROR:\n      case errors[\"ErrorDetails\"].FRAG_LOAD_TIMEOUT:\n        var _frag = data.frag; // don't handle frag error not related to audio fragment\n\n        if (_frag && _frag.type !== 'audio') {\n          break;\n        }\n\n        if (!data.fatal) {\n          var loadError = this.fragLoadError;\n\n          if (loadError) {\n            loadError++;\n          } else {\n            loadError = 1;\n          }\n\n          var config = this.config;\n\n          if (loadError <= config.fragLoadingMaxRetry) {\n            this.fragLoadError = loadError; // exponential backoff capped to config.fragLoadingMaxRetryTimeout\n\n            var delay = Math.min(Math.pow(2, loadError - 1) * config.fragLoadingRetryDelay, config.fragLoadingMaxRetryTimeout);\n            logger[\"logger\"].warn(\"AudioStreamController: frag loading failed, retry in \" + delay + \" ms\");\n            this.retryDate = audio_stream_controller_performance.now() + delay; // retry loading state\n\n            this.state = State.FRAG_LOADING_WAITING_RETRY;\n          } else {\n            logger[\"logger\"].error(\"AudioStreamController: \" + data.details + \" reaches max retry, redispatch as fatal ...\"); // switch error to fatal\n\n            data.fatal = true;\n            this.state = State.ERROR;\n          }\n        }\n\n        break;\n\n      case errors[\"ErrorDetails\"].AUDIO_TRACK_LOAD_ERROR:\n      case errors[\"ErrorDetails\"].AUDIO_TRACK_LOAD_TIMEOUT:\n      case errors[\"ErrorDetails\"].KEY_LOAD_ERROR:\n      case errors[\"ErrorDetails\"].KEY_LOAD_TIMEOUT:\n        //  when in ERROR state, don't switch back to IDLE state in case a non-fatal error is received\n        if (this.state !== State.ERROR) {\n          // if fatal error, stop processing, otherwise move to IDLE to retry loading\n          this.state = data.fatal ? State.ERROR : State.IDLE;\n          logger[\"logger\"].warn(\"AudioStreamController: \" + data.details + \" while loading frag, now switching to \" + this.state + \" state ...\");\n        }\n\n        break;\n\n      case errors[\"ErrorDetails\"].BUFFER_FULL_ERROR:\n        // if in appending state\n        if (data.parent === 'audio' && (this.state === State.PARSING || this.state === State.PARSED)) {\n          var media = this.mediaBuffer,\n              currentTime = this.media.currentTime,\n              mediaBuffered = media && BufferHelper.isBuffered(media, currentTime) && BufferHelper.isBuffered(media, currentTime + 0.5); // reduce max buf len if current position is buffered\n\n          if (mediaBuffered) {\n            var _config = this.config;\n\n            if (_config.maxMaxBufferLength >= _config.maxBufferLength) {\n              // reduce max buffer length as it might be too high. we do this to avoid loop flushing ...\n              _config.maxMaxBufferLength /= 2;\n              logger[\"logger\"].warn(\"AudioStreamController: reduce max buffer length to \" + _config.maxMaxBufferLength + \"s\");\n            }\n\n            this.state = State.IDLE;\n          } else {\n            // current position is not buffered, but browser is still complaining about buffer full error\n            // this happens on IE/Edge, refer to https://github.com/video-dev/hls.js/pull/708\n            // in that case flush the whole audio buffer to recover\n            logger[\"logger\"].warn('AudioStreamController: buffer full error also media.currentTime is not buffered, flush audio buffer');\n            this.fragCurrent = null; // flush everything\n\n            this.state = State.BUFFER_FLUSHING;\n            this.hls.trigger(events[\"default\"].BUFFER_FLUSHING, {\n              startOffset: 0,\n              endOffset: Number.POSITIVE_INFINITY,\n              type: 'audio'\n            });\n          }\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  _proto.onBufferFlushed = function onBufferFlushed() {\n    var _this3 = this;\n\n    var pendingData = this.pendingData;\n\n    if (pendingData && pendingData.length) {\n      logger[\"logger\"].log('AudioStreamController: appending pending audio data after buffer flushed');\n      pendingData.forEach(function (appendObj) {\n        _this3.hls.trigger(events[\"default\"].BUFFER_APPENDING, appendObj);\n      });\n      this.appended = true;\n      this.pendingData = [];\n      this.state = State.PARSED;\n    } else {\n      // move to IDLE once flush complete. this should trigger new fragment loading\n      this.state = State.IDLE; // reset reference to frag\n\n      this.fragPrevious = null;\n      this.tick();\n    }\n  };\n\n  audio_stream_controller_createClass(AudioStreamController, [{\n    key: \"state\",\n    set: function set(nextState) {\n      if (this.state !== nextState) {\n        var previousState = this.state;\n        this._state = nextState;\n        logger[\"logger\"].log(\"audio stream:\" + previousState + \"->\" + nextState);\n      }\n    },\n    get: function get() {\n      return this._state;\n    }\n  }]);\n\n  return AudioStreamController;\n}(base_stream_controller_BaseStreamController);\n\n/* harmony default export */ var audio_stream_controller = (audio_stream_controller_AudioStreamController);\n// CONCATENATED MODULE: ./src/utils/vttcue.js\n/**\n * Copyright 2013 vtt.js Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* harmony default export */ var vttcue = ((function () {\n  if (typeof window !== 'undefined' && window.VTTCue) {\n    return window.VTTCue;\n  }\n\n  var autoKeyword = 'auto';\n  var directionSetting = {\n    '': true,\n    lr: true,\n    rl: true\n  };\n  var alignSetting = {\n    start: true,\n    middle: true,\n    end: true,\n    left: true,\n    right: true\n  };\n\n  function findDirectionSetting(value) {\n    if (typeof value !== 'string') {\n      return false;\n    }\n\n    var dir = directionSetting[value.toLowerCase()];\n    return dir ? value.toLowerCase() : false;\n  }\n\n  function findAlignSetting(value) {\n    if (typeof value !== 'string') {\n      return false;\n    }\n\n    var align = alignSetting[value.toLowerCase()];\n    return align ? value.toLowerCase() : false;\n  }\n\n  function extend(obj) {\n    var i = 1;\n\n    for (; i < arguments.length; i++) {\n      var cobj = arguments[i];\n\n      for (var p in cobj) {\n        obj[p] = cobj[p];\n      }\n    }\n\n    return obj;\n  }\n\n  function VTTCue(startTime, endTime, text) {\n    var cue = this;\n    var baseObj = {};\n    baseObj.enumerable = true;\n    /**\n     * Shim implementation specific properties. These properties are not in\n     * the spec.\n     */\n    // Lets us know when the VTTCue's data has changed in such a way that we need\n    // to recompute its display state. This lets us compute its display state\n    // lazily.\n\n    cue.hasBeenReset = false;\n    /**\n     * VTTCue and TextTrackCue properties\n     * http://dev.w3.org/html5/webvtt/#vttcue-interface\n     */\n\n    var _id = '';\n    var _pauseOnExit = false;\n    var _startTime = startTime;\n    var _endTime = endTime;\n    var _text = text;\n    var _region = null;\n    var _vertical = '';\n    var _snapToLines = true;\n    var _line = 'auto';\n    var _lineAlign = 'start';\n    var _position = 50;\n    var _positionAlign = 'middle';\n    var _size = 50;\n    var _align = 'middle';\n    Object.defineProperty(cue, 'id', extend({}, baseObj, {\n      get: function get() {\n        return _id;\n      },\n      set: function set(value) {\n        _id = '' + value;\n      }\n    }));\n    Object.defineProperty(cue, 'pauseOnExit', extend({}, baseObj, {\n      get: function get() {\n        return _pauseOnExit;\n      },\n      set: function set(value) {\n        _pauseOnExit = !!value;\n      }\n    }));\n    Object.defineProperty(cue, 'startTime', extend({}, baseObj, {\n      get: function get() {\n        return _startTime;\n      },\n      set: function set(value) {\n        if (typeof value !== 'number') {\n          throw new TypeError('Start time must be set to a number.');\n        }\n\n        _startTime = value;\n        this.hasBeenReset = true;\n      }\n    }));\n    Object.defineProperty(cue, 'endTime', extend({}, baseObj, {\n      get: function get() {\n        return _endTime;\n      },\n      set: function set(value) {\n        if (typeof value !== 'number') {\n          throw new TypeError('End time must be set to a number.');\n        }\n\n        _endTime = value;\n        this.hasBeenReset = true;\n      }\n    }));\n    Object.defineProperty(cue, 'text', extend({}, baseObj, {\n      get: function get() {\n        return _text;\n      },\n      set: function set(value) {\n        _text = '' + value;\n        this.hasBeenReset = true;\n      }\n    }));\n    Object.defineProperty(cue, 'region', extend({}, baseObj, {\n      get: function get() {\n        return _region;\n      },\n      set: function set(value) {\n        _region = value;\n        this.hasBeenReset = true;\n      }\n    }));\n    Object.defineProperty(cue, 'vertical', extend({}, baseObj, {\n      get: function get() {\n        return _vertical;\n      },\n      set: function set(value) {\n        var setting = findDirectionSetting(value); // Have to check for false because the setting an be an empty string.\n\n        if (setting === false) {\n          throw new SyntaxError('An invalid or illegal string was specified.');\n        }\n\n        _vertical = setting;\n        this.hasBeenReset = true;\n      }\n    }));\n    Object.defineProperty(cue, 'snapToLines', extend({}, baseObj, {\n      get: function get() {\n        return _snapToLines;\n      },\n      set: function set(value) {\n        _snapToLines = !!value;\n        this.hasBeenReset = true;\n      }\n    }));\n    Object.defineProperty(cue, 'line', extend({}, baseObj, {\n      get: function get() {\n        return _line;\n      },\n      set: function set(value) {\n        if (typeof value !== 'number' && value !== autoKeyword) {\n          throw new SyntaxError('An invalid number or illegal string was specified.');\n        }\n\n        _line = value;\n        this.hasBeenReset = true;\n      }\n    }));\n    Object.defineProperty(cue, 'lineAlign', extend({}, baseObj, {\n      get: function get() {\n        return _lineAlign;\n      },\n      set: function set(value) {\n        var setting = findAlignSetting(value);\n\n        if (!setting) {\n          throw new SyntaxError('An invalid or illegal string was specified.');\n        }\n\n        _lineAlign = setting;\n        this.hasBeenReset = true;\n      }\n    }));\n    Object.defineProperty(cue, 'position', extend({}, baseObj, {\n      get: function get() {\n        return _position;\n      },\n      set: function set(value) {\n        if (value < 0 || value > 100) {\n          throw new Error('Position must be between 0 and 100.');\n        }\n\n        _position = value;\n        this.hasBeenReset = true;\n      }\n    }));\n    Object.defineProperty(cue, 'positionAlign', extend({}, baseObj, {\n      get: function get() {\n        return _positionAlign;\n      },\n      set: function set(value) {\n        var setting = findAlignSetting(value);\n\n        if (!setting) {\n          throw new SyntaxError('An invalid or illegal string was specified.');\n        }\n\n        _positionAlign = setting;\n        this.hasBeenReset = true;\n      }\n    }));\n    Object.defineProperty(cue, 'size', extend({}, baseObj, {\n      get: function get() {\n        return _size;\n      },\n      set: function set(value) {\n        if (value < 0 || value > 100) {\n          throw new Error('Size must be between 0 and 100.');\n        }\n\n        _size = value;\n        this.hasBeenReset = true;\n      }\n    }));\n    Object.defineProperty(cue, 'align', extend({}, baseObj, {\n      get: function get() {\n        return _align;\n      },\n      set: function set(value) {\n        var setting = findAlignSetting(value);\n\n        if (!setting) {\n          throw new SyntaxError('An invalid or illegal string was specified.');\n        }\n\n        _align = setting;\n        this.hasBeenReset = true;\n      }\n    }));\n    /**\n     * Other <track> spec defined properties\n     */\n    // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state\n\n    cue.displayState = void 0;\n  }\n  /**\n   * VTTCue methods\n   */\n\n\n  VTTCue.prototype.getCueAsHTML = function () {\n    // Assume WebVTT.convertCueToDOMTree is on the global.\n    var WebVTT = window.WebVTT;\n    return WebVTT.convertCueToDOMTree(window, this.text);\n  };\n\n  return VTTCue;\n})());\n// CONCATENATED MODULE: ./src/utils/vttparser.js\n/*\n * Source: https://github.com/mozilla/vtt.js/blob/master/dist/vtt.js#L1716\n */\n\n\nvar StringDecoder = function StringDecoder() {\n  return {\n    decode: function decode(data) {\n      if (!data) {\n        return '';\n      }\n\n      if (typeof data !== 'string') {\n        throw new Error('Error - expected string data.');\n      }\n\n      return decodeURIComponent(encodeURIComponent(data));\n    }\n  };\n};\n\nfunction VTTParser() {\n  this.window = window;\n  this.state = 'INITIAL';\n  this.buffer = '';\n  this.decoder = new StringDecoder();\n  this.regionList = [];\n} // Try to parse input as a time stamp.\n\n\nfunction parseTimeStamp(input) {\n  function computeSeconds(h, m, s, f) {\n    return (h | 0) * 3600 + (m | 0) * 60 + (s | 0) + (f | 0) / 1000;\n  }\n\n  var m = input.match(/^(\\d+):(\\d{2})(:\\d{2})?\\.(\\d{3})/);\n\n  if (!m) {\n    return null;\n  }\n\n  if (m[3]) {\n    // Timestamp takes the form of [hours]:[minutes]:[seconds].[milliseconds]\n    return computeSeconds(m[1], m[2], m[3].replace(':', ''), m[4]);\n  } else if (m[1] > 59) {\n    // Timestamp takes the form of [hours]:[minutes].[milliseconds]\n    // First position is hours as it's over 59.\n    return computeSeconds(m[1], m[2], 0, m[4]);\n  } else {\n    // Timestamp takes the form of [minutes]:[seconds].[milliseconds]\n    return computeSeconds(0, m[1], m[2], m[4]);\n  }\n} // A settings object holds key/value pairs and will ignore anything but the first\n// assignment to a specific key.\n\n\nfunction Settings() {\n  this.values = Object.create(null);\n}\n\nSettings.prototype = {\n  // Only accept the first assignment to any key.\n  set: function set(k, v) {\n    if (!this.get(k) && v !== '') {\n      this.values[k] = v;\n    }\n  },\n  // Return the value for a key, or a default value.\n  // If 'defaultKey' is passed then 'dflt' is assumed to be an object with\n  // a number of possible default values as properties where 'defaultKey' is\n  // the key of the property that will be chosen; otherwise it's assumed to be\n  // a single value.\n  get: function get(k, dflt, defaultKey) {\n    if (defaultKey) {\n      return this.has(k) ? this.values[k] : dflt[defaultKey];\n    }\n\n    return this.has(k) ? this.values[k] : dflt;\n  },\n  // Check whether we have a value for a key.\n  has: function has(k) {\n    return k in this.values;\n  },\n  // Accept a setting if its one of the given alternatives.\n  alt: function alt(k, v, a) {\n    for (var n = 0; n < a.length; ++n) {\n      if (v === a[n]) {\n        this.set(k, v);\n        break;\n      }\n    }\n  },\n  // Accept a setting if its a valid (signed) integer.\n  integer: function integer(k, v) {\n    if (/^-?\\d+$/.test(v)) {\n      // integer\n      this.set(k, parseInt(v, 10));\n    }\n  },\n  // Accept a setting if its a valid percentage.\n  percent: function percent(k, v) {\n    var m;\n\n    if (m = v.match(/^([\\d]{1,3})(\\.[\\d]*)?%$/)) {\n      v = parseFloat(v);\n\n      if (v >= 0 && v <= 100) {\n        this.set(k, v);\n        return true;\n      }\n    }\n\n    return false;\n  }\n}; // Helper function to parse input into groups separated by 'groupDelim', and\n// interprete each group as a key/value pair separated by 'keyValueDelim'.\n\nfunction parseOptions(input, callback, keyValueDelim, groupDelim) {\n  var groups = groupDelim ? input.split(groupDelim) : [input];\n\n  for (var i in groups) {\n    if (typeof groups[i] !== 'string') {\n      continue;\n    }\n\n    var kv = groups[i].split(keyValueDelim);\n\n    if (kv.length !== 2) {\n      continue;\n    }\n\n    var k = kv[0];\n    var v = kv[1];\n    callback(k, v);\n  }\n}\n\nvar defaults = new vttcue(0, 0, 0); // 'middle' was changed to 'center' in the spec: https://github.com/w3c/webvtt/pull/244\n//  Safari doesn't yet support this change, but FF and Chrome do.\n\nvar center = defaults.align === 'middle' ? 'middle' : 'center';\n\nfunction parseCue(input, cue, regionList) {\n  // Remember the original input if we need to throw an error.\n  var oInput = input; // 4.1 WebVTT timestamp\n\n  function consumeTimeStamp() {\n    var ts = parseTimeStamp(input);\n\n    if (ts === null) {\n      throw new Error('Malformed timestamp: ' + oInput);\n    } // Remove time stamp from input.\n\n\n    input = input.replace(/^[^\\sa-zA-Z-]+/, '');\n    return ts;\n  } // 4.4.2 WebVTT cue settings\n\n\n  function consumeCueSettings(input, cue) {\n    var settings = new Settings();\n    parseOptions(input, function (k, v) {\n      switch (k) {\n        case 'region':\n          // Find the last region we parsed with the same region id.\n          for (var i = regionList.length - 1; i >= 0; i--) {\n            if (regionList[i].id === v) {\n              settings.set(k, regionList[i].region);\n              break;\n            }\n          }\n\n          break;\n\n        case 'vertical':\n          settings.alt(k, v, ['rl', 'lr']);\n          break;\n\n        case 'line':\n          var vals = v.split(','),\n              vals0 = vals[0];\n          settings.integer(k, vals0);\n\n          if (settings.percent(k, vals0)) {\n            settings.set('snapToLines', false);\n          }\n\n          settings.alt(k, vals0, ['auto']);\n\n          if (vals.length === 2) {\n            settings.alt('lineAlign', vals[1], ['start', center, 'end']);\n          }\n\n          break;\n\n        case 'position':\n          vals = v.split(',');\n          settings.percent(k, vals[0]);\n\n          if (vals.length === 2) {\n            settings.alt('positionAlign', vals[1], ['start', center, 'end', 'line-left', 'line-right', 'auto']);\n          }\n\n          break;\n\n        case 'size':\n          settings.percent(k, v);\n          break;\n\n        case 'align':\n          settings.alt(k, v, ['start', center, 'end', 'left', 'right']);\n          break;\n      }\n    }, /:/, /\\s/); // Apply default values for any missing fields.\n\n    cue.region = settings.get('region', null);\n    cue.vertical = settings.get('vertical', '');\n    var line = settings.get('line', 'auto');\n\n    if (line === 'auto' && defaults.line === -1) {\n      // set numeric line number for Safari\n      line = -1;\n    }\n\n    cue.line = line;\n    cue.lineAlign = settings.get('lineAlign', 'start');\n    cue.snapToLines = settings.get('snapToLines', true);\n    cue.size = settings.get('size', 100);\n    cue.align = settings.get('align', center);\n    var position = settings.get('position', 'auto');\n\n    if (position === 'auto' && defaults.position === 50) {\n      // set numeric position for Safari\n      position = cue.align === 'start' || cue.align === 'left' ? 0 : cue.align === 'end' || cue.align === 'right' ? 100 : 50;\n    }\n\n    cue.position = position;\n  }\n\n  function skipWhitespace() {\n    input = input.replace(/^\\s+/, '');\n  } // 4.1 WebVTT cue timings.\n\n\n  skipWhitespace();\n  cue.startTime = consumeTimeStamp(); // (1) collect cue start time\n\n  skipWhitespace();\n\n  if (input.substr(0, 3) !== '-->') {\n    // (3) next characters must match '-->'\n    throw new Error('Malformed time stamp (time stamps must be separated by \\'-->\\'): ' + oInput);\n  }\n\n  input = input.substr(3);\n  skipWhitespace();\n  cue.endTime = consumeTimeStamp(); // (5) collect cue end time\n  // 4.1 WebVTT cue settings list.\n\n  skipWhitespace();\n  consumeCueSettings(input, cue);\n}\n\nfunction fixLineBreaks(input) {\n  return input.replace(/<br(?: \\/)?>/gi, '\\n');\n}\n\nVTTParser.prototype = {\n  parse: function parse(data) {\n    var self = this; // If there is no data then we won't decode it, but will just try to parse\n    // whatever is in buffer already. This may occur in circumstances, for\n    // example when flush() is called.\n\n    if (data) {\n      // Try to decode the data that we received.\n      self.buffer += self.decoder.decode(data, {\n        stream: true\n      });\n    }\n\n    function collectNextLine() {\n      var buffer = self.buffer;\n      var pos = 0;\n      buffer = fixLineBreaks(buffer);\n\n      while (pos < buffer.length && buffer[pos] !== '\\r' && buffer[pos] !== '\\n') {\n        ++pos;\n      }\n\n      var line = buffer.substr(0, pos); // Advance the buffer early in case we fail below.\n\n      if (buffer[pos] === '\\r') {\n        ++pos;\n      }\n\n      if (buffer[pos] === '\\n') {\n        ++pos;\n      }\n\n      self.buffer = buffer.substr(pos);\n      return line;\n    } // 3.2 WebVTT metadata header syntax\n\n\n    function parseHeader(input) {\n      parseOptions(input, function (k, v) {\n        switch (k) {\n          case 'Region':\n            // 3.3 WebVTT region metadata header syntax\n            // console.log('parse region', v);\n            // parseRegion(v);\n            break;\n        }\n      }, /:/);\n    } // 5.1 WebVTT file parsing.\n\n\n    try {\n      var line;\n\n      if (self.state === 'INITIAL') {\n        // We can't start parsing until we have the first line.\n        if (!/\\r\\n|\\n/.test(self.buffer)) {\n          return this;\n        }\n\n        line = collectNextLine(); // strip of UTF-8 BOM if any\n        // https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8\n\n        var m = line.match(/^(ï»¿)?WEBVTT([ \\t].*)?$/);\n\n        if (!m || !m[0]) {\n          throw new Error('Malformed WebVTT signature.');\n        }\n\n        self.state = 'HEADER';\n      }\n\n      var alreadyCollectedLine = false;\n\n      while (self.buffer) {\n        // We can't parse a line until we have the full line.\n        if (!/\\r\\n|\\n/.test(self.buffer)) {\n          return this;\n        }\n\n        if (!alreadyCollectedLine) {\n          line = collectNextLine();\n        } else {\n          alreadyCollectedLine = false;\n        }\n\n        switch (self.state) {\n          case 'HEADER':\n            // 13-18 - Allow a header (metadata) under the WEBVTT line.\n            if (/:/.test(line)) {\n              parseHeader(line);\n            } else if (!line) {\n              // An empty line terminates the header and starts the body (cues).\n              self.state = 'ID';\n            }\n\n            continue;\n\n          case 'NOTE':\n            // Ignore NOTE blocks.\n            if (!line) {\n              self.state = 'ID';\n            }\n\n            continue;\n\n          case 'ID':\n            // Check for the start of NOTE blocks.\n            if (/^NOTE($|[ \\t])/.test(line)) {\n              self.state = 'NOTE';\n              break;\n            } // 19-29 - Allow any number of line terminators, then initialize new cue values.\n\n\n            if (!line) {\n              continue;\n            }\n\n            self.cue = new vttcue(0, 0, '');\n            self.state = 'CUE'; // 30-39 - Check if self line contains an optional identifier or timing data.\n\n            if (line.indexOf('-->') === -1) {\n              self.cue.id = line;\n              continue;\n            }\n\n          // Process line as start of a cue.\n\n          /* falls through */\n\n          case 'CUE':\n            // 40 - Collect cue timings and settings.\n            try {\n              parseCue(line, self.cue, self.regionList);\n            } catch (e) {\n              // In case of an error ignore rest of the cue.\n              self.cue = null;\n              self.state = 'BADCUE';\n              continue;\n            }\n\n            self.state = 'CUETEXT';\n            continue;\n\n          case 'CUETEXT':\n            var hasSubstring = line.indexOf('-->') !== -1; // 34 - If we have an empty line then report the cue.\n            // 35 - If we have the special substring '-->' then report the cue,\n            // but do not collect the line as we need to process the current\n            // one as a new cue.\n\n            if (!line || hasSubstring && (alreadyCollectedLine = true)) {\n              // We are done parsing self cue.\n              if (self.oncue) {\n                self.oncue(self.cue);\n              }\n\n              self.cue = null;\n              self.state = 'ID';\n              continue;\n            }\n\n            if (self.cue.text) {\n              self.cue.text += '\\n';\n            }\n\n            self.cue.text += line;\n            continue;\n\n          case 'BADCUE':\n            // BADCUE\n            // 54-62 - Collect and discard the remaining cue.\n            if (!line) {\n              self.state = 'ID';\n            }\n\n            continue;\n        }\n      }\n    } catch (e) {\n      // If we are currently parsing a cue, report what we have.\n      if (self.state === 'CUETEXT' && self.cue && self.oncue) {\n        self.oncue(self.cue);\n      }\n\n      self.cue = null; // Enter BADWEBVTT state if header was not parsed correctly otherwise\n      // another exception occurred so enter BADCUE state.\n\n      self.state = self.state === 'INITIAL' ? 'BADWEBVTT' : 'BADCUE';\n    }\n\n    return this;\n  },\n  flush: function flush() {\n    var self = this;\n\n    try {\n      // Finish decoding the stream.\n      self.buffer += self.decoder.decode(); // Synthesize the end of the current cue or region.\n\n      if (self.cue || self.state === 'HEADER') {\n        self.buffer += '\\n\\n';\n        self.parse();\n      } // If we've flushed, parsed, and we're still on the INITIAL state then\n      // that means we don't have enough of the stream to parse the first\n      // line.\n\n\n      if (self.state === 'INITIAL') {\n        throw new Error('Malformed WebVTT signature.');\n      }\n    } catch (e) {\n      throw e;\n    }\n\n    if (self.onflush) {\n      self.onflush();\n    }\n\n    return this;\n  }\n};\n\n/* harmony default export */ var vttparser = (VTTParser);\n// CONCATENATED MODULE: ./src/utils/cues.ts\n\nfunction newCue(track, startTime, endTime, captionScreen) {\n  var result = [];\n  var row; // the type data states this is VTTCue, but it can potentially be a TextTrackCue on old browsers\n\n  var cue;\n  var indenting;\n  var indent;\n  var text;\n  var VTTCue = window.VTTCue || TextTrackCue;\n\n  for (var r = 0; r < captionScreen.rows.length; r++) {\n    row = captionScreen.rows[r];\n    indenting = true;\n    indent = 0;\n    text = '';\n\n    if (!row.isEmpty()) {\n      for (var c = 0; c < row.chars.length; c++) {\n        if (row.chars[c].uchar.match(/\\s/) && indenting) {\n          indent++;\n        } else {\n          text += row.chars[c].uchar;\n          indenting = false;\n        }\n      } // To be used for cleaning-up orphaned roll-up captions\n\n\n      row.cueStartTime = startTime; // Give a slight bump to the endTime if it's equal to startTime to avoid a SyntaxError in IE\n\n      if (startTime === endTime) {\n        endTime += 0.0001;\n      }\n\n      cue = new VTTCue(startTime, endTime, fixLineBreaks(text.trim()));\n\n      if (indent >= 16) {\n        indent--;\n      } else {\n        indent++;\n      } // VTTCue.line get's flakey when using controls, so let's now include line 13&14\n      // also, drop line 1 since it's to close to the top\n\n\n      if (navigator.userAgent.match(/Firefox\\//)) {\n        cue.line = r + 1;\n      } else {\n        cue.line = r > 7 ? r - 2 : r + 1;\n      }\n\n      cue.align = 'left'; // Clamp the position between 0 and 100 - if out of these bounds, Firefox throws an exception and captions break\n\n      cue.position = Math.max(0, Math.min(100, 100 * (indent / 32)));\n      result.push(cue);\n\n      if (track) {\n        track.addCue(cue);\n      }\n    }\n  }\n\n  return result;\n}\n// CONCATENATED MODULE: ./src/utils/cea-608-parser.ts\n\n/**\n *\n * This code was ported from the dash.js project at:\n *   https://github.com/Dash-Industry-Forum/dash.js/blob/development/externals/cea608-parser.js\n *   https://github.com/Dash-Industry-Forum/dash.js/commit/8269b26a761e0853bb21d78780ed945144ecdd4d#diff-71bc295a2d6b6b7093a1d3290d53a4b2\n *\n * The original copyright appears below:\n *\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2015-2016, DASH Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  1. Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  2. Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n *  Exceptions from regular ASCII. CodePoints are mapped to UTF-16 codes\n */\n\nvar specialCea608CharsCodes = {\n  0x2a: 0xe1,\n  // lowercase a, acute accent\n  0x5c: 0xe9,\n  // lowercase e, acute accent\n  0x5e: 0xed,\n  // lowercase i, acute accent\n  0x5f: 0xf3,\n  // lowercase o, acute accent\n  0x60: 0xfa,\n  // lowercase u, acute accent\n  0x7b: 0xe7,\n  // lowercase c with cedilla\n  0x7c: 0xf7,\n  // division symbol\n  0x7d: 0xd1,\n  // uppercase N tilde\n  0x7e: 0xf1,\n  // lowercase n tilde\n  0x7f: 0x2588,\n  // Full block\n  // THIS BLOCK INCLUDES THE 16 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS\n  // THAT COME FROM HI BYTE=0x11 AND LOW BETWEEN 0x30 AND 0x3F\n  // THIS MEANS THAT \\x50 MUST BE ADDED TO THE VALUES\n  0x80: 0xae,\n  // Registered symbol (R)\n  0x81: 0xb0,\n  // degree sign\n  0x82: 0xbd,\n  // 1/2 symbol\n  0x83: 0xbf,\n  // Inverted (open) question mark\n  0x84: 0x2122,\n  // Trademark symbol (TM)\n  0x85: 0xa2,\n  // Cents symbol\n  0x86: 0xa3,\n  // Pounds sterling\n  0x87: 0x266a,\n  // Music 8'th note\n  0x88: 0xe0,\n  // lowercase a, grave accent\n  0x89: 0x20,\n  // transparent space (regular)\n  0x8a: 0xe8,\n  // lowercase e, grave accent\n  0x8b: 0xe2,\n  // lowercase a, circumflex accent\n  0x8c: 0xea,\n  // lowercase e, circumflex accent\n  0x8d: 0xee,\n  // lowercase i, circumflex accent\n  0x8e: 0xf4,\n  // lowercase o, circumflex accent\n  0x8f: 0xfb,\n  // lowercase u, circumflex accent\n  // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS\n  // THAT COME FROM HI BYTE=0x12 AND LOW BETWEEN 0x20 AND 0x3F\n  0x90: 0xc1,\n  // capital letter A with acute\n  0x91: 0xc9,\n  // capital letter E with acute\n  0x92: 0xd3,\n  // capital letter O with acute\n  0x93: 0xda,\n  // capital letter U with acute\n  0x94: 0xdc,\n  // capital letter U with diaresis\n  0x95: 0xfc,\n  // lowercase letter U with diaeresis\n  0x96: 0x2018,\n  // opening single quote\n  0x97: 0xa1,\n  // inverted exclamation mark\n  0x98: 0x2a,\n  // asterisk\n  0x99: 0x2019,\n  // closing single quote\n  0x9a: 0x2501,\n  // box drawings heavy horizontal\n  0x9b: 0xa9,\n  // copyright sign\n  0x9c: 0x2120,\n  // Service mark\n  0x9d: 0x2022,\n  // (round) bullet\n  0x9e: 0x201c,\n  // Left double quotation mark\n  0x9f: 0x201d,\n  // Right double quotation mark\n  0xa0: 0xc0,\n  // uppercase A, grave accent\n  0xa1: 0xc2,\n  // uppercase A, circumflex\n  0xa2: 0xc7,\n  // uppercase C with cedilla\n  0xa3: 0xc8,\n  // uppercase E, grave accent\n  0xa4: 0xca,\n  // uppercase E, circumflex\n  0xa5: 0xcb,\n  // capital letter E with diaresis\n  0xa6: 0xeb,\n  // lowercase letter e with diaresis\n  0xa7: 0xce,\n  // uppercase I, circumflex\n  0xa8: 0xcf,\n  // uppercase I, with diaresis\n  0xa9: 0xef,\n  // lowercase i, with diaresis\n  0xaa: 0xd4,\n  // uppercase O, circumflex\n  0xab: 0xd9,\n  // uppercase U, grave accent\n  0xac: 0xf9,\n  // lowercase u, grave accent\n  0xad: 0xdb,\n  // uppercase U, circumflex\n  0xae: 0xab,\n  // left-pointing double angle quotation mark\n  0xaf: 0xbb,\n  // right-pointing double angle quotation mark\n  // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS\n  // THAT COME FROM HI BYTE=0x13 AND LOW BETWEEN 0x20 AND 0x3F\n  0xb0: 0xc3,\n  // Uppercase A, tilde\n  0xb1: 0xe3,\n  // Lowercase a, tilde\n  0xb2: 0xcd,\n  // Uppercase I, acute accent\n  0xb3: 0xcc,\n  // Uppercase I, grave accent\n  0xb4: 0xec,\n  // Lowercase i, grave accent\n  0xb5: 0xd2,\n  // Uppercase O, grave accent\n  0xb6: 0xf2,\n  // Lowercase o, grave accent\n  0xb7: 0xd5,\n  // Uppercase O, tilde\n  0xb8: 0xf5,\n  // Lowercase o, tilde\n  0xb9: 0x7b,\n  // Open curly brace\n  0xba: 0x7d,\n  // Closing curly brace\n  0xbb: 0x5c,\n  // Backslash\n  0xbc: 0x5e,\n  // Caret\n  0xbd: 0x5f,\n  // Underscore\n  0xbe: 0x7c,\n  // Pipe (vertical line)\n  0xbf: 0x223c,\n  // Tilde operator\n  0xc0: 0xc4,\n  // Uppercase A, umlaut\n  0xc1: 0xe4,\n  // Lowercase A, umlaut\n  0xc2: 0xd6,\n  // Uppercase O, umlaut\n  0xc3: 0xf6,\n  // Lowercase o, umlaut\n  0xc4: 0xdf,\n  // Esszett (sharp S)\n  0xc5: 0xa5,\n  // Yen symbol\n  0xc6: 0xa4,\n  // Generic currency sign\n  0xc7: 0x2503,\n  // Box drawings heavy vertical\n  0xc8: 0xc5,\n  // Uppercase A, ring\n  0xc9: 0xe5,\n  // Lowercase A, ring\n  0xca: 0xd8,\n  // Uppercase O, stroke\n  0xcb: 0xf8,\n  // Lowercase o, strok\n  0xcc: 0x250f,\n  // Box drawings heavy down and right\n  0xcd: 0x2513,\n  // Box drawings heavy down and left\n  0xce: 0x2517,\n  // Box drawings heavy up and right\n  0xcf: 0x251b // Box drawings heavy up and left\n\n};\n/**\n * Utils\n */\n\nvar getCharForByte = function getCharForByte(_byte) {\n  var charCode = _byte;\n\n  if (specialCea608CharsCodes.hasOwnProperty(_byte)) {\n    charCode = specialCea608CharsCodes[_byte];\n  }\n\n  return String.fromCharCode(charCode);\n};\n\nvar NR_ROWS = 15;\nvar NR_COLS = 100; // Tables to look up row from PAC data\n\nvar rowsLowCh1 = {\n  0x11: 1,\n  0x12: 3,\n  0x15: 5,\n  0x16: 7,\n  0x17: 9,\n  0x10: 11,\n  0x13: 12,\n  0x14: 14\n};\nvar rowsHighCh1 = {\n  0x11: 2,\n  0x12: 4,\n  0x15: 6,\n  0x16: 8,\n  0x17: 10,\n  0x13: 13,\n  0x14: 15\n};\nvar rowsLowCh2 = {\n  0x19: 1,\n  0x1A: 3,\n  0x1D: 5,\n  0x1E: 7,\n  0x1F: 9,\n  0x18: 11,\n  0x1B: 12,\n  0x1C: 14\n};\nvar rowsHighCh2 = {\n  0x19: 2,\n  0x1A: 4,\n  0x1D: 6,\n  0x1E: 8,\n  0x1F: 10,\n  0x1B: 13,\n  0x1C: 15\n};\nvar backgroundColors = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta', 'black', 'transparent'];\nvar VerboseLevel;\n\n(function (VerboseLevel) {\n  VerboseLevel[VerboseLevel[\"ERROR\"] = 0] = \"ERROR\";\n  VerboseLevel[VerboseLevel[\"TEXT\"] = 1] = \"TEXT\";\n  VerboseLevel[VerboseLevel[\"WARNING\"] = 2] = \"WARNING\";\n  VerboseLevel[VerboseLevel[\"INFO\"] = 2] = \"INFO\";\n  VerboseLevel[VerboseLevel[\"DEBUG\"] = 3] = \"DEBUG\";\n  VerboseLevel[VerboseLevel[\"DATA\"] = 3] = \"DATA\";\n})(VerboseLevel || (VerboseLevel = {}));\n\nvar cea_608_parser_CaptionsLogger = /*#__PURE__*/function () {\n  function CaptionsLogger() {\n    this.time = null;\n    this.verboseLevel = VerboseLevel.ERROR;\n  }\n\n  var _proto = CaptionsLogger.prototype;\n\n  _proto.log = function log(severity, msg) {\n    if (this.verboseLevel >= severity) {\n      logger[\"logger\"].log(this.time + \" [\" + severity + \"] \" + msg);\n    }\n  };\n\n  return CaptionsLogger;\n}();\n\nvar numArrayToHexArray = function numArrayToHexArray(numArray) {\n  var hexArray = [];\n\n  for (var j = 0; j < numArray.length; j++) {\n    hexArray.push(numArray[j].toString(16));\n  }\n\n  return hexArray;\n};\n\nvar PenState = /*#__PURE__*/function () {\n  function PenState(foreground, underline, italics, background, flash) {\n    this.foreground = void 0;\n    this.underline = void 0;\n    this.italics = void 0;\n    this.background = void 0;\n    this.flash = void 0;\n    this.foreground = foreground || 'white';\n    this.underline = underline || false;\n    this.italics = italics || false;\n    this.background = background || 'black';\n    this.flash = flash || false;\n  }\n\n  var _proto2 = PenState.prototype;\n\n  _proto2.reset = function reset() {\n    this.foreground = 'white';\n    this.underline = false;\n    this.italics = false;\n    this.background = 'black';\n    this.flash = false;\n  };\n\n  _proto2.setStyles = function setStyles(styles) {\n    var attribs = ['foreground', 'underline', 'italics', 'background', 'flash'];\n\n    for (var i = 0; i < attribs.length; i++) {\n      var style = attribs[i];\n\n      if (styles.hasOwnProperty(style)) {\n        this[style] = styles[style];\n      }\n    }\n  };\n\n  _proto2.isDefault = function isDefault() {\n    return this.foreground === 'white' && !this.underline && !this.italics && this.background === 'black' && !this.flash;\n  };\n\n  _proto2.equals = function equals(other) {\n    return this.foreground === other.foreground && this.underline === other.underline && this.italics === other.italics && this.background === other.background && this.flash === other.flash;\n  };\n\n  _proto2.copy = function copy(newPenState) {\n    this.foreground = newPenState.foreground;\n    this.underline = newPenState.underline;\n    this.italics = newPenState.italics;\n    this.background = newPenState.background;\n    this.flash = newPenState.flash;\n  };\n\n  _proto2.toString = function toString() {\n    return 'color=' + this.foreground + ', underline=' + this.underline + ', italics=' + this.italics + ', background=' + this.background + ', flash=' + this.flash;\n  };\n\n  return PenState;\n}();\n/**\n * Unicode character with styling and background.\n * @constructor\n */\n\n\nvar StyledUnicodeChar = /*#__PURE__*/function () {\n  function StyledUnicodeChar(uchar, foreground, underline, italics, background, flash) {\n    this.uchar = void 0;\n    this.penState = void 0;\n    this.uchar = uchar || ' '; // unicode character\n\n    this.penState = new PenState(foreground, underline, italics, background, flash);\n  }\n\n  var _proto3 = StyledUnicodeChar.prototype;\n\n  _proto3.reset = function reset() {\n    this.uchar = ' ';\n    this.penState.reset();\n  };\n\n  _proto3.setChar = function setChar(uchar, newPenState) {\n    this.uchar = uchar;\n    this.penState.copy(newPenState);\n  };\n\n  _proto3.setPenState = function setPenState(newPenState) {\n    this.penState.copy(newPenState);\n  };\n\n  _proto3.equals = function equals(other) {\n    return this.uchar === other.uchar && this.penState.equals(other.penState);\n  };\n\n  _proto3.copy = function copy(newChar) {\n    this.uchar = newChar.uchar;\n    this.penState.copy(newChar.penState);\n  };\n\n  _proto3.isEmpty = function isEmpty() {\n    return this.uchar === ' ' && this.penState.isDefault();\n  };\n\n  return StyledUnicodeChar;\n}();\n/**\n * CEA-608 row consisting of NR_COLS instances of StyledUnicodeChar.\n * @constructor\n */\n\n\nvar Row = /*#__PURE__*/function () {\n  function Row(logger) {\n    this.chars = void 0;\n    this.pos = void 0;\n    this.currPenState = void 0;\n    this.cueStartTime = void 0;\n    this.logger = void 0;\n    this.chars = [];\n\n    for (var i = 0; i < NR_COLS; i++) {\n      this.chars.push(new StyledUnicodeChar());\n    }\n\n    this.logger = logger;\n    this.pos = 0;\n    this.currPenState = new PenState();\n  }\n\n  var _proto4 = Row.prototype;\n\n  _proto4.equals = function equals(other) {\n    var equal = true;\n\n    for (var i = 0; i < NR_COLS; i++) {\n      if (!this.chars[i].equals(other.chars[i])) {\n        equal = false;\n        break;\n      }\n    }\n\n    return equal;\n  };\n\n  _proto4.copy = function copy(other) {\n    for (var i = 0; i < NR_COLS; i++) {\n      this.chars[i].copy(other.chars[i]);\n    }\n  };\n\n  _proto4.isEmpty = function isEmpty() {\n    var empty = true;\n\n    for (var i = 0; i < NR_COLS; i++) {\n      if (!this.chars[i].isEmpty()) {\n        empty = false;\n        break;\n      }\n    }\n\n    return empty;\n  }\n  /**\n   *  Set the cursor to a valid column.\n   */\n  ;\n\n  _proto4.setCursor = function setCursor(absPos) {\n    if (this.pos !== absPos) {\n      this.pos = absPos;\n    }\n\n    if (this.pos < 0) {\n      this.logger.log(VerboseLevel.DEBUG, 'Negative cursor position ' + this.pos);\n      this.pos = 0;\n    } else if (this.pos > NR_COLS) {\n      this.logger.log(VerboseLevel.DEBUG, 'Too large cursor position ' + this.pos);\n      this.pos = NR_COLS;\n    }\n  }\n  /**\n   * Move the cursor relative to current position.\n   */\n  ;\n\n  _proto4.moveCursor = function moveCursor(relPos) {\n    var newPos = this.pos + relPos;\n\n    if (relPos > 1) {\n      for (var i = this.pos + 1; i < newPos + 1; i++) {\n        this.chars[i].setPenState(this.currPenState);\n      }\n    }\n\n    this.setCursor(newPos);\n  }\n  /**\n   * Backspace, move one step back and clear character.\n   */\n  ;\n\n  _proto4.backSpace = function backSpace() {\n    this.moveCursor(-1);\n    this.chars[this.pos].setChar(' ', this.currPenState);\n  };\n\n  _proto4.insertChar = function insertChar(_byte2) {\n    if (_byte2 >= 0x90) {\n      // Extended char\n      this.backSpace();\n    }\n\n    var _char = getCharForByte(_byte2);\n\n    if (this.pos >= NR_COLS) {\n      this.logger.log(VerboseLevel.ERROR, 'Cannot insert ' + _byte2.toString(16) + ' (' + _char + ') at position ' + this.pos + '. Skipping it!');\n      return;\n    }\n\n    this.chars[this.pos].setChar(_char, this.currPenState);\n    this.moveCursor(1);\n  };\n\n  _proto4.clearFromPos = function clearFromPos(startPos) {\n    var i;\n\n    for (i = startPos; i < NR_COLS; i++) {\n      this.chars[i].reset();\n    }\n  };\n\n  _proto4.clear = function clear() {\n    this.clearFromPos(0);\n    this.pos = 0;\n    this.currPenState.reset();\n  };\n\n  _proto4.clearToEndOfRow = function clearToEndOfRow() {\n    this.clearFromPos(this.pos);\n  };\n\n  _proto4.getTextString = function getTextString() {\n    var chars = [];\n    var empty = true;\n\n    for (var i = 0; i < NR_COLS; i++) {\n      var _char2 = this.chars[i].uchar;\n\n      if (_char2 !== ' ') {\n        empty = false;\n      }\n\n      chars.push(_char2);\n    }\n\n    if (empty) {\n      return '';\n    } else {\n      return chars.join('');\n    }\n  };\n\n  _proto4.setPenStyles = function setPenStyles(styles) {\n    this.currPenState.setStyles(styles);\n    var currChar = this.chars[this.pos];\n    currChar.setPenState(this.currPenState);\n  };\n\n  return Row;\n}();\n/**\n * Keep a CEA-608 screen of 32x15 styled characters\n * @constructor\n */\n\nvar CaptionScreen = /*#__PURE__*/function () {\n  function CaptionScreen(logger) {\n    this.rows = void 0;\n    this.currRow = void 0;\n    this.nrRollUpRows = void 0;\n    this.lastOutputScreen = void 0;\n    this.logger = void 0;\n    this.rows = [];\n\n    for (var i = 0; i < NR_ROWS; i++) {\n      this.rows.push(new Row(logger));\n    } // Note that we use zero-based numbering (0-14)\n\n\n    this.logger = logger;\n    this.currRow = NR_ROWS - 1;\n    this.nrRollUpRows = null;\n    this.lastOutputScreen = null;\n    this.reset();\n  }\n\n  var _proto5 = CaptionScreen.prototype;\n\n  _proto5.reset = function reset() {\n    for (var i = 0; i < NR_ROWS; i++) {\n      this.rows[i].clear();\n    }\n\n    this.currRow = NR_ROWS - 1;\n  };\n\n  _proto5.equals = function equals(other) {\n    var equal = true;\n\n    for (var i = 0; i < NR_ROWS; i++) {\n      if (!this.rows[i].equals(other.rows[i])) {\n        equal = false;\n        break;\n      }\n    }\n\n    return equal;\n  };\n\n  _proto5.copy = function copy(other) {\n    for (var i = 0; i < NR_ROWS; i++) {\n      this.rows[i].copy(other.rows[i]);\n    }\n  };\n\n  _proto5.isEmpty = function isEmpty() {\n    var empty = true;\n\n    for (var i = 0; i < NR_ROWS; i++) {\n      if (!this.rows[i].isEmpty()) {\n        empty = false;\n        break;\n      }\n    }\n\n    return empty;\n  };\n\n  _proto5.backSpace = function backSpace() {\n    var row = this.rows[this.currRow];\n    row.backSpace();\n  };\n\n  _proto5.clearToEndOfRow = function clearToEndOfRow() {\n    var row = this.rows[this.currRow];\n    row.clearToEndOfRow();\n  }\n  /**\n   * Insert a character (without styling) in the current row.\n   */\n  ;\n\n  _proto5.insertChar = function insertChar(_char3) {\n    var row = this.rows[this.currRow];\n    row.insertChar(_char3);\n  };\n\n  _proto5.setPen = function setPen(styles) {\n    var row = this.rows[this.currRow];\n    row.setPenStyles(styles);\n  };\n\n  _proto5.moveCursor = function moveCursor(relPos) {\n    var row = this.rows[this.currRow];\n    row.moveCursor(relPos);\n  };\n\n  _proto5.setCursor = function setCursor(absPos) {\n    this.logger.log(VerboseLevel.INFO, 'setCursor: ' + absPos);\n    var row = this.rows[this.currRow];\n    row.setCursor(absPos);\n  };\n\n  _proto5.setPAC = function setPAC(pacData) {\n    this.logger.log(VerboseLevel.INFO, 'pacData = ' + JSON.stringify(pacData));\n    var newRow = pacData.row - 1;\n\n    if (this.nrRollUpRows && newRow < this.nrRollUpRows - 1) {\n      newRow = this.nrRollUpRows - 1;\n    } // Make sure this only affects Roll-up Captions by checking this.nrRollUpRows\n\n\n    if (this.nrRollUpRows && this.currRow !== newRow) {\n      // clear all rows first\n      for (var i = 0; i < NR_ROWS; i++) {\n        this.rows[i].clear();\n      } // Copy this.nrRollUpRows rows from lastOutputScreen and place it in the newRow location\n      // topRowIndex - the start of rows to copy (inclusive index)\n\n\n      var topRowIndex = this.currRow + 1 - this.nrRollUpRows; // We only copy if the last position was already shown.\n      // We use the cueStartTime value to check this.\n\n      var lastOutputScreen = this.lastOutputScreen;\n\n      if (lastOutputScreen) {\n        var prevLineTime = lastOutputScreen.rows[topRowIndex].cueStartTime;\n        var time = this.logger.time;\n\n        if (prevLineTime && time !== null && prevLineTime < time) {\n          for (var _i = 0; _i < this.nrRollUpRows; _i++) {\n            this.rows[newRow - this.nrRollUpRows + _i + 1].copy(lastOutputScreen.rows[topRowIndex + _i]);\n          }\n        }\n      }\n    }\n\n    this.currRow = newRow;\n    var row = this.rows[this.currRow];\n\n    if (pacData.indent !== null) {\n      var indent = pacData.indent;\n      var prevPos = Math.max(indent - 1, 0);\n      row.setCursor(pacData.indent);\n      pacData.color = row.chars[prevPos].penState.foreground;\n    }\n\n    var styles = {\n      foreground: pacData.color,\n      underline: pacData.underline,\n      italics: pacData.italics,\n      background: 'black',\n      flash: false\n    };\n    this.setPen(styles);\n  }\n  /**\n   * Set background/extra foreground, but first do back_space, and then insert space (backwards compatibility).\n   */\n  ;\n\n  _proto5.setBkgData = function setBkgData(bkgData) {\n    this.logger.log(VerboseLevel.INFO, 'bkgData = ' + JSON.stringify(bkgData));\n    this.backSpace();\n    this.setPen(bkgData);\n    this.insertChar(0x20); // Space\n  };\n\n  _proto5.setRollUpRows = function setRollUpRows(nrRows) {\n    this.nrRollUpRows = nrRows;\n  };\n\n  _proto5.rollUp = function rollUp() {\n    if (this.nrRollUpRows === null) {\n      this.logger.log(VerboseLevel.DEBUG, 'roll_up but nrRollUpRows not set yet');\n      return; // Not properly setup\n    }\n\n    this.logger.log(VerboseLevel.TEXT, this.getDisplayText());\n    var topRowIndex = this.currRow + 1 - this.nrRollUpRows;\n    var topRow = this.rows.splice(topRowIndex, 1)[0];\n    topRow.clear();\n    this.rows.splice(this.currRow, 0, topRow);\n    this.logger.log(VerboseLevel.INFO, 'Rolling up'); // this.logger.log(VerboseLevel.TEXT, this.get_display_text())\n  }\n  /**\n   * Get all non-empty rows with as unicode text.\n   */\n  ;\n\n  _proto5.getDisplayText = function getDisplayText(asOneRow) {\n    asOneRow = asOneRow || false;\n    var displayText = [];\n    var text = '';\n    var rowNr = -1;\n\n    for (var i = 0; i < NR_ROWS; i++) {\n      var rowText = this.rows[i].getTextString();\n\n      if (rowText) {\n        rowNr = i + 1;\n\n        if (asOneRow) {\n          displayText.push('Row ' + rowNr + ': \\'' + rowText + '\\'');\n        } else {\n          displayText.push(rowText.trim());\n        }\n      }\n    }\n\n    if (displayText.length > 0) {\n      if (asOneRow) {\n        text = '[' + displayText.join(' | ') + ']';\n      } else {\n        text = displayText.join('\\n');\n      }\n    }\n\n    return text;\n  };\n\n  _proto5.getTextAndFormat = function getTextAndFormat() {\n    return this.rows;\n  };\n\n  return CaptionScreen;\n}(); // var modes = ['MODE_ROLL-UP', 'MODE_POP-ON', 'MODE_PAINT-ON', 'MODE_TEXT'];\n\nvar Cea608Channel = /*#__PURE__*/function () {\n  function Cea608Channel(channelNumber, outputFilter, logger) {\n    this.chNr = void 0;\n    this.outputFilter = void 0;\n    this.mode = void 0;\n    this.verbose = void 0;\n    this.displayedMemory = void 0;\n    this.nonDisplayedMemory = void 0;\n    this.lastOutputScreen = void 0;\n    this.currRollUpRow = void 0;\n    this.writeScreen = void 0;\n    this.cueStartTime = void 0;\n    this.logger = void 0;\n    this.chNr = channelNumber;\n    this.outputFilter = outputFilter;\n    this.mode = null;\n    this.verbose = 0;\n    this.displayedMemory = new CaptionScreen(logger);\n    this.nonDisplayedMemory = new CaptionScreen(logger);\n    this.lastOutputScreen = new CaptionScreen(logger);\n    this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];\n    this.writeScreen = this.displayedMemory;\n    this.mode = null;\n    this.cueStartTime = null; // Keeps track of where a cue started.\n\n    this.logger = logger;\n  }\n\n  var _proto6 = Cea608Channel.prototype;\n\n  _proto6.reset = function reset() {\n    this.mode = null;\n    this.displayedMemory.reset();\n    this.nonDisplayedMemory.reset();\n    this.lastOutputScreen.reset();\n    this.outputFilter.reset();\n    this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];\n    this.writeScreen = this.displayedMemory;\n    this.mode = null;\n    this.cueStartTime = null;\n  };\n\n  _proto6.getHandler = function getHandler() {\n    return this.outputFilter;\n  };\n\n  _proto6.setHandler = function setHandler(newHandler) {\n    this.outputFilter = newHandler;\n  };\n\n  _proto6.setPAC = function setPAC(pacData) {\n    this.writeScreen.setPAC(pacData);\n  };\n\n  _proto6.setBkgData = function setBkgData(bkgData) {\n    this.writeScreen.setBkgData(bkgData);\n  };\n\n  _proto6.setMode = function setMode(newMode) {\n    if (newMode === this.mode) {\n      return;\n    }\n\n    this.mode = newMode;\n    this.logger.log(VerboseLevel.INFO, 'MODE=' + newMode);\n\n    if (this.mode === 'MODE_POP-ON') {\n      this.writeScreen = this.nonDisplayedMemory;\n    } else {\n      this.writeScreen = this.displayedMemory;\n      this.writeScreen.reset();\n    }\n\n    if (this.mode !== 'MODE_ROLL-UP') {\n      this.displayedMemory.nrRollUpRows = null;\n      this.nonDisplayedMemory.nrRollUpRows = null;\n    }\n\n    this.mode = newMode;\n  };\n\n  _proto6.insertChars = function insertChars(chars) {\n    for (var i = 0; i < chars.length; i++) {\n      this.writeScreen.insertChar(chars[i]);\n    }\n\n    var screen = this.writeScreen === this.displayedMemory ? 'DISP' : 'NON_DISP';\n    this.logger.log(VerboseLevel.INFO, screen + ': ' + this.writeScreen.getDisplayText(true));\n\n    if (this.mode === 'MODE_PAINT-ON' || this.mode === 'MODE_ROLL-UP') {\n      this.logger.log(VerboseLevel.TEXT, 'DISPLAYED: ' + this.displayedMemory.getDisplayText(true));\n      this.outputDataUpdate();\n    }\n  };\n\n  _proto6.ccRCL = function ccRCL() {\n    // Resume Caption Loading (switch mode to Pop On)\n    this.logger.log(VerboseLevel.INFO, 'RCL - Resume Caption Loading');\n    this.setMode('MODE_POP-ON');\n  };\n\n  _proto6.ccBS = function ccBS() {\n    // BackSpace\n    this.logger.log(VerboseLevel.INFO, 'BS - BackSpace');\n\n    if (this.mode === 'MODE_TEXT') {\n      return;\n    }\n\n    this.writeScreen.backSpace();\n\n    if (this.writeScreen === this.displayedMemory) {\n      this.outputDataUpdate();\n    }\n  };\n\n  _proto6.ccAOF = function ccAOF() {// Reserved (formerly Alarm Off)\n  };\n\n  _proto6.ccAON = function ccAON() {// Reserved (formerly Alarm On)\n  };\n\n  _proto6.ccDER = function ccDER() {\n    // Delete to End of Row\n    this.logger.log(VerboseLevel.INFO, 'DER- Delete to End of Row');\n    this.writeScreen.clearToEndOfRow();\n    this.outputDataUpdate();\n  };\n\n  _proto6.ccRU = function ccRU(nrRows) {\n    // Roll-Up Captions-2,3,or 4 Rows\n    this.logger.log(VerboseLevel.INFO, 'RU(' + nrRows + ') - Roll Up');\n    this.writeScreen = this.displayedMemory;\n    this.setMode('MODE_ROLL-UP');\n    this.writeScreen.setRollUpRows(nrRows);\n  };\n\n  _proto6.ccFON = function ccFON() {\n    // Flash On\n    this.logger.log(VerboseLevel.INFO, 'FON - Flash On');\n    this.writeScreen.setPen({\n      flash: true\n    });\n  };\n\n  _proto6.ccRDC = function ccRDC() {\n    // Resume Direct Captioning (switch mode to PaintOn)\n    this.logger.log(VerboseLevel.INFO, 'RDC - Resume Direct Captioning');\n    this.setMode('MODE_PAINT-ON');\n  };\n\n  _proto6.ccTR = function ccTR() {\n    // Text Restart in text mode (not supported, however)\n    this.logger.log(VerboseLevel.INFO, 'TR');\n    this.setMode('MODE_TEXT');\n  };\n\n  _proto6.ccRTD = function ccRTD() {\n    // Resume Text Display in Text mode (not supported, however)\n    this.logger.log(VerboseLevel.INFO, 'RTD');\n    this.setMode('MODE_TEXT');\n  };\n\n  _proto6.ccEDM = function ccEDM() {\n    // Erase Displayed Memory\n    this.logger.log(VerboseLevel.INFO, 'EDM - Erase Displayed Memory');\n    this.displayedMemory.reset();\n    this.outputDataUpdate(true);\n  };\n\n  _proto6.ccCR = function ccCR() {\n    // Carriage Return\n    this.logger.log(VerboseLevel.INFO, 'CR - Carriage Return');\n    this.writeScreen.rollUp();\n    this.outputDataUpdate(true);\n  };\n\n  _proto6.ccENM = function ccENM() {\n    // Erase Non-Displayed Memory\n    this.logger.log(VerboseLevel.INFO, 'ENM - Erase Non-displayed Memory');\n    this.nonDisplayedMemory.reset();\n  };\n\n  _proto6.ccEOC = function ccEOC() {\n    // End of Caption (Flip Memories)\n    this.logger.log(VerboseLevel.INFO, 'EOC - End Of Caption');\n\n    if (this.mode === 'MODE_POP-ON') {\n      var tmp = this.displayedMemory;\n      this.displayedMemory = this.nonDisplayedMemory;\n      this.nonDisplayedMemory = tmp;\n      this.writeScreen = this.nonDisplayedMemory;\n      this.logger.log(VerboseLevel.TEXT, 'DISP: ' + this.displayedMemory.getDisplayText());\n    }\n\n    this.outputDataUpdate(true);\n  };\n\n  _proto6.ccTO = function ccTO(nrCols) {\n    // Tab Offset 1,2, or 3 columns\n    this.logger.log(VerboseLevel.INFO, 'TO(' + nrCols + ') - Tab Offset');\n    this.writeScreen.moveCursor(nrCols);\n  };\n\n  _proto6.ccMIDROW = function ccMIDROW(secondByte) {\n    // Parse MIDROW command\n    var styles = {\n      flash: false\n    };\n    styles.underline = secondByte % 2 === 1;\n    styles.italics = secondByte >= 0x2e;\n\n    if (!styles.italics) {\n      var colorIndex = Math.floor(secondByte / 2) - 0x10;\n      var colors = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta'];\n      styles.foreground = colors[colorIndex];\n    } else {\n      styles.foreground = 'white';\n    }\n\n    this.logger.log(VerboseLevel.INFO, 'MIDROW: ' + JSON.stringify(styles));\n    this.writeScreen.setPen(styles);\n  };\n\n  _proto6.outputDataUpdate = function outputDataUpdate(dispatch) {\n    if (dispatch === void 0) {\n      dispatch = false;\n    }\n\n    var time = this.logger.time;\n\n    if (time === null) {\n      return;\n    }\n\n    if (this.outputFilter) {\n      if (this.cueStartTime === null && !this.displayedMemory.isEmpty()) {\n        // Start of a new cue\n        this.cueStartTime = time;\n      } else {\n        if (!this.displayedMemory.equals(this.lastOutputScreen)) {\n          this.outputFilter.newCue(this.cueStartTime, time, this.lastOutputScreen);\n\n          if (dispatch && this.outputFilter.dispatchCue) {\n            this.outputFilter.dispatchCue();\n          }\n\n          this.cueStartTime = this.displayedMemory.isEmpty() ? null : time;\n        }\n      }\n\n      this.lastOutputScreen.copy(this.displayedMemory);\n    }\n  };\n\n  _proto6.cueSplitAtTime = function cueSplitAtTime(t) {\n    if (this.outputFilter) {\n      if (!this.displayedMemory.isEmpty()) {\n        if (this.outputFilter.newCue) {\n          this.outputFilter.newCue(this.cueStartTime, t, this.displayedMemory);\n        }\n\n        this.cueStartTime = t;\n      }\n    }\n  };\n\n  return Cea608Channel;\n}();\n\nvar Cea608Parser = /*#__PURE__*/function () {\n  function Cea608Parser(field, out1, out2) {\n    this.channels = void 0;\n    this.currentChannel = 0;\n    this.cmdHistory = void 0;\n    this.logger = void 0;\n    var logger = new cea_608_parser_CaptionsLogger();\n    this.channels = [null, new Cea608Channel(field, out1, logger), new Cea608Channel(field + 1, out2, logger)];\n    this.cmdHistory = createCmdHistory();\n    this.logger = logger;\n  }\n\n  var _proto7 = Cea608Parser.prototype;\n\n  _proto7.getHandler = function getHandler(channel) {\n    return this.channels[channel].getHandler();\n  };\n\n  _proto7.setHandler = function setHandler(channel, newHandler) {\n    this.channels[channel].setHandler(newHandler);\n  }\n  /**\n   * Add data for time t in forms of list of bytes (unsigned ints). The bytes are treated as pairs.\n   */\n  ;\n\n  _proto7.addData = function addData(time, byteList) {\n    var cmdFound;\n    var a;\n    var b;\n    var charsFound = false;\n    this.logger.time = time;\n\n    for (var i = 0; i < byteList.length; i += 2) {\n      a = byteList[i] & 0x7f;\n      b = byteList[i + 1] & 0x7f;\n\n      if (a === 0 && b === 0) {\n        continue;\n      } else {\n        this.logger.log(VerboseLevel.DATA, '[' + numArrayToHexArray([byteList[i], byteList[i + 1]]) + '] -> (' + numArrayToHexArray([a, b]) + ')');\n      }\n\n      cmdFound = this.parseCmd(a, b);\n\n      if (!cmdFound) {\n        cmdFound = this.parseMidrow(a, b);\n      }\n\n      if (!cmdFound) {\n        cmdFound = this.parsePAC(a, b);\n      }\n\n      if (!cmdFound) {\n        cmdFound = this.parseBackgroundAttributes(a, b);\n      }\n\n      if (!cmdFound) {\n        charsFound = this.parseChars(a, b);\n\n        if (charsFound) {\n          var currChNr = this.currentChannel;\n\n          if (currChNr && currChNr > 0) {\n            var channel = this.channels[currChNr];\n            channel.insertChars(charsFound);\n          } else {\n            this.logger.log(VerboseLevel.WARNING, 'No channel found yet. TEXT-MODE?');\n          }\n        }\n      }\n\n      if (!cmdFound && !charsFound) {\n        this.logger.log(VerboseLevel.WARNING, 'Couldn\\'t parse cleaned data ' + numArrayToHexArray([a, b]) + ' orig: ' + numArrayToHexArray([byteList[i], byteList[i + 1]]));\n      }\n    }\n  }\n  /**\n   * Parse Command.\n   * @returns {Boolean} Tells if a command was found\n   */\n  ;\n\n  _proto7.parseCmd = function parseCmd(a, b) {\n    var cmdHistory = this.cmdHistory;\n    var cond1 = (a === 0x14 || a === 0x1C || a === 0x15 || a === 0x1D) && b >= 0x20 && b <= 0x2F;\n    var cond2 = (a === 0x17 || a === 0x1F) && b >= 0x21 && b <= 0x23;\n\n    if (!(cond1 || cond2)) {\n      return false;\n    }\n\n    if (hasCmdRepeated(a, b, cmdHistory)) {\n      setLastCmd(null, null, cmdHistory);\n      this.logger.log(VerboseLevel.DEBUG, 'Repeated command (' + numArrayToHexArray([a, b]) + ') is dropped');\n      return true;\n    }\n\n    var chNr = a === 0x14 || a === 0x15 || a === 0x17 ? 1 : 2;\n    var channel = this.channels[chNr];\n\n    if (a === 0x14 || a === 0x15 || a === 0x1C || a === 0x1D) {\n      if (b === 0x20) {\n        channel.ccRCL();\n      } else if (b === 0x21) {\n        channel.ccBS();\n      } else if (b === 0x22) {\n        channel.ccAOF();\n      } else if (b === 0x23) {\n        channel.ccAON();\n      } else if (b === 0x24) {\n        channel.ccDER();\n      } else if (b === 0x25) {\n        channel.ccRU(2);\n      } else if (b === 0x26) {\n        channel.ccRU(3);\n      } else if (b === 0x27) {\n        channel.ccRU(4);\n      } else if (b === 0x28) {\n        channel.ccFON();\n      } else if (b === 0x29) {\n        channel.ccRDC();\n      } else if (b === 0x2A) {\n        channel.ccTR();\n      } else if (b === 0x2B) {\n        channel.ccRTD();\n      } else if (b === 0x2C) {\n        channel.ccEDM();\n      } else if (b === 0x2D) {\n        channel.ccCR();\n      } else if (b === 0x2E) {\n        channel.ccENM();\n      } else if (b === 0x2F) {\n        channel.ccEOC();\n      }\n    } else {\n      // a == 0x17 || a == 0x1F\n      channel.ccTO(b - 0x20);\n    }\n\n    setLastCmd(a, b, cmdHistory);\n    this.currentChannel = chNr;\n    return true;\n  }\n  /**\n   * Parse midrow styling command\n   * @returns {Boolean}\n   */\n  ;\n\n  _proto7.parseMidrow = function parseMidrow(a, b) {\n    var chNr = 0;\n\n    if ((a === 0x11 || a === 0x19) && b >= 0x20 && b <= 0x2f) {\n      if (a === 0x11) {\n        chNr = 1;\n      } else {\n        chNr = 2;\n      }\n\n      if (chNr !== this.currentChannel) {\n        this.logger.log(VerboseLevel.ERROR, 'Mismatch channel in midrow parsing');\n        return false;\n      }\n\n      var channel = this.channels[chNr];\n\n      if (!channel) {\n        return false;\n      }\n\n      channel.ccMIDROW(b);\n      this.logger.log(VerboseLevel.DEBUG, 'MIDROW (' + numArrayToHexArray([a, b]) + ')');\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Parse Preable Access Codes (Table 53).\n   * @returns {Boolean} Tells if PAC found\n   */\n  ;\n\n  _proto7.parsePAC = function parsePAC(a, b) {\n    var row;\n    var cmdHistory = this.cmdHistory;\n    var case1 = (a >= 0x11 && a <= 0x17 || a >= 0x19 && a <= 0x1F) && b >= 0x40 && b <= 0x7F;\n    var case2 = (a === 0x10 || a === 0x18) && b >= 0x40 && b <= 0x5F;\n\n    if (!(case1 || case2)) {\n      return false;\n    }\n\n    if (hasCmdRepeated(a, b, cmdHistory)) {\n      setLastCmd(null, null, cmdHistory);\n      return true; // Repeated commands are dropped (once)\n    }\n\n    var chNr = a <= 0x17 ? 1 : 2;\n\n    if (b >= 0x40 && b <= 0x5F) {\n      row = chNr === 1 ? rowsLowCh1[a] : rowsLowCh2[a];\n    } else {\n      // 0x60 <= b <= 0x7F\n      row = chNr === 1 ? rowsHighCh1[a] : rowsHighCh2[a];\n    }\n\n    var channel = this.channels[chNr];\n\n    if (!channel) {\n      return false;\n    }\n\n    channel.setPAC(this.interpretPAC(row, b));\n    setLastCmd(a, b, cmdHistory);\n    this.currentChannel = chNr;\n    return true;\n  }\n  /**\n   * Interpret the second byte of the pac, and return the information.\n   * @returns {Object} pacData with style parameters.\n   */\n  ;\n\n  _proto7.interpretPAC = function interpretPAC(row, _byte3) {\n    var pacIndex = _byte3;\n    var pacData = {\n      color: null,\n      italics: false,\n      indent: null,\n      underline: false,\n      row: row\n    };\n\n    if (_byte3 > 0x5F) {\n      pacIndex = _byte3 - 0x60;\n    } else {\n      pacIndex = _byte3 - 0x40;\n    }\n\n    pacData.underline = (pacIndex & 1) === 1;\n\n    if (pacIndex <= 0xd) {\n      pacData.color = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta', 'white'][Math.floor(pacIndex / 2)];\n    } else if (pacIndex <= 0xf) {\n      pacData.italics = true;\n      pacData.color = 'white';\n    } else {\n      pacData.indent = Math.floor((pacIndex - 0x10) / 2) * 4;\n    }\n\n    return pacData; // Note that row has zero offset. The spec uses 1.\n  }\n  /**\n   * Parse characters.\n   * @returns An array with 1 to 2 codes corresponding to chars, if found. null otherwise.\n   */\n  ;\n\n  _proto7.parseChars = function parseChars(a, b) {\n    var channelNr;\n    var charCodes = null;\n    var charCode1 = null;\n\n    if (a >= 0x19) {\n      channelNr = 2;\n      charCode1 = a - 8;\n    } else {\n      channelNr = 1;\n      charCode1 = a;\n    }\n\n    if (charCode1 >= 0x11 && charCode1 <= 0x13) {\n      // Special character\n      var oneCode = b;\n\n      if (charCode1 === 0x11) {\n        oneCode = b + 0x50;\n      } else if (charCode1 === 0x12) {\n        oneCode = b + 0x70;\n      } else {\n        oneCode = b + 0x90;\n      }\n\n      this.logger.log(VerboseLevel.INFO, 'Special char \\'' + getCharForByte(oneCode) + '\\' in channel ' + channelNr);\n      charCodes = [oneCode];\n    } else if (a >= 0x20 && a <= 0x7f) {\n      charCodes = b === 0 ? [a] : [a, b];\n    }\n\n    if (charCodes) {\n      var hexCodes = numArrayToHexArray(charCodes);\n      this.logger.log(VerboseLevel.DEBUG, 'Char codes =  ' + hexCodes.join(','));\n      setLastCmd(a, b, this.cmdHistory);\n    }\n\n    return charCodes;\n  }\n  /**\n   * Parse extended background attributes as well as new foreground color black.\n   * @returns {Boolean} Tells if background attributes are found\n   */\n  ;\n\n  _proto7.parseBackgroundAttributes = function parseBackgroundAttributes(a, b) {\n    var case1 = (a === 0x10 || a === 0x18) && b >= 0x20 && b <= 0x2f;\n    var case2 = (a === 0x17 || a === 0x1f) && b >= 0x2d && b <= 0x2f;\n\n    if (!(case1 || case2)) {\n      return false;\n    }\n\n    var index;\n    var bkgData = {};\n\n    if (a === 0x10 || a === 0x18) {\n      index = Math.floor((b - 0x20) / 2);\n      bkgData.background = backgroundColors[index];\n\n      if (b % 2 === 1) {\n        bkgData.background = bkgData.background + '_semi';\n      }\n    } else if (b === 0x2d) {\n      bkgData.background = 'transparent';\n    } else {\n      bkgData.foreground = 'black';\n\n      if (b === 0x2f) {\n        bkgData.underline = true;\n      }\n    }\n\n    var chNr = a <= 0x17 ? 1 : 2;\n    var channel = this.channels[chNr];\n    channel.setBkgData(bkgData);\n    setLastCmd(a, b, this.cmdHistory);\n    return true;\n  }\n  /**\n   * Reset state of parser and its channels.\n   */\n  ;\n\n  _proto7.reset = function reset() {\n    for (var i = 0; i < Object.keys(this.channels).length; i++) {\n      var channel = this.channels[i];\n\n      if (channel) {\n        channel.reset();\n      }\n    }\n\n    this.cmdHistory = createCmdHistory();\n  }\n  /**\n   * Trigger the generation of a cue, and the start of a new one if displayScreens are not empty.\n   */\n  ;\n\n  _proto7.cueSplitAtTime = function cueSplitAtTime(t) {\n    for (var i = 0; i < this.channels.length; i++) {\n      var channel = this.channels[i];\n\n      if (channel) {\n        channel.cueSplitAtTime(t);\n      }\n    }\n  };\n\n  return Cea608Parser;\n}();\n\nfunction setLastCmd(a, b, cmdHistory) {\n  cmdHistory.a = a;\n  cmdHistory.b = b;\n}\n\nfunction hasCmdRepeated(a, b, cmdHistory) {\n  return cmdHistory.a === a && cmdHistory.b === b;\n}\n\nfunction createCmdHistory() {\n  return {\n    a: null,\n    b: null\n  };\n}\n\n/* harmony default export */ var cea_608_parser = (Cea608Parser);\n// CONCATENATED MODULE: ./src/utils/output-filter.ts\nvar OutputFilter = /*#__PURE__*/function () {\n  function OutputFilter(timelineController, trackName) {\n    this.timelineController = void 0;\n    this.cueRanges = [];\n    this.trackName = void 0;\n    this.startTime = null;\n    this.endTime = null;\n    this.screen = null;\n    this.timelineController = timelineController;\n    this.trackName = trackName;\n  }\n\n  var _proto = OutputFilter.prototype;\n\n  _proto.dispatchCue = function dispatchCue() {\n    if (this.startTime === null) {\n      return;\n    }\n\n    this.timelineController.addCues(this.trackName, this.startTime, this.endTime, this.screen, this.cueRanges);\n    this.startTime = null;\n  };\n\n  _proto.newCue = function newCue(startTime, endTime, screen) {\n    if (this.startTime === null || this.startTime > startTime) {\n      this.startTime = startTime;\n    }\n\n    this.endTime = endTime;\n    this.screen = screen;\n    this.timelineController.createCaptionsTrack(this.trackName);\n  };\n\n  _proto.reset = function reset() {\n    this.cueRanges = [];\n  };\n\n  return OutputFilter;\n}();\n\n\n// CONCATENATED MODULE: ./src/utils/webvtt-parser.js\n\n\n\n\n\n // String.prototype.startsWith is not supported in IE11\n\nvar startsWith = function startsWith(inputString, searchString, position) {\n  return inputString.substr(position || 0, searchString.length) === searchString;\n};\n\nvar webvtt_parser_cueString2millis = function cueString2millis(timeString) {\n  var ts = parseInt(timeString.substr(-3));\n  var secs = parseInt(timeString.substr(-6, 2));\n  var mins = parseInt(timeString.substr(-9, 2));\n  var hours = timeString.length > 9 ? parseInt(timeString.substr(0, timeString.indexOf(':'))) : 0;\n\n  if (!Object(number[\"isFiniteNumber\"])(ts) || !Object(number[\"isFiniteNumber\"])(secs) || !Object(number[\"isFiniteNumber\"])(mins) || !Object(number[\"isFiniteNumber\"])(hours)) {\n    throw Error(\"Malformed X-TIMESTAMP-MAP: Local:\" + timeString);\n  }\n\n  ts += 1000 * secs;\n  ts += 60 * 1000 * mins;\n  ts += 60 * 60 * 1000 * hours;\n  return ts;\n}; // From https://github.com/darkskyapp/string-hash\n\n\nvar hash = function hash(text) {\n  var hash = 5381;\n  var i = text.length;\n\n  while (i) {\n    hash = hash * 33 ^ text.charCodeAt(--i);\n  }\n\n  return (hash >>> 0).toString();\n};\n\nvar calculateOffset = function calculateOffset(vttCCs, cc, presentationTime) {\n  var currCC = vttCCs[cc];\n  var prevCC = vttCCs[currCC.prevCC]; // This is the first discontinuity or cues have been processed since the last discontinuity\n  // Offset = current discontinuity time\n\n  if (!prevCC || !prevCC.new && currCC.new) {\n    vttCCs.ccOffset = vttCCs.presentationOffset = currCC.start;\n    currCC.new = false;\n    return;\n  } // There have been discontinuities since cues were last parsed.\n  // Offset = time elapsed\n\n\n  while (prevCC && prevCC.new) {\n    vttCCs.ccOffset += currCC.start - prevCC.start;\n    currCC.new = false;\n    currCC = prevCC;\n    prevCC = vttCCs[currCC.prevCC];\n  }\n\n  vttCCs.presentationOffset = presentationTime;\n};\n\nvar WebVTTParser = {\n  parse: function parse(vttByteArray, syncPTS, vttCCs, cc, callBack, errorCallBack) {\n    // Convert byteArray into string, replacing any somewhat exotic linefeeds with \"\\n\", then split on that character.\n    var re = /\\r\\n|\\n\\r|\\n|\\r/g; // Uint8Array.prototype.reduce is not implemented in IE11\n\n    var vttLines = Object(id3[\"utf8ArrayToStr\"])(new Uint8Array(vttByteArray)).trim().replace(re, '\\n').split('\\n');\n    var cueTime = '00:00.000';\n    var mpegTs = 0;\n    var localTime = 0;\n    var presentationTime = 0;\n    var cues = [];\n    var parsingError;\n    var inHeader = true;\n    var timestampMap = false; // let VTTCue = VTTCue || window.TextTrackCue;\n    // Create parser object using VTTCue with TextTrackCue fallback on certain browsers.\n\n    var parser = new vttparser();\n\n    parser.oncue = function (cue) {\n      // Adjust cue timing; clamp cues to start no earlier than - and drop cues that don't end after - 0 on timeline.\n      var currCC = vttCCs[cc];\n      var cueOffset = vttCCs.ccOffset; // Update offsets for new discontinuities\n\n      if (currCC && currCC.new) {\n        if (localTime !== undefined) {\n          // When local time is provided, offset = discontinuity start time - local time\n          cueOffset = vttCCs.ccOffset = currCC.start;\n        } else {\n          calculateOffset(vttCCs, cc, presentationTime);\n        }\n      }\n\n      if (presentationTime) {\n        // If we have MPEGTS, offset = presentation time + discontinuity offset\n        cueOffset = presentationTime - vttCCs.presentationOffset;\n      }\n\n      if (timestampMap) {\n        cue.startTime += cueOffset - localTime;\n        cue.endTime += cueOffset - localTime;\n      } // Create a unique hash id for a cue based on start/end times and text.\n      // This helps timeline-controller to avoid showing repeated captions.\n\n\n      cue.id = hash(cue.startTime.toString()) + hash(cue.endTime.toString()) + hash(cue.text); // Fix encoding of special characters. TODO: Test with all sorts of weird characters.\n\n      cue.text = decodeURIComponent(encodeURIComponent(cue.text));\n\n      if (cue.endTime > 0) {\n        cues.push(cue);\n      }\n    };\n\n    parser.onparsingerror = function (e) {\n      parsingError = e;\n    };\n\n    parser.onflush = function () {\n      if (parsingError && errorCallBack) {\n        errorCallBack(parsingError);\n        return;\n      }\n\n      callBack(cues);\n    }; // Go through contents line by line.\n\n\n    vttLines.forEach(function (line) {\n      if (inHeader) {\n        // Look for X-TIMESTAMP-MAP in header.\n        if (startsWith(line, 'X-TIMESTAMP-MAP=')) {\n          // Once found, no more are allowed anyway, so stop searching.\n          inHeader = false;\n          timestampMap = true; // Extract LOCAL and MPEGTS.\n\n          line.substr(16).split(',').forEach(function (timestamp) {\n            if (startsWith(timestamp, 'LOCAL:')) {\n              cueTime = timestamp.substr(6);\n            } else if (startsWith(timestamp, 'MPEGTS:')) {\n              mpegTs = parseInt(timestamp.substr(7));\n            }\n          });\n\n          try {\n            // Calculate subtitle offset in milliseconds.\n            if (syncPTS + (vttCCs[cc].start * 90000 || 0) < 0) {\n              syncPTS += 8589934592;\n            } // Adjust MPEGTS by sync PTS.\n\n\n            mpegTs -= syncPTS; // Convert cue time to seconds\n\n            localTime = webvtt_parser_cueString2millis(cueTime) / 1000; // Convert MPEGTS to seconds from 90kHz.\n\n            presentationTime = mpegTs / 90000;\n          } catch (e) {\n            timestampMap = false;\n            parsingError = e;\n          } // Return without parsing X-TIMESTAMP-MAP line.\n\n\n          return;\n        } else if (line === '') {\n          inHeader = false;\n        }\n      } // Parse line by default.\n\n\n      parser.parse(line + '\\n');\n    });\n    parser.flush();\n  }\n};\n/* harmony default export */ var webvtt_parser = (WebVTTParser);\n// CONCATENATED MODULE: ./src/controller/timeline-controller.ts\n\n\n\nfunction timeline_controller_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction timeline_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n\n\n\n\n\n\n\n\nvar timeline_controller_TimelineController = /*#__PURE__*/function (_EventHandler) {\n  timeline_controller_inheritsLoose(TimelineController, _EventHandler);\n\n  function TimelineController(hls) {\n    var _this;\n\n    _this = _EventHandler.call(this, hls, events[\"default\"].MEDIA_ATTACHING, events[\"default\"].MEDIA_DETACHING, events[\"default\"].FRAG_PARSING_USERDATA, events[\"default\"].FRAG_DECRYPTED, events[\"default\"].MANIFEST_LOADING, events[\"default\"].MANIFEST_LOADED, events[\"default\"].FRAG_LOADED, events[\"default\"].INIT_PTS_FOUND) || this;\n    _this.media = null;\n    _this.config = void 0;\n    _this.enabled = true;\n    _this.Cues = void 0;\n    _this.textTracks = [];\n    _this.tracks = [];\n    _this.initPTS = [];\n    _this.unparsedVttFrags = [];\n    _this.captionsTracks = {};\n    _this.nonNativeCaptionsTracks = {};\n    _this.captionsProperties = void 0;\n    _this.cea608Parser1 = void 0;\n    _this.cea608Parser2 = void 0;\n    _this.lastSn = -1;\n    _this.prevCC = -1;\n    _this.vttCCs = newVTTCCs();\n    _this.hls = hls;\n    _this.config = hls.config;\n    _this.Cues = hls.config.cueHandler;\n    _this.captionsProperties = {\n      textTrack1: {\n        label: _this.config.captionsTextTrack1Label,\n        languageCode: _this.config.captionsTextTrack1LanguageCode\n      },\n      textTrack2: {\n        label: _this.config.captionsTextTrack2Label,\n        languageCode: _this.config.captionsTextTrack2LanguageCode\n      },\n      textTrack3: {\n        label: _this.config.captionsTextTrack3Label,\n        languageCode: _this.config.captionsTextTrack3LanguageCode\n      },\n      textTrack4: {\n        label: _this.config.captionsTextTrack4Label,\n        languageCode: _this.config.captionsTextTrack4LanguageCode\n      }\n    };\n\n    if (_this.config.enableCEA708Captions) {\n      var channel1 = new OutputFilter(timeline_controller_assertThisInitialized(_this), 'textTrack1');\n      var channel2 = new OutputFilter(timeline_controller_assertThisInitialized(_this), 'textTrack2');\n      var channel3 = new OutputFilter(timeline_controller_assertThisInitialized(_this), 'textTrack3');\n      var channel4 = new OutputFilter(timeline_controller_assertThisInitialized(_this), 'textTrack4');\n      _this.cea608Parser1 = new cea_608_parser(1, channel1, channel2);\n      _this.cea608Parser2 = new cea_608_parser(3, channel3, channel4);\n    }\n\n    return _this;\n  }\n\n  var _proto = TimelineController.prototype;\n\n  _proto.addCues = function addCues(trackName, startTime, endTime, screen, cueRanges) {\n    // skip cues which overlap more than 50% with previously parsed time ranges\n    var merged = false;\n\n    for (var i = cueRanges.length; i--;) {\n      var cueRange = cueRanges[i];\n      var overlap = intersection(cueRange[0], cueRange[1], startTime, endTime);\n\n      if (overlap >= 0) {\n        cueRange[0] = Math.min(cueRange[0], startTime);\n        cueRange[1] = Math.max(cueRange[1], endTime);\n        merged = true;\n\n        if (overlap / (endTime - startTime) > 0.5) {\n          return;\n        }\n      }\n    }\n\n    if (!merged) {\n      cueRanges.push([startTime, endTime]);\n    }\n\n    if (this.config.renderTextTracksNatively) {\n      this.Cues.newCue(this.captionsTracks[trackName], startTime, endTime, screen);\n    } else {\n      var cues = this.Cues.newCue(null, startTime, endTime, screen);\n      this.hls.trigger(events[\"default\"].CUES_PARSED, {\n        type: 'captions',\n        cues: cues,\n        track: trackName\n      });\n    }\n  } // Triggered when an initial PTS is found; used for synchronisation of WebVTT.\n  ;\n\n  _proto.onInitPtsFound = function onInitPtsFound(data) {\n    var _this2 = this;\n\n    var frag = data.frag,\n        id = data.id,\n        initPTS = data.initPTS;\n    var unparsedVttFrags = this.unparsedVttFrags;\n\n    if (id === 'main') {\n      this.initPTS[frag.cc] = initPTS;\n    } // Due to asynchronous processing, initial PTS may arrive later than the first VTT fragments are loaded.\n    // Parse any unparsed fragments upon receiving the initial PTS.\n\n\n    if (unparsedVttFrags.length) {\n      this.unparsedVttFrags = [];\n      unparsedVttFrags.forEach(function (frag) {\n        _this2.onFragLoaded(frag);\n      });\n    }\n  };\n\n  _proto.getExistingTrack = function getExistingTrack(trackName) {\n    var media = this.media;\n\n    if (media) {\n      for (var i = 0; i < media.textTracks.length; i++) {\n        var textTrack = media.textTracks[i];\n\n        if (textTrack[trackName]) {\n          return textTrack;\n        }\n      }\n    }\n\n    return null;\n  };\n\n  _proto.createCaptionsTrack = function createCaptionsTrack(trackName) {\n    if (this.config.renderTextTracksNatively) {\n      this.createNativeTrack(trackName);\n    } else {\n      this.createNonNativeTrack(trackName);\n    }\n  };\n\n  _proto.createNativeTrack = function createNativeTrack(trackName) {\n    if (this.captionsTracks[trackName]) {\n      return;\n    }\n\n    var captionsProperties = this.captionsProperties,\n        captionsTracks = this.captionsTracks,\n        media = this.media;\n    var _captionsProperties$t = captionsProperties[trackName],\n        label = _captionsProperties$t.label,\n        languageCode = _captionsProperties$t.languageCode; // Enable reuse of existing text track.\n\n    var existingTrack = this.getExistingTrack(trackName);\n\n    if (!existingTrack) {\n      var textTrack = this.createTextTrack('captions', label, languageCode);\n\n      if (textTrack) {\n        // Set a special property on the track so we know it's managed by Hls.js\n        textTrack[trackName] = true;\n        captionsTracks[trackName] = textTrack;\n      }\n    } else {\n      captionsTracks[trackName] = existingTrack;\n      clearCurrentCues(captionsTracks[trackName]);\n      sendAddTrackEvent(captionsTracks[trackName], media);\n    }\n  };\n\n  _proto.createNonNativeTrack = function createNonNativeTrack(trackName) {\n    if (this.nonNativeCaptionsTracks[trackName]) {\n      return;\n    } // Create a list of a single track for the provider to consume\n\n\n    var trackProperties = this.captionsProperties[trackName];\n\n    if (!trackProperties) {\n      return;\n    }\n\n    var label = trackProperties.label;\n    var track = {\n      _id: trackName,\n      label: label,\n      kind: 'captions',\n      default: trackProperties.media ? !!trackProperties.media.default : false,\n      closedCaptions: trackProperties.media\n    };\n    this.nonNativeCaptionsTracks[trackName] = track;\n    this.hls.trigger(events[\"default\"].NON_NATIVE_TEXT_TRACKS_FOUND, {\n      tracks: [track]\n    });\n  };\n\n  _proto.createTextTrack = function createTextTrack(kind, label, lang) {\n    var media = this.media;\n\n    if (!media) {\n      return;\n    }\n\n    return media.addTextTrack(kind, label, lang);\n  };\n\n  _proto.destroy = function destroy() {\n    _EventHandler.prototype.destroy.call(this);\n  };\n\n  _proto.onMediaAttaching = function onMediaAttaching(data) {\n    this.media = data.media;\n\n    this._cleanTracks();\n  };\n\n  _proto.onMediaDetaching = function onMediaDetaching() {\n    var captionsTracks = this.captionsTracks;\n    Object.keys(captionsTracks).forEach(function (trackName) {\n      clearCurrentCues(captionsTracks[trackName]);\n      delete captionsTracks[trackName];\n    });\n    this.nonNativeCaptionsTracks = {};\n  };\n\n  _proto.onManifestLoading = function onManifestLoading() {\n    this.lastSn = -1; // Detect discontiguity in fragment parsing\n\n    this.prevCC = -1;\n    this.vttCCs = newVTTCCs(); // Detect discontinuity in subtitle manifests\n\n    this._cleanTracks();\n\n    this.tracks = [];\n    this.captionsTracks = {};\n    this.nonNativeCaptionsTracks = {};\n  };\n\n  _proto._cleanTracks = function _cleanTracks() {\n    // clear outdated subtitles\n    var media = this.media;\n\n    if (!media) {\n      return;\n    }\n\n    var textTracks = media.textTracks;\n\n    if (textTracks) {\n      for (var i = 0; i < textTracks.length; i++) {\n        clearCurrentCues(textTracks[i]);\n      }\n    }\n  };\n\n  _proto.onManifestLoaded = function onManifestLoaded(data) {\n    var _this3 = this;\n\n    this.textTracks = [];\n    this.unparsedVttFrags = this.unparsedVttFrags || [];\n    this.initPTS = [];\n\n    if (this.cea608Parser1 && this.cea608Parser2) {\n      this.cea608Parser1.reset();\n      this.cea608Parser2.reset();\n    }\n\n    if (this.config.enableWebVTT) {\n      var tracks = data.subtitles || [];\n      var sameTracks = this.tracks && tracks && this.tracks.length === tracks.length;\n      this.tracks = data.subtitles || [];\n\n      if (this.config.renderTextTracksNatively) {\n        var inUseTracks = this.media ? this.media.textTracks : [];\n        this.tracks.forEach(function (track, index) {\n          var textTrack;\n\n          if (index < inUseTracks.length) {\n            var inUseTrack = null;\n\n            for (var i = 0; i < inUseTracks.length; i++) {\n              if (canReuseVttTextTrack(inUseTracks[i], track)) {\n                inUseTrack = inUseTracks[i];\n                break;\n              }\n            } // Reuse tracks with the same label, but do not reuse 608/708 tracks\n\n\n            if (inUseTrack) {\n              textTrack = inUseTrack;\n            }\n          }\n\n          if (!textTrack) {\n            textTrack = _this3.createTextTrack('subtitles', track.name, track.lang);\n          }\n\n          if (track.default) {\n            textTrack.mode = _this3.hls.subtitleDisplay ? 'showing' : 'hidden';\n          } else {\n            textTrack.mode = 'disabled';\n          }\n\n          _this3.textTracks.push(textTrack);\n        });\n      } else if (!sameTracks && this.tracks && this.tracks.length) {\n        // Create a list of tracks for the provider to consume\n        var tracksList = this.tracks.map(function (track) {\n          return {\n            label: track.name,\n            kind: track.type.toLowerCase(),\n            default: track.default,\n            subtitleTrack: track\n          };\n        });\n        this.hls.trigger(events[\"default\"].NON_NATIVE_TEXT_TRACKS_FOUND, {\n          tracks: tracksList\n        });\n      }\n    }\n\n    if (this.config.enableCEA708Captions && data.captions) {\n      data.captions.forEach(function (captionsTrack) {\n        var instreamIdMatch = /(?:CC|SERVICE)([1-4])/.exec(captionsTrack.instreamId);\n\n        if (!instreamIdMatch) {\n          return;\n        }\n\n        var trackName = \"textTrack\" + instreamIdMatch[1];\n        var trackProperties = _this3.captionsProperties[trackName];\n\n        if (!trackProperties) {\n          return;\n        }\n\n        trackProperties.label = captionsTrack.name;\n\n        if (captionsTrack.lang) {\n          // optional attribute\n          trackProperties.languageCode = captionsTrack.lang;\n        }\n\n        trackProperties.media = captionsTrack;\n      });\n    }\n  };\n\n  _proto.onFragLoaded = function onFragLoaded(data) {\n    var frag = data.frag,\n        payload = data.payload;\n    var cea608Parser1 = this.cea608Parser1,\n        cea608Parser2 = this.cea608Parser2,\n        initPTS = this.initPTS,\n        lastSn = this.lastSn,\n        unparsedVttFrags = this.unparsedVttFrags;\n\n    if (frag.type === 'main') {\n      var sn = frag.sn; // if this frag isn't contiguous, clear the parser so cues with bad start/end times aren't added to the textTrack\n\n      if (frag.sn !== lastSn + 1) {\n        if (cea608Parser1 && cea608Parser2) {\n          cea608Parser1.reset();\n          cea608Parser2.reset();\n        }\n      }\n\n      this.lastSn = sn;\n    } // eslint-disable-line brace-style\n    // If fragment is subtitle type, parse as WebVTT.\n    else if (frag.type === 'subtitle') {\n        if (payload.byteLength) {\n          // We need an initial synchronisation PTS. Store fragments as long as none has arrived.\n          if (!Object(number[\"isFiniteNumber\"])(initPTS[frag.cc])) {\n            unparsedVttFrags.push(data);\n\n            if (initPTS.length) {\n              // finish unsuccessfully, otherwise the subtitle-stream-controller could be blocked from loading new frags.\n              this.hls.trigger(events[\"default\"].SUBTITLE_FRAG_PROCESSED, {\n                success: false,\n                frag: frag\n              });\n            }\n\n            return;\n          }\n\n          var decryptData = frag.decryptdata; // If the subtitles are not encrypted, parse VTTs now. Otherwise, we need to wait.\n\n          if (decryptData == null || decryptData.key == null || decryptData.method !== 'AES-128') {\n            this._parseVTTs(frag, payload);\n          }\n        } else {\n          // In case there is no payload, finish unsuccessfully.\n          this.hls.trigger(events[\"default\"].SUBTITLE_FRAG_PROCESSED, {\n            success: false,\n            frag: frag\n          });\n        }\n      }\n  };\n\n  _proto._parseVTTs = function _parseVTTs(frag, payload) {\n    var _this4 = this;\n\n    var hls = this.hls,\n        prevCC = this.prevCC,\n        textTracks = this.textTracks,\n        vttCCs = this.vttCCs;\n\n    if (!vttCCs[frag.cc]) {\n      vttCCs[frag.cc] = {\n        start: frag.start,\n        prevCC: prevCC,\n        new: true\n      };\n      this.prevCC = frag.cc;\n    } // Parse the WebVTT file contents.\n\n\n    webvtt_parser.parse(payload, this.initPTS[frag.cc], vttCCs, frag.cc, function (cues) {\n      if (_this4.config.renderTextTracksNatively) {\n        var currentTrack = textTracks[frag.level]; // WebVTTParser.parse is an async method and if the currently selected text track mode is set to \"disabled\"\n        // before parsing is done then don't try to access currentTrack.cues.getCueById as cues will be null\n        // and trying to access getCueById method of cues will throw an exception\n        // Because we check if the mode is diabled, we can force check `cues` below. They can't be null.\n\n        if (currentTrack.mode === 'disabled') {\n          hls.trigger(events[\"default\"].SUBTITLE_FRAG_PROCESSED, {\n            success: false,\n            frag: frag\n          });\n          return;\n        } // Add cues and trigger event with success true.\n\n\n        cues.forEach(function (cue) {\n          // Sometimes there are cue overlaps on segmented vtts so the same\n          // cue can appear more than once in different vtt files.\n          // This avoid showing duplicated cues with same timecode and text.\n          if (!currentTrack.cues.getCueById(cue.id)) {\n            try {\n              currentTrack.addCue(cue);\n\n              if (!currentTrack.cues.getCueById(cue.id)) {\n                throw new Error(\"addCue is failed for: \" + cue);\n              }\n            } catch (err) {\n              logger[\"logger\"].debug(\"Failed occurred on adding cues: \" + err);\n              var textTrackCue = new window.TextTrackCue(cue.startTime, cue.endTime, cue.text);\n              textTrackCue.id = cue.id;\n              currentTrack.addCue(textTrackCue);\n            }\n          }\n        });\n      } else {\n        var trackId = _this4.tracks[frag.level].default ? 'default' : 'subtitles' + frag.level;\n        hls.trigger(events[\"default\"].CUES_PARSED, {\n          type: 'subtitles',\n          cues: cues,\n          track: trackId\n        });\n      }\n\n      hls.trigger(events[\"default\"].SUBTITLE_FRAG_PROCESSED, {\n        success: true,\n        frag: frag\n      });\n    }, function (e) {\n      // Something went wrong while parsing. Trigger event with success false.\n      logger[\"logger\"].log(\"Failed to parse VTT cue: \" + e);\n      hls.trigger(events[\"default\"].SUBTITLE_FRAG_PROCESSED, {\n        success: false,\n        frag: frag\n      });\n    });\n  };\n\n  _proto.onFragDecrypted = function onFragDecrypted(data) {\n    var frag = data.frag,\n        payload = data.payload;\n\n    if (frag.type === 'subtitle') {\n      if (!Object(number[\"isFiniteNumber\"])(this.initPTS[frag.cc])) {\n        this.unparsedVttFrags.push(data);\n        return;\n      }\n\n      this._parseVTTs(frag, payload);\n    }\n  };\n\n  _proto.onFragParsingUserdata = function onFragParsingUserdata(data) {\n    var cea608Parser1 = this.cea608Parser1,\n        cea608Parser2 = this.cea608Parser2;\n\n    if (!this.enabled || !(cea608Parser1 && cea608Parser2)) {\n      return;\n    } // If the event contains captions (found in the bytes property), push all bytes into the parser immediately\n    // It will create the proper timestamps based on the PTS value\n\n\n    for (var i = 0; i < data.samples.length; i++) {\n      var ccBytes = data.samples[i].bytes;\n\n      if (ccBytes) {\n        var ccdatas = this.extractCea608Data(ccBytes);\n        cea608Parser1.addData(data.samples[i].pts, ccdatas[0]);\n        cea608Parser2.addData(data.samples[i].pts, ccdatas[1]);\n      }\n    }\n  };\n\n  _proto.extractCea608Data = function extractCea608Data(byteArray) {\n    var count = byteArray[0] & 31;\n    var position = 2;\n    var actualCCBytes = [[], []];\n\n    for (var j = 0; j < count; j++) {\n      var tmpByte = byteArray[position++];\n      var ccbyte1 = 0x7F & byteArray[position++];\n      var ccbyte2 = 0x7F & byteArray[position++];\n      var ccValid = (4 & tmpByte) !== 0;\n      var ccType = 3 & tmpByte;\n\n      if (ccbyte1 === 0 && ccbyte2 === 0) {\n        continue;\n      }\n\n      if (ccValid) {\n        if (ccType === 0 || ccType === 1) {\n          actualCCBytes[ccType].push(ccbyte1);\n          actualCCBytes[ccType].push(ccbyte2);\n        }\n      }\n    }\n\n    return actualCCBytes;\n  };\n\n  return TimelineController;\n}(event_handler);\n\nfunction canReuseVttTextTrack(inUseTrack, manifestTrack) {\n  return inUseTrack && inUseTrack.label === manifestTrack.name && !(inUseTrack.textTrack1 || inUseTrack.textTrack2);\n}\n\nfunction intersection(x1, x2, y1, y2) {\n  return Math.min(x2, y2) - Math.max(x1, y1);\n}\n\nfunction newVTTCCs() {\n  return {\n    ccOffset: 0,\n    presentationOffset: 0,\n    0: {\n      start: 0,\n      prevCC: -1,\n      new: false\n    }\n  };\n}\n\n/* harmony default export */ var timeline_controller = (timeline_controller_TimelineController);\n// CONCATENATED MODULE: ./src/controller/subtitle-track-controller.js\n\n\n\n\nfunction subtitle_track_controller_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction subtitle_track_controller_createClass(Constructor, protoProps, staticProps) { if (protoProps) subtitle_track_controller_defineProperties(Constructor.prototype, protoProps); if (staticProps) subtitle_track_controller_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction subtitle_track_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n\n\n\n\n\n\nvar subtitle_track_controller_SubtitleTrackController = /*#__PURE__*/function (_EventHandler) {\n  subtitle_track_controller_inheritsLoose(SubtitleTrackController, _EventHandler);\n\n  function SubtitleTrackController(hls) {\n    var _this;\n\n    _this = _EventHandler.call(this, hls, events[\"default\"].MEDIA_ATTACHED, events[\"default\"].MEDIA_DETACHING, events[\"default\"].MANIFEST_LOADED, events[\"default\"].SUBTITLE_TRACK_LOADED) || this;\n    _this.tracks = [];\n    _this.trackId = -1;\n    _this.media = null;\n    _this.stopped = true;\n    /**\n     * @member {boolean} subtitleDisplay Enable/disable subtitle display rendering\n     */\n\n    _this.subtitleDisplay = true;\n    /**\n     * Keeps reference to a default track id when media has not been attached yet\n     * @member {number}\n     */\n\n    _this.queuedDefaultTrack = null;\n    return _this;\n  }\n\n  var _proto = SubtitleTrackController.prototype;\n\n  _proto.destroy = function destroy() {\n    event_handler.prototype.destroy.call(this);\n  } // Listen for subtitle track change, then extract the current track ID.\n  ;\n\n  _proto.onMediaAttached = function onMediaAttached(data) {\n    var _this2 = this;\n\n    this.media = data.media;\n\n    if (!this.media) {\n      return;\n    }\n\n    if (Object(number[\"isFiniteNumber\"])(this.queuedDefaultTrack)) {\n      this.subtitleTrack = this.queuedDefaultTrack;\n      this.queuedDefaultTrack = null;\n    }\n\n    this.trackChangeListener = this._onTextTracksChanged.bind(this);\n    this.useTextTrackPolling = !(this.media.textTracks && 'onchange' in this.media.textTracks);\n\n    if (this.useTextTrackPolling) {\n      this.subtitlePollingInterval = setInterval(function () {\n        _this2.trackChangeListener();\n      }, 500);\n    } else {\n      this.media.textTracks.addEventListener('change', this.trackChangeListener);\n    }\n  };\n\n  _proto.onMediaDetaching = function onMediaDetaching() {\n    if (!this.media) {\n      return;\n    }\n\n    if (this.useTextTrackPolling) {\n      clearInterval(this.subtitlePollingInterval);\n    } else {\n      this.media.textTracks.removeEventListener('change', this.trackChangeListener);\n    }\n\n    if (Object(number[\"isFiniteNumber\"])(this.subtitleTrack)) {\n      this.queuedDefaultTrack = this.subtitleTrack;\n    }\n\n    var textTracks = filterSubtitleTracks(this.media.textTracks); // Clear loaded cues on media detachment from tracks\n\n    textTracks.forEach(function (track) {\n      clearCurrentCues(track);\n    }); // Disable all subtitle tracks before detachment so when reattached only tracks in that content are enabled.\n\n    this.subtitleTrack = -1;\n    this.media = null;\n  } // Fired whenever a new manifest is loaded.\n  ;\n\n  _proto.onManifestLoaded = function onManifestLoaded(data) {\n    var _this3 = this;\n\n    var tracks = data.subtitles || [];\n    this.tracks = tracks;\n    this.hls.trigger(events[\"default\"].SUBTITLE_TRACKS_UPDATED, {\n      subtitleTracks: tracks\n    }); // loop through available subtitle tracks and autoselect default if needed\n    // TODO: improve selection logic to handle forced, etc\n\n    tracks.forEach(function (track) {\n      if (track.default) {\n        // setting this.subtitleTrack will trigger internal logic\n        // if media has not been attached yet, it will fail\n        // we keep a reference to the default track id\n        // and we'll set subtitleTrack when onMediaAttached is triggered\n        if (_this3.media) {\n          _this3.subtitleTrack = track.id;\n        } else {\n          _this3.queuedDefaultTrack = track.id;\n        }\n      }\n    });\n  };\n\n  _proto.onSubtitleTrackLoaded = function onSubtitleTrackLoaded(data) {\n    var _this4 = this;\n\n    var id = data.id,\n        details = data.details;\n    var trackId = this.trackId,\n        tracks = this.tracks;\n    var currentTrack = tracks[trackId];\n\n    if (id >= tracks.length || id !== trackId || !currentTrack || this.stopped) {\n      this._clearReloadTimer();\n\n      return;\n    }\n\n    logger[\"logger\"].log(\"subtitle track \" + id + \" loaded\");\n\n    if (details.live) {\n      var reloadInterval = computeReloadInterval(currentTrack.details, details, data.stats.trequest);\n      logger[\"logger\"].log(\"Reloading live subtitle playlist in \" + reloadInterval + \"ms\");\n      this.timer = setTimeout(function () {\n        _this4._loadCurrentTrack();\n      }, reloadInterval);\n    } else {\n      this._clearReloadTimer();\n    }\n  };\n\n  _proto.startLoad = function startLoad() {\n    this.stopped = false;\n\n    this._loadCurrentTrack();\n  };\n\n  _proto.stopLoad = function stopLoad() {\n    this.stopped = true;\n\n    this._clearReloadTimer();\n  }\n  /** get alternate subtitle tracks list from playlist **/\n  ;\n\n  _proto._clearReloadTimer = function _clearReloadTimer() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n      this.timer = null;\n    }\n  };\n\n  _proto._loadCurrentTrack = function _loadCurrentTrack() {\n    var trackId = this.trackId,\n        tracks = this.tracks,\n        hls = this.hls;\n    var currentTrack = tracks[trackId];\n\n    if (trackId < 0 || !currentTrack || currentTrack.details && !currentTrack.details.live) {\n      return;\n    }\n\n    logger[\"logger\"].log(\"Loading subtitle track \" + trackId);\n    hls.trigger(events[\"default\"].SUBTITLE_TRACK_LOADING, {\n      url: currentTrack.url,\n      id: trackId\n    });\n  }\n  /**\n   * Disables the old subtitleTrack and sets current mode on the next subtitleTrack.\n   * This operates on the DOM textTracks.\n   * A value of -1 will disable all subtitle tracks.\n   * @param newId - The id of the next track to enable\n   * @private\n   */\n  ;\n\n  _proto._toggleTrackModes = function _toggleTrackModes(newId) {\n    var media = this.media,\n        subtitleDisplay = this.subtitleDisplay,\n        trackId = this.trackId;\n\n    if (!media) {\n      return;\n    }\n\n    var textTracks = filterSubtitleTracks(media.textTracks);\n\n    if (newId === -1) {\n      [].slice.call(textTracks).forEach(function (track) {\n        track.mode = 'disabled';\n      });\n    } else {\n      var oldTrack = textTracks[trackId];\n\n      if (oldTrack) {\n        oldTrack.mode = 'disabled';\n      }\n    }\n\n    var nextTrack = textTracks[newId];\n\n    if (nextTrack) {\n      nextTrack.mode = subtitleDisplay ? 'showing' : 'hidden';\n    }\n  }\n  /**\n     * This method is responsible for validating the subtitle index and periodically reloading if live.\n     * Dispatches the SUBTITLE_TRACK_SWITCH event, which instructs the subtitle-stream-controller to load the selected track.\n     * @param newId - The id of the subtitle track to activate.\n     */\n  ;\n\n  _proto._setSubtitleTrackInternal = function _setSubtitleTrackInternal(newId) {\n    var hls = this.hls,\n        tracks = this.tracks;\n\n    if (!Object(number[\"isFiniteNumber\"])(newId) || newId < -1 || newId >= tracks.length) {\n      return;\n    }\n\n    this.trackId = newId;\n    logger[\"logger\"].log(\"Switching to subtitle track \" + newId);\n    hls.trigger(events[\"default\"].SUBTITLE_TRACK_SWITCH, {\n      id: newId\n    });\n\n    this._loadCurrentTrack();\n  };\n\n  _proto._onTextTracksChanged = function _onTextTracksChanged() {\n    // Media is undefined when switching streams via loadSource()\n    if (!this.media || !this.hls.config.renderTextTracksNatively) {\n      return;\n    }\n\n    var trackId = -1;\n    var tracks = filterSubtitleTracks(this.media.textTracks);\n\n    for (var id = 0; id < tracks.length; id++) {\n      if (tracks[id].mode === 'hidden') {\n        // Do not break in case there is a following track with showing.\n        trackId = id;\n      } else if (tracks[id].mode === 'showing') {\n        trackId = id;\n        break;\n      }\n    } // Setting current subtitleTrack will invoke code.\n\n\n    this.subtitleTrack = trackId;\n  };\n\n  subtitle_track_controller_createClass(SubtitleTrackController, [{\n    key: \"subtitleTracks\",\n    get: function get() {\n      return this.tracks;\n    }\n    /** get index of the selected subtitle track (index in subtitle track lists) **/\n\n  }, {\n    key: \"subtitleTrack\",\n    get: function get() {\n      return this.trackId;\n    }\n    /** select a subtitle track, based on its index in subtitle track lists**/\n    ,\n    set: function set(subtitleTrackId) {\n      if (this.trackId !== subtitleTrackId) {\n        this._toggleTrackModes(subtitleTrackId);\n\n        this._setSubtitleTrackInternal(subtitleTrackId);\n      }\n    }\n  }]);\n\n  return SubtitleTrackController;\n}(event_handler);\n\nfunction filterSubtitleTracks(textTrackList) {\n  var tracks = [];\n\n  for (var i = 0; i < textTrackList.length; i++) {\n    var track = textTrackList[i]; // Edge adds a track without a label; we don't want to use it\n\n    if (track.kind === 'subtitles' && track.label) {\n      tracks.push(textTrackList[i]);\n    }\n  }\n\n  return tracks;\n}\n\n/* harmony default export */ var subtitle_track_controller = (subtitle_track_controller_SubtitleTrackController);\n// EXTERNAL MODULE: ./src/crypt/decrypter.js + 3 modules\nvar decrypter = __nested_webpack_require_226214__(\"./src/crypt/decrypter.js\");\n\n// CONCATENATED MODULE: ./src/controller/subtitle-stream-controller.js\nfunction subtitle_stream_controller_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction subtitle_stream_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n/**\n * @class SubtitleStreamController\n */\n\n\n\n\n\n\n\n\nvar subtitle_stream_controller_window = window,\n    subtitle_stream_controller_performance = subtitle_stream_controller_window.performance;\nvar subtitle_stream_controller_TICK_INTERVAL = 500; // how often to tick in ms\n\nvar subtitle_stream_controller_SubtitleStreamController = /*#__PURE__*/function (_BaseStreamController) {\n  subtitle_stream_controller_inheritsLoose(SubtitleStreamController, _BaseStreamController);\n\n  function SubtitleStreamController(hls, fragmentTracker) {\n    var _this;\n\n    _this = _BaseStreamController.call(this, hls, events[\"default\"].MEDIA_ATTACHED, events[\"default\"].MEDIA_DETACHING, events[\"default\"].ERROR, events[\"default\"].KEY_LOADED, events[\"default\"].FRAG_LOADED, events[\"default\"].SUBTITLE_TRACKS_UPDATED, events[\"default\"].SUBTITLE_TRACK_SWITCH, events[\"default\"].SUBTITLE_TRACK_LOADED, events[\"default\"].SUBTITLE_FRAG_PROCESSED, events[\"default\"].LEVEL_UPDATED) || this;\n    _this.fragmentTracker = fragmentTracker;\n    _this.config = hls.config;\n    _this.state = State.STOPPED;\n    _this.tracks = [];\n    _this.tracksBuffered = [];\n    _this.currentTrackId = -1;\n    _this.decrypter = new decrypter[\"default\"](hls, hls.config); // lastAVStart stores the time in seconds for the start time of a level load\n\n    _this.lastAVStart = 0;\n    _this._onMediaSeeking = _this.onMediaSeeking.bind(subtitle_stream_controller_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = SubtitleStreamController.prototype;\n\n  _proto.startLoad = function startLoad() {\n    this.stopLoad();\n    this.state = State.IDLE; // Check if we already have a track with necessary details to load fragments\n\n    var currentTrack = this.tracks[this.currentTrackId];\n\n    if (currentTrack && currentTrack.details) {\n      this.setInterval(subtitle_stream_controller_TICK_INTERVAL);\n      this.tick();\n    }\n  };\n\n  _proto.onSubtitleFragProcessed = function onSubtitleFragProcessed(data) {\n    var frag = data.frag,\n        success = data.success;\n    this.fragPrevious = frag;\n    this.state = State.IDLE;\n\n    if (!success) {\n      return;\n    }\n\n    var buffered = this.tracksBuffered[this.currentTrackId];\n\n    if (!buffered) {\n      return;\n    } // Create/update a buffered array matching the interface used by BufferHelper.bufferedInfo\n    // so we can re-use the logic used to detect how much have been buffered\n\n\n    var timeRange;\n    var fragStart = frag.start;\n\n    for (var i = 0; i < buffered.length; i++) {\n      if (fragStart >= buffered[i].start && fragStart <= buffered[i].end) {\n        timeRange = buffered[i];\n        break;\n      }\n    }\n\n    var fragEnd = frag.start + frag.duration;\n\n    if (timeRange) {\n      timeRange.end = fragEnd;\n    } else {\n      timeRange = {\n        start: fragStart,\n        end: fragEnd\n      };\n      buffered.push(timeRange);\n    }\n  };\n\n  _proto.onMediaAttached = function onMediaAttached(_ref) {\n    var media = _ref.media;\n    this.media = media;\n    media.addEventListener('seeking', this._onMediaSeeking);\n    this.state = State.IDLE;\n  };\n\n  _proto.onMediaDetaching = function onMediaDetaching() {\n    var _this2 = this;\n\n    if (!this.media) {\n      return;\n    }\n\n    this.media.removeEventListener('seeking', this._onMediaSeeking);\n    this.fragmentTracker.removeAllFragments();\n    this.currentTrackId = -1;\n    this.tracks.forEach(function (track) {\n      _this2.tracksBuffered[track.id] = [];\n    });\n    this.media = null;\n    this.state = State.STOPPED;\n  } // If something goes wrong, proceed to next frag, if we were processing one.\n  ;\n\n  _proto.onError = function onError(data) {\n    var frag = data.frag; // don't handle error not related to subtitle fragment\n\n    if (!frag || frag.type !== 'subtitle') {\n      return;\n    }\n\n    if (this.fragCurrent && this.fragCurrent.loader) {\n      this.fragCurrent.loader.abort();\n    }\n\n    this.state = State.IDLE;\n  } // Got all new subtitle tracks.\n  ;\n\n  _proto.onSubtitleTracksUpdated = function onSubtitleTracksUpdated(data) {\n    var _this3 = this;\n\n    logger[\"logger\"].log('subtitle tracks updated');\n    this.tracksBuffered = [];\n    this.tracks = data.subtitleTracks;\n    this.tracks.forEach(function (track) {\n      _this3.tracksBuffered[track.id] = [];\n    });\n  };\n\n  _proto.onSubtitleTrackSwitch = function onSubtitleTrackSwitch(data) {\n    this.currentTrackId = data.id;\n\n    if (!this.tracks || !this.tracks.length || this.currentTrackId === -1) {\n      this.clearInterval();\n      return;\n    } // Check if track has the necessary details to load fragments\n\n\n    var currentTrack = this.tracks[this.currentTrackId];\n\n    if (currentTrack && currentTrack.details) {\n      this.setInterval(subtitle_stream_controller_TICK_INTERVAL);\n    }\n  } // Got a new set of subtitle fragments.\n  ;\n\n  _proto.onSubtitleTrackLoaded = function onSubtitleTrackLoaded(data) {\n    var id = data.id,\n        details = data.details;\n    var currentTrackId = this.currentTrackId,\n        tracks = this.tracks;\n    var currentTrack = tracks[currentTrackId];\n\n    if (id >= tracks.length || id !== currentTrackId || !currentTrack) {\n      return;\n    }\n\n    if (details.live) {\n      mergeSubtitlePlaylists(currentTrack.details, details, this.lastAVStart);\n    }\n\n    currentTrack.details = details;\n    this.setInterval(subtitle_stream_controller_TICK_INTERVAL);\n  };\n\n  _proto.onKeyLoaded = function onKeyLoaded() {\n    if (this.state === State.KEY_LOADING) {\n      this.state = State.IDLE;\n    }\n  };\n\n  _proto.onFragLoaded = function onFragLoaded(data) {\n    var fragCurrent = this.fragCurrent;\n    var decryptData = data.frag.decryptdata;\n    var fragLoaded = data.frag;\n    var hls = this.hls;\n\n    if (this.state === State.FRAG_LOADING && fragCurrent && data.frag.type === 'subtitle' && fragCurrent.sn === data.frag.sn) {\n      // check to see if the payload needs to be decrypted\n      if (data.payload.byteLength > 0 && decryptData && decryptData.key && decryptData.method === 'AES-128') {\n        var startTime = subtitle_stream_controller_performance.now(); // decrypt the subtitles\n\n        this.decrypter.decrypt(data.payload, decryptData.key.buffer, decryptData.iv.buffer, function (decryptedData) {\n          var endTime = subtitle_stream_controller_performance.now();\n          hls.trigger(events[\"default\"].FRAG_DECRYPTED, {\n            frag: fragLoaded,\n            payload: decryptedData,\n            stats: {\n              tstart: startTime,\n              tdecrypt: endTime\n            }\n          });\n        });\n      }\n    }\n  };\n\n  _proto.onLevelUpdated = function onLevelUpdated(_ref2) {\n    var details = _ref2.details;\n    var frags = details.fragments;\n    this.lastAVStart = frags.length ? frags[0].start : 0;\n  };\n\n  _proto.doTick = function doTick() {\n    if (!this.media) {\n      this.state = State.IDLE;\n      return;\n    }\n\n    switch (this.state) {\n      case State.IDLE:\n        {\n          var config = this.config,\n              currentTrackId = this.currentTrackId,\n              fragmentTracker = this.fragmentTracker,\n              media = this.media,\n              tracks = this.tracks;\n\n          if (!tracks || !tracks[currentTrackId] || !tracks[currentTrackId].details) {\n            break;\n          }\n\n          var maxBufferHole = config.maxBufferHole,\n              maxFragLookUpTolerance = config.maxFragLookUpTolerance;\n          var maxConfigBuffer = Math.min(config.maxBufferLength, config.maxMaxBufferLength);\n          var bufferedInfo = BufferHelper.bufferedInfo(this._getBuffered(), media.currentTime, maxBufferHole);\n          var bufferEnd = bufferedInfo.end,\n              bufferLen = bufferedInfo.len;\n          var trackDetails = tracks[currentTrackId].details;\n          var fragments = trackDetails.fragments;\n          var fragLen = fragments.length;\n          var end = fragments[fragLen - 1].start + fragments[fragLen - 1].duration;\n\n          if (bufferLen > maxConfigBuffer) {\n            return;\n          }\n\n          var foundFrag;\n          var fragPrevious = this.fragPrevious;\n\n          if (bufferEnd < end) {\n            if (fragPrevious && trackDetails.hasProgramDateTime) {\n              foundFrag = findFragmentByPDT(fragments, fragPrevious.endProgramDateTime, maxFragLookUpTolerance);\n            }\n\n            if (!foundFrag) {\n              foundFrag = findFragmentByPTS(fragPrevious, fragments, bufferEnd, maxFragLookUpTolerance);\n            }\n          } else {\n            foundFrag = fragments[fragLen - 1];\n          }\n\n          if (foundFrag && foundFrag.encrypted) {\n            logger[\"logger\"].log(\"Loading key for \" + foundFrag.sn);\n            this.state = State.KEY_LOADING;\n            this.hls.trigger(events[\"default\"].KEY_LOADING, {\n              frag: foundFrag\n            });\n          } else if (foundFrag && fragmentTracker.getState(foundFrag) === FragmentState.NOT_LOADED) {\n            // only load if fragment is not loaded\n            this.fragCurrent = foundFrag;\n            this.state = State.FRAG_LOADING;\n            this.hls.trigger(events[\"default\"].FRAG_LOADING, {\n              frag: foundFrag\n            });\n          }\n        }\n    }\n  };\n\n  _proto.stopLoad = function stopLoad() {\n    this.lastAVStart = 0;\n    this.fragPrevious = null;\n\n    _BaseStreamController.prototype.stopLoad.call(this);\n  };\n\n  _proto._getBuffered = function _getBuffered() {\n    return this.tracksBuffered[this.currentTrackId] || [];\n  };\n\n  _proto.onMediaSeeking = function onMediaSeeking() {\n    if (this.fragCurrent) {\n      var currentTime = this.media ? this.media.currentTime : 0;\n      var tolerance = this.config.maxFragLookUpTolerance;\n      var fragStartOffset = this.fragCurrent.start - tolerance;\n      var fragEndOffset = this.fragCurrent.start + this.fragCurrent.duration + tolerance; // check if position will be out of currently loaded frag range after seeking : if out, cancel frag load, if in, don't do anything\n\n      if (currentTime < fragStartOffset || currentTime > fragEndOffset) {\n        if (this.fragCurrent.loader) {\n          this.fragCurrent.loader.abort();\n        }\n\n        this.fragmentTracker.removeFragment(this.fragCurrent);\n        this.fragCurrent = null;\n        this.fragPrevious = null; // switch to IDLE state to load new fragment\n\n        this.state = State.IDLE; // speed up things\n\n        this.tick();\n      }\n    }\n  };\n\n  return SubtitleStreamController;\n}(base_stream_controller_BaseStreamController);\n// CONCATENATED MODULE: ./src/utils/mediakeys-helper.ts\n/**\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Navigator/requestMediaKeySystemAccess\n */\nvar KeySystems;\n\n(function (KeySystems) {\n  KeySystems[\"WIDEVINE\"] = \"com.widevine.alpha\";\n  KeySystems[\"PLAYREADY\"] = \"com.microsoft.playready\";\n})(KeySystems || (KeySystems = {}));\n\nvar requestMediaKeySystemAccess = function () {\n  if (typeof window !== 'undefined' && window.navigator && window.navigator.requestMediaKeySystemAccess) {\n    return window.navigator.requestMediaKeySystemAccess.bind(window.navigator);\n  } else {\n    return null;\n  }\n}();\n\n\n// CONCATENATED MODULE: ./src/controller/eme-controller.ts\nfunction eme_controller_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction eme_controller_createClass(Constructor, protoProps, staticProps) { if (protoProps) eme_controller_defineProperties(Constructor.prototype, protoProps); if (staticProps) eme_controller_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction eme_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n/**\n * @author Stephan Hesse <disparat@gmail.com> | <tchakabam@gmail.com>\n *\n * DRM support for Hls.js\n */\n\n\n\n\n\nvar MAX_LICENSE_REQUEST_FAILURES = 3;\n/**\n * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration\n * @param {Array<string>} audioCodecs List of required audio codecs to support\n * @param {Array<string>} videoCodecs List of required video codecs to support\n * @param {object} drmSystemOptions Optional parameters/requirements for the key-system\n * @returns {Array<MediaSystemConfiguration>} An array of supported configurations\n */\n\nvar createWidevineMediaKeySystemConfigurations = function createWidevineMediaKeySystemConfigurations(audioCodecs, videoCodecs, drmSystemOptions) {\n  /* jshint ignore:line */\n  var baseConfig = {\n    // initDataTypes: ['keyids', 'mp4'],\n    // label: \"\",\n    // persistentState: \"not-allowed\", // or \"required\" ?\n    // distinctiveIdentifier: \"not-allowed\", // or \"required\" ?\n    // sessionTypes: ['temporary'],\n    audioCapabilities: [],\n    // { contentType: 'audio/mp4; codecs=\"mp4a.40.2\"' }\n    videoCapabilities: [] // { contentType: 'video/mp4; codecs=\"avc1.42E01E\"' }\n\n  };\n  audioCodecs.forEach(function (codec) {\n    baseConfig.audioCapabilities.push({\n      contentType: \"audio/mp4; codecs=\\\"\" + codec + \"\\\"\",\n      robustness: drmSystemOptions.audioRobustness || ''\n    });\n  });\n  videoCodecs.forEach(function (codec) {\n    baseConfig.videoCapabilities.push({\n      contentType: \"video/mp4; codecs=\\\"\" + codec + \"\\\"\",\n      robustness: drmSystemOptions.videoRobustness || ''\n    });\n  });\n  return [baseConfig];\n};\n/**\n * The idea here is to handle key-system (and their respective platforms) specific configuration differences\n * in order to work with the local requestMediaKeySystemAccess method.\n *\n * We can also rule-out platform-related key-system support at this point by throwing an error.\n *\n * @param {string} keySystem Identifier for the key-system, see `KeySystems` enum\n * @param {Array<string>} audioCodecs List of required audio codecs to support\n * @param {Array<string>} videoCodecs List of required video codecs to support\n * @throws will throw an error if a unknown key system is passed\n * @returns {Array<MediaSystemConfiguration>} A non-empty Array of MediaKeySystemConfiguration objects\n */\n\n\nvar eme_controller_getSupportedMediaKeySystemConfigurations = function getSupportedMediaKeySystemConfigurations(keySystem, audioCodecs, videoCodecs, drmSystemOptions) {\n  switch (keySystem) {\n    case KeySystems.WIDEVINE:\n      return createWidevineMediaKeySystemConfigurations(audioCodecs, videoCodecs, drmSystemOptions);\n\n    default:\n      throw new Error(\"Unknown key-system: \" + keySystem);\n  }\n};\n\n/**\n * Controller to deal with encrypted media extensions (EME)\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Encrypted_Media_Extensions_API\n *\n * @class\n * @constructor\n */\nvar eme_controller_EMEController = /*#__PURE__*/function (_EventHandler) {\n  eme_controller_inheritsLoose(EMEController, _EventHandler);\n\n  /**\n     * @constructs\n     * @param {Hls} hls Our Hls.js instance\n     */\n  function EMEController(hls) {\n    var _this;\n\n    _this = _EventHandler.call(this, hls, events[\"default\"].MEDIA_ATTACHED, events[\"default\"].MEDIA_DETACHED, events[\"default\"].MANIFEST_PARSED) || this;\n    _this._widevineLicenseUrl = void 0;\n    _this._licenseXhrSetup = void 0;\n    _this._emeEnabled = void 0;\n    _this._requestMediaKeySystemAccess = void 0;\n    _this._drmSystemOptions = void 0;\n    _this._config = void 0;\n    _this._mediaKeysList = [];\n    _this._media = null;\n    _this._hasSetMediaKeys = false;\n    _this._requestLicenseFailureCount = 0;\n    _this.mediaKeysPromise = null;\n\n    _this._onMediaEncrypted = function (e) {\n      logger[\"logger\"].log(\"Media is encrypted using \\\"\" + e.initDataType + \"\\\" init data type\");\n\n      if (!_this.mediaKeysPromise) {\n        logger[\"logger\"].error('Fatal: Media is encrypted but no CDM access or no keys have been requested');\n\n        _this.hls.trigger(events[\"default\"].ERROR, {\n          type: errors[\"ErrorTypes\"].KEY_SYSTEM_ERROR,\n          details: errors[\"ErrorDetails\"].KEY_SYSTEM_NO_KEYS,\n          fatal: true\n        });\n\n        return;\n      }\n\n      var finallySetKeyAndStartSession = function finallySetKeyAndStartSession(mediaKeys) {\n        if (!_this._media) {\n          return;\n        }\n\n        _this._attemptSetMediaKeys(mediaKeys);\n\n        _this._generateRequestWithPreferredKeySession(e.initDataType, e.initData);\n      }; // Could use `Promise.finally` but some Promise polyfills are missing it\n\n\n      _this.mediaKeysPromise.then(finallySetKeyAndStartSession).catch(finallySetKeyAndStartSession);\n    };\n\n    _this._config = hls.config;\n    _this._widevineLicenseUrl = _this._config.widevineLicenseUrl;\n    _this._licenseXhrSetup = _this._config.licenseXhrSetup;\n    _this._emeEnabled = _this._config.emeEnabled;\n    _this._requestMediaKeySystemAccess = _this._config.requestMediaKeySystemAccessFunc;\n    _this._drmSystemOptions = hls.config.drmSystemOptions;\n    return _this;\n  }\n  /**\n   * @param {string} keySystem Identifier for the key-system, see `KeySystems` enum\n   * @returns {string} License server URL for key-system (if any configured, otherwise causes error)\n   * @throws if a unsupported keysystem is passed\n   */\n\n\n  var _proto = EMEController.prototype;\n\n  _proto.getLicenseServerUrl = function getLicenseServerUrl(keySystem) {\n    switch (keySystem) {\n      case KeySystems.WIDEVINE:\n        if (!this._widevineLicenseUrl) {\n          break;\n        }\n\n        return this._widevineLicenseUrl;\n    }\n\n    throw new Error(\"no license server URL configured for key-system \\\"\" + keySystem + \"\\\"\");\n  }\n  /**\n     * Requests access object and adds it to our list upon success\n     * @private\n     * @param {string} keySystem System ID (see `KeySystems`)\n     * @param {Array<string>} audioCodecs List of required audio codecs to support\n     * @param {Array<string>} videoCodecs List of required video codecs to support\n     * @throws When a unsupported KeySystem is passed\n     */\n  ;\n\n  _proto._attemptKeySystemAccess = function _attemptKeySystemAccess(keySystem, audioCodecs, videoCodecs) {\n    var _this2 = this;\n\n    // This can throw, but is caught in event handler callpath\n    var mediaKeySystemConfigs = eme_controller_getSupportedMediaKeySystemConfigurations(keySystem, audioCodecs, videoCodecs, this._drmSystemOptions);\n    logger[\"logger\"].log('Requesting encrypted media key-system access'); // expecting interface like window.navigator.requestMediaKeySystemAccess\n\n    var keySystemAccessPromise = this.requestMediaKeySystemAccess(keySystem, mediaKeySystemConfigs);\n    this.mediaKeysPromise = keySystemAccessPromise.then(function (mediaKeySystemAccess) {\n      return _this2._onMediaKeySystemAccessObtained(keySystem, mediaKeySystemAccess);\n    });\n    keySystemAccessPromise.catch(function (err) {\n      logger[\"logger\"].error(\"Failed to obtain key-system \\\"\" + keySystem + \"\\\" access:\", err);\n    });\n  };\n\n  /**\n     * Handles obtaining access to a key-system\n     * @private\n     * @param {string} keySystem\n     * @param {MediaKeySystemAccess} mediaKeySystemAccess https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess\n     */\n  _proto._onMediaKeySystemAccessObtained = function _onMediaKeySystemAccessObtained(keySystem, mediaKeySystemAccess) {\n    var _this3 = this;\n\n    logger[\"logger\"].log(\"Access for key-system \\\"\" + keySystem + \"\\\" obtained\");\n    var mediaKeysListItem = {\n      mediaKeysSessionInitialized: false,\n      mediaKeySystemAccess: mediaKeySystemAccess,\n      mediaKeySystemDomain: keySystem\n    };\n\n    this._mediaKeysList.push(mediaKeysListItem);\n\n    var mediaKeysPromise = Promise.resolve().then(function () {\n      return mediaKeySystemAccess.createMediaKeys();\n    }).then(function (mediaKeys) {\n      mediaKeysListItem.mediaKeys = mediaKeys;\n      logger[\"logger\"].log(\"Media-keys created for key-system \\\"\" + keySystem + \"\\\"\");\n\n      _this3._onMediaKeysCreated();\n\n      return mediaKeys;\n    });\n    mediaKeysPromise.catch(function (err) {\n      logger[\"logger\"].error('Failed to create media-keys:', err);\n    });\n    return mediaKeysPromise;\n  }\n  /**\n   * Handles key-creation (represents access to CDM). We are going to create key-sessions upon this\n   * for all existing keys where no session exists yet.\n   *\n   * @private\n   */\n  ;\n\n  _proto._onMediaKeysCreated = function _onMediaKeysCreated() {\n    var _this4 = this;\n\n    // check for all key-list items if a session exists, otherwise, create one\n    this._mediaKeysList.forEach(function (mediaKeysListItem) {\n      if (!mediaKeysListItem.mediaKeysSession) {\n        // mediaKeys is definitely initialized here\n        mediaKeysListItem.mediaKeysSession = mediaKeysListItem.mediaKeys.createSession();\n\n        _this4._onNewMediaKeySession(mediaKeysListItem.mediaKeysSession);\n      }\n    });\n  }\n  /**\n     * @private\n     * @param {*} keySession\n     */\n  ;\n\n  _proto._onNewMediaKeySession = function _onNewMediaKeySession(keySession) {\n    var _this5 = this;\n\n    logger[\"logger\"].log(\"New key-system session \" + keySession.sessionId);\n    keySession.addEventListener('message', function (event) {\n      _this5._onKeySessionMessage(keySession, event.message);\n    }, false);\n  }\n  /**\n   * @private\n   * @param {MediaKeySession} keySession\n   * @param {ArrayBuffer} message\n   */\n  ;\n\n  _proto._onKeySessionMessage = function _onKeySessionMessage(keySession, message) {\n    logger[\"logger\"].log('Got EME message event, creating license request');\n\n    this._requestLicense(message, function (data) {\n      logger[\"logger\"].log(\"Received license data (length: \" + (data ? data.byteLength : data) + \"), updating key-session\");\n      keySession.update(data);\n    });\n  }\n  /**\n   * @private\n   * @param e {MediaEncryptedEvent}\n   */\n  ;\n\n  /**\n   * @private\n   */\n  _proto._attemptSetMediaKeys = function _attemptSetMediaKeys(mediaKeys) {\n    if (!this._media) {\n      throw new Error('Attempted to set mediaKeys without first attaching a media element');\n    }\n\n    if (!this._hasSetMediaKeys) {\n      // FIXME: see if we can/want/need-to really to deal with several potential key-sessions?\n      var keysListItem = this._mediaKeysList[0];\n\n      if (!keysListItem || !keysListItem.mediaKeys) {\n        logger[\"logger\"].error('Fatal: Media is encrypted but no CDM access or no keys have been obtained yet');\n        this.hls.trigger(events[\"default\"].ERROR, {\n          type: errors[\"ErrorTypes\"].KEY_SYSTEM_ERROR,\n          details: errors[\"ErrorDetails\"].KEY_SYSTEM_NO_KEYS,\n          fatal: true\n        });\n        return;\n      }\n\n      logger[\"logger\"].log('Setting keys for encrypted media');\n\n      this._media.setMediaKeys(keysListItem.mediaKeys);\n\n      this._hasSetMediaKeys = true;\n    }\n  }\n  /**\n   * @private\n   */\n  ;\n\n  _proto._generateRequestWithPreferredKeySession = function _generateRequestWithPreferredKeySession(initDataType, initData) {\n    var _this6 = this;\n\n    // FIXME: see if we can/want/need-to really to deal with several potential key-sessions?\n    var keysListItem = this._mediaKeysList[0];\n\n    if (!keysListItem) {\n      logger[\"logger\"].error('Fatal: Media is encrypted but not any key-system access has been obtained yet');\n      this.hls.trigger(events[\"default\"].ERROR, {\n        type: errors[\"ErrorTypes\"].KEY_SYSTEM_ERROR,\n        details: errors[\"ErrorDetails\"].KEY_SYSTEM_NO_ACCESS,\n        fatal: true\n      });\n      return;\n    }\n\n    if (keysListItem.mediaKeysSessionInitialized) {\n      logger[\"logger\"].warn('Key-Session already initialized but requested again');\n      return;\n    }\n\n    var keySession = keysListItem.mediaKeysSession;\n\n    if (!keySession) {\n      logger[\"logger\"].error('Fatal: Media is encrypted but no key-session existing');\n      this.hls.trigger(events[\"default\"].ERROR, {\n        type: errors[\"ErrorTypes\"].KEY_SYSTEM_ERROR,\n        details: errors[\"ErrorDetails\"].KEY_SYSTEM_NO_SESSION,\n        fatal: true\n      });\n      return;\n    } // initData is null if the media is not CORS-same-origin\n\n\n    if (!initData) {\n      logger[\"logger\"].warn('Fatal: initData required for generating a key session is null');\n      this.hls.trigger(events[\"default\"].ERROR, {\n        type: errors[\"ErrorTypes\"].KEY_SYSTEM_ERROR,\n        details: errors[\"ErrorDetails\"].KEY_SYSTEM_NO_INIT_DATA,\n        fatal: true\n      });\n      return;\n    }\n\n    logger[\"logger\"].log(\"Generating key-session request for \\\"\" + initDataType + \"\\\" init data type\");\n    keysListItem.mediaKeysSessionInitialized = true;\n    keySession.generateRequest(initDataType, initData).then(function () {\n      logger[\"logger\"].debug('Key-session generation succeeded');\n    }).catch(function (err) {\n      logger[\"logger\"].error('Error generating key-session request:', err);\n\n      _this6.hls.trigger(events[\"default\"].ERROR, {\n        type: errors[\"ErrorTypes\"].KEY_SYSTEM_ERROR,\n        details: errors[\"ErrorDetails\"].KEY_SYSTEM_NO_SESSION,\n        fatal: false\n      });\n    });\n  }\n  /**\n   * @private\n   * @param {string} url License server URL\n   * @param {ArrayBuffer} keyMessage Message data issued by key-system\n   * @param {function} callback Called when XHR has succeeded\n   * @returns {XMLHttpRequest} Unsent (but opened state) XHR object\n   * @throws if XMLHttpRequest construction failed\n   */\n  ;\n\n  _proto._createLicenseXhr = function _createLicenseXhr(url, keyMessage, callback) {\n    var xhr = new XMLHttpRequest();\n    var licenseXhrSetup = this._licenseXhrSetup;\n\n    try {\n      if (licenseXhrSetup) {\n        try {\n          licenseXhrSetup(xhr, url);\n        } catch (e) {\n          // let's try to open before running setup\n          xhr.open('POST', url, true);\n          licenseXhrSetup(xhr, url);\n        }\n      } // if licenseXhrSetup did not yet call open, let's do it now\n\n\n      if (!xhr.readyState) {\n        xhr.open('POST', url, true);\n      }\n    } catch (e) {\n      // IE11 throws an exception on xhr.open if attempting to access an HTTP resource over HTTPS\n      throw new Error(\"issue setting up KeySystem license XHR \" + e);\n    } // Because we set responseType to ArrayBuffer here, callback is typed as handling only array buffers\n\n\n    xhr.responseType = 'arraybuffer';\n    xhr.onreadystatechange = this._onLicenseRequestReadyStageChange.bind(this, xhr, url, keyMessage, callback);\n    return xhr;\n  }\n  /**\n   * @private\n   * @param {XMLHttpRequest} xhr\n   * @param {string} url License server URL\n   * @param {ArrayBuffer} keyMessage Message data issued by key-system\n   * @param {function} callback Called when XHR has succeeded\n   */\n  ;\n\n  _proto._onLicenseRequestReadyStageChange = function _onLicenseRequestReadyStageChange(xhr, url, keyMessage, callback) {\n    switch (xhr.readyState) {\n      case 4:\n        if (xhr.status === 200) {\n          this._requestLicenseFailureCount = 0;\n          logger[\"logger\"].log('License request succeeded');\n\n          if (xhr.responseType !== 'arraybuffer') {\n            logger[\"logger\"].warn('xhr response type was not set to the expected arraybuffer for license request');\n          }\n\n          callback(xhr.response);\n        } else {\n          logger[\"logger\"].error(\"License Request XHR failed (\" + url + \"). Status: \" + xhr.status + \" (\" + xhr.statusText + \")\");\n          this._requestLicenseFailureCount++;\n\n          if (this._requestLicenseFailureCount > MAX_LICENSE_REQUEST_FAILURES) {\n            this.hls.trigger(events[\"default\"].ERROR, {\n              type: errors[\"ErrorTypes\"].KEY_SYSTEM_ERROR,\n              details: errors[\"ErrorDetails\"].KEY_SYSTEM_LICENSE_REQUEST_FAILED,\n              fatal: true\n            });\n            return;\n          }\n\n          var attemptsLeft = MAX_LICENSE_REQUEST_FAILURES - this._requestLicenseFailureCount + 1;\n          logger[\"logger\"].warn(\"Retrying license request, \" + attemptsLeft + \" attempts left\");\n\n          this._requestLicense(keyMessage, callback);\n        }\n\n        break;\n    }\n  }\n  /**\n   * @private\n   * @param {MediaKeysListItem} keysListItem\n   * @param {ArrayBuffer} keyMessage\n   * @returns {ArrayBuffer} Challenge data posted to license server\n   * @throws if KeySystem is unsupported\n   */\n  ;\n\n  _proto._generateLicenseRequestChallenge = function _generateLicenseRequestChallenge(keysListItem, keyMessage) {\n    switch (keysListItem.mediaKeySystemDomain) {\n      // case KeySystems.PLAYREADY:\n      // from https://github.com/MicrosoftEdge/Demos/blob/master/eme/scripts/demo.js\n\n      /*\n        if (this.licenseType !== this.LICENSE_TYPE_WIDEVINE) {\n          // For PlayReady CDMs, we need to dig the Challenge out of the XML.\n          var keyMessageXml = new DOMParser().parseFromString(String.fromCharCode.apply(null, new Uint16Array(keyMessage)), 'application/xml');\n          if (keyMessageXml.getElementsByTagName('Challenge')[0]) {\n              challenge = atob(keyMessageXml.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue);\n          } else {\n              throw 'Cannot find <Challenge> in key message';\n          }\n          var headerNames = keyMessageXml.getElementsByTagName('name');\n          var headerValues = keyMessageXml.getElementsByTagName('value');\n          if (headerNames.length !== headerValues.length) {\n              throw 'Mismatched header <name>/<value> pair in key message';\n          }\n          for (var i = 0; i < headerNames.length; i++) {\n              xhr.setRequestHeader(headerNames[i].childNodes[0].nodeValue, headerValues[i].childNodes[0].nodeValue);\n          }\n        }\n        break;\n      */\n      case KeySystems.WIDEVINE:\n        // For Widevine CDMs, the challenge is the keyMessage.\n        return keyMessage;\n    }\n\n    throw new Error(\"unsupported key-system: \" + keysListItem.mediaKeySystemDomain);\n  }\n  /**\n   * @private\n   * @param keyMessage\n   * @param callback\n   */\n  ;\n\n  _proto._requestLicense = function _requestLicense(keyMessage, callback) {\n    logger[\"logger\"].log('Requesting content license for key-system');\n    var keysListItem = this._mediaKeysList[0];\n\n    if (!keysListItem) {\n      logger[\"logger\"].error('Fatal error: Media is encrypted but no key-system access has been obtained yet');\n      this.hls.trigger(events[\"default\"].ERROR, {\n        type: errors[\"ErrorTypes\"].KEY_SYSTEM_ERROR,\n        details: errors[\"ErrorDetails\"].KEY_SYSTEM_NO_ACCESS,\n        fatal: true\n      });\n      return;\n    }\n\n    try {\n      var _url = this.getLicenseServerUrl(keysListItem.mediaKeySystemDomain);\n\n      var _xhr = this._createLicenseXhr(_url, keyMessage, callback);\n\n      logger[\"logger\"].log(\"Sending license request to URL: \" + _url);\n\n      var challenge = this._generateLicenseRequestChallenge(keysListItem, keyMessage);\n\n      _xhr.send(challenge);\n    } catch (e) {\n      logger[\"logger\"].error(\"Failure requesting DRM license: \" + e);\n      this.hls.trigger(events[\"default\"].ERROR, {\n        type: errors[\"ErrorTypes\"].KEY_SYSTEM_ERROR,\n        details: errors[\"ErrorDetails\"].KEY_SYSTEM_LICENSE_REQUEST_FAILED,\n        fatal: true\n      });\n    }\n  };\n\n  _proto.onMediaAttached = function onMediaAttached(data) {\n    if (!this._emeEnabled) {\n      return;\n    }\n\n    var media = data.media; // keep reference of media\n\n    this._media = media;\n    media.addEventListener('encrypted', this._onMediaEncrypted);\n  };\n\n  _proto.onMediaDetached = function onMediaDetached() {\n    var media = this._media;\n    var mediaKeysList = this._mediaKeysList;\n\n    if (!media) {\n      return;\n    }\n\n    media.removeEventListener('encrypted', this._onMediaEncrypted);\n    this._media = null;\n    this._mediaKeysList = []; // Close all sessions and remove media keys from the video element.\n\n    Promise.all(mediaKeysList.map(function (mediaKeysListItem) {\n      if (mediaKeysListItem.mediaKeysSession) {\n        return mediaKeysListItem.mediaKeysSession.close().catch(function () {// Ignore errors when closing the sessions. Closing a session that\n          // generated no key requests will throw an error.\n        });\n      }\n    })).then(function () {\n      return media.setMediaKeys(null);\n    }).catch(function () {// Ignore any failures while removing media keys from the video element.\n    });\n  } // TODO: Use manifest types here when they are defined\n  ;\n\n  _proto.onManifestParsed = function onManifestParsed(data) {\n    if (!this._emeEnabled) {\n      return;\n    }\n\n    var audioCodecs = data.levels.map(function (level) {\n      return level.audioCodec;\n    });\n    var videoCodecs = data.levels.map(function (level) {\n      return level.videoCodec;\n    });\n\n    this._attemptKeySystemAccess(KeySystems.WIDEVINE, audioCodecs, videoCodecs);\n  };\n\n  eme_controller_createClass(EMEController, [{\n    key: \"requestMediaKeySystemAccess\",\n    get: function get() {\n      if (!this._requestMediaKeySystemAccess) {\n        throw new Error('No requestMediaKeySystemAccess function configured');\n      }\n\n      return this._requestMediaKeySystemAccess;\n    }\n  }]);\n\n  return EMEController;\n}(event_handler);\n\n/* harmony default export */ var eme_controller = (eme_controller_EMEController);\n// CONCATENATED MODULE: ./src/config.ts\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * HLS config\n */\n\n\n\n\n // import FetchLoader from './utils/fetch-loader';\n\n\n\n\n\n\n\n\n\n// If possible, keep hlsDefaultConfig shallow\n// It is cloned whenever a new Hls instance is created, by keeping the config\n// shallow the properties are cloned, and we don't end up manipulating the default\nvar hlsDefaultConfig = _objectSpread(_objectSpread({\n  autoStartLoad: true,\n  // used by stream-controller\n  startPosition: -1,\n  // used by stream-controller\n  defaultAudioCodec: void 0,\n  // used by stream-controller\n  debug: false,\n  // used by logger\n  capLevelOnFPSDrop: false,\n  // used by fps-controller\n  capLevelToPlayerSize: false,\n  // used by cap-level-controller\n  initialLiveManifestSize: 1,\n  // used by stream-controller\n  maxBufferLength: 30,\n  // used by stream-controller\n  maxBufferSize: 60 * 1000 * 1000,\n  // used by stream-controller\n  maxBufferHole: 0.5,\n  // used by stream-controller\n  lowBufferWatchdogPeriod: 0.5,\n  // used by stream-controller\n  highBufferWatchdogPeriod: 3,\n  // used by stream-controller\n  nudgeOffset: 0.1,\n  // used by stream-controller\n  nudgeMaxRetry: 3,\n  // used by stream-controller\n  maxFragLookUpTolerance: 0.25,\n  // used by stream-controller\n  liveSyncDurationCount: 3,\n  // used by stream-controller\n  liveMaxLatencyDurationCount: Infinity,\n  // used by stream-controller\n  liveSyncDuration: void 0,\n  // used by stream-controller\n  liveMaxLatencyDuration: void 0,\n  // used by stream-controller\n  liveDurationInfinity: false,\n  // used by buffer-controller\n  liveBackBufferLength: Infinity,\n  // used by buffer-controller\n  maxMaxBufferLength: 600,\n  // used by stream-controller\n  enableWorker: true,\n  // used by demuxer\n  enableSoftwareAES: true,\n  // used by decrypter\n  manifestLoadingTimeOut: 10000,\n  // used by playlist-loader\n  manifestLoadingMaxRetry: 1,\n  // used by playlist-loader\n  manifestLoadingRetryDelay: 1000,\n  // used by playlist-loader\n  manifestLoadingMaxRetryTimeout: 64000,\n  // used by playlist-loader\n  startLevel: void 0,\n  // used by level-controller\n  levelLoadingTimeOut: 10000,\n  // used by playlist-loader\n  levelLoadingMaxRetry: 4,\n  // used by playlist-loader\n  levelLoadingRetryDelay: 1000,\n  // used by playlist-loader\n  levelLoadingMaxRetryTimeout: 64000,\n  // used by playlist-loader\n  fragLoadingTimeOut: 20000,\n  // used by fragment-loader\n  fragLoadingMaxRetry: 6,\n  // used by fragment-loader\n  fragLoadingRetryDelay: 1000,\n  // used by fragment-loader\n  fragLoadingMaxRetryTimeout: 64000,\n  // used by fragment-loader\n  startFragPrefetch: false,\n  // used by stream-controller\n  fpsDroppedMonitoringPeriod: 5000,\n  // used by fps-controller\n  fpsDroppedMonitoringThreshold: 0.2,\n  // used by fps-controller\n  appendErrorMaxRetry: 3,\n  // used by buffer-controller\n  loader: xhr_loader,\n  // loader: FetchLoader,\n  fLoader: void 0,\n  // used by fragment-loader\n  pLoader: void 0,\n  // used by playlist-loader\n  xhrSetup: void 0,\n  // used by xhr-loader\n  licenseXhrSetup: void 0,\n  // used by eme-controller\n  // fetchSetup: void 0,\n  abrController: abr_controller,\n  bufferController: buffer_controller,\n  capLevelController: cap_level_controller,\n  fpsController: fps_controller,\n  stretchShortVideoTrack: false,\n  // used by mp4-remuxer\n  maxAudioFramesDrift: 1,\n  // used by mp4-remuxer\n  forceKeyFrameOnDiscontinuity: true,\n  // used by ts-demuxer\n  abrEwmaFastLive: 3,\n  // used by abr-controller\n  abrEwmaSlowLive: 9,\n  // used by abr-controller\n  abrEwmaFastVoD: 3,\n  // used by abr-controller\n  abrEwmaSlowVoD: 9,\n  // used by abr-controller\n  abrEwmaDefaultEstimate: 5e5,\n  // 500 kbps  // used by abr-controller\n  abrBandWidthFactor: 0.95,\n  // used by abr-controller\n  abrBandWidthUpFactor: 0.7,\n  // used by abr-controller\n  abrMaxWithRealBitrate: false,\n  // used by abr-controller\n  maxStarvationDelay: 4,\n  // used by abr-controller\n  maxLoadingDelay: 4,\n  // used by abr-controller\n  minAutoBitrate: 0,\n  // used by hls\n  emeEnabled: false,\n  // used by eme-controller\n  widevineLicenseUrl: void 0,\n  // used by eme-controller\n  drmSystemOptions: {},\n  // used by eme-controller\n  requestMediaKeySystemAccessFunc: requestMediaKeySystemAccess,\n  // used by eme-controller\n  testBandwidth: true\n}, timelineConfig()), {}, {\n  subtitleStreamController:   true ? subtitle_stream_controller_SubtitleStreamController : 0,\n  subtitleTrackController:   true ? subtitle_track_controller : 0,\n  timelineController:   true ? timeline_controller : 0,\n  audioStreamController:   true ? audio_stream_controller : 0,\n  audioTrackController:   true ? audio_track_controller : 0,\n  emeController:   true ? eme_controller : 0\n});\n\nfunction timelineConfig() {\n  return {\n    cueHandler: cues_namespaceObject,\n    // used by timeline-controller\n    enableCEA708Captions: true,\n    // used by timeline-controller\n    enableWebVTT: true,\n    // used by timeline-controller\n    captionsTextTrack1Label: 'English',\n    // used by timeline-controller\n    captionsTextTrack1LanguageCode: 'en',\n    // used by timeline-controller\n    captionsTextTrack2Label: 'Spanish',\n    // used by timeline-controller\n    captionsTextTrack2LanguageCode: 'es',\n    // used by timeline-controller\n    captionsTextTrack3Label: 'Unknown CC',\n    // used by timeline-controller\n    captionsTextTrack3LanguageCode: '',\n    // used by timeline-controller\n    captionsTextTrack4Label: 'Unknown CC',\n    // used by timeline-controller\n    captionsTextTrack4LanguageCode: '',\n    // used by timeline-controller\n    renderTextTracksNatively: true\n  };\n}\n// CONCATENATED MODULE: ./src/hls.ts\nfunction hls_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction hls_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { hls_ownKeys(Object(source), true).forEach(function (key) { hls_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { hls_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction hls_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction hls_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction hls_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction hls_createClass(Constructor, protoProps, staticProps) { if (protoProps) hls_defineProperties(Constructor.prototype, protoProps); if (staticProps) hls_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction hls_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @module Hls\n * @class\n * @constructor\n */\n\nvar hls_Hls = /*#__PURE__*/function (_Observer) {\n  hls_inheritsLoose(Hls, _Observer);\n\n  /**\n   * @type {boolean}\n   */\n  Hls.isSupported = function isSupported() {\n    return is_supported_isSupported();\n  }\n  /**\n   * @type {HlsEvents}\n   */\n  ;\n\n  hls_createClass(Hls, null, [{\n    key: \"version\",\n\n    /**\n     * @type {string}\n     */\n    get: function get() {\n      return \"0.14.17\";\n    }\n  }, {\n    key: \"Events\",\n    get: function get() {\n      return events[\"default\"];\n    }\n    /**\n     * @type {HlsErrorTypes}\n     */\n\n  }, {\n    key: \"ErrorTypes\",\n    get: function get() {\n      return errors[\"ErrorTypes\"];\n    }\n    /**\n     * @type {HlsErrorDetails}\n     */\n\n  }, {\n    key: \"ErrorDetails\",\n    get: function get() {\n      return errors[\"ErrorDetails\"];\n    }\n    /**\n     * @type {HlsConfig}\n     */\n\n  }, {\n    key: \"DefaultConfig\",\n    get: function get() {\n      if (!Hls.defaultConfig) {\n        return hlsDefaultConfig;\n      }\n\n      return Hls.defaultConfig;\n    }\n    /**\n     * @type {HlsConfig}\n     */\n    ,\n    set: function set(defaultConfig) {\n      Hls.defaultConfig = defaultConfig;\n    }\n    /**\n     * Creates an instance of an HLS client that can attach to exactly one `HTMLMediaElement`.\n     *\n     * @constructs Hls\n     * @param {HlsConfig} config\n     */\n\n  }]);\n\n  function Hls(userConfig) {\n    var _this;\n\n    if (userConfig === void 0) {\n      userConfig = {};\n    }\n\n    _this = _Observer.call(this) || this;\n    _this.config = void 0;\n    _this._autoLevelCapping = void 0;\n    _this.abrController = void 0;\n    _this.capLevelController = void 0;\n    _this.levelController = void 0;\n    _this.streamController = void 0;\n    _this.networkControllers = void 0;\n    _this.audioTrackController = void 0;\n    _this.subtitleTrackController = void 0;\n    _this.emeController = void 0;\n    _this.coreComponents = void 0;\n    _this.media = null;\n    _this.url = null;\n    var defaultConfig = Hls.DefaultConfig;\n\n    if ((userConfig.liveSyncDurationCount || userConfig.liveMaxLatencyDurationCount) && (userConfig.liveSyncDuration || userConfig.liveMaxLatencyDuration)) {\n      throw new Error('Illegal hls.js config: don\\'t mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration');\n    } // Shallow clone\n\n\n    _this.config = hls_objectSpread(hls_objectSpread({}, defaultConfig), userConfig);\n\n    var _assertThisInitialize = hls_assertThisInitialized(_this),\n        config = _assertThisInitialize.config;\n\n    if (config.liveMaxLatencyDurationCount !== void 0 && config.liveMaxLatencyDurationCount <= config.liveSyncDurationCount) {\n      throw new Error('Illegal hls.js config: \"liveMaxLatencyDurationCount\" must be gt \"liveSyncDurationCount\"');\n    }\n\n    if (config.liveMaxLatencyDuration !== void 0 && (config.liveSyncDuration === void 0 || config.liveMaxLatencyDuration <= config.liveSyncDuration)) {\n      throw new Error('Illegal hls.js config: \"liveMaxLatencyDuration\" must be gt \"liveSyncDuration\"');\n    }\n\n    Object(logger[\"enableLogs\"])(config.debug);\n    _this._autoLevelCapping = -1; // core controllers and network loaders\n\n    /**\n     * @member {AbrController} abrController\n     */\n\n    var abrController = _this.abrController = new config.abrController(hls_assertThisInitialized(_this)); // eslint-disable-line new-cap\n\n    var bufferController = new config.bufferController(hls_assertThisInitialized(_this)); // eslint-disable-line new-cap\n\n    var capLevelController = _this.capLevelController = new config.capLevelController(hls_assertThisInitialized(_this)); // eslint-disable-line new-cap\n\n    var fpsController = new config.fpsController(hls_assertThisInitialized(_this)); // eslint-disable-line new-cap\n\n    var playListLoader = new playlist_loader(hls_assertThisInitialized(_this));\n    var fragmentLoader = new fragment_loader(hls_assertThisInitialized(_this));\n    var keyLoader = new key_loader(hls_assertThisInitialized(_this));\n    var id3TrackController = new id3_track_controller(hls_assertThisInitialized(_this)); // network controllers\n\n    /**\n     * @member {LevelController} levelController\n     */\n\n    var levelController = _this.levelController = new level_controller_LevelController(hls_assertThisInitialized(_this)); // FIXME: FragmentTracker must be defined before StreamController because the order of event handling is important\n\n    var fragmentTracker = new fragment_tracker_FragmentTracker(hls_assertThisInitialized(_this));\n    /**\n     * @member {StreamController} streamController\n     */\n\n    var streamController = _this.streamController = new stream_controller(hls_assertThisInitialized(_this), fragmentTracker);\n    var networkControllers = [levelController, streamController]; // optional audio stream controller\n\n    /**\n     * @var {ICoreComponent | Controller}\n     */\n\n    var Controller = config.audioStreamController;\n\n    if (Controller) {\n      networkControllers.push(new Controller(hls_assertThisInitialized(_this), fragmentTracker));\n    }\n    /**\n     * @member {INetworkController[]} networkControllers\n     */\n\n\n    _this.networkControllers = networkControllers;\n    /**\n     * @var {ICoreComponent[]}\n     */\n\n    var coreComponents = [playListLoader, fragmentLoader, keyLoader, abrController, bufferController, capLevelController, fpsController, id3TrackController, fragmentTracker]; // optional audio track and subtitle controller\n\n    Controller = config.audioTrackController;\n\n    if (Controller) {\n      var audioTrackController = new Controller(hls_assertThisInitialized(_this));\n      /**\n       * @member {AudioTrackController} audioTrackController\n       */\n\n      _this.audioTrackController = audioTrackController;\n      coreComponents.push(audioTrackController);\n    }\n\n    Controller = config.subtitleTrackController;\n\n    if (Controller) {\n      var subtitleTrackController = new Controller(hls_assertThisInitialized(_this));\n      /**\n       * @member {SubtitleTrackController} subtitleTrackController\n       */\n\n      _this.subtitleTrackController = subtitleTrackController;\n      networkControllers.push(subtitleTrackController);\n    }\n\n    Controller = config.emeController;\n\n    if (Controller) {\n      var emeController = new Controller(hls_assertThisInitialized(_this));\n      /**\n       * @member {EMEController} emeController\n       */\n\n      _this.emeController = emeController;\n      coreComponents.push(emeController);\n    } // optional subtitle controllers\n\n\n    Controller = config.subtitleStreamController;\n\n    if (Controller) {\n      networkControllers.push(new Controller(hls_assertThisInitialized(_this), fragmentTracker));\n    }\n\n    Controller = config.timelineController;\n\n    if (Controller) {\n      coreComponents.push(new Controller(hls_assertThisInitialized(_this)));\n    }\n    /**\n     * @member {ICoreComponent[]}\n     */\n\n\n    _this.coreComponents = coreComponents;\n    return _this;\n  }\n  /**\n   * Dispose of the instance\n   */\n\n\n  var _proto = Hls.prototype;\n\n  _proto.destroy = function destroy() {\n    logger[\"logger\"].log('destroy');\n    this.trigger(events[\"default\"].DESTROYING);\n    this.detachMedia();\n    this.coreComponents.concat(this.networkControllers).forEach(function (component) {\n      component.destroy();\n    });\n    this.url = null;\n    this.removeAllListeners();\n    this._autoLevelCapping = -1;\n  }\n  /**\n   * Attach a media element\n   * @param {HTMLMediaElement} media\n   */\n  ;\n\n  _proto.attachMedia = function attachMedia(media) {\n    logger[\"logger\"].log('attachMedia');\n    this.media = media;\n    this.trigger(events[\"default\"].MEDIA_ATTACHING, {\n      media: media\n    });\n  }\n  /**\n   * Detach from the media\n   */\n  ;\n\n  _proto.detachMedia = function detachMedia() {\n    logger[\"logger\"].log('detachMedia');\n    this.trigger(events[\"default\"].MEDIA_DETACHING);\n    this.media = null;\n  }\n  /**\n   * Set the source URL. Can be relative or absolute.\n   * @param {string} url\n   */\n  ;\n\n  _proto.loadSource = function loadSource(url) {\n    url = url_toolkit[\"buildAbsoluteURL\"](window.location.href, url, {\n      alwaysNormalize: true\n    });\n    logger[\"logger\"].log(\"loadSource:\" + url);\n    this.url = url; // when attaching to a source URL, trigger a playlist load\n\n    this.trigger(events[\"default\"].MANIFEST_LOADING, {\n      url: url\n    });\n  }\n  /**\n   * Start loading data from the stream source.\n   * Depending on default config, client starts loading automatically when a source is set.\n   *\n   * @param {number} startPosition Set the start position to stream from\n   * @default -1 None (from earliest point)\n   */\n  ;\n\n  _proto.startLoad = function startLoad(startPosition) {\n    if (startPosition === void 0) {\n      startPosition = -1;\n    }\n\n    logger[\"logger\"].log(\"startLoad(\" + startPosition + \")\");\n    this.networkControllers.forEach(function (controller) {\n      controller.startLoad(startPosition);\n    });\n  }\n  /**\n   * Stop loading of any stream data.\n   */\n  ;\n\n  _proto.stopLoad = function stopLoad() {\n    logger[\"logger\"].log('stopLoad');\n    this.networkControllers.forEach(function (controller) {\n      controller.stopLoad();\n    });\n  }\n  /**\n   * Swap through possible audio codecs in the stream (for example to switch from stereo to 5.1)\n   */\n  ;\n\n  _proto.swapAudioCodec = function swapAudioCodec() {\n    logger[\"logger\"].log('swapAudioCodec');\n    this.streamController.swapAudioCodec();\n  }\n  /**\n   * When the media-element fails, this allows to detach and then re-attach it\n   * as one call (convenience method).\n   *\n   * Automatic recovery of media-errors by this process is configurable.\n   */\n  ;\n\n  _proto.recoverMediaError = function recoverMediaError() {\n    logger[\"logger\"].log('recoverMediaError');\n    var media = this.media;\n    this.detachMedia();\n\n    if (media) {\n      this.attachMedia(media);\n    }\n  }\n  /**\n   * Remove a loaded level from the list of levels, or a level url in from a list of redundant level urls.\n   * This can be used to remove a rendition or playlist url that errors frequently from the list of levels that a user\n   * or hls.js can choose from.\n   *\n   * @param levelIndex {number} The quality level index to of the level to remove\n   * @param urlId {number} The quality level url index in the case that fallback levels are available. Defaults to 0.\n   */\n  ;\n\n  _proto.removeLevel = function removeLevel(levelIndex, urlId) {\n    if (urlId === void 0) {\n      urlId = 0;\n    }\n\n    this.levelController.removeLevel(levelIndex, urlId);\n  }\n  /**\n   * @type {QualityLevel[]}\n   */\n  // todo(typescript-levelController)\n  ;\n\n  hls_createClass(Hls, [{\n    key: \"levels\",\n    get: function get() {\n      return this.levelController.levels;\n    }\n    /**\n     * Index of quality level currently played\n     * @type {number}\n     */\n\n  }, {\n    key: \"currentLevel\",\n    get: function get() {\n      return this.streamController.currentLevel;\n    }\n    /**\n     * Set quality level index immediately .\n     * This will flush the current buffer to replace the quality asap.\n     * That means playback will interrupt at least shortly to re-buffer and re-sync eventually.\n     * @param newLevel {number} -1 for automatic level selection\n     */\n    ,\n    set: function set(newLevel) {\n      logger[\"logger\"].log(\"set currentLevel:\" + newLevel);\n      this.loadLevel = newLevel;\n      this.streamController.immediateLevelSwitch();\n    }\n    /**\n     * Index of next quality level loaded as scheduled by stream controller.\n     * @type {number}\n     */\n\n  }, {\n    key: \"nextLevel\",\n    get: function get() {\n      return this.streamController.nextLevel;\n    }\n    /**\n     * Set quality level index for next loaded data.\n     * This will switch the video quality asap, without interrupting playback.\n     * May abort current loading of data, and flush parts of buffer (outside currently played fragment region).\n     * @type {number} -1 for automatic level selection\n     */\n    ,\n    set: function set(newLevel) {\n      logger[\"logger\"].log(\"set nextLevel:\" + newLevel);\n      this.levelController.manualLevel = newLevel;\n      this.streamController.nextLevelSwitch();\n    }\n    /**\n     * Return the quality level of the currently or last (of none is loaded currently) segment\n     * @type {number}\n     */\n\n  }, {\n    key: \"loadLevel\",\n    get: function get() {\n      return this.levelController.level;\n    }\n    /**\n     * Set quality level index for next loaded data in a conservative way.\n     * This will switch the quality without flushing, but interrupt current loading.\n     * Thus the moment when the quality switch will appear in effect will only be after the already existing buffer.\n     * @type {number} newLevel -1 for automatic level selection\n     */\n    ,\n    set: function set(newLevel) {\n      logger[\"logger\"].log(\"set loadLevel:\" + newLevel);\n      this.levelController.manualLevel = newLevel;\n    }\n    /**\n     * get next quality level loaded\n     * @type {number}\n     */\n\n  }, {\n    key: \"nextLoadLevel\",\n    get: function get() {\n      return this.levelController.nextLoadLevel;\n    }\n    /**\n     * Set quality level of next loaded segment in a fully \"non-destructive\" way.\n     * Same as `loadLevel` but will wait for next switch (until current loading is done).\n     * @type {number} level\n     */\n    ,\n    set: function set(level) {\n      this.levelController.nextLoadLevel = level;\n    }\n    /**\n     * Return \"first level\": like a default level, if not set,\n     * falls back to index of first level referenced in manifest\n     * @type {number}\n     */\n\n  }, {\n    key: \"firstLevel\",\n    get: function get() {\n      return Math.max(this.levelController.firstLevel, this.minAutoLevel);\n    }\n    /**\n     * Sets \"first-level\", see getter.\n     * @type {number}\n     */\n    ,\n    set: function set(newLevel) {\n      logger[\"logger\"].log(\"set firstLevel:\" + newLevel);\n      this.levelController.firstLevel = newLevel;\n    }\n    /**\n     * Return start level (level of first fragment that will be played back)\n     * if not overrided by user, first level appearing in manifest will be used as start level\n     * if -1 : automatic start level selection, playback will start from level matching download bandwidth\n     * (determined from download of first segment)\n     * @type {number}\n     */\n\n  }, {\n    key: \"startLevel\",\n    get: function get() {\n      return this.levelController.startLevel;\n    }\n    /**\n     * set  start level (level of first fragment that will be played back)\n     * if not overrided by user, first level appearing in manifest will be used as start level\n     * if -1 : automatic start level selection, playback will start from level matching download bandwidth\n     * (determined from download of first segment)\n     * @type {number} newLevel\n     */\n    ,\n    set: function set(newLevel) {\n      logger[\"logger\"].log(\"set startLevel:\" + newLevel); // if not in automatic start level detection, ensure startLevel is greater than minAutoLevel\n\n      if (newLevel !== -1) {\n        newLevel = Math.max(newLevel, this.minAutoLevel);\n      }\n\n      this.levelController.startLevel = newLevel;\n    }\n    /**\n     * set  dynamically set capLevelToPlayerSize against (`CapLevelController`)\n     *\n     * @type {boolean}\n     */\n\n  }, {\n    key: \"capLevelToPlayerSize\",\n    set: function set(shouldStartCapping) {\n      var newCapLevelToPlayerSize = !!shouldStartCapping;\n\n      if (newCapLevelToPlayerSize !== this.config.capLevelToPlayerSize) {\n        if (newCapLevelToPlayerSize) {\n          this.capLevelController.startCapping(); // If capping occurs, nextLevelSwitch will happen based on size.\n        } else {\n          this.capLevelController.stopCapping();\n          this.autoLevelCapping = -1;\n          this.streamController.nextLevelSwitch(); // Now we're uncapped, get the next level asap.\n        }\n\n        this.config.capLevelToPlayerSize = newCapLevelToPlayerSize;\n      }\n    }\n    /**\n     * Capping/max level value that should be used by automatic level selection algorithm (`ABRController`)\n     * @type {number}\n     */\n\n  }, {\n    key: \"autoLevelCapping\",\n    get: function get() {\n      return this._autoLevelCapping;\n    }\n    /**\n     * get bandwidth estimate\n     * @type {number}\n     */\n    ,\n\n    /**\n     * Capping/max level value that should be used by automatic level selection algorithm (`ABRController`)\n     * @type {number}\n     */\n    set: function set(newLevel) {\n      logger[\"logger\"].log(\"set autoLevelCapping:\" + newLevel);\n      this._autoLevelCapping = newLevel;\n    }\n    /**\n     * True when automatic level selection enabled\n     * @type {boolean}\n     */\n\n  }, {\n    key: \"bandwidthEstimate\",\n    get: function get() {\n      var bwEstimator = this.abrController._bwEstimator;\n      return bwEstimator ? bwEstimator.getEstimate() : NaN;\n    }\n  }, {\n    key: \"autoLevelEnabled\",\n    get: function get() {\n      return this.levelController.manualLevel === -1;\n    }\n    /**\n     * Level set manually (if any)\n     * @type {number}\n     */\n\n  }, {\n    key: \"manualLevel\",\n    get: function get() {\n      return this.levelController.manualLevel;\n    }\n    /**\n     * min level selectable in auto mode according to config.minAutoBitrate\n     * @type {number}\n     */\n\n  }, {\n    key: \"minAutoLevel\",\n    get: function get() {\n      var levels = this.levels,\n          minAutoBitrate = this.config.minAutoBitrate;\n      var len = levels ? levels.length : 0;\n\n      for (var i = 0; i < len; i++) {\n        var levelNextBitrate = levels[i].realBitrate ? Math.max(levels[i].realBitrate, levels[i].bitrate) : levels[i].bitrate;\n\n        if (levelNextBitrate > minAutoBitrate) {\n          return i;\n        }\n      }\n\n      return 0;\n    }\n    /**\n     * max level selectable in auto mode according to autoLevelCapping\n     * @type {number}\n     */\n\n  }, {\n    key: \"maxAutoLevel\",\n    get: function get() {\n      var levels = this.levels,\n          autoLevelCapping = this.autoLevelCapping;\n      var maxAutoLevel;\n\n      if (autoLevelCapping === -1 && levels && levels.length) {\n        maxAutoLevel = levels.length - 1;\n      } else {\n        maxAutoLevel = autoLevelCapping;\n      }\n\n      return maxAutoLevel;\n    }\n    /**\n     * next automatically selected quality level\n     * @type {number}\n     */\n\n  }, {\n    key: \"nextAutoLevel\",\n    get: function get() {\n      // ensure next auto level is between  min and max auto level\n      return Math.min(Math.max(this.abrController.nextAutoLevel, this.minAutoLevel), this.maxAutoLevel);\n    }\n    /**\n     * this setter is used to force next auto level.\n     * this is useful to force a switch down in auto mode:\n     * in case of load error on level N, hls.js can set nextAutoLevel to N-1 for example)\n     * forced value is valid for one fragment. upon succesful frag loading at forced level,\n     * this value will be resetted to -1 by ABR controller.\n     * @type {number}\n     */\n    ,\n    set: function set(nextLevel) {\n      this.abrController.nextAutoLevel = Math.max(this.minAutoLevel, nextLevel);\n    }\n    /**\n     * @type {AudioTrack[]}\n     */\n    // todo(typescript-audioTrackController)\n\n  }, {\n    key: \"audioTracks\",\n    get: function get() {\n      var audioTrackController = this.audioTrackController;\n      return audioTrackController ? audioTrackController.audioTracks : [];\n    }\n    /**\n     * index of the selected audio track (index in audio track lists)\n     * @type {number}\n     */\n\n  }, {\n    key: \"audioTrack\",\n    get: function get() {\n      var audioTrackController = this.audioTrackController;\n      return audioTrackController ? audioTrackController.audioTrack : -1;\n    }\n    /**\n     * selects an audio track, based on its index in audio track lists\n     * @type {number}\n     */\n    ,\n    set: function set(audioTrackId) {\n      var audioTrackController = this.audioTrackController;\n\n      if (audioTrackController) {\n        audioTrackController.audioTrack = audioTrackId;\n      }\n    }\n    /**\n     * @type {Seconds}\n     */\n\n  }, {\n    key: \"liveSyncPosition\",\n    get: function get() {\n      return this.streamController.liveSyncPosition;\n    }\n    /**\n     * get alternate subtitle tracks list from playlist\n     * @type {SubtitleTrack[]}\n     */\n    // todo(typescript-subtitleTrackController)\n\n  }, {\n    key: \"subtitleTracks\",\n    get: function get() {\n      var subtitleTrackController = this.subtitleTrackController;\n      return subtitleTrackController ? subtitleTrackController.subtitleTracks : [];\n    }\n    /**\n     * index of the selected subtitle track (index in subtitle track lists)\n     * @type {number}\n     */\n\n  }, {\n    key: \"subtitleTrack\",\n    get: function get() {\n      var subtitleTrackController = this.subtitleTrackController;\n      return subtitleTrackController ? subtitleTrackController.subtitleTrack : -1;\n    }\n    /**\n     * select an subtitle track, based on its index in subtitle track lists\n     * @type {number}\n     */\n    ,\n    set: function set(subtitleTrackId) {\n      var subtitleTrackController = this.subtitleTrackController;\n\n      if (subtitleTrackController) {\n        subtitleTrackController.subtitleTrack = subtitleTrackId;\n      }\n    }\n    /**\n     * @type {boolean}\n     */\n\n  }, {\n    key: \"subtitleDisplay\",\n    get: function get() {\n      var subtitleTrackController = this.subtitleTrackController;\n      return subtitleTrackController ? subtitleTrackController.subtitleDisplay : false;\n    }\n    /**\n     * Enable/disable subtitle display rendering\n     * @type {boolean}\n     */\n    ,\n    set: function set(value) {\n      var subtitleTrackController = this.subtitleTrackController;\n\n      if (subtitleTrackController) {\n        subtitleTrackController.subtitleDisplay = value;\n      }\n    }\n  }]);\n\n  return Hls;\n}(Observer);\n\nhls_Hls.defaultConfig = void 0;\n\n\n/***/ }),\n\n/***/ \"./src/polyfills/number.js\":\n/*!*********************************!*\\\n  !*** ./src/polyfills/number.js ***!\n  \\*********************************/\n/*! exports provided: isFiniteNumber, MAX_SAFE_INTEGER */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_709126__) {\n\n\"use strict\";\n__nested_webpack_require_709126__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_709126__.d(__webpack_exports__, \"isFiniteNumber\", function() { return isFiniteNumber; });\n/* harmony export (binding) */ __nested_webpack_require_709126__.d(__webpack_exports__, \"MAX_SAFE_INTEGER\", function() { return MAX_SAFE_INTEGER; });\nvar isFiniteNumber = Number.isFinite || function (value) {\n  return typeof value === 'number' && isFinite(value);\n};\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\n\n/***/ }),\n\n/***/ \"./src/utils/get-self-scope.js\":\n/*!*************************************!*\\\n  !*** ./src/utils/get-self-scope.js ***!\n  \\*************************************/\n/*! exports provided: getSelfScope */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_709923__) {\n\n\"use strict\";\n__nested_webpack_require_709923__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_709923__.d(__webpack_exports__, \"getSelfScope\", function() { return getSelfScope; });\nfunction getSelfScope() {\n  // see https://stackoverflow.com/a/11237259/589493\n  if (typeof window === 'undefined') {\n    /* eslint-disable-next-line no-undef */\n    return self;\n  } else {\n    return window;\n  }\n}\n\n/***/ }),\n\n/***/ \"./src/utils/logger.js\":\n/*!*****************************!*\\\n  !*** ./src/utils/logger.js ***!\n  \\*****************************/\n/*! exports provided: enableLogs, logger */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_710584__) {\n\n\"use strict\";\n__nested_webpack_require_710584__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_710584__.d(__webpack_exports__, \"enableLogs\", function() { return enableLogs; });\n/* harmony export (binding) */ __nested_webpack_require_710584__.d(__webpack_exports__, \"logger\", function() { return logger; });\n/* harmony import */ var _get_self_scope__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_710584__(/*! ./get-self-scope */ \"./src/utils/get-self-scope.js\");\n\n\nfunction noop() {}\n\nvar fakeLogger = {\n  trace: noop,\n  debug: noop,\n  log: noop,\n  warn: noop,\n  info: noop,\n  error: noop\n};\nvar exportedLogger = fakeLogger; // let lastCallTime;\n// function formatMsgWithTimeInfo(type, msg) {\n//   const now = Date.now();\n//   const diff = lastCallTime ? '+' + (now - lastCallTime) : '0';\n//   lastCallTime = now;\n//   msg = (new Date(now)).toISOString() + ' | [' +  type + '] > ' + msg + ' ( ' + diff + ' ms )';\n//   return msg;\n// }\n\nfunction formatMsg(type, msg) {\n  msg = '[' + type + '] > ' + msg;\n  return msg;\n}\n\nvar global = Object(_get_self_scope__WEBPACK_IMPORTED_MODULE_0__[\"getSelfScope\"])();\n\nfunction consolePrintFn(type) {\n  var func = global.console[type];\n\n  if (func) {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (args[0]) {\n        args[0] = formatMsg(type, args[0]);\n      }\n\n      func.apply(global.console, args);\n    };\n  }\n\n  return noop;\n}\n\nfunction exportLoggerFunctions(debugConfig) {\n  for (var _len2 = arguments.length, functions = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    functions[_key2 - 1] = arguments[_key2];\n  }\n\n  functions.forEach(function (type) {\n    exportedLogger[type] = debugConfig[type] ? debugConfig[type].bind(debugConfig) : consolePrintFn(type);\n  });\n}\n\nvar enableLogs = function enableLogs(debugConfig) {\n  // check that console is available\n  if (global.console && debugConfig === true || typeof debugConfig === 'object') {\n    exportLoggerFunctions(debugConfig, // Remove out from list here to hard-disable a log-level\n    // 'trace',\n    'debug', 'log', 'info', 'warn', 'error'); // Some browsers don't allow to use bind on console object anyway\n    // fallback to default if needed\n\n    try {\n      exportedLogger.log();\n    } catch (e) {\n      exportedLogger = fakeLogger;\n    }\n  } else {\n    exportedLogger = fakeLogger;\n  }\n};\nvar logger = exportedLogger;\n\n/***/ })\n\n/******/ })[\"default\"];\n});\n//# sourceMappingURL=hls.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0E7QUFDQTtBQUNBLFdBQVcsaUJBQWlCO0FBQzVCLGFBQWEsY0FBYztBQUMzQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLElBQUk7QUFDUjtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsOEVBQThFLFFBQVE7QUFDdEY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FB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LElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEIscUNBQXFDO0FBQ2pFO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsNkJBQTZCLHNDQUFzQztBQUNuRTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGNBQWMsUUFBUTtBQUN0QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQ7O0FBRTlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1REFBdUQ7QUFDdkQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0RBQWtEOzs7QUFHbEQscUNBQXFDOztBQUVyQyw2QkFBNkIsYUFBYTtBQUMxQztBQUNBLDBDQUEwQzs7QUFFMUM7QUFDQSw2Q0FBNkM7O0FBRTdDO0FBQ0EsZ0RBQWdEOztBQUVoRDtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtKQUFrSjtBQUNsSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1DQUFtQzs7QUFFbkM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsTUFBTTs7O0FBR047QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTs7QUFFQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsUUFBUTs7O0FBR1I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdFQUFnRTtBQUNoRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0M7QUFDL0M7O0FBRUEsNkVBQTZFOztBQUU3RTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRO0FBQ1I7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCOztBQUU1QjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07OztBQUdOO0FBQ0E7O0FBRUE7QUFDQSx5Q0FBeUM7QUFDekM7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBLDJCQUEyQjs7QUFFM0I7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHlDQUF5Qzs7QUFFekM7O0FBRUEsNkNBQTZDLGFBQWE7QUFDMUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7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Q0EsU0FBUztBQUNUO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDs7QUFFQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7O0FBRTlCLDJEQUEyRDs7QUFFM0QsdURBQXVEOztBQUV2RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCOztBQUVoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qjs7QUFFekIsMEJBQTBCLFNBQVM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLE9BQU87QUFDeEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUEsZ0JBQWdCLG9CQUFvQjtBQUNwQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7O0FBRWIsZ0JBQWdCLHNCQUFzQjtBQUN0QztBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7O0FBRTVCO0FBQ0EsTUFBTTs7O0FBR04sZ0JBQWdCLHNCQUFzQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEVBQTRFLHVCQUF1QjtBQUNuRzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixRQUFRO0FBQzNCLGNBQWMsWUFBWTtBQUMxQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnQkFBZ0IsU0FBUztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDRDQUE0Qzs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNHQUFzRzs7QUFFdEc7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWTs7O0FBR1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07OztBQUdOO0FBQ0E7QUFDQSxNQUFNOzs7QUFH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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLGVBQWUsWUFBWSxHQUFHO0FBQzlCO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsZUFBZTtBQUNmLGVBQWU7QUFDZjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixlQUFlLFlBQVksR0FBRztBQUM5QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7OztBQUdSO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0EsNkZBQTZGOztBQUU3RjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOzs7QUFHRDtBQUNBLGdEQUFnRDs7QUFFaEQsK0RBQStEO0FBQy9EOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQkFBc0IsNEJBQTRCO0FBQ2xEO0FBQ0E7O0FBRUE7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7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QUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQSw4SEFBOEg7O0FBRTlIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7O0FBRTlDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQ0FBcUM7QUFDckM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLE1BQU07OztBQUdOO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLE1BQU07OztBQUdOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxHQUFHO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFOztBQUVoRTtBQUNBO0FBQ0E7QUFDQSxzSEFBc0g7QUFDdEg7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNOzs7QUFHTix1Q0FBdUM7QUFDdkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxNQUFNOzs7QUFHTjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDJGQUEyRjs7QUFFM0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7O0FBR047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7Ozs7QUFJQSwrREFBK0QsMERBQTBELDJDQUEyQzs7QUFFcEs7QUFDQTtBQUNBOzs7Ozs7QUFNQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDOztBQUV4QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw2QkFBNkI7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0EsMERBQTBELDBEQUEwRCwyQ0FBMkM7O0FBRS9KO0FBQ0E7QUFDQTs7Ozs7O0FBTUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOzs7QUFHTjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0RUFBNEU7O0FBRTVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7OztBQUdBLGdFQUFnRSwwREFBMEQsMkNBQTJDOzs7O0FBSXJLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxXQUFXO0FBQ3hCLGVBQWU7QUFDZjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxZQUFZO0FBQ3pCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxzQkFBc0IsMEJBQTBCO0FBQ2hEOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0Q7QUFDL0Q7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixzQkFBc0I7QUFDMUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixlQUFlLFFBQVE7QUFDdkI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsb0JBQW9CLHNCQUFzQjtBQUMxQztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJCQUEyQjtBQUMzQjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsZUFBZTtBQUNmO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFVBQVU7QUFDdkIsYUFBYSwyQkFBMkI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxVQUFVO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxZQUFZO0FBQ3pCLGFBQWEsUUFBUTtBQUNyQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0IscUJBQXFCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLGVBQWU7QUFDckI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixzQkFBc0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQSxNQUFNLGVBQWU7QUFDckI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixxQkFBcUI7QUFDM0M7O0FBRUE7QUFDQSxvREFBb0Q7O0FBRXBEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUEsdUJBQXVCOztBQUV2Qix5QkFBeUI7O0FBRXpCO0FBQ0E7O0FBRUEscUJBQXFCLHVCQUF1QjtBQUM1QztBQUNBLG1DQUFtQzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7QUFDRDtBQUNBLG9CQUFvQixpQ0FBbUI7O0FBRXZDO0FBQ0EseUJBQXlCLGlDQUFtQjs7QUFFNUM7QUFDQSxxQkFBcUIsaUNBQW1COztBQUV4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGlDQUFtQjs7QUFFeEM7QUFDQSx3REFBd0QsMERBQTBELDJDQUEyQzs7O0FBRzdKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyRkFBMkYsYUFBYTtBQUN4RztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDO0FBQ0Q7Ozs7Ozs7Ozs7QUFVQTs7QUFFQSx1REFBdUQ7O0FBRXZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOzs7QUFHUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJEO0FBQzNELE9BQU87QUFDUDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLE1BQU07QUFDTjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtB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QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRCQUE0Qjs7QUFFNUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7OztBQUdBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLG1DQUFtQztBQUNuQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOzs7QUFHTjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsT0FBTztBQUNQLE1BQU07OztBQUdOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTs7O0FBR047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0EsbUVBQW1FO0FBQ25FOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTs7O0FBR047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNOzs7QUFHTjtBQUNBO0FBQ0EsTUFBTTs7O0FBR047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9COztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFVBQVU7OztBQUdWO0FBQ0E7O0FBRUEsNERBQTREOzs7QUFHNUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0Q7O0FBRXREO0FBQ0E7QUFDQSxRQUFROzs7QUFHUjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFF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QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7O0FBRXJDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw2QkFBNkI7QUFDN0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7O0FBR04sNkJBQTZCOztBQUU3QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FB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QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxzRUFBc0U7O0FBRXRFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVFQUF1RTs7QUFFdkU7QUFDQTtBQUNBLG9FQUFvRTs7QUFFcEUsa0RBQWtEOztBQUVsRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1RUFBdUU7QUFDdkU7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7O0FBRS9CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFD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O0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDViwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDZDQUE2Qzs7QUFFN0M7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7O0FBRTlCO0FBQ0E7QUFDQSxNQUFNOzs7QUFHTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUNBQWlDOztBQUVqQztBQUNBO0FBQ0E7O0FB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QUFDQTtBQUNBLGlFQUFpRTtBQUNqRSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLHFCQUFxQjtBQUN6QztBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFNBQVM7QUFDeEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25COztBQUVBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUEsb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFNBQVM7QUFDeEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQix1Q0FBdUM7QUFDM0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0JBQW9CLDBCQUEwQjtBQUM5Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7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QUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxzQkFBc0I7O0FBRXRCO0FBQ0EsK0JBQStCOztBQUUvQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0Esc0JBQXNCLHVCQUF1QjtBQUM3QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLDRCQUE0Qix3QkFBd0I7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjOzs7QUFHZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0EsU0FBUztBQUNULFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdCQUF3Qjs7QUFFeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFB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Q0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsc0JBQXNCO0FBQ3JDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGVBQWUsR0FBRztBQUNsQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGFBQWEsaUJBQWlCO0FBQzlCLGFBQWEsYUFBYTtBQUMxQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsTUFBTTs7O0FBR047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1As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Q0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsUUFBUTtBQUNoQyxtQkFBbUIsUUFBUTtBQUMzQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsUUFBUTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsMERBQTBEOztBQUUxRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQsVUFBVTtBQUNWO0FBQ0E7QUFDQSxtREFBbUQ7QUFDbkQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQkFBc0IsU0FBUztBQUMvQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxpQ0FBbUI7O0FBRWhFO0FBQ0EsaUNBQW1CO0FBQ25CLCtCQUErQixpQ0FBbUIsdURBQXVELHdCQUF3QjtBQUNqSSwrQkFBK0IsaUNBQW1CLHlEQUF5RCwwQkFBMEI7QUFDckk7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLGlDQUFtQjs7QUFFaEU7QUFDQSxpQ0FBbUI7QUFDbkIsK0JBQStCLGlDQUFtQixxREFBcUQsc0JBQXNCO0FBQzdIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxpQ0FBbUI7O0FBRWhFO0FBQ0EsaUNBQW1CO0FBQ25CLCtCQUErQixpQ0FBbUIsbURBQW1ELG9CQUFvQjtBQUN6SCwrQkFBK0IsaUNBQW1CLCtDQUErQyxnQkFBZ0I7QUFDakgsd0VBQXdFLGlDQUFtQjs7O0FBRzNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMEVBQTBFLGFBQWE7QUFDdkY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxrR0FBa0csZUFBZTtBQUNqSDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QztBQUM5Qzs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBTzs7QUFFUCxVQUFVO0FBQ1YsQ0FBQztBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9ub2RlX21vZHVsZXMvaGxzLmpzL2Rpc3QvaGxzLmpzPzYxZjkiXSwic291cmNlc0NvbnRlbnQiOlsidHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiSGxzXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIkhsc1wiXSA9IGZhY3RvcnkoKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4vKioqKioqLyBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuLyoqKioqKi8gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4vKioqKioqLyBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuLyoqKioqKi8gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4vKioqKioqLyBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4vKioqKioqLyBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbi8qKioqKiovIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuLyoqKioqKi8gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbi8qKioqKiovIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4vKioqKioqLyBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuLyoqKioqKi8gXHRcdHJldHVybiBucztcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvZGlzdC9cIjtcbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL3NyYy9obHMudHNcIik7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovICh7XG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvZXZlbnRlbWl0dGVyMy9pbmRleC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2V2ZW50ZW1pdHRlcjMvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyohIE1vZHVsZUNvbmNhdGVuYXRpb24gYmFpbG91dDogTW9kdWxlIGlzIG5vdCBhbiBFQ01BU2NyaXB0IG1vZHVsZSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eVxuICAsIHByZWZpeCA9ICd+JztcblxuLyoqXG4gKiBDb25zdHJ1Y3RvciB0byBjcmVhdGUgYSBzdG9yYWdlIGZvciBvdXIgYEVFYCBvYmplY3RzLlxuICogQW4gYEV2ZW50c2AgaW5zdGFuY2UgaXMgYSBwbGFpbiBvYmplY3Qgd2hvc2UgcHJvcGVydGllcyBhcmUgZXZlbnQgbmFtZXMuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBFdmVudHMoKSB7fVxuXG4vL1xuLy8gV2UgdHJ5IHRvIG5vdCBpbmhlcml0IGZyb20gYE9iamVjdC5wcm90b3R5cGVgLiBJbiBzb21lIGVuZ2luZXMgY3JlYXRpbmcgYW5cbi8vIGluc3RhbmNlIGluIHRoaXMgd2F5IGlzIGZhc3RlciB0aGFuIGNhbGxpbmcgYE9iamVjdC5jcmVhdGUobnVsbClgIGRpcmVjdGx5LlxuLy8gSWYgYE9iamVjdC5jcmVhdGUobnVsbClgIGlzIG5vdCBzdXBwb3J0ZWQgd2UgcHJlZml4IHRoZSBldmVudCBuYW1lcyB3aXRoIGFcbi8vIGNoYXJhY3RlciB0byBtYWtlIHN1cmUgdGhhdCB0aGUgYnVpbHQtaW4gb2JqZWN0IHByb3BlcnRpZXMgYXJlIG5vdFxuLy8gb3ZlcnJpZGRlbiBvciB1c2VkIGFzIGFuIGF0dGFjayB2ZWN0b3IuXG4vL1xuaWYgKE9iamVjdC5jcmVhdGUpIHtcbiAgRXZlbnRzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgLy9cbiAgLy8gVGhpcyBoYWNrIGlzIG5lZWRlZCBiZWNhdXNlIHRoZSBgX19wcm90b19fYCBwcm9wZXJ0eSBpcyBzdGlsbCBpbmhlcml0ZWQgaW5cbiAgLy8gc29tZSBvbGQgYnJvd3NlcnMgbGlrZSBBbmRyb2lkIDQsIGlQaG9uZSA1LjEsIE9wZXJhIDExIGFuZCBTYWZhcmkgNS5cbiAgLy9cbiAgaWYgKCFuZXcgRXZlbnRzKCkuX19wcm90b19fKSBwcmVmaXggPSBmYWxzZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRhdGlvbiBvZiBhIHNpbmdsZSBldmVudCBsaXN0ZW5lci5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHBhcmFtIHtCb29sZWFufSBbb25jZT1mYWxzZV0gU3BlY2lmeSBpZiB0aGUgbGlzdGVuZXIgaXMgYSBvbmUtdGltZSBsaXN0ZW5lci5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gRUUoZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgdGhpcy5mbiA9IGZuO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLm9uY2UgPSBvbmNlIHx8IGZhbHNlO1xufVxuXG4vKipcbiAqIEFkZCBhIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7RXZlbnRFbWl0dGVyfSBlbWl0dGVyIFJlZmVyZW5jZSB0byB0aGUgYEV2ZW50RW1pdHRlcmAgaW5zdGFuY2UuXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHBhcmFtIHtCb29sZWFufSBvbmNlIFNwZWNpZnkgaWYgdGhlIGxpc3RlbmVyIGlzIGEgb25lLXRpbWUgbGlzdGVuZXIuXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gYWRkTGlzdGVuZXIoZW1pdHRlciwgZXZlbnQsIGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXIgPSBuZXcgRUUoZm4sIGNvbnRleHQgfHwgZW1pdHRlciwgb25jZSlcbiAgICAsIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCFlbWl0dGVyLl9ldmVudHNbZXZ0XSkgZW1pdHRlci5fZXZlbnRzW2V2dF0gPSBsaXN0ZW5lciwgZW1pdHRlci5fZXZlbnRzQ291bnQrKztcbiAgZWxzZSBpZiAoIWVtaXR0ZXIuX2V2ZW50c1tldnRdLmZuKSBlbWl0dGVyLl9ldmVudHNbZXZ0XS5wdXNoKGxpc3RlbmVyKTtcbiAgZWxzZSBlbWl0dGVyLl9ldmVudHNbZXZ0XSA9IFtlbWl0dGVyLl9ldmVudHNbZXZ0XSwgbGlzdGVuZXJdO1xuXG4gIHJldHVybiBlbWl0dGVyO1xufVxuXG4vKipcbiAqIENsZWFyIGV2ZW50IGJ5IG5hbWUuXG4gKlxuICogQHBhcmFtIHtFdmVudEVtaXR0ZXJ9IGVtaXR0ZXIgUmVmZXJlbmNlIHRvIHRoZSBgRXZlbnRFbWl0dGVyYCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldnQgVGhlIEV2ZW50IG5hbWUuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjbGVhckV2ZW50KGVtaXR0ZXIsIGV2dCkge1xuICBpZiAoLS1lbWl0dGVyLl9ldmVudHNDb3VudCA9PT0gMCkgZW1pdHRlci5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICBlbHNlIGRlbGV0ZSBlbWl0dGVyLl9ldmVudHNbZXZ0XTtcbn1cblxuLyoqXG4gKiBNaW5pbWFsIGBFdmVudEVtaXR0ZXJgIGludGVyZmFjZSB0aGF0IGlzIG1vbGRlZCBhZ2FpbnN0IHRoZSBOb2RlLmpzXG4gKiBgRXZlbnRFbWl0dGVyYCBpbnRlcmZhY2UuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG59XG5cbi8qKlxuICogUmV0dXJuIGFuIGFycmF5IGxpc3RpbmcgdGhlIGV2ZW50cyBmb3Igd2hpY2ggdGhlIGVtaXR0ZXIgaGFzIHJlZ2lzdGVyZWRcbiAqIGxpc3RlbmVycy5cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZXZlbnROYW1lcyA9IGZ1bmN0aW9uIGV2ZW50TmFtZXMoKSB7XG4gIHZhciBuYW1lcyA9IFtdXG4gICAgLCBldmVudHNcbiAgICAsIG5hbWU7XG5cbiAgaWYgKHRoaXMuX2V2ZW50c0NvdW50ID09PSAwKSByZXR1cm4gbmFtZXM7XG5cbiAgZm9yIChuYW1lIGluIChldmVudHMgPSB0aGlzLl9ldmVudHMpKSB7XG4gICAgaWYgKGhhcy5jYWxsKGV2ZW50cywgbmFtZSkpIG5hbWVzLnB1c2gocHJlZml4ID8gbmFtZS5zbGljZSgxKSA6IG5hbWUpO1xuICB9XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICByZXR1cm4gbmFtZXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZXZlbnRzKSk7XG4gIH1cblxuICByZXR1cm4gbmFtZXM7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgbGlzdGVuZXJzIHJlZ2lzdGVyZWQgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge0FycmF5fSBUaGUgcmVnaXN0ZXJlZCBsaXN0ZW5lcnMuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKGV2ZW50KSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50XG4gICAgLCBoYW5kbGVycyA9IHRoaXMuX2V2ZW50c1tldnRdO1xuXG4gIGlmICghaGFuZGxlcnMpIHJldHVybiBbXTtcbiAgaWYgKGhhbmRsZXJzLmZuKSByZXR1cm4gW2hhbmRsZXJzLmZuXTtcblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGhhbmRsZXJzLmxlbmd0aCwgZWUgPSBuZXcgQXJyYXkobCk7IGkgPCBsOyBpKyspIHtcbiAgICBlZVtpXSA9IGhhbmRsZXJzW2ldLmZuO1xuICB9XG5cbiAgcmV0dXJuIGVlO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIG51bWJlciBvZiBsaXN0ZW5lcnMgbGlzdGVuaW5nIHRvIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge051bWJlcn0gVGhlIG51bWJlciBvZiBsaXN0ZW5lcnMuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uIGxpc3RlbmVyQ291bnQoZXZlbnQpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnRcbiAgICAsIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdO1xuXG4gIGlmICghbGlzdGVuZXJzKSByZXR1cm4gMDtcbiAgaWYgKGxpc3RlbmVycy5mbikgcmV0dXJuIDE7XG4gIHJldHVybiBsaXN0ZW5lcnMubGVuZ3RoO1xufTtcblxuLyoqXG4gKiBDYWxscyBlYWNoIG9mIHRoZSBsaXN0ZW5lcnMgcmVnaXN0ZXJlZCBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBldmVudCBoYWQgbGlzdGVuZXJzLCBlbHNlIGBmYWxzZWAuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQoZXZlbnQsIGExLCBhMiwgYTMsIGE0LCBhNSkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1tldnRdKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdXG4gICAgLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgLCBhcmdzXG4gICAgLCBpO1xuXG4gIGlmIChsaXN0ZW5lcnMuZm4pIHtcbiAgICBpZiAobGlzdGVuZXJzLm9uY2UpIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVycy5mbiwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICBjYXNlIDE6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCksIHRydWU7XG4gICAgICBjYXNlIDI6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEpLCB0cnVlO1xuICAgICAgY2FzZSAzOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiksIHRydWU7XG4gICAgICBjYXNlIDQ6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMyksIHRydWU7XG4gICAgICBjYXNlIDU6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMywgYTQpLCB0cnVlO1xuICAgICAgY2FzZSA2OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMsIGE0LCBhNSksIHRydWU7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mbi5hcHBseShsaXN0ZW5lcnMuY29udGV4dCwgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGhcbiAgICAgICwgajtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGxpc3RlbmVyc1tpXS5vbmNlKSB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcnNbaV0uZm4sIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbiAgICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICAgIGNhc2UgMTogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQpOyBicmVhaztcbiAgICAgICAgY2FzZSAyOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEpOyBicmVhaztcbiAgICAgICAgY2FzZSAzOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEsIGEyKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgNDogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExLCBhMiwgYTMpOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAoIWFyZ3MpIGZvciAoaiA9IDEsIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0xKTsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgICBhcmdzW2ogLSAxXSA9IGFyZ3VtZW50c1tqXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsaXN0ZW5lcnNbaV0uZm4uYXBwbHkobGlzdGVuZXJzW2ldLmNvbnRleHQsIGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBBZGQgYSBsaXN0ZW5lciBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IFtjb250ZXh0PXRoaXNdIFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIG9uKGV2ZW50LCBmbiwgY29udGV4dCkge1xuICByZXR1cm4gYWRkTGlzdGVuZXIodGhpcywgZXZlbnQsIGZuLCBjb250ZXh0LCBmYWxzZSk7XG59O1xuXG4vKipcbiAqIEFkZCBhIG9uZS10aW1lIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gW2NvbnRleHQ9dGhpc10gVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKGV2ZW50LCBmbiwgY29udGV4dCkge1xuICByZXR1cm4gYWRkTGlzdGVuZXIodGhpcywgZXZlbnQsIGZuLCBjb250ZXh0LCB0cnVlKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBsaXN0ZW5lcnMgb2YgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBPbmx5IHJlbW92ZSB0aGUgbGlzdGVuZXJzIHRoYXQgbWF0Y2ggdGhpcyBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBPbmx5IHJlbW92ZSB0aGUgbGlzdGVuZXJzIHRoYXQgaGF2ZSB0aGlzIGNvbnRleHQuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9uY2UgT25seSByZW1vdmUgb25lLXRpbWUgbGlzdGVuZXJzLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW2V2dF0pIHJldHVybiB0aGlzO1xuICBpZiAoIWZuKSB7XG4gICAgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdO1xuXG4gIGlmIChsaXN0ZW5lcnMuZm4pIHtcbiAgICBpZiAoXG4gICAgICBsaXN0ZW5lcnMuZm4gPT09IGZuICYmXG4gICAgICAoIW9uY2UgfHwgbGlzdGVuZXJzLm9uY2UpICYmXG4gICAgICAoIWNvbnRleHQgfHwgbGlzdGVuZXJzLmNvbnRleHQgPT09IGNvbnRleHQpXG4gICAgKSB7XG4gICAgICBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGkgPSAwLCBldmVudHMgPSBbXSwgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGxpc3RlbmVyc1tpXS5mbiAhPT0gZm4gfHxcbiAgICAgICAgKG9uY2UgJiYgIWxpc3RlbmVyc1tpXS5vbmNlKSB8fFxuICAgICAgICAoY29udGV4dCAmJiBsaXN0ZW5lcnNbaV0uY29udGV4dCAhPT0gY29udGV4dClcbiAgICAgICkge1xuICAgICAgICBldmVudHMucHVzaChsaXN0ZW5lcnNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vXG4gICAgLy8gUmVzZXQgdGhlIGFycmF5LCBvciByZW1vdmUgaXQgY29tcGxldGVseSBpZiB3ZSBoYXZlIG5vIG1vcmUgbGlzdGVuZXJzLlxuICAgIC8vXG4gICAgaWYgKGV2ZW50cy5sZW5ndGgpIHRoaXMuX2V2ZW50c1tldnRdID0gZXZlbnRzLmxlbmd0aCA9PT0gMSA/IGV2ZW50c1swXSA6IGV2ZW50cztcbiAgICBlbHNlIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYWxsIGxpc3RlbmVycywgb3IgdGhvc2Ugb2YgdGhlIHNwZWNpZmllZCBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gW2V2ZW50XSBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnQpIHtcbiAgdmFyIGV2dDtcblxuICBpZiAoZXZlbnQpIHtcbiAgICBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuICAgIGlmICh0aGlzLl9ldmVudHNbZXZ0XSkgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vXG4vLyBBbGlhcyBtZXRob2RzIG5hbWVzIGJlY2F1c2UgcGVvcGxlIHJvbGwgbGlrZSB0aGF0LlxuLy9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBwcmVmaXguXG4vL1xuRXZlbnRFbWl0dGVyLnByZWZpeGVkID0gcHJlZml4O1xuXG4vL1xuLy8gQWxsb3cgYEV2ZW50RW1pdHRlcmAgdG8gYmUgaW1wb3J0ZWQgYXMgbW9kdWxlIG5hbWVzcGFjZS5cbi8vXG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBtb2R1bGUuXG4vL1xuaWYgKHRydWUpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvdXJsLXRvb2xraXQvc3JjL3VybC10b29sa2l0LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy91cmwtdG9vbGtpdC9zcmMvdXJsLXRvb2xraXQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKiEgTW9kdWxlQ29uY2F0ZW5hdGlvbiBiYWlsb3V0OiBNb2R1bGUgaXMgbm90IGFuIEVDTUFTY3JpcHQgbW9kdWxlICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIHNlZSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMTgwOFxuXG4oZnVuY3Rpb24gKHJvb3QpIHtcbiAgdmFyIFVSTF9SRUdFWCA9IC9eKCg/OlthLXpBLVowLTkrXFwtLl0rOik/KShcXC9cXC9bXlxcLz8jXSopPygoPzpbXlxcLz8jXSpcXC8pKlteOz8jXSopPyg7W14/I10qKT8oXFw/W14jXSopPygjLiopPyQvO1xuICB2YXIgRklSU1RfU0VHTUVOVF9SRUdFWCA9IC9eKFteXFwvPyNdKikoLiopJC87XG4gIHZhciBTTEFTSF9ET1RfUkVHRVggPSAvKD86XFwvfF4pXFwuKD89XFwvKS9nO1xuICB2YXIgU0xBU0hfRE9UX0RPVF9SRUdFWCA9IC8oPzpcXC98XilcXC5cXC5cXC8oPyFcXC5cXC5cXC8pW15cXC9dKig/PVxcLykvZztcblxuICB2YXIgVVJMVG9vbGtpdCA9IHtcbiAgICAvLyBJZiBvcHRzLmFsd2F5c05vcm1hbGl6ZSBpcyB0cnVlIHRoZW4gdGhlIHBhdGggd2lsbCBhbHdheXMgYmUgbm9ybWFsaXplZCBldmVuIHdoZW4gaXQgc3RhcnRzIHdpdGggLyBvciAvL1xuICAgIC8vIEUuZ1xuICAgIC8vIFdpdGggb3B0cy5hbHdheXNOb3JtYWxpemUgPSBmYWxzZSAoZGVmYXVsdCwgc3BlYyBjb21wbGlhbnQpXG4gICAgLy8gaHR0cDovL2EuY29tL2IvY2QgKyAvZS9mLy4uL2cgPT4gaHR0cDovL2EuY29tL2UvZi8uLi9nXG4gICAgLy8gV2l0aCBvcHRzLmFsd2F5c05vcm1hbGl6ZSA9IHRydWUgKG5vdCBzcGVjIGNvbXBsaWFudClcbiAgICAvLyBodHRwOi8vYS5jb20vYi9jZCArIC9lL2YvLi4vZyA9PiBodHRwOi8vYS5jb20vZS9nXG4gICAgYnVpbGRBYnNvbHV0ZVVSTDogZnVuY3Rpb24gKGJhc2VVUkwsIHJlbGF0aXZlVVJMLCBvcHRzKSB7XG4gICAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICAgIC8vIHJlbW92ZSBhbnkgcmVtYWluaW5nIHNwYWNlIGFuZCBDUkxGXG4gICAgICBiYXNlVVJMID0gYmFzZVVSTC50cmltKCk7XG4gICAgICByZWxhdGl2ZVVSTCA9IHJlbGF0aXZlVVJMLnRyaW0oKTtcbiAgICAgIGlmICghcmVsYXRpdmVVUkwpIHtcbiAgICAgICAgLy8gMmEpIElmIHRoZSBlbWJlZGRlZCBVUkwgaXMgZW50aXJlbHkgZW1wdHksIGl0IGluaGVyaXRzIHRoZVxuICAgICAgICAvLyBlbnRpcmUgYmFzZSBVUkwgKGkuZS4sIGlzIHNldCBlcXVhbCB0byB0aGUgYmFzZSBVUkwpXG4gICAgICAgIC8vIGFuZCB3ZSBhcmUgZG9uZS5cbiAgICAgICAgaWYgKCFvcHRzLmFsd2F5c05vcm1hbGl6ZSkge1xuICAgICAgICAgIHJldHVybiBiYXNlVVJMO1xuICAgICAgICB9XG4gICAgICAgIHZhciBiYXNlUGFydHNGb3JOb3JtYWxpc2UgPSBVUkxUb29sa2l0LnBhcnNlVVJMKGJhc2VVUkwpO1xuICAgICAgICBpZiAoIWJhc2VQYXJ0c0Zvck5vcm1hbGlzZSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgdHJ5aW5nIHRvIHBhcnNlIGJhc2UgVVJMLicpO1xuICAgICAgICB9XG4gICAgICAgIGJhc2VQYXJ0c0Zvck5vcm1hbGlzZS5wYXRoID0gVVJMVG9vbGtpdC5ub3JtYWxpemVQYXRoKFxuICAgICAgICAgIGJhc2VQYXJ0c0Zvck5vcm1hbGlzZS5wYXRoXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBVUkxUb29sa2l0LmJ1aWxkVVJMRnJvbVBhcnRzKGJhc2VQYXJ0c0Zvck5vcm1hbGlzZSk7XG4gICAgICB9XG4gICAgICB2YXIgcmVsYXRpdmVQYXJ0cyA9IFVSTFRvb2xraXQucGFyc2VVUkwocmVsYXRpdmVVUkwpO1xuICAgICAgaWYgKCFyZWxhdGl2ZVBhcnRzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgdHJ5aW5nIHRvIHBhcnNlIHJlbGF0aXZlIFVSTC4nKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZWxhdGl2ZVBhcnRzLnNjaGVtZSkge1xuICAgICAgICAvLyAyYikgSWYgdGhlIGVtYmVkZGVkIFVSTCBzdGFydHMgd2l0aCBhIHNjaGVtZSBuYW1lLCBpdCBpc1xuICAgICAgICAvLyBpbnRlcnByZXRlZCBhcyBhbiBhYnNvbHV0ZSBVUkwgYW5kIHdlIGFyZSBkb25lLlxuICAgICAgICBpZiAoIW9wdHMuYWx3YXlzTm9ybWFsaXplKSB7XG4gICAgICAgICAgcmV0dXJuIHJlbGF0aXZlVVJMO1xuICAgICAgICB9XG4gICAgICAgIHJlbGF0aXZlUGFydHMucGF0aCA9IFVSTFRvb2xraXQubm9ybWFsaXplUGF0aChyZWxhdGl2ZVBhcnRzLnBhdGgpO1xuICAgICAgICByZXR1cm4gVVJMVG9vbGtpdC5idWlsZFVSTEZyb21QYXJ0cyhyZWxhdGl2ZVBhcnRzKTtcbiAgICAgIH1cbiAgICAgIHZhciBiYXNlUGFydHMgPSBVUkxUb29sa2l0LnBhcnNlVVJMKGJhc2VVUkwpO1xuICAgICAgaWYgKCFiYXNlUGFydHMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciB0cnlpbmcgdG8gcGFyc2UgYmFzZSBVUkwuJyk7XG4gICAgICB9XG4gICAgICBpZiAoIWJhc2VQYXJ0cy5uZXRMb2MgJiYgYmFzZVBhcnRzLnBhdGggJiYgYmFzZVBhcnRzLnBhdGhbMF0gIT09ICcvJykge1xuICAgICAgICAvLyBJZiBuZXRMb2MgbWlzc2luZyBhbmQgcGF0aCBkb2Vzbid0IHN0YXJ0IHdpdGggJy8nLCBhc3N1bWUgZXZlcnRoaW5nIGJlZm9yZSB0aGUgZmlyc3QgJy8nIGlzIHRoZSBuZXRMb2NcbiAgICAgICAgLy8gVGhpcyBjYXVzZXMgJ2V4YW1wbGUuY29tL2EnIHRvIGJlIGhhbmRsZWQgYXMgJy8vZXhhbXBsZS5jb20vYScgaW5zdGVhZCBvZiAnL2V4YW1wbGUuY29tL2EnXG4gICAgICAgIHZhciBwYXRoUGFydHMgPSBGSVJTVF9TRUdNRU5UX1JFR0VYLmV4ZWMoYmFzZVBhcnRzLnBhdGgpO1xuICAgICAgICBiYXNlUGFydHMubmV0TG9jID0gcGF0aFBhcnRzWzFdO1xuICAgICAgICBiYXNlUGFydHMucGF0aCA9IHBhdGhQYXJ0c1syXTtcbiAgICAgIH1cbiAgICAgIGlmIChiYXNlUGFydHMubmV0TG9jICYmICFiYXNlUGFydHMucGF0aCkge1xuICAgICAgICBiYXNlUGFydHMucGF0aCA9ICcvJztcbiAgICAgIH1cbiAgICAgIHZhciBidWlsdFBhcnRzID0ge1xuICAgICAgICAvLyAyYykgT3RoZXJ3aXNlLCB0aGUgZW1iZWRkZWQgVVJMIGluaGVyaXRzIHRoZSBzY2hlbWUgb2ZcbiAgICAgICAgLy8gdGhlIGJhc2UgVVJMLlxuICAgICAgICBzY2hlbWU6IGJhc2VQYXJ0cy5zY2hlbWUsXG4gICAgICAgIG5ldExvYzogcmVsYXRpdmVQYXJ0cy5uZXRMb2MsXG4gICAgICAgIHBhdGg6IG51bGwsXG4gICAgICAgIHBhcmFtczogcmVsYXRpdmVQYXJ0cy5wYXJhbXMsXG4gICAgICAgIHF1ZXJ5OiByZWxhdGl2ZVBhcnRzLnF1ZXJ5LFxuICAgICAgICBmcmFnbWVudDogcmVsYXRpdmVQYXJ0cy5mcmFnbWVudCxcbiAgICAgIH07XG4gICAgICBpZiAoIXJlbGF0aXZlUGFydHMubmV0TG9jKSB7XG4gICAgICAgIC8vIDMpIElmIHRoZSBlbWJlZGRlZCBVUkwncyA8bmV0X2xvYz4gaXMgbm9uLWVtcHR5LCB3ZSBza2lwIHRvXG4gICAgICAgIC8vIFN0ZXAgNy4gIE90aGVyd2lzZSwgdGhlIGVtYmVkZGVkIFVSTCBpbmhlcml0cyB0aGUgPG5ldF9sb2M+XG4gICAgICAgIC8vIChpZiBhbnkpIG9mIHRoZSBiYXNlIFVSTC5cbiAgICAgICAgYnVpbHRQYXJ0cy5uZXRMb2MgPSBiYXNlUGFydHMubmV0TG9jO1xuICAgICAgICAvLyA0KSBJZiB0aGUgZW1iZWRkZWQgVVJMIHBhdGggaXMgcHJlY2VkZWQgYnkgYSBzbGFzaCBcIi9cIiwgdGhlXG4gICAgICAgIC8vIHBhdGggaXMgbm90IHJlbGF0aXZlIGFuZCB3ZSBza2lwIHRvIFN0ZXAgNy5cbiAgICAgICAgaWYgKHJlbGF0aXZlUGFydHMucGF0aFswXSAhPT0gJy8nKSB7XG4gICAgICAgICAgaWYgKCFyZWxhdGl2ZVBhcnRzLnBhdGgpIHtcbiAgICAgICAgICAgIC8vIDUpIElmIHRoZSBlbWJlZGRlZCBVUkwgcGF0aCBpcyBlbXB0eSAoYW5kIG5vdCBwcmVjZWRlZCBieSBhXG4gICAgICAgICAgICAvLyBzbGFzaCksIHRoZW4gdGhlIGVtYmVkZGVkIFVSTCBpbmhlcml0cyB0aGUgYmFzZSBVUkwgcGF0aFxuICAgICAgICAgICAgYnVpbHRQYXJ0cy5wYXRoID0gYmFzZVBhcnRzLnBhdGg7XG4gICAgICAgICAgICAvLyA1YSkgaWYgdGhlIGVtYmVkZGVkIFVSTCdzIDxwYXJhbXM+IGlzIG5vbi1lbXB0eSwgd2Ugc2tpcCB0b1xuICAgICAgICAgICAgLy8gc3RlcCA3OyBvdGhlcndpc2UsIGl0IGluaGVyaXRzIHRoZSA8cGFyYW1zPiBvZiB0aGUgYmFzZVxuICAgICAgICAgICAgLy8gVVJMIChpZiBhbnkpIGFuZFxuICAgICAgICAgICAgaWYgKCFyZWxhdGl2ZVBhcnRzLnBhcmFtcykge1xuICAgICAgICAgICAgICBidWlsdFBhcnRzLnBhcmFtcyA9IGJhc2VQYXJ0cy5wYXJhbXM7XG4gICAgICAgICAgICAgIC8vIDViKSBpZiB0aGUgZW1iZWRkZWQgVVJMJ3MgPHF1ZXJ5PiBpcyBub24tZW1wdHksIHdlIHNraXAgdG9cbiAgICAgICAgICAgICAgLy8gc3RlcCA3OyBvdGhlcndpc2UsIGl0IGluaGVyaXRzIHRoZSA8cXVlcnk+IG9mIHRoZSBiYXNlXG4gICAgICAgICAgICAgIC8vIFVSTCAoaWYgYW55KSBhbmQgd2Ugc2tpcCB0byBzdGVwIDcuXG4gICAgICAgICAgICAgIGlmICghcmVsYXRpdmVQYXJ0cy5xdWVyeSkge1xuICAgICAgICAgICAgICAgIGJ1aWx0UGFydHMucXVlcnkgPSBiYXNlUGFydHMucXVlcnk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gNikgVGhlIGxhc3Qgc2VnbWVudCBvZiB0aGUgYmFzZSBVUkwncyBwYXRoIChhbnl0aGluZ1xuICAgICAgICAgICAgLy8gZm9sbG93aW5nIHRoZSByaWdodG1vc3Qgc2xhc2ggXCIvXCIsIG9yIHRoZSBlbnRpcmUgcGF0aCBpZiBub1xuICAgICAgICAgICAgLy8gc2xhc2ggaXMgcHJlc2VudCkgaXMgcmVtb3ZlZCBhbmQgdGhlIGVtYmVkZGVkIFVSTCdzIHBhdGggaXNcbiAgICAgICAgICAgIC8vIGFwcGVuZGVkIGluIGl0cyBwbGFjZS5cbiAgICAgICAgICAgIHZhciBiYXNlVVJMUGF0aCA9IGJhc2VQYXJ0cy5wYXRoO1xuICAgICAgICAgICAgdmFyIG5ld1BhdGggPVxuICAgICAgICAgICAgICBiYXNlVVJMUGF0aC5zdWJzdHJpbmcoMCwgYmFzZVVSTFBhdGgubGFzdEluZGV4T2YoJy8nKSArIDEpICtcbiAgICAgICAgICAgICAgcmVsYXRpdmVQYXJ0cy5wYXRoO1xuICAgICAgICAgICAgYnVpbHRQYXJ0cy5wYXRoID0gVVJMVG9vbGtpdC5ub3JtYWxpemVQYXRoKG5ld1BhdGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGJ1aWx0UGFydHMucGF0aCA9PT0gbnVsbCkge1xuICAgICAgICBidWlsdFBhcnRzLnBhdGggPSBvcHRzLmFsd2F5c05vcm1hbGl6ZVxuICAgICAgICAgID8gVVJMVG9vbGtpdC5ub3JtYWxpemVQYXRoKHJlbGF0aXZlUGFydHMucGF0aClcbiAgICAgICAgICA6IHJlbGF0aXZlUGFydHMucGF0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBVUkxUb29sa2l0LmJ1aWxkVVJMRnJvbVBhcnRzKGJ1aWx0UGFydHMpO1xuICAgIH0sXG4gICAgcGFyc2VVUkw6IGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgIHZhciBwYXJ0cyA9IFVSTF9SRUdFWC5leGVjKHVybCk7XG4gICAgICBpZiAoIXBhcnRzKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2NoZW1lOiBwYXJ0c1sxXSB8fCAnJyxcbiAgICAgICAgbmV0TG9jOiBwYXJ0c1syXSB8fCAnJyxcbiAgICAgICAgcGF0aDogcGFydHNbM10gfHwgJycsXG4gICAgICAgIHBhcmFtczogcGFydHNbNF0gfHwgJycsXG4gICAgICAgIHF1ZXJ5OiBwYXJ0c1s1XSB8fCAnJyxcbiAgICAgICAgZnJhZ21lbnQ6IHBhcnRzWzZdIHx8ICcnLFxuICAgICAgfTtcbiAgICB9LFxuICAgIG5vcm1hbGl6ZVBhdGg6IGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgICAvLyBUaGUgZm9sbG93aW5nIG9wZXJhdGlvbnMgYXJlXG4gICAgICAvLyB0aGVuIGFwcGxpZWQsIGluIG9yZGVyLCB0byB0aGUgbmV3IHBhdGg6XG4gICAgICAvLyA2YSkgQWxsIG9jY3VycmVuY2VzIG9mIFwiLi9cIiwgd2hlcmUgXCIuXCIgaXMgYSBjb21wbGV0ZSBwYXRoXG4gICAgICAvLyBzZWdtZW50LCBhcmUgcmVtb3ZlZC5cbiAgICAgIC8vIDZiKSBJZiB0aGUgcGF0aCBlbmRzIHdpdGggXCIuXCIgYXMgYSBjb21wbGV0ZSBwYXRoIHNlZ21lbnQsXG4gICAgICAvLyB0aGF0IFwiLlwiIGlzIHJlbW92ZWQuXG4gICAgICBwYXRoID0gcGF0aC5zcGxpdCgnJykucmV2ZXJzZSgpLmpvaW4oJycpLnJlcGxhY2UoU0xBU0hfRE9UX1JFR0VYLCAnJyk7XG4gICAgICAvLyA2YykgQWxsIG9jY3VycmVuY2VzIG9mIFwiPHNlZ21lbnQ+Ly4uL1wiLCB3aGVyZSA8c2VnbWVudD4gaXMgYVxuICAgICAgLy8gY29tcGxldGUgcGF0aCBzZWdtZW50IG5vdCBlcXVhbCB0byBcIi4uXCIsIGFyZSByZW1vdmVkLlxuICAgICAgLy8gUmVtb3ZhbCBvZiB0aGVzZSBwYXRoIHNlZ21lbnRzIGlzIHBlcmZvcm1lZCBpdGVyYXRpdmVseSxcbiAgICAgIC8vIHJlbW92aW5nIHRoZSBsZWZ0bW9zdCBtYXRjaGluZyBwYXR0ZXJuIG9uIGVhY2ggaXRlcmF0aW9uLFxuICAgICAgLy8gdW50aWwgbm8gbWF0Y2hpbmcgcGF0dGVybiByZW1haW5zLlxuICAgICAgLy8gNmQpIElmIHRoZSBwYXRoIGVuZHMgd2l0aCBcIjxzZWdtZW50Pi8uLlwiLCB3aGVyZSA8c2VnbWVudD4gaXMgYVxuICAgICAgLy8gY29tcGxldGUgcGF0aCBzZWdtZW50IG5vdCBlcXVhbCB0byBcIi4uXCIsIHRoYXRcbiAgICAgIC8vIFwiPHNlZ21lbnQ+Ly4uXCIgaXMgcmVtb3ZlZC5cbiAgICAgIHdoaWxlIChcbiAgICAgICAgcGF0aC5sZW5ndGggIT09IChwYXRoID0gcGF0aC5yZXBsYWNlKFNMQVNIX0RPVF9ET1RfUkVHRVgsICcnKSkubGVuZ3RoXG4gICAgICApIHt9XG4gICAgICByZXR1cm4gcGF0aC5zcGxpdCgnJykucmV2ZXJzZSgpLmpvaW4oJycpO1xuICAgIH0sXG4gICAgYnVpbGRVUkxGcm9tUGFydHM6IGZ1bmN0aW9uIChwYXJ0cykge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgcGFydHMuc2NoZW1lICtcbiAgICAgICAgcGFydHMubmV0TG9jICtcbiAgICAgICAgcGFydHMucGF0aCArXG4gICAgICAgIHBhcnRzLnBhcmFtcyArXG4gICAgICAgIHBhcnRzLnF1ZXJ5ICtcbiAgICAgICAgcGFydHMuZnJhZ21lbnRcbiAgICAgICk7XG4gICAgfSxcbiAgfTtcblxuICBpZiAodHJ1ZSlcbiAgICBtb2R1bGUuZXhwb3J0cyA9IFVSTFRvb2xraXQ7XG4gIGVsc2Uge31cbn0pKHRoaXMpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL3dlYndvcmtpZnktd2VicGFjay9pbmRleC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvd2Vid29ya2lmeS13ZWJwYWNrL2luZGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyohIE1vZHVsZUNvbmNhdGVuYXRpb24gYmFpbG91dDogTW9kdWxlIGlzIG5vdCBhbiBFQ01BU2NyaXB0IG1vZHVsZSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5mdW5jdGlvbiB3ZWJwYWNrQm9vdHN0cmFwRnVuYyAobW9kdWxlcykge1xuLyoqKioqKi8gIC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovICB2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4vKioqKioqLyAgLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovICBmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbi8qKioqKiovICAgIC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gICAgaWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4vKioqKioqLyAgICAgIHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4vKioqKioqLyAgICAvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gICAgdmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gICAgICBpOiBtb2R1bGVJZCxcbi8qKioqKiovICAgICAgbDogZmFsc2UsXG4vKioqKioqLyAgICAgIGV4cG9ydHM6IHt9XG4vKioqKioqLyAgICB9O1xuXG4vKioqKioqLyAgICAvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovICAgIG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4vKioqKioqLyAgICAvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyAgICBtb2R1bGUubCA9IHRydWU7XG5cbi8qKioqKiovICAgIC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyAgICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyAgfVxuXG4vKioqKioqLyAgLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovICBfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4vKioqKioqLyAgLy8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovICBfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4vKioqKioqLyAgLy8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuLyoqKioqKi8gIF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcblxuLyoqKioqKi8gIC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gIF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gICAgaWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovICAgICAgICBnZXQ6IGdldHRlclxuLyoqKioqKi8gICAgICB9KTtcbi8qKioqKiovICAgIH1cbi8qKioqKiovICB9O1xuXG4vKioqKioqLyAgLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuLyoqKioqKi8gIF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbi8qKioqKiovICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4vKioqKioqLyAgfTtcblxuLyoqKioqKi8gIC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyAgX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyAgICB2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovICAgICAgZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovICAgICAgZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovICAgIF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovICAgIHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyAgfTtcblxuLyoqKioqKi8gIC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gIF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuLyoqKioqKi8gIC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyAgX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7XG5cbi8qKioqKiovICAvLyBvbiBlcnJvciBmdW5jdGlvbiBmb3IgYXN5bmMgbG9hZGluZ1xuLyoqKioqKi8gIF9fd2VicGFja19yZXF1aXJlX18ub2UgPSBmdW5jdGlvbihlcnIpIHsgY29uc29sZS5lcnJvcihlcnIpOyB0aHJvdyBlcnI7IH07XG5cbiAgdmFyIGYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IEVOVFJZX01PRFVMRSlcbiAgcmV0dXJuIGYuZGVmYXVsdCB8fCBmIC8vIHRyeSB0byBjYWxsIGRlZmF1bHQgaWYgZGVmaW5lZCB0byBhbHNvIHN1cHBvcnQgYmFiZWwgZXNtb2R1bGUgZXhwb3J0c1xufVxuXG52YXIgbW9kdWxlTmFtZVJlcUV4cCA9ICdbXFxcXC58XFxcXC18XFxcXCt8XFxcXHd8XFwvfEBdKydcbnZhciBkZXBlbmRlbmN5UmVnRXhwID0gJ1xcXFwoXFxcXHMqKFxcL1xcXFwqLio/XFxcXCpcXC8pP1xcXFxzKi4qPygnICsgbW9kdWxlTmFtZVJlcUV4cCArICcpLio/XFxcXCknIC8vIGFkZGl0aW9uYWwgY2hhcnMgd2hlbiBvdXRwdXQucGF0aGluZm8gaXMgdHJ1ZVxuXG4vLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNTkzNjYxLzEzMDQ0MlxuZnVuY3Rpb24gcXVvdGVSZWdFeHAgKHN0cikge1xuICByZXR1cm4gKHN0ciArICcnKS5yZXBsYWNlKC9bLj8qK14kW1xcXVxcXFwoKXt9fC1dL2csICdcXFxcJCYnKVxufVxuXG5mdW5jdGlvbiBpc051bWVyaWMobikge1xuICByZXR1cm4gIWlzTmFOKDEgKiBuKTsgLy8gMSAqIG4gY29udmVydHMgaW50ZWdlcnMsIGludGVnZXJzIGFzIHN0cmluZyAoXCIxMjNcIiksIDFlMyBhbmQgXCIxZTNcIiB0byBpbnRlZ2VycyBhbmQgc3RyaW5ncyB0byBOYU5cbn1cblxuZnVuY3Rpb24gZ2V0TW9kdWxlRGVwZW5kZW5jaWVzIChzb3VyY2VzLCBtb2R1bGUsIHF1ZXVlTmFtZSkge1xuICB2YXIgcmV0dmFsID0ge31cbiAgcmV0dmFsW3F1ZXVlTmFtZV0gPSBbXVxuXG4gIHZhciBmblN0cmluZyA9IG1vZHVsZS50b1N0cmluZygpXG4gIHZhciB3cmFwcGVyU2lnbmF0dXJlID0gZm5TdHJpbmcubWF0Y2goL15mdW5jdGlvblxccz9cXHcqXFwoXFx3KyxcXHMqXFx3KyxcXHMqKFxcdyspXFwpLylcbiAgaWYgKCF3cmFwcGVyU2lnbmF0dXJlKSByZXR1cm4gcmV0dmFsXG4gIHZhciB3ZWJwYWNrUmVxdWlyZU5hbWUgPSB3cmFwcGVyU2lnbmF0dXJlWzFdXG5cbiAgLy8gbWFpbiBidW5kbGUgZGVwc1xuICB2YXIgcmUgPSBuZXcgUmVnRXhwKCcoXFxcXFxcXFxufFxcXFxXKScgKyBxdW90ZVJlZ0V4cCh3ZWJwYWNrUmVxdWlyZU5hbWUpICsgZGVwZW5kZW5jeVJlZ0V4cCwgJ2cnKVxuICB2YXIgbWF0Y2hcbiAgd2hpbGUgKChtYXRjaCA9IHJlLmV4ZWMoZm5TdHJpbmcpKSkge1xuICAgIGlmIChtYXRjaFszXSA9PT0gJ2RsbC1yZWZlcmVuY2UnKSBjb250aW51ZVxuICAgIHJldHZhbFtxdWV1ZU5hbWVdLnB1c2gobWF0Y2hbM10pXG4gIH1cblxuICAvLyBkbGwgZGVwc1xuICByZSA9IG5ldyBSZWdFeHAoJ1xcXFwoJyArIHF1b3RlUmVnRXhwKHdlYnBhY2tSZXF1aXJlTmFtZSkgKyAnXFxcXChcIihkbGwtcmVmZXJlbmNlXFxcXHMoJyArIG1vZHVsZU5hbWVSZXFFeHAgKyAnKSlcIlxcXFwpXFxcXCknICsgZGVwZW5kZW5jeVJlZ0V4cCwgJ2cnKVxuICB3aGlsZSAoKG1hdGNoID0gcmUuZXhlYyhmblN0cmluZykpKSB7XG4gICAgaWYgKCFzb3VyY2VzW21hdGNoWzJdXSkge1xuICAgICAgcmV0dmFsW3F1ZXVlTmFtZV0ucHVzaChtYXRjaFsxXSlcbiAgICAgIHNvdXJjZXNbbWF0Y2hbMl1dID0gX193ZWJwYWNrX3JlcXVpcmVfXyhtYXRjaFsxXSkubVxuICAgIH1cbiAgICByZXR2YWxbbWF0Y2hbMl1dID0gcmV0dmFsW21hdGNoWzJdXSB8fCBbXVxuICAgIHJldHZhbFttYXRjaFsyXV0ucHVzaChtYXRjaFs0XSlcbiAgfVxuXG4gIC8vIGNvbnZlcnQgMWUzIGJhY2sgdG8gMTAwMCAtIHRoaXMgY2FuIGJlIGltcG9ydGFudCBhZnRlciB1Z2xpZnktanMgY29udmVydGVkIDEwMDAgdG8gMWUzXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMocmV0dmFsKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCByZXR2YWxba2V5c1tpXV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgIGlmIChpc051bWVyaWMocmV0dmFsW2tleXNbaV1dW2pdKSkge1xuICAgICAgICByZXR2YWxba2V5c1tpXV1bal0gPSAxICogcmV0dmFsW2tleXNbaV1dW2pdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXR2YWxcbn1cblxuZnVuY3Rpb24gaGFzVmFsdWVzSW5RdWV1ZXMgKHF1ZXVlcykge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHF1ZXVlcylcbiAgcmV0dXJuIGtleXMucmVkdWNlKGZ1bmN0aW9uIChoYXNWYWx1ZXMsIGtleSkge1xuICAgIHJldHVybiBoYXNWYWx1ZXMgfHwgcXVldWVzW2tleV0ubGVuZ3RoID4gMFxuICB9LCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gZ2V0UmVxdWlyZWRNb2R1bGVzIChzb3VyY2VzLCBtb2R1bGVJZCkge1xuICB2YXIgbW9kdWxlc1F1ZXVlID0ge1xuICAgIG1haW46IFttb2R1bGVJZF1cbiAgfVxuICB2YXIgcmVxdWlyZWRNb2R1bGVzID0ge1xuICAgIG1haW46IFtdXG4gIH1cbiAgdmFyIHNlZW5Nb2R1bGVzID0ge1xuICAgIG1haW46IHt9XG4gIH1cblxuICB3aGlsZSAoaGFzVmFsdWVzSW5RdWV1ZXMobW9kdWxlc1F1ZXVlKSkge1xuICAgIHZhciBxdWV1ZXMgPSBPYmplY3Qua2V5cyhtb2R1bGVzUXVldWUpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBxdWV1ZU5hbWUgPSBxdWV1ZXNbaV1cbiAgICAgIHZhciBxdWV1ZSA9IG1vZHVsZXNRdWV1ZVtxdWV1ZU5hbWVdXG4gICAgICB2YXIgbW9kdWxlVG9DaGVjayA9IHF1ZXVlLnBvcCgpXG4gICAgICBzZWVuTW9kdWxlc1txdWV1ZU5hbWVdID0gc2Vlbk1vZHVsZXNbcXVldWVOYW1lXSB8fCB7fVxuICAgICAgaWYgKHNlZW5Nb2R1bGVzW3F1ZXVlTmFtZV1bbW9kdWxlVG9DaGVja10gfHwgIXNvdXJjZXNbcXVldWVOYW1lXVttb2R1bGVUb0NoZWNrXSkgY29udGludWVcbiAgICAgIHNlZW5Nb2R1bGVzW3F1ZXVlTmFtZV1bbW9kdWxlVG9DaGVja10gPSB0cnVlXG4gICAgICByZXF1aXJlZE1vZHVsZXNbcXVldWVOYW1lXSA9IHJlcXVpcmVkTW9kdWxlc1txdWV1ZU5hbWVdIHx8IFtdXG4gICAgICByZXF1aXJlZE1vZHVsZXNbcXVldWVOYW1lXS5wdXNoKG1vZHVsZVRvQ2hlY2spXG4gICAgICB2YXIgbmV3TW9kdWxlcyA9IGdldE1vZHVsZURlcGVuZGVuY2llcyhzb3VyY2VzLCBzb3VyY2VzW3F1ZXVlTmFtZV1bbW9kdWxlVG9DaGVja10sIHF1ZXVlTmFtZSlcbiAgICAgIHZhciBuZXdNb2R1bGVzS2V5cyA9IE9iamVjdC5rZXlzKG5ld01vZHVsZXMpXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG5ld01vZHVsZXNLZXlzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIG1vZHVsZXNRdWV1ZVtuZXdNb2R1bGVzS2V5c1tqXV0gPSBtb2R1bGVzUXVldWVbbmV3TW9kdWxlc0tleXNbal1dIHx8IFtdXG4gICAgICAgIG1vZHVsZXNRdWV1ZVtuZXdNb2R1bGVzS2V5c1tqXV0gPSBtb2R1bGVzUXVldWVbbmV3TW9kdWxlc0tleXNbal1dLmNvbmNhdChuZXdNb2R1bGVzW25ld01vZHVsZXNLZXlzW2pdXSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVxdWlyZWRNb2R1bGVzXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1vZHVsZUlkLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gIHZhciBzb3VyY2VzID0ge1xuICAgIG1haW46IF9fd2VicGFja19yZXF1aXJlX18ubVxuICB9XG5cbiAgdmFyIHJlcXVpcmVkTW9kdWxlcyA9IG9wdGlvbnMuYWxsID8geyBtYWluOiBPYmplY3Qua2V5cyhzb3VyY2VzLm1haW4pIH0gOiBnZXRSZXF1aXJlZE1vZHVsZXMoc291cmNlcywgbW9kdWxlSWQpXG5cbiAgdmFyIHNyYyA9ICcnXG5cbiAgT2JqZWN0LmtleXMocmVxdWlyZWRNb2R1bGVzKS5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0gIT09ICdtYWluJyB9KS5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGUpIHtcbiAgICB2YXIgZW50cnlNb2R1bGUgPSAwXG4gICAgd2hpbGUgKHJlcXVpcmVkTW9kdWxlc1ttb2R1bGVdW2VudHJ5TW9kdWxlXSkge1xuICAgICAgZW50cnlNb2R1bGUrK1xuICAgIH1cbiAgICByZXF1aXJlZE1vZHVsZXNbbW9kdWxlXS5wdXNoKGVudHJ5TW9kdWxlKVxuICAgIHNvdXJjZXNbbW9kdWxlXVtlbnRyeU1vZHVsZV0gPSAnKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgeyBtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX187IH0pJ1xuICAgIHNyYyA9IHNyYyArICd2YXIgJyArIG1vZHVsZSArICcgPSAoJyArIHdlYnBhY2tCb290c3RyYXBGdW5jLnRvU3RyaW5nKCkucmVwbGFjZSgnRU5UUllfTU9EVUxFJywgSlNPTi5zdHJpbmdpZnkoZW50cnlNb2R1bGUpKSArICcpKHsnICsgcmVxdWlyZWRNb2R1bGVzW21vZHVsZV0ubWFwKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gJycgKyBKU09OLnN0cmluZ2lmeShpZCkgKyAnOiAnICsgc291cmNlc1ttb2R1bGVdW2lkXS50b1N0cmluZygpIH0pLmpvaW4oJywnKSArICd9KTtcXG4nXG4gIH0pXG5cbiAgc3JjID0gc3JjICsgJ25ldyAoKCcgKyB3ZWJwYWNrQm9vdHN0cmFwRnVuYy50b1N0cmluZygpLnJlcGxhY2UoJ0VOVFJZX01PRFVMRScsIEpTT04uc3RyaW5naWZ5KG1vZHVsZUlkKSkgKyAnKSh7JyArIHJlcXVpcmVkTW9kdWxlcy5tYWluLm1hcChmdW5jdGlvbiAoaWQpIHsgcmV0dXJuICcnICsgSlNPTi5zdHJpbmdpZnkoaWQpICsgJzogJyArIHNvdXJjZXMubWFpbltpZF0udG9TdHJpbmcoKSB9KS5qb2luKCcsJykgKyAnfSkpKHNlbGYpOydcblxuICB2YXIgYmxvYiA9IG5ldyB3aW5kb3cuQmxvYihbc3JjXSwgeyB0eXBlOiAndGV4dC9qYXZhc2NyaXB0JyB9KVxuICBpZiAob3B0aW9ucy5iYXJlKSB7IHJldHVybiBibG9iIH1cblxuICB2YXIgVVJMID0gd2luZG93LlVSTCB8fCB3aW5kb3cud2Via2l0VVJMIHx8IHdpbmRvdy5tb3pVUkwgfHwgd2luZG93Lm1zVVJMXG5cbiAgdmFyIHdvcmtlclVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYilcbiAgdmFyIHdvcmtlciA9IG5ldyB3aW5kb3cuV29ya2VyKHdvcmtlclVybClcbiAgd29ya2VyLm9iamVjdFVSTCA9IHdvcmtlclVybFxuXG4gIHJldHVybiB3b3JrZXJcbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9jcnlwdC9kZWNyeXB0ZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2NyeXB0L2RlY3J5cHRlci5qcyArIDMgbW9kdWxlcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogZGVmYXVsdCAqL1xuLyohIE1vZHVsZUNvbmNhdGVuYXRpb24gYmFpbG91dDogQ2Fubm90IGNvbmNhdCB3aXRoIC4vc3JjL2Vycm9ycy50cyBiZWNhdXNlIG9mIC4vc3JjL2hscy50cyAqL1xuLyohIE1vZHVsZUNvbmNhdGVuYXRpb24gYmFpbG91dDogQ2Fubm90IGNvbmNhdCB3aXRoIC4vc3JjL2V2ZW50cy5qcyBiZWNhdXNlIG9mIC4vc3JjL2hscy50cyAqL1xuLyohIE1vZHVsZUNvbmNhdGVuYXRpb24gYmFpbG91dDogQ2Fubm90IGNvbmNhdCB3aXRoIC4vc3JjL3V0aWxzL2dldC1zZWxmLXNjb3BlLmpzIGJlY2F1c2Ugb2YgLi9zcmMvaGxzLnRzICovXG4vKiEgTW9kdWxlQ29uY2F0ZW5hdGlvbiBiYWlsb3V0OiBDYW5ub3QgY29uY2F0IHdpdGggLi9zcmMvdXRpbHMvbG9nZ2VyLmpzIGJlY2F1c2Ugb2YgLi9zcmMvaGxzLnRzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLy8gRVNNIENPTVBBVCBGTEFHXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NyeXB0L2Flcy1jcnlwdG8uanNcbnZhciBBRVNDcnlwdG8gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBBRVNDcnlwdG8oc3VidGxlLCBpdikge1xuICAgIHRoaXMuc3VidGxlID0gc3VidGxlO1xuICAgIHRoaXMuYWVzSVYgPSBpdjtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBBRVNDcnlwdG8ucHJvdG90eXBlO1xuXG4gIF9wcm90by5kZWNyeXB0ID0gZnVuY3Rpb24gZGVjcnlwdChkYXRhLCBrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5zdWJ0bGUuZGVjcnlwdCh7XG4gICAgICBuYW1lOiAnQUVTLUNCQycsXG4gICAgICBpdjogdGhpcy5hZXNJVlxuICAgIH0sIGtleSwgZGF0YSk7XG4gIH07XG5cbiAgcmV0dXJuIEFFU0NyeXB0bztcbn0oKTtcblxuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jcnlwdC9mYXN0LWFlcy1rZXkuanNcbnZhciBGYXN0QUVTS2V5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRmFzdEFFU0tleShzdWJ0bGUsIGtleSkge1xuICAgIHRoaXMuc3VidGxlID0gc3VidGxlO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEZhc3RBRVNLZXkucHJvdG90eXBlO1xuXG4gIF9wcm90by5leHBhbmRLZXkgPSBmdW5jdGlvbiBleHBhbmRLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3VidGxlLmltcG9ydEtleSgncmF3JywgdGhpcy5rZXksIHtcbiAgICAgIG5hbWU6ICdBRVMtQ0JDJ1xuICAgIH0sIGZhbHNlLCBbJ2VuY3J5cHQnLCAnZGVjcnlwdCddKTtcbiAgfTtcblxuICByZXR1cm4gRmFzdEFFU0tleTtcbn0oKTtcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgZmFzdF9hZXNfa2V5ID0gKEZhc3RBRVNLZXkpO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY3J5cHQvYWVzLWRlY3J5cHRvci5qc1xuLy8gUEtDUzdcbmZ1bmN0aW9uIHJlbW92ZVBhZGRpbmcoYnVmZmVyKSB7XG4gIHZhciBvdXRwdXRCeXRlcyA9IGJ1ZmZlci5ieXRlTGVuZ3RoO1xuICB2YXIgcGFkZGluZ0J5dGVzID0gb3V0cHV0Qnl0ZXMgJiYgbmV3IERhdGFWaWV3KGJ1ZmZlcikuZ2V0VWludDgob3V0cHV0Qnl0ZXMgLSAxKTtcblxuICBpZiAocGFkZGluZ0J5dGVzKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgwLCBvdXRwdXRCeXRlcyAtIHBhZGRpbmdCeXRlcyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxufVxuXG52YXIgQUVTRGVjcnlwdG9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQUVTRGVjcnlwdG9yKCkge1xuICAgIC8vIFN0YXRpYyBhZnRlciBydW5uaW5nIGluaXRUYWJsZVxuICAgIHRoaXMucmNvbiA9IFsweDAsIDB4MSwgMHgyLCAweDQsIDB4OCwgMHgxMCwgMHgyMCwgMHg0MCwgMHg4MCwgMHgxYiwgMHgzNl07XG4gICAgdGhpcy5zdWJNaXggPSBbbmV3IFVpbnQzMkFycmF5KDI1NiksIG5ldyBVaW50MzJBcnJheSgyNTYpLCBuZXcgVWludDMyQXJyYXkoMjU2KSwgbmV3IFVpbnQzMkFycmF5KDI1NildO1xuICAgIHRoaXMuaW52U3ViTWl4ID0gW25ldyBVaW50MzJBcnJheSgyNTYpLCBuZXcgVWludDMyQXJyYXkoMjU2KSwgbmV3IFVpbnQzMkFycmF5KDI1NiksIG5ldyBVaW50MzJBcnJheSgyNTYpXTtcbiAgICB0aGlzLnNCb3ggPSBuZXcgVWludDMyQXJyYXkoMjU2KTtcbiAgICB0aGlzLmludlNCb3ggPSBuZXcgVWludDMyQXJyYXkoMjU2KTsgLy8gQ2hhbmdlcyBkdXJpbmcgcnVudGltZVxuXG4gICAgdGhpcy5rZXkgPSBuZXcgVWludDMyQXJyYXkoMCk7XG4gICAgdGhpcy5pbml0VGFibGUoKTtcbiAgfSAvLyBVc2luZyB2aWV3LmdldFVpbnQzMigpIGFsc28gc3dhcHMgdGhlIGJ5dGUgb3JkZXIuXG5cblxuICB2YXIgX3Byb3RvID0gQUVTRGVjcnlwdG9yLnByb3RvdHlwZTtcblxuICBfcHJvdG8udWludDhBcnJheVRvVWludDMyQXJyYXlfID0gZnVuY3Rpb24gdWludDhBcnJheVRvVWludDMyQXJyYXlfKGFycmF5QnVmZmVyKSB7XG4gICAgdmFyIHZpZXcgPSBuZXcgRGF0YVZpZXcoYXJyYXlCdWZmZXIpO1xuICAgIHZhciBuZXdBcnJheSA9IG5ldyBVaW50MzJBcnJheSg0KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICBuZXdBcnJheVtpXSA9IHZpZXcuZ2V0VWludDMyKGkgKiA0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3QXJyYXk7XG4gIH07XG5cbiAgX3Byb3RvLmluaXRUYWJsZSA9IGZ1bmN0aW9uIGluaXRUYWJsZSgpIHtcbiAgICB2YXIgc0JveCA9IHRoaXMuc0JveDtcbiAgICB2YXIgaW52U0JveCA9IHRoaXMuaW52U0JveDtcbiAgICB2YXIgc3ViTWl4ID0gdGhpcy5zdWJNaXg7XG4gICAgdmFyIHN1Yk1peDAgPSBzdWJNaXhbMF07XG4gICAgdmFyIHN1Yk1peDEgPSBzdWJNaXhbMV07XG4gICAgdmFyIHN1Yk1peDIgPSBzdWJNaXhbMl07XG4gICAgdmFyIHN1Yk1peDMgPSBzdWJNaXhbM107XG4gICAgdmFyIGludlN1Yk1peCA9IHRoaXMuaW52U3ViTWl4O1xuICAgIHZhciBpbnZTdWJNaXgwID0gaW52U3ViTWl4WzBdO1xuICAgIHZhciBpbnZTdWJNaXgxID0gaW52U3ViTWl4WzFdO1xuICAgIHZhciBpbnZTdWJNaXgyID0gaW52U3ViTWl4WzJdO1xuICAgIHZhciBpbnZTdWJNaXgzID0gaW52U3ViTWl4WzNdO1xuICAgIHZhciBkID0gbmV3IFVpbnQzMkFycmF5KDI1Nik7XG4gICAgdmFyIHggPSAwO1xuICAgIHZhciB4aSA9IDA7XG4gICAgdmFyIGkgPSAwO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG4gICAgICBpZiAoaSA8IDEyOCkge1xuICAgICAgICBkW2ldID0gaSA8PCAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZFtpXSA9IGkgPDwgMSBeIDB4MTFiO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuICAgICAgdmFyIHN4ID0geGkgXiB4aSA8PCAxIF4geGkgPDwgMiBeIHhpIDw8IDMgXiB4aSA8PCA0O1xuICAgICAgc3ggPSBzeCA+Pj4gOCBeIHN4ICYgMHhmZiBeIDB4NjM7XG4gICAgICBzQm94W3hdID0gc3g7XG4gICAgICBpbnZTQm94W3N4XSA9IHg7IC8vIENvbXB1dGUgbXVsdGlwbGljYXRpb25cblxuICAgICAgdmFyIHgyID0gZFt4XTtcbiAgICAgIHZhciB4NCA9IGRbeDJdO1xuICAgICAgdmFyIHg4ID0gZFt4NF07IC8vIENvbXB1dGUgc3ViL2ludlN1YiBieXRlcywgbWl4IGNvbHVtbnMgdGFibGVzXG5cbiAgICAgIHZhciB0ID0gZFtzeF0gKiAweDEwMSBeIHN4ICogMHgxMDEwMTAwO1xuICAgICAgc3ViTWl4MFt4XSA9IHQgPDwgMjQgfCB0ID4+PiA4O1xuICAgICAgc3ViTWl4MVt4XSA9IHQgPDwgMTYgfCB0ID4+PiAxNjtcbiAgICAgIHN1Yk1peDJbeF0gPSB0IDw8IDggfCB0ID4+PiAyNDtcbiAgICAgIHN1Yk1peDNbeF0gPSB0OyAvLyBDb21wdXRlIGludiBzdWIgYnl0ZXMsIGludiBtaXggY29sdW1ucyB0YWJsZXNcblxuICAgICAgdCA9IHg4ICogMHgxMDEwMTAxIF4geDQgKiAweDEwMDAxIF4geDIgKiAweDEwMSBeIHggKiAweDEwMTAxMDA7XG4gICAgICBpbnZTdWJNaXgwW3N4XSA9IHQgPDwgMjQgfCB0ID4+PiA4O1xuICAgICAgaW52U3ViTWl4MVtzeF0gPSB0IDw8IDE2IHwgdCA+Pj4gMTY7XG4gICAgICBpbnZTdWJNaXgyW3N4XSA9IHQgPDwgOCB8IHQgPj4+IDI0O1xuICAgICAgaW52U3ViTWl4M1tzeF0gPSB0OyAvLyBDb21wdXRlIG5leHQgY291bnRlclxuXG4gICAgICBpZiAoIXgpIHtcbiAgICAgICAgeCA9IHhpID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHggPSB4MiBeIGRbZFtkW3g4IF4geDJdXV07XG4gICAgICAgIHhpIF49IGRbZFt4aV1dO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZXhwYW5kS2V5ID0gZnVuY3Rpb24gZXhwYW5kS2V5KGtleUJ1ZmZlcikge1xuICAgIC8vIGNvbnZlcnQga2V5QnVmZmVyIHRvIFVpbnQzMkFycmF5XG4gICAgdmFyIGtleSA9IHRoaXMudWludDhBcnJheVRvVWludDMyQXJyYXlfKGtleUJ1ZmZlcik7XG4gICAgdmFyIHNhbWVLZXkgPSB0cnVlO1xuICAgIHZhciBvZmZzZXQgPSAwO1xuXG4gICAgd2hpbGUgKG9mZnNldCA8IGtleS5sZW5ndGggJiYgc2FtZUtleSkge1xuICAgICAgc2FtZUtleSA9IGtleVtvZmZzZXRdID09PSB0aGlzLmtleVtvZmZzZXRdO1xuICAgICAgb2Zmc2V0Kys7XG4gICAgfVxuXG4gICAgaWYgKHNhbWVLZXkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB2YXIga2V5U2l6ZSA9IHRoaXMua2V5U2l6ZSA9IGtleS5sZW5ndGg7XG5cbiAgICBpZiAoa2V5U2l6ZSAhPT0gNCAmJiBrZXlTaXplICE9PSA2ICYmIGtleVNpemUgIT09IDgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBhZXMga2V5IHNpemU9JyArIGtleVNpemUpO1xuICAgIH1cblxuICAgIHZhciBrc1Jvd3MgPSB0aGlzLmtzUm93cyA9IChrZXlTaXplICsgNiArIDEpICogNDtcbiAgICB2YXIga3NSb3c7XG4gICAgdmFyIGludktzUm93O1xuICAgIHZhciBrZXlTY2hlZHVsZSA9IHRoaXMua2V5U2NoZWR1bGUgPSBuZXcgVWludDMyQXJyYXkoa3NSb3dzKTtcbiAgICB2YXIgaW52S2V5U2NoZWR1bGUgPSB0aGlzLmludktleVNjaGVkdWxlID0gbmV3IFVpbnQzMkFycmF5KGtzUm93cyk7XG4gICAgdmFyIHNib3ggPSB0aGlzLnNCb3g7XG4gICAgdmFyIHJjb24gPSB0aGlzLnJjb247XG4gICAgdmFyIGludlN1Yk1peCA9IHRoaXMuaW52U3ViTWl4O1xuICAgIHZhciBpbnZTdWJNaXgwID0gaW52U3ViTWl4WzBdO1xuICAgIHZhciBpbnZTdWJNaXgxID0gaW52U3ViTWl4WzFdO1xuICAgIHZhciBpbnZTdWJNaXgyID0gaW52U3ViTWl4WzJdO1xuICAgIHZhciBpbnZTdWJNaXgzID0gaW52U3ViTWl4WzNdO1xuICAgIHZhciBwcmV2O1xuICAgIHZhciB0O1xuXG4gICAgZm9yIChrc1JvdyA9IDA7IGtzUm93IDwga3NSb3dzOyBrc1JvdysrKSB7XG4gICAgICBpZiAoa3NSb3cgPCBrZXlTaXplKSB7XG4gICAgICAgIHByZXYgPSBrZXlTY2hlZHVsZVtrc1Jvd10gPSBrZXlba3NSb3ddO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdCA9IHByZXY7XG5cbiAgICAgIGlmIChrc1JvdyAlIGtleVNpemUgPT09IDApIHtcbiAgICAgICAgLy8gUm90IHdvcmRcbiAgICAgICAgdCA9IHQgPDwgOCB8IHQgPj4+IDI0OyAvLyBTdWIgd29yZFxuXG4gICAgICAgIHQgPSBzYm94W3QgPj4+IDI0XSA8PCAyNCB8IHNib3hbdCA+Pj4gMTYgJiAweGZmXSA8PCAxNiB8IHNib3hbdCA+Pj4gOCAmIDB4ZmZdIDw8IDggfCBzYm94W3QgJiAweGZmXTsgLy8gTWl4IFJjb25cblxuICAgICAgICB0IF49IHJjb25ba3NSb3cgLyBrZXlTaXplIHwgMF0gPDwgMjQ7XG4gICAgICB9IGVsc2UgaWYgKGtleVNpemUgPiA2ICYmIGtzUm93ICUga2V5U2l6ZSA9PT0gNCkge1xuICAgICAgICAvLyBTdWIgd29yZFxuICAgICAgICB0ID0gc2JveFt0ID4+PiAyNF0gPDwgMjQgfCBzYm94W3QgPj4+IDE2ICYgMHhmZl0gPDwgMTYgfCBzYm94W3QgPj4+IDggJiAweGZmXSA8PCA4IHwgc2JveFt0ICYgMHhmZl07XG4gICAgICB9XG5cbiAgICAgIGtleVNjaGVkdWxlW2tzUm93XSA9IHByZXYgPSAoa2V5U2NoZWR1bGVba3NSb3cgLSBrZXlTaXplXSBeIHQpID4+PiAwO1xuICAgIH1cblxuICAgIGZvciAoaW52S3NSb3cgPSAwOyBpbnZLc1JvdyA8IGtzUm93czsgaW52S3NSb3crKykge1xuICAgICAga3NSb3cgPSBrc1Jvd3MgLSBpbnZLc1JvdztcblxuICAgICAgaWYgKGludktzUm93ICYgMykge1xuICAgICAgICB0ID0ga2V5U2NoZWR1bGVba3NSb3ddO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdCA9IGtleVNjaGVkdWxlW2tzUm93IC0gNF07XG4gICAgICB9XG5cbiAgICAgIGlmIChpbnZLc1JvdyA8IDQgfHwga3NSb3cgPD0gNCkge1xuICAgICAgICBpbnZLZXlTY2hlZHVsZVtpbnZLc1Jvd10gPSB0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW52S2V5U2NoZWR1bGVbaW52S3NSb3ddID0gaW52U3ViTWl4MFtzYm94W3QgPj4+IDI0XV0gXiBpbnZTdWJNaXgxW3Nib3hbdCA+Pj4gMTYgJiAweGZmXV0gXiBpbnZTdWJNaXgyW3Nib3hbdCA+Pj4gOCAmIDB4ZmZdXSBeIGludlN1Yk1peDNbc2JveFt0ICYgMHhmZl1dO1xuICAgICAgfVxuXG4gICAgICBpbnZLZXlTY2hlZHVsZVtpbnZLc1Jvd10gPSBpbnZLZXlTY2hlZHVsZVtpbnZLc1Jvd10gPj4+IDA7XG4gICAgfVxuICB9IC8vIEFkZGluZyB0aGlzIGFzIGEgbWV0aG9kIGdyZWF0bHkgaW1wcm92ZXMgcGVyZm9ybWFuY2UuXG4gIDtcblxuICBfcHJvdG8ubmV0d29ya1RvSG9zdE9yZGVyU3dhcCA9IGZ1bmN0aW9uIG5ldHdvcmtUb0hvc3RPcmRlclN3YXAod29yZCkge1xuICAgIHJldHVybiB3b3JkIDw8IDI0IHwgKHdvcmQgJiAweGZmMDApIDw8IDggfCAod29yZCAmIDB4ZmYwMDAwKSA+PiA4IHwgd29yZCA+Pj4gMjQ7XG4gIH07XG5cbiAgX3Byb3RvLmRlY3J5cHQgPSBmdW5jdGlvbiBkZWNyeXB0KGlucHV0QXJyYXlCdWZmZXIsIG9mZnNldCwgYWVzSVYsIHJlbW92ZVBLQ1M3UGFkZGluZykge1xuICAgIHZhciBuUm91bmRzID0gdGhpcy5rZXlTaXplICsgNjtcbiAgICB2YXIgaW52S2V5U2NoZWR1bGUgPSB0aGlzLmludktleVNjaGVkdWxlO1xuICAgIHZhciBpbnZTQk9YID0gdGhpcy5pbnZTQm94O1xuICAgIHZhciBpbnZTdWJNaXggPSB0aGlzLmludlN1Yk1peDtcbiAgICB2YXIgaW52U3ViTWl4MCA9IGludlN1Yk1peFswXTtcbiAgICB2YXIgaW52U3ViTWl4MSA9IGludlN1Yk1peFsxXTtcbiAgICB2YXIgaW52U3ViTWl4MiA9IGludlN1Yk1peFsyXTtcbiAgICB2YXIgaW52U3ViTWl4MyA9IGludlN1Yk1peFszXTtcbiAgICB2YXIgaW5pdFZlY3RvciA9IHRoaXMudWludDhBcnJheVRvVWludDMyQXJyYXlfKGFlc0lWKTtcbiAgICB2YXIgaW5pdFZlY3RvcjAgPSBpbml0VmVjdG9yWzBdO1xuICAgIHZhciBpbml0VmVjdG9yMSA9IGluaXRWZWN0b3JbMV07XG4gICAgdmFyIGluaXRWZWN0b3IyID0gaW5pdFZlY3RvclsyXTtcbiAgICB2YXIgaW5pdFZlY3RvcjMgPSBpbml0VmVjdG9yWzNdO1xuICAgIHZhciBpbnB1dEludDMyID0gbmV3IEludDMyQXJyYXkoaW5wdXRBcnJheUJ1ZmZlcik7XG4gICAgdmFyIG91dHB1dEludDMyID0gbmV3IEludDMyQXJyYXkoaW5wdXRJbnQzMi5sZW5ndGgpO1xuICAgIHZhciB0MCwgdDEsIHQyLCB0MztcbiAgICB2YXIgczAsIHMxLCBzMiwgczM7XG4gICAgdmFyIGlucHV0V29yZHMwLCBpbnB1dFdvcmRzMSwgaW5wdXRXb3JkczIsIGlucHV0V29yZHMzO1xuICAgIHZhciBrc1JvdywgaTtcbiAgICB2YXIgc3dhcFdvcmQgPSB0aGlzLm5ldHdvcmtUb0hvc3RPcmRlclN3YXA7XG5cbiAgICB3aGlsZSAob2Zmc2V0IDwgaW5wdXRJbnQzMi5sZW5ndGgpIHtcbiAgICAgIGlucHV0V29yZHMwID0gc3dhcFdvcmQoaW5wdXRJbnQzMltvZmZzZXRdKTtcbiAgICAgIGlucHV0V29yZHMxID0gc3dhcFdvcmQoaW5wdXRJbnQzMltvZmZzZXQgKyAxXSk7XG4gICAgICBpbnB1dFdvcmRzMiA9IHN3YXBXb3JkKGlucHV0SW50MzJbb2Zmc2V0ICsgMl0pO1xuICAgICAgaW5wdXRXb3JkczMgPSBzd2FwV29yZChpbnB1dEludDMyW29mZnNldCArIDNdKTtcbiAgICAgIHMwID0gaW5wdXRXb3JkczAgXiBpbnZLZXlTY2hlZHVsZVswXTtcbiAgICAgIHMxID0gaW5wdXRXb3JkczMgXiBpbnZLZXlTY2hlZHVsZVsxXTtcbiAgICAgIHMyID0gaW5wdXRXb3JkczIgXiBpbnZLZXlTY2hlZHVsZVsyXTtcbiAgICAgIHMzID0gaW5wdXRXb3JkczEgXiBpbnZLZXlTY2hlZHVsZVszXTtcbiAgICAgIGtzUm93ID0gNDsgLy8gSXRlcmF0ZSB0aHJvdWdoIHRoZSByb3VuZHMgb2YgZGVjcnlwdGlvblxuXG4gICAgICBmb3IgKGkgPSAxOyBpIDwgblJvdW5kczsgaSsrKSB7XG4gICAgICAgIHQwID0gaW52U3ViTWl4MFtzMCA+Pj4gMjRdIF4gaW52U3ViTWl4MVtzMSA+PiAxNiAmIDB4ZmZdIF4gaW52U3ViTWl4MltzMiA+PiA4ICYgMHhmZl0gXiBpbnZTdWJNaXgzW3MzICYgMHhmZl0gXiBpbnZLZXlTY2hlZHVsZVtrc1Jvd107XG4gICAgICAgIHQxID0gaW52U3ViTWl4MFtzMSA+Pj4gMjRdIF4gaW52U3ViTWl4MVtzMiA+PiAxNiAmIDB4ZmZdIF4gaW52U3ViTWl4MltzMyA+PiA4ICYgMHhmZl0gXiBpbnZTdWJNaXgzW3MwICYgMHhmZl0gXiBpbnZLZXlTY2hlZHVsZVtrc1JvdyArIDFdO1xuICAgICAgICB0MiA9IGludlN1Yk1peDBbczIgPj4+IDI0XSBeIGludlN1Yk1peDFbczMgPj4gMTYgJiAweGZmXSBeIGludlN1Yk1peDJbczAgPj4gOCAmIDB4ZmZdIF4gaW52U3ViTWl4M1tzMSAmIDB4ZmZdIF4gaW52S2V5U2NoZWR1bGVba3NSb3cgKyAyXTtcbiAgICAgICAgdDMgPSBpbnZTdWJNaXgwW3MzID4+PiAyNF0gXiBpbnZTdWJNaXgxW3MwID4+IDE2ICYgMHhmZl0gXiBpbnZTdWJNaXgyW3MxID4+IDggJiAweGZmXSBeIGludlN1Yk1peDNbczIgJiAweGZmXSBeIGludktleVNjaGVkdWxlW2tzUm93ICsgM107IC8vIFVwZGF0ZSBzdGF0ZVxuXG4gICAgICAgIHMwID0gdDA7XG4gICAgICAgIHMxID0gdDE7XG4gICAgICAgIHMyID0gdDI7XG4gICAgICAgIHMzID0gdDM7XG4gICAgICAgIGtzUm93ID0ga3NSb3cgKyA0O1xuICAgICAgfSAvLyBTaGlmdCByb3dzLCBzdWIgYnl0ZXMsIGFkZCByb3VuZCBrZXlcblxuXG4gICAgICB0MCA9IGludlNCT1hbczAgPj4+IDI0XSA8PCAyNCBeIGludlNCT1hbczEgPj4gMTYgJiAweGZmXSA8PCAxNiBeIGludlNCT1hbczIgPj4gOCAmIDB4ZmZdIDw8IDggXiBpbnZTQk9YW3MzICYgMHhmZl0gXiBpbnZLZXlTY2hlZHVsZVtrc1Jvd107XG4gICAgICB0MSA9IGludlNCT1hbczEgPj4+IDI0XSA8PCAyNCBeIGludlNCT1hbczIgPj4gMTYgJiAweGZmXSA8PCAxNiBeIGludlNCT1hbczMgPj4gOCAmIDB4ZmZdIDw8IDggXiBpbnZTQk9YW3MwICYgMHhmZl0gXiBpbnZLZXlTY2hlZHVsZVtrc1JvdyArIDFdO1xuICAgICAgdDIgPSBpbnZTQk9YW3MyID4+PiAyNF0gPDwgMjQgXiBpbnZTQk9YW3MzID4+IDE2ICYgMHhmZl0gPDwgMTYgXiBpbnZTQk9YW3MwID4+IDggJiAweGZmXSA8PCA4IF4gaW52U0JPWFtzMSAmIDB4ZmZdIF4gaW52S2V5U2NoZWR1bGVba3NSb3cgKyAyXTtcbiAgICAgIHQzID0gaW52U0JPWFtzMyA+Pj4gMjRdIDw8IDI0IF4gaW52U0JPWFtzMCA+PiAxNiAmIDB4ZmZdIDw8IDE2IF4gaW52U0JPWFtzMSA+PiA4ICYgMHhmZl0gPDwgOCBeIGludlNCT1hbczIgJiAweGZmXSBeIGludktleVNjaGVkdWxlW2tzUm93ICsgM107XG4gICAgICBrc1JvdyA9IGtzUm93ICsgMzsgLy8gV3JpdGVcblxuICAgICAgb3V0cHV0SW50MzJbb2Zmc2V0XSA9IHN3YXBXb3JkKHQwIF4gaW5pdFZlY3RvcjApO1xuICAgICAgb3V0cHV0SW50MzJbb2Zmc2V0ICsgMV0gPSBzd2FwV29yZCh0MyBeIGluaXRWZWN0b3IxKTtcbiAgICAgIG91dHB1dEludDMyW29mZnNldCArIDJdID0gc3dhcFdvcmQodDIgXiBpbml0VmVjdG9yMik7XG4gICAgICBvdXRwdXRJbnQzMltvZmZzZXQgKyAzXSA9IHN3YXBXb3JkKHQxIF4gaW5pdFZlY3RvcjMpOyAvLyByZXNldCBpbml0VmVjdG9yIHRvIGxhc3QgNCB1bnNpZ25lZCBpbnRcblxuICAgICAgaW5pdFZlY3RvcjAgPSBpbnB1dFdvcmRzMDtcbiAgICAgIGluaXRWZWN0b3IxID0gaW5wdXRXb3JkczE7XG4gICAgICBpbml0VmVjdG9yMiA9IGlucHV0V29yZHMyO1xuICAgICAgaW5pdFZlY3RvcjMgPSBpbnB1dFdvcmRzMztcbiAgICAgIG9mZnNldCA9IG9mZnNldCArIDQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlbW92ZVBLQ1M3UGFkZGluZyA/IHJlbW92ZVBhZGRpbmcob3V0cHV0SW50MzIuYnVmZmVyKSA6IG91dHB1dEludDMyLmJ1ZmZlcjtcbiAgfTtcblxuICBfcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5rZXkgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5rZXlTaXplID0gdW5kZWZpbmVkO1xuICAgIHRoaXMua3NSb3dzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuc0JveCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmludlNCb3ggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zdWJNaXggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5pbnZTdWJNaXggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5rZXlTY2hlZHVsZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmludktleVNjaGVkdWxlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucmNvbiA9IHVuZGVmaW5lZDtcbiAgfTtcblxuICByZXR1cm4gQUVTRGVjcnlwdG9yO1xufSgpO1xuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBhZXNfZGVjcnlwdG9yID0gKEFFU0RlY3J5cHRvcik7XG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vc3JjL2Vycm9ycy50c1xudmFyIGVycm9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9lcnJvcnMudHNcIik7XG5cbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9zcmMvdXRpbHMvbG9nZ2VyLmpzXG52YXIgbG9nZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL3V0aWxzL2xvZ2dlci5qc1wiKTtcblxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9ldmVudHMuanNcbnZhciBldmVudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvZXZlbnRzLmpzXCIpO1xuXG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vc3JjL3V0aWxzL2dldC1zZWxmLXNjb3BlLmpzXG52YXIgZ2V0X3NlbGZfc2NvcGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvdXRpbHMvZ2V0LXNlbGYtc2NvcGUuanNcIik7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NyeXB0L2RlY3J5cHRlci5qc1xuXG5cblxuXG5cblxuIC8vIHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTEyMzcyNTkvNTg5NDkzXG5cbnZhciBnbG9iYWwgPSBPYmplY3QoZ2V0X3NlbGZfc2NvcGVbXCJnZXRTZWxmU2NvcGVcIl0pKCk7IC8vIHNhZmVndWFyZCBmb3IgY29kZSB0aGF0IG1pZ2h0IHJ1biBib3RoIG9uIHdvcmtlciBhbmQgbWFpbiB0aHJlYWRcblxudmFyIGRlY3J5cHRlcl9EZWNyeXB0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBEZWNyeXB0ZXIob2JzZXJ2ZXIsIGNvbmZpZywgX3RlbXApIHtcbiAgICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgICBfcmVmJHJlbW92ZVBLQ1M3UGFkZGkgPSBfcmVmLnJlbW92ZVBLQ1M3UGFkZGluZyxcbiAgICAgICAgcmVtb3ZlUEtDUzdQYWRkaW5nID0gX3JlZiRyZW1vdmVQS0NTN1BhZGRpID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiRyZW1vdmVQS0NTN1BhZGRpO1xuXG4gICAgdGhpcy5sb2dFbmFibGVkID0gdHJ1ZTtcbiAgICB0aGlzLm9ic2VydmVyID0gb2JzZXJ2ZXI7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy5yZW1vdmVQS0NTN1BhZGRpbmcgPSByZW1vdmVQS0NTN1BhZGRpbmc7IC8vIGJ1aWx0IGluIGRlY3J5cHRvciBleHBlY3RzIFBLQ1M3IHBhZGRpbmdcblxuICAgIGlmIChyZW1vdmVQS0NTN1BhZGRpbmcpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBicm93c2VyQ3J5cHRvID0gZ2xvYmFsLmNyeXB0bztcblxuICAgICAgICBpZiAoYnJvd3NlckNyeXB0bykge1xuICAgICAgICAgIHRoaXMuc3VidGxlID0gYnJvd3NlckNyeXB0by5zdWJ0bGUgfHwgYnJvd3NlckNyeXB0by53ZWJraXRTdWJ0bGU7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuXG4gICAgdGhpcy5kaXNhYmxlV2ViQ3J5cHRvID0gIXRoaXMuc3VidGxlO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IERlY3J5cHRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmlzU3luYyA9IGZ1bmN0aW9uIGlzU3luYygpIHtcbiAgICByZXR1cm4gdGhpcy5kaXNhYmxlV2ViQ3J5cHRvICYmIHRoaXMuY29uZmlnLmVuYWJsZVNvZnR3YXJlQUVTO1xuICB9O1xuXG4gIF9wcm90by5kZWNyeXB0ID0gZnVuY3Rpb24gZGVjcnlwdChkYXRhLCBrZXksIGl2LCBjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy5kaXNhYmxlV2ViQ3J5cHRvICYmIHRoaXMuY29uZmlnLmVuYWJsZVNvZnR3YXJlQUVTKSB7XG4gICAgICBpZiAodGhpcy5sb2dFbmFibGVkKSB7XG4gICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coJ0pTIEFFUyBkZWNyeXB0Jyk7XG4gICAgICAgIHRoaXMubG9nRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGVjcnlwdG9yID0gdGhpcy5kZWNyeXB0b3I7XG5cbiAgICAgIGlmICghZGVjcnlwdG9yKSB7XG4gICAgICAgIHRoaXMuZGVjcnlwdG9yID0gZGVjcnlwdG9yID0gbmV3IGFlc19kZWNyeXB0b3IoKTtcbiAgICAgIH1cblxuICAgICAgZGVjcnlwdG9yLmV4cGFuZEtleShrZXkpO1xuICAgICAgY2FsbGJhY2soZGVjcnlwdG9yLmRlY3J5cHQoZGF0YSwgMCwgaXYsIHRoaXMucmVtb3ZlUEtDUzdQYWRkaW5nKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLmxvZ0VuYWJsZWQpIHtcbiAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZygnV2ViQ3J5cHRvIEFFUyBkZWNyeXB0Jyk7XG4gICAgICAgIHRoaXMubG9nRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3VidGxlID0gdGhpcy5zdWJ0bGU7XG5cbiAgICAgIGlmICh0aGlzLmtleSAhPT0ga2V5KSB7XG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgICB0aGlzLmZhc3RBZXNLZXkgPSBuZXcgZmFzdF9hZXNfa2V5KHN1YnRsZSwga2V5KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5mYXN0QWVzS2V5LmV4cGFuZEtleSgpLnRoZW4oZnVuY3Rpb24gKGFlc0tleSkge1xuICAgICAgICAvLyBkZWNyeXB0IHVzaW5nIHdlYiBjcnlwdG9cbiAgICAgICAgdmFyIGNyeXB0byA9IG5ldyBBRVNDcnlwdG8oc3VidGxlLCBpdik7XG4gICAgICAgIGNyeXB0by5kZWNyeXB0KGRhdGEsIGFlc0tleSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIF90aGlzLm9uV2ViQ3J5cHRvRXJyb3IoZXJyLCBkYXRhLCBrZXksIGl2LCBjYWxsYmFjayk7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgIGNhbGxiYWNrKHJlc3VsdCk7XG4gICAgICAgIH0pO1xuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICBfdGhpcy5vbldlYkNyeXB0b0Vycm9yKGVyciwgZGF0YSwga2V5LCBpdiwgY2FsbGJhY2spO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vbldlYkNyeXB0b0Vycm9yID0gZnVuY3Rpb24gb25XZWJDcnlwdG9FcnJvcihlcnIsIGRhdGEsIGtleSwgaXYsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHRoaXMuY29uZmlnLmVuYWJsZVNvZnR3YXJlQUVTKSB7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKCdXZWJDcnlwdG8gRXJyb3IsIGRpc2FibGUgV2ViQ3J5cHRvIEFQSScpO1xuICAgICAgdGhpcy5kaXNhYmxlV2ViQ3J5cHRvID0gdHJ1ZTtcbiAgICAgIHRoaXMubG9nRW5hYmxlZCA9IHRydWU7XG4gICAgICB0aGlzLmRlY3J5cHQoZGF0YSwga2V5LCBpdiwgY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0uZXJyb3IoXCJkZWNyeXB0aW5nIGVycm9yIDogXCIgKyBlcnIubWVzc2FnZSk7XG4gICAgICB0aGlzLm9ic2VydmVyLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5FUlJPUiwge1xuICAgICAgICB0eXBlOiBlcnJvcnNbXCJFcnJvclR5cGVzXCJdLk1FRElBX0VSUk9SLFxuICAgICAgICBkZXRhaWxzOiBlcnJvcnNbXCJFcnJvckRldGFpbHNcIl0uRlJBR19ERUNSWVBUX0VSUk9SLFxuICAgICAgICBmYXRhbDogdHJ1ZSxcbiAgICAgICAgcmVhc29uOiBlcnIubWVzc2FnZVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICB2YXIgZGVjcnlwdG9yID0gdGhpcy5kZWNyeXB0b3I7XG5cbiAgICBpZiAoZGVjcnlwdG9yKSB7XG4gICAgICBkZWNyeXB0b3IuZGVzdHJveSgpO1xuICAgICAgdGhpcy5kZWNyeXB0b3IgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBEZWNyeXB0ZXI7XG59KCk7XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGRlY3J5cHRlciA9IF9fd2VicGFja19leHBvcnRzX19bXCJkZWZhdWx0XCJdID0gKGRlY3J5cHRlcl9EZWNyeXB0ZXIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9kZW11eC9kZW11eGVyLWlubGluZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvZGVtdXgvZGVtdXhlci1pbmxpbmUuanMgKyAxMiBtb2R1bGVzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBkZWZhdWx0ICovXG4vKiEgTW9kdWxlQ29uY2F0ZW5hdGlvbiBiYWlsb3V0OiBDYW5ub3QgY29uY2F0IHdpdGggLi9zcmMvY3J5cHQvZGVjcnlwdGVyLmpzIGJlY2F1c2Ugb2YgLi9zcmMvaGxzLnRzICovXG4vKiEgTW9kdWxlQ29uY2F0ZW5hdGlvbiBiYWlsb3V0OiBDYW5ub3QgY29uY2F0IHdpdGggLi9zcmMvZGVtdXgvaWQzLmpzIGJlY2F1c2Ugb2YgLi9zcmMvaGxzLnRzICovXG4vKiEgTW9kdWxlQ29uY2F0ZW5hdGlvbiBiYWlsb3V0OiBDYW5ub3QgY29uY2F0IHdpdGggLi9zcmMvZGVtdXgvbXA0ZGVtdXhlci5qcyBiZWNhdXNlIG9mIC4vc3JjL2hscy50cyAqL1xuLyohIE1vZHVsZUNvbmNhdGVuYXRpb24gYmFpbG91dDogQ2Fubm90IGNvbmNhdCB3aXRoIC4vc3JjL2Vycm9ycy50cyBiZWNhdXNlIG9mIC4vc3JjL2hscy50cyAqL1xuLyohIE1vZHVsZUNvbmNhdGVuYXRpb24gYmFpbG91dDogQ2Fubm90IGNvbmNhdCB3aXRoIC4vc3JjL2V2ZW50cy5qcyBiZWNhdXNlIG9mIC4vc3JjL2hscy50cyAqL1xuLyohIE1vZHVsZUNvbmNhdGVuYXRpb24gYmFpbG91dDogQ2Fubm90IGNvbmNhdCB3aXRoIC4vc3JjL3BvbHlmaWxscy9udW1iZXIuanMgYmVjYXVzZSBvZiAuL3NyYy9obHMudHMgKi9cbi8qISBNb2R1bGVDb25jYXRlbmF0aW9uIGJhaWxvdXQ6IENhbm5vdCBjb25jYXQgd2l0aCAuL3NyYy91dGlscy9nZXQtc2VsZi1zY29wZS5qcyBiZWNhdXNlIG9mIC4vc3JjL2hscy50cyAqL1xuLyohIE1vZHVsZUNvbmNhdGVuYXRpb24gYmFpbG91dDogQ2Fubm90IGNvbmNhdCB3aXRoIC4vc3JjL3V0aWxzL2xvZ2dlci5qcyBiZWNhdXNlIG9mIC4vc3JjL2hscy50cyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8vIEVTTSBDT01QQVQgRkxBR1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuXG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vc3JjL2V2ZW50cy5qc1xudmFyIGV2ZW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9ldmVudHMuanNcIik7XG5cbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9zcmMvZXJyb3JzLnRzXG52YXIgZXJyb3JzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL2Vycm9ycy50c1wiKTtcblxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9jcnlwdC9kZWNyeXB0ZXIuanMgKyAzIG1vZHVsZXNcbnZhciBjcnlwdF9kZWNyeXB0ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvY3J5cHQvZGVjcnlwdGVyLmpzXCIpO1xuXG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vc3JjL3BvbHlmaWxscy9udW1iZXIuanNcbnZhciBudW1iZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvcG9seWZpbGxzL251bWJlci5qc1wiKTtcblxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy91dGlscy9sb2dnZXIuanNcbnZhciBsb2dnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvdXRpbHMvbG9nZ2VyLmpzXCIpO1xuXG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vc3JjL3V0aWxzL2dldC1zZWxmLXNjb3BlLmpzXG52YXIgZ2V0X3NlbGZfc2NvcGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvdXRpbHMvZ2V0LXNlbGYtc2NvcGUuanNcIik7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2RlbXV4L2FkdHMuanNcbi8qKlxuICogQURUUyBwYXJzZXIgaGVscGVyXG4gKiBAbGluayBodHRwczovL3dpa2kubXVsdGltZWRpYS5jeC9pbmRleC5waHA/dGl0bGU9QURUU1xuICovXG5cblxuXG5cbmZ1bmN0aW9uIGdldEF1ZGlvQ29uZmlnKG9ic2VydmVyLCBkYXRhLCBvZmZzZXQsIGF1ZGlvQ29kZWMpIHtcbiAgdmFyIGFkdHNPYmplY3RUeXBlLFxuICAgICAgLy8gOmludFxuICBhZHRzU2FtcGxlaW5nSW5kZXgsXG4gICAgICAvLyA6aW50XG4gIGFkdHNFeHRlbnNpb25TYW1wbGVpbmdJbmRleCxcbiAgICAgIC8vIDppbnRcbiAgYWR0c0NoYW5lbENvbmZpZyxcbiAgICAgIC8vIDppbnRcbiAgY29uZmlnLFxuICAgICAgdXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLFxuICAgICAgbWFuaWZlc3RDb2RlYyA9IGF1ZGlvQ29kZWMsXG4gICAgICBhZHRzU2FtcGxlaW5nUmF0ZXMgPSBbOTYwMDAsIDg4MjAwLCA2NDAwMCwgNDgwMDAsIDQ0MTAwLCAzMjAwMCwgMjQwMDAsIDIyMDUwLCAxNjAwMCwgMTIwMDAsIDExMDI1LCA4MDAwLCA3MzUwXTsgLy8gYnl0ZSAyXG5cbiAgYWR0c09iamVjdFR5cGUgPSAoKGRhdGFbb2Zmc2V0ICsgMl0gJiAweEMwKSA+Pj4gNikgKyAxO1xuICBhZHRzU2FtcGxlaW5nSW5kZXggPSAoZGF0YVtvZmZzZXQgKyAyXSAmIDB4M0MpID4+PiAyO1xuXG4gIGlmIChhZHRzU2FtcGxlaW5nSW5kZXggPiBhZHRzU2FtcGxlaW5nUmF0ZXMubGVuZ3RoIC0gMSkge1xuICAgIG9ic2VydmVyLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5FUlJPUiwge1xuICAgICAgdHlwZTogZXJyb3JzW1wiRXJyb3JUeXBlc1wiXS5NRURJQV9FUlJPUixcbiAgICAgIGRldGFpbHM6IGVycm9yc1tcIkVycm9yRGV0YWlsc1wiXS5GUkFHX1BBUlNJTkdfRVJST1IsXG4gICAgICBmYXRhbDogdHJ1ZSxcbiAgICAgIHJlYXNvbjogXCJpbnZhbGlkIEFEVFMgc2FtcGxpbmcgaW5kZXg6XCIgKyBhZHRzU2FtcGxlaW5nSW5kZXhcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cblxuICBhZHRzQ2hhbmVsQ29uZmlnID0gKGRhdGFbb2Zmc2V0ICsgMl0gJiAweDAxKSA8PCAyOyAvLyBieXRlIDNcblxuICBhZHRzQ2hhbmVsQ29uZmlnIHw9IChkYXRhW29mZnNldCArIDNdICYgMHhDMCkgPj4+IDY7XG4gIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJtYW5pZmVzdCBjb2RlYzpcIiArIGF1ZGlvQ29kZWMgKyBcIixBRFRTIGRhdGE6dHlwZTpcIiArIGFkdHNPYmplY3RUeXBlICsgXCIsc2FtcGxlaW5nSW5kZXg6XCIgKyBhZHRzU2FtcGxlaW5nSW5kZXggKyBcIltcIiArIGFkdHNTYW1wbGVpbmdSYXRlc1thZHRzU2FtcGxlaW5nSW5kZXhdICsgXCJIel0sY2hhbm5lbENvbmZpZzpcIiArIGFkdHNDaGFuZWxDb25maWcpOyAvLyBmaXJlZm94OiBmcmVxIGxlc3MgdGhhbiAyNGtIeiA9IEFBQyBTQlIgKEhFLUFBQylcblxuICBpZiAoL2ZpcmVmb3gvaS50ZXN0KHVzZXJBZ2VudCkpIHtcbiAgICBpZiAoYWR0c1NhbXBsZWluZ0luZGV4ID49IDYpIHtcbiAgICAgIGFkdHNPYmplY3RUeXBlID0gNTtcbiAgICAgIGNvbmZpZyA9IG5ldyBBcnJheSg0KTsgLy8gSEUtQUFDIHVzZXMgU0JSIChTcGVjdHJhbCBCYW5kIFJlcGxpY2F0aW9uKSAsIGhpZ2ggZnJlcXVlbmNpZXMgYXJlIGNvbnN0cnVjdGVkIGZyb20gbG93IGZyZXF1ZW5jaWVzXG4gICAgICAvLyB0aGVyZSBpcyBhIGZhY3RvciAyIGJldHdlZW4gZnJhbWUgc2FtcGxlIHJhdGUgYW5kIG91dHB1dCBzYW1wbGUgcmF0ZVxuICAgICAgLy8gbXVsdGlwbHkgZnJlcXVlbmN5IGJ5IDIgKHNlZSB0YWJsZSBiZWxvdywgZXF1aXZhbGVudCB0byBzdWJzdHJhY3QgMylcblxuICAgICAgYWR0c0V4dGVuc2lvblNhbXBsZWluZ0luZGV4ID0gYWR0c1NhbXBsZWluZ0luZGV4IC0gMztcbiAgICB9IGVsc2Uge1xuICAgICAgYWR0c09iamVjdFR5cGUgPSAyO1xuICAgICAgY29uZmlnID0gbmV3IEFycmF5KDIpO1xuICAgICAgYWR0c0V4dGVuc2lvblNhbXBsZWluZ0luZGV4ID0gYWR0c1NhbXBsZWluZ0luZGV4O1xuICAgIH0gLy8gQW5kcm9pZCA6IGFsd2F5cyB1c2UgQUFDXG5cbiAgfSBlbHNlIGlmICh1c2VyQWdlbnQuaW5kZXhPZignYW5kcm9pZCcpICE9PSAtMSkge1xuICAgIGFkdHNPYmplY3RUeXBlID0gMjtcbiAgICBjb25maWcgPSBuZXcgQXJyYXkoMik7XG4gICAgYWR0c0V4dGVuc2lvblNhbXBsZWluZ0luZGV4ID0gYWR0c1NhbXBsZWluZ0luZGV4O1xuICB9IGVsc2Uge1xuICAgIC8qICBmb3Igb3RoZXIgYnJvd3NlcnMgKENocm9tZS9WaXZhbGRpL09wZXJhIC4uLilcbiAgICAgICAgYWx3YXlzIGZvcmNlIGF1ZGlvIHR5cGUgdG8gYmUgSEUtQUFDIFNCUiwgYXMgc29tZSBicm93c2VycyBkbyBub3Qgc3VwcG9ydCBhdWRpbyBjb2RlYyBzd2l0Y2ggcHJvcGVybHkgKGxpa2UgQ2hyb21lIC4uLilcbiAgICAqL1xuICAgIGFkdHNPYmplY3RUeXBlID0gNTtcbiAgICBjb25maWcgPSBuZXcgQXJyYXkoNCk7IC8vIGlmIChtYW5pZmVzdCBjb2RlYyBpcyBIRS1BQUMgb3IgSEUtQUFDdjIpIE9SIChtYW5pZmVzdCBjb2RlYyBub3Qgc3BlY2lmaWVkIEFORCBmcmVxdWVuY3kgbGVzcyB0aGFuIDI0a0h6KVxuXG4gICAgaWYgKGF1ZGlvQ29kZWMgJiYgKGF1ZGlvQ29kZWMuaW5kZXhPZignbXA0YS40MC4yOScpICE9PSAtMSB8fCBhdWRpb0NvZGVjLmluZGV4T2YoJ21wNGEuNDAuNScpICE9PSAtMSkgfHwgIWF1ZGlvQ29kZWMgJiYgYWR0c1NhbXBsZWluZ0luZGV4ID49IDYpIHtcbiAgICAgIC8vIEhFLUFBQyB1c2VzIFNCUiAoU3BlY3RyYWwgQmFuZCBSZXBsaWNhdGlvbikgLCBoaWdoIGZyZXF1ZW5jaWVzIGFyZSBjb25zdHJ1Y3RlZCBmcm9tIGxvdyBmcmVxdWVuY2llc1xuICAgICAgLy8gdGhlcmUgaXMgYSBmYWN0b3IgMiBiZXR3ZWVuIGZyYW1lIHNhbXBsZSByYXRlIGFuZCBvdXRwdXQgc2FtcGxlIHJhdGVcbiAgICAgIC8vIG11bHRpcGx5IGZyZXF1ZW5jeSBieSAyIChzZWUgdGFibGUgYmVsb3csIGVxdWl2YWxlbnQgdG8gc3Vic3RyYWN0IDMpXG4gICAgICBhZHRzRXh0ZW5zaW9uU2FtcGxlaW5nSW5kZXggPSBhZHRzU2FtcGxlaW5nSW5kZXggLSAzO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiAobWFuaWZlc3QgY29kZWMgaXMgQUFDKSBBTkQgKGZyZXF1ZW5jeSBsZXNzIHRoYW4gMjRrSHogQU5EIG5iIGNoYW5uZWwgaXMgMSkgT1IgKG1hbmlmZXN0IGNvZGVjIG5vdCBzcGVjaWZpZWQgYW5kIG1vbm8gYXVkaW8pXG4gICAgICAvLyBDaHJvbWUgZmFpbHMgdG8gcGxheSBiYWNrIHdpdGggbG93IGZyZXF1ZW5jeSBBQUMgTEMgbW9ubyB3aGVuIGluaXRpYWxpemVkIHdpdGggSEUtQUFDLiAgVGhpcyBpcyBub3QgYSBwcm9ibGVtIHdpdGggc3RlcmVvLlxuICAgICAgaWYgKGF1ZGlvQ29kZWMgJiYgYXVkaW9Db2RlYy5pbmRleE9mKCdtcDRhLjQwLjInKSAhPT0gLTEgJiYgKGFkdHNTYW1wbGVpbmdJbmRleCA+PSA2ICYmIGFkdHNDaGFuZWxDb25maWcgPT09IDEgfHwgL3ZpdmFsZGkvaS50ZXN0KHVzZXJBZ2VudCkpIHx8ICFhdWRpb0NvZGVjICYmIGFkdHNDaGFuZWxDb25maWcgPT09IDEpIHtcbiAgICAgICAgYWR0c09iamVjdFR5cGUgPSAyO1xuICAgICAgICBjb25maWcgPSBuZXcgQXJyYXkoMik7XG4gICAgICB9XG5cbiAgICAgIGFkdHNFeHRlbnNpb25TYW1wbGVpbmdJbmRleCA9IGFkdHNTYW1wbGVpbmdJbmRleDtcbiAgICB9XG4gIH1cbiAgLyogcmVmZXIgdG8gaHR0cDovL3dpa2kubXVsdGltZWRpYS5jeC9pbmRleC5waHA/dGl0bGU9TVBFRy00X0F1ZGlvI0F1ZGlvX1NwZWNpZmljX0NvbmZpZ1xuICAgICAgSVNPIDE0NDk2LTMgKEFBQykucGRmIC0gVGFibGUgMS4xMyDigJQgU3ludGF4IG9mIEF1ZGlvU3BlY2lmaWNDb25maWcoKVxuICAgIEF1ZGlvIFByb2ZpbGUgLyBBdWRpbyBPYmplY3QgVHlwZVxuICAgIDA6IE51bGxcbiAgICAxOiBBQUMgTWFpblxuICAgIDI6IEFBQyBMQyAoTG93IENvbXBsZXhpdHkpXG4gICAgMzogQUFDIFNTUiAoU2NhbGFibGUgU2FtcGxlIFJhdGUpXG4gICAgNDogQUFDIExUUCAoTG9uZyBUZXJtIFByZWRpY3Rpb24pXG4gICAgNTogU0JSIChTcGVjdHJhbCBCYW5kIFJlcGxpY2F0aW9uKVxuICAgIDY6IEFBQyBTY2FsYWJsZVxuICAgc2FtcGxpbmcgZnJlcVxuICAgIDA6IDk2MDAwIEh6XG4gICAgMTogODgyMDAgSHpcbiAgICAyOiA2NDAwMCBIelxuICAgIDM6IDQ4MDAwIEh6XG4gICAgNDogNDQxMDAgSHpcbiAgICA1OiAzMjAwMCBIelxuICAgIDY6IDI0MDAwIEh6XG4gICAgNzogMjIwNTAgSHpcbiAgICA4OiAxNjAwMCBIelxuICAgIDk6IDEyMDAwIEh6XG4gICAgMTA6IDExMDI1IEh6XG4gICAgMTE6IDgwMDAgSHpcbiAgICAxMjogNzM1MCBIelxuICAgIDEzOiBSZXNlcnZlZFxuICAgIDE0OiBSZXNlcnZlZFxuICAgIDE1OiBmcmVxdWVuY3kgaXMgd3JpdHRlbiBleHBsaWN0bHlcbiAgICBDaGFubmVsIENvbmZpZ3VyYXRpb25zXG4gICAgVGhlc2UgYXJlIHRoZSBjaGFubmVsIGNvbmZpZ3VyYXRpb25zOlxuICAgIDA6IERlZmluZWQgaW4gQU9UIFNwZWNpZmMgQ29uZmlnXG4gICAgMTogMSBjaGFubmVsOiBmcm9udC1jZW50ZXJcbiAgICAyOiAyIGNoYW5uZWxzOiBmcm9udC1sZWZ0LCBmcm9udC1yaWdodFxuICAqL1xuICAvLyBhdWRpb09iamVjdFR5cGUgPSBwcm9maWxlID0+IHByb2ZpbGUsIHRoZSBNUEVHLTQgQXVkaW8gT2JqZWN0IFR5cGUgbWludXMgMVxuXG5cbiAgY29uZmlnWzBdID0gYWR0c09iamVjdFR5cGUgPDwgMzsgLy8gc2FtcGxpbmdGcmVxdWVuY3lJbmRleFxuXG4gIGNvbmZpZ1swXSB8PSAoYWR0c1NhbXBsZWluZ0luZGV4ICYgMHgwRSkgPj4gMTtcbiAgY29uZmlnWzFdIHw9IChhZHRzU2FtcGxlaW5nSW5kZXggJiAweDAxKSA8PCA3OyAvLyBjaGFubmVsQ29uZmlndXJhdGlvblxuXG4gIGNvbmZpZ1sxXSB8PSBhZHRzQ2hhbmVsQ29uZmlnIDw8IDM7XG5cbiAgaWYgKGFkdHNPYmplY3RUeXBlID09PSA1KSB7XG4gICAgLy8gYWR0c0V4dGVuc2lvblNhbXBsZWluZ0luZGV4XG4gICAgY29uZmlnWzFdIHw9IChhZHRzRXh0ZW5zaW9uU2FtcGxlaW5nSW5kZXggJiAweDBFKSA+PiAxO1xuICAgIGNvbmZpZ1syXSA9IChhZHRzRXh0ZW5zaW9uU2FtcGxlaW5nSW5kZXggJiAweDAxKSA8PCA3OyAvLyBhZHRzT2JqZWN0VHlwZSAoZm9yY2UgdG8gMiwgY2hyb21lIGlzIGNoZWNraW5nIHRoYXQgb2JqZWN0IHR5cGUgaXMgbGVzcyB0aGFuIDUgPz8/XG4gICAgLy8gICAgaHR0cHM6Ly9jaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYy5naXQvKy9tYXN0ZXIvbWVkaWEvZm9ybWF0cy9tcDQvYWFjLmNjXG5cbiAgICBjb25maWdbMl0gfD0gMiA8PCAyO1xuICAgIGNvbmZpZ1szXSA9IDA7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGNvbmZpZzogY29uZmlnLFxuICAgIHNhbXBsZXJhdGU6IGFkdHNTYW1wbGVpbmdSYXRlc1thZHRzU2FtcGxlaW5nSW5kZXhdLFxuICAgIGNoYW5uZWxDb3VudDogYWR0c0NoYW5lbENvbmZpZyxcbiAgICBjb2RlYzogJ21wNGEuNDAuJyArIGFkdHNPYmplY3RUeXBlLFxuICAgIG1hbmlmZXN0Q29kZWM6IG1hbmlmZXN0Q29kZWNcbiAgfTtcbn1cbmZ1bmN0aW9uIGlzSGVhZGVyUGF0dGVybihkYXRhLCBvZmZzZXQpIHtcbiAgcmV0dXJuIGRhdGFbb2Zmc2V0XSA9PT0gMHhmZiAmJiAoZGF0YVtvZmZzZXQgKyAxXSAmIDB4ZjYpID09PSAweGYwO1xufVxuZnVuY3Rpb24gZ2V0SGVhZGVyTGVuZ3RoKGRhdGEsIG9mZnNldCkge1xuICByZXR1cm4gZGF0YVtvZmZzZXQgKyAxXSAmIDB4MDEgPyA3IDogOTtcbn1cbmZ1bmN0aW9uIGdldEZ1bGxGcmFtZUxlbmd0aChkYXRhLCBvZmZzZXQpIHtcbiAgcmV0dXJuIChkYXRhW29mZnNldCArIDNdICYgMHgwMykgPDwgMTEgfCBkYXRhW29mZnNldCArIDRdIDw8IDMgfCAoZGF0YVtvZmZzZXQgKyA1XSAmIDB4RTApID4+PiA1O1xufVxuZnVuY3Rpb24gaXNIZWFkZXIoZGF0YSwgb2Zmc2V0KSB7XG4gIC8vIExvb2sgZm9yIEFEVFMgaGVhZGVyIHwgMTExMSAxMTExIHwgMTExMSBYMDBYIHwgd2hlcmUgWCBjYW4gYmUgZWl0aGVyIDAgb3IgMVxuICAvLyBMYXllciBiaXRzIChwb3NpdGlvbiAxNCBhbmQgMTUpIGluIGhlYWRlciBzaG91bGQgYmUgYWx3YXlzIDAgZm9yIEFEVFNcbiAgLy8gTW9yZSBpbmZvIGh0dHBzOi8vd2lraS5tdWx0aW1lZGlhLmN4L2luZGV4LnBocD90aXRsZT1BRFRTXG4gIGlmIChvZmZzZXQgKyAxIDwgZGF0YS5sZW5ndGggJiYgaXNIZWFkZXJQYXR0ZXJuKGRhdGEsIG9mZnNldCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGFkdHNfcHJvYmUoZGF0YSwgb2Zmc2V0KSB7XG4gIC8vIHNhbWUgYXMgaXNIZWFkZXIgYnV0IHdlIGFsc28gY2hlY2sgdGhhdCBBRFRTIGZyYW1lIGZvbGxvd3MgbGFzdCBBRFRTIGZyYW1lXG4gIC8vIG9yIGVuZCBvZiBkYXRhIGlzIHJlYWNoZWRcbiAgaWYgKGlzSGVhZGVyKGRhdGEsIG9mZnNldCkpIHtcbiAgICAvLyBBRFRTIGhlYWRlciBMZW5ndGhcbiAgICB2YXIgaGVhZGVyTGVuZ3RoID0gZ2V0SGVhZGVyTGVuZ3RoKGRhdGEsIG9mZnNldCk7XG5cbiAgICBpZiAob2Zmc2V0ICsgaGVhZGVyTGVuZ3RoID49IGRhdGEubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvLyBBRFRTIGZyYW1lIExlbmd0aFxuXG5cbiAgICB2YXIgZnJhbWVMZW5ndGggPSBnZXRGdWxsRnJhbWVMZW5ndGgoZGF0YSwgb2Zmc2V0KTtcblxuICAgIGlmIChmcmFtZUxlbmd0aCA8PSBoZWFkZXJMZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbmV3T2Zmc2V0ID0gb2Zmc2V0ICsgZnJhbWVMZW5ndGg7XG5cbiAgICBpZiAobmV3T2Zmc2V0ID09PSBkYXRhLmxlbmd0aCB8fCBuZXdPZmZzZXQgKyAxIDwgZGF0YS5sZW5ndGggJiYgaXNIZWFkZXJQYXR0ZXJuKGRhdGEsIG5ld09mZnNldCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGluaXRUcmFja0NvbmZpZyh0cmFjaywgb2JzZXJ2ZXIsIGRhdGEsIG9mZnNldCwgYXVkaW9Db2RlYykge1xuICBpZiAoIXRyYWNrLnNhbXBsZXJhdGUpIHtcbiAgICB2YXIgY29uZmlnID0gZ2V0QXVkaW9Db25maWcob2JzZXJ2ZXIsIGRhdGEsIG9mZnNldCwgYXVkaW9Db2RlYyk7XG4gICAgdHJhY2suY29uZmlnID0gY29uZmlnLmNvbmZpZztcbiAgICB0cmFjay5zYW1wbGVyYXRlID0gY29uZmlnLnNhbXBsZXJhdGU7XG4gICAgdHJhY2suY2hhbm5lbENvdW50ID0gY29uZmlnLmNoYW5uZWxDb3VudDtcbiAgICB0cmFjay5jb2RlYyA9IGNvbmZpZy5jb2RlYztcbiAgICB0cmFjay5tYW5pZmVzdENvZGVjID0gY29uZmlnLm1hbmlmZXN0Q29kZWM7XG4gICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyhcInBhcnNlZCBjb2RlYzpcIiArIHRyYWNrLmNvZGVjICsgXCIscmF0ZTpcIiArIGNvbmZpZy5zYW1wbGVyYXRlICsgXCIsbmIgY2hhbm5lbDpcIiArIGNvbmZpZy5jaGFubmVsQ291bnQpO1xuICB9XG59XG5mdW5jdGlvbiBnZXRGcmFtZUR1cmF0aW9uKHNhbXBsZXJhdGUpIHtcbiAgcmV0dXJuIDEwMjQgKiA5MDAwMCAvIHNhbXBsZXJhdGU7XG59XG5mdW5jdGlvbiBwYXJzZUZyYW1lSGVhZGVyKGRhdGEsIG9mZnNldCwgcHRzLCBmcmFtZUluZGV4LCBmcmFtZUR1cmF0aW9uKSB7XG4gIHZhciBoZWFkZXJMZW5ndGgsIGZyYW1lTGVuZ3RoLCBzdGFtcDtcbiAgdmFyIGxlbmd0aCA9IGRhdGEubGVuZ3RoOyAvLyBUaGUgcHJvdGVjdGlvbiBza2lwIGJpdCB0ZWxscyB1cyBpZiB3ZSBoYXZlIDIgYnl0ZXMgb2YgQ1JDIGRhdGEgYXQgdGhlIGVuZCBvZiB0aGUgQURUUyBoZWFkZXJcblxuICBoZWFkZXJMZW5ndGggPSBnZXRIZWFkZXJMZW5ndGgoZGF0YSwgb2Zmc2V0KTsgLy8gcmV0cmlldmUgZnJhbWUgc2l6ZVxuXG4gIGZyYW1lTGVuZ3RoID0gZ2V0RnVsbEZyYW1lTGVuZ3RoKGRhdGEsIG9mZnNldCk7XG4gIGZyYW1lTGVuZ3RoIC09IGhlYWRlckxlbmd0aDtcblxuICBpZiAoZnJhbWVMZW5ndGggPiAwICYmIG9mZnNldCArIGhlYWRlckxlbmd0aCArIGZyYW1lTGVuZ3RoIDw9IGxlbmd0aCkge1xuICAgIHN0YW1wID0gcHRzICsgZnJhbWVJbmRleCAqIGZyYW1lRHVyYXRpb247IC8vIGxvZ2dlci5sb2coYEFBQyBmcmFtZSwgb2Zmc2V0L2xlbmd0aC90b3RhbC9wdHM6JHtvZmZzZXQraGVhZGVyTGVuZ3RofS8ke2ZyYW1lTGVuZ3RofS8ke2RhdGEuYnl0ZUxlbmd0aH0vJHsoc3RhbXAvOTApLnRvRml4ZWQoMCl9YCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgaGVhZGVyTGVuZ3RoOiBoZWFkZXJMZW5ndGgsXG4gICAgICBmcmFtZUxlbmd0aDogZnJhbWVMZW5ndGgsXG4gICAgICBzdGFtcDogc3RhbXBcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGFwcGVuZEZyYW1lKHRyYWNrLCBkYXRhLCBvZmZzZXQsIHB0cywgZnJhbWVJbmRleCkge1xuICB2YXIgZnJhbWVEdXJhdGlvbiA9IGdldEZyYW1lRHVyYXRpb24odHJhY2suc2FtcGxlcmF0ZSk7XG4gIHZhciBoZWFkZXIgPSBwYXJzZUZyYW1lSGVhZGVyKGRhdGEsIG9mZnNldCwgcHRzLCBmcmFtZUluZGV4LCBmcmFtZUR1cmF0aW9uKTtcblxuICBpZiAoaGVhZGVyKSB7XG4gICAgdmFyIHN0YW1wID0gaGVhZGVyLnN0YW1wO1xuICAgIHZhciBoZWFkZXJMZW5ndGggPSBoZWFkZXIuaGVhZGVyTGVuZ3RoO1xuICAgIHZhciBmcmFtZUxlbmd0aCA9IGhlYWRlci5mcmFtZUxlbmd0aDsgLy8gbG9nZ2VyLmxvZyhgQUFDIGZyYW1lLCBvZmZzZXQvbGVuZ3RoL3RvdGFsL3B0czoke29mZnNldCtoZWFkZXJMZW5ndGh9LyR7ZnJhbWVMZW5ndGh9LyR7ZGF0YS5ieXRlTGVuZ3RofS8keyhzdGFtcC85MCkudG9GaXhlZCgwKX1gKTtcblxuICAgIHZhciBhYWNTYW1wbGUgPSB7XG4gICAgICB1bml0OiBkYXRhLnN1YmFycmF5KG9mZnNldCArIGhlYWRlckxlbmd0aCwgb2Zmc2V0ICsgaGVhZGVyTGVuZ3RoICsgZnJhbWVMZW5ndGgpLFxuICAgICAgcHRzOiBzdGFtcCxcbiAgICAgIGR0czogc3RhbXBcbiAgICB9O1xuICAgIHRyYWNrLnNhbXBsZXMucHVzaChhYWNTYW1wbGUpO1xuICAgIHJldHVybiB7XG4gICAgICBzYW1wbGU6IGFhY1NhbXBsZSxcbiAgICAgIGxlbmd0aDogZnJhbWVMZW5ndGggKyBoZWFkZXJMZW5ndGhcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9zcmMvZGVtdXgvaWQzLmpzXG52YXIgaWQzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL2RlbXV4L2lkMy5qc1wiKTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZGVtdXgvYWFjZGVtdXhlci5qc1xuXG5cbi8qKlxuICogQUFDIGRlbXV4ZXJcbiAqL1xuXG5cblxuXG52YXIgYWFjZGVtdXhlcl9BQUNEZW11eGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQUFDRGVtdXhlcihvYnNlcnZlciwgcmVtdXhlciwgY29uZmlnKSB7XG4gICAgdGhpcy5vYnNlcnZlciA9IG9ic2VydmVyO1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIHRoaXMucmVtdXhlciA9IHJlbXV4ZXI7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQUFDRGVtdXhlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlc2V0SW5pdFNlZ21lbnQgPSBmdW5jdGlvbiByZXNldEluaXRTZWdtZW50KGluaXRTZWdtZW50LCBhdWRpb0NvZGVjLCB2aWRlb0NvZGVjLCBkdXJhdGlvbikge1xuICAgIHRoaXMuX2F1ZGlvVHJhY2sgPSB7XG4gICAgICBjb250YWluZXI6ICdhdWRpby9hZHRzJyxcbiAgICAgIHR5cGU6ICdhdWRpbycsXG4gICAgICBpZDogMCxcbiAgICAgIHNlcXVlbmNlTnVtYmVyOiAwLFxuICAgICAgaXNBQUM6IHRydWUsXG4gICAgICBzYW1wbGVzOiBbXSxcbiAgICAgIGxlbjogMCxcbiAgICAgIG1hbmlmZXN0Q29kZWM6IGF1ZGlvQ29kZWMsXG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICBpbnB1dFRpbWVTY2FsZTogOTAwMDBcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5yZXNldFRpbWVTdGFtcCA9IGZ1bmN0aW9uIHJlc2V0VGltZVN0YW1wKCkge307XG5cbiAgQUFDRGVtdXhlci5wcm9iZSA9IGZ1bmN0aW9uIHByb2JlKGRhdGEpIHtcbiAgICBpZiAoIWRhdGEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IC8vIENoZWNrIGZvciB0aGUgQURUUyBzeW5jIHdvcmRcbiAgICAvLyBMb29rIGZvciBBRFRTIGhlYWRlciB8IDExMTEgMTExMSB8IDExMTEgWDAwWCB8IHdoZXJlIFggY2FuIGJlIGVpdGhlciAwIG9yIDFcbiAgICAvLyBMYXllciBiaXRzIChwb3NpdGlvbiAxNCBhbmQgMTUpIGluIGhlYWRlciBzaG91bGQgYmUgYWx3YXlzIDAgZm9yIEFEVFNcbiAgICAvLyBNb3JlIGluZm8gaHR0cHM6Ly93aWtpLm11bHRpbWVkaWEuY3gvaW5kZXgucGhwP3RpdGxlPUFEVFNcblxuXG4gICAgdmFyIGlkM0RhdGEgPSBpZDNbXCJkZWZhdWx0XCJdLmdldElEM0RhdGEoZGF0YSwgMCkgfHwgW107XG4gICAgdmFyIG9mZnNldCA9IGlkM0RhdGEubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgbGVuZ3RoID0gZGF0YS5sZW5ndGg7IG9mZnNldCA8IGxlbmd0aDsgb2Zmc2V0KyspIHtcbiAgICAgIGlmIChhZHRzX3Byb2JlKGRhdGEsIG9mZnNldCkpIHtcbiAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZygnQURUUyBzeW5jIHdvcmQgZm91bmQgIScpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gZmVlZCBpbmNvbWluZyBkYXRhIHRvIHRoZSBmcm9udCBvZiB0aGUgcGFyc2luZyBwaXBlbGluZVxuICA7XG5cbiAgX3Byb3RvLmFwcGVuZCA9IGZ1bmN0aW9uIGFwcGVuZChkYXRhLCB0aW1lT2Zmc2V0LCBjb250aWd1b3VzLCBhY2N1cmF0ZVRpbWVPZmZzZXQpIHtcbiAgICB2YXIgdHJhY2sgPSB0aGlzLl9hdWRpb1RyYWNrO1xuICAgIHZhciBpZDNEYXRhID0gaWQzW1wiZGVmYXVsdFwiXS5nZXRJRDNEYXRhKGRhdGEsIDApIHx8IFtdO1xuICAgIHZhciB0aW1lc3RhbXAgPSBpZDNbXCJkZWZhdWx0XCJdLmdldFRpbWVTdGFtcChpZDNEYXRhKTtcbiAgICB2YXIgcHRzID0gT2JqZWN0KG51bWJlcltcImlzRmluaXRlTnVtYmVyXCJdKSh0aW1lc3RhbXApID8gdGltZXN0YW1wICogOTAgOiB0aW1lT2Zmc2V0ICogOTAwMDA7XG4gICAgdmFyIGZyYW1lSW5kZXggPSAwO1xuICAgIHZhciBzdGFtcCA9IHB0cztcbiAgICB2YXIgbGVuZ3RoID0gZGF0YS5sZW5ndGg7XG4gICAgdmFyIG9mZnNldCA9IGlkM0RhdGEubGVuZ3RoO1xuICAgIHZhciBpZDNTYW1wbGVzID0gW3tcbiAgICAgIHB0czogc3RhbXAsXG4gICAgICBkdHM6IHN0YW1wLFxuICAgICAgZGF0YTogaWQzRGF0YVxuICAgIH1dO1xuXG4gICAgd2hpbGUgKG9mZnNldCA8IGxlbmd0aCAtIDEpIHtcbiAgICAgIGlmIChpc0hlYWRlcihkYXRhLCBvZmZzZXQpICYmIG9mZnNldCArIDUgPCBsZW5ndGgpIHtcbiAgICAgICAgaW5pdFRyYWNrQ29uZmlnKHRyYWNrLCB0aGlzLm9ic2VydmVyLCBkYXRhLCBvZmZzZXQsIHRyYWNrLm1hbmlmZXN0Q29kZWMpO1xuICAgICAgICB2YXIgZnJhbWUgPSBhcHBlbmRGcmFtZSh0cmFjaywgZGF0YSwgb2Zmc2V0LCBwdHMsIGZyYW1lSW5kZXgpO1xuXG4gICAgICAgIGlmIChmcmFtZSkge1xuICAgICAgICAgIG9mZnNldCArPSBmcmFtZS5sZW5ndGg7XG4gICAgICAgICAgc3RhbXAgPSBmcmFtZS5zYW1wbGUucHRzO1xuICAgICAgICAgIGZyYW1lSW5kZXgrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKCdVbmFibGUgdG8gcGFyc2UgQUFDIGZyYW1lJyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWQzW1wiZGVmYXVsdFwiXS5pc0hlYWRlcihkYXRhLCBvZmZzZXQpKSB7XG4gICAgICAgIGlkM0RhdGEgPSBpZDNbXCJkZWZhdWx0XCJdLmdldElEM0RhdGEoZGF0YSwgb2Zmc2V0KTtcbiAgICAgICAgaWQzU2FtcGxlcy5wdXNoKHtcbiAgICAgICAgICBwdHM6IHN0YW1wLFxuICAgICAgICAgIGR0czogc3RhbXAsXG4gICAgICAgICAgZGF0YTogaWQzRGF0YVxuICAgICAgICB9KTtcbiAgICAgICAgb2Zmc2V0ICs9IGlkM0RhdGEubGVuZ3RoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbm90aGluZyBmb3VuZCwga2VlcCBsb29raW5nXG4gICAgICAgIG9mZnNldCsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMucmVtdXhlci5yZW11eCh0cmFjaywge1xuICAgICAgc2FtcGxlczogW11cbiAgICB9LCB7XG4gICAgICBzYW1wbGVzOiBpZDNTYW1wbGVzLFxuICAgICAgaW5wdXRUaW1lU2NhbGU6IDkwMDAwXG4gICAgfSwge1xuICAgICAgc2FtcGxlczogW11cbiAgICB9LCB0aW1lT2Zmc2V0LCBjb250aWd1b3VzLCBhY2N1cmF0ZVRpbWVPZmZzZXQpO1xuICB9O1xuXG4gIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHt9O1xuXG4gIHJldHVybiBBQUNEZW11eGVyO1xufSgpO1xuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBhYWNkZW11eGVyID0gKGFhY2RlbXV4ZXJfQUFDRGVtdXhlcik7XG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vc3JjL2RlbXV4L21wNGRlbXV4ZXIuanNcbnZhciBtcDRkZW11eGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL2RlbXV4L21wNGRlbXV4ZXIuanNcIik7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2RlbXV4L21wZWdhdWRpby5qc1xuLyoqXG4gKiAgTVBFRyBwYXJzZXIgaGVscGVyXG4gKi9cbnZhciBNcGVnQXVkaW8gPSB7XG4gIEJpdHJhdGVzTWFwOiBbMzIsIDY0LCA5NiwgMTI4LCAxNjAsIDE5MiwgMjI0LCAyNTYsIDI4OCwgMzIwLCAzNTIsIDM4NCwgNDE2LCA0NDgsIDMyLCA0OCwgNTYsIDY0LCA4MCwgOTYsIDExMiwgMTI4LCAxNjAsIDE5MiwgMjI0LCAyNTYsIDMyMCwgMzg0LCAzMiwgNDAsIDQ4LCA1NiwgNjQsIDgwLCA5NiwgMTEyLCAxMjgsIDE2MCwgMTkyLCAyMjQsIDI1NiwgMzIwLCAzMiwgNDgsIDU2LCA2NCwgODAsIDk2LCAxMTIsIDEyOCwgMTQ0LCAxNjAsIDE3NiwgMTkyLCAyMjQsIDI1NiwgOCwgMTYsIDI0LCAzMiwgNDAsIDQ4LCA1NiwgNjQsIDgwLCA5NiwgMTEyLCAxMjgsIDE0NCwgMTYwXSxcbiAgU2FtcGxpbmdSYXRlTWFwOiBbNDQxMDAsIDQ4MDAwLCAzMjAwMCwgMjIwNTAsIDI0MDAwLCAxNjAwMCwgMTEwMjUsIDEyMDAwLCA4MDAwXSxcbiAgU2FtcGxlc0NvZWZmaWNpZW50czogWy8vIE1QRUcgMi41XG4gIFswLCAvLyBSZXNlcnZlZFxuICA3MiwgLy8gTGF5ZXIzXG4gIDE0NCwgLy8gTGF5ZXIyXG4gIDEyIC8vIExheWVyMVxuICBdLCAvLyBSZXNlcnZlZFxuICBbMCwgLy8gUmVzZXJ2ZWRcbiAgMCwgLy8gTGF5ZXIzXG4gIDAsIC8vIExheWVyMlxuICAwIC8vIExheWVyMVxuICBdLCAvLyBNUEVHIDJcbiAgWzAsIC8vIFJlc2VydmVkXG4gIDcyLCAvLyBMYXllcjNcbiAgMTQ0LCAvLyBMYXllcjJcbiAgMTIgLy8gTGF5ZXIxXG4gIF0sIC8vIE1QRUcgMVxuICBbMCwgLy8gUmVzZXJ2ZWRcbiAgMTQ0LCAvLyBMYXllcjNcbiAgMTQ0LCAvLyBMYXllcjJcbiAgMTIgLy8gTGF5ZXIxXG4gIF1dLFxuICBCeXRlc0luU2xvdDogWzAsIC8vIFJlc2VydmVkXG4gIDEsIC8vIExheWVyM1xuICAxLCAvLyBMYXllcjJcbiAgNCAvLyBMYXllcjFcbiAgXSxcbiAgYXBwZW5kRnJhbWU6IGZ1bmN0aW9uIGFwcGVuZEZyYW1lKHRyYWNrLCBkYXRhLCBvZmZzZXQsIHB0cywgZnJhbWVJbmRleCkge1xuICAgIC8vIFVzaW5nIGh0dHA6Ly93d3cuZGF0YXZveWFnZS5jb20vbXBnc2NyaXB0L21wZWdoZHIuaHRtIGFzIGEgcmVmZXJlbmNlXG4gICAgaWYgKG9mZnNldCArIDI0ID4gZGF0YS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdmFyIGhlYWRlciA9IHRoaXMucGFyc2VIZWFkZXIoZGF0YSwgb2Zmc2V0KTtcblxuICAgIGlmIChoZWFkZXIgJiYgb2Zmc2V0ICsgaGVhZGVyLmZyYW1lTGVuZ3RoIDw9IGRhdGEubGVuZ3RoKSB7XG4gICAgICB2YXIgZnJhbWVEdXJhdGlvbiA9IGhlYWRlci5zYW1wbGVzUGVyRnJhbWUgKiA5MDAwMCAvIGhlYWRlci5zYW1wbGVSYXRlO1xuICAgICAgdmFyIHN0YW1wID0gcHRzICsgZnJhbWVJbmRleCAqIGZyYW1lRHVyYXRpb247XG4gICAgICB2YXIgc2FtcGxlID0ge1xuICAgICAgICB1bml0OiBkYXRhLnN1YmFycmF5KG9mZnNldCwgb2Zmc2V0ICsgaGVhZGVyLmZyYW1lTGVuZ3RoKSxcbiAgICAgICAgcHRzOiBzdGFtcCxcbiAgICAgICAgZHRzOiBzdGFtcFxuICAgICAgfTtcbiAgICAgIHRyYWNrLmNvbmZpZyA9IFtdO1xuICAgICAgdHJhY2suY2hhbm5lbENvdW50ID0gaGVhZGVyLmNoYW5uZWxDb3VudDtcbiAgICAgIHRyYWNrLnNhbXBsZXJhdGUgPSBoZWFkZXIuc2FtcGxlUmF0ZTtcbiAgICAgIHRyYWNrLnNhbXBsZXMucHVzaChzYW1wbGUpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2FtcGxlOiBzYW1wbGUsXG4gICAgICAgIGxlbmd0aDogaGVhZGVyLmZyYW1lTGVuZ3RoXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0sXG4gIHBhcnNlSGVhZGVyOiBmdW5jdGlvbiBwYXJzZUhlYWRlcihkYXRhLCBvZmZzZXQpIHtcbiAgICB2YXIgaGVhZGVyQiA9IGRhdGFbb2Zmc2V0ICsgMV0gPj4gMyAmIDM7XG4gICAgdmFyIGhlYWRlckMgPSBkYXRhW29mZnNldCArIDFdID4+IDEgJiAzO1xuICAgIHZhciBoZWFkZXJFID0gZGF0YVtvZmZzZXQgKyAyXSA+PiA0ICYgMTU7XG4gICAgdmFyIGhlYWRlckYgPSBkYXRhW29mZnNldCArIDJdID4+IDIgJiAzO1xuICAgIHZhciBoZWFkZXJHID0gZGF0YVtvZmZzZXQgKyAyXSA+PiAxICYgMTtcblxuICAgIGlmIChoZWFkZXJCICE9PSAxICYmIGhlYWRlckUgIT09IDAgJiYgaGVhZGVyRSAhPT0gMTUgJiYgaGVhZGVyRiAhPT0gMykge1xuICAgICAgdmFyIGNvbHVtbkluQml0cmF0ZXMgPSBoZWFkZXJCID09PSAzID8gMyAtIGhlYWRlckMgOiBoZWFkZXJDID09PSAzID8gMyA6IDQ7XG4gICAgICB2YXIgYml0UmF0ZSA9IE1wZWdBdWRpby5CaXRyYXRlc01hcFtjb2x1bW5JbkJpdHJhdGVzICogMTQgKyBoZWFkZXJFIC0gMV0gKiAxMDAwO1xuICAgICAgdmFyIGNvbHVtbkluU2FtcGxlUmF0ZXMgPSBoZWFkZXJCID09PSAzID8gMCA6IGhlYWRlckIgPT09IDIgPyAxIDogMjtcbiAgICAgIHZhciBzYW1wbGVSYXRlID0gTXBlZ0F1ZGlvLlNhbXBsaW5nUmF0ZU1hcFtjb2x1bW5JblNhbXBsZVJhdGVzICogMyArIGhlYWRlckZdO1xuICAgICAgdmFyIGNoYW5uZWxDb3VudCA9IGRhdGFbb2Zmc2V0ICsgM10gPj4gNiA9PT0gMyA/IDEgOiAyOyAvLyBJZiBiaXRzIG9mIGNoYW5uZWwgbW9kZSBhcmUgYDExYCB0aGVuIGl0IGlzIGEgc2luZ2xlIGNoYW5uZWwgKE1vbm8pXG5cbiAgICAgIHZhciBzYW1wbGVDb2VmZmljaWVudCA9IE1wZWdBdWRpby5TYW1wbGVzQ29lZmZpY2llbnRzW2hlYWRlckJdW2hlYWRlckNdO1xuICAgICAgdmFyIGJ5dGVzSW5TbG90ID0gTXBlZ0F1ZGlvLkJ5dGVzSW5TbG90W2hlYWRlckNdO1xuICAgICAgdmFyIHNhbXBsZXNQZXJGcmFtZSA9IHNhbXBsZUNvZWZmaWNpZW50ICogOCAqIGJ5dGVzSW5TbG90O1xuICAgICAgdmFyIGZyYW1lTGVuZ3RoID0gcGFyc2VJbnQoc2FtcGxlQ29lZmZpY2llbnQgKiBiaXRSYXRlIC8gc2FtcGxlUmF0ZSArIGhlYWRlckcsIDEwKSAqIGJ5dGVzSW5TbG90O1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2FtcGxlUmF0ZTogc2FtcGxlUmF0ZSxcbiAgICAgICAgY2hhbm5lbENvdW50OiBjaGFubmVsQ291bnQsXG4gICAgICAgIGZyYW1lTGVuZ3RoOiBmcmFtZUxlbmd0aCxcbiAgICAgICAgc2FtcGxlc1BlckZyYW1lOiBzYW1wbGVzUGVyRnJhbWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSxcbiAgaXNIZWFkZXJQYXR0ZXJuOiBmdW5jdGlvbiBpc0hlYWRlclBhdHRlcm4oZGF0YSwgb2Zmc2V0KSB7XG4gICAgcmV0dXJuIGRhdGFbb2Zmc2V0XSA9PT0gMHhmZiAmJiAoZGF0YVtvZmZzZXQgKyAxXSAmIDB4ZTApID09PSAweGUwICYmIChkYXRhW29mZnNldCArIDFdICYgMHgwNikgIT09IDB4MDA7XG4gIH0sXG4gIGlzSGVhZGVyOiBmdW5jdGlvbiBpc0hlYWRlcihkYXRhLCBvZmZzZXQpIHtcbiAgICAvLyBMb29rIGZvciBNUEVHIGhlYWRlciB8IDExMTEgMTExMSB8IDExMVggWFlaWCB8IHdoZXJlIFggY2FuIGJlIGVpdGhlciAwIG9yIDEgYW5kIFkgb3IgWiBzaG91bGQgYmUgMVxuICAgIC8vIExheWVyIGJpdHMgKHBvc2l0aW9uIDE0IGFuZCAxNSkgaW4gaGVhZGVyIHNob3VsZCBiZSBhbHdheXMgZGlmZmVyZW50IGZyb20gMCAoTGF5ZXIgSSBvciBMYXllciBJSSBvciBMYXllciBJSUkpXG4gICAgLy8gTW9yZSBpbmZvIGh0dHA6Ly93d3cubXAzLXRlY2gub3JnL3Byb2dyYW1tZXIvZnJhbWVfaGVhZGVyLmh0bWxcbiAgICBpZiAob2Zmc2V0ICsgMSA8IGRhdGEubGVuZ3RoICYmIHRoaXMuaXNIZWFkZXJQYXR0ZXJuKGRhdGEsIG9mZnNldCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgcHJvYmU6IGZ1bmN0aW9uIHByb2JlKGRhdGEsIG9mZnNldCkge1xuICAgIC8vIHNhbWUgYXMgaXNIZWFkZXIgYnV0IHdlIGFsc28gY2hlY2sgdGhhdCBNUEVHIGZyYW1lIGZvbGxvd3MgbGFzdCBNUEVHIGZyYW1lXG4gICAgLy8gb3IgZW5kIG9mIGRhdGEgaXMgcmVhY2hlZFxuICAgIGlmIChvZmZzZXQgKyAxIDwgZGF0YS5sZW5ndGggJiYgdGhpcy5pc0hlYWRlclBhdHRlcm4oZGF0YSwgb2Zmc2V0KSkge1xuICAgICAgLy8gTVBFRyBoZWFkZXIgTGVuZ3RoXG4gICAgICB2YXIgaGVhZGVyTGVuZ3RoID0gNDsgLy8gTVBFRyBmcmFtZSBMZW5ndGhcblxuICAgICAgdmFyIGhlYWRlciA9IHRoaXMucGFyc2VIZWFkZXIoZGF0YSwgb2Zmc2V0KTtcbiAgICAgIHZhciBmcmFtZUxlbmd0aCA9IGhlYWRlckxlbmd0aDtcblxuICAgICAgaWYgKGhlYWRlciAmJiBoZWFkZXIuZnJhbWVMZW5ndGgpIHtcbiAgICAgICAgZnJhbWVMZW5ndGggPSBoZWFkZXIuZnJhbWVMZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIHZhciBuZXdPZmZzZXQgPSBvZmZzZXQgKyBmcmFtZUxlbmd0aDtcblxuICAgICAgaWYgKG5ld09mZnNldCA9PT0gZGF0YS5sZW5ndGggfHwgbmV3T2Zmc2V0ICsgMSA8IGRhdGEubGVuZ3RoICYmIHRoaXMuaXNIZWFkZXJQYXR0ZXJuKGRhdGEsIG5ld09mZnNldCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgbXBlZ2F1ZGlvID0gKE1wZWdBdWRpbyk7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9kZW11eC9leHAtZ29sb21iLmpzXG4vKipcbiAqIFBhcnNlciBmb3IgZXhwb25lbnRpYWwgR29sb21iIGNvZGVzLCBhIHZhcmlhYmxlLWJpdHdpZHRoIG51bWJlciBlbmNvZGluZyBzY2hlbWUgdXNlZCBieSBoMjY0LlxuKi9cblxuXG52YXIgZXhwX2dvbG9tYl9FeHBHb2xvbWIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBFeHBHb2xvbWIoZGF0YSkge1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7IC8vIHRoZSBudW1iZXIgb2YgYnl0ZXMgbGVmdCB0byBleGFtaW5lIGluIHRoaXMuZGF0YVxuXG4gICAgdGhpcy5ieXRlc0F2YWlsYWJsZSA9IGRhdGEuYnl0ZUxlbmd0aDsgLy8gdGhlIGN1cnJlbnQgd29yZCBiZWluZyBleGFtaW5lZFxuXG4gICAgdGhpcy53b3JkID0gMDsgLy8gOnVpbnRcbiAgICAvLyB0aGUgbnVtYmVyIG9mIGJpdHMgbGVmdCB0byBleGFtaW5lIGluIHRoZSBjdXJyZW50IHdvcmRcblxuICAgIHRoaXMuYml0c0F2YWlsYWJsZSA9IDA7IC8vIDp1aW50XG4gIH0gLy8gKCk6dm9pZFxuXG5cbiAgdmFyIF9wcm90byA9IEV4cEdvbG9tYi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmxvYWRXb3JkID0gZnVuY3Rpb24gbG9hZFdvcmQoKSB7XG4gICAgdmFyIGRhdGEgPSB0aGlzLmRhdGEsXG4gICAgICAgIGJ5dGVzQXZhaWxhYmxlID0gdGhpcy5ieXRlc0F2YWlsYWJsZSxcbiAgICAgICAgcG9zaXRpb24gPSBkYXRhLmJ5dGVMZW5ndGggLSBieXRlc0F2YWlsYWJsZSxcbiAgICAgICAgd29ya2luZ0J5dGVzID0gbmV3IFVpbnQ4QXJyYXkoNCksXG4gICAgICAgIGF2YWlsYWJsZUJ5dGVzID0gTWF0aC5taW4oNCwgYnl0ZXNBdmFpbGFibGUpO1xuXG4gICAgaWYgKGF2YWlsYWJsZUJ5dGVzID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vIGJ5dGVzIGF2YWlsYWJsZScpO1xuICAgIH1cblxuICAgIHdvcmtpbmdCeXRlcy5zZXQoZGF0YS5zdWJhcnJheShwb3NpdGlvbiwgcG9zaXRpb24gKyBhdmFpbGFibGVCeXRlcykpO1xuICAgIHRoaXMud29yZCA9IG5ldyBEYXRhVmlldyh3b3JraW5nQnl0ZXMuYnVmZmVyKS5nZXRVaW50MzIoMCk7IC8vIHRyYWNrIHRoZSBhbW91bnQgb2YgdGhpcy5kYXRhIHRoYXQgaGFzIGJlZW4gcHJvY2Vzc2VkXG5cbiAgICB0aGlzLmJpdHNBdmFpbGFibGUgPSBhdmFpbGFibGVCeXRlcyAqIDg7XG4gICAgdGhpcy5ieXRlc0F2YWlsYWJsZSAtPSBhdmFpbGFibGVCeXRlcztcbiAgfSAvLyAoY291bnQ6aW50KTp2b2lkXG4gIDtcblxuICBfcHJvdG8uc2tpcEJpdHMgPSBmdW5jdGlvbiBza2lwQml0cyhjb3VudCkge1xuICAgIHZhciBza2lwQnl0ZXM7IC8vIDppbnRcblxuICAgIGlmICh0aGlzLmJpdHNBdmFpbGFibGUgPiBjb3VudCkge1xuICAgICAgdGhpcy53b3JkIDw8PSBjb3VudDtcbiAgICAgIHRoaXMuYml0c0F2YWlsYWJsZSAtPSBjb3VudDtcbiAgICB9IGVsc2Uge1xuICAgICAgY291bnQgLT0gdGhpcy5iaXRzQXZhaWxhYmxlO1xuICAgICAgc2tpcEJ5dGVzID0gY291bnQgPj4gMztcbiAgICAgIGNvdW50IC09IHNraXBCeXRlcyA+PiAzO1xuICAgICAgdGhpcy5ieXRlc0F2YWlsYWJsZSAtPSBza2lwQnl0ZXM7XG4gICAgICB0aGlzLmxvYWRXb3JkKCk7XG4gICAgICB0aGlzLndvcmQgPDw9IGNvdW50O1xuICAgICAgdGhpcy5iaXRzQXZhaWxhYmxlIC09IGNvdW50O1xuICAgIH1cbiAgfSAvLyAoc2l6ZTppbnQpOnVpbnRcbiAgO1xuXG4gIF9wcm90by5yZWFkQml0cyA9IGZ1bmN0aW9uIHJlYWRCaXRzKHNpemUpIHtcbiAgICB2YXIgYml0cyA9IE1hdGgubWluKHRoaXMuYml0c0F2YWlsYWJsZSwgc2l6ZSksXG4gICAgICAgIC8vIDp1aW50XG4gICAgdmFsdSA9IHRoaXMud29yZCA+Pj4gMzIgLSBiaXRzOyAvLyA6dWludFxuXG4gICAgaWYgKHNpemUgPiAzMikge1xuICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmVycm9yKCdDYW5ub3QgcmVhZCBtb3JlIHRoYW4gMzIgYml0cyBhdCBhIHRpbWUnKTtcbiAgICB9XG5cbiAgICB0aGlzLmJpdHNBdmFpbGFibGUgLT0gYml0cztcblxuICAgIGlmICh0aGlzLmJpdHNBdmFpbGFibGUgPiAwKSB7XG4gICAgICB0aGlzLndvcmQgPDw9IGJpdHM7XG4gICAgfSBlbHNlIGlmICh0aGlzLmJ5dGVzQXZhaWxhYmxlID4gMCkge1xuICAgICAgdGhpcy5sb2FkV29yZCgpO1xuICAgIH1cblxuICAgIGJpdHMgPSBzaXplIC0gYml0cztcblxuICAgIGlmIChiaXRzID4gMCAmJiB0aGlzLmJpdHNBdmFpbGFibGUpIHtcbiAgICAgIHJldHVybiB2YWx1IDw8IGJpdHMgfCB0aGlzLnJlYWRCaXRzKGJpdHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdmFsdTtcbiAgICB9XG4gIH0gLy8gKCk6dWludFxuICA7XG5cbiAgX3Byb3RvLnNraXBMWiA9IGZ1bmN0aW9uIHNraXBMWigpIHtcbiAgICB2YXIgbGVhZGluZ1plcm9Db3VudDsgLy8gOnVpbnRcblxuICAgIGZvciAobGVhZGluZ1plcm9Db3VudCA9IDA7IGxlYWRpbmdaZXJvQ291bnQgPCB0aGlzLmJpdHNBdmFpbGFibGU7ICsrbGVhZGluZ1plcm9Db3VudCkge1xuICAgICAgaWYgKCh0aGlzLndvcmQgJiAweDgwMDAwMDAwID4+PiBsZWFkaW5nWmVyb0NvdW50KSAhPT0gMCkge1xuICAgICAgICAvLyB0aGUgZmlyc3QgYml0IG9mIHdvcmtpbmcgd29yZCBpcyAxXG4gICAgICAgIHRoaXMud29yZCA8PD0gbGVhZGluZ1plcm9Db3VudDtcbiAgICAgICAgdGhpcy5iaXRzQXZhaWxhYmxlIC09IGxlYWRpbmdaZXJvQ291bnQ7XG4gICAgICAgIHJldHVybiBsZWFkaW5nWmVyb0NvdW50O1xuICAgICAgfVxuICAgIH0gLy8gd2UgZXhoYXVzdGVkIHdvcmQgYW5kIHN0aWxsIGhhdmUgbm90IGZvdW5kIGEgMVxuXG5cbiAgICB0aGlzLmxvYWRXb3JkKCk7XG4gICAgcmV0dXJuIGxlYWRpbmdaZXJvQ291bnQgKyB0aGlzLnNraXBMWigpO1xuICB9IC8vICgpOnZvaWRcbiAgO1xuXG4gIF9wcm90by5za2lwVUVHID0gZnVuY3Rpb24gc2tpcFVFRygpIHtcbiAgICB0aGlzLnNraXBCaXRzKDEgKyB0aGlzLnNraXBMWigpKTtcbiAgfSAvLyAoKTp2b2lkXG4gIDtcblxuICBfcHJvdG8uc2tpcEVHID0gZnVuY3Rpb24gc2tpcEVHKCkge1xuICAgIHRoaXMuc2tpcEJpdHMoMSArIHRoaXMuc2tpcExaKCkpO1xuICB9IC8vICgpOnVpbnRcbiAgO1xuXG4gIF9wcm90by5yZWFkVUVHID0gZnVuY3Rpb24gcmVhZFVFRygpIHtcbiAgICB2YXIgY2x6ID0gdGhpcy5za2lwTFooKTsgLy8gOnVpbnRcblxuICAgIHJldHVybiB0aGlzLnJlYWRCaXRzKGNseiArIDEpIC0gMTtcbiAgfSAvLyAoKTppbnRcbiAgO1xuXG4gIF9wcm90by5yZWFkRUcgPSBmdW5jdGlvbiByZWFkRUcoKSB7XG4gICAgdmFyIHZhbHUgPSB0aGlzLnJlYWRVRUcoKTsgLy8gOmludFxuXG4gICAgaWYgKDB4MDEgJiB2YWx1KSB7XG4gICAgICAvLyB0aGUgbnVtYmVyIGlzIG9kZCBpZiB0aGUgbG93IG9yZGVyIGJpdCBpcyBzZXRcbiAgICAgIHJldHVybiAxICsgdmFsdSA+Pj4gMTsgLy8gYWRkIDEgdG8gbWFrZSBpdCBldmVuLCBhbmQgZGl2aWRlIGJ5IDJcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC0xICogKHZhbHUgPj4+IDEpOyAvLyBkaXZpZGUgYnkgdHdvIHRoZW4gbWFrZSBpdCBuZWdhdGl2ZVxuICAgIH1cbiAgfSAvLyBTb21lIGNvbnZlbmllbmNlIGZ1bmN0aW9uc1xuICAvLyA6Qm9vbGVhblxuICA7XG5cbiAgX3Byb3RvLnJlYWRCb29sZWFuID0gZnVuY3Rpb24gcmVhZEJvb2xlYW4oKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZEJpdHMoMSkgPT09IDE7XG4gIH0gLy8gKCk6aW50XG4gIDtcblxuICBfcHJvdG8ucmVhZFVCeXRlID0gZnVuY3Rpb24gcmVhZFVCeXRlKCkge1xuICAgIHJldHVybiB0aGlzLnJlYWRCaXRzKDgpO1xuICB9IC8vICgpOmludFxuICA7XG5cbiAgX3Byb3RvLnJlYWRVU2hvcnQgPSBmdW5jdGlvbiByZWFkVVNob3J0KCkge1xuICAgIHJldHVybiB0aGlzLnJlYWRCaXRzKDE2KTtcbiAgfSAvLyAoKTppbnRcbiAgO1xuXG4gIF9wcm90by5yZWFkVUludCA9IGZ1bmN0aW9uIHJlYWRVSW50KCkge1xuICAgIHJldHVybiB0aGlzLnJlYWRCaXRzKDMyKTtcbiAgfVxuICAvKipcbiAgICogQWR2YW5jZSB0aGUgRXhwR29sb21iIGRlY29kZXIgcGFzdCBhIHNjYWxpbmcgbGlzdC4gVGhlIHNjYWxpbmdcbiAgICogbGlzdCBpcyBvcHRpb25hbGx5IHRyYW5zbWl0dGVkIGFzIHBhcnQgb2YgYSBzZXF1ZW5jZSBwYXJhbWV0ZXJcbiAgICogc2V0IGFuZCBpcyBub3QgcmVsZXZhbnQgdG8gdHJhbnNtdXhpbmcuXG4gICAqIEBwYXJhbSBjb3VudCB7bnVtYmVyfSB0aGUgbnVtYmVyIG9mIGVudHJpZXMgaW4gdGhpcyBzY2FsaW5nIGxpc3RcbiAgICogQHNlZSBSZWNvbW1lbmRhdGlvbiBJVFUtVCBILjI2NCwgU2VjdGlvbiA3LjMuMi4xLjEuMVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5za2lwU2NhbGluZ0xpc3QgPSBmdW5jdGlvbiBza2lwU2NhbGluZ0xpc3QoY291bnQpIHtcbiAgICB2YXIgbGFzdFNjYWxlID0gOCxcbiAgICAgICAgbmV4dFNjYWxlID0gOCxcbiAgICAgICAgaixcbiAgICAgICAgZGVsdGFTY2FsZTtcblxuICAgIGZvciAoaiA9IDA7IGogPCBjb3VudDsgaisrKSB7XG4gICAgICBpZiAobmV4dFNjYWxlICE9PSAwKSB7XG4gICAgICAgIGRlbHRhU2NhbGUgPSB0aGlzLnJlYWRFRygpO1xuICAgICAgICBuZXh0U2NhbGUgPSAobGFzdFNjYWxlICsgZGVsdGFTY2FsZSArIDI1NikgJSAyNTY7XG4gICAgICB9XG5cbiAgICAgIGxhc3RTY2FsZSA9IG5leHRTY2FsZSA9PT0gMCA/IGxhc3RTY2FsZSA6IG5leHRTY2FsZTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWQgYSBzZXF1ZW5jZSBwYXJhbWV0ZXIgc2V0IGFuZCByZXR1cm4gc29tZSBpbnRlcmVzdGluZyB2aWRlb1xuICAgKiBwcm9wZXJ0aWVzLiBBIHNlcXVlbmNlIHBhcmFtZXRlciBzZXQgaXMgdGhlIEgyNjQgbWV0YWRhdGEgdGhhdFxuICAgKiBkZXNjcmliZXMgdGhlIHByb3BlcnRpZXMgb2YgdXBjb21pbmcgdmlkZW8gZnJhbWVzLlxuICAgKiBAcGFyYW0gZGF0YSB7VWludDhBcnJheX0gdGhlIGJ5dGVzIG9mIGEgc2VxdWVuY2UgcGFyYW1ldGVyIHNldFxuICAgKiBAcmV0dXJuIHtvYmplY3R9IGFuIG9iamVjdCB3aXRoIGNvbmZpZ3VyYXRpb24gcGFyc2VkIGZyb20gdGhlXG4gICAqIHNlcXVlbmNlIHBhcmFtZXRlciBzZXQsIGluY2x1ZGluZyB0aGUgZGltZW5zaW9ucyBvZiB0aGVcbiAgICogYXNzb2NpYXRlZCB2aWRlbyBmcmFtZXMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlYWRTUFMgPSBmdW5jdGlvbiByZWFkU1BTKCkge1xuICAgIHZhciBmcmFtZUNyb3BMZWZ0T2Zmc2V0ID0gMCxcbiAgICAgICAgZnJhbWVDcm9wUmlnaHRPZmZzZXQgPSAwLFxuICAgICAgICBmcmFtZUNyb3BUb3BPZmZzZXQgPSAwLFxuICAgICAgICBmcmFtZUNyb3BCb3R0b21PZmZzZXQgPSAwLFxuICAgICAgICBwcm9maWxlSWRjLFxuICAgICAgICBwcm9maWxlQ29tcGF0LFxuICAgICAgICBsZXZlbElkYyxcbiAgICAgICAgbnVtUmVmRnJhbWVzSW5QaWNPcmRlckNudEN5Y2xlLFxuICAgICAgICBwaWNXaWR0aEluTWJzTWludXMxLFxuICAgICAgICBwaWNIZWlnaHRJbk1hcFVuaXRzTWludXMxLFxuICAgICAgICBmcmFtZU1ic09ubHlGbGFnLFxuICAgICAgICBzY2FsaW5nTGlzdENvdW50LFxuICAgICAgICBpLFxuICAgICAgICByZWFkVUJ5dGUgPSB0aGlzLnJlYWRVQnl0ZS5iaW5kKHRoaXMpLFxuICAgICAgICByZWFkQml0cyA9IHRoaXMucmVhZEJpdHMuYmluZCh0aGlzKSxcbiAgICAgICAgcmVhZFVFRyA9IHRoaXMucmVhZFVFRy5iaW5kKHRoaXMpLFxuICAgICAgICByZWFkQm9vbGVhbiA9IHRoaXMucmVhZEJvb2xlYW4uYmluZCh0aGlzKSxcbiAgICAgICAgc2tpcEJpdHMgPSB0aGlzLnNraXBCaXRzLmJpbmQodGhpcyksXG4gICAgICAgIHNraXBFRyA9IHRoaXMuc2tpcEVHLmJpbmQodGhpcyksXG4gICAgICAgIHNraXBVRUcgPSB0aGlzLnNraXBVRUcuYmluZCh0aGlzKSxcbiAgICAgICAgc2tpcFNjYWxpbmdMaXN0ID0gdGhpcy5za2lwU2NhbGluZ0xpc3QuYmluZCh0aGlzKTtcbiAgICByZWFkVUJ5dGUoKTtcbiAgICBwcm9maWxlSWRjID0gcmVhZFVCeXRlKCk7IC8vIHByb2ZpbGVfaWRjXG5cbiAgICBwcm9maWxlQ29tcGF0ID0gcmVhZEJpdHMoNSk7IC8vIGNvbnN0cmFpbnRfc2V0WzAtNF1fZmxhZywgdSg1KVxuXG4gICAgc2tpcEJpdHMoMyk7IC8vIHJlc2VydmVkX3plcm9fM2JpdHMgdSgzKSxcblxuICAgIGxldmVsSWRjID0gcmVhZFVCeXRlKCk7IC8vIGxldmVsX2lkYyB1KDgpXG5cbiAgICBza2lwVUVHKCk7IC8vIHNlcV9wYXJhbWV0ZXJfc2V0X2lkXG4gICAgLy8gc29tZSBwcm9maWxlcyBoYXZlIG1vcmUgb3B0aW9uYWwgZGF0YSB3ZSBkb24ndCBuZWVkXG5cbiAgICBpZiAocHJvZmlsZUlkYyA9PT0gMTAwIHx8IHByb2ZpbGVJZGMgPT09IDExMCB8fCBwcm9maWxlSWRjID09PSAxMjIgfHwgcHJvZmlsZUlkYyA9PT0gMjQ0IHx8IHByb2ZpbGVJZGMgPT09IDQ0IHx8IHByb2ZpbGVJZGMgPT09IDgzIHx8IHByb2ZpbGVJZGMgPT09IDg2IHx8IHByb2ZpbGVJZGMgPT09IDExOCB8fCBwcm9maWxlSWRjID09PSAxMjgpIHtcbiAgICAgIHZhciBjaHJvbWFGb3JtYXRJZGMgPSByZWFkVUVHKCk7XG5cbiAgICAgIGlmIChjaHJvbWFGb3JtYXRJZGMgPT09IDMpIHtcbiAgICAgICAgc2tpcEJpdHMoMSk7XG4gICAgICB9IC8vIHNlcGFyYXRlX2NvbG91cl9wbGFuZV9mbGFnXG5cblxuICAgICAgc2tpcFVFRygpOyAvLyBiaXRfZGVwdGhfbHVtYV9taW51czhcblxuICAgICAgc2tpcFVFRygpOyAvLyBiaXRfZGVwdGhfY2hyb21hX21pbnVzOFxuXG4gICAgICBza2lwQml0cygxKTsgLy8gcXBwcmltZV95X3plcm9fdHJhbnNmb3JtX2J5cGFzc19mbGFnXG5cbiAgICAgIGlmIChyZWFkQm9vbGVhbigpKSB7XG4gICAgICAgIC8vIHNlcV9zY2FsaW5nX21hdHJpeF9wcmVzZW50X2ZsYWdcbiAgICAgICAgc2NhbGluZ0xpc3RDb3VudCA9IGNocm9tYUZvcm1hdElkYyAhPT0gMyA/IDggOiAxMjtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2NhbGluZ0xpc3RDb3VudDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHJlYWRCb29sZWFuKCkpIHtcbiAgICAgICAgICAgIC8vIHNlcV9zY2FsaW5nX2xpc3RfcHJlc2VudF9mbGFnWyBpIF1cbiAgICAgICAgICAgIGlmIChpIDwgNikge1xuICAgICAgICAgICAgICBza2lwU2NhbGluZ0xpc3QoMTYpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2tpcFNjYWxpbmdMaXN0KDY0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBza2lwVUVHKCk7IC8vIGxvZzJfbWF4X2ZyYW1lX251bV9taW51czRcblxuICAgIHZhciBwaWNPcmRlckNudFR5cGUgPSByZWFkVUVHKCk7XG5cbiAgICBpZiAocGljT3JkZXJDbnRUeXBlID09PSAwKSB7XG4gICAgICByZWFkVUVHKCk7IC8vIGxvZzJfbWF4X3BpY19vcmRlcl9jbnRfbHNiX21pbnVzNFxuICAgIH0gZWxzZSBpZiAocGljT3JkZXJDbnRUeXBlID09PSAxKSB7XG4gICAgICBza2lwQml0cygxKTsgLy8gZGVsdGFfcGljX29yZGVyX2Fsd2F5c196ZXJvX2ZsYWdcblxuICAgICAgc2tpcEVHKCk7IC8vIG9mZnNldF9mb3Jfbm9uX3JlZl9waWNcblxuICAgICAgc2tpcEVHKCk7IC8vIG9mZnNldF9mb3JfdG9wX3RvX2JvdHRvbV9maWVsZFxuXG4gICAgICBudW1SZWZGcmFtZXNJblBpY09yZGVyQ250Q3ljbGUgPSByZWFkVUVHKCk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1SZWZGcmFtZXNJblBpY09yZGVyQ250Q3ljbGU7IGkrKykge1xuICAgICAgICBza2lwRUcoKTtcbiAgICAgIH0gLy8gb2Zmc2V0X2Zvcl9yZWZfZnJhbWVbIGkgXVxuXG4gICAgfVxuXG4gICAgc2tpcFVFRygpOyAvLyBtYXhfbnVtX3JlZl9mcmFtZXNcblxuICAgIHNraXBCaXRzKDEpOyAvLyBnYXBzX2luX2ZyYW1lX251bV92YWx1ZV9hbGxvd2VkX2ZsYWdcblxuICAgIHBpY1dpZHRoSW5NYnNNaW51czEgPSByZWFkVUVHKCk7XG4gICAgcGljSGVpZ2h0SW5NYXBVbml0c01pbnVzMSA9IHJlYWRVRUcoKTtcbiAgICBmcmFtZU1ic09ubHlGbGFnID0gcmVhZEJpdHMoMSk7XG5cbiAgICBpZiAoZnJhbWVNYnNPbmx5RmxhZyA9PT0gMCkge1xuICAgICAgc2tpcEJpdHMoMSk7XG4gICAgfSAvLyBtYl9hZGFwdGl2ZV9mcmFtZV9maWVsZF9mbGFnXG5cblxuICAgIHNraXBCaXRzKDEpOyAvLyBkaXJlY3RfOHg4X2luZmVyZW5jZV9mbGFnXG5cbiAgICBpZiAocmVhZEJvb2xlYW4oKSkge1xuICAgICAgLy8gZnJhbWVfY3JvcHBpbmdfZmxhZ1xuICAgICAgZnJhbWVDcm9wTGVmdE9mZnNldCA9IHJlYWRVRUcoKTtcbiAgICAgIGZyYW1lQ3JvcFJpZ2h0T2Zmc2V0ID0gcmVhZFVFRygpO1xuICAgICAgZnJhbWVDcm9wVG9wT2Zmc2V0ID0gcmVhZFVFRygpO1xuICAgICAgZnJhbWVDcm9wQm90dG9tT2Zmc2V0ID0gcmVhZFVFRygpO1xuICAgIH1cblxuICAgIHZhciBwaXhlbFJhdGlvID0gWzEsIDFdO1xuXG4gICAgaWYgKHJlYWRCb29sZWFuKCkpIHtcbiAgICAgIC8vIHZ1aV9wYXJhbWV0ZXJzX3ByZXNlbnRfZmxhZ1xuICAgICAgaWYgKHJlYWRCb29sZWFuKCkpIHtcbiAgICAgICAgLy8gYXNwZWN0X3JhdGlvX2luZm9fcHJlc2VudF9mbGFnXG4gICAgICAgIHZhciBhc3BlY3RSYXRpb0lkYyA9IHJlYWRVQnl0ZSgpO1xuXG4gICAgICAgIHN3aXRjaCAoYXNwZWN0UmF0aW9JZGMpIHtcbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBwaXhlbFJhdGlvID0gWzEsIDFdO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBwaXhlbFJhdGlvID0gWzEyLCAxMV07XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHBpeGVsUmF0aW8gPSBbMTAsIDExXTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgcGl4ZWxSYXRpbyA9IFsxNiwgMTFdO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICBwaXhlbFJhdGlvID0gWzQwLCAzM107XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgIHBpeGVsUmF0aW8gPSBbMjQsIDExXTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgcGl4ZWxSYXRpbyA9IFsyMCwgMTFdO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICBwaXhlbFJhdGlvID0gWzMyLCAxMV07XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIHBpeGVsUmF0aW8gPSBbODAsIDMzXTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgIHBpeGVsUmF0aW8gPSBbMTgsIDExXTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgIHBpeGVsUmF0aW8gPSBbMTUsIDExXTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgIHBpeGVsUmF0aW8gPSBbNjQsIDMzXTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgIHBpeGVsUmF0aW8gPSBbMTYwLCA5OV07XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgICBwaXhlbFJhdGlvID0gWzQsIDNdO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDE1OlxuICAgICAgICAgICAgcGl4ZWxSYXRpbyA9IFszLCAyXTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxNjpcbiAgICAgICAgICAgIHBpeGVsUmF0aW8gPSBbMiwgMV07XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjU1OlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBwaXhlbFJhdGlvID0gW3JlYWRVQnl0ZSgpIDw8IDggfCByZWFkVUJ5dGUoKSwgcmVhZFVCeXRlKCkgPDwgOCB8IHJlYWRVQnl0ZSgpXTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgd2lkdGg6IE1hdGguY2VpbCgocGljV2lkdGhJbk1ic01pbnVzMSArIDEpICogMTYgLSBmcmFtZUNyb3BMZWZ0T2Zmc2V0ICogMiAtIGZyYW1lQ3JvcFJpZ2h0T2Zmc2V0ICogMiksXG4gICAgICBoZWlnaHQ6ICgyIC0gZnJhbWVNYnNPbmx5RmxhZykgKiAocGljSGVpZ2h0SW5NYXBVbml0c01pbnVzMSArIDEpICogMTYgLSAoZnJhbWVNYnNPbmx5RmxhZyA/IDIgOiA0KSAqIChmcmFtZUNyb3BUb3BPZmZzZXQgKyBmcmFtZUNyb3BCb3R0b21PZmZzZXQpLFxuICAgICAgcGl4ZWxSYXRpbzogcGl4ZWxSYXRpb1xuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnJlYWRTbGljZVR5cGUgPSBmdW5jdGlvbiByZWFkU2xpY2VUeXBlKCkge1xuICAgIC8vIHNraXAgTkFMdSB0eXBlXG4gICAgdGhpcy5yZWFkVUJ5dGUoKTsgLy8gZGlzY2FyZCBmaXJzdF9tYl9pbl9zbGljZVxuXG4gICAgdGhpcy5yZWFkVUVHKCk7IC8vIHJldHVybiBzbGljZV90eXBlXG5cbiAgICByZXR1cm4gdGhpcy5yZWFkVUVHKCk7XG4gIH07XG5cbiAgcmV0dXJuIEV4cEdvbG9tYjtcbn0oKTtcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgZXhwX2dvbG9tYiA9IChleHBfZ29sb21iX0V4cEdvbG9tYik7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9kZW11eC9zYW1wbGUtYWVzLmpzXG4vKipcbiAqIFNBTVBMRS1BRVMgZGVjcnlwdGVyXG4qL1xuXG5cbnZhciBzYW1wbGVfYWVzX1NhbXBsZUFlc0RlY3J5cHRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNhbXBsZUFlc0RlY3J5cHRlcihvYnNlcnZlciwgY29uZmlnLCBkZWNyeXB0ZGF0YSwgZGlzY2FyZEVQQikge1xuICAgIHRoaXMuZGVjcnlwdGRhdGEgPSBkZWNyeXB0ZGF0YTtcbiAgICB0aGlzLmRpc2NhcmRFUEIgPSBkaXNjYXJkRVBCO1xuICAgIHRoaXMuZGVjcnlwdGVyID0gbmV3IGNyeXB0X2RlY3J5cHRlcltcImRlZmF1bHRcIl0ob2JzZXJ2ZXIsIGNvbmZpZywge1xuICAgICAgcmVtb3ZlUEtDUzdQYWRkaW5nOiBmYWxzZVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNhbXBsZUFlc0RlY3J5cHRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmRlY3J5cHRCdWZmZXIgPSBmdW5jdGlvbiBkZWNyeXB0QnVmZmVyKGVuY3J5cHRlZERhdGEsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5kZWNyeXB0ZXIuZGVjcnlwdChlbmNyeXB0ZWREYXRhLCB0aGlzLmRlY3J5cHRkYXRhLmtleS5idWZmZXIsIHRoaXMuZGVjcnlwdGRhdGEuaXYuYnVmZmVyLCBjYWxsYmFjayk7XG4gIH0gLy8gQUFDIC0gZW5jcnlwdCBhbGwgZnVsbCAxNiBieXRlcyBibG9ja3Mgc3RhcnRpbmcgZnJvbSBvZmZzZXQgMTZcbiAgO1xuXG4gIF9wcm90by5kZWNyeXB0QWFjU2FtcGxlID0gZnVuY3Rpb24gZGVjcnlwdEFhY1NhbXBsZShzYW1wbGVzLCBzYW1wbGVJbmRleCwgY2FsbGJhY2ssIHN5bmMpIHtcbiAgICB2YXIgY3VyVW5pdCA9IHNhbXBsZXNbc2FtcGxlSW5kZXhdLnVuaXQ7XG4gICAgdmFyIGVuY3J5cHRlZERhdGEgPSBjdXJVbml0LnN1YmFycmF5KDE2LCBjdXJVbml0Lmxlbmd0aCAtIGN1clVuaXQubGVuZ3RoICUgMTYpO1xuICAgIHZhciBlbmNyeXB0ZWRCdWZmZXIgPSBlbmNyeXB0ZWREYXRhLmJ1ZmZlci5zbGljZShlbmNyeXB0ZWREYXRhLmJ5dGVPZmZzZXQsIGVuY3J5cHRlZERhdGEuYnl0ZU9mZnNldCArIGVuY3J5cHRlZERhdGEubGVuZ3RoKTtcbiAgICB2YXIgbG9jYWx0aGlzID0gdGhpcztcbiAgICB0aGlzLmRlY3J5cHRCdWZmZXIoZW5jcnlwdGVkQnVmZmVyLCBmdW5jdGlvbiAoZGVjcnlwdGVkRGF0YSkge1xuICAgICAgZGVjcnlwdGVkRGF0YSA9IG5ldyBVaW50OEFycmF5KGRlY3J5cHRlZERhdGEpO1xuICAgICAgY3VyVW5pdC5zZXQoZGVjcnlwdGVkRGF0YSwgMTYpO1xuXG4gICAgICBpZiAoIXN5bmMpIHtcbiAgICAgICAgbG9jYWx0aGlzLmRlY3J5cHRBYWNTYW1wbGVzKHNhbXBsZXMsIHNhbXBsZUluZGV4ICsgMSwgY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5kZWNyeXB0QWFjU2FtcGxlcyA9IGZ1bmN0aW9uIGRlY3J5cHRBYWNTYW1wbGVzKHNhbXBsZXMsIHNhbXBsZUluZGV4LCBjYWxsYmFjaykge1xuICAgIGZvciAoOzsgc2FtcGxlSW5kZXgrKykge1xuICAgICAgaWYgKHNhbXBsZUluZGV4ID49IHNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHNhbXBsZXNbc2FtcGxlSW5kZXhdLnVuaXQubGVuZ3RoIDwgMzIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBzeW5jID0gdGhpcy5kZWNyeXB0ZXIuaXNTeW5jKCk7XG4gICAgICB0aGlzLmRlY3J5cHRBYWNTYW1wbGUoc2FtcGxlcywgc2FtcGxlSW5kZXgsIGNhbGxiYWNrLCBzeW5jKTtcblxuICAgICAgaWYgKCFzeW5jKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gQVZDIC0gZW5jcnlwdCBvbmUgMTYgYnl0ZXMgYmxvY2sgb3V0IG9mIHRlbiwgc3RhcnRpbmcgZnJvbSBvZmZzZXQgMzJcbiAgO1xuXG4gIF9wcm90by5nZXRBdmNFbmNyeXB0ZWREYXRhID0gZnVuY3Rpb24gZ2V0QXZjRW5jcnlwdGVkRGF0YShkZWNvZGVkRGF0YSkge1xuICAgIHZhciBlbmNyeXB0ZWREYXRhTGVuID0gTWF0aC5mbG9vcigoZGVjb2RlZERhdGEubGVuZ3RoIC0gNDgpIC8gMTYwKSAqIDE2ICsgMTY7XG4gICAgdmFyIGVuY3J5cHRlZERhdGEgPSBuZXcgSW50OEFycmF5KGVuY3J5cHRlZERhdGFMZW4pO1xuICAgIHZhciBvdXRwdXRQb3MgPSAwO1xuXG4gICAgZm9yICh2YXIgaW5wdXRQb3MgPSAzMjsgaW5wdXRQb3MgPD0gZGVjb2RlZERhdGEubGVuZ3RoIC0gMTY7IGlucHV0UG9zICs9IDE2MCwgb3V0cHV0UG9zICs9IDE2KSB7XG4gICAgICBlbmNyeXB0ZWREYXRhLnNldChkZWNvZGVkRGF0YS5zdWJhcnJheShpbnB1dFBvcywgaW5wdXRQb3MgKyAxNiksIG91dHB1dFBvcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuY3J5cHRlZERhdGE7XG4gIH07XG5cbiAgX3Byb3RvLmdldEF2Y0RlY3J5cHRlZFVuaXQgPSBmdW5jdGlvbiBnZXRBdmNEZWNyeXB0ZWRVbml0KGRlY29kZWREYXRhLCBkZWNyeXB0ZWREYXRhKSB7XG4gICAgZGVjcnlwdGVkRGF0YSA9IG5ldyBVaW50OEFycmF5KGRlY3J5cHRlZERhdGEpO1xuICAgIHZhciBpbnB1dFBvcyA9IDA7XG5cbiAgICBmb3IgKHZhciBvdXRwdXRQb3MgPSAzMjsgb3V0cHV0UG9zIDw9IGRlY29kZWREYXRhLmxlbmd0aCAtIDE2OyBvdXRwdXRQb3MgKz0gMTYwLCBpbnB1dFBvcyArPSAxNikge1xuICAgICAgZGVjb2RlZERhdGEuc2V0KGRlY3J5cHRlZERhdGEuc3ViYXJyYXkoaW5wdXRQb3MsIGlucHV0UG9zICsgMTYpLCBvdXRwdXRQb3MpO1xuICAgIH1cblxuICAgIHJldHVybiBkZWNvZGVkRGF0YTtcbiAgfTtcblxuICBfcHJvdG8uZGVjcnlwdEF2Y1NhbXBsZSA9IGZ1bmN0aW9uIGRlY3J5cHRBdmNTYW1wbGUoc2FtcGxlcywgc2FtcGxlSW5kZXgsIHVuaXRJbmRleCwgY2FsbGJhY2ssIGN1clVuaXQsIHN5bmMpIHtcbiAgICB2YXIgZGVjb2RlZERhdGEgPSB0aGlzLmRpc2NhcmRFUEIoY3VyVW5pdC5kYXRhKTtcbiAgICB2YXIgZW5jcnlwdGVkRGF0YSA9IHRoaXMuZ2V0QXZjRW5jcnlwdGVkRGF0YShkZWNvZGVkRGF0YSk7XG4gICAgdmFyIGxvY2FsdGhpcyA9IHRoaXM7XG4gICAgdGhpcy5kZWNyeXB0QnVmZmVyKGVuY3J5cHRlZERhdGEuYnVmZmVyLCBmdW5jdGlvbiAoZGVjcnlwdGVkRGF0YSkge1xuICAgICAgY3VyVW5pdC5kYXRhID0gbG9jYWx0aGlzLmdldEF2Y0RlY3J5cHRlZFVuaXQoZGVjb2RlZERhdGEsIGRlY3J5cHRlZERhdGEpO1xuXG4gICAgICBpZiAoIXN5bmMpIHtcbiAgICAgICAgbG9jYWx0aGlzLmRlY3J5cHRBdmNTYW1wbGVzKHNhbXBsZXMsIHNhbXBsZUluZGV4LCB1bml0SW5kZXggKyAxLCBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmRlY3J5cHRBdmNTYW1wbGVzID0gZnVuY3Rpb24gZGVjcnlwdEF2Y1NhbXBsZXMoc2FtcGxlcywgc2FtcGxlSW5kZXgsIHVuaXRJbmRleCwgY2FsbGJhY2spIHtcbiAgICBmb3IgKDs7IHNhbXBsZUluZGV4KyssIHVuaXRJbmRleCA9IDApIHtcbiAgICAgIGlmIChzYW1wbGVJbmRleCA+PSBzYW1wbGVzLmxlbmd0aCkge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBjdXJVbml0cyA9IHNhbXBsZXNbc2FtcGxlSW5kZXhdLnVuaXRzO1xuXG4gICAgICBmb3IgKDs7IHVuaXRJbmRleCsrKSB7XG4gICAgICAgIGlmICh1bml0SW5kZXggPj0gY3VyVW5pdHMubGVuZ3RoKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY3VyVW5pdCA9IGN1clVuaXRzW3VuaXRJbmRleF07XG5cbiAgICAgICAgaWYgKGN1clVuaXQuZGF0YS5sZW5ndGggPD0gNDggfHwgY3VyVW5pdC50eXBlICE9PSAxICYmIGN1clVuaXQudHlwZSAhPT0gNSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN5bmMgPSB0aGlzLmRlY3J5cHRlci5pc1N5bmMoKTtcbiAgICAgICAgdGhpcy5kZWNyeXB0QXZjU2FtcGxlKHNhbXBsZXMsIHNhbXBsZUluZGV4LCB1bml0SW5kZXgsIGNhbGxiYWNrLCBjdXJVbml0LCBzeW5jKTtcblxuICAgICAgICBpZiAoIXN5bmMpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFNhbXBsZUFlc0RlY3J5cHRlcjtcbn0oKTtcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgc2FtcGxlX2FlcyA9IChzYW1wbGVfYWVzX1NhbXBsZUFlc0RlY3J5cHRlcik7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9kZW11eC90c2RlbXV4ZXIuanNcbi8qKlxuICogaGlnaGx5IG9wdGltaXplZCBUUyBkZW11eGVyOlxuICogcGFyc2UgUEFULCBQTVRcbiAqIGV4dHJhY3QgUEVTIHBhY2tldCBmcm9tIGF1ZGlvIGFuZCB2aWRlbyBQSURzXG4gKiBleHRyYWN0IEFWQy9IMjY0IE5BTCB1bml0cyBhbmQgQUFDL0FEVFMgc2FtcGxlcyBmcm9tIFBFUyBwYWNrZXRcbiAqIHRyaWdnZXIgdGhlIHJlbXV4ZXIgdXBvbiBwYXJzaW5nIGNvbXBsZXRpb25cbiAqIGl0IGFsc28gdHJpZXMgdG8gd29ya2Fyb3VuZCBhcyBiZXN0IGFzIGl0IGNhbiBhdWRpbyBjb2RlYyBzd2l0Y2ggKEhFLUFBQyB0byBBQUMgYW5kIHZpY2UgdmVyc2EpLCB3aXRob3V0IGhhdmluZyB0byByZXN0YXJ0IHRoZSBNZWRpYVNvdXJjZS5cbiAqIGl0IGFsc28gY29udHJvbHMgdGhlIHJlbXV4aW5nIHByb2Nlc3MgOlxuICogdXBvbiBkaXNjb250aW51aXR5IG9yIGxldmVsIHN3aXRjaCBkZXRlY3Rpb24sIGl0IHdpbGwgYWxzbyBub3RpZmllcyB0aGUgcmVtdXhlciBzbyB0aGF0IGl0IGNhbiByZXNldCBpdHMgc3RhdGUuXG4qL1xuXG5cblxuXG4gLy8gaW1wb3J0IEhleCBmcm9tICcuLi91dGlscy9oZXgnO1xuXG5cblxuIC8vIFdlIGFyZSB1c2luZyBmaXhlZCB0cmFjayBJRHMgZm9yIGRyaXZpbmcgdGhlIE1QNCByZW11eGVyXG4vLyBpbnN0ZWFkIG9mIGZvbGxvd2luZyB0aGUgVFMgUElEcy5cbi8vIFRoZXJlIGlzIG5vIHJlYXNvbiBub3QgdG8gZG8gdGhpcyBhbmQgc29tZSBicm93c2Vycy9Tb3VyY2VCdWZmZXItZGVtdXhlcnNcbi8vIG1heSBub3QgbGlrZSBpZiB0aGVyZSBhcmUgVHJhY2tJRCBcInN3aXRjaGVzXCJcbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdmlkZW8tZGV2L2hscy5qcy9pc3N1ZXMvMTMzMVxuLy8gSGVyZSB3ZSBhcmUgbWFwcGluZyBvdXIgaW50ZXJuYWwgdHJhY2sgdHlwZXMgdG8gY29uc3RhbnQgTVA0IHRyYWNrIElEc1xuLy8gV2l0aCBNU0UgY3VycmVudGx5IG9uZSBjYW4gb25seSBoYXZlIG9uZSB0cmFjayBvZiBlYWNoLCBhbmQgd2UgYXJlIG11eGluZ1xuLy8gd2hhdGV2ZXIgdmlkZW8vYXVkaW8gcmVuZGl0aW9uIGluIHRoZW0uXG5cbnZhciBSZW11eGVyVHJhY2tJZENvbmZpZyA9IHtcbiAgdmlkZW86IDEsXG4gIGF1ZGlvOiAyLFxuICBpZDM6IDMsXG4gIHRleHQ6IDRcbn07XG5cbnZhciB0c2RlbXV4ZXJfVFNEZW11eGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVFNEZW11eGVyKG9ic2VydmVyLCByZW11eGVyLCBjb25maWcsIHR5cGVTdXBwb3J0ZWQpIHtcbiAgICB0aGlzLm9ic2VydmVyID0gb2JzZXJ2ZXI7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy50eXBlU3VwcG9ydGVkID0gdHlwZVN1cHBvcnRlZDtcbiAgICB0aGlzLnJlbXV4ZXIgPSByZW11eGVyO1xuICAgIHRoaXMuc2FtcGxlQWVzID0gbnVsbDtcbiAgICB0aGlzLnBtdFVua25vd25UeXBlcyA9IHt9O1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRTRGVtdXhlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnNldERlY3J5cHREYXRhID0gZnVuY3Rpb24gc2V0RGVjcnlwdERhdGEoZGVjcnlwdGRhdGEpIHtcbiAgICBpZiAoZGVjcnlwdGRhdGEgIT0gbnVsbCAmJiBkZWNyeXB0ZGF0YS5rZXkgIT0gbnVsbCAmJiBkZWNyeXB0ZGF0YS5tZXRob2QgPT09ICdTQU1QTEUtQUVTJykge1xuICAgICAgdGhpcy5zYW1wbGVBZXMgPSBuZXcgc2FtcGxlX2Flcyh0aGlzLm9ic2VydmVyLCB0aGlzLmNvbmZpZywgZGVjcnlwdGRhdGEsIHRoaXMuZGlzY2FyZEVQQik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2FtcGxlQWVzID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgVFNEZW11eGVyLnByb2JlID0gZnVuY3Rpb24gcHJvYmUoZGF0YSkge1xuICAgIHZhciBzeW5jT2Zmc2V0ID0gVFNEZW11eGVyLl9zeW5jT2Zmc2V0KGRhdGEpO1xuXG4gICAgaWYgKHN5bmNPZmZzZXQgPCAwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzeW5jT2Zmc2V0KSB7XG4gICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuKFwiTVBFRzItVFMgZGV0ZWN0ZWQgYnV0IGZpcnN0IHN5bmMgd29yZCBmb3VuZCBAIG9mZnNldCBcIiArIHN5bmNPZmZzZXQgKyBcIiwganVuayBhaGVhZCA/XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH07XG5cbiAgVFNEZW11eGVyLl9zeW5jT2Zmc2V0ID0gZnVuY3Rpb24gX3N5bmNPZmZzZXQoZGF0YSkge1xuICAgIC8vIHNjYW4gMTAwMCBmaXJzdCBieXRlc1xuICAgIHZhciBzY2Fud2luZG93ID0gTWF0aC5taW4oMTAwMCwgZGF0YS5sZW5ndGggLSAzICogMTg4KTtcbiAgICB2YXIgaSA9IDA7XG5cbiAgICB3aGlsZSAoaSA8IHNjYW53aW5kb3cpIHtcbiAgICAgIC8vIGEgVFMgZnJhZ21lbnQgc2hvdWxkIGNvbnRhaW4gYXQgbGVhc3QgMyBUUyBwYWNrZXRzLCBhIFBBVCwgYSBQTVQsIGFuZCBvbmUgUElELCBlYWNoIHN0YXJ0aW5nIHdpdGggMHg0N1xuICAgICAgaWYgKGRhdGFbaV0gPT09IDB4NDcgJiYgZGF0YVtpICsgMTg4XSA9PT0gMHg0NyAmJiBkYXRhW2kgKyAyICogMTg4XSA9PT0gMHg0Nykge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB0cmFjayBtb2RlbCBpbnRlcm5hbCB0byBkZW11eGVyIHVzZWQgdG8gZHJpdmUgcmVtdXhpbmcgaW5wdXRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgJ2F1ZGlvJyB8ICd2aWRlbycgfCAnaWQzJyB8ICd0ZXh0J1xuICAgKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb25cbiAgICogQHJldHVybiB7b2JqZWN0fSBUU0RlbXV4ZXIncyBpbnRlcm5hbCB0cmFjayBtb2RlbFxuICAgKi9cbiAgO1xuXG4gIFRTRGVtdXhlci5jcmVhdGVUcmFjayA9IGZ1bmN0aW9uIGNyZWF0ZVRyYWNrKHR5cGUsIGR1cmF0aW9uKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRhaW5lcjogdHlwZSA9PT0gJ3ZpZGVvJyB8fCB0eXBlID09PSAnYXVkaW8nID8gJ3ZpZGVvL21wMnQnIDogdW5kZWZpbmVkLFxuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGlkOiBSZW11eGVyVHJhY2tJZENvbmZpZ1t0eXBlXSxcbiAgICAgIHBpZDogLTEsXG4gICAgICBpbnB1dFRpbWVTY2FsZTogOTAwMDAsXG4gICAgICBzZXF1ZW5jZU51bWJlcjogMCxcbiAgICAgIHNhbXBsZXM6IFtdLFxuICAgICAgZHJvcHBlZDogdHlwZSA9PT0gJ3ZpZGVvJyA/IDAgOiB1bmRlZmluZWQsXG4gICAgICBpc0FBQzogdHlwZSA9PT0gJ2F1ZGlvJyA/IHRydWUgOiB1bmRlZmluZWQsXG4gICAgICBkdXJhdGlvbjogdHlwZSA9PT0gJ2F1ZGlvJyA/IGR1cmF0aW9uIDogdW5kZWZpbmVkXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgYSBuZXcgaW5pdCBzZWdtZW50IG9uIHRoZSBkZW11eGVyL3JlbXV4ZXIgaW50ZXJmYWNlLiBOZWVkZWQgZm9yIGRpc2NvbnRpbnVpdGllcy90cmFjay1zd2l0Y2hlcyAob3IgYXQgc3RyZWFtIHN0YXJ0KVxuICAgKiBSZXNldHMgYWxsIGludGVybmFsIHRyYWNrIGluc3RhbmNlcyBvZiB0aGUgZGVtdXhlci5cbiAgICpcbiAgICogQG92ZXJyaWRlIEltcGxlbWVudHMgZ2VuZXJpYyBkZW11eGluZy9yZW11eGluZyBpbnRlcmZhY2UgKHNlZSBEZW11eGVySW5saW5lKVxuICAgKiBAcGFyYW0ge29iamVjdH0gaW5pdFNlZ21lbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGF1ZGlvQ29kZWNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZpZGVvQ29kZWNcbiAgICogQHBhcmFtIHtudW1iZXJ9IGR1cmF0aW9uIChpbiBUUyB0aW1lc2NhbGUgPSA5MGtIeilcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVzZXRJbml0U2VnbWVudCA9IGZ1bmN0aW9uIHJlc2V0SW5pdFNlZ21lbnQoaW5pdFNlZ21lbnQsIGF1ZGlvQ29kZWMsIHZpZGVvQ29kZWMsIGR1cmF0aW9uKSB7XG4gICAgdGhpcy5wbXRQYXJzZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9wbXRJZCA9IC0xO1xuICAgIHRoaXMucG10VW5rbm93blR5cGVzID0ge307XG4gICAgdGhpcy5fYXZjVHJhY2sgPSBUU0RlbXV4ZXIuY3JlYXRlVHJhY2soJ3ZpZGVvJywgZHVyYXRpb24pO1xuICAgIHRoaXMuX2F1ZGlvVHJhY2sgPSBUU0RlbXV4ZXIuY3JlYXRlVHJhY2soJ2F1ZGlvJywgZHVyYXRpb24pO1xuICAgIHRoaXMuX2lkM1RyYWNrID0gVFNEZW11eGVyLmNyZWF0ZVRyYWNrKCdpZDMnLCBkdXJhdGlvbik7XG4gICAgdGhpcy5fdHh0VHJhY2sgPSBUU0RlbXV4ZXIuY3JlYXRlVHJhY2soJ3RleHQnLCBkdXJhdGlvbik7IC8vIGZsdXNoIGFueSBwYXJ0aWFsIGNvbnRlbnRcblxuICAgIHRoaXMuYWFjT3ZlckZsb3cgPSBudWxsO1xuICAgIHRoaXMuYWFjTGFzdFBUUyA9IG51bGw7XG4gICAgdGhpcy5hdmNTYW1wbGUgPSBudWxsO1xuICAgIHRoaXMuYXVkaW9Db2RlYyA9IGF1ZGlvQ29kZWM7XG4gICAgdGhpcy52aWRlb0NvZGVjID0gdmlkZW9Db2RlYztcbiAgICB0aGlzLl9kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICB9XG4gIC8qKlxuICAgKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVzZXRUaW1lU3RhbXAgPSBmdW5jdGlvbiByZXNldFRpbWVTdGFtcCgpIHt9IC8vIGZlZWQgaW5jb21pbmcgZGF0YSB0byB0aGUgZnJvbnQgb2YgdGhlIHBhcnNpbmcgcGlwZWxpbmVcbiAgO1xuXG4gIF9wcm90by5hcHBlbmQgPSBmdW5jdGlvbiBhcHBlbmQoZGF0YSwgdGltZU9mZnNldCwgY29udGlndW91cywgYWNjdXJhdGVUaW1lT2Zmc2V0KSB7XG4gICAgdmFyIHN0YXJ0LFxuICAgICAgICBsZW4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgc3R0LFxuICAgICAgICBwaWQsXG4gICAgICAgIGF0ZixcbiAgICAgICAgb2Zmc2V0LFxuICAgICAgICBwZXMsXG4gICAgICAgIHVua25vd25QSURzID0gZmFsc2U7XG4gICAgdGhpcy5wbXRVbmtub3duVHlwZXMgPSB7fTtcbiAgICB0aGlzLmNvbnRpZ3VvdXMgPSBjb250aWd1b3VzO1xuXG4gICAgdmFyIHBtdFBhcnNlZCA9IHRoaXMucG10UGFyc2VkLFxuICAgICAgICBhdmNUcmFjayA9IHRoaXMuX2F2Y1RyYWNrLFxuICAgICAgICBhdWRpb1RyYWNrID0gdGhpcy5fYXVkaW9UcmFjayxcbiAgICAgICAgaWQzVHJhY2sgPSB0aGlzLl9pZDNUcmFjayxcbiAgICAgICAgYXZjSWQgPSBhdmNUcmFjay5waWQsXG4gICAgICAgIGF1ZGlvSWQgPSBhdWRpb1RyYWNrLnBpZCxcbiAgICAgICAgaWQzSWQgPSBpZDNUcmFjay5waWQsXG4gICAgICAgIHBtdElkID0gdGhpcy5fcG10SWQsXG4gICAgICAgIGF2Y0RhdGEgPSBhdmNUcmFjay5wZXNEYXRhLFxuICAgICAgICBhdWRpb0RhdGEgPSBhdWRpb1RyYWNrLnBlc0RhdGEsXG4gICAgICAgIGlkM0RhdGEgPSBpZDNUcmFjay5wZXNEYXRhLFxuICAgICAgICBwYXJzZVBBVCA9IHRoaXMuX3BhcnNlUEFULFxuICAgICAgICBwYXJzZVBNVCA9IHRoaXMuX3BhcnNlUE1ULmJpbmQodGhpcyksXG4gICAgICAgIHBhcnNlUEVTID0gdGhpcy5fcGFyc2VQRVMsXG4gICAgICAgIHBhcnNlQVZDUEVTID0gdGhpcy5fcGFyc2VBVkNQRVMuYmluZCh0aGlzKSxcbiAgICAgICAgcGFyc2VBQUNQRVMgPSB0aGlzLl9wYXJzZUFBQ1BFUy5iaW5kKHRoaXMpLFxuICAgICAgICBwYXJzZU1QRUdQRVMgPSB0aGlzLl9wYXJzZU1QRUdQRVMuYmluZCh0aGlzKSxcbiAgICAgICAgcGFyc2VJRDNQRVMgPSB0aGlzLl9wYXJzZUlEM1BFUy5iaW5kKHRoaXMpO1xuXG4gICAgdmFyIHN5bmNPZmZzZXQgPSBUU0RlbXV4ZXIuX3N5bmNPZmZzZXQoZGF0YSk7IC8vIGRvbid0IHBhcnNlIGxhc3QgVFMgcGFja2V0IGlmIGluY29tcGxldGVcblxuXG4gICAgbGVuIC09IChsZW4gKyBzeW5jT2Zmc2V0KSAlIDE4ODsgLy8gbG9vcCB0aHJvdWdoIFRTIHBhY2tldHNcblxuICAgIGZvciAoc3RhcnQgPSBzeW5jT2Zmc2V0OyBzdGFydCA8IGxlbjsgc3RhcnQgKz0gMTg4KSB7XG4gICAgICBpZiAoZGF0YVtzdGFydF0gPT09IDB4NDcpIHtcbiAgICAgICAgc3R0ID0gISEoZGF0YVtzdGFydCArIDFdICYgMHg0MCk7IC8vIHBpZCBpcyBhIDEzLWJpdCBmaWVsZCBzdGFydGluZyBhdCB0aGUgbGFzdCBiaXQgb2YgVFNbMV1cblxuICAgICAgICBwaWQgPSAoKGRhdGFbc3RhcnQgKyAxXSAmIDB4MWYpIDw8IDgpICsgZGF0YVtzdGFydCArIDJdO1xuICAgICAgICBhdGYgPSAoZGF0YVtzdGFydCArIDNdICYgMHgzMCkgPj4gNDsgLy8gaWYgYW4gYWRhcHRpb24gZmllbGQgaXMgcHJlc2VudCwgaXRzIGxlbmd0aCBpcyBzcGVjaWZpZWQgYnkgdGhlIGZpZnRoIGJ5dGUgb2YgdGhlIFRTIHBhY2tldCBoZWFkZXIuXG5cbiAgICAgICAgaWYgKGF0ZiA+IDEpIHtcbiAgICAgICAgICBvZmZzZXQgPSBzdGFydCArIDUgKyBkYXRhW3N0YXJ0ICsgNF07IC8vIGNvbnRpbnVlIGlmIHRoZXJlIGlzIG9ubHkgYWRhcHRhdGlvbiBmaWVsZFxuXG4gICAgICAgICAgaWYgKG9mZnNldCA9PT0gc3RhcnQgKyAxODgpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvZmZzZXQgPSBzdGFydCArIDQ7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKHBpZCkge1xuICAgICAgICAgIGNhc2UgYXZjSWQ6XG4gICAgICAgICAgICBpZiAoc3R0KSB7XG4gICAgICAgICAgICAgIGlmIChhdmNEYXRhICYmIChwZXMgPSBwYXJzZVBFUyhhdmNEYXRhKSkpIHtcbiAgICAgICAgICAgICAgICBwYXJzZUFWQ1BFUyhwZXMsIGZhbHNlKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGF2Y0RhdGEgPSB7XG4gICAgICAgICAgICAgICAgZGF0YTogW10sXG4gICAgICAgICAgICAgICAgc2l6ZTogMFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYXZjRGF0YSkge1xuICAgICAgICAgICAgICBhdmNEYXRhLmRhdGEucHVzaChkYXRhLnN1YmFycmF5KG9mZnNldCwgc3RhcnQgKyAxODgpKTtcbiAgICAgICAgICAgICAgYXZjRGF0YS5zaXplICs9IHN0YXJ0ICsgMTg4IC0gb2Zmc2V0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgYXVkaW9JZDpcbiAgICAgICAgICAgIGlmIChzdHQpIHtcbiAgICAgICAgICAgICAgaWYgKGF1ZGlvRGF0YSAmJiAocGVzID0gcGFyc2VQRVMoYXVkaW9EYXRhKSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXVkaW9UcmFjay5pc0FBQykge1xuICAgICAgICAgICAgICAgICAgcGFyc2VBQUNQRVMocGVzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGFyc2VNUEVHUEVTKHBlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYXVkaW9EYXRhID0ge1xuICAgICAgICAgICAgICAgIGRhdGE6IFtdLFxuICAgICAgICAgICAgICAgIHNpemU6IDBcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGF1ZGlvRGF0YSkge1xuICAgICAgICAgICAgICBhdWRpb0RhdGEuZGF0YS5wdXNoKGRhdGEuc3ViYXJyYXkob2Zmc2V0LCBzdGFydCArIDE4OCkpO1xuICAgICAgICAgICAgICBhdWRpb0RhdGEuc2l6ZSArPSBzdGFydCArIDE4OCAtIG9mZnNldDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIGlkM0lkOlxuICAgICAgICAgICAgaWYgKHN0dCkge1xuICAgICAgICAgICAgICBpZiAoaWQzRGF0YSAmJiAocGVzID0gcGFyc2VQRVMoaWQzRGF0YSkpKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VJRDNQRVMocGVzKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlkM0RhdGEgPSB7XG4gICAgICAgICAgICAgICAgZGF0YTogW10sXG4gICAgICAgICAgICAgICAgc2l6ZTogMFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaWQzRGF0YSkge1xuICAgICAgICAgICAgICBpZDNEYXRhLmRhdGEucHVzaChkYXRhLnN1YmFycmF5KG9mZnNldCwgc3RhcnQgKyAxODgpKTtcbiAgICAgICAgICAgICAgaWQzRGF0YS5zaXplICs9IHN0YXJ0ICsgMTg4IC0gb2Zmc2V0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGlmIChzdHQpIHtcbiAgICAgICAgICAgICAgb2Zmc2V0ICs9IGRhdGFbb2Zmc2V0XSArIDE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBtdElkID0gdGhpcy5fcG10SWQgPSBwYXJzZVBBVChkYXRhLCBvZmZzZXQpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIHBtdElkOlxuICAgICAgICAgICAgaWYgKHN0dCkge1xuICAgICAgICAgICAgICBvZmZzZXQgKz0gZGF0YVtvZmZzZXRdICsgMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHBhcnNlZFBJRHMgPSBwYXJzZVBNVChkYXRhLCBvZmZzZXQsIHRoaXMudHlwZVN1cHBvcnRlZC5tcGVnID09PSB0cnVlIHx8IHRoaXMudHlwZVN1cHBvcnRlZC5tcDMgPT09IHRydWUsIHRoaXMuc2FtcGxlQWVzICE9IG51bGwpOyAvLyBvbmx5IHVwZGF0ZSB0cmFjayBpZCBpZiB0cmFjayBQSUQgZm91bmQgd2hpbGUgcGFyc2luZyBQTVRcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgdG8gYXZvaWQgcmVzZXR0aW5nIHRoZSBQSUQgdG8gLTEgaW4gY2FzZVxuICAgICAgICAgICAgLy8gdHJhY2sgUElEIHRyYW5zaWVudGx5IGRpc2FwcGVhcnMgZnJvbSB0aGUgc3RyZWFtXG4gICAgICAgICAgICAvLyB0aGlzIGNvdWxkIGhhcHBlbiBpbiBjYXNlIG9mIHRyYW5zaWVudCBtaXNzaW5nIGF1ZGlvIHNhbXBsZXMgZm9yIGV4YW1wbGVcbiAgICAgICAgICAgIC8vIE5PVEUgdGhpcyBpcyBvbmx5IHRoZSBQSUQgb2YgdGhlIHRyYWNrIGFzIGZvdW5kIGluIFRTLFxuICAgICAgICAgICAgLy8gYnV0IHdlIGFyZSBub3QgdXNpbmcgdGhpcyBmb3IgTVA0IHRyYWNrIElEcy5cblxuICAgICAgICAgICAgYXZjSWQgPSBwYXJzZWRQSURzLmF2YztcblxuICAgICAgICAgICAgaWYgKGF2Y0lkID4gMCkge1xuICAgICAgICAgICAgICBhdmNUcmFjay5waWQgPSBhdmNJZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXVkaW9JZCA9IHBhcnNlZFBJRHMuYXVkaW87XG5cbiAgICAgICAgICAgIGlmIChhdWRpb0lkID4gMCkge1xuICAgICAgICAgICAgICBhdWRpb1RyYWNrLnBpZCA9IGF1ZGlvSWQ7XG4gICAgICAgICAgICAgIGF1ZGlvVHJhY2suaXNBQUMgPSBwYXJzZWRQSURzLmlzQUFDO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZDNJZCA9IHBhcnNlZFBJRHMuaWQzO1xuXG4gICAgICAgICAgICBpZiAoaWQzSWQgPiAwKSB7XG4gICAgICAgICAgICAgIGlkM1RyYWNrLnBpZCA9IGlkM0lkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodW5rbm93blBJRHMgJiYgIXBtdFBhcnNlZCkge1xuICAgICAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKCdyZXBhcnNlIGZyb20gYmVnaW5uaW5nJyk7XG4gICAgICAgICAgICAgIHVua25vd25QSURzID0gZmFsc2U7IC8vIHdlIHNldCBpdCB0byAtMTg4LCB0aGUgKz0gMTg4IGluIHRoZSBmb3IgbG9vcCB3aWxsIHJlc2V0IHN0YXJ0IHRvIDBcblxuICAgICAgICAgICAgICBzdGFydCA9IHN5bmNPZmZzZXQgLSAxODg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBtdFBhcnNlZCA9IHRoaXMucG10UGFyc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxNzpcbiAgICAgICAgICBjYXNlIDB4MWZmZjpcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHVua25vd25QSURzID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9ic2VydmVyLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5FUlJPUiwge1xuICAgICAgICAgIHR5cGU6IGVycm9yc1tcIkVycm9yVHlwZXNcIl0uTUVESUFfRVJST1IsXG4gICAgICAgICAgZGV0YWlsczogZXJyb3JzW1wiRXJyb3JEZXRhaWxzXCJdLkZSQUdfUEFSU0lOR19FUlJPUixcbiAgICAgICAgICBmYXRhbDogZmFsc2UsXG4gICAgICAgICAgcmVhc29uOiAnVFMgcGFja2V0IGRpZCBub3Qgc3RhcnQgd2l0aCAweDQ3J1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IC8vIHRyeSB0byBwYXJzZSBsYXN0IFBFUyBwYWNrZXRzXG5cblxuICAgIGlmIChhdmNEYXRhICYmIChwZXMgPSBwYXJzZVBFUyhhdmNEYXRhKSkpIHtcbiAgICAgIHBhcnNlQVZDUEVTKHBlcywgdHJ1ZSk7XG4gICAgICBhdmNUcmFjay5wZXNEYXRhID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZWl0aGVyIGF2Y0RhdGEgbnVsbCBvciBQRVMgdHJ1bmNhdGVkLCBrZWVwIGl0IGZvciBuZXh0IGZyYWcgcGFyc2luZ1xuICAgICAgYXZjVHJhY2sucGVzRGF0YSA9IGF2Y0RhdGE7XG4gICAgfVxuXG4gICAgaWYgKGF1ZGlvRGF0YSAmJiAocGVzID0gcGFyc2VQRVMoYXVkaW9EYXRhKSkpIHtcbiAgICAgIGlmIChhdWRpb1RyYWNrLmlzQUFDKSB7XG4gICAgICAgIHBhcnNlQUFDUEVTKHBlcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZU1QRUdQRVMocGVzKTtcbiAgICAgIH1cblxuICAgICAgYXVkaW9UcmFjay5wZXNEYXRhID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGF1ZGlvRGF0YSAmJiBhdWRpb0RhdGEuc2l6ZSkge1xuICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKCdsYXN0IEFBQyBQRVMgcGFja2V0IHRydW5jYXRlZCxtaWdodCBvdmVybGFwIGJldHdlZW4gZnJhZ21lbnRzJyk7XG4gICAgICB9IC8vIGVpdGhlciBhdWRpb0RhdGEgbnVsbCBvciBQRVMgdHJ1bmNhdGVkLCBrZWVwIGl0IGZvciBuZXh0IGZyYWcgcGFyc2luZ1xuXG5cbiAgICAgIGF1ZGlvVHJhY2sucGVzRGF0YSA9IGF1ZGlvRGF0YTtcbiAgICB9XG5cbiAgICBpZiAoaWQzRGF0YSAmJiAocGVzID0gcGFyc2VQRVMoaWQzRGF0YSkpKSB7XG4gICAgICBwYXJzZUlEM1BFUyhwZXMpO1xuICAgICAgaWQzVHJhY2sucGVzRGF0YSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVpdGhlciBpZDNEYXRhIG51bGwgb3IgUEVTIHRydW5jYXRlZCwga2VlcCBpdCBmb3IgbmV4dCBmcmFnIHBhcnNpbmdcbiAgICAgIGlkM1RyYWNrLnBlc0RhdGEgPSBpZDNEYXRhO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNhbXBsZUFlcyA9PSBudWxsKSB7XG4gICAgICB0aGlzLnJlbXV4ZXIucmVtdXgoYXVkaW9UcmFjaywgYXZjVHJhY2ssIGlkM1RyYWNrLCB0aGlzLl90eHRUcmFjaywgdGltZU9mZnNldCwgY29udGlndW91cywgYWNjdXJhdGVUaW1lT2Zmc2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kZWNyeXB0QW5kUmVtdXgoYXVkaW9UcmFjaywgYXZjVHJhY2ssIGlkM1RyYWNrLCB0aGlzLl90eHRUcmFjaywgdGltZU9mZnNldCwgY29udGlndW91cywgYWNjdXJhdGVUaW1lT2Zmc2V0KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmRlY3J5cHRBbmRSZW11eCA9IGZ1bmN0aW9uIGRlY3J5cHRBbmRSZW11eChhdWRpb1RyYWNrLCB2aWRlb1RyYWNrLCBpZDNUcmFjaywgdGV4dFRyYWNrLCB0aW1lT2Zmc2V0LCBjb250aWd1b3VzLCBhY2N1cmF0ZVRpbWVPZmZzZXQpIHtcbiAgICBpZiAoYXVkaW9UcmFjay5zYW1wbGVzICYmIGF1ZGlvVHJhY2suaXNBQUMpIHtcbiAgICAgIHZhciBsb2NhbHRoaXMgPSB0aGlzO1xuICAgICAgdGhpcy5zYW1wbGVBZXMuZGVjcnlwdEFhY1NhbXBsZXMoYXVkaW9UcmFjay5zYW1wbGVzLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxvY2FsdGhpcy5kZWNyeXB0QW5kUmVtdXhBdmMoYXVkaW9UcmFjaywgdmlkZW9UcmFjaywgaWQzVHJhY2ssIHRleHRUcmFjaywgdGltZU9mZnNldCwgY29udGlndW91cywgYWNjdXJhdGVUaW1lT2Zmc2V0KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRlY3J5cHRBbmRSZW11eEF2YyhhdWRpb1RyYWNrLCB2aWRlb1RyYWNrLCBpZDNUcmFjaywgdGV4dFRyYWNrLCB0aW1lT2Zmc2V0LCBjb250aWd1b3VzLCBhY2N1cmF0ZVRpbWVPZmZzZXQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZGVjcnlwdEFuZFJlbXV4QXZjID0gZnVuY3Rpb24gZGVjcnlwdEFuZFJlbXV4QXZjKGF1ZGlvVHJhY2ssIHZpZGVvVHJhY2ssIGlkM1RyYWNrLCB0ZXh0VHJhY2ssIHRpbWVPZmZzZXQsIGNvbnRpZ3VvdXMsIGFjY3VyYXRlVGltZU9mZnNldCkge1xuICAgIGlmICh2aWRlb1RyYWNrLnNhbXBsZXMpIHtcbiAgICAgIHZhciBsb2NhbHRoaXMgPSB0aGlzO1xuICAgICAgdGhpcy5zYW1wbGVBZXMuZGVjcnlwdEF2Y1NhbXBsZXModmlkZW9UcmFjay5zYW1wbGVzLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxvY2FsdGhpcy5yZW11eGVyLnJlbXV4KGF1ZGlvVHJhY2ssIHZpZGVvVHJhY2ssIGlkM1RyYWNrLCB0ZXh0VHJhY2ssIHRpbWVPZmZzZXQsIGNvbnRpZ3VvdXMsIGFjY3VyYXRlVGltZU9mZnNldCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW11eGVyLnJlbXV4KGF1ZGlvVHJhY2ssIHZpZGVvVHJhY2ssIGlkM1RyYWNrLCB0ZXh0VHJhY2ssIHRpbWVPZmZzZXQsIGNvbnRpZ3VvdXMsIGFjY3VyYXRlVGltZU9mZnNldCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICB0aGlzLl9pbml0UFRTID0gdGhpcy5faW5pdERUUyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9kdXJhdGlvbiA9IDA7XG4gIH07XG5cbiAgX3Byb3RvLl9wYXJzZVBBVCA9IGZ1bmN0aW9uIF9wYXJzZVBBVChkYXRhLCBvZmZzZXQpIHtcbiAgICAvLyBza2lwIHRoZSBQU0kgaGVhZGVyIGFuZCBwYXJzZSB0aGUgZmlyc3QgUE1UIGVudHJ5XG4gICAgcmV0dXJuIChkYXRhW29mZnNldCArIDEwXSAmIDB4MUYpIDw8IDggfCBkYXRhW29mZnNldCArIDExXTsgLy8gbG9nZ2VyLmxvZygnUE1UIFBJRDonICArIHRoaXMuX3BtdElkKTtcbiAgfTtcblxuICBfcHJvdG8uX3RyYWNrVW5rbm93blBtdCA9IGZ1bmN0aW9uIF90cmFja1Vua25vd25QbXQodHlwZSwgbG9nTGV2ZWwsIG1lc3NhZ2UpIHtcbiAgICAvLyBPbmx5IGxvZyB1bmtub3duIGFuZCB1bnN1cHBvcnRlZCBzdHJlYW0gdHlwZXMgb25jZSBwZXIgYXBwZW5kIG9yIHN0cmVhbSAoYnkgcmVzZXR0aW5nIHRoaXMucG10VW5rbm93blR5cGVzKVxuICAgIC8vIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIGVsZW1lbnRhcnkgc3RyZWFtIHR5cGVzIHNlZTpcbiAgICAvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Qcm9ncmFtLXNwZWNpZmljX2luZm9ybWF0aW9uI0VsZW1lbnRhcnlfc3RyZWFtX3R5cGVzXG4gICAgdmFyIHJlc3VsdCA9IHRoaXMucG10VW5rbm93blR5cGVzW3R5cGVdIHx8IDA7XG5cbiAgICBpZiAocmVzdWx0ID09PSAwKSB7XG4gICAgICB0aGlzLnBtdFVua25vd25UeXBlc1t0eXBlXSA9IDA7XG4gICAgICBsb2dMZXZlbC5jYWxsKGxvZ2dlcltcImxvZ2dlclwiXSwgbWVzc2FnZSk7XG4gICAgfVxuXG4gICAgdGhpcy5wbXRVbmtub3duVHlwZXNbdHlwZV0rKztcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIF9wcm90by5fcGFyc2VQTVQgPSBmdW5jdGlvbiBfcGFyc2VQTVQoZGF0YSwgb2Zmc2V0LCBtcGVnU3VwcG9ydGVkLCBpc1NhbXBsZUFlcykge1xuICAgIHZhciBzZWN0aW9uTGVuZ3RoLFxuICAgICAgICB0YWJsZUVuZCxcbiAgICAgICAgcHJvZ3JhbUluZm9MZW5ndGgsXG4gICAgICAgIHBpZCxcbiAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgYXVkaW86IC0xLFxuICAgICAgYXZjOiAtMSxcbiAgICAgIGlkMzogLTEsXG4gICAgICBpc0FBQzogdHJ1ZVxuICAgIH07XG4gICAgc2VjdGlvbkxlbmd0aCA9IChkYXRhW29mZnNldCArIDFdICYgMHgwZikgPDwgOCB8IGRhdGFbb2Zmc2V0ICsgMl07XG4gICAgdGFibGVFbmQgPSBvZmZzZXQgKyAzICsgc2VjdGlvbkxlbmd0aCAtIDQ7IC8vIHRvIGRldGVybWluZSB3aGVyZSB0aGUgdGFibGUgaXMsIHdlIGhhdmUgdG8gZmlndXJlIG91dCBob3dcbiAgICAvLyBsb25nIHRoZSBwcm9ncmFtIGluZm8gZGVzY3JpcHRvcnMgYXJlXG5cbiAgICBwcm9ncmFtSW5mb0xlbmd0aCA9IChkYXRhW29mZnNldCArIDEwXSAmIDB4MGYpIDw8IDggfCBkYXRhW29mZnNldCArIDExXTsgLy8gYWR2YW5jZSB0aGUgb2Zmc2V0IHRvIHRoZSBmaXJzdCBlbnRyeSBpbiB0aGUgbWFwcGluZyB0YWJsZVxuXG4gICAgb2Zmc2V0ICs9IDEyICsgcHJvZ3JhbUluZm9MZW5ndGg7XG5cbiAgICB3aGlsZSAob2Zmc2V0IDwgdGFibGVFbmQpIHtcbiAgICAgIHBpZCA9IChkYXRhW29mZnNldCArIDFdICYgMHgxRikgPDwgOCB8IGRhdGFbb2Zmc2V0ICsgMl07XG5cbiAgICAgIHN3aXRjaCAoZGF0YVtvZmZzZXRdKSB7XG4gICAgICAgIGNhc2UgMHhjZjpcbiAgICAgICAgICAvLyBTQU1QTEUtQUVTIEFBQ1xuICAgICAgICAgIGlmICghaXNTYW1wbGVBZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX3RyYWNrVW5rbm93blBtdChkYXRhW29mZnNldF0sIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuLCAnQURUUyBBQUMgd2l0aCBBRVMtMTI4LUNCQyBmcmFtZSBlbmNyeXB0aW9uIGZvdW5kIGluIHVuZW5jcnlwdGVkIHN0cmVhbScpO1xuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICAvLyBJU08vSUVDIDEzODE4LTcgQURUUyBBQUMgKE1QRUctMiBsb3dlciBiaXQtcmF0ZSBhdWRpbylcblxuICAgICAgICBjYXNlIDB4MGY6XG4gICAgICAgICAgLy8gbG9nZ2VyLmxvZygnQUFDIFBJRDonICArIHBpZCk7XG4gICAgICAgICAgaWYgKHJlc3VsdC5hdWRpbyA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJlc3VsdC5hdWRpbyA9IHBpZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gUGFja2V0aXplZCBtZXRhZGF0YSAoSUQzKVxuXG4gICAgICAgIGNhc2UgMHgxNTpcbiAgICAgICAgICAvLyBsb2dnZXIubG9nKCdJRDMgUElEOicgICsgcGlkKTtcbiAgICAgICAgICBpZiAocmVzdWx0LmlkMyA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJlc3VsdC5pZDMgPSBwaWQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAweGRiOlxuICAgICAgICAgIC8vIFNBTVBMRS1BRVMgQVZDXG4gICAgICAgICAgaWYgKCFpc1NhbXBsZUFlcykge1xuICAgICAgICAgICAgdGhpcy5fdHJhY2tVbmtub3duUG10KGRhdGFbb2Zmc2V0XSwgbG9nZ2VyW1wibG9nZ2VyXCJdLndhcm4sICdILjI2NCB3aXRoIEFFUy0xMjgtQ0JDIHNsaWNlIGVuY3J5cHRpb24gZm91bmQgaW4gdW5lbmNyeXB0ZWQgc3RyZWFtJyk7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIC8vIElUVS1UIFJlYy4gSC4yNjQgYW5kIElTTy9JRUMgMTQ0OTYtMTAgKGxvd2VyIGJpdC1yYXRlIHZpZGVvKVxuXG4gICAgICAgIGNhc2UgMHgxYjpcbiAgICAgICAgICAvLyBsb2dnZXIubG9nKCdBVkMgUElEOicgICsgcGlkKTtcbiAgICAgICAgICBpZiAocmVzdWx0LmF2YyA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJlc3VsdC5hdmMgPSBwaWQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIC8vIElTTy9JRUMgMTExNzItMyAoTVBFRy0xIGF1ZGlvKVxuICAgICAgICAvLyBvciBJU08vSUVDIDEzODE4LTMgKE1QRUctMiBoYWx2ZWQgc2FtcGxlIHJhdGUgYXVkaW8pXG5cbiAgICAgICAgY2FzZSAweDAzOlxuICAgICAgICBjYXNlIDB4MDQ6XG4gICAgICAgICAgLy8gbG9nZ2VyLmxvZygnTVBFRyBQSUQ6JyAgKyBwaWQpO1xuICAgICAgICAgIGlmICghbXBlZ1N1cHBvcnRlZCkge1xuICAgICAgICAgICAgdGhpcy5fdHJhY2tVbmtub3duUG10KGRhdGFbb2Zmc2V0XSwgbG9nZ2VyW1wibG9nZ2VyXCJdLndhcm4sICdNUEVHIGF1ZGlvIGZvdW5kLCBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlcicpO1xuICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0LmF1ZGlvID09PSAtMSkge1xuICAgICAgICAgICAgcmVzdWx0LmF1ZGlvID0gcGlkO1xuICAgICAgICAgICAgcmVzdWx0LmlzQUFDID0gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAweDI0OlxuICAgICAgICAgIHRoaXMuX3RyYWNrVW5rbm93blBtdChkYXRhW29mZnNldF0sIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuLCAnVW5zdXBwb3J0ZWQgSEVWQyBzdHJlYW0gdHlwZSBmb3VuZCcpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aGlzLl90cmFja1Vua25vd25QbXQoZGF0YVtvZmZzZXRdLCBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nLCAnVW5rbm93biBzdHJlYW0gdHlwZTonICsgZGF0YVtvZmZzZXRdKTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfSAvLyBtb3ZlIHRvIHRoZSBuZXh0IHRhYmxlIGVudHJ5XG4gICAgICAvLyBza2lwIHBhc3QgdGhlIGVsZW1lbnRhcnkgc3RyZWFtIGRlc2NyaXB0b3JzLCBpZiBwcmVzZW50XG5cblxuICAgICAgb2Zmc2V0ICs9ICgoZGF0YVtvZmZzZXQgKyAzXSAmIDB4MEYpIDw8IDggfCBkYXRhW29mZnNldCArIDRdKSArIDU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBfcHJvdG8uX3BhcnNlUEVTID0gZnVuY3Rpb24gX3BhcnNlUEVTKHN0cmVhbSkge1xuICAgIHZhciBpID0gMCxcbiAgICAgICAgZnJhZyxcbiAgICAgICAgcGVzRmxhZ3MsXG4gICAgICAgIHBlc1ByZWZpeCxcbiAgICAgICAgcGVzTGVuLFxuICAgICAgICBwZXNIZHJMZW4sXG4gICAgICAgIHBlc0RhdGEsXG4gICAgICAgIHBlc1B0cyxcbiAgICAgICAgcGVzRHRzLFxuICAgICAgICBwYXlsb2FkU3RhcnRPZmZzZXQsXG4gICAgICAgIGRhdGEgPSBzdHJlYW0uZGF0YTsgLy8gc2FmZXR5IGNoZWNrXG5cbiAgICBpZiAoIXN0cmVhbSB8fCBzdHJlYW0uc2l6ZSA9PT0gMCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSAvLyB3ZSBtaWdodCBuZWVkIHVwIHRvIDE5IGJ5dGVzIHRvIHJlYWQgUEVTIGhlYWRlclxuICAgIC8vIGlmIGZpcnN0IGNodW5rIG9mIGRhdGEgaXMgbGVzcyB0aGFuIDE5IGJ5dGVzLCBsZXQncyBtZXJnZSBpdCB3aXRoIGZvbGxvd2luZyBvbmVzIHVudGlsIHdlIGdldCAxOSBieXRlc1xuICAgIC8vIHVzdWFsbHkgb25seSBvbmUgbWVyZ2UgaXMgbmVlZGVkIChhbmQgdGhpcyBpcyByYXJlIC4uLilcblxuXG4gICAgd2hpbGUgKGRhdGFbMF0ubGVuZ3RoIDwgMTkgJiYgZGF0YS5sZW5ndGggPiAxKSB7XG4gICAgICB2YXIgbmV3RGF0YSA9IG5ldyBVaW50OEFycmF5KGRhdGFbMF0ubGVuZ3RoICsgZGF0YVsxXS5sZW5ndGgpO1xuICAgICAgbmV3RGF0YS5zZXQoZGF0YVswXSk7XG4gICAgICBuZXdEYXRhLnNldChkYXRhWzFdLCBkYXRhWzBdLmxlbmd0aCk7XG4gICAgICBkYXRhWzBdID0gbmV3RGF0YTtcbiAgICAgIGRhdGEuc3BsaWNlKDEsIDEpO1xuICAgIH0gLy8gcmV0cmlldmUgUFRTL0RUUyBmcm9tIGZpcnN0IGZyYWdtZW50XG5cblxuICAgIGZyYWcgPSBkYXRhWzBdO1xuICAgIHBlc1ByZWZpeCA9IChmcmFnWzBdIDw8IDE2KSArIChmcmFnWzFdIDw8IDgpICsgZnJhZ1syXTtcblxuICAgIGlmIChwZXNQcmVmaXggPT09IDEpIHtcbiAgICAgIHBlc0xlbiA9IChmcmFnWzRdIDw8IDgpICsgZnJhZ1s1XTsgLy8gaWYgUEVTIHBhcnNlZCBsZW5ndGggaXMgbm90IHplcm8gYW5kIGdyZWF0ZXIgdGhhbiB0b3RhbCByZWNlaXZlZCBsZW5ndGgsIHN0b3AgcGFyc2luZy4gUEVTIG1pZ2h0IGJlIHRydW5jYXRlZFxuICAgICAgLy8gbWludXMgNiA6IFBFUyBoZWFkZXIgc2l6ZVxuXG4gICAgICBpZiAocGVzTGVuICYmIHBlc0xlbiA+IHN0cmVhbS5zaXplIC0gNikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcGVzRmxhZ3MgPSBmcmFnWzddO1xuXG4gICAgICBpZiAocGVzRmxhZ3MgJiAweEMwKSB7XG4gICAgICAgIC8qIFBFUyBoZWFkZXIgZGVzY3JpYmVkIGhlcmUgOiBodHRwOi8vZHZkLnNvdXJjZWZvcmdlLm5ldC9kdmRpbmZvL3Blcy1oZHIuaHRtbFxuICAgICAgICAgICAgYXMgUFRTIC8gRFRTIGlzIDMzIGJpdCB3ZSBjYW5ub3QgdXNlIGJpdHdpc2Ugb3BlcmF0b3IgaW4gSlMsXG4gICAgICAgICAgICBhcyBCaXR3aXNlIG9wZXJhdG9ycyB0cmVhdCB0aGVpciBvcGVyYW5kcyBhcyBhIHNlcXVlbmNlIG9mIDMyIGJpdHMgKi9cbiAgICAgICAgcGVzUHRzID0gKGZyYWdbOV0gJiAweDBFKSAqIDUzNjg3MDkxMiArIC8vIDEgPDwgMjlcbiAgICAgICAgKGZyYWdbMTBdICYgMHhGRikgKiA0MTk0MzA0ICsgLy8gMSA8PCAyMlxuICAgICAgICAoZnJhZ1sxMV0gJiAweEZFKSAqIDE2Mzg0ICsgLy8gMSA8PCAxNFxuICAgICAgICAoZnJhZ1sxMl0gJiAweEZGKSAqIDEyOCArIC8vIDEgPDwgN1xuICAgICAgICAoZnJhZ1sxM10gJiAweEZFKSAvIDI7XG5cbiAgICAgICAgaWYgKHBlc0ZsYWdzICYgMHg0MCkge1xuICAgICAgICAgIHBlc0R0cyA9IChmcmFnWzE0XSAmIDB4MEUpICogNTM2ODcwOTEyICsgLy8gMSA8PCAyOVxuICAgICAgICAgIChmcmFnWzE1XSAmIDB4RkYpICogNDE5NDMwNCArIC8vIDEgPDwgMjJcbiAgICAgICAgICAoZnJhZ1sxNl0gJiAweEZFKSAqIDE2Mzg0ICsgLy8gMSA8PCAxNFxuICAgICAgICAgIChmcmFnWzE3XSAmIDB4RkYpICogMTI4ICsgLy8gMSA8PCA3XG4gICAgICAgICAgKGZyYWdbMThdICYgMHhGRSkgLyAyO1xuXG4gICAgICAgICAgaWYgKHBlc1B0cyAtIHBlc0R0cyA+IDYwICogOTAwMDApIHtcbiAgICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuKE1hdGgucm91bmQoKHBlc1B0cyAtIHBlc0R0cykgLyA5MDAwMCkgKyBcInMgZGVsdGEgYmV0d2VlbiBQVFMgYW5kIERUUywgYWxpZ24gdGhlbVwiKTtcbiAgICAgICAgICAgIHBlc1B0cyA9IHBlc0R0cztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVzRHRzID0gcGVzUHRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHBlc0hkckxlbiA9IGZyYWdbOF07IC8vIDkgYnl0ZXMgOiA2IGJ5dGVzIGZvciBQRVMgaGVhZGVyICsgMyBieXRlcyBmb3IgUEVTIGV4dGVuc2lvblxuXG4gICAgICBwYXlsb2FkU3RhcnRPZmZzZXQgPSBwZXNIZHJMZW4gKyA5O1xuXG4gICAgICBpZiAoc3RyZWFtLnNpemUgPD0gcGF5bG9hZFN0YXJ0T2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBzdHJlYW0uc2l6ZSAtPSBwYXlsb2FkU3RhcnRPZmZzZXQ7IC8vIHJlYXNzZW1ibGUgUEVTIHBhY2tldFxuXG4gICAgICBwZXNEYXRhID0gbmV3IFVpbnQ4QXJyYXkoc3RyZWFtLnNpemUpO1xuXG4gICAgICBmb3IgKHZhciBqID0gMCwgZGF0YUxlbiA9IGRhdGEubGVuZ3RoOyBqIDwgZGF0YUxlbjsgaisrKSB7XG4gICAgICAgIGZyYWcgPSBkYXRhW2pdO1xuICAgICAgICB2YXIgbGVuID0gZnJhZy5ieXRlTGVuZ3RoO1xuXG4gICAgICAgIGlmIChwYXlsb2FkU3RhcnRPZmZzZXQpIHtcbiAgICAgICAgICBpZiAocGF5bG9hZFN0YXJ0T2Zmc2V0ID4gbGVuKSB7XG4gICAgICAgICAgICAvLyB0cmltIGZ1bGwgZnJhZyBpZiBQRVMgaGVhZGVyIGJpZ2dlciB0aGFuIGZyYWdcbiAgICAgICAgICAgIHBheWxvYWRTdGFydE9mZnNldCAtPSBsZW47XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdHJpbSBwYXJ0aWFsIGZyYWcgaWYgUEVTIGhlYWRlciBzbWFsbGVyIHRoYW4gZnJhZ1xuICAgICAgICAgICAgZnJhZyA9IGZyYWcuc3ViYXJyYXkocGF5bG9hZFN0YXJ0T2Zmc2V0KTtcbiAgICAgICAgICAgIGxlbiAtPSBwYXlsb2FkU3RhcnRPZmZzZXQ7XG4gICAgICAgICAgICBwYXlsb2FkU3RhcnRPZmZzZXQgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHBlc0RhdGEuc2V0KGZyYWcsIGkpO1xuICAgICAgICBpICs9IGxlbjtcbiAgICAgIH1cblxuICAgICAgaWYgKHBlc0xlbikge1xuICAgICAgICAvLyBwYXlsb2FkIHNpemUgOiByZW1vdmUgUEVTIGhlYWRlciArIFBFUyBleHRlbnNpb25cbiAgICAgICAgcGVzTGVuIC09IHBlc0hkckxlbiArIDM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IHBlc0RhdGEsXG4gICAgICAgIHB0czogcGVzUHRzLFxuICAgICAgICBkdHM6IHBlc0R0cyxcbiAgICAgICAgbGVuOiBwZXNMZW5cbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucHVzaEFjY2VzVW5pdCA9IGZ1bmN0aW9uIHB1c2hBY2Nlc1VuaXQoYXZjU2FtcGxlLCBhdmNUcmFjaykge1xuICAgIGlmIChhdmNTYW1wbGUudW5pdHMubGVuZ3RoICYmIGF2Y1NhbXBsZS5mcmFtZSkge1xuICAgICAgdmFyIHNhbXBsZXMgPSBhdmNUcmFjay5zYW1wbGVzO1xuICAgICAgdmFyIG5iU2FtcGxlcyA9IHNhbXBsZXMubGVuZ3RoOyAvLyBpZiBzYW1wbGUgZG9lcyBub3QgaGF2ZSBQVFMvRFRTLCBwYXRjaCB3aXRoIGxhc3Qgc2FtcGxlIFBUUy9EVFNcblxuICAgICAgaWYgKGlzTmFOKGF2Y1NhbXBsZS5wdHMpKSB7XG4gICAgICAgIGlmIChuYlNhbXBsZXMpIHtcbiAgICAgICAgICB2YXIgbGFzdFNhbXBsZSA9IHNhbXBsZXNbbmJTYW1wbGVzIC0gMV07XG4gICAgICAgICAgYXZjU2FtcGxlLnB0cyA9IGxhc3RTYW1wbGUucHRzO1xuICAgICAgICAgIGF2Y1NhbXBsZS5kdHMgPSBsYXN0U2FtcGxlLmR0cztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBkcm9wcGluZyBzYW1wbGVzLCBubyB0aW1lc3RhbXAgZm91bmRcbiAgICAgICAgICBhdmNUcmFjay5kcm9wcGVkKys7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9IC8vIG9ubHkgcHVzaCBBVkMgc2FtcGxlIGlmIHN0YXJ0aW5nIHdpdGggYSBrZXlmcmFtZSBpcyBub3QgbWFuZGF0b3J5IE9SXG4gICAgICAvLyAgICBpZiBrZXlmcmFtZSBhbHJlYWR5IGZvdW5kIGluIHRoaXMgZnJhZ21lbnQgT1JcbiAgICAgIC8vICAgICAgIGtleWZyYW1lIGZvdW5kIGluIGxhc3QgZnJhZ21lbnQgKHRyYWNrLnNwcykgQU5EXG4gICAgICAvLyAgICAgICAgICBzYW1wbGVzIGFscmVhZHkgYXBwZW5kZWQgKHdlIGFscmVhZHkgZm91bmQgYSBrZXlmcmFtZSBpbiB0aGlzIGZyYWdtZW50KSBPUiBmcmFnbWVudCBpcyBjb250aWd1b3VzXG5cblxuICAgICAgaWYgKCF0aGlzLmNvbmZpZy5mb3JjZUtleUZyYW1lT25EaXNjb250aW51aXR5IHx8IGF2Y1NhbXBsZS5rZXkgPT09IHRydWUgfHwgYXZjVHJhY2suc3BzICYmIChuYlNhbXBsZXMgfHwgdGhpcy5jb250aWd1b3VzKSkge1xuICAgICAgICBhdmNTYW1wbGUuaWQgPSBuYlNhbXBsZXM7XG4gICAgICAgIHNhbXBsZXMucHVzaChhdmNTYW1wbGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZHJvcHBlZCBzYW1wbGVzLCB0cmFjayBpdFxuICAgICAgICBhdmNUcmFjay5kcm9wcGVkKys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGF2Y1NhbXBsZS5kZWJ1Zy5sZW5ndGgpIHtcbiAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coYXZjU2FtcGxlLnB0cyArICcvJyArIGF2Y1NhbXBsZS5kdHMgKyAnOicgKyBhdmNTYW1wbGUuZGVidWcpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX3BhcnNlQVZDUEVTID0gZnVuY3Rpb24gX3BhcnNlQVZDUEVTKHBlcywgbGFzdCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAvLyBsb2dnZXIubG9nKCdwYXJzZSBuZXcgUEVTJyk7XG4gICAgdmFyIHRyYWNrID0gdGhpcy5fYXZjVHJhY2ssXG4gICAgICAgIHVuaXRzID0gdGhpcy5fcGFyc2VBVkNOQUx1KHBlcy5kYXRhKSxcbiAgICAgICAgZGVidWcgPSBmYWxzZSxcbiAgICAgICAgZXhwR29sb21iRGVjb2RlcixcbiAgICAgICAgYXZjU2FtcGxlID0gdGhpcy5hdmNTYW1wbGUsXG4gICAgICAgIHB1c2gsXG4gICAgICAgIHNwc2ZvdW5kID0gZmFsc2UsXG4gICAgICAgIGksXG4gICAgICAgIHB1c2hBY2Nlc1VuaXQgPSB0aGlzLnB1c2hBY2Nlc1VuaXQuYmluZCh0aGlzKSxcbiAgICAgICAgY3JlYXRlQVZDU2FtcGxlID0gZnVuY3Rpb24gY3JlYXRlQVZDU2FtcGxlKGtleSwgcHRzLCBkdHMsIGRlYnVnKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgcHRzOiBwdHMsXG4gICAgICAgIGR0czogZHRzLFxuICAgICAgICB1bml0czogW10sXG4gICAgICAgIGRlYnVnOiBkZWJ1Z1xuICAgICAgfTtcbiAgICB9OyAvLyBmcmVlIHBlcy5kYXRhIHRvIHNhdmUgdXAgc29tZSBtZW1vcnlcblxuXG4gICAgcGVzLmRhdGEgPSBudWxsOyAvLyBpZiBuZXcgTkFMIHVuaXRzIGZvdW5kIGFuZCBsYXN0IHNhbXBsZSBzdGlsbCB0aGVyZSwgbGV0J3MgcHVzaCAuLi5cbiAgICAvLyB0aGlzIGhlbHBzIHBhcnNpbmcgc3RyZWFtcyB3aXRoIG1pc3NpbmcgQVVEIChvbmx5IGRvIHRoaXMgaWYgQVVEIG5ldmVyIGZvdW5kKVxuXG4gICAgaWYgKGF2Y1NhbXBsZSAmJiB1bml0cy5sZW5ndGggJiYgIXRyYWNrLmF1ZEZvdW5kKSB7XG4gICAgICBwdXNoQWNjZXNVbml0KGF2Y1NhbXBsZSwgdHJhY2spO1xuICAgICAgYXZjU2FtcGxlID0gdGhpcy5hdmNTYW1wbGUgPSBjcmVhdGVBVkNTYW1wbGUoZmFsc2UsIHBlcy5wdHMsIHBlcy5kdHMsICcnKTtcbiAgICB9XG5cbiAgICB1bml0cy5mb3JFYWNoKGZ1bmN0aW9uICh1bml0KSB7XG4gICAgICBzd2l0Y2ggKHVuaXQudHlwZSkge1xuICAgICAgICAvLyBORFJcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIHB1c2ggPSB0cnVlO1xuXG4gICAgICAgICAgaWYgKCFhdmNTYW1wbGUpIHtcbiAgICAgICAgICAgIGF2Y1NhbXBsZSA9IF90aGlzLmF2Y1NhbXBsZSA9IGNyZWF0ZUFWQ1NhbXBsZSh0cnVlLCBwZXMucHRzLCBwZXMuZHRzLCAnJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGRlYnVnKSB7XG4gICAgICAgICAgICBhdmNTYW1wbGUuZGVidWcgKz0gJ05EUiAnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGF2Y1NhbXBsZS5mcmFtZSA9IHRydWU7XG4gICAgICAgICAgdmFyIGRhdGEgPSB1bml0LmRhdGE7IC8vIG9ubHkgY2hlY2sgc2xpY2UgdHlwZSB0byBkZXRlY3QgS0YgaW4gY2FzZSBTUFMgZm91bmQgaW4gc2FtZSBwYWNrZXQgKGFueSBrZXlmcmFtZSBpcyBwcmVjZWRlZCBieSBTUFMgLi4uKVxuXG4gICAgICAgICAgaWYgKHNwc2ZvdW5kICYmIGRhdGEubGVuZ3RoID4gNCkge1xuICAgICAgICAgICAgLy8gcmV0cmlldmUgc2xpY2UgdHlwZSBieSBwYXJzaW5nIGJlZ2lubmluZyBvZiBOQUwgdW5pdCAoZm9sbG93IEgyNjQgc3BlYywgc2xpY2VfaGVhZGVyIGRlZmluaXRpb24pIHRvIGRldGVjdCBrZXlmcmFtZSBlbWJlZGRlZCBpbiBORFJcbiAgICAgICAgICAgIHZhciBzbGljZVR5cGUgPSBuZXcgZXhwX2dvbG9tYihkYXRhKS5yZWFkU2xpY2VUeXBlKCk7IC8vIDIgOiBJIHNsaWNlLCA0IDogU0kgc2xpY2UsIDcgOiBJIHNsaWNlLCA5OiBTSSBzbGljZVxuICAgICAgICAgICAgLy8gU0kgc2xpY2UgOiBBIHNsaWNlIHRoYXQgaXMgY29kZWQgdXNpbmcgaW50cmEgcHJlZGljdGlvbiBvbmx5IGFuZCB1c2luZyBxdWFudGlzYXRpb24gb2YgdGhlIHByZWRpY3Rpb24gc2FtcGxlcy5cbiAgICAgICAgICAgIC8vIEFuIFNJIHNsaWNlIGNhbiBiZSBjb2RlZCBzdWNoIHRoYXQgaXRzIGRlY29kZWQgc2FtcGxlcyBjYW4gYmUgY29uc3RydWN0ZWQgaWRlbnRpY2FsbHkgdG8gYW4gU1Agc2xpY2UuXG4gICAgICAgICAgICAvLyBJIHNsaWNlOiBBIHNsaWNlIHRoYXQgaXMgbm90IGFuIFNJIHNsaWNlIHRoYXQgaXMgZGVjb2RlZCB1c2luZyBpbnRyYSBwcmVkaWN0aW9uIG9ubHkuXG4gICAgICAgICAgICAvLyBpZiAoc2xpY2VUeXBlID09PSAyIHx8IHNsaWNlVHlwZSA9PT0gNykge1xuXG4gICAgICAgICAgICBpZiAoc2xpY2VUeXBlID09PSAyIHx8IHNsaWNlVHlwZSA9PT0gNCB8fCBzbGljZVR5cGUgPT09IDcgfHwgc2xpY2VUeXBlID09PSA5KSB7XG4gICAgICAgICAgICAgIGF2Y1NhbXBsZS5rZXkgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAvLyBJRFJcblxuICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgcHVzaCA9IHRydWU7IC8vIGhhbmRsZSBQRVMgbm90IHN0YXJ0aW5nIHdpdGggQVVEXG5cbiAgICAgICAgICBpZiAoIWF2Y1NhbXBsZSkge1xuICAgICAgICAgICAgYXZjU2FtcGxlID0gX3RoaXMuYXZjU2FtcGxlID0gY3JlYXRlQVZDU2FtcGxlKHRydWUsIHBlcy5wdHMsIHBlcy5kdHMsICcnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZGVidWcpIHtcbiAgICAgICAgICAgIGF2Y1NhbXBsZS5kZWJ1ZyArPSAnSURSICc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYXZjU2FtcGxlLmtleSA9IHRydWU7XG4gICAgICAgICAgYXZjU2FtcGxlLmZyYW1lID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gU0VJXG5cbiAgICAgICAgY2FzZSA2OlxuICAgICAgICAgIHB1c2ggPSB0cnVlO1xuXG4gICAgICAgICAgaWYgKGRlYnVnICYmIGF2Y1NhbXBsZSkge1xuICAgICAgICAgICAgYXZjU2FtcGxlLmRlYnVnICs9ICdTRUkgJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBleHBHb2xvbWJEZWNvZGVyID0gbmV3IGV4cF9nb2xvbWIoX3RoaXMuZGlzY2FyZEVQQih1bml0LmRhdGEpKTsgLy8gc2tpcCBmcmFtZVR5cGVcblxuICAgICAgICAgIGV4cEdvbG9tYkRlY29kZXIucmVhZFVCeXRlKCk7XG4gICAgICAgICAgdmFyIHBheWxvYWRUeXBlID0gMDtcbiAgICAgICAgICB2YXIgcGF5bG9hZFNpemUgPSAwO1xuICAgICAgICAgIHZhciBlbmRPZkNhcHRpb25zID0gZmFsc2U7XG4gICAgICAgICAgdmFyIGIgPSAwO1xuXG4gICAgICAgICAgd2hpbGUgKCFlbmRPZkNhcHRpb25zICYmIGV4cEdvbG9tYkRlY29kZXIuYnl0ZXNBdmFpbGFibGUgPiAxKSB7XG4gICAgICAgICAgICBwYXlsb2FkVHlwZSA9IDA7XG5cbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgYiA9IGV4cEdvbG9tYkRlY29kZXIucmVhZFVCeXRlKCk7XG4gICAgICAgICAgICAgIHBheWxvYWRUeXBlICs9IGI7XG4gICAgICAgICAgICB9IHdoaWxlIChiID09PSAweEZGKTsgLy8gUGFyc2UgcGF5bG9hZCBzaXplLlxuXG5cbiAgICAgICAgICAgIHBheWxvYWRTaXplID0gMDtcblxuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICBiID0gZXhwR29sb21iRGVjb2Rlci5yZWFkVUJ5dGUoKTtcbiAgICAgICAgICAgICAgcGF5bG9hZFNpemUgKz0gYjtcbiAgICAgICAgICAgIH0gd2hpbGUgKGIgPT09IDB4RkYpOyAvLyBUT0RPOiB0aGVyZSBjYW4gYmUgbW9yZSB0aGFuIG9uZSBwYXlsb2FkIGluIGFuIFNFSSBwYWNrZXQuLi5cbiAgICAgICAgICAgIC8vIFRPRE86IG5lZWQgdG8gcmVhZCB0eXBlIGFuZCBzaXplIGluIGEgd2hpbGUgbG9vcCB0byBnZXQgdGhlbSBhbGxcblxuXG4gICAgICAgICAgICBpZiAocGF5bG9hZFR5cGUgPT09IDQgJiYgZXhwR29sb21iRGVjb2Rlci5ieXRlc0F2YWlsYWJsZSAhPT0gMCkge1xuICAgICAgICAgICAgICBlbmRPZkNhcHRpb25zID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdmFyIGNvdW50cnlDb2RlID0gZXhwR29sb21iRGVjb2Rlci5yZWFkVUJ5dGUoKTtcblxuICAgICAgICAgICAgICBpZiAoY291bnRyeUNvZGUgPT09IDE4MSkge1xuICAgICAgICAgICAgICAgIHZhciBwcm92aWRlckNvZGUgPSBleHBHb2xvbWJEZWNvZGVyLnJlYWRVU2hvcnQoKTtcblxuICAgICAgICAgICAgICAgIGlmIChwcm92aWRlckNvZGUgPT09IDQ5KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdXNlclN0cnVjdHVyZSA9IGV4cEdvbG9tYkRlY29kZXIucmVhZFVJbnQoKTtcblxuICAgICAgICAgICAgICAgICAgaWYgKHVzZXJTdHJ1Y3R1cmUgPT09IDB4NDc0MTM5MzQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXJEYXRhVHlwZSA9IGV4cEdvbG9tYkRlY29kZXIucmVhZFVCeXRlKCk7IC8vIFJhdyBDRUEtNjA4IGJ5dGVzIHdyYXBwZWQgaW4gQ0VBLTcwOCBwYWNrZXRcblxuICAgICAgICAgICAgICAgICAgICBpZiAodXNlckRhdGFUeXBlID09PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGZpcnN0Qnl0ZSA9IGV4cEdvbG9tYkRlY29kZXIucmVhZFVCeXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHNlY29uZEJ5dGUgPSBleHBHb2xvbWJEZWNvZGVyLnJlYWRVQnl0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgIHZhciB0b3RhbENDcyA9IDMxICYgZmlyc3RCeXRlO1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBieXRlQXJyYXkgPSBbZmlyc3RCeXRlLCBzZWNvbmRCeXRlXTtcblxuICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b3RhbENDczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAzIGJ5dGVzIHBlciBDQ1xuICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZUFycmF5LnB1c2goZXhwR29sb21iRGVjb2Rlci5yZWFkVUJ5dGUoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBieXRlQXJyYXkucHVzaChleHBHb2xvbWJEZWNvZGVyLnJlYWRVQnl0ZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVBcnJheS5wdXNoKGV4cEdvbG9tYkRlY29kZXIucmVhZFVCeXRlKCkpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9pbnNlcnRTYW1wbGVJbk9yZGVyKF90aGlzLl90eHRUcmFjay5zYW1wbGVzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHRzOiBwZXMucHRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZXM6IGJ5dGVBcnJheVxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBheWxvYWRUeXBlID09PSA1ICYmIGV4cEdvbG9tYkRlY29kZXIuYnl0ZXNBdmFpbGFibGUgIT09IDApIHtcbiAgICAgICAgICAgICAgZW5kT2ZDYXB0aW9ucyA9IHRydWU7XG5cbiAgICAgICAgICAgICAgaWYgKHBheWxvYWRTaXplID4gMTYpIHtcbiAgICAgICAgICAgICAgICB2YXIgdXVpZFN0ckFycmF5ID0gW107XG5cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgICAgICAgICAgICAgdXVpZFN0ckFycmF5LnB1c2goZXhwR29sb21iRGVjb2Rlci5yZWFkVUJ5dGUoKS50b1N0cmluZygxNikpO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMyB8fCBpID09PSA1IHx8IGkgPT09IDcgfHwgaSA9PT0gOSkge1xuICAgICAgICAgICAgICAgICAgICB1dWlkU3RyQXJyYXkucHVzaCgnLScpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBsZW5ndGggPSBwYXlsb2FkU2l6ZSAtIDE2O1xuICAgICAgICAgICAgICAgIHZhciB1c2VyRGF0YVBheWxvYWRCeXRlcyA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgIHVzZXJEYXRhUGF5bG9hZEJ5dGVzW2ldID0gZXhwR29sb21iRGVjb2Rlci5yZWFkVUJ5dGUoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfdGhpcy5faW5zZXJ0U2FtcGxlSW5PcmRlcihfdGhpcy5fdHh0VHJhY2suc2FtcGxlcywge1xuICAgICAgICAgICAgICAgICAgcHRzOiBwZXMucHRzLFxuICAgICAgICAgICAgICAgICAgcGF5bG9hZFR5cGU6IHBheWxvYWRUeXBlLFxuICAgICAgICAgICAgICAgICAgdXVpZDogdXVpZFN0ckFycmF5LmpvaW4oJycpLFxuICAgICAgICAgICAgICAgICAgdXNlckRhdGFCeXRlczogdXNlckRhdGFQYXlsb2FkQnl0ZXMsXG4gICAgICAgICAgICAgICAgICB1c2VyRGF0YTogT2JqZWN0KGlkM1tcInV0ZjhBcnJheVRvU3RyXCJdKSh1c2VyRGF0YVBheWxvYWRCeXRlcy5idWZmZXIpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGF5bG9hZFNpemUgPCBleHBHb2xvbWJEZWNvZGVyLmJ5dGVzQXZhaWxhYmxlKSB7XG4gICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYXlsb2FkU2l6ZTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZXhwR29sb21iRGVjb2Rlci5yZWFkVUJ5dGUoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAvLyBTUFNcblxuICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgcHVzaCA9IHRydWU7XG4gICAgICAgICAgc3BzZm91bmQgPSB0cnVlO1xuXG4gICAgICAgICAgaWYgKGRlYnVnICYmIGF2Y1NhbXBsZSkge1xuICAgICAgICAgICAgYXZjU2FtcGxlLmRlYnVnICs9ICdTUFMgJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIXRyYWNrLnNwcykge1xuICAgICAgICAgICAgZXhwR29sb21iRGVjb2RlciA9IG5ldyBleHBfZ29sb21iKHVuaXQuZGF0YSk7XG4gICAgICAgICAgICB2YXIgY29uZmlnID0gZXhwR29sb21iRGVjb2Rlci5yZWFkU1BTKCk7XG4gICAgICAgICAgICB0cmFjay53aWR0aCA9IGNvbmZpZy53aWR0aDtcbiAgICAgICAgICAgIHRyYWNrLmhlaWdodCA9IGNvbmZpZy5oZWlnaHQ7XG4gICAgICAgICAgICB0cmFjay5waXhlbFJhdGlvID0gY29uZmlnLnBpeGVsUmF0aW87XG4gICAgICAgICAgICB0cmFjay5zcHMgPSBbdW5pdC5kYXRhXTtcbiAgICAgICAgICAgIHRyYWNrLmR1cmF0aW9uID0gX3RoaXMuX2R1cmF0aW9uO1xuICAgICAgICAgICAgdmFyIGNvZGVjYXJyYXkgPSB1bml0LmRhdGEuc3ViYXJyYXkoMSwgNCk7XG4gICAgICAgICAgICB2YXIgY29kZWNzdHJpbmcgPSAnYXZjMS4nO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICAgICAgICAgIHZhciBoID0gY29kZWNhcnJheVtpXS50b1N0cmluZygxNik7XG5cbiAgICAgICAgICAgICAgaWYgKGgubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgICAgIGggPSAnMCcgKyBoO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY29kZWNzdHJpbmcgKz0gaDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHJhY2suY29kZWMgPSBjb2RlY3N0cmluZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gUFBTXG5cbiAgICAgICAgY2FzZSA4OlxuICAgICAgICAgIHB1c2ggPSB0cnVlO1xuXG4gICAgICAgICAgaWYgKGRlYnVnICYmIGF2Y1NhbXBsZSkge1xuICAgICAgICAgICAgYXZjU2FtcGxlLmRlYnVnICs9ICdQUFMgJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIXRyYWNrLnBwcykge1xuICAgICAgICAgICAgdHJhY2sucHBzID0gW3VuaXQuZGF0YV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIC8vIEFVRFxuXG4gICAgICAgIGNhc2UgOTpcbiAgICAgICAgICBwdXNoID0gZmFsc2U7XG4gICAgICAgICAgdHJhY2suYXVkRm91bmQgPSB0cnVlO1xuXG4gICAgICAgICAgaWYgKGF2Y1NhbXBsZSkge1xuICAgICAgICAgICAgcHVzaEFjY2VzVW5pdChhdmNTYW1wbGUsIHRyYWNrKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhdmNTYW1wbGUgPSBfdGhpcy5hdmNTYW1wbGUgPSBjcmVhdGVBVkNTYW1wbGUoZmFsc2UsIHBlcy5wdHMsIHBlcy5kdHMsIGRlYnVnID8gJ0FVRCAnIDogJycpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAvLyBGaWxsZXIgRGF0YVxuXG4gICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgcHVzaCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcHVzaCA9IGZhbHNlO1xuXG4gICAgICAgICAgaWYgKGF2Y1NhbXBsZSkge1xuICAgICAgICAgICAgYXZjU2FtcGxlLmRlYnVnICs9ICd1bmtub3duIE5BTCAnICsgdW5pdC50eXBlICsgJyAnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoYXZjU2FtcGxlICYmIHB1c2gpIHtcbiAgICAgICAgdmFyIF91bml0cyA9IGF2Y1NhbXBsZS51bml0cztcblxuICAgICAgICBfdW5pdHMucHVzaCh1bml0KTtcbiAgICAgIH1cbiAgICB9KTsgLy8gaWYgbGFzdCBQRVMgcGFja2V0LCBwdXNoIHNhbXBsZXNcblxuICAgIGlmIChsYXN0ICYmIGF2Y1NhbXBsZSkge1xuICAgICAgcHVzaEFjY2VzVW5pdChhdmNTYW1wbGUsIHRyYWNrKTtcbiAgICAgIHRoaXMuYXZjU2FtcGxlID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9pbnNlcnRTYW1wbGVJbk9yZGVyID0gZnVuY3Rpb24gX2luc2VydFNhbXBsZUluT3JkZXIoYXJyLCBkYXRhKSB7XG4gICAgdmFyIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgICBpZiAobGVuID4gMCkge1xuICAgICAgaWYgKGRhdGEucHRzID49IGFycltsZW4gLSAxXS5wdHMpIHtcbiAgICAgICAgYXJyLnB1c2goZGF0YSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBwb3MgPSBsZW4gLSAxOyBwb3MgPj0gMDsgcG9zLS0pIHtcbiAgICAgICAgICBpZiAoZGF0YS5wdHMgPCBhcnJbcG9zXS5wdHMpIHtcbiAgICAgICAgICAgIGFyci5zcGxpY2UocG9zLCAwLCBkYXRhKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBhcnIucHVzaChkYXRhKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9nZXRMYXN0TmFsVW5pdCA9IGZ1bmN0aW9uIF9nZXRMYXN0TmFsVW5pdCgpIHtcbiAgICB2YXIgYXZjU2FtcGxlID0gdGhpcy5hdmNTYW1wbGUsXG4gICAgICAgIGxhc3RVbml0OyAvLyB0cnkgdG8gZmFsbGJhY2sgdG8gcHJldmlvdXMgc2FtcGxlIGlmIGN1cnJlbnQgb25lIGlzIGVtcHR5XG5cbiAgICBpZiAoIWF2Y1NhbXBsZSB8fCBhdmNTYW1wbGUudW5pdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB2YXIgdHJhY2sgPSB0aGlzLl9hdmNUcmFjayxcbiAgICAgICAgICBzYW1wbGVzID0gdHJhY2suc2FtcGxlcztcbiAgICAgIGF2Y1NhbXBsZSA9IHNhbXBsZXNbc2FtcGxlcy5sZW5ndGggLSAxXTtcbiAgICB9XG5cbiAgICBpZiAoYXZjU2FtcGxlKSB7XG4gICAgICB2YXIgdW5pdHMgPSBhdmNTYW1wbGUudW5pdHM7XG4gICAgICBsYXN0VW5pdCA9IHVuaXRzW3VuaXRzLmxlbmd0aCAtIDFdO1xuICAgIH1cblxuICAgIHJldHVybiBsYXN0VW5pdDtcbiAgfTtcblxuICBfcHJvdG8uX3BhcnNlQVZDTkFMdSA9IGZ1bmN0aW9uIF9wYXJzZUFWQ05BTHUoYXJyYXkpIHtcbiAgICB2YXIgaSA9IDAsXG4gICAgICAgIGxlbiA9IGFycmF5LmJ5dGVMZW5ndGgsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBvdmVyZmxvdyxcbiAgICAgICAgdHJhY2sgPSB0aGlzLl9hdmNUcmFjayxcbiAgICAgICAgc3RhdGUgPSB0cmFjay5uYWx1U3RhdGUgfHwgMCxcbiAgICAgICAgbGFzdFN0YXRlID0gc3RhdGU7XG4gICAgdmFyIHVuaXRzID0gW10sXG4gICAgICAgIHVuaXQsXG4gICAgICAgIHVuaXRUeXBlLFxuICAgICAgICBsYXN0VW5pdFN0YXJ0ID0gLTEsXG4gICAgICAgIGxhc3RVbml0VHlwZTsgLy8gbG9nZ2VyLmxvZygnUEVTOicgKyBIZXguaGV4RHVtcChhcnJheSkpO1xuXG4gICAgaWYgKHN0YXRlID09PSAtMSkge1xuICAgICAgLy8gc3BlY2lhbCB1c2UgY2FzZSB3aGVyZSB3ZSBmb3VuZCAzIG9yIDQtYnl0ZSBzdGFydCBjb2RlcyBleGFjdGx5IGF0IHRoZSBlbmQgb2YgcHJldmlvdXMgUEVTIHBhY2tldFxuICAgICAgbGFzdFVuaXRTdGFydCA9IDA7IC8vIE5BTHUgdHlwZSBpcyB2YWx1ZSByZWFkIGZyb20gb2Zmc2V0IDBcblxuICAgICAgbGFzdFVuaXRUeXBlID0gYXJyYXlbMF0gJiAweDFmO1xuICAgICAgc3RhdGUgPSAwO1xuICAgICAgaSA9IDE7XG4gICAgfVxuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIHZhbHVlID0gYXJyYXlbaSsrXTsgLy8gb3B0aW1pemF0aW9uLiBzdGF0ZSAwIGFuZCAxIGFyZSB0aGUgcHJlZG9taW5hbnQgY2FzZS4gbGV0J3MgaGFuZGxlIHRoZW0gb3V0c2lkZSBvZiB0aGUgc3dpdGNoL2Nhc2VcblxuICAgICAgaWYgKCFzdGF0ZSkge1xuICAgICAgICBzdGF0ZSA9IHZhbHVlID8gMCA6IDE7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IDEpIHtcbiAgICAgICAgc3RhdGUgPSB2YWx1ZSA/IDAgOiAyO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gLy8gaGVyZSB3ZSBoYXZlIHN0YXRlIGVpdGhlciBlcXVhbCB0byAyIG9yIDNcblxuXG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHN0YXRlID0gMztcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IDEpIHtcbiAgICAgICAgaWYgKGxhc3RVbml0U3RhcnQgPj0gMCkge1xuICAgICAgICAgIHVuaXQgPSB7XG4gICAgICAgICAgICBkYXRhOiBhcnJheS5zdWJhcnJheShsYXN0VW5pdFN0YXJ0LCBpIC0gc3RhdGUgLSAxKSxcbiAgICAgICAgICAgIHR5cGU6IGxhc3RVbml0VHlwZVxuICAgICAgICAgIH07IC8vIGxvZ2dlci5sb2coJ3B1c2hpbmcgTkFMVSwgdHlwZS9zaXplOicgKyB1bml0LnR5cGUgKyAnLycgKyB1bml0LmRhdGEuYnl0ZUxlbmd0aCk7XG5cbiAgICAgICAgICB1bml0cy5wdXNoKHVuaXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGxhc3RVbml0U3RhcnQgaXMgdW5kZWZpbmVkID0+IHRoaXMgaXMgdGhlIGZpcnN0IHN0YXJ0IGNvZGUgZm91bmQgaW4gdGhpcyBQRVMgcGFja2V0XG4gICAgICAgICAgLy8gZmlyc3QgY2hlY2sgaWYgc3RhcnQgY29kZSBkZWxpbWl0ZXIgaXMgb3ZlcmxhcHBpbmcgYmV0d2VlbiAyIFBFUyBwYWNrZXRzLFxuICAgICAgICAgIC8vIGllIGl0IHN0YXJ0ZWQgaW4gbGFzdCBwYWNrZXQgKGxhc3RTdGF0ZSBub3QgemVybylcbiAgICAgICAgICAvLyBhbmQgZW5kZWQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGlzIFBFUyBwYWNrZXQgKGkgPD0gNCAtIGxhc3RTdGF0ZSlcbiAgICAgICAgICB2YXIgbGFzdFVuaXQgPSB0aGlzLl9nZXRMYXN0TmFsVW5pdCgpO1xuXG4gICAgICAgICAgaWYgKGxhc3RVbml0KSB7XG4gICAgICAgICAgICBpZiAobGFzdFN0YXRlICYmIGkgPD0gNCAtIGxhc3RTdGF0ZSkge1xuICAgICAgICAgICAgICAvLyBzdGFydCBkZWxpbWl0ZXIgb3ZlcmxhcHBpbmcgYmV0d2VlbiBQRVMgcGFja2V0c1xuICAgICAgICAgICAgICAvLyBzdHJpcCBzdGFydCBkZWxpbWl0ZXIgYnl0ZXMgZnJvbSB0aGUgZW5kIG9mIGxhc3QgTkFMIHVuaXRcbiAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgbGFzdFVuaXQgaGFkIGEgc3RhdGUgZGlmZmVyZW50IGZyb20gemVyb1xuICAgICAgICAgICAgICBpZiAobGFzdFVuaXQuc3RhdGUpIHtcbiAgICAgICAgICAgICAgICAvLyBzdHJpcCBsYXN0IGJ5dGVzXG4gICAgICAgICAgICAgICAgbGFzdFVuaXQuZGF0YSA9IGxhc3RVbml0LmRhdGEuc3ViYXJyYXkoMCwgbGFzdFVuaXQuZGF0YS5ieXRlTGVuZ3RoIC0gbGFzdFN0YXRlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSAvLyBJZiBOQUwgdW5pdHMgYXJlIG5vdCBzdGFydGluZyByaWdodCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBQRVMgcGFja2V0LCBwdXNoIHByZWNlZGluZyBkYXRhIGludG8gcHJldmlvdXMgTkFMIHVuaXQuXG5cblxuICAgICAgICAgICAgb3ZlcmZsb3cgPSBpIC0gc3RhdGUgLSAxO1xuXG4gICAgICAgICAgICBpZiAob3ZlcmZsb3cgPiAwKSB7XG4gICAgICAgICAgICAgIC8vIGxvZ2dlci5sb2coJ2ZpcnN0IE5BTFUgZm91bmQgd2l0aCBvdmVyZmxvdzonICsgb3ZlcmZsb3cpO1xuICAgICAgICAgICAgICB2YXIgdG1wID0gbmV3IFVpbnQ4QXJyYXkobGFzdFVuaXQuZGF0YS5ieXRlTGVuZ3RoICsgb3ZlcmZsb3cpO1xuICAgICAgICAgICAgICB0bXAuc2V0KGxhc3RVbml0LmRhdGEsIDApO1xuICAgICAgICAgICAgICB0bXAuc2V0KGFycmF5LnN1YmFycmF5KDAsIG92ZXJmbG93KSwgbGFzdFVuaXQuZGF0YS5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICAgICAgbGFzdFVuaXQuZGF0YSA9IHRtcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gY2hlY2sgaWYgd2UgY2FuIHJlYWQgdW5pdCB0eXBlXG5cblxuICAgICAgICBpZiAoaSA8IGxlbikge1xuICAgICAgICAgIHVuaXRUeXBlID0gYXJyYXlbaV0gJiAweDFmOyAvLyBsb2dnZXIubG9nKCdmaW5kIE5BTFUgQCBvZmZzZXQ6JyArIGkgKyAnLHR5cGU6JyArIHVuaXRUeXBlKTtcblxuICAgICAgICAgIGxhc3RVbml0U3RhcnQgPSBpO1xuICAgICAgICAgIGxhc3RVbml0VHlwZSA9IHVuaXRUeXBlO1xuICAgICAgICAgIHN0YXRlID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBub3QgZW5vdWdoIGJ5dGUgdG8gcmVhZCB1bml0IHR5cGUuIGxldCdzIHJlYWQgaXQgb24gbmV4dCBQRVMgcGFyc2luZ1xuICAgICAgICAgIHN0YXRlID0gLTE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobGFzdFVuaXRTdGFydCA+PSAwICYmIHN0YXRlID49IDApIHtcbiAgICAgIHVuaXQgPSB7XG4gICAgICAgIGRhdGE6IGFycmF5LnN1YmFycmF5KGxhc3RVbml0U3RhcnQsIGxlbiksXG4gICAgICAgIHR5cGU6IGxhc3RVbml0VHlwZSxcbiAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICB9O1xuICAgICAgdW5pdHMucHVzaCh1bml0KTsgLy8gbG9nZ2VyLmxvZygncHVzaGluZyBOQUxVLCB0eXBlL3NpemUvc3RhdGU6JyArIHVuaXQudHlwZSArICcvJyArIHVuaXQuZGF0YS5ieXRlTGVuZ3RoICsgJy8nICsgc3RhdGUpO1xuICAgIH0gLy8gbm8gTkFMdSBmb3VuZFxuXG5cbiAgICBpZiAodW5pdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBhcHBlbmQgcGVzLmRhdGEgdG8gcHJldmlvdXMgTkFMIHVuaXRcbiAgICAgIHZhciBfbGFzdFVuaXQgPSB0aGlzLl9nZXRMYXN0TmFsVW5pdCgpO1xuXG4gICAgICBpZiAoX2xhc3RVbml0KSB7XG4gICAgICAgIHZhciBfdG1wID0gbmV3IFVpbnQ4QXJyYXkoX2xhc3RVbml0LmRhdGEuYnl0ZUxlbmd0aCArIGFycmF5LmJ5dGVMZW5ndGgpO1xuXG4gICAgICAgIF90bXAuc2V0KF9sYXN0VW5pdC5kYXRhLCAwKTtcblxuICAgICAgICBfdG1wLnNldChhcnJheSwgX2xhc3RVbml0LmRhdGEuYnl0ZUxlbmd0aCk7XG5cbiAgICAgICAgX2xhc3RVbml0LmRhdGEgPSBfdG1wO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyYWNrLm5hbHVTdGF0ZSA9IHN0YXRlO1xuICAgIHJldHVybiB1bml0cztcbiAgfVxuICAvKipcbiAgICogcmVtb3ZlIEVtdWxhdGlvbiBQcmV2ZW50aW9uIGJ5dGVzIGZyb20gYSBSQlNQXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRpc2NhcmRFUEIgPSBmdW5jdGlvbiBkaXNjYXJkRVBCKGRhdGEpIHtcbiAgICB2YXIgbGVuZ3RoID0gZGF0YS5ieXRlTGVuZ3RoLFxuICAgICAgICBFUEJQb3NpdGlvbnMgPSBbXSxcbiAgICAgICAgaSA9IDEsXG4gICAgICAgIG5ld0xlbmd0aCxcbiAgICAgICAgbmV3RGF0YTsgLy8gRmluZCBhbGwgYEVtdWxhdGlvbiBQcmV2ZW50aW9uIEJ5dGVzYFxuXG4gICAgd2hpbGUgKGkgPCBsZW5ndGggLSAyKSB7XG4gICAgICBpZiAoZGF0YVtpXSA9PT0gMCAmJiBkYXRhW2kgKyAxXSA9PT0gMCAmJiBkYXRhW2kgKyAyXSA9PT0gMHgwMykge1xuICAgICAgICBFUEJQb3NpdGlvbnMucHVzaChpICsgMik7XG4gICAgICAgIGkgKz0gMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICB9IC8vIElmIG5vIEVtdWxhdGlvbiBQcmV2ZW50aW9uIEJ5dGVzIHdlcmUgZm91bmQganVzdCByZXR1cm4gdGhlIG9yaWdpbmFsXG4gICAgLy8gYXJyYXlcblxuXG4gICAgaWYgKEVQQlBvc2l0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0gLy8gQ3JlYXRlIGEgbmV3IGFycmF5IHRvIGhvbGQgdGhlIE5BTCB1bml0IGRhdGFcblxuXG4gICAgbmV3TGVuZ3RoID0gbGVuZ3RoIC0gRVBCUG9zaXRpb25zLmxlbmd0aDtcbiAgICBuZXdEYXRhID0gbmV3IFVpbnQ4QXJyYXkobmV3TGVuZ3RoKTtcbiAgICB2YXIgc291cmNlSW5kZXggPSAwO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG5ld0xlbmd0aDsgc291cmNlSW5kZXgrKywgaSsrKSB7XG4gICAgICBpZiAoc291cmNlSW5kZXggPT09IEVQQlBvc2l0aW9uc1swXSkge1xuICAgICAgICAvLyBTa2lwIHRoaXMgYnl0ZVxuICAgICAgICBzb3VyY2VJbmRleCsrOyAvLyBSZW1vdmUgdGhpcyBwb3NpdGlvbiBpbmRleFxuXG4gICAgICAgIEVQQlBvc2l0aW9ucy5zaGlmdCgpO1xuICAgICAgfVxuXG4gICAgICBuZXdEYXRhW2ldID0gZGF0YVtzb3VyY2VJbmRleF07XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ld0RhdGE7XG4gIH07XG5cbiAgX3Byb3RvLl9wYXJzZUFBQ1BFUyA9IGZ1bmN0aW9uIF9wYXJzZUFBQ1BFUyhwZXMpIHtcbiAgICB2YXIgdHJhY2sgPSB0aGlzLl9hdWRpb1RyYWNrLFxuICAgICAgICBkYXRhID0gcGVzLmRhdGEsXG4gICAgICAgIHB0cyA9IHBlcy5wdHMsXG4gICAgICAgIHN0YXJ0T2Zmc2V0ID0gMCxcbiAgICAgICAgYWFjT3ZlckZsb3cgPSB0aGlzLmFhY092ZXJGbG93LFxuICAgICAgICBhYWNMYXN0UFRTID0gdGhpcy5hYWNMYXN0UFRTLFxuICAgICAgICBmcmFtZUR1cmF0aW9uLFxuICAgICAgICBmcmFtZUluZGV4LFxuICAgICAgICBvZmZzZXQsXG4gICAgICAgIHN0YW1wLFxuICAgICAgICBsZW47XG5cbiAgICBpZiAoYWFjT3ZlckZsb3cpIHtcbiAgICAgIHZhciB0bXAgPSBuZXcgVWludDhBcnJheShhYWNPdmVyRmxvdy5ieXRlTGVuZ3RoICsgZGF0YS5ieXRlTGVuZ3RoKTtcbiAgICAgIHRtcC5zZXQoYWFjT3ZlckZsb3csIDApO1xuICAgICAgdG1wLnNldChkYXRhLCBhYWNPdmVyRmxvdy5ieXRlTGVuZ3RoKTsgLy8gbG9nZ2VyLmxvZyhgQUFDOiBhcHBlbmQgb3ZlcmZsb3dpbmcgJHthYWNPdmVyRmxvdy5ieXRlTGVuZ3RofSBieXRlcyB0byBiZWdpbm5pbmcgb2YgbmV3IFBFU2ApO1xuXG4gICAgICBkYXRhID0gdG1wO1xuICAgIH0gLy8gbG9vayBmb3IgQURUUyBoZWFkZXIgKDB4RkZGeClcblxuXG4gICAgZm9yIChvZmZzZXQgPSBzdGFydE9mZnNldCwgbGVuID0gZGF0YS5sZW5ndGg7IG9mZnNldCA8IGxlbiAtIDE7IG9mZnNldCsrKSB7XG4gICAgICBpZiAoaXNIZWFkZXIoZGF0YSwgb2Zmc2V0KSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IC8vIGlmIEFEVFMgaGVhZGVyIGRvZXMgbm90IHN0YXJ0IHN0cmFpZ2h0IGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgUEVTIHBheWxvYWQsIHJhaXNlIGFuIGVycm9yXG5cblxuICAgIGlmIChvZmZzZXQpIHtcbiAgICAgIHZhciByZWFzb24sIGZhdGFsO1xuXG4gICAgICBpZiAob2Zmc2V0IDwgbGVuIC0gMSkge1xuICAgICAgICByZWFzb24gPSBcIkFBQyBQRVMgZGlkIG5vdCBzdGFydCB3aXRoIEFEVFMgaGVhZGVyLG9mZnNldDpcIiArIG9mZnNldDtcbiAgICAgICAgZmF0YWwgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlYXNvbiA9ICdubyBBRFRTIGhlYWRlciBmb3VuZCBpbiBBQUMgUEVTJztcbiAgICAgICAgZmF0YWwgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ud2FybihcInBhcnNpbmcgZXJyb3I6XCIgKyByZWFzb24pO1xuICAgICAgdGhpcy5vYnNlcnZlci50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uRVJST1IsIHtcbiAgICAgICAgdHlwZTogZXJyb3JzW1wiRXJyb3JUeXBlc1wiXS5NRURJQV9FUlJPUixcbiAgICAgICAgZGV0YWlsczogZXJyb3JzW1wiRXJyb3JEZXRhaWxzXCJdLkZSQUdfUEFSU0lOR19FUlJPUixcbiAgICAgICAgZmF0YWw6IGZhdGFsLFxuICAgICAgICByZWFzb246IHJlYXNvblxuICAgICAgfSk7XG5cbiAgICAgIGlmIChmYXRhbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW5pdFRyYWNrQ29uZmlnKHRyYWNrLCB0aGlzLm9ic2VydmVyLCBkYXRhLCBvZmZzZXQsIHRoaXMuYXVkaW9Db2RlYyk7XG4gICAgZnJhbWVJbmRleCA9IDA7XG4gICAgZnJhbWVEdXJhdGlvbiA9IGdldEZyYW1lRHVyYXRpb24odHJhY2suc2FtcGxlcmF0ZSk7IC8vIGlmIGxhc3QgQUFDIGZyYW1lIGlzIG92ZXJmbG93aW5nLCB3ZSBzaG91bGQgZW5zdXJlIHRpbWVzdGFtcHMgYXJlIGNvbnRpZ3VvdXM6XG4gICAgLy8gZmlyc3Qgc2FtcGxlIFBUUyBzaG91bGQgYmUgZXF1YWwgdG8gbGFzdCBzYW1wbGUgUFRTICsgZnJhbWVEdXJhdGlvblxuXG4gICAgaWYgKGFhY092ZXJGbG93ICYmIGFhY0xhc3RQVFMpIHtcbiAgICAgIHZhciBuZXdQVFMgPSBhYWNMYXN0UFRTICsgZnJhbWVEdXJhdGlvbjtcblxuICAgICAgaWYgKE1hdGguYWJzKG5ld1BUUyAtIHB0cykgPiAxKSB7XG4gICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJBQUM6IGFsaWduIFBUUyBmb3Igb3ZlcmxhcHBpbmcgZnJhbWVzIGJ5IFwiICsgTWF0aC5yb3VuZCgobmV3UFRTIC0gcHRzKSAvIDkwKSk7XG4gICAgICAgIHB0cyA9IG5ld1BUUztcbiAgICAgIH1cbiAgICB9IC8vIHNjYW4gZm9yIGFhYyBzYW1wbGVzXG5cblxuICAgIHdoaWxlIChvZmZzZXQgPCBsZW4pIHtcbiAgICAgIGlmIChpc0hlYWRlcihkYXRhLCBvZmZzZXQpKSB7XG4gICAgICAgIGlmIChvZmZzZXQgKyA1IDwgbGVuKSB7XG4gICAgICAgICAgdmFyIGZyYW1lID0gYXBwZW5kRnJhbWUodHJhY2ssIGRhdGEsIG9mZnNldCwgcHRzLCBmcmFtZUluZGV4KTtcblxuICAgICAgICAgIGlmIChmcmFtZSkge1xuICAgICAgICAgICAgb2Zmc2V0ICs9IGZyYW1lLmxlbmd0aDtcbiAgICAgICAgICAgIHN0YW1wID0gZnJhbWUuc2FtcGxlLnB0cztcbiAgICAgICAgICAgIGZyYW1lSW5kZXgrKztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBXZSBhcmUgYXQgYW4gQURUUyBoZWFkZXIsIGJ1dCBkbyBub3QgaGF2ZSBlbm91Z2ggZGF0YSBmb3IgYSBmcmFtZVxuICAgICAgICAvLyBSZW1haW5pbmcgZGF0YSB3aWxsIGJlIGFkZGVkIHRvIGFhY092ZXJGbG93XG5cblxuICAgICAgICBicmVhaztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG5vdGhpbmcgZm91bmQsIGtlZXAgbG9va2luZ1xuICAgICAgICBvZmZzZXQrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob2Zmc2V0IDwgbGVuKSB7XG4gICAgICBhYWNPdmVyRmxvdyA9IGRhdGEuc3ViYXJyYXkob2Zmc2V0LCBsZW4pOyAvLyBsb2dnZXIubG9nKGBBQUM6IG92ZXJmbG93IGRldGVjdGVkOiR7bGVuLW9mZnNldH1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWFjT3ZlckZsb3cgPSBudWxsO1xuICAgIH1cblxuICAgIHRoaXMuYWFjT3ZlckZsb3cgPSBhYWNPdmVyRmxvdztcbiAgICB0aGlzLmFhY0xhc3RQVFMgPSBzdGFtcDtcbiAgfTtcblxuICBfcHJvdG8uX3BhcnNlTVBFR1BFUyA9IGZ1bmN0aW9uIF9wYXJzZU1QRUdQRVMocGVzKSB7XG4gICAgdmFyIGRhdGEgPSBwZXMuZGF0YTtcbiAgICB2YXIgbGVuZ3RoID0gZGF0YS5sZW5ndGg7XG4gICAgdmFyIGZyYW1lSW5kZXggPSAwO1xuICAgIHZhciBvZmZzZXQgPSAwO1xuICAgIHZhciBwdHMgPSBwZXMucHRzO1xuXG4gICAgd2hpbGUgKG9mZnNldCA8IGxlbmd0aCkge1xuICAgICAgaWYgKG1wZWdhdWRpby5pc0hlYWRlcihkYXRhLCBvZmZzZXQpKSB7XG4gICAgICAgIHZhciBmcmFtZSA9IG1wZWdhdWRpby5hcHBlbmRGcmFtZSh0aGlzLl9hdWRpb1RyYWNrLCBkYXRhLCBvZmZzZXQsIHB0cywgZnJhbWVJbmRleCk7XG5cbiAgICAgICAgaWYgKGZyYW1lKSB7XG4gICAgICAgICAgb2Zmc2V0ICs9IGZyYW1lLmxlbmd0aDtcbiAgICAgICAgICBmcmFtZUluZGV4Kys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbG9nZ2VyLmxvZygnVW5hYmxlIHRvIHBhcnNlIE1wZWcgYXVkaW8gZnJhbWUnKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbm90aGluZyBmb3VuZCwga2VlcCBsb29raW5nXG4gICAgICAgIG9mZnNldCsrO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX3BhcnNlSUQzUEVTID0gZnVuY3Rpb24gX3BhcnNlSUQzUEVTKHBlcykge1xuICAgIHRoaXMuX2lkM1RyYWNrLnNhbXBsZXMucHVzaChwZXMpO1xuICB9O1xuXG4gIHJldHVybiBUU0RlbXV4ZXI7XG59KCk7XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHRzZGVtdXhlciA9ICh0c2RlbXV4ZXJfVFNEZW11eGVyKTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2RlbXV4L21wM2RlbXV4ZXIuanNcbi8qKlxuICogTVAzIGRlbXV4ZXJcbiAqL1xuXG5cblxuXG52YXIgbXAzZGVtdXhlcl9NUDNEZW11eGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTVAzRGVtdXhlcihvYnNlcnZlciwgcmVtdXhlciwgY29uZmlnKSB7XG4gICAgdGhpcy5vYnNlcnZlciA9IG9ic2VydmVyO1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIHRoaXMucmVtdXhlciA9IHJlbXV4ZXI7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTVAzRGVtdXhlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlc2V0SW5pdFNlZ21lbnQgPSBmdW5jdGlvbiByZXNldEluaXRTZWdtZW50KGluaXRTZWdtZW50LCBhdWRpb0NvZGVjLCB2aWRlb0NvZGVjLCBkdXJhdGlvbikge1xuICAgIHRoaXMuX2F1ZGlvVHJhY2sgPSB7XG4gICAgICBjb250YWluZXI6ICdhdWRpby9tcGVnJyxcbiAgICAgIHR5cGU6ICdhdWRpbycsXG4gICAgICBpZDogLTEsXG4gICAgICBzZXF1ZW5jZU51bWJlcjogMCxcbiAgICAgIGlzQUFDOiBmYWxzZSxcbiAgICAgIHNhbXBsZXM6IFtdLFxuICAgICAgbGVuOiAwLFxuICAgICAgbWFuaWZlc3RDb2RlYzogYXVkaW9Db2RlYyxcbiAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgIGlucHV0VGltZVNjYWxlOiA5MDAwMFxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnJlc2V0VGltZVN0YW1wID0gZnVuY3Rpb24gcmVzZXRUaW1lU3RhbXAoKSB7fTtcblxuICBNUDNEZW11eGVyLnByb2JlID0gZnVuY3Rpb24gcHJvYmUoZGF0YSkge1xuICAgIC8vIGNoZWNrIGlmIGRhdGEgY29udGFpbnMgSUQzIHRpbWVzdGFtcCBhbmQgTVBFRyBzeW5jIHdvcmRcbiAgICB2YXIgb2Zmc2V0LCBsZW5ndGg7XG4gICAgdmFyIGlkM0RhdGEgPSBpZDNbXCJkZWZhdWx0XCJdLmdldElEM0RhdGEoZGF0YSwgMCk7XG5cbiAgICBpZiAoaWQzRGF0YSAmJiBpZDNbXCJkZWZhdWx0XCJdLmdldFRpbWVTdGFtcChpZDNEYXRhKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBMb29rIGZvciBNUEVHIGhlYWRlciB8IDExMTEgMTExMSB8IDExMVggWFlaWCB8IHdoZXJlIFggY2FuIGJlIGVpdGhlciAwIG9yIDEgYW5kIFkgb3IgWiBzaG91bGQgYmUgMVxuICAgICAgLy8gTGF5ZXIgYml0cyAocG9zaXRpb24gMTQgYW5kIDE1KSBpbiBoZWFkZXIgc2hvdWxkIGJlIGFsd2F5cyBkaWZmZXJlbnQgZnJvbSAwIChMYXllciBJIG9yIExheWVyIElJIG9yIExheWVyIElJSSlcbiAgICAgIC8vIE1vcmUgaW5mbyBodHRwOi8vd3d3Lm1wMy10ZWNoLm9yZy9wcm9ncmFtbWVyL2ZyYW1lX2hlYWRlci5odG1sXG4gICAgICBmb3IgKG9mZnNldCA9IGlkM0RhdGEubGVuZ3RoLCBsZW5ndGggPSBNYXRoLm1pbihkYXRhLmxlbmd0aCAtIDEsIG9mZnNldCArIDEwMCk7IG9mZnNldCA8IGxlbmd0aDsgb2Zmc2V0KyspIHtcbiAgICAgICAgaWYgKG1wZWdhdWRpby5wcm9iZShkYXRhLCBvZmZzZXQpKSB7XG4gICAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZygnTVBFRyBBdWRpbyBzeW5jIHdvcmQgZm91bmQgIScpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IC8vIGZlZWQgaW5jb21pbmcgZGF0YSB0byB0aGUgZnJvbnQgb2YgdGhlIHBhcnNpbmcgcGlwZWxpbmVcbiAgO1xuXG4gIF9wcm90by5hcHBlbmQgPSBmdW5jdGlvbiBhcHBlbmQoZGF0YSwgdGltZU9mZnNldCwgY29udGlndW91cywgYWNjdXJhdGVUaW1lT2Zmc2V0KSB7XG4gICAgdmFyIGlkM0RhdGEgPSBpZDNbXCJkZWZhdWx0XCJdLmdldElEM0RhdGEoZGF0YSwgMCkgfHwgW107XG4gICAgdmFyIHRpbWVzdGFtcCA9IGlkM1tcImRlZmF1bHRcIl0uZ2V0VGltZVN0YW1wKGlkM0RhdGEpO1xuICAgIHZhciBwdHMgPSB0aW1lc3RhbXAgIT09IHVuZGVmaW5lZCA/IDkwICogdGltZXN0YW1wIDogdGltZU9mZnNldCAqIDkwMDAwO1xuICAgIHZhciBvZmZzZXQgPSBpZDNEYXRhLmxlbmd0aDtcbiAgICB2YXIgbGVuZ3RoID0gZGF0YS5sZW5ndGg7XG4gICAgdmFyIGZyYW1lSW5kZXggPSAwLFxuICAgICAgICBzdGFtcCA9IDA7XG4gICAgdmFyIHRyYWNrID0gdGhpcy5fYXVkaW9UcmFjaztcbiAgICB2YXIgaWQzU2FtcGxlcyA9IFt7XG4gICAgICBwdHM6IHB0cyxcbiAgICAgIGR0czogcHRzLFxuICAgICAgZGF0YTogaWQzRGF0YVxuICAgIH1dO1xuXG4gICAgd2hpbGUgKG9mZnNldCA8IGxlbmd0aCkge1xuICAgICAgaWYgKG1wZWdhdWRpby5pc0hlYWRlcihkYXRhLCBvZmZzZXQpKSB7XG4gICAgICAgIHZhciBmcmFtZSA9IG1wZWdhdWRpby5hcHBlbmRGcmFtZSh0cmFjaywgZGF0YSwgb2Zmc2V0LCBwdHMsIGZyYW1lSW5kZXgpO1xuXG4gICAgICAgIGlmIChmcmFtZSkge1xuICAgICAgICAgIG9mZnNldCArPSBmcmFtZS5sZW5ndGg7XG4gICAgICAgICAgc3RhbXAgPSBmcmFtZS5zYW1wbGUucHRzO1xuICAgICAgICAgIGZyYW1lSW5kZXgrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBsb2dnZXIubG9nKCdVbmFibGUgdG8gcGFyc2UgTXBlZyBhdWRpbyBmcmFtZScpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlkM1tcImRlZmF1bHRcIl0uaXNIZWFkZXIoZGF0YSwgb2Zmc2V0KSkge1xuICAgICAgICBpZDNEYXRhID0gaWQzW1wiZGVmYXVsdFwiXS5nZXRJRDNEYXRhKGRhdGEsIG9mZnNldCk7XG4gICAgICAgIGlkM1NhbXBsZXMucHVzaCh7XG4gICAgICAgICAgcHRzOiBzdGFtcCxcbiAgICAgICAgICBkdHM6IHN0YW1wLFxuICAgICAgICAgIGRhdGE6IGlkM0RhdGFcbiAgICAgICAgfSk7XG4gICAgICAgIG9mZnNldCArPSBpZDNEYXRhLmxlbmd0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG5vdGhpbmcgZm91bmQsIGtlZXAgbG9va2luZ1xuICAgICAgICBvZmZzZXQrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnJlbXV4ZXIucmVtdXgodHJhY2ssIHtcbiAgICAgIHNhbXBsZXM6IFtdXG4gICAgfSwge1xuICAgICAgc2FtcGxlczogaWQzU2FtcGxlcyxcbiAgICAgIGlucHV0VGltZVNjYWxlOiA5MDAwMFxuICAgIH0sIHtcbiAgICAgIHNhbXBsZXM6IFtdXG4gICAgfSwgdGltZU9mZnNldCwgY29udGlndW91cywgYWNjdXJhdGVUaW1lT2Zmc2V0KTtcbiAgfTtcblxuICBfcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7fTtcblxuICByZXR1cm4gTVAzRGVtdXhlcjtcbn0oKTtcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgbXAzZGVtdXhlciA9IChtcDNkZW11eGVyX01QM0RlbXV4ZXIpO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvcmVtdXgvYWFjLWhlbHBlci5qc1xuLyoqXG4gKiAgQUFDIGhlbHBlclxuICovXG52YXIgQUFDID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQUFDKCkge31cblxuICBBQUMuZ2V0U2lsZW50RnJhbWUgPSBmdW5jdGlvbiBnZXRTaWxlbnRGcmFtZShjb2RlYywgY2hhbm5lbENvdW50KSB7XG4gICAgc3dpdGNoIChjb2RlYykge1xuICAgICAgY2FzZSAnbXA0YS40MC4yJzpcbiAgICAgICAgaWYgKGNoYW5uZWxDb3VudCA9PT0gMSkge1xuICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMywgMHg4MF0pO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gMikge1xuICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgyMSwgMHgwMCwgMHg0OSwgMHg5MCwgMHgwMiwgMHgxOSwgMHgwMCwgMHgyMywgMHg4MF0pO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gMykge1xuICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4ZV0pO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gNCkge1xuICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4MCwgMHgyYywgMHg4MCwgMHgwOCwgMHgwMiwgMHgzOF0pO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gNSkge1xuICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4MiwgMHgzMCwgMHgwNCwgMHg5OSwgMHgwMCwgMHgyMSwgMHg5MCwgMHgwMiwgMHgzOF0pO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gNikge1xuICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4MiwgMHgzMCwgMHgwNCwgMHg5OSwgMHgwMCwgMHgyMSwgMHg5MCwgMHgwMiwgMHgwMCwgMHhiMiwgMHgwMCwgMHgyMCwgMHgwOCwgMHhlMF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICAvLyBoYW5kbGUgSEUtQUFDIGJlbG93IChtcDRhLjQwLjUgLyBtcDRhLjQwLjI5KVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoY2hhbm5lbENvdW50ID09PSAxKSB7XG4gICAgICAgICAgLy8gZmZtcGVnIC15IC1mIGxhdmZpIC1pIFwiYWV2YWxzcmM9MDpkPTAuMDVcIiAtYzphIGxpYmZka19hYWMgLXByb2ZpbGU6YSBhYWNfaGUgLWI6YSA0ayBvdXRwdXQuYWFjICYmIGhleGR1bXAgLXYgLWUgJzE2LzEgXCIweCV4LFwiIFwiXFxuXCInIC12IG91dHB1dC5hYWNcbiAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MSwgMHg0MCwgMHgyMiwgMHg4MCwgMHhhMywgMHg0ZSwgMHhlNiwgMHg4MCwgMHhiYSwgMHg4LCAweDAsIDB4MCwgMHgwLCAweDFjLCAweDYsIDB4ZjEsIDB4YzEsIDB4YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1ZV0pO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gMikge1xuICAgICAgICAgIC8vIGZmbXBlZyAteSAtZiBsYXZmaSAtaSBcImFldmFsc3JjPTB8MDpkPTAuMDVcIiAtYzphIGxpYmZka19hYWMgLXByb2ZpbGU6YSBhYWNfaGVfdjIgLWI6YSA0ayBvdXRwdXQuYWFjICYmIGhleGR1bXAgLXYgLWUgJzE2LzEgXCIweCV4LFwiIFwiXFxuXCInIC12IG91dHB1dC5hYWNcbiAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MSwgMHg0MCwgMHgyMiwgMHg4MCwgMHhhMywgMHg1ZSwgMHhlNiwgMHg4MCwgMHhiYSwgMHg4LCAweDAsIDB4MCwgMHgwLCAweDAsIDB4OTUsIDB4MCwgMHg2LCAweGYxLCAweGExLCAweGEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWVdKTtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDMpIHtcbiAgICAgICAgICAvLyBmZm1wZWcgLXkgLWYgbGF2ZmkgLWkgXCJhZXZhbHNyYz0wfDB8MDpkPTAuMDVcIiAtYzphIGxpYmZka19hYWMgLXByb2ZpbGU6YSBhYWNfaGVfdjIgLWI6YSA0ayBvdXRwdXQuYWFjICYmIGhleGR1bXAgLXYgLWUgJzE2LzEgXCIweCV4LFwiIFwiXFxuXCInIC12IG91dHB1dC5hYWNcbiAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MSwgMHg0MCwgMHgyMiwgMHg4MCwgMHhhMywgMHg1ZSwgMHhlNiwgMHg4MCwgMHhiYSwgMHg4LCAweDAsIDB4MCwgMHgwLCAweDAsIDB4OTUsIDB4MCwgMHg2LCAweGYxLCAweGExLCAweGEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWVdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBBQUM7XG59KCk7XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGFhY19oZWxwZXIgPSAoQUFDKTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3JlbXV4L21wNC1nZW5lcmF0b3IuanNcbi8qKlxuICogR2VuZXJhdGUgTVA0IEJveFxuKi9cbnZhciBVSU5UMzJfTUFYID0gTWF0aC5wb3coMiwgMzIpIC0gMTtcblxudmFyIE1QNCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE1QNCgpIHt9XG5cbiAgTVA0LmluaXQgPSBmdW5jdGlvbiBpbml0KCkge1xuICAgIE1QNC50eXBlcyA9IHtcbiAgICAgIGF2YzE6IFtdLFxuICAgICAgLy8gY29kaW5nbmFtZVxuICAgICAgYXZjQzogW10sXG4gICAgICBidHJ0OiBbXSxcbiAgICAgIGRpbmY6IFtdLFxuICAgICAgZHJlZjogW10sXG4gICAgICBlc2RzOiBbXSxcbiAgICAgIGZ0eXA6IFtdLFxuICAgICAgaGRscjogW10sXG4gICAgICBtZGF0OiBbXSxcbiAgICAgIG1kaGQ6IFtdLFxuICAgICAgbWRpYTogW10sXG4gICAgICBtZmhkOiBbXSxcbiAgICAgIG1pbmY6IFtdLFxuICAgICAgbW9vZjogW10sXG4gICAgICBtb292OiBbXSxcbiAgICAgIG1wNGE6IFtdLFxuICAgICAgJy5tcDMnOiBbXSxcbiAgICAgIG12ZXg6IFtdLFxuICAgICAgbXZoZDogW10sXG4gICAgICBwYXNwOiBbXSxcbiAgICAgIHNkdHA6IFtdLFxuICAgICAgc3RibDogW10sXG4gICAgICBzdGNvOiBbXSxcbiAgICAgIHN0c2M6IFtdLFxuICAgICAgc3RzZDogW10sXG4gICAgICBzdHN6OiBbXSxcbiAgICAgIHN0dHM6IFtdLFxuICAgICAgdGZkdDogW10sXG4gICAgICB0ZmhkOiBbXSxcbiAgICAgIHRyYWY6IFtdLFxuICAgICAgdHJhazogW10sXG4gICAgICB0cnVuOiBbXSxcbiAgICAgIHRyZXg6IFtdLFxuICAgICAgdGtoZDogW10sXG4gICAgICB2bWhkOiBbXSxcbiAgICAgIHNtaGQ6IFtdXG4gICAgfTtcbiAgICB2YXIgaTtcblxuICAgIGZvciAoaSBpbiBNUDQudHlwZXMpIHtcbiAgICAgIGlmIChNUDQudHlwZXMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgTVA0LnR5cGVzW2ldID0gW2kuY2hhckNvZGVBdCgwKSwgaS5jaGFyQ29kZUF0KDEpLCBpLmNoYXJDb2RlQXQoMiksIGkuY2hhckNvZGVBdCgzKV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHZpZGVvSGRsciA9IG5ldyBVaW50OEFycmF5KFsweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHByZV9kZWZpbmVkXG4gICAgMHg3NiwgMHg2OSwgMHg2NCwgMHg2NSwgLy8gaGFuZGxlcl90eXBlOiAndmlkZSdcbiAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAweDU2LCAweDY5LCAweDY0LCAweDY1LCAweDZmLCAweDQ4LCAweDYxLCAweDZlLCAweDY0LCAweDZjLCAweDY1LCAweDcyLCAweDAwIC8vIG5hbWU6ICdWaWRlb0hhbmRsZXInXG4gICAgXSk7XG4gICAgdmFyIGF1ZGlvSGRsciA9IG5ldyBVaW50OEFycmF5KFsweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHByZV9kZWZpbmVkXG4gICAgMHg3MywgMHg2ZiwgMHg3NSwgMHg2ZSwgLy8gaGFuZGxlcl90eXBlOiAnc291bidcbiAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAweDUzLCAweDZmLCAweDc1LCAweDZlLCAweDY0LCAweDQ4LCAweDYxLCAweDZlLCAweDY0LCAweDZjLCAweDY1LCAweDcyLCAweDAwIC8vIG5hbWU6ICdTb3VuZEhhbmRsZXInXG4gICAgXSk7XG4gICAgTVA0LkhETFJfVFlQRVMgPSB7XG4gICAgICAndmlkZW8nOiB2aWRlb0hkbHIsXG4gICAgICAnYXVkaW8nOiBhdWRpb0hkbHJcbiAgICB9O1xuICAgIHZhciBkcmVmID0gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIC8vIHZlcnNpb24gMFxuICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMSwgLy8gZW50cnlfY291bnRcbiAgICAweDAwLCAweDAwLCAweDAwLCAweDBjLCAvLyBlbnRyeV9zaXplXG4gICAgMHg3NSwgMHg3MiwgMHg2YywgMHgyMCwgLy8gJ3VybCcgdHlwZVxuICAgIDB4MDAsIC8vIHZlcnNpb24gMFxuICAgIDB4MDAsIDB4MDAsIDB4MDEgLy8gZW50cnlfZmxhZ3NcbiAgICBdKTtcbiAgICB2YXIgc3RjbyA9IG5ldyBVaW50OEFycmF5KFsweDAwLCAvLyB2ZXJzaW9uXG4gICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAweDAwLCAweDAwLCAweDAwLCAweDAwIC8vIGVudHJ5X2NvdW50XG4gICAgXSk7XG4gICAgTVA0LlNUVFMgPSBNUDQuU1RTQyA9IE1QNC5TVENPID0gc3RjbztcbiAgICBNUDQuU1RTWiA9IG5ldyBVaW50OEFycmF5KFsweDAwLCAvLyB2ZXJzaW9uXG4gICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBzYW1wbGVfc2l6ZVxuICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAgLy8gc2FtcGxlX2NvdW50XG4gICAgXSk7XG4gICAgTVA0LlZNSEQgPSBuZXcgVWludDhBcnJheShbMHgwMCwgLy8gdmVyc2lvblxuICAgIDB4MDAsIDB4MDAsIDB4MDEsIC8vIGZsYWdzXG4gICAgMHgwMCwgMHgwMCwgLy8gZ3JhcGhpY3Ntb2RlXG4gICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCAvLyBvcGNvbG9yXG4gICAgXSk7XG4gICAgTVA0LlNNSEQgPSBuZXcgVWludDhBcnJheShbMHgwMCwgLy8gdmVyc2lvblxuICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgMHgwMCwgMHgwMCwgLy8gYmFsYW5jZVxuICAgIDB4MDAsIDB4MDAgLy8gcmVzZXJ2ZWRcbiAgICBdKTtcbiAgICBNUDQuU1RTRCA9IG5ldyBVaW50OEFycmF5KFsweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDFdKTsgLy8gZW50cnlfY291bnRcblxuICAgIHZhciBtYWpvckJyYW5kID0gbmV3IFVpbnQ4QXJyYXkoWzEwNSwgMTE1LCAxMTEsIDEwOV0pOyAvLyBpc29tXG5cbiAgICB2YXIgYXZjMUJyYW5kID0gbmV3IFVpbnQ4QXJyYXkoWzk3LCAxMTgsIDk5LCA0OV0pOyAvLyBhdmMxXG5cbiAgICB2YXIgbWlub3JWZXJzaW9uID0gbmV3IFVpbnQ4QXJyYXkoWzAsIDAsIDAsIDFdKTtcbiAgICBNUDQuRlRZUCA9IE1QNC5ib3goTVA0LnR5cGVzLmZ0eXAsIG1ham9yQnJhbmQsIG1pbm9yVmVyc2lvbiwgbWFqb3JCcmFuZCwgYXZjMUJyYW5kKTtcbiAgICBNUDQuRElORiA9IE1QNC5ib3goTVA0LnR5cGVzLmRpbmYsIE1QNC5ib3goTVA0LnR5cGVzLmRyZWYsIGRyZWYpKTtcbiAgfTtcblxuICBNUDQuYm94ID0gZnVuY3Rpb24gYm94KHR5cGUpIHtcbiAgICB2YXIgcGF5bG9hZCA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXG4gICAgICAgIHNpemUgPSA4LFxuICAgICAgICBpID0gcGF5bG9hZC5sZW5ndGgsXG4gICAgICAgIGxlbiA9IGksXG4gICAgICAgIHJlc3VsdDsgLy8gY2FsY3VsYXRlIHRoZSB0b3RhbCBzaXplIHdlIG5lZWQgdG8gYWxsb2NhdGVcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHNpemUgKz0gcGF5bG9hZFtpXS5ieXRlTGVuZ3RoO1xuICAgIH1cblxuICAgIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KHNpemUpO1xuICAgIHJlc3VsdFswXSA9IHNpemUgPj4gMjQgJiAweGZmO1xuICAgIHJlc3VsdFsxXSA9IHNpemUgPj4gMTYgJiAweGZmO1xuICAgIHJlc3VsdFsyXSA9IHNpemUgPj4gOCAmIDB4ZmY7XG4gICAgcmVzdWx0WzNdID0gc2l6ZSAmIDB4ZmY7XG4gICAgcmVzdWx0LnNldCh0eXBlLCA0KTsgLy8gY29weSB0aGUgcGF5bG9hZCBpbnRvIHRoZSByZXN1bHRcblxuICAgIGZvciAoaSA9IDAsIHNpemUgPSA4OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIC8vIGNvcHkgcGF5bG9hZFtpXSBhcnJheSBAIG9mZnNldCBzaXplXG4gICAgICByZXN1bHQuc2V0KHBheWxvYWRbaV0sIHNpemUpO1xuICAgICAgc2l6ZSArPSBwYXlsb2FkW2ldLmJ5dGVMZW5ndGg7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBNUDQuaGRsciA9IGZ1bmN0aW9uIGhkbHIodHlwZSkge1xuICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5oZGxyLCBNUDQuSERMUl9UWVBFU1t0eXBlXSk7XG4gIH07XG5cbiAgTVA0Lm1kYXQgPSBmdW5jdGlvbiBtZGF0KGRhdGEpIHtcbiAgICByZXR1cm4gTVA0LmJveChNUDQudHlwZXMubWRhdCwgZGF0YSk7XG4gIH07XG5cbiAgTVA0Lm1kaGQgPSBmdW5jdGlvbiBtZGhkKHRpbWVzY2FsZSwgZHVyYXRpb24pIHtcbiAgICBkdXJhdGlvbiAqPSB0aW1lc2NhbGU7XG4gICAgdmFyIHVwcGVyV29yZER1cmF0aW9uID0gTWF0aC5mbG9vcihkdXJhdGlvbiAvIChVSU5UMzJfTUFYICsgMSkpO1xuICAgIHZhciBsb3dlcldvcmREdXJhdGlvbiA9IE1hdGguZmxvb3IoZHVyYXRpb24gJSAoVUlOVDMyX01BWCArIDEpKTtcbiAgICByZXR1cm4gTVA0LmJveChNUDQudHlwZXMubWRoZCwgbmV3IFVpbnQ4QXJyYXkoWzB4MDEsIC8vIHZlcnNpb24gMVxuICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMiwgLy8gY3JlYXRpb25fdGltZVxuICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDMsIC8vIG1vZGlmaWNhdGlvbl90aW1lXG4gICAgdGltZXNjYWxlID4+IDI0ICYgMHhGRiwgdGltZXNjYWxlID4+IDE2ICYgMHhGRiwgdGltZXNjYWxlID4+IDggJiAweEZGLCB0aW1lc2NhbGUgJiAweEZGLCAvLyB0aW1lc2NhbGVcbiAgICB1cHBlcldvcmREdXJhdGlvbiA+PiAyNCwgdXBwZXJXb3JkRHVyYXRpb24gPj4gMTYgJiAweEZGLCB1cHBlcldvcmREdXJhdGlvbiA+PiA4ICYgMHhGRiwgdXBwZXJXb3JkRHVyYXRpb24gJiAweEZGLCBsb3dlcldvcmREdXJhdGlvbiA+PiAyNCwgbG93ZXJXb3JkRHVyYXRpb24gPj4gMTYgJiAweEZGLCBsb3dlcldvcmREdXJhdGlvbiA+PiA4ICYgMHhGRiwgbG93ZXJXb3JkRHVyYXRpb24gJiAweEZGLCAweDU1LCAweGM0LCAvLyAndW5kJyBsYW5ndWFnZSAodW5kZXRlcm1pbmVkKVxuICAgIDB4MDAsIDB4MDBdKSk7XG4gIH07XG5cbiAgTVA0Lm1kaWEgPSBmdW5jdGlvbiBtZGlhKHRyYWNrKSB7XG4gICAgcmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLm1kaWEsIE1QNC5tZGhkKHRyYWNrLnRpbWVzY2FsZSwgdHJhY2suZHVyYXRpb24pLCBNUDQuaGRscih0cmFjay50eXBlKSwgTVA0Lm1pbmYodHJhY2spKTtcbiAgfTtcblxuICBNUDQubWZoZCA9IGZ1bmN0aW9uIG1maGQoc2VxdWVuY2VOdW1iZXIpIHtcbiAgICByZXR1cm4gTVA0LmJveChNUDQudHlwZXMubWZoZCwgbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgc2VxdWVuY2VOdW1iZXIgPj4gMjQsIHNlcXVlbmNlTnVtYmVyID4+IDE2ICYgMHhGRiwgc2VxdWVuY2VOdW1iZXIgPj4gOCAmIDB4RkYsIHNlcXVlbmNlTnVtYmVyICYgMHhGRiAvLyBzZXF1ZW5jZV9udW1iZXJcbiAgICBdKSk7XG4gIH07XG5cbiAgTVA0Lm1pbmYgPSBmdW5jdGlvbiBtaW5mKHRyYWNrKSB7XG4gICAgaWYgKHRyYWNrLnR5cGUgPT09ICdhdWRpbycpIHtcbiAgICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5taW5mLCBNUDQuYm94KE1QNC50eXBlcy5zbWhkLCBNUDQuU01IRCksIE1QNC5ESU5GLCBNUDQuc3RibCh0cmFjaykpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gTVA0LmJveChNUDQudHlwZXMubWluZiwgTVA0LmJveChNUDQudHlwZXMudm1oZCwgTVA0LlZNSEQpLCBNUDQuRElORiwgTVA0LnN0YmwodHJhY2spKTtcbiAgICB9XG4gIH07XG5cbiAgTVA0Lm1vb2YgPSBmdW5jdGlvbiBtb29mKHNuLCBiYXNlTWVkaWFEZWNvZGVUaW1lLCB0cmFjaykge1xuICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5tb29mLCBNUDQubWZoZChzbiksIE1QNC50cmFmKHRyYWNrLCBiYXNlTWVkaWFEZWNvZGVUaW1lKSk7XG4gIH1cbiAgLyoqXG4gICogQHBhcmFtIHRyYWNrcy4uLiAob3B0aW9uYWwpIHthcnJheX0gdGhlIHRyYWNrcyBhc3NvY2lhdGVkIHdpdGggdGhpcyBtb3ZpZVxuICAqL1xuICA7XG5cbiAgTVA0Lm1vb3YgPSBmdW5jdGlvbiBtb292KHRyYWNrcykge1xuICAgIHZhciBpID0gdHJhY2tzLmxlbmd0aCxcbiAgICAgICAgYm94ZXMgPSBbXTtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGJveGVzW2ldID0gTVA0LnRyYWsodHJhY2tzW2ldKTtcbiAgICB9XG5cbiAgICByZXR1cm4gTVA0LmJveC5hcHBseShudWxsLCBbTVA0LnR5cGVzLm1vb3YsIE1QNC5tdmhkKHRyYWNrc1swXS50aW1lc2NhbGUsIHRyYWNrc1swXS5kdXJhdGlvbildLmNvbmNhdChib3hlcykuY29uY2F0KE1QNC5tdmV4KHRyYWNrcykpKTtcbiAgfTtcblxuICBNUDQubXZleCA9IGZ1bmN0aW9uIG12ZXgodHJhY2tzKSB7XG4gICAgdmFyIGkgPSB0cmFja3MubGVuZ3RoLFxuICAgICAgICBib3hlcyA9IFtdO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgYm94ZXNbaV0gPSBNUDQudHJleCh0cmFja3NbaV0pO1xuICAgIH1cblxuICAgIHJldHVybiBNUDQuYm94LmFwcGx5KG51bGwsIFtNUDQudHlwZXMubXZleF0uY29uY2F0KGJveGVzKSk7XG4gIH07XG5cbiAgTVA0Lm12aGQgPSBmdW5jdGlvbiBtdmhkKHRpbWVzY2FsZSwgZHVyYXRpb24pIHtcbiAgICBkdXJhdGlvbiAqPSB0aW1lc2NhbGU7XG4gICAgdmFyIHVwcGVyV29yZER1cmF0aW9uID0gTWF0aC5mbG9vcihkdXJhdGlvbiAvIChVSU5UMzJfTUFYICsgMSkpO1xuICAgIHZhciBsb3dlcldvcmREdXJhdGlvbiA9IE1hdGguZmxvb3IoZHVyYXRpb24gJSAoVUlOVDMyX01BWCArIDEpKTtcbiAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShbMHgwMSwgLy8gdmVyc2lvbiAxXG4gICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAyLCAvLyBjcmVhdGlvbl90aW1lXG4gICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMywgLy8gbW9kaWZpY2F0aW9uX3RpbWVcbiAgICB0aW1lc2NhbGUgPj4gMjQgJiAweEZGLCB0aW1lc2NhbGUgPj4gMTYgJiAweEZGLCB0aW1lc2NhbGUgPj4gOCAmIDB4RkYsIHRpbWVzY2FsZSAmIDB4RkYsIC8vIHRpbWVzY2FsZVxuICAgIHVwcGVyV29yZER1cmF0aW9uID4+IDI0LCB1cHBlcldvcmREdXJhdGlvbiA+PiAxNiAmIDB4RkYsIHVwcGVyV29yZER1cmF0aW9uID4+IDggJiAweEZGLCB1cHBlcldvcmREdXJhdGlvbiAmIDB4RkYsIGxvd2VyV29yZER1cmF0aW9uID4+IDI0LCBsb3dlcldvcmREdXJhdGlvbiA+PiAxNiAmIDB4RkYsIGxvd2VyV29yZER1cmF0aW9uID4+IDggJiAweEZGLCBsb3dlcldvcmREdXJhdGlvbiAmIDB4RkYsIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsIC8vIDEuMCByYXRlXG4gICAgMHgwMSwgMHgwMCwgLy8gMS4wIHZvbHVtZVxuICAgIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4NDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHRyYW5zZm9ybWF0aW9uOiB1bml0eSBtYXRyaXhcbiAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBwcmVfZGVmaW5lZFxuICAgIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYgLy8gbmV4dF90cmFja19JRFxuICAgIF0pO1xuICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5tdmhkLCBieXRlcyk7XG4gIH07XG5cbiAgTVA0LnNkdHAgPSBmdW5jdGlvbiBzZHRwKHRyYWNrKSB7XG4gICAgdmFyIHNhbXBsZXMgPSB0cmFjay5zYW1wbGVzIHx8IFtdLFxuICAgICAgICBieXRlcyA9IG5ldyBVaW50OEFycmF5KDQgKyBzYW1wbGVzLmxlbmd0aCksXG4gICAgICAgIGZsYWdzLFxuICAgICAgICBpOyAvLyBsZWF2ZSB0aGUgZnVsbCBib3ggaGVhZGVyICg0IGJ5dGVzKSBhbGwgemVyb1xuICAgIC8vIHdyaXRlIHRoZSBzYW1wbGUgdGFibGVcblxuICAgIGZvciAoaSA9IDA7IGkgPCBzYW1wbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBmbGFncyA9IHNhbXBsZXNbaV0uZmxhZ3M7XG4gICAgICBieXRlc1tpICsgNF0gPSBmbGFncy5kZXBlbmRzT24gPDwgNCB8IGZsYWdzLmlzRGVwZW5kZWRPbiA8PCAyIHwgZmxhZ3MuaGFzUmVkdW5kYW5jeTtcbiAgICB9XG5cbiAgICByZXR1cm4gTVA0LmJveChNUDQudHlwZXMuc2R0cCwgYnl0ZXMpO1xuICB9O1xuXG4gIE1QNC5zdGJsID0gZnVuY3Rpb24gc3RibCh0cmFjaykge1xuICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5zdGJsLCBNUDQuc3RzZCh0cmFjayksIE1QNC5ib3goTVA0LnR5cGVzLnN0dHMsIE1QNC5TVFRTKSwgTVA0LmJveChNUDQudHlwZXMuc3RzYywgTVA0LlNUU0MpLCBNUDQuYm94KE1QNC50eXBlcy5zdHN6LCBNUDQuU1RTWiksIE1QNC5ib3goTVA0LnR5cGVzLnN0Y28sIE1QNC5TVENPKSk7XG4gIH07XG5cbiAgTVA0LmF2YzEgPSBmdW5jdGlvbiBhdmMxKHRyYWNrKSB7XG4gICAgdmFyIHNwcyA9IFtdLFxuICAgICAgICBwcHMgPSBbXSxcbiAgICAgICAgaSxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgbGVuOyAvLyBhc3NlbWJsZSB0aGUgU1BTc1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHRyYWNrLnNwcy5sZW5ndGg7IGkrKykge1xuICAgICAgZGF0YSA9IHRyYWNrLnNwc1tpXTtcbiAgICAgIGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgIHNwcy5wdXNoKGxlbiA+Pj4gOCAmIDB4RkYpO1xuICAgICAgc3BzLnB1c2gobGVuICYgMHhGRik7IC8vIFNQU1xuXG4gICAgICBzcHMgPSBzcHMuY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGRhdGEpKTtcbiAgICB9IC8vIGFzc2VtYmxlIHRoZSBQUFNzXG5cblxuICAgIGZvciAoaSA9IDA7IGkgPCB0cmFjay5wcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRhdGEgPSB0cmFjay5wcHNbaV07XG4gICAgICBsZW4gPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICBwcHMucHVzaChsZW4gPj4+IDggJiAweEZGKTtcbiAgICAgIHBwcy5wdXNoKGxlbiAmIDB4RkYpO1xuICAgICAgcHBzID0gcHBzLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkYXRhKSk7XG4gICAgfVxuXG4gICAgdmFyIGF2Y2MgPSBNUDQuYm94KE1QNC50eXBlcy5hdmNDLCBuZXcgVWludDhBcnJheShbMHgwMSwgLy8gdmVyc2lvblxuICAgIHNwc1szXSwgLy8gcHJvZmlsZVxuICAgIHNwc1s0XSwgLy8gcHJvZmlsZSBjb21wYXRcbiAgICBzcHNbNV0sIC8vIGxldmVsXG4gICAgMHhmYyB8IDMsIC8vIGxlbmd0aFNpemVNaW51c09uZSwgaGFyZC1jb2RlZCB0byA0IGJ5dGVzXG4gICAgMHhFMCB8IHRyYWNrLnNwcy5sZW5ndGggLy8gM2JpdCByZXNlcnZlZCAoMTExKSArIG51bU9mU2VxdWVuY2VQYXJhbWV0ZXJTZXRzXG4gICAgXS5jb25jYXQoc3BzKS5jb25jYXQoW3RyYWNrLnBwcy5sZW5ndGggLy8gbnVtT2ZQaWN0dXJlUGFyYW1ldGVyU2V0c1xuICAgIF0pLmNvbmNhdChwcHMpKSksXG4gICAgICAgIC8vIFwiUFBTXCJcbiAgICB3aWR0aCA9IHRyYWNrLndpZHRoLFxuICAgICAgICBoZWlnaHQgPSB0cmFjay5oZWlnaHQsXG4gICAgICAgIGhTcGFjaW5nID0gdHJhY2sucGl4ZWxSYXRpb1swXSxcbiAgICAgICAgdlNwYWNpbmcgPSB0cmFjay5waXhlbFJhdGlvWzFdO1xuICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5hdmMxLCBuZXcgVWludDhBcnJheShbMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgIDB4MDAsIDB4MDEsIC8vIGRhdGFfcmVmZXJlbmNlX2luZGV4XG4gICAgMHgwMCwgMHgwMCwgLy8gcHJlX2RlZmluZWRcbiAgICAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHByZV9kZWZpbmVkXG4gICAgd2lkdGggPj4gOCAmIDB4RkYsIHdpZHRoICYgMHhmZiwgLy8gd2lkdGhcbiAgICBoZWlnaHQgPj4gOCAmIDB4RkYsIGhlaWdodCAmIDB4ZmYsIC8vIGhlaWdodFxuICAgIDB4MDAsIDB4NDgsIDB4MDAsIDB4MDAsIC8vIGhvcml6cmVzb2x1dGlvblxuICAgIDB4MDAsIDB4NDgsIDB4MDAsIDB4MDAsIC8vIHZlcnRyZXNvbHV0aW9uXG4gICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAweDAwLCAweDAxLCAvLyBmcmFtZV9jb3VudFxuICAgIDB4MTIsIDB4NjQsIDB4NjEsIDB4NjksIDB4NkMsIC8vIGRhaWx5bW90aW9uL2hscy5qc1xuICAgIDB4NzksIDB4NkQsIDB4NkYsIDB4NzQsIDB4NjksIDB4NkYsIDB4NkUsIDB4MkYsIDB4NjgsIDB4NkMsIDB4NzMsIDB4MkUsIDB4NkEsIDB4NzMsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGNvbXByZXNzb3JuYW1lXG4gICAgMHgwMCwgMHgxOCwgLy8gZGVwdGggPSAyNFxuICAgIDB4MTEsIDB4MTFdKSwgLy8gcHJlX2RlZmluZWQgPSAtMVxuICAgIGF2Y2MsIE1QNC5ib3goTVA0LnR5cGVzLmJ0cnQsIG5ldyBVaW50OEFycmF5KFsweDAwLCAweDFjLCAweDljLCAweDgwLCAvLyBidWZmZXJTaXplREJcbiAgICAweDAwLCAweDJkLCAweGM2LCAweGMwLCAvLyBtYXhCaXRyYXRlXG4gICAgMHgwMCwgMHgyZCwgMHhjNiwgMHhjMF0pKSwgLy8gYXZnQml0cmF0ZVxuICAgIE1QNC5ib3goTVA0LnR5cGVzLnBhc3AsIG5ldyBVaW50OEFycmF5KFtoU3BhY2luZyA+PiAyNCwgLy8gaFNwYWNpbmdcbiAgICBoU3BhY2luZyA+PiAxNiAmIDB4RkYsIGhTcGFjaW5nID4+IDggJiAweEZGLCBoU3BhY2luZyAmIDB4RkYsIHZTcGFjaW5nID4+IDI0LCAvLyB2U3BhY2luZ1xuICAgIHZTcGFjaW5nID4+IDE2ICYgMHhGRiwgdlNwYWNpbmcgPj4gOCAmIDB4RkYsIHZTcGFjaW5nICYgMHhGRl0pKSk7XG4gIH07XG5cbiAgTVA0LmVzZHMgPSBmdW5jdGlvbiBlc2RzKHRyYWNrKSB7XG4gICAgdmFyIGNvbmZpZ2xlbiA9IHRyYWNrLmNvbmZpZy5sZW5ndGg7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgIDB4MDMsIC8vIGRlc2NyaXB0b3JfdHlwZVxuICAgIDB4MTcgKyBjb25maWdsZW4sIC8vIGxlbmd0aFxuICAgIDB4MDAsIDB4MDEsIC8vIGVzX2lkXG4gICAgMHgwMCwgLy8gc3RyZWFtX3ByaW9yaXR5XG4gICAgMHgwNCwgLy8gZGVzY3JpcHRvcl90eXBlXG4gICAgMHgwZiArIGNvbmZpZ2xlbiwgLy8gbGVuZ3RoXG4gICAgMHg0MCwgLy8gY29kZWMgOiBtcGVnNF9hdWRpb1xuICAgIDB4MTUsIC8vIHN0cmVhbV90eXBlXG4gICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gYnVmZmVyX3NpemVcbiAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBtYXhCaXRyYXRlXG4gICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gYXZnQml0cmF0ZVxuICAgIDB4MDUgLy8gZGVzY3JpcHRvcl90eXBlXG4gICAgXS5jb25jYXQoW2NvbmZpZ2xlbl0pLmNvbmNhdCh0cmFjay5jb25maWcpLmNvbmNhdChbMHgwNiwgMHgwMSwgMHgwMl0pKTsgLy8gR0FTcGVjaWZpY0NvbmZpZykpOyAvLyBsZW5ndGggKyBhdWRpbyBjb25maWcgZGVzY3JpcHRvclxuICB9O1xuXG4gIE1QNC5tcDRhID0gZnVuY3Rpb24gbXA0YSh0cmFjaykge1xuICAgIHZhciBzYW1wbGVyYXRlID0gdHJhY2suc2FtcGxlcmF0ZTtcbiAgICByZXR1cm4gTVA0LmJveChNUDQudHlwZXMubXA0YSwgbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAweDAwLCAweDAxLCAvLyBkYXRhX3JlZmVyZW5jZV9pbmRleFxuICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgMHgwMCwgdHJhY2suY2hhbm5lbENvdW50LCAvLyBjaGFubmVsY291bnRcbiAgICAweDAwLCAweDEwLCAvLyBzYW1wbGVTaXplOjE2Yml0c1xuICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkMlxuICAgIHNhbXBsZXJhdGUgPj4gOCAmIDB4RkYsIHNhbXBsZXJhdGUgJiAweGZmLCAvL1xuICAgIDB4MDAsIDB4MDBdKSwgTVA0LmJveChNUDQudHlwZXMuZXNkcywgTVA0LmVzZHModHJhY2spKSk7XG4gIH07XG5cbiAgTVA0Lm1wMyA9IGZ1bmN0aW9uIG1wMyh0cmFjaykge1xuICAgIHZhciBzYW1wbGVyYXRlID0gdHJhY2suc2FtcGxlcmF0ZTtcbiAgICByZXR1cm4gTVA0LmJveChNUDQudHlwZXNbJy5tcDMnXSwgbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAweDAwLCAweDAxLCAvLyBkYXRhX3JlZmVyZW5jZV9pbmRleFxuICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgMHgwMCwgdHJhY2suY2hhbm5lbENvdW50LCAvLyBjaGFubmVsY291bnRcbiAgICAweDAwLCAweDEwLCAvLyBzYW1wbGVTaXplOjE2Yml0c1xuICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkMlxuICAgIHNhbXBsZXJhdGUgPj4gOCAmIDB4RkYsIHNhbXBsZXJhdGUgJiAweGZmLCAvL1xuICAgIDB4MDAsIDB4MDBdKSk7XG4gIH07XG5cbiAgTVA0LnN0c2QgPSBmdW5jdGlvbiBzdHNkKHRyYWNrKSB7XG4gICAgaWYgKHRyYWNrLnR5cGUgPT09ICdhdWRpbycpIHtcbiAgICAgIGlmICghdHJhY2suaXNBQUMgJiYgdHJhY2suY29kZWMgPT09ICdtcDMnKSB7XG4gICAgICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5zdHNkLCBNUDQuU1RTRCwgTVA0Lm1wMyh0cmFjaykpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gTVA0LmJveChNUDQudHlwZXMuc3RzZCwgTVA0LlNUU0QsIE1QNC5tcDRhKHRyYWNrKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5zdHNkLCBNUDQuU1RTRCwgTVA0LmF2YzEodHJhY2spKTtcbiAgICB9XG4gIH07XG5cbiAgTVA0LnRraGQgPSBmdW5jdGlvbiB0a2hkKHRyYWNrKSB7XG4gICAgdmFyIGlkID0gdHJhY2suaWQsXG4gICAgICAgIGR1cmF0aW9uID0gdHJhY2suZHVyYXRpb24gKiB0cmFjay50aW1lc2NhbGUsXG4gICAgICAgIHdpZHRoID0gdHJhY2sud2lkdGgsXG4gICAgICAgIGhlaWdodCA9IHRyYWNrLmhlaWdodCxcbiAgICAgICAgdXBwZXJXb3JkRHVyYXRpb24gPSBNYXRoLmZsb29yKGR1cmF0aW9uIC8gKFVJTlQzMl9NQVggKyAxKSksXG4gICAgICAgIGxvd2VyV29yZER1cmF0aW9uID0gTWF0aC5mbG9vcihkdXJhdGlvbiAlIChVSU5UMzJfTUFYICsgMSkpO1xuICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy50a2hkLCBuZXcgVWludDhBcnJheShbMHgwMSwgLy8gdmVyc2lvbiAxXG4gICAgMHgwMCwgMHgwMCwgMHgwNywgLy8gZmxhZ3NcbiAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAyLCAvLyBjcmVhdGlvbl90aW1lXG4gICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMywgLy8gbW9kaWZpY2F0aW9uX3RpbWVcbiAgICBpZCA+PiAyNCAmIDB4RkYsIGlkID4+IDE2ICYgMHhGRiwgaWQgPj4gOCAmIDB4RkYsIGlkICYgMHhGRiwgLy8gdHJhY2tfSURcbiAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgIHVwcGVyV29yZER1cmF0aW9uID4+IDI0LCB1cHBlcldvcmREdXJhdGlvbiA+PiAxNiAmIDB4RkYsIHVwcGVyV29yZER1cmF0aW9uID4+IDggJiAweEZGLCB1cHBlcldvcmREdXJhdGlvbiAmIDB4RkYsIGxvd2VyV29yZER1cmF0aW9uID4+IDI0LCBsb3dlcldvcmREdXJhdGlvbiA+PiAxNiAmIDB4RkYsIGxvd2VyV29yZER1cmF0aW9uID4+IDggJiAweEZGLCBsb3dlcldvcmREdXJhdGlvbiAmIDB4RkYsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgMHgwMCwgMHgwMCwgLy8gbGF5ZXJcbiAgICAweDAwLCAweDAwLCAvLyBhbHRlcm5hdGVfZ3JvdXBcbiAgICAweDAwLCAweDAwLCAvLyBub24tYXVkaW8gdHJhY2sgdm9sdW1lXG4gICAgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAweDAwLCAweDAxLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAxLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDQwLCAweDAwLCAweDAwLCAweDAwLCAvLyB0cmFuc2Zvcm1hdGlvbjogdW5pdHkgbWF0cml4XG4gICAgd2lkdGggPj4gOCAmIDB4RkYsIHdpZHRoICYgMHhGRiwgMHgwMCwgMHgwMCwgLy8gd2lkdGhcbiAgICBoZWlnaHQgPj4gOCAmIDB4RkYsIGhlaWdodCAmIDB4RkYsIDB4MDAsIDB4MDAgLy8gaGVpZ2h0XG4gICAgXSkpO1xuICB9O1xuXG4gIE1QNC50cmFmID0gZnVuY3Rpb24gdHJhZih0cmFjaywgYmFzZU1lZGlhRGVjb2RlVGltZSkge1xuICAgIHZhciBzYW1wbGVEZXBlbmRlbmN5VGFibGUgPSBNUDQuc2R0cCh0cmFjayksXG4gICAgICAgIGlkID0gdHJhY2suaWQsXG4gICAgICAgIHVwcGVyV29yZEJhc2VNZWRpYURlY29kZVRpbWUgPSBNYXRoLmZsb29yKGJhc2VNZWRpYURlY29kZVRpbWUgLyAoVUlOVDMyX01BWCArIDEpKSxcbiAgICAgICAgbG93ZXJXb3JkQmFzZU1lZGlhRGVjb2RlVGltZSA9IE1hdGguZmxvb3IoYmFzZU1lZGlhRGVjb2RlVGltZSAlIChVSU5UMzJfTUFYICsgMSkpO1xuICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy50cmFmLCBNUDQuYm94KE1QNC50eXBlcy50ZmhkLCBuZXcgVWludDhBcnJheShbMHgwMCwgLy8gdmVyc2lvbiAwXG4gICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICBpZCA+PiAyNCwgaWQgPj4gMTYgJiAwWEZGLCBpZCA+PiA4ICYgMFhGRiwgaWQgJiAweEZGIC8vIHRyYWNrX0lEXG4gICAgXSkpLCBNUDQuYm94KE1QNC50eXBlcy50ZmR0LCBuZXcgVWludDhBcnJheShbMHgwMSwgLy8gdmVyc2lvbiAxXG4gICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICB1cHBlcldvcmRCYXNlTWVkaWFEZWNvZGVUaW1lID4+IDI0LCB1cHBlcldvcmRCYXNlTWVkaWFEZWNvZGVUaW1lID4+IDE2ICYgMFhGRiwgdXBwZXJXb3JkQmFzZU1lZGlhRGVjb2RlVGltZSA+PiA4ICYgMFhGRiwgdXBwZXJXb3JkQmFzZU1lZGlhRGVjb2RlVGltZSAmIDB4RkYsIGxvd2VyV29yZEJhc2VNZWRpYURlY29kZVRpbWUgPj4gMjQsIGxvd2VyV29yZEJhc2VNZWRpYURlY29kZVRpbWUgPj4gMTYgJiAwWEZGLCBsb3dlcldvcmRCYXNlTWVkaWFEZWNvZGVUaW1lID4+IDggJiAwWEZGLCBsb3dlcldvcmRCYXNlTWVkaWFEZWNvZGVUaW1lICYgMHhGRl0pKSwgTVA0LnRydW4odHJhY2ssIHNhbXBsZURlcGVuZGVuY3lUYWJsZS5sZW5ndGggKyAxNiArIC8vIHRmaGRcbiAgICAyMCArIC8vIHRmZHRcbiAgICA4ICsgLy8gdHJhZiBoZWFkZXJcbiAgICAxNiArIC8vIG1maGRcbiAgICA4ICsgLy8gbW9vZiBoZWFkZXJcbiAgICA4KSwgLy8gbWRhdCBoZWFkZXJcbiAgICBzYW1wbGVEZXBlbmRlbmN5VGFibGUpO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIHRyYWNrIGJveC5cbiAgICogQHBhcmFtIHRyYWNrIHtvYmplY3R9IGEgdHJhY2sgZGVmaW5pdGlvblxuICAgKiBAcmV0dXJuIHtVaW50OEFycmF5fSB0aGUgdHJhY2sgYm94XG4gICAqL1xuICA7XG5cbiAgTVA0LnRyYWsgPSBmdW5jdGlvbiB0cmFrKHRyYWNrKSB7XG4gICAgdHJhY2suZHVyYXRpb24gPSB0cmFjay5kdXJhdGlvbiB8fCAweGZmZmZmZmZmO1xuICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy50cmFrLCBNUDQudGtoZCh0cmFjayksIE1QNC5tZGlhKHRyYWNrKSk7XG4gIH07XG5cbiAgTVA0LnRyZXggPSBmdW5jdGlvbiB0cmV4KHRyYWNrKSB7XG4gICAgdmFyIGlkID0gdHJhY2suaWQ7XG4gICAgcmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLnRyZXgsIG5ldyBVaW50OEFycmF5KFsweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgIGlkID4+IDI0LCBpZCA+PiAxNiAmIDBYRkYsIGlkID4+IDggJiAwWEZGLCBpZCAmIDB4RkYsIC8vIHRyYWNrX0lEXG4gICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMSwgLy8gZGVmYXVsdF9zYW1wbGVfZGVzY3JpcHRpb25faW5kZXhcbiAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBkZWZhdWx0X3NhbXBsZV9kdXJhdGlvblxuICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGRlZmF1bHRfc2FtcGxlX3NpemVcbiAgICAweDAwLCAweDAxLCAweDAwLCAweDAxIC8vIGRlZmF1bHRfc2FtcGxlX2ZsYWdzXG4gICAgXSkpO1xuICB9O1xuXG4gIE1QNC50cnVuID0gZnVuY3Rpb24gdHJ1bih0cmFjaywgb2Zmc2V0KSB7XG4gICAgdmFyIHNhbXBsZXMgPSB0cmFjay5zYW1wbGVzIHx8IFtdLFxuICAgICAgICBsZW4gPSBzYW1wbGVzLmxlbmd0aCxcbiAgICAgICAgYXJyYXlsZW4gPSAxMiArIDE2ICogbGVuLFxuICAgICAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5bGVuKSxcbiAgICAgICAgaSxcbiAgICAgICAgc2FtcGxlLFxuICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgc2l6ZSxcbiAgICAgICAgZmxhZ3MsXG4gICAgICAgIGN0cztcbiAgICBvZmZzZXQgKz0gOCArIGFycmF5bGVuO1xuICAgIGFycmF5LnNldChbMHgwMCwgLy8gdmVyc2lvbiAwXG4gICAgMHgwMCwgMHgwZiwgMHgwMSwgLy8gZmxhZ3NcbiAgICBsZW4gPj4+IDI0ICYgMHhGRiwgbGVuID4+PiAxNiAmIDB4RkYsIGxlbiA+Pj4gOCAmIDB4RkYsIGxlbiAmIDB4RkYsIC8vIHNhbXBsZV9jb3VudFxuICAgIG9mZnNldCA+Pj4gMjQgJiAweEZGLCBvZmZzZXQgPj4+IDE2ICYgMHhGRiwgb2Zmc2V0ID4+PiA4ICYgMHhGRiwgb2Zmc2V0ICYgMHhGRiAvLyBkYXRhX29mZnNldFxuICAgIF0sIDApO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBzYW1wbGUgPSBzYW1wbGVzW2ldO1xuICAgICAgZHVyYXRpb24gPSBzYW1wbGUuZHVyYXRpb247XG4gICAgICBzaXplID0gc2FtcGxlLnNpemU7XG4gICAgICBmbGFncyA9IHNhbXBsZS5mbGFncztcbiAgICAgIGN0cyA9IHNhbXBsZS5jdHM7XG4gICAgICBhcnJheS5zZXQoW2R1cmF0aW9uID4+PiAyNCAmIDB4RkYsIGR1cmF0aW9uID4+PiAxNiAmIDB4RkYsIGR1cmF0aW9uID4+PiA4ICYgMHhGRiwgZHVyYXRpb24gJiAweEZGLCAvLyBzYW1wbGVfZHVyYXRpb25cbiAgICAgIHNpemUgPj4+IDI0ICYgMHhGRiwgc2l6ZSA+Pj4gMTYgJiAweEZGLCBzaXplID4+PiA4ICYgMHhGRiwgc2l6ZSAmIDB4RkYsIC8vIHNhbXBsZV9zaXplXG4gICAgICBmbGFncy5pc0xlYWRpbmcgPDwgMiB8IGZsYWdzLmRlcGVuZHNPbiwgZmxhZ3MuaXNEZXBlbmRlZE9uIDw8IDYgfCBmbGFncy5oYXNSZWR1bmRhbmN5IDw8IDQgfCBmbGFncy5wYWRkaW5nVmFsdWUgPDwgMSB8IGZsYWdzLmlzTm9uU3luYywgZmxhZ3MuZGVncmFkUHJpbyAmIDB4RjAgPDwgOCwgZmxhZ3MuZGVncmFkUHJpbyAmIDB4MEYsIC8vIHNhbXBsZV9mbGFnc1xuICAgICAgY3RzID4+PiAyNCAmIDB4RkYsIGN0cyA+Pj4gMTYgJiAweEZGLCBjdHMgPj4+IDggJiAweEZGLCBjdHMgJiAweEZGIC8vIHNhbXBsZV9jb21wb3NpdGlvbl90aW1lX29mZnNldFxuICAgICAgXSwgMTIgKyAxNiAqIGkpO1xuICAgIH1cblxuICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy50cnVuLCBhcnJheSk7XG4gIH07XG5cbiAgTVA0LmluaXRTZWdtZW50ID0gZnVuY3Rpb24gaW5pdFNlZ21lbnQodHJhY2tzKSB7XG4gICAgaWYgKCFNUDQudHlwZXMpIHtcbiAgICAgIE1QNC5pbml0KCk7XG4gICAgfVxuXG4gICAgdmFyIG1vdmllID0gTVA0Lm1vb3YodHJhY2tzKSxcbiAgICAgICAgcmVzdWx0O1xuICAgIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KE1QNC5GVFlQLmJ5dGVMZW5ndGggKyBtb3ZpZS5ieXRlTGVuZ3RoKTtcbiAgICByZXN1bHQuc2V0KE1QNC5GVFlQKTtcbiAgICByZXN1bHQuc2V0KG1vdmllLCBNUDQuRlRZUC5ieXRlTGVuZ3RoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHJldHVybiBNUDQ7XG59KCk7XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIG1wNF9nZW5lcmF0b3IgPSAoTVA0KTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3V0aWxzL3RpbWVzY2FsZS1jb252ZXJzaW9uLnRzXG52YXIgTVBFR19UU19DTE9DS19GUkVRX0haID0gOTAwMDA7XG5mdW5jdGlvbiB0b1RpbWVzY2FsZUZyb21TY2FsZSh2YWx1ZSwgZGVzdFNjYWxlLCBzcmNTY2FsZSwgcm91bmQpIHtcbiAgaWYgKHNyY1NjYWxlID09PSB2b2lkIDApIHtcbiAgICBzcmNTY2FsZSA9IDE7XG4gIH1cblxuICBpZiAocm91bmQgPT09IHZvaWQgMCkge1xuICAgIHJvdW5kID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdG9UaW1lc2NhbGVGcm9tQmFzZSh2YWx1ZSwgZGVzdFNjYWxlLCAxIC8gc3JjU2NhbGUpO1xufVxuZnVuY3Rpb24gdG9UaW1lc2NhbGVGcm9tQmFzZSh2YWx1ZSwgZGVzdFNjYWxlLCBzcmNCYXNlLCByb3VuZCkge1xuICBpZiAoc3JjQmFzZSA9PT0gdm9pZCAwKSB7XG4gICAgc3JjQmFzZSA9IDE7XG4gIH1cblxuICBpZiAocm91bmQgPT09IHZvaWQgMCkge1xuICAgIHJvdW5kID0gZmFsc2U7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gdmFsdWUgKiBkZXN0U2NhbGUgKiBzcmNCYXNlOyAvLyBlcXVpdmFsZW50IHRvIGAodmFsdWUgKiBzY2FsZSkgLyAoMSAvIGJhc2UpYFxuXG4gIHJldHVybiByb3VuZCA/IE1hdGgucm91bmQocmVzdWx0KSA6IHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHRvTXNGcm9tTXBlZ1RzQ2xvY2sodmFsdWUsIHJvdW5kKSB7XG4gIGlmIChyb3VuZCA9PT0gdm9pZCAwKSB7XG4gICAgcm91bmQgPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0b1RpbWVzY2FsZUZyb21CYXNlKHZhbHVlLCAxMDAwLCAxIC8gTVBFR19UU19DTE9DS19GUkVRX0haLCByb3VuZCk7XG59XG5mdW5jdGlvbiB0b01wZWdUc0Nsb2NrRnJvbVRpbWVzY2FsZSh2YWx1ZSwgc3JjU2NhbGUpIHtcbiAgaWYgKHNyY1NjYWxlID09PSB2b2lkIDApIHtcbiAgICBzcmNTY2FsZSA9IDE7XG4gIH1cblxuICByZXR1cm4gdG9UaW1lc2NhbGVGcm9tQmFzZSh2YWx1ZSwgTVBFR19UU19DTE9DS19GUkVRX0haLCAxIC8gc3JjU2NhbGUpO1xufVxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvcmVtdXgvbXA0LXJlbXV4ZXIuanNcbi8qKlxuICogZk1QNCByZW11eGVyXG4qL1xuXG5cblxuXG5cblxudmFyIE1BWF9TSUxFTlRfRlJBTUVfRFVSQVRJT05fOTBLSFogPSB0b01wZWdUc0Nsb2NrRnJvbVRpbWVzY2FsZSgxMCk7XG52YXIgUFRTX0RUU19TSElGVF9UT0xFUkFOQ0VfOTBLSFogPSB0b01wZWdUc0Nsb2NrRnJvbVRpbWVzY2FsZSgwLjIpO1xudmFyIGNocm9tZVZlcnNpb24gPSBudWxsO1xuXG52YXIgbXA0X3JlbXV4ZXJfTVA0UmVtdXhlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE1QNFJlbXV4ZXIob2JzZXJ2ZXIsIGNvbmZpZywgdHlwZVN1cHBvcnRlZCwgdmVuZG9yKSB7XG4gICAgdGhpcy5vYnNlcnZlciA9IG9ic2VydmVyO1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIHRoaXMudHlwZVN1cHBvcnRlZCA9IHR5cGVTdXBwb3J0ZWQ7XG4gICAgdGhpcy5JU0dlbmVyYXRlZCA9IGZhbHNlO1xuXG4gICAgaWYgKGNocm9tZVZlcnNpb24gPT09IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9DaHJvbWVcXC8oXFxkKykvaSk7XG4gICAgICBjaHJvbWVWZXJzaW9uID0gcmVzdWx0ID8gcGFyc2VJbnQocmVzdWx0WzFdKSA6IDA7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9wcm90byA9IE1QNFJlbXV4ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHt9O1xuXG4gIF9wcm90by5yZXNldFRpbWVTdGFtcCA9IGZ1bmN0aW9uIHJlc2V0VGltZVN0YW1wKGRlZmF1bHRUaW1lU3RhbXApIHtcbiAgICB0aGlzLl9pbml0UFRTID0gdGhpcy5faW5pdERUUyA9IGRlZmF1bHRUaW1lU3RhbXA7XG4gIH07XG5cbiAgX3Byb3RvLnJlc2V0SW5pdFNlZ21lbnQgPSBmdW5jdGlvbiByZXNldEluaXRTZWdtZW50KCkge1xuICAgIHRoaXMuSVNHZW5lcmF0ZWQgPSBmYWxzZTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0VmlkZW9TdGFydFB0cyA9IGZ1bmN0aW9uIGdldFZpZGVvU3RhcnRQdHModmlkZW9TYW1wbGVzKSB7XG4gICAgdmFyIHJvbGxvdmVyRGV0ZWN0ZWQgPSBmYWxzZTtcbiAgICB2YXIgc3RhcnRQVFMgPSB2aWRlb1NhbXBsZXMucmVkdWNlKGZ1bmN0aW9uIChtaW5QVFMsIHNhbXBsZSkge1xuICAgICAgdmFyIGRlbHRhID0gc2FtcGxlLnB0cyAtIG1pblBUUztcblxuICAgICAgaWYgKGRlbHRhIDwgLTQyOTQ5NjcyOTYpIHtcbiAgICAgICAgLy8gMl4zMiwgc2VlIFBUU05vcm1hbGl6ZSBmb3IgcmVhc29uaW5nLCBidXQgd2UncmUgaGl0dGluZyBhIHJvbGxvdmVyIGhlcmUsIGFuZCB3ZSBkb24ndCB3YW50IHRoYXQgdG8gaW1wYWN0IHRoZSB0aW1lT2Zmc2V0IGNhbGN1bGF0aW9uXG4gICAgICAgIHJvbGxvdmVyRGV0ZWN0ZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gUFRTTm9ybWFsaXplKG1pblBUUywgc2FtcGxlLnB0cyk7XG4gICAgICB9IGVsc2UgaWYgKGRlbHRhID4gMCkge1xuICAgICAgICByZXR1cm4gbWluUFRTO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHNhbXBsZS5wdHM7XG4gICAgICB9XG4gICAgfSwgdmlkZW9TYW1wbGVzWzBdLnB0cyk7XG5cbiAgICBpZiAocm9sbG92ZXJEZXRlY3RlZCkge1xuICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmRlYnVnKCdQVFMgcm9sbG92ZXIgZGV0ZWN0ZWQnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RhcnRQVFM7XG4gIH07XG5cbiAgX3Byb3RvLnJlbXV4ID0gZnVuY3Rpb24gcmVtdXgoYXVkaW9UcmFjaywgdmlkZW9UcmFjaywgaWQzVHJhY2ssIHRleHRUcmFjaywgdGltZU9mZnNldCwgY29udGlndW91cywgYWNjdXJhdGVUaW1lT2Zmc2V0KSB7XG4gICAgLy8gZ2VuZXJhdGUgSW5pdCBTZWdtZW50IGlmIG5lZWRlZFxuICAgIGlmICghdGhpcy5JU0dlbmVyYXRlZCkge1xuICAgICAgdGhpcy5nZW5lcmF0ZUlTKGF1ZGlvVHJhY2ssIHZpZGVvVHJhY2ssIHRpbWVPZmZzZXQpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLklTR2VuZXJhdGVkKSB7XG4gICAgICB2YXIgbmJBdWRpb1NhbXBsZXMgPSBhdWRpb1RyYWNrLnNhbXBsZXMubGVuZ3RoO1xuICAgICAgdmFyIG5iVmlkZW9TYW1wbGVzID0gdmlkZW9UcmFjay5zYW1wbGVzLmxlbmd0aDtcbiAgICAgIHZhciBhdWRpb1RpbWVPZmZzZXQgPSB0aW1lT2Zmc2V0O1xuICAgICAgdmFyIHZpZGVvVGltZU9mZnNldCA9IHRpbWVPZmZzZXQ7XG5cbiAgICAgIGlmIChuYkF1ZGlvU2FtcGxlcyAmJiBuYlZpZGVvU2FtcGxlcykge1xuICAgICAgICAvLyB0aW1lT2Zmc2V0IGlzIGV4cGVjdGVkIHRvIGJlIHRoZSBvZmZzZXQgb2YgdGhlIGZpcnN0IHRpbWVzdGFtcCBvZiB0aGlzIGZyYWdtZW50IChmaXJzdCBEVFMpXG4gICAgICAgIC8vIGlmIGZpcnN0IGF1ZGlvIERUUyBpcyBub3QgYWxpZ25lZCB3aXRoIGZpcnN0IHZpZGVvIERUUyB0aGVuIHdlIG5lZWQgdG8gdGFrZSB0aGF0IGludG8gYWNjb3VudFxuICAgICAgICAvLyB3aGVuIHByb3ZpZGluZyB0aW1lT2Zmc2V0IHRvIHJlbXV4QXVkaW8gLyByZW11eFZpZGVvLiBpZiB3ZSBkb24ndCBkbyB0aGF0LCB0aGVyZSBtaWdodCBiZSBhIHBlcm1hbmVudCAvIHNtYWxsXG4gICAgICAgIC8vIGRyaWZ0IGJldHdlZW4gYXVkaW8gYW5kIHZpZGVvIHN0cmVhbXNcbiAgICAgICAgdmFyIHN0YXJ0UFRTID0gdGhpcy5nZXRWaWRlb1N0YXJ0UHRzKHZpZGVvVHJhY2suc2FtcGxlcyk7XG4gICAgICAgIHZhciB0c0RlbHRhID0gUFRTTm9ybWFsaXplKGF1ZGlvVHJhY2suc2FtcGxlc1swXS5wdHMsIHN0YXJ0UFRTKSAtIHN0YXJ0UFRTO1xuICAgICAgICB2YXIgYXVkaW92aWRlb1RpbWVzdGFtcERlbHRhID0gdHNEZWx0YSAvIHZpZGVvVHJhY2suaW5wdXRUaW1lU2NhbGU7XG4gICAgICAgIGF1ZGlvVGltZU9mZnNldCArPSBNYXRoLm1heCgwLCBhdWRpb3ZpZGVvVGltZXN0YW1wRGVsdGEpO1xuICAgICAgICB2aWRlb1RpbWVPZmZzZXQgKz0gTWF0aC5tYXgoMCwgLWF1ZGlvdmlkZW9UaW1lc3RhbXBEZWx0YSk7XG4gICAgICB9IC8vIFB1cnBvc2VmdWxseSByZW11eGluZyBhdWRpbyBiZWZvcmUgdmlkZW8sIHNvIHRoYXQgcmVtdXhWaWRlbyBjYW4gdXNlIG5leHRBdWRpb1B0cywgd2hpY2ggaXNcbiAgICAgIC8vIGNhbGN1bGF0ZWQgaW4gcmVtdXhBdWRpby5cbiAgICAgIC8vIGxvZ2dlci5sb2coJ25iIEFBQyBzYW1wbGVzOicgKyBhdWRpb1RyYWNrLnNhbXBsZXMubGVuZ3RoKTtcblxuXG4gICAgICBpZiAobmJBdWRpb1NhbXBsZXMpIHtcbiAgICAgICAgLy8gaWYgaW5pdFNlZ21lbnQgd2FzIGdlbmVyYXRlZCB3aXRob3V0IHZpZGVvIHNhbXBsZXMsIHJlZ2VuZXJhdGUgaXQgYWdhaW5cbiAgICAgICAgaWYgKCFhdWRpb1RyYWNrLnRpbWVzY2FsZSkge1xuICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuKCdyZWdlbmVyYXRlIEluaXRTZWdtZW50IGFzIGF1ZGlvIGRldGVjdGVkJyk7XG4gICAgICAgICAgdGhpcy5nZW5lcmF0ZUlTKGF1ZGlvVHJhY2ssIHZpZGVvVHJhY2ssIHRpbWVPZmZzZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGF1ZGlvRGF0YSA9IHRoaXMucmVtdXhBdWRpbyhhdWRpb1RyYWNrLCBhdWRpb1RpbWVPZmZzZXQsIGNvbnRpZ3VvdXMsIGFjY3VyYXRlVGltZU9mZnNldCk7IC8vIGxvZ2dlci5sb2coJ25iIEFWQyBzYW1wbGVzOicgKyB2aWRlb1RyYWNrLnNhbXBsZXMubGVuZ3RoKTtcblxuICAgICAgICBpZiAobmJWaWRlb1NhbXBsZXMpIHtcbiAgICAgICAgICB2YXIgYXVkaW9UcmFja0xlbmd0aDtcblxuICAgICAgICAgIGlmIChhdWRpb0RhdGEpIHtcbiAgICAgICAgICAgIGF1ZGlvVHJhY2tMZW5ndGggPSBhdWRpb0RhdGEuZW5kUFRTIC0gYXVkaW9EYXRhLnN0YXJ0UFRTO1xuICAgICAgICAgIH0gLy8gaWYgaW5pdFNlZ21lbnQgd2FzIGdlbmVyYXRlZCB3aXRob3V0IHZpZGVvIHNhbXBsZXMsIHJlZ2VuZXJhdGUgaXQgYWdhaW5cblxuXG4gICAgICAgICAgaWYgKCF2aWRlb1RyYWNrLnRpbWVzY2FsZSkge1xuICAgICAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLndhcm4oJ3JlZ2VuZXJhdGUgSW5pdFNlZ21lbnQgYXMgdmlkZW8gZGV0ZWN0ZWQnKTtcbiAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVJUyhhdWRpb1RyYWNrLCB2aWRlb1RyYWNrLCB0aW1lT2Zmc2V0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLnJlbXV4VmlkZW8odmlkZW9UcmFjaywgdmlkZW9UaW1lT2Zmc2V0LCBjb250aWd1b3VzLCBhdWRpb1RyYWNrTGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbG9nZ2VyLmxvZygnbmIgQVZDIHNhbXBsZXM6JyArIHZpZGVvVHJhY2suc2FtcGxlcy5sZW5ndGgpO1xuICAgICAgICBpZiAobmJWaWRlb1NhbXBsZXMpIHtcbiAgICAgICAgICB2YXIgdmlkZW9EYXRhID0gdGhpcy5yZW11eFZpZGVvKHZpZGVvVHJhY2ssIHZpZGVvVGltZU9mZnNldCwgY29udGlndW91cywgMCwgYWNjdXJhdGVUaW1lT2Zmc2V0KTtcblxuICAgICAgICAgIGlmICh2aWRlb0RhdGEgJiYgYXVkaW9UcmFjay5jb2RlYykge1xuICAgICAgICAgICAgdGhpcy5yZW11eEVtcHR5QXVkaW8oYXVkaW9UcmFjaywgYXVkaW9UaW1lT2Zmc2V0LCBjb250aWd1b3VzLCB2aWRlb0RhdGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gLy8gbG9nZ2VyLmxvZygnbmIgSUQzIHNhbXBsZXM6JyArIGF1ZGlvVHJhY2suc2FtcGxlcy5sZW5ndGgpO1xuXG5cbiAgICBpZiAoaWQzVHJhY2suc2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMucmVtdXhJRDMoaWQzVHJhY2ssIHRpbWVPZmZzZXQpO1xuICAgIH0gLy8gbG9nZ2VyLmxvZygnbmIgSUQzIHNhbXBsZXM6JyArIGF1ZGlvVHJhY2suc2FtcGxlcy5sZW5ndGgpO1xuXG5cbiAgICBpZiAodGV4dFRyYWNrLnNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLnJlbXV4VGV4dCh0ZXh0VHJhY2ssIHRpbWVPZmZzZXQpO1xuICAgIH0gLy8gbm90aWZ5IGVuZCBvZiBwYXJzaW5nXG5cblxuICAgIHRoaXMub2JzZXJ2ZXIudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkZSQUdfUEFSU0VEKTtcbiAgfTtcblxuICBfcHJvdG8uZ2VuZXJhdGVJUyA9IGZ1bmN0aW9uIGdlbmVyYXRlSVMoYXVkaW9UcmFjaywgdmlkZW9UcmFjaywgdGltZU9mZnNldCkge1xuICAgIHZhciBvYnNlcnZlciA9IHRoaXMub2JzZXJ2ZXIsXG4gICAgICAgIGF1ZGlvU2FtcGxlcyA9IGF1ZGlvVHJhY2suc2FtcGxlcyxcbiAgICAgICAgdmlkZW9TYW1wbGVzID0gdmlkZW9UcmFjay5zYW1wbGVzLFxuICAgICAgICB0eXBlU3VwcG9ydGVkID0gdGhpcy50eXBlU3VwcG9ydGVkLFxuICAgICAgICBjb250YWluZXIgPSAnYXVkaW8vbXA0JyxcbiAgICAgICAgdHJhY2tzID0ge30sXG4gICAgICAgIGRhdGEgPSB7XG4gICAgICB0cmFja3M6IHRyYWNrc1xuICAgIH0sXG4gICAgICAgIGNvbXB1dGVQVFNEVFMgPSB0aGlzLl9pbml0UFRTID09PSB1bmRlZmluZWQsXG4gICAgICAgIGluaXRQVFMsXG4gICAgICAgIGluaXREVFM7XG5cbiAgICBpZiAoY29tcHV0ZVBUU0RUUykge1xuICAgICAgaW5pdFBUUyA9IGluaXREVFMgPSBJbmZpbml0eTtcbiAgICB9XG5cbiAgICBpZiAoYXVkaW9UcmFjay5jb25maWcgJiYgYXVkaW9TYW1wbGVzLmxlbmd0aCkge1xuICAgICAgLy8gbGV0J3MgdXNlIGF1ZGlvIHNhbXBsaW5nIHJhdGUgYXMgTVA0IHRpbWUgc2NhbGUuXG4gICAgICAvLyByYXRpb25hbGUgaXMgdGhhdCB0aGVyZSBpcyBhIGludGVnZXIgbmIgb2YgYXVkaW8gZnJhbWVzIHBlciBhdWRpbyBzYW1wbGUgKDEwMjQgZm9yIEFBQylcbiAgICAgIC8vIHVzaW5nIGF1ZGlvIHNhbXBsaW5nIHJhdGUgaGVyZSBoZWxwcyBoYXZpbmcgYW4gaW50ZWdlciBNUDQgZnJhbWUgZHVyYXRpb25cbiAgICAgIC8vIHRoaXMgYXZvaWRzIHBvdGVudGlhbCByb3VuZGluZyBpc3N1ZSBhbmQgQVYgc3luYyBpc3N1ZVxuICAgICAgYXVkaW9UcmFjay50aW1lc2NhbGUgPSBhdWRpb1RyYWNrLnNhbXBsZXJhdGU7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKFwiYXVkaW8gc2FtcGxpbmcgcmF0ZSA6IFwiICsgYXVkaW9UcmFjay5zYW1wbGVyYXRlKTtcblxuICAgICAgaWYgKCFhdWRpb1RyYWNrLmlzQUFDKSB7XG4gICAgICAgIGlmICh0eXBlU3VwcG9ydGVkLm1wZWcpIHtcbiAgICAgICAgICAvLyBDaHJvbWUgYW5kIFNhZmFyaVxuICAgICAgICAgIGNvbnRhaW5lciA9ICdhdWRpby9tcGVnJztcbiAgICAgICAgICBhdWRpb1RyYWNrLmNvZGVjID0gJyc7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZVN1cHBvcnRlZC5tcDMpIHtcbiAgICAgICAgICAvLyBGaXJlZm94XG4gICAgICAgICAgYXVkaW9UcmFjay5jb2RlYyA9ICdtcDMnO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRyYWNrcy5hdWRpbyA9IHtcbiAgICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgICAgIGNvZGVjOiBhdWRpb1RyYWNrLmNvZGVjLFxuICAgICAgICBpbml0U2VnbWVudDogIWF1ZGlvVHJhY2suaXNBQUMgJiYgdHlwZVN1cHBvcnRlZC5tcGVnID8gbmV3IFVpbnQ4QXJyYXkoKSA6IG1wNF9nZW5lcmF0b3IuaW5pdFNlZ21lbnQoW2F1ZGlvVHJhY2tdKSxcbiAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICBjaGFubmVsQ291bnQ6IGF1ZGlvVHJhY2suY2hhbm5lbENvdW50XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlmIChjb21wdXRlUFRTRFRTKSB7XG4gICAgICAgIC8vIHJlbWVtYmVyIGZpcnN0IFBUUyBvZiB0aGlzIGRlbXV4aW5nIGNvbnRleHQuIGZvciBhdWRpbywgUFRTID0gRFRTXG4gICAgICAgIGluaXRQVFMgPSBpbml0RFRTID0gYXVkaW9TYW1wbGVzWzBdLnB0cyAtIE1hdGgucm91bmQoYXVkaW9UcmFjay5pbnB1dFRpbWVTY2FsZSAqIHRpbWVPZmZzZXQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh2aWRlb1RyYWNrLnNwcyAmJiB2aWRlb1RyYWNrLnBwcyAmJiB2aWRlb1NhbXBsZXMubGVuZ3RoKSB7XG4gICAgICAvLyBsZXQncyB1c2UgaW5wdXQgdGltZSBzY2FsZSBhcyBNUDQgdmlkZW8gdGltZXNjYWxlXG4gICAgICAvLyB3ZSB1c2UgaW5wdXQgdGltZSBzY2FsZSBzdHJhaWdodCBhd2F5IHRvIGF2b2lkIHJvdW5kaW5nIGlzc3VlcyBvbiBmcmFtZSBkdXJhdGlvbiAvIGN0cyBjb21wdXRhdGlvblxuICAgICAgdmFyIGlucHV0VGltZVNjYWxlID0gdmlkZW9UcmFjay5pbnB1dFRpbWVTY2FsZTtcbiAgICAgIHZpZGVvVHJhY2sudGltZXNjYWxlID0gaW5wdXRUaW1lU2NhbGU7XG4gICAgICB0cmFja3MudmlkZW8gPSB7XG4gICAgICAgIGNvbnRhaW5lcjogJ3ZpZGVvL21wNCcsXG4gICAgICAgIGNvZGVjOiB2aWRlb1RyYWNrLmNvZGVjLFxuICAgICAgICBpbml0U2VnbWVudDogbXA0X2dlbmVyYXRvci5pbml0U2VnbWVudChbdmlkZW9UcmFja10pLFxuICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgIHdpZHRoOiB2aWRlb1RyYWNrLndpZHRoLFxuICAgICAgICAgIGhlaWdodDogdmlkZW9UcmFjay5oZWlnaHRcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaWYgKGNvbXB1dGVQVFNEVFMpIHtcbiAgICAgICAgdmFyIHN0YXJ0UFRTID0gdGhpcy5nZXRWaWRlb1N0YXJ0UHRzKHZpZGVvU2FtcGxlcyk7XG4gICAgICAgIHZhciBzdGFydE9mZnNldCA9IE1hdGgucm91bmQoaW5wdXRUaW1lU2NhbGUgKiB0aW1lT2Zmc2V0KTtcbiAgICAgICAgaW5pdERUUyA9IE1hdGgubWluKGluaXREVFMsIFBUU05vcm1hbGl6ZSh2aWRlb1NhbXBsZXNbMF0uZHRzLCBzdGFydFBUUykgLSBzdGFydE9mZnNldCk7XG4gICAgICAgIGluaXRQVFMgPSBNYXRoLm1pbihpbml0UFRTLCBzdGFydFBUUyAtIHN0YXJ0T2Zmc2V0KTtcbiAgICAgICAgdGhpcy5vYnNlcnZlci50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uSU5JVF9QVFNfRk9VTkQsIHtcbiAgICAgICAgICBpbml0UFRTOiBpbml0UFRTXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY29tcHV0ZVBUU0RUUyAmJiB0cmFja3MuYXVkaW8pIHtcbiAgICAgIC8vIGluaXRQVFMgZm91bmQgZm9yIGF1ZGlvLW9ubHkgc3RyZWFtIHdpdGggbWFpbiBhbmQgYWx0IGF1ZGlvXG4gICAgICB0aGlzLm9ic2VydmVyLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5JTklUX1BUU19GT1VORCwge1xuICAgICAgICBpbml0UFRTOiBpbml0UFRTXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LmtleXModHJhY2tzKS5sZW5ndGgpIHtcbiAgICAgIG9ic2VydmVyLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5GUkFHX1BBUlNJTkdfSU5JVF9TRUdNRU5ULCBkYXRhKTtcbiAgICAgIHRoaXMuSVNHZW5lcmF0ZWQgPSB0cnVlO1xuXG4gICAgICBpZiAoY29tcHV0ZVBUU0RUUykge1xuICAgICAgICB0aGlzLl9pbml0UFRTID0gaW5pdFBUUztcbiAgICAgICAgdGhpcy5faW5pdERUUyA9IGluaXREVFM7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ic2VydmVyLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5FUlJPUiwge1xuICAgICAgICB0eXBlOiBlcnJvcnNbXCJFcnJvclR5cGVzXCJdLk1FRElBX0VSUk9SLFxuICAgICAgICBkZXRhaWxzOiBlcnJvcnNbXCJFcnJvckRldGFpbHNcIl0uRlJBR19QQVJTSU5HX0VSUk9SLFxuICAgICAgICBmYXRhbDogZmFsc2UsXG4gICAgICAgIHJlYXNvbjogJ25vIGF1ZGlvL3ZpZGVvIHNhbXBsZXMgZm91bmQnXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbXV4VmlkZW8gPSBmdW5jdGlvbiByZW11eFZpZGVvKHRyYWNrLCB0aW1lT2Zmc2V0LCBjb250aWd1b3VzLCBhdWRpb1RyYWNrTGVuZ3RoKSB7XG4gICAgdmFyIHRpbWVTY2FsZSA9IHRyYWNrLnRpbWVzY2FsZTtcbiAgICB2YXIgaW5wdXRTYW1wbGVzID0gdHJhY2suc2FtcGxlcztcbiAgICB2YXIgb3V0cHV0U2FtcGxlcyA9IFtdO1xuICAgIHZhciBuYlNhbXBsZXMgPSBpbnB1dFNhbXBsZXMubGVuZ3RoO1xuICAgIHZhciBpbml0UFRTID0gdGhpcy5faW5pdFBUUztcbiAgICB2YXIgb2Zmc2V0ID0gODtcbiAgICB2YXIgbXA0U2FtcGxlRHVyYXRpb247XG4gICAgdmFyIG1kYXQ7XG4gICAgdmFyIG1vb2Y7XG4gICAgdmFyIGZpcnN0RFRTO1xuICAgIHZhciBsYXN0RFRTO1xuICAgIHZhciBtaW5QVFMgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgdmFyIG1heFBUUyA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcbiAgICB2YXIgcHRzRHRzU2hpZnQgPSAwO1xuICAgIHZhciBzb3J0U2FtcGxlcyA9IGZhbHNlOyAvLyBpZiBwYXJzZWQgZnJhZ21lbnQgaXMgY29udGlndW91cyB3aXRoIGxhc3Qgb25lLCBsZXQncyB1c2UgbGFzdCBEVFMgdmFsdWUgYXMgcmVmZXJlbmNlXG5cbiAgICB2YXIgbmV4dEF2Y0R0cyA9IHRoaXMubmV4dEF2Y0R0cztcblxuICAgIGlmIChuYlNhbXBsZXMgPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWNvbnRpZ3VvdXMpIHtcbiAgICAgIHZhciBwdHMgPSB0aW1lT2Zmc2V0ICogdGltZVNjYWxlO1xuICAgICAgdmFyIGN0cyA9IGlucHV0U2FtcGxlc1swXS5wdHMgLSBQVFNOb3JtYWxpemUoaW5wdXRTYW1wbGVzWzBdLmR0cywgaW5wdXRTYW1wbGVzWzBdLnB0cyk7IC8vIGlmIG5vdCBjb250aWd1b3VzLCBsZXQncyB1c2UgdGFyZ2V0IHRpbWVPZmZzZXRcblxuICAgICAgbmV4dEF2Y0R0cyA9IHB0cyAtIGN0cztcbiAgICB9IC8vIFBUUyBpcyBjb2RlZCBvbiAzM2JpdHMsIGFuZCBjYW4gbG9vcCBmcm9tIC0yXjMyIHRvIDJeMzJcbiAgICAvLyBQVFNOb3JtYWxpemUgd2lsbCBtYWtlIFBUUy9EVFMgdmFsdWUgbW9ub3RvbmljLCB3ZSB1c2UgbGFzdCBrbm93biBEVFMgdmFsdWUgYXMgcmVmZXJlbmNlIHZhbHVlXG5cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmJTYW1wbGVzOyBpKyspIHtcbiAgICAgIHZhciBzYW1wbGUgPSBpbnB1dFNhbXBsZXNbaV07XG4gICAgICBzYW1wbGUucHRzID0gUFRTTm9ybWFsaXplKHNhbXBsZS5wdHMgLSBpbml0UFRTLCBuZXh0QXZjRHRzKTtcbiAgICAgIHNhbXBsZS5kdHMgPSBQVFNOb3JtYWxpemUoc2FtcGxlLmR0cyAtIGluaXRQVFMsIG5leHRBdmNEdHMpO1xuXG4gICAgICBpZiAoc2FtcGxlLmR0cyA+IHNhbXBsZS5wdHMpIHtcbiAgICAgICAgcHRzRHRzU2hpZnQgPSBNYXRoLm1heChNYXRoLm1pbihwdHNEdHNTaGlmdCwgc2FtcGxlLnB0cyAtIHNhbXBsZS5kdHMpLCAtMSAqIFBUU19EVFNfU0hJRlRfVE9MRVJBTkNFXzkwS0haKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNhbXBsZS5kdHMgPCBpbnB1dFNhbXBsZXNbaSA+IDAgPyBpIC0gMSA6IGldLmR0cykge1xuICAgICAgICBzb3J0U2FtcGxlcyA9IHRydWU7XG4gICAgICB9XG4gICAgfSAvLyBzb3J0IHZpZGVvIHNhbXBsZXMgYnkgRFRTIHRoZW4gUFRTIHRoZW4gZGVtdXggaWQgb3JkZXJcblxuXG4gICAgaWYgKHNvcnRTYW1wbGVzKSB7XG4gICAgICBpbnB1dFNhbXBsZXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICB2YXIgZGVsdGFkdHMgPSBhLmR0cyAtIGIuZHRzO1xuICAgICAgICB2YXIgZGVsdGFwdHMgPSBhLnB0cyAtIGIucHRzO1xuICAgICAgICByZXR1cm4gZGVsdGFkdHMgfHwgZGVsdGFwdHMgfHwgYS5pZCAtIGIuaWQ7XG4gICAgICB9KTtcbiAgICB9IC8vIEdldCBmaXJzdC9sYXN0IERUU1xuXG5cbiAgICBmaXJzdERUUyA9IGlucHV0U2FtcGxlc1swXS5kdHM7XG4gICAgbGFzdERUUyA9IGlucHV0U2FtcGxlc1tuYlNhbXBsZXMgLSAxXS5kdHM7IC8vIG9uIFNhZmFyaSBsZXQncyBzaWduYWwgdGhlIHNhbWUgc2FtcGxlIGR1cmF0aW9uIGZvciBhbGwgc2FtcGxlc1xuICAgIC8vIHNhbXBsZSBkdXJhdGlvbiAoYXMgZXhwZWN0ZWQgYnkgdHJ1biBNUDQgYm94ZXMpLCBzaG91bGQgYmUgdGhlIGRlbHRhIGJldHdlZW4gc2FtcGxlIERUU1xuICAgIC8vIHNldCB0aGlzIGNvbnN0YW50IGR1cmF0aW9uIGFzIGJlaW5nIHRoZSBhdmcgZGVsdGEgYmV0d2VlbiBjb25zZWN1dGl2ZSBEVFMuXG5cbiAgICB2YXIgYXZlcmFnZVNhbXBsZUR1cmF0aW9uID0gTWF0aC5yb3VuZCgobGFzdERUUyAtIGZpcnN0RFRTKSAvIChuYlNhbXBsZXMgLSAxKSk7IC8vIGhhbmRsZSBicm9rZW4gc3RyZWFtcyB3aXRoIFBUUyA8IERUUywgdG9sZXJhbmNlIHVwIDAuMiBzZWNvbmRzXG5cbiAgICBpZiAocHRzRHRzU2hpZnQgPCAwKSB7XG4gICAgICBpZiAocHRzRHRzU2hpZnQgPCBhdmVyYWdlU2FtcGxlRHVyYXRpb24gKiAtMikge1xuICAgICAgICAvLyBGaXggZm9yIFwiQ05OIHNwZWNpYWwgcmVwb3J0LCB3aXRoIENDXCIgaW4gdGVzdC1zdHJlYW1zIChpbmNsdWRpbmcgU2FmYXJpIGJyb3dzZXIpXG4gICAgICAgIC8vIFdpdGggbGFyZ2UgUFRTIDwgRFRTIGVycm9ycyBzdWNoIGFzIHRoaXMsIHdlIHdhbnQgdG8gY29ycmVjdCBDVFMgd2hpbGUgbWFpbnRhaW5pbmcgaW5jcmVhc2luZyBEVFMgdmFsdWVzXG4gICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuKFwiUFRTIDwgRFRTIGRldGVjdGVkIGluIHZpZGVvIHNhbXBsZXMsIG9mZnNldHRpbmcgRFRTIGZyb20gUFRTIGJ5IFwiICsgdG9Nc0Zyb21NcGVnVHNDbG9jaygtYXZlcmFnZVNhbXBsZUR1cmF0aW9uLCB0cnVlKSArIFwiIG1zXCIpO1xuICAgICAgICB2YXIgbGFzdER0cyA9IHB0c0R0c1NoaWZ0O1xuXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBuYlNhbXBsZXM7IF9pKyspIHtcbiAgICAgICAgICBpbnB1dFNhbXBsZXNbX2ldLmR0cyA9IGxhc3REdHMgPSBNYXRoLm1heChsYXN0RHRzLCBpbnB1dFNhbXBsZXNbX2ldLnB0cyAtIGF2ZXJhZ2VTYW1wbGVEdXJhdGlvbik7XG4gICAgICAgICAgaW5wdXRTYW1wbGVzW19pXS5wdHMgPSBNYXRoLm1heChsYXN0RHRzLCBpbnB1dFNhbXBsZXNbX2ldLnB0cyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZpeCBmb3IgXCJDdXN0b20gSVYgd2l0aCBiYWQgUFRTIERUU1wiIGluIHRlc3Qtc3RyZWFtc1xuICAgICAgICAvLyBXaXRoIHNtYWxsZXIgUFRTIDwgRFRTIGVycm9ycyB3ZSBjYW4gc2ltcGx5IG1vdmUgYWxsIERUUyBiYWNrLiBUaGlzIGluY3JlYXNlcyBDVFMgd2l0aG91dCBjYXVzaW5nIGJ1ZmZlciBnYXBzIG9yIGRlY29kZSBlcnJvcnMgaW4gU2FmYXJpXG4gICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuKFwiUFRTIDwgRFRTIGRldGVjdGVkIGluIHZpZGVvIHNhbXBsZXMsIHNoaWZ0aW5nIERUUyBieSBcIiArIHRvTXNGcm9tTXBlZ1RzQ2xvY2socHRzRHRzU2hpZnQsIHRydWUpICsgXCIgbXMgdG8gb3ZlcmNvbWUgdGhpcyBpc3N1ZVwiKTtcblxuICAgICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBuYlNhbXBsZXM7IF9pMisrKSB7XG4gICAgICAgICAgaW5wdXRTYW1wbGVzW19pMl0uZHRzID0gaW5wdXRTYW1wbGVzW19pMl0uZHRzICsgcHRzRHRzU2hpZnQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZmlyc3REVFMgPSBpbnB1dFNhbXBsZXNbMF0uZHRzO1xuICAgICAgbGFzdERUUyA9IGlucHV0U2FtcGxlc1tuYlNhbXBsZXMgLSAxXS5kdHM7XG4gICAgfSAvLyBpZiBmcmFnbWVudCBhcmUgY29udGlndW91cywgZGV0ZWN0IGhvbGUvb3ZlcmxhcHBpbmcgYmV0d2VlbiBmcmFnbWVudHNcblxuXG4gICAgaWYgKGNvbnRpZ3VvdXMpIHtcbiAgICAgIC8vIGNoZWNrIHRpbWVzdGFtcCBjb250aW51aXR5IGFjcm9zcyBjb25zZWN1dGl2ZSBmcmFnbWVudHMgKHRoaXMgaXMgdG8gcmVtb3ZlIGludGVyLWZyYWdtZW50IGdhcC9ob2xlKVxuICAgICAgdmFyIGRlbHRhID0gZmlyc3REVFMgLSBuZXh0QXZjRHRzO1xuICAgICAgdmFyIGZvdW5kSG9sZSA9IGRlbHRhID4gYXZlcmFnZVNhbXBsZUR1cmF0aW9uO1xuICAgICAgdmFyIGZvdW5kT3ZlcmxhcCA9IGRlbHRhIDwgLTE7XG5cbiAgICAgIGlmIChmb3VuZEhvbGUgfHwgZm91bmRPdmVybGFwKSB7XG4gICAgICAgIGlmIChmb3VuZEhvbGUpIHtcbiAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ud2FybihcIkFWQzogXCIgKyB0b01zRnJvbU1wZWdUc0Nsb2NrKGRlbHRhLCB0cnVlKSArIFwiIG1zIChcIiArIGRlbHRhICsgXCJkdHMpIGhvbGUgYmV0d2VlbiBmcmFnbWVudHMgZGV0ZWN0ZWQsIGZpbGxpbmcgaXRcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLndhcm4oXCJBVkM6IFwiICsgdG9Nc0Zyb21NcGVnVHNDbG9jaygtZGVsdGEsIHRydWUpICsgXCIgbXMgKFwiICsgZGVsdGEgKyBcImR0cykgb3ZlcmxhcHBpbmcgYmV0d2VlbiBmcmFnbWVudHMgZGV0ZWN0ZWRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBmaXJzdERUUyA9IG5leHRBdmNEdHM7XG4gICAgICAgIHZhciBmaXJzdFBUUyA9IGlucHV0U2FtcGxlc1swXS5wdHMgLSBkZWx0YTtcbiAgICAgICAgaW5wdXRTYW1wbGVzWzBdLmR0cyA9IGZpcnN0RFRTO1xuICAgICAgICBpbnB1dFNhbXBsZXNbMF0ucHRzID0gZmlyc3RQVFM7XG4gICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJWaWRlbzogRmlyc3QgUFRTL0RUUyBhZGp1c3RlZDogXCIgKyB0b01zRnJvbU1wZWdUc0Nsb2NrKGZpcnN0UFRTLCB0cnVlKSArIFwiL1wiICsgdG9Nc0Zyb21NcGVnVHNDbG9jayhmaXJzdERUUywgdHJ1ZSkgKyBcIiwgZGVsdGE6IFwiICsgdG9Nc0Zyb21NcGVnVHNDbG9jayhkZWx0YSwgdHJ1ZSkgKyBcIiBtc1wiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2hyb21lVmVyc2lvbiAmJiBjaHJvbWVWZXJzaW9uIDwgNzUpIHtcbiAgICAgIGZpcnN0RFRTID0gTWF0aC5tYXgoMCwgZmlyc3REVFMpO1xuICAgIH1cblxuICAgIHZhciBuYk5hbHUgPSAwO1xuICAgIHZhciBuYWx1TGVuID0gMDtcblxuICAgIGZvciAodmFyIF9pMyA9IDA7IF9pMyA8IG5iU2FtcGxlczsgX2kzKyspIHtcbiAgICAgIC8vIGNvbXB1dGUgdG90YWwvYXZjIHNhbXBsZSBsZW5ndGggYW5kIG5iIG9mIE5BTCB1bml0c1xuICAgICAgdmFyIF9zYW1wbGUgPSBpbnB1dFNhbXBsZXNbX2kzXTtcbiAgICAgIHZhciB1bml0cyA9IF9zYW1wbGUudW5pdHM7XG4gICAgICB2YXIgbmJVbml0cyA9IHVuaXRzLmxlbmd0aDtcbiAgICAgIHZhciBzYW1wbGVMZW4gPSAwO1xuXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG5iVW5pdHM7IGorKykge1xuICAgICAgICBzYW1wbGVMZW4gKz0gdW5pdHNbal0uZGF0YS5sZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIG5hbHVMZW4gKz0gc2FtcGxlTGVuO1xuICAgICAgbmJOYWx1ICs9IG5iVW5pdHM7XG4gICAgICBfc2FtcGxlLmxlbmd0aCA9IHNhbXBsZUxlbjsgLy8gbm9ybWFsaXplIFBUUy9EVFNcbiAgICAgIC8vIGVuc3VyZSBzYW1wbGUgbW9ub3RvbmljIERUU1xuXG4gICAgICBfc2FtcGxlLmR0cyA9IE1hdGgubWF4KF9zYW1wbGUuZHRzLCBmaXJzdERUUyk7IC8vIGVuc3VyZSB0aGF0IGNvbXB1dGVkIHZhbHVlIGlzIGdyZWF0ZXIgb3IgZXF1YWwgdGhhbiBzYW1wbGUgRFRTXG5cbiAgICAgIF9zYW1wbGUucHRzID0gTWF0aC5tYXgoX3NhbXBsZS5wdHMsIF9zYW1wbGUuZHRzLCAwKTtcbiAgICAgIG1pblBUUyA9IE1hdGgubWluKF9zYW1wbGUucHRzLCBtaW5QVFMpO1xuICAgICAgbWF4UFRTID0gTWF0aC5tYXgoX3NhbXBsZS5wdHMsIG1heFBUUyk7XG4gICAgfVxuXG4gICAgbGFzdERUUyA9IGlucHV0U2FtcGxlc1tuYlNhbXBsZXMgLSAxXS5kdHM7XG4gICAgLyogY29uY2F0ZW5hdGUgdGhlIHZpZGVvIGRhdGEgYW5kIGNvbnN0cnVjdCB0aGUgbWRhdCBpbiBwbGFjZVxuICAgICAgKG5lZWQgOCBtb3JlIGJ5dGVzIHRvIGZpbGwgbGVuZ3RoIGFuZCBtcGRhdCB0eXBlKSAqL1xuXG4gICAgdmFyIG1kYXRTaXplID0gbmFsdUxlbiArIDQgKiBuYk5hbHUgKyA4O1xuXG4gICAgdHJ5IHtcbiAgICAgIG1kYXQgPSBuZXcgVWludDhBcnJheShtZGF0U2l6ZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aGlzLm9ic2VydmVyLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5FUlJPUiwge1xuICAgICAgICB0eXBlOiBlcnJvcnNbXCJFcnJvclR5cGVzXCJdLk1VWF9FUlJPUixcbiAgICAgICAgZGV0YWlsczogZXJyb3JzW1wiRXJyb3JEZXRhaWxzXCJdLlJFTVVYX0FMTE9DX0VSUk9SLFxuICAgICAgICBmYXRhbDogZmFsc2UsXG4gICAgICAgIGJ5dGVzOiBtZGF0U2l6ZSxcbiAgICAgICAgcmVhc29uOiBcImZhaWwgYWxsb2NhdGluZyB2aWRlbyBtZGF0IFwiICsgbWRhdFNpemVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KG1kYXQuYnVmZmVyKTtcbiAgICB2aWV3LnNldFVpbnQzMigwLCBtZGF0U2l6ZSk7XG4gICAgbWRhdC5zZXQobXA0X2dlbmVyYXRvci50eXBlcy5tZGF0LCA0KTtcblxuICAgIGZvciAodmFyIF9pNCA9IDA7IF9pNCA8IG5iU2FtcGxlczsgX2k0KyspIHtcbiAgICAgIHZhciBhdmNTYW1wbGUgPSBpbnB1dFNhbXBsZXNbX2k0XTtcbiAgICAgIHZhciBhdmNTYW1wbGVVbml0cyA9IGF2Y1NhbXBsZS51bml0cztcbiAgICAgIHZhciBtcDRTYW1wbGVMZW5ndGggPSAwO1xuICAgICAgdmFyIGNvbXBvc2l0aW9uVGltZU9mZnNldCA9IHZvaWQgMDsgLy8gY29udmVydCBOQUxVIGJpdHN0cmVhbSB0byBNUDQgZm9ybWF0IChwcmVwZW5kIE5BTFUgd2l0aCBzaXplIGZpZWxkKVxuXG4gICAgICBmb3IgKHZhciBfaiA9IDAsIF9uYlVuaXRzID0gYXZjU2FtcGxlVW5pdHMubGVuZ3RoOyBfaiA8IF9uYlVuaXRzOyBfaisrKSB7XG4gICAgICAgIHZhciB1bml0ID0gYXZjU2FtcGxlVW5pdHNbX2pdO1xuICAgICAgICB2YXIgdW5pdERhdGEgPSB1bml0LmRhdGE7XG4gICAgICAgIHZhciB1bml0RGF0YUxlbiA9IHVuaXQuZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICB2aWV3LnNldFVpbnQzMihvZmZzZXQsIHVuaXREYXRhTGVuKTtcbiAgICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgICAgIG1kYXQuc2V0KHVuaXREYXRhLCBvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgKz0gdW5pdERhdGFMZW47XG4gICAgICAgIG1wNFNhbXBsZUxlbmd0aCArPSA0ICsgdW5pdERhdGFMZW47XG4gICAgICB9IC8vIGV4cGVjdGVkIHNhbXBsZSBkdXJhdGlvbiBpcyB0aGUgRGVjb2RpbmcgVGltZXN0YW1wIGRpZmYgb2YgY29uc2VjdXRpdmUgc2FtcGxlc1xuXG5cbiAgICAgIGlmIChfaTQgPCBuYlNhbXBsZXMgLSAxKSB7XG4gICAgICAgIG1wNFNhbXBsZUR1cmF0aW9uID0gaW5wdXRTYW1wbGVzW19pNCArIDFdLmR0cyAtIGF2Y1NhbXBsZS5kdHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWc7XG4gICAgICAgIHZhciBsYXN0RnJhbWVEdXJhdGlvbiA9IGF2Y1NhbXBsZS5kdHMgLSBpbnB1dFNhbXBsZXNbX2k0ID4gMCA/IF9pNCAtIDEgOiBfaTRdLmR0cztcblxuICAgICAgICBpZiAoY29uZmlnLnN0cmV0Y2hTaG9ydFZpZGVvVHJhY2spIHtcbiAgICAgICAgICAvLyBJbiBzb21lIGNhc2VzLCBhIHNlZ21lbnQncyBhdWRpbyB0cmFjayBkdXJhdGlvbiBtYXkgZXhjZWVkIHRoZSB2aWRlbyB0cmFjayBkdXJhdGlvbi5cbiAgICAgICAgICAvLyBTaW5jZSB3ZSd2ZSBhbHJlYWR5IHJlbXV4ZWQgYXVkaW8sIGFuZCB3ZSBrbm93IGhvdyBsb25nIHRoZSBhdWRpbyB0cmFjayBpcywgd2UgbG9vayB0b1xuICAgICAgICAgIC8vIHNlZSBpZiB0aGUgZGVsdGEgdG8gdGhlIG5leHQgc2VnbWVudCBpcyBsb25nZXIgdGhhbiBtYXhCdWZmZXJIb2xlLlxuICAgICAgICAgIC8vIElmIHNvLCBwbGF5YmFjayB3b3VsZCBwb3RlbnRpYWxseSBnZXQgc3R1Y2ssIHNvIHdlIGFydGlmaWNpYWxseSBpbmZsYXRlXG4gICAgICAgICAgLy8gdGhlIGR1cmF0aW9uIG9mIHRoZSBsYXN0IGZyYW1lIHRvIG1pbmltaXplIGFueSBwb3RlbnRpYWwgZ2FwIGJldHdlZW4gc2VnbWVudHMuXG4gICAgICAgICAgdmFyIG1heEJ1ZmZlckhvbGUgPSBjb25maWcubWF4QnVmZmVySG9sZTtcbiAgICAgICAgICB2YXIgZ2FwVG9sZXJhbmNlID0gTWF0aC5mbG9vcihtYXhCdWZmZXJIb2xlICogdGltZVNjYWxlKTtcbiAgICAgICAgICB2YXIgZGVsdGFUb0ZyYW1lRW5kID0gKGF1ZGlvVHJhY2tMZW5ndGggPyBtaW5QVFMgKyBhdWRpb1RyYWNrTGVuZ3RoICogdGltZVNjYWxlIDogdGhpcy5uZXh0QXVkaW9QdHMpIC0gYXZjU2FtcGxlLnB0cztcblxuICAgICAgICAgIGlmIChkZWx0YVRvRnJhbWVFbmQgPiBnYXBUb2xlcmFuY2UpIHtcbiAgICAgICAgICAgIC8vIFdlIHN1YnRyYWN0IGxhc3RGcmFtZUR1cmF0aW9uIGZyb20gZGVsdGFUb0ZyYW1lRW5kIHRvIHRyeSB0byBwcmV2ZW50IGFueSB2aWRlb1xuICAgICAgICAgICAgLy8gZnJhbWUgb3ZlcmxhcC4gbWF4QnVmZmVySG9sZSBzaG91bGQgYmUgPj4gbGFzdEZyYW1lRHVyYXRpb24gYW55d2F5LlxuICAgICAgICAgICAgbXA0U2FtcGxlRHVyYXRpb24gPSBkZWx0YVRvRnJhbWVFbmQgLSBsYXN0RnJhbWVEdXJhdGlvbjtcblxuICAgICAgICAgICAgaWYgKG1wNFNhbXBsZUR1cmF0aW9uIDwgMCkge1xuICAgICAgICAgICAgICBtcDRTYW1wbGVEdXJhdGlvbiA9IGxhc3RGcmFtZUR1cmF0aW9uO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKFwiSXQgaXMgYXBwcm94aW1hdGVseSBcIiArIHRvTXNGcm9tTXBlZ1RzQ2xvY2soZGVsdGFUb0ZyYW1lRW5kLCBmYWxzZSkgKyBcIiBtcyB0byB0aGUgbmV4dCBzZWdtZW50OyB1c2luZyBkdXJhdGlvbiBcIiArIHRvTXNGcm9tTXBlZ1RzQ2xvY2sobXA0U2FtcGxlRHVyYXRpb24sIGZhbHNlKSArIFwiIG1zIGZvciB0aGUgbGFzdCB2aWRlbyBmcmFtZS5cIik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1wNFNhbXBsZUR1cmF0aW9uID0gbGFzdEZyYW1lRHVyYXRpb247XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1wNFNhbXBsZUR1cmF0aW9uID0gbGFzdEZyYW1lRHVyYXRpb247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29tcG9zaXRpb25UaW1lT2Zmc2V0ID0gTWF0aC5yb3VuZChhdmNTYW1wbGUucHRzIC0gYXZjU2FtcGxlLmR0cyk7IC8vIGNvbnNvbGUubG9nKCdQVFMvRFRTL2luaXREVFMvbm9ybVBUUy9ub3JtRFRTL3JlbGF0aXZlIFBUUyA6ICR7YXZjU2FtcGxlLnB0c30vJHthdmNTYW1wbGUuZHRzfS8ke2luaXREVFN9LyR7cHRzbm9ybX0vJHtkdHNub3JtfS8keyhhdmNTYW1wbGUucHRzLzQyOTQ5NjcyOTYpLnRvRml4ZWQoMyl9Jyk7XG5cbiAgICAgIG91dHB1dFNhbXBsZXMucHVzaCh7XG4gICAgICAgIHNpemU6IG1wNFNhbXBsZUxlbmd0aCxcbiAgICAgICAgLy8gY29uc3RhbnQgZHVyYXRpb25cbiAgICAgICAgZHVyYXRpb246IG1wNFNhbXBsZUR1cmF0aW9uLFxuICAgICAgICBjdHM6IGNvbXBvc2l0aW9uVGltZU9mZnNldCxcbiAgICAgICAgZmxhZ3M6IHtcbiAgICAgICAgICBpc0xlYWRpbmc6IDAsXG4gICAgICAgICAgaXNEZXBlbmRlZE9uOiAwLFxuICAgICAgICAgIGhhc1JlZHVuZGFuY3k6IDAsXG4gICAgICAgICAgZGVncmFkUHJpbzogMCxcbiAgICAgICAgICBkZXBlbmRzT246IGF2Y1NhbXBsZS5rZXkgPyAyIDogMSxcbiAgICAgICAgICBpc05vblN5bmM6IGF2Y1NhbXBsZS5rZXkgPyAwIDogMVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IC8vIG5leHQgQVZDIHNhbXBsZSBEVFMgc2hvdWxkIGJlIGVxdWFsIHRvIGxhc3Qgc2FtcGxlIERUUyArIGxhc3Qgc2FtcGxlIGR1cmF0aW9uIChpbiBQRVMgdGltZXNjYWxlKVxuXG5cbiAgICB0aGlzLm5leHRBdmNEdHMgPSBsYXN0RFRTICsgbXA0U2FtcGxlRHVyYXRpb247XG4gICAgdmFyIGRyb3BwZWQgPSB0cmFjay5kcm9wcGVkO1xuICAgIHRyYWNrLm5iTmFsdSA9IDA7XG4gICAgdHJhY2suZHJvcHBlZCA9IDA7XG5cbiAgICBpZiAob3V0cHV0U2FtcGxlcy5sZW5ndGggJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ2Nocm9tZScpID4gLTEpIHtcbiAgICAgIHZhciBmbGFncyA9IG91dHB1dFNhbXBsZXNbMF0uZmxhZ3M7IC8vIGNocm9tZSB3b3JrYXJvdW5kLCBtYXJrIGZpcnN0IHNhbXBsZSBhcyBiZWluZyBhIFJhbmRvbSBBY2Nlc3MgUG9pbnQgdG8gYXZvaWQgc291cmNlYnVmZmVyIGFwcGVuZCBpc3N1ZVxuICAgICAgLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTIyOTQxMlxuXG4gICAgICBmbGFncy5kZXBlbmRzT24gPSAyO1xuICAgICAgZmxhZ3MuaXNOb25TeW5jID0gMDtcbiAgICB9XG5cbiAgICB0cmFjay5zYW1wbGVzID0gb3V0cHV0U2FtcGxlcztcbiAgICBtb29mID0gbXA0X2dlbmVyYXRvci5tb29mKHRyYWNrLnNlcXVlbmNlTnVtYmVyKyssIGZpcnN0RFRTLCB0cmFjayk7XG4gICAgdHJhY2suc2FtcGxlcyA9IFtdO1xuICAgIHZhciBkYXRhID0ge1xuICAgICAgZGF0YTE6IG1vb2YsXG4gICAgICBkYXRhMjogbWRhdCxcbiAgICAgIHN0YXJ0UFRTOiBtaW5QVFMgLyB0aW1lU2NhbGUsXG4gICAgICBlbmRQVFM6IChtYXhQVFMgKyBtcDRTYW1wbGVEdXJhdGlvbikgLyB0aW1lU2NhbGUsXG4gICAgICBzdGFydERUUzogZmlyc3REVFMgLyB0aW1lU2NhbGUsXG4gICAgICBlbmREVFM6IHRoaXMubmV4dEF2Y0R0cyAvIHRpbWVTY2FsZSxcbiAgICAgIHR5cGU6ICd2aWRlbycsXG4gICAgICBoYXNBdWRpbzogZmFsc2UsXG4gICAgICBoYXNWaWRlbzogdHJ1ZSxcbiAgICAgIG5iOiBvdXRwdXRTYW1wbGVzLmxlbmd0aCxcbiAgICAgIGRyb3BwZWQ6IGRyb3BwZWRcbiAgICB9O1xuICAgIHRoaXMub2JzZXJ2ZXIudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkZSQUdfUEFSU0lOR19EQVRBLCBkYXRhKTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICBfcHJvdG8ucmVtdXhBdWRpbyA9IGZ1bmN0aW9uIHJlbXV4QXVkaW8odHJhY2ssIHRpbWVPZmZzZXQsIGNvbnRpZ3VvdXMsIGFjY3VyYXRlVGltZU9mZnNldCkge1xuICAgIHZhciBpbnB1dFRpbWVTY2FsZSA9IHRyYWNrLmlucHV0VGltZVNjYWxlO1xuICAgIHZhciBtcDR0aW1lU2NhbGUgPSB0cmFjay50aW1lc2NhbGU7XG4gICAgdmFyIHNjYWxlRmFjdG9yID0gaW5wdXRUaW1lU2NhbGUgLyBtcDR0aW1lU2NhbGU7XG4gICAgdmFyIG1wNFNhbXBsZUR1cmF0aW9uID0gdHJhY2suaXNBQUMgPyAxMDI0IDogMTE1MjtcbiAgICB2YXIgaW5wdXRTYW1wbGVEdXJhdGlvbiA9IG1wNFNhbXBsZUR1cmF0aW9uICogc2NhbGVGYWN0b3I7XG4gICAgdmFyIGluaXRQVFMgPSB0aGlzLl9pbml0UFRTO1xuICAgIHZhciByYXdNUEVHID0gIXRyYWNrLmlzQUFDICYmIHRoaXMudHlwZVN1cHBvcnRlZC5tcGVnO1xuICAgIHZhciBtcDRTYW1wbGU7XG4gICAgdmFyIGZpbGxGcmFtZTtcbiAgICB2YXIgbWRhdDtcbiAgICB2YXIgbW9vZjtcbiAgICB2YXIgZmlyc3RQVFM7XG4gICAgdmFyIGxhc3RQVFM7XG4gICAgdmFyIG9mZnNldCA9IHJhd01QRUcgPyAwIDogODtcbiAgICB2YXIgaW5wdXRTYW1wbGVzID0gdHJhY2suc2FtcGxlcztcbiAgICB2YXIgb3V0cHV0U2FtcGxlcyA9IFtdO1xuICAgIHZhciBuZXh0QXVkaW9QdHMgPSB0aGlzLm5leHRBdWRpb1B0czsgLy8gZm9yIGF1ZGlvIHNhbXBsZXMsIGFsc28gY29uc2lkZXIgY29uc2VjdXRpdmUgZnJhZ21lbnRzIGFzIGJlaW5nIGNvbnRpZ3VvdXMgKGV2ZW4gaWYgYSBsZXZlbCBzd2l0Y2ggb2NjdXJzKSxcbiAgICAvLyBmb3Igc2FrZSBvZiBjbGFyaXR5OlxuICAgIC8vIGNvbnNlY3V0aXZlIGZyYWdtZW50cyBhcmUgZnJhZ3Mgd2l0aFxuICAgIC8vICAtIGxlc3MgdGhhbiAxMDBtcyBnYXBzIGJldHdlZW4gbmV3IHRpbWUgb2Zmc2V0IChpZiBhY2N1cmF0ZSkgYW5kIG5leHQgZXhwZWN0ZWQgUFRTIE9SXG4gICAgLy8gIC0gbGVzcyB0aGFuIDIwIGF1ZGlvIGZyYW1lcyBkaXN0YW5jZVxuICAgIC8vIGNvbnRpZ3VvdXMgZnJhZ21lbnRzIGFyZSBjb25zZWN1dGl2ZSBmcmFnbWVudHMgZnJvbSBzYW1lIHF1YWxpdHkgbGV2ZWwgKHNhbWUgbGV2ZWwsIG5ldyBTTiA9IG9sZCBTTiArIDEpXG4gICAgLy8gdGhpcyBoZWxwcyBlbnN1cmluZyBhdWRpbyBjb250aW51aXR5XG4gICAgLy8gYW5kIHRoaXMgYWxzbyBhdm9pZHMgYXVkaW8gZ2xpdGNoZXMvY3V0IHdoZW4gc3dpdGNoaW5nIHF1YWxpdHksIG9yIHJlcG9ydGluZyB3cm9uZyBkdXJhdGlvbiBvbiBmaXJzdCBhdWRpbyBmcmFtZVxuXG4gICAgY29udGlndW91cyB8PSBpbnB1dFNhbXBsZXMubGVuZ3RoICYmIG5leHRBdWRpb1B0cyAmJiAoYWNjdXJhdGVUaW1lT2Zmc2V0ICYmIE1hdGguYWJzKHRpbWVPZmZzZXQgLSBuZXh0QXVkaW9QdHMgLyBpbnB1dFRpbWVTY2FsZSkgPCAwLjEgfHwgTWF0aC5hYnMoaW5wdXRTYW1wbGVzWzBdLnB0cyAtIG5leHRBdWRpb1B0cyAtIGluaXRQVFMpIDwgMjAgKiBpbnB1dFNhbXBsZUR1cmF0aW9uKTsgLy8gY29tcHV0ZSBub3JtYWxpemVkIFBUU1xuXG4gICAgaW5wdXRTYW1wbGVzLmZvckVhY2goZnVuY3Rpb24gKHNhbXBsZSkge1xuICAgICAgc2FtcGxlLnB0cyA9IHNhbXBsZS5kdHMgPSBQVFNOb3JtYWxpemUoc2FtcGxlLnB0cyAtIGluaXRQVFMsIHRpbWVPZmZzZXQgKiBpbnB1dFRpbWVTY2FsZSk7XG4gICAgfSk7IC8vIGZpbHRlciBvdXQgc2FtcGxlIHdpdGggbmVnYXRpdmUgUFRTIHRoYXQgYXJlIG5vdCBwbGF5YWJsZSBhbnl3YXlcbiAgICAvLyBpZiB3ZSBkb24ndCByZW1vdmUgdGhlc2UgbmVnYXRpdmUgc2FtcGxlcywgdGhleSB3aWxsIHNoaWZ0IGFsbCBhdWRpbyBzYW1wbGVzIGZvcndhcmQuXG4gICAgLy8gbGVhZGluZyB0byBhdWRpbyBvdmVybGFwIGJldHdlZW4gY3VycmVudCAvIG5leHQgZnJhZ21lbnRcblxuICAgIGlucHV0U2FtcGxlcyA9IGlucHV0U2FtcGxlcy5maWx0ZXIoZnVuY3Rpb24gKHNhbXBsZSkge1xuICAgICAgcmV0dXJuIHNhbXBsZS5wdHMgPj0gMDtcbiAgICB9KTsgLy8gaW4gY2FzZSBhbGwgc2FtcGxlcyBoYXZlIG5lZ2F0aXZlIFBUUywgYW5kIGhhdmUgYmVlbiBmaWx0ZXJlZCBvdXQsIHJldHVybiBub3dcblxuICAgIGlmIChpbnB1dFNhbXBsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFjb250aWd1b3VzKSB7XG4gICAgICBpZiAoIWFjY3VyYXRlVGltZU9mZnNldCkge1xuICAgICAgICAvLyBpZiBmcmFnIGFyZSBtb3QgY29udGlndW91cyBhbmQgaWYgd2UgY2FudCB0cnVzdCB0aW1lIG9mZnNldCwgbGV0J3MgdXNlIGZpcnN0IHNhbXBsZSBQVFMgYXMgbmV4dCBhdWRpbyBQVFNcbiAgICAgICAgbmV4dEF1ZGlvUHRzID0gaW5wdXRTYW1wbGVzWzBdLnB0cztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGlmIHRpbWVPZmZzZXQgaXMgYWNjdXJhdGUsIGxldCdzIHVzZSBpdCBhcyBwcmVkaWN0ZWQgbmV4dCBhdWRpbyBQVFNcbiAgICAgICAgbmV4dEF1ZGlvUHRzID0gTWF0aC5tYXgoMCwgdGltZU9mZnNldCAqIGlucHV0VGltZVNjYWxlKTtcbiAgICAgIH1cbiAgICB9IC8vIElmIHRoZSBhdWRpbyB0cmFjayBpcyBtaXNzaW5nIHNhbXBsZXMsIHRoZSBmcmFtZXMgc2VlbSB0byBnZXQgXCJsZWZ0LXNoaWZ0ZWRcIiB3aXRoaW4gdGhlXG4gICAgLy8gcmVzdWx0aW5nIG1wNCBzZWdtZW50LCBjYXVzaW5nIHN5bmMgaXNzdWVzIGFuZCBsZWF2aW5nIGdhcHMgYXQgdGhlIGVuZCBvZiB0aGUgYXVkaW8gc2VnbWVudC5cbiAgICAvLyBJbiBhbiBlZmZvcnQgdG8gcHJldmVudCB0aGlzIGZyb20gaGFwcGVuaW5nLCB3ZSBpbmplY3QgZnJhbWVzIGhlcmUgd2hlcmUgdGhlcmUgYXJlIGdhcHMuXG4gICAgLy8gV2hlbiBwb3NzaWJsZSwgd2UgaW5qZWN0IGEgc2lsZW50IGZyYW1lOyB3aGVuIHRoYXQncyBub3QgcG9zc2libGUsIHdlIGR1cGxpY2F0ZSB0aGUgbGFzdFxuICAgIC8vIGZyYW1lLlxuXG5cbiAgICBpZiAodHJhY2suaXNBQUMpIHtcbiAgICAgIHZhciBtYXhBdWRpb0ZyYW1lc0RyaWZ0ID0gdGhpcy5jb25maWcubWF4QXVkaW9GcmFtZXNEcmlmdDtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIG5leHRQdHMgPSBuZXh0QXVkaW9QdHM7IGkgPCBpbnB1dFNhbXBsZXMubGVuZ3RoOykge1xuICAgICAgICAvLyBGaXJzdCwgbGV0J3Mgc2VlIGhvdyBmYXIgb2ZmIHRoaXMgZnJhbWUgaXMgZnJvbSB3aGVyZSB3ZSBleHBlY3QgaXQgdG8gYmVcbiAgICAgICAgdmFyIHNhbXBsZSA9IGlucHV0U2FtcGxlc1tpXTtcbiAgICAgICAgdmFyIHB0cyA9IHNhbXBsZS5wdHM7XG4gICAgICAgIHZhciBkZWx0YSA9IHB0cyAtIG5leHRQdHM7IC8vIElmIHdlJ3JlIG92ZXJsYXBwaW5nIGJ5IG1vcmUgdGhhbiBhIGR1cmF0aW9uLCBkcm9wIHRoaXMgc2FtcGxlXG5cbiAgICAgICAgaWYgKGRlbHRhIDw9IC1tYXhBdWRpb0ZyYW1lc0RyaWZ0ICogaW5wdXRTYW1wbGVEdXJhdGlvbikge1xuICAgICAgICAgIGlmIChjb250aWd1b3VzIHx8IGkgPiAwKSB7XG4gICAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ud2FybihcIkRyb3BwaW5nIDEgYXVkaW8gZnJhbWUgQCBcIiArIHRvTXNGcm9tTXBlZ1RzQ2xvY2sobmV4dFB0cywgdHJ1ZSkgLyAxMDAwICsgXCJzIGR1ZSB0byBcIiArIHRvTXNGcm9tTXBlZ1RzQ2xvY2soZGVsdGEsIHRydWUpICsgXCIgbXMgb3ZlcmxhcC5cIik7XG4gICAgICAgICAgICBpbnB1dFNhbXBsZXMuc3BsaWNlKGksIDEpOyAvLyBEb24ndCB0b3VjaCBuZXh0UHRzTm9ybSBvciBpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFdoZW4gY2hhbmdpbmcgcXVhbGl0aWVzIHdlIGNhbid0IHRydXN0IHRoYXQgYXVkaW8gaGFzIGJlZW4gYXBwZW5kZWQgdXAgdG8gbmV4dEF1ZGlvUHRzXG4gICAgICAgICAgICAvLyBXYXJuIGFib3V0IHRoZSBvdmVybGFwIGJ1dCBkbyBub3QgZHJvcCBzYW1wbGVzIGFzIHRoYXQgY2FuIGludHJvZHVjZSBidWZmZXIgZ2Fwc1xuICAgICAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLndhcm4oXCJBdWRpbyBmcmFtZSBAIFwiICsgdG9Nc0Zyb21NcGVnVHNDbG9jayhwdHMsIHRydWUpIC8gMTAwMCArIFwicyBvdmVybGFwcyBuZXh0QXVkaW9QdHMgYnkgXCIgKyB0b01zRnJvbU1wZWdUc0Nsb2NrKGRlbHRhLCB0cnVlKSArIFwiIG1zLlwiKTtcbiAgICAgICAgICAgIG5leHRQdHMgPSBwdHMgKyBpbnB1dFNhbXBsZUR1cmF0aW9uO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGJyYWNlLXN0eWxlXG4gICAgICAgIC8vIEluc2VydCBtaXNzaW5nIGZyYW1lcyBpZjpcbiAgICAgICAgLy8gMTogV2UncmUgbW9yZSB0aGFuIG1heEF1ZGlvRnJhbWVzRHJpZnQgZnJhbWUgYXdheVxuICAgICAgICAvLyAyOiBOb3QgbW9yZSB0aGFuIE1BWF9TSUxFTlRfRlJBTUVfRFVSQVRJT04gYXdheVxuICAgICAgICAvLyAzOiBjdXJyZW50VGltZSAoYWthIG5leHRQdHNOb3JtKSBpcyBub3QgMFxuICAgICAgICBlbHNlIGlmIChkZWx0YSA+PSBtYXhBdWRpb0ZyYW1lc0RyaWZ0ICogaW5wdXRTYW1wbGVEdXJhdGlvbiAmJiBkZWx0YSA8IE1BWF9TSUxFTlRfRlJBTUVfRFVSQVRJT05fOTBLSFogJiYgbmV4dFB0cykge1xuICAgICAgICAgICAgdmFyIG1pc3NpbmcgPSBNYXRoLnJvdW5kKGRlbHRhIC8gaW5wdXRTYW1wbGVEdXJhdGlvbik7XG4gICAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ud2FybihcIkluamVjdGluZyBcIiArIG1pc3NpbmcgKyBcIiBhdWRpbyBmcmFtZXMgQCBcIiArIHRvTXNGcm9tTXBlZ1RzQ2xvY2sobmV4dFB0cywgdHJ1ZSkgLyAxMDAwICsgXCJzIGR1ZSB0byBcIiArIHRvTXNGcm9tTXBlZ1RzQ2xvY2soZGVsdGEsIHRydWUpICsgXCIgbXMgZ2FwLlwiKTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtaXNzaW5nOyBqKyspIHtcbiAgICAgICAgICAgICAgdmFyIG5ld1N0YW1wID0gTWF0aC5tYXgobmV4dFB0cywgMCk7XG4gICAgICAgICAgICAgIGZpbGxGcmFtZSA9IGFhY19oZWxwZXIuZ2V0U2lsZW50RnJhbWUodHJhY2subWFuaWZlc3RDb2RlYyB8fCB0cmFjay5jb2RlYywgdHJhY2suY2hhbm5lbENvdW50KTtcblxuICAgICAgICAgICAgICBpZiAoIWZpbGxGcmFtZSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coJ1VuYWJsZSB0byBnZXQgc2lsZW50IGZyYW1lIGZvciBnaXZlbiBhdWRpbyBjb2RlYzsgZHVwbGljYXRpbmcgbGFzdCBmcmFtZSBpbnN0ZWFkLicpO1xuICAgICAgICAgICAgICAgIGZpbGxGcmFtZSA9IHNhbXBsZS51bml0LnN1YmFycmF5KCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpbnB1dFNhbXBsZXMuc3BsaWNlKGksIDAsIHtcbiAgICAgICAgICAgICAgICB1bml0OiBmaWxsRnJhbWUsXG4gICAgICAgICAgICAgICAgcHRzOiBuZXdTdGFtcCxcbiAgICAgICAgICAgICAgICBkdHM6IG5ld1N0YW1wXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBuZXh0UHRzICs9IGlucHV0U2FtcGxlRHVyYXRpb247XG4gICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIH0gLy8gQWRqdXN0IHNhbXBsZSB0byBuZXh0IGV4cGVjdGVkIHB0c1xuXG5cbiAgICAgICAgICAgIHNhbXBsZS5wdHMgPSBzYW1wbGUuZHRzID0gbmV4dFB0cztcbiAgICAgICAgICAgIG5leHRQdHMgKz0gaW5wdXRTYW1wbGVEdXJhdGlvbjtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBqdXN0IGFkanVzdCBwdHNcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhkZWx0YSkgPiAwLjEgKiBpbnB1dFNhbXBsZUR1cmF0aW9uKSB7Ly8gbG9nZ2VyLmxvZyhgSW52YWxpZCBmcmFtZSBkZWx0YSAke01hdGgucm91bmQoZGVsdGEgKyBpbnB1dFNhbXBsZUR1cmF0aW9uKX0gYXQgUFRTICR7TWF0aC5yb3VuZChwdHMgLyA5MCl9IChzaG91bGQgYmUgJHtNYXRoLnJvdW5kKGlucHV0U2FtcGxlRHVyYXRpb24pfSkuYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNhbXBsZS5wdHMgPSBzYW1wbGUuZHRzID0gbmV4dFB0cztcbiAgICAgICAgICAgIG5leHRQdHMgKz0gaW5wdXRTYW1wbGVEdXJhdGlvbjtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyBjb21wdXRlIG1kYXQgc2l6ZSwgYXMgd2UgZXZlbnR1YWxseSBmaWx0ZXJlZC9hZGRlZCBzb21lIHNhbXBsZXNcblxuXG4gICAgdmFyIG5iU2FtcGxlcyA9IGlucHV0U2FtcGxlcy5sZW5ndGg7XG4gICAgdmFyIG1kYXRTaXplID0gMDtcblxuICAgIHdoaWxlIChuYlNhbXBsZXMtLSkge1xuICAgICAgbWRhdFNpemUgKz0gaW5wdXRTYW1wbGVzW25iU2FtcGxlc10udW5pdC5ieXRlTGVuZ3RoO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9qMiA9IDAsIF9uYlNhbXBsZXMgPSBpbnB1dFNhbXBsZXMubGVuZ3RoOyBfajIgPCBfbmJTYW1wbGVzOyBfajIrKykge1xuICAgICAgdmFyIGF1ZGlvU2FtcGxlID0gaW5wdXRTYW1wbGVzW19qMl07XG4gICAgICB2YXIgdW5pdCA9IGF1ZGlvU2FtcGxlLnVuaXQ7XG4gICAgICB2YXIgX3B0cyA9IGF1ZGlvU2FtcGxlLnB0czsgLy8gbG9nZ2VyLmxvZyhgQXVkaW8vUFRTOiR7dG9Nc0Zyb21NcGVnVHNDbG9jayhwdHMsIHRydWUpfWApO1xuICAgICAgLy8gaWYgbm90IGZpcnN0IHNhbXBsZVxuXG4gICAgICBpZiAobGFzdFBUUyAhPT0gdW5kZWZpbmVkICYmIG1wNFNhbXBsZSkge1xuICAgICAgICBtcDRTYW1wbGUuZHVyYXRpb24gPSBNYXRoLnJvdW5kKChfcHRzIC0gbGFzdFBUUykgLyBzY2FsZUZhY3Rvcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgX2RlbHRhID0gX3B0cyAtIG5leHRBdWRpb1B0cztcblxuICAgICAgICB2YXIgbnVtTWlzc2luZ0ZyYW1lcyA9IDA7IC8vIGlmIGZyYWdtZW50IGFyZSBjb250aWd1b3VzLCBkZXRlY3QgaG9sZS9vdmVybGFwcGluZyBiZXR3ZWVuIGZyYWdtZW50c1xuICAgICAgICAvLyBjb250aWd1b3VzIGZyYWdtZW50cyBhcmUgY29uc2VjdXRpdmUgZnJhZ21lbnRzIGZyb20gc2FtZSBxdWFsaXR5IGxldmVsIChzYW1lIGxldmVsLCBuZXcgU04gPSBvbGQgU04gKyAxKVxuXG4gICAgICAgIGlmIChjb250aWd1b3VzICYmIHRyYWNrLmlzQUFDKSB7XG4gICAgICAgICAgLy8gbG9nIGRlbHRhXG4gICAgICAgICAgaWYgKF9kZWx0YSkge1xuICAgICAgICAgICAgaWYgKF9kZWx0YSA+IDAgJiYgX2RlbHRhIDwgTUFYX1NJTEVOVF9GUkFNRV9EVVJBVElPTl85MEtIWikge1xuICAgICAgICAgICAgICAvLyBROiB3aHkgZG8gd2UgaGF2ZSB0byByb3VuZCBoZXJlLCBzaG91bGRuJ3QgdGhpcyBhbHdheXMgcmVzdWx0IGluIGFuIGludGVnZXIgaWYgdGltZXN0YW1wcyBhcmUgY29ycmVjdCxcbiAgICAgICAgICAgICAgLy8gYW5kIGlmIG5vdCwgc2hvdWxkbid0IHdlIGFjdHVhbGx5IE1hdGguY2VpbCgpIGluc3RlYWQ/XG4gICAgICAgICAgICAgIG51bU1pc3NpbmdGcmFtZXMgPSBNYXRoLnJvdW5kKChfcHRzIC0gbmV4dEF1ZGlvUHRzKSAvIGlucHV0U2FtcGxlRHVyYXRpb24pO1xuICAgICAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKHRvTXNGcm9tTXBlZ1RzQ2xvY2soX2RlbHRhLCB0cnVlKSArIFwiIG1zIGhvbGUgYmV0d2VlbiBBQUMgc2FtcGxlcyBkZXRlY3RlZCxmaWxsaW5nIGl0XCIpO1xuXG4gICAgICAgICAgICAgIGlmIChudW1NaXNzaW5nRnJhbWVzID4gMCkge1xuICAgICAgICAgICAgICAgIGZpbGxGcmFtZSA9IGFhY19oZWxwZXIuZ2V0U2lsZW50RnJhbWUodHJhY2subWFuaWZlc3RDb2RlYyB8fCB0cmFjay5jb2RlYywgdHJhY2suY2hhbm5lbENvdW50KTtcblxuICAgICAgICAgICAgICAgIGlmICghZmlsbEZyYW1lKSB7XG4gICAgICAgICAgICAgICAgICBmaWxsRnJhbWUgPSB1bml0LnN1YmFycmF5KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbWRhdFNpemUgKz0gbnVtTWlzc2luZ0ZyYW1lcyAqIGZpbGxGcmFtZS5sZW5ndGg7XG4gICAgICAgICAgICAgIH0gLy8gaWYgd2UgaGF2ZSBmcmFtZSBvdmVybGFwLCBvdmVybGFwcGluZyBmb3IgbW9yZSB0aGFuIGhhbGYgYSBmcmFtZSBkdXJhaW9uXG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoX2RlbHRhIDwgLTEyKSB7XG4gICAgICAgICAgICAgIC8vIGRyb3Agb3ZlcmxhcHBpbmcgYXVkaW8gZnJhbWVzLi4uIGJyb3dzZXIgd2lsbCBkZWFsIHdpdGggaXRcbiAgICAgICAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyhcImRyb3Agb3ZlcmxhcHBpbmcgQUFDIHNhbXBsZSwgZXhwZWN0ZWQvcGFyc2VkL2RlbHRhOiBcIiArIHRvTXNGcm9tTXBlZ1RzQ2xvY2sobmV4dEF1ZGlvUHRzLCB0cnVlKSArIFwiIG1zIC8gXCIgKyB0b01zRnJvbU1wZWdUc0Nsb2NrKF9wdHMsIHRydWUpICsgXCIgbXMgLyBcIiArIHRvTXNGcm9tTXBlZ1RzQ2xvY2soLV9kZWx0YSwgdHJ1ZSkgKyBcIiBtc1wiKTtcbiAgICAgICAgICAgICAgbWRhdFNpemUgLT0gdW5pdC5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH0gLy8gc2V0IFBUUy9EVFMgdG8gZXhwZWN0ZWQgUFRTL0RUU1xuXG5cbiAgICAgICAgICAgIF9wdHMgPSBuZXh0QXVkaW9QdHM7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIHJlbWVtYmVyIGZpcnN0IFBUUyBvZiBvdXIgYXVkaW9TYW1wbGVzXG5cblxuICAgICAgICBmaXJzdFBUUyA9IF9wdHM7XG5cbiAgICAgICAgaWYgKG1kYXRTaXplID4gMCkge1xuICAgICAgICAgIG1kYXRTaXplICs9IG9mZnNldDtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBtZGF0ID0gbmV3IFVpbnQ4QXJyYXkobWRhdFNpemUpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZlci50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uRVJST1IsIHtcbiAgICAgICAgICAgICAgdHlwZTogZXJyb3JzW1wiRXJyb3JUeXBlc1wiXS5NVVhfRVJST1IsXG4gICAgICAgICAgICAgIGRldGFpbHM6IGVycm9yc1tcIkVycm9yRGV0YWlsc1wiXS5SRU1VWF9BTExPQ19FUlJPUixcbiAgICAgICAgICAgICAgZmF0YWw6IGZhbHNlLFxuICAgICAgICAgICAgICBieXRlczogbWRhdFNpemUsXG4gICAgICAgICAgICAgIHJlYXNvbjogXCJmYWlsIGFsbG9jYXRpbmcgYXVkaW8gbWRhdCBcIiArIG1kYXRTaXplXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIXJhd01QRUcpIHtcbiAgICAgICAgICAgIHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KG1kYXQuYnVmZmVyKTtcbiAgICAgICAgICAgIHZpZXcuc2V0VWludDMyKDAsIG1kYXRTaXplKTtcbiAgICAgICAgICAgIG1kYXQuc2V0KG1wNF9nZW5lcmF0b3IudHlwZXMubWRhdCwgNCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIG5vIGF1ZGlvIHNhbXBsZXNcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBfaTUgPSAwOyBfaTUgPCBudW1NaXNzaW5nRnJhbWVzOyBfaTUrKykge1xuICAgICAgICAgIGZpbGxGcmFtZSA9IGFhY19oZWxwZXIuZ2V0U2lsZW50RnJhbWUodHJhY2subWFuaWZlc3RDb2RlYyB8fCB0cmFjay5jb2RlYywgdHJhY2suY2hhbm5lbENvdW50KTtcblxuICAgICAgICAgIGlmICghZmlsbEZyYW1lKSB7XG4gICAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKCdVbmFibGUgdG8gZ2V0IHNpbGVudCBmcmFtZSBmb3IgZ2l2ZW4gYXVkaW8gY29kZWM7IGR1cGxpY2F0aW5nIHRoaXMgZnJhbWUgaW5zdGVhZC4nKTtcbiAgICAgICAgICAgIGZpbGxGcmFtZSA9IHVuaXQuc3ViYXJyYXkoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtZGF0LnNldChmaWxsRnJhbWUsIG9mZnNldCk7XG4gICAgICAgICAgb2Zmc2V0ICs9IGZpbGxGcmFtZS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIG1wNFNhbXBsZSA9IHtcbiAgICAgICAgICAgIHNpemU6IGZpbGxGcmFtZS5ieXRlTGVuZ3RoLFxuICAgICAgICAgICAgY3RzOiAwLFxuICAgICAgICAgICAgZHVyYXRpb246IDEwMjQsXG4gICAgICAgICAgICBmbGFnczoge1xuICAgICAgICAgICAgICBpc0xlYWRpbmc6IDAsXG4gICAgICAgICAgICAgIGlzRGVwZW5kZWRPbjogMCxcbiAgICAgICAgICAgICAgaGFzUmVkdW5kYW5jeTogMCxcbiAgICAgICAgICAgICAgZGVncmFkUHJpbzogMCxcbiAgICAgICAgICAgICAgZGVwZW5kc09uOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBvdXRwdXRTYW1wbGVzLnB1c2gobXA0U2FtcGxlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZGF0LnNldCh1bml0LCBvZmZzZXQpO1xuICAgICAgdmFyIHVuaXRMZW4gPSB1bml0LmJ5dGVMZW5ndGg7XG4gICAgICBvZmZzZXQgKz0gdW5pdExlbjsgLy8gY29uc29sZS5sb2coJ1BUUy9EVFMvaW5pdERUUy9ub3JtUFRTL25vcm1EVFMvcmVsYXRpdmUgUFRTIDogJHthdWRpb1NhbXBsZS5wdHN9LyR7YXVkaW9TYW1wbGUuZHRzfS8ke2luaXREVFN9LyR7cHRzbm9ybX0vJHtkdHNub3JtfS8keyhhdWRpb1NhbXBsZS5wdHMvNDI5NDk2NzI5NikudG9GaXhlZCgzKX0nKTtcblxuICAgICAgbXA0U2FtcGxlID0ge1xuICAgICAgICBzaXplOiB1bml0TGVuLFxuICAgICAgICBjdHM6IDAsXG4gICAgICAgIGR1cmF0aW9uOiAwLFxuICAgICAgICBmbGFnczoge1xuICAgICAgICAgIGlzTGVhZGluZzogMCxcbiAgICAgICAgICBpc0RlcGVuZGVkT246IDAsXG4gICAgICAgICAgaGFzUmVkdW5kYW5jeTogMCxcbiAgICAgICAgICBkZWdyYWRQcmlvOiAwLFxuICAgICAgICAgIGRlcGVuZHNPbjogMVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgb3V0cHV0U2FtcGxlcy5wdXNoKG1wNFNhbXBsZSk7XG4gICAgICBsYXN0UFRTID0gX3B0cztcbiAgICB9XG5cbiAgICB2YXIgbGFzdFNhbXBsZUR1cmF0aW9uID0gMDtcbiAgICBuYlNhbXBsZXMgPSBvdXRwdXRTYW1wbGVzLmxlbmd0aDsgLy8gc2V0IGxhc3Qgc2FtcGxlIGR1cmF0aW9uIGFzIGJlaW5nIGlkZW50aWNhbCB0byBwcmV2aW91cyBzYW1wbGVcblxuICAgIGlmIChuYlNhbXBsZXMgPj0gMikge1xuICAgICAgbGFzdFNhbXBsZUR1cmF0aW9uID0gb3V0cHV0U2FtcGxlc1tuYlNhbXBsZXMgLSAyXS5kdXJhdGlvbjtcbiAgICAgIG1wNFNhbXBsZS5kdXJhdGlvbiA9IGxhc3RTYW1wbGVEdXJhdGlvbjtcbiAgICB9XG5cbiAgICBpZiAobmJTYW1wbGVzKSB7XG4gICAgICAvLyBuZXh0IGF1ZGlvIHNhbXBsZSBQVFMgc2hvdWxkIGJlIGVxdWFsIHRvIGxhc3Qgc2FtcGxlIFBUUyArIGR1cmF0aW9uXG4gICAgICB0aGlzLm5leHRBdWRpb1B0cyA9IG5leHRBdWRpb1B0cyA9IGxhc3RQVFMgKyBzY2FsZUZhY3RvciAqIGxhc3RTYW1wbGVEdXJhdGlvbjsgLy8gbG9nZ2VyLmxvZygnQXVkaW8vUFRTL1BUU2VuZDonICsgYXVkaW9TYW1wbGUucHRzLnRvRml4ZWQoMCkgKyAnLycgKyB0aGlzLm5leHRBYWNEdHMudG9GaXhlZCgwKSk7XG5cbiAgICAgIHRyYWNrLnNhbXBsZXMgPSBvdXRwdXRTYW1wbGVzO1xuXG4gICAgICBpZiAocmF3TVBFRykge1xuICAgICAgICBtb29mID0gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1vb2YgPSBtcDRfZ2VuZXJhdG9yLm1vb2YodHJhY2suc2VxdWVuY2VOdW1iZXIrKywgZmlyc3RQVFMgLyBzY2FsZUZhY3RvciwgdHJhY2spO1xuICAgICAgfVxuXG4gICAgICB0cmFjay5zYW1wbGVzID0gW107XG4gICAgICB2YXIgc3RhcnQgPSBmaXJzdFBUUyAvIGlucHV0VGltZVNjYWxlO1xuICAgICAgdmFyIGVuZCA9IG5leHRBdWRpb1B0cyAvIGlucHV0VGltZVNjYWxlO1xuICAgICAgdmFyIGF1ZGlvRGF0YSA9IHtcbiAgICAgICAgZGF0YTE6IG1vb2YsXG4gICAgICAgIGRhdGEyOiBtZGF0LFxuICAgICAgICBzdGFydFBUUzogc3RhcnQsXG4gICAgICAgIGVuZFBUUzogZW5kLFxuICAgICAgICBzdGFydERUUzogc3RhcnQsXG4gICAgICAgIGVuZERUUzogZW5kLFxuICAgICAgICB0eXBlOiAnYXVkaW8nLFxuICAgICAgICBoYXNBdWRpbzogdHJ1ZSxcbiAgICAgICAgaGFzVmlkZW86IGZhbHNlLFxuICAgICAgICBuYjogbmJTYW1wbGVzXG4gICAgICB9O1xuICAgICAgdGhpcy5vYnNlcnZlci50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uRlJBR19QQVJTSU5HX0RBVEEsIGF1ZGlvRGF0YSk7XG4gICAgICByZXR1cm4gYXVkaW9EYXRhO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIF9wcm90by5yZW11eEVtcHR5QXVkaW8gPSBmdW5jdGlvbiByZW11eEVtcHR5QXVkaW8odHJhY2ssIHRpbWVPZmZzZXQsIGNvbnRpZ3VvdXMsIHZpZGVvRGF0YSkge1xuICAgIHZhciBpbnB1dFRpbWVTY2FsZSA9IHRyYWNrLmlucHV0VGltZVNjYWxlO1xuICAgIHZhciBtcDR0aW1lU2NhbGUgPSB0cmFjay5zYW1wbGVyYXRlID8gdHJhY2suc2FtcGxlcmF0ZSA6IGlucHV0VGltZVNjYWxlO1xuICAgIHZhciBzY2FsZUZhY3RvciA9IGlucHV0VGltZVNjYWxlIC8gbXA0dGltZVNjYWxlO1xuICAgIHZhciBuZXh0QXVkaW9QdHMgPSB0aGlzLm5leHRBdWRpb1B0czsgLy8gc3luYyB3aXRoIHZpZGVvJ3MgdGltZXN0YW1wXG5cbiAgICB2YXIgc3RhcnREVFMgPSAobmV4dEF1ZGlvUHRzICE9PSB1bmRlZmluZWQgPyBuZXh0QXVkaW9QdHMgOiB2aWRlb0RhdGEuc3RhcnREVFMgKiBpbnB1dFRpbWVTY2FsZSkgKyB0aGlzLl9pbml0RFRTO1xuICAgIHZhciBlbmREVFMgPSB2aWRlb0RhdGEuZW5kRFRTICogaW5wdXRUaW1lU2NhbGUgKyB0aGlzLl9pbml0RFRTOyAvLyBvbmUgc2FtcGxlJ3MgZHVyYXRpb24gdmFsdWVcblxuICAgIHZhciBzYW1wbGVEdXJhdGlvbiA9IDEwMjQ7XG4gICAgdmFyIGZyYW1lRHVyYXRpb24gPSBzY2FsZUZhY3RvciAqIHNhbXBsZUR1cmF0aW9uOyAvLyBzYW1wbGVzIGNvdW50IG9mIHRoaXMgc2VnbWVudCdzIGR1cmF0aW9uXG5cbiAgICB2YXIgbmJTYW1wbGVzID0gTWF0aC5jZWlsKChlbmREVFMgLSBzdGFydERUUykgLyBmcmFtZUR1cmF0aW9uKTsgLy8gc2lsZW50IGZyYW1lXG5cbiAgICB2YXIgc2lsZW50RnJhbWUgPSBhYWNfaGVscGVyLmdldFNpbGVudEZyYW1lKHRyYWNrLm1hbmlmZXN0Q29kZWMgfHwgdHJhY2suY29kZWMsIHRyYWNrLmNoYW5uZWxDb3VudCk7XG4gICAgbG9nZ2VyW1wibG9nZ2VyXCJdLndhcm4oJ3JlbXV4IGVtcHR5IEF1ZGlvJyk7IC8vIENhbid0IHJlbXV4IGlmIHdlIGNhbid0IGdlbmVyYXRlIGEgc2lsZW50IGZyYW1lLi4uXG5cbiAgICBpZiAoIXNpbGVudEZyYW1lKSB7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0udHJhY2UoJ1VuYWJsZSB0byByZW11eEVtcHR5QXVkaW8gc2luY2Ugd2Ugd2VyZSB1bmFibGUgdG8gZ2V0IGEgc2lsZW50IGZyYW1lIGZvciBnaXZlbiBhdWRpbyBjb2RlYyEnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc2FtcGxlcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuYlNhbXBsZXM7IGkrKykge1xuICAgICAgdmFyIHN0YW1wID0gc3RhcnREVFMgKyBpICogZnJhbWVEdXJhdGlvbjtcbiAgICAgIHNhbXBsZXMucHVzaCh7XG4gICAgICAgIHVuaXQ6IHNpbGVudEZyYW1lLFxuICAgICAgICBwdHM6IHN0YW1wLFxuICAgICAgICBkdHM6IHN0YW1wXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0cmFjay5zYW1wbGVzID0gc2FtcGxlcztcbiAgICB0aGlzLnJlbXV4QXVkaW8odHJhY2ssIHRpbWVPZmZzZXQsIGNvbnRpZ3VvdXMpO1xuICB9O1xuXG4gIF9wcm90by5yZW11eElEMyA9IGZ1bmN0aW9uIHJlbXV4SUQzKHRyYWNrLCB0aW1lT2Zmc2V0KSB7XG4gICAgdmFyIGxlbmd0aCA9IHRyYWNrLnNhbXBsZXMubGVuZ3RoO1xuXG4gICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaW5wdXRUaW1lU2NhbGUgPSB0cmFjay5pbnB1dFRpbWVTY2FsZTtcbiAgICB2YXIgaW5pdFBUUyA9IHRoaXMuX2luaXRQVFM7XG4gICAgdmFyIGluaXREVFMgPSB0aGlzLl9pbml0RFRTOyAvLyBjb25zdW1lIHNhbXBsZXNcblxuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBzYW1wbGUgPSB0cmFjay5zYW1wbGVzW2luZGV4XTsgLy8gc2V0dGluZyBpZDMgcHRzLCBkdHMgdG8gcmVsYXRpdmUgdGltZVxuICAgICAgLy8gdXNpbmcgdGhpcy5faW5pdFBUUyBhbmQgdGhpcy5faW5pdERUUyB0byBjYWxjdWxhdGUgcmVsYXRpdmUgdGltZVxuXG4gICAgICBzYW1wbGUucHRzID0gUFRTTm9ybWFsaXplKHNhbXBsZS5wdHMgLSBpbml0UFRTLCB0aW1lT2Zmc2V0ICogaW5wdXRUaW1lU2NhbGUpIC8gaW5wdXRUaW1lU2NhbGU7XG4gICAgICBzYW1wbGUuZHRzID0gUFRTTm9ybWFsaXplKHNhbXBsZS5kdHMgLSBpbml0RFRTLCB0aW1lT2Zmc2V0ICogaW5wdXRUaW1lU2NhbGUpIC8gaW5wdXRUaW1lU2NhbGU7XG4gICAgfVxuXG4gICAgdGhpcy5vYnNlcnZlci50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uRlJBR19QQVJTSU5HX01FVEFEQVRBLCB7XG4gICAgICBzYW1wbGVzOiB0cmFjay5zYW1wbGVzXG4gICAgfSk7XG4gICAgdHJhY2suc2FtcGxlcyA9IFtdO1xuICB9O1xuXG4gIF9wcm90by5yZW11eFRleHQgPSBmdW5jdGlvbiByZW11eFRleHQodHJhY2ssIHRpbWVPZmZzZXQpIHtcbiAgICB2YXIgbGVuZ3RoID0gdHJhY2suc2FtcGxlcy5sZW5ndGg7XG4gICAgdmFyIGlucHV0VGltZVNjYWxlID0gdHJhY2suaW5wdXRUaW1lU2NhbGU7XG4gICAgdmFyIGluaXRQVFMgPSB0aGlzLl9pbml0UFRTOyAvLyBjb25zdW1lIHNhbXBsZXNcblxuICAgIGlmIChsZW5ndGgpIHtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgdmFyIHNhbXBsZSA9IHRyYWNrLnNhbXBsZXNbaW5kZXhdOyAvLyBzZXR0aW5nIHRleHQgcHRzLCBkdHMgdG8gcmVsYXRpdmUgdGltZVxuICAgICAgICAvLyB1c2luZyB0aGlzLl9pbml0UFRTIGFuZCB0aGlzLl9pbml0RFRTIHRvIGNhbGN1bGF0ZSByZWxhdGl2ZSB0aW1lXG5cbiAgICAgICAgc2FtcGxlLnB0cyA9IFBUU05vcm1hbGl6ZShzYW1wbGUucHRzIC0gaW5pdFBUUywgdGltZU9mZnNldCAqIGlucHV0VGltZVNjYWxlKSAvIGlucHV0VGltZVNjYWxlO1xuICAgICAgfVxuXG4gICAgICB0cmFjay5zYW1wbGVzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEucHRzIC0gYi5wdHM7XG4gICAgICB9KTtcbiAgICAgIHRoaXMub2JzZXJ2ZXIudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkZSQUdfUEFSU0lOR19VU0VSREFUQSwge1xuICAgICAgICBzYW1wbGVzOiB0cmFjay5zYW1wbGVzXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0cmFjay5zYW1wbGVzID0gW107XG4gIH07XG5cbiAgcmV0dXJuIE1QNFJlbXV4ZXI7XG59KCk7XG5cbmZ1bmN0aW9uIFBUU05vcm1hbGl6ZSh2YWx1ZSwgcmVmZXJlbmNlKSB7XG4gIHZhciBvZmZzZXQ7XG5cbiAgaWYgKHJlZmVyZW5jZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgaWYgKHJlZmVyZW5jZSA8IHZhbHVlKSB7XG4gICAgLy8gLSAyXjMzXG4gICAgb2Zmc2V0ID0gLTg1ODk5MzQ1OTI7XG4gIH0gZWxzZSB7XG4gICAgLy8gKyAyXjMzXG4gICAgb2Zmc2V0ID0gODU4OTkzNDU5MjtcbiAgfVxuICAvKiBQVFMgaXMgMzNiaXQgKGZyb20gMCB0byAyXjMzIC0xKVxuICAgIGlmIGRpZmYgYmV0d2VlbiB2YWx1ZSBhbmQgcmVmZXJlbmNlIGlzIGJpZ2dlciB0aGFuIGhhbGYgb2YgdGhlIGFtcGxpdHVkZSAoMl4zMikgdGhlbiBpdCBtZWFucyB0aGF0XG4gICAgUFRTIGxvb3Bpbmcgb2NjdXJlZC4gZmlsbCB0aGUgZ2FwICovXG5cblxuICB3aGlsZSAoTWF0aC5hYnModmFsdWUgLSByZWZlcmVuY2UpID4gNDI5NDk2NzI5Nikge1xuICAgIHZhbHVlICs9IG9mZnNldDtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgbXA0X3JlbXV4ZXIgPSAobXA0X3JlbXV4ZXJfTVA0UmVtdXhlcik7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9yZW11eC9wYXNzdGhyb3VnaC1yZW11eGVyLmpzXG4vKipcbiAqIHBhc3N0aHJvdWdoIHJlbXV4ZXJcbiovXG5cblxudmFyIHBhc3N0aHJvdWdoX3JlbXV4ZXJfUGFzc1Rocm91Z2hSZW11eGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUGFzc1Rocm91Z2hSZW11eGVyKG9ic2VydmVyKSB7XG4gICAgdGhpcy5vYnNlcnZlciA9IG9ic2VydmVyO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFBhc3NUaHJvdWdoUmVtdXhlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge307XG5cbiAgX3Byb3RvLnJlc2V0VGltZVN0YW1wID0gZnVuY3Rpb24gcmVzZXRUaW1lU3RhbXAoKSB7fTtcblxuICBfcHJvdG8ucmVzZXRJbml0U2VnbWVudCA9IGZ1bmN0aW9uIHJlc2V0SW5pdFNlZ21lbnQoKSB7fTtcblxuICBfcHJvdG8ucmVtdXggPSBmdW5jdGlvbiByZW11eChhdWRpb1RyYWNrLCB2aWRlb1RyYWNrLCBpZDNUcmFjaywgdGV4dFRyYWNrLCB0aW1lT2Zmc2V0LCBjb250aWd1b3VzLCBhY2N1cmF0ZVRpbWVPZmZzZXQsIHJhd0RhdGEpIHtcbiAgICB2YXIgb2JzZXJ2ZXIgPSB0aGlzLm9ic2VydmVyO1xuICAgIHZhciBzdHJlYW1UeXBlID0gJyc7XG5cbiAgICBpZiAoYXVkaW9UcmFjaykge1xuICAgICAgc3RyZWFtVHlwZSArPSAnYXVkaW8nO1xuICAgIH1cblxuICAgIGlmICh2aWRlb1RyYWNrKSB7XG4gICAgICBzdHJlYW1UeXBlICs9ICd2aWRlbyc7XG4gICAgfVxuXG4gICAgb2JzZXJ2ZXIudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkZSQUdfUEFSU0lOR19EQVRBLCB7XG4gICAgICBkYXRhMTogcmF3RGF0YSxcbiAgICAgIHN0YXJ0UFRTOiB0aW1lT2Zmc2V0LFxuICAgICAgc3RhcnREVFM6IHRpbWVPZmZzZXQsXG4gICAgICB0eXBlOiBzdHJlYW1UeXBlLFxuICAgICAgaGFzQXVkaW86ICEhYXVkaW9UcmFjayxcbiAgICAgIGhhc1ZpZGVvOiAhIXZpZGVvVHJhY2ssXG4gICAgICBuYjogMSxcbiAgICAgIGRyb3BwZWQ6IDBcbiAgICB9KTsgLy8gbm90aWZ5IGVuZCBvZiBwYXJzaW5nXG5cbiAgICBvYnNlcnZlci50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uRlJBR19QQVJTRUQpO1xuICB9O1xuXG4gIHJldHVybiBQYXNzVGhyb3VnaFJlbXV4ZXI7XG59KCk7XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHBhc3N0aHJvdWdoX3JlbXV4ZXIgPSAocGFzc3Rocm91Z2hfcmVtdXhlcl9QYXNzVGhyb3VnaFJlbXV4ZXIpO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZGVtdXgvZGVtdXhlci1pbmxpbmUuanNcbi8qKlxuICpcbiAqIGlubGluZSBkZW11eGVyOiBwcm9iZSBmcmFnbWVudHMgYW5kIGluc3RhbnRpYXRlXG4gKiBhcHByb3ByaWF0ZSBkZW11eGVyIGRlcGVuZGluZyBvbiBjb250ZW50IHR5cGUgKFRTRGVtdXhlciwgQUFDRGVtdXhlciwgLi4uKVxuICpcbiAqL1xuXG5cblxuXG5cblxuXG5cblxuXG4gLy8gc2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xMTIzNzI1OS81ODk0OTNcblxudmFyIGdsb2JhbCA9IE9iamVjdChnZXRfc2VsZl9zY29wZVtcImdldFNlbGZTY29wZVwiXSkoKTsgLy8gc2FmZWd1YXJkIGZvciBjb2RlIHRoYXQgbWlnaHQgcnVuIGJvdGggb24gd29ya2VyIGFuZCBtYWluIHRocmVhZFxuXG52YXIgbm93OyAvLyBwZXJmb3JtYW5jZS5ub3coKSBub3QgYXZhaWxhYmxlIG9uIFdlYldvcmtlciwgYXQgbGVhc3Qgb24gU2FmYXJpIERlc2t0b3BcblxudHJ5IHtcbiAgbm93ID0gZ2xvYmFsLnBlcmZvcm1hbmNlLm5vdy5iaW5kKGdsb2JhbC5wZXJmb3JtYW5jZSk7XG59IGNhdGNoIChlcnIpIHtcbiAgbG9nZ2VyW1wibG9nZ2VyXCJdLmRlYnVnKCdVbmFibGUgdG8gdXNlIFBlcmZvcm1hbmNlIEFQSSBvbiB0aGlzIGVudmlyb25tZW50Jyk7XG4gIG5vdyA9IGdsb2JhbC5EYXRlLm5vdztcbn1cblxudmFyIGRlbXV4ZXJfaW5saW5lX0RlbXV4ZXJJbmxpbmUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBEZW11eGVySW5saW5lKG9ic2VydmVyLCB0eXBlU3VwcG9ydGVkLCBjb25maWcsIHZlbmRvcikge1xuICAgIHRoaXMub2JzZXJ2ZXIgPSBvYnNlcnZlcjtcbiAgICB0aGlzLnR5cGVTdXBwb3J0ZWQgPSB0eXBlU3VwcG9ydGVkO1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIHRoaXMudmVuZG9yID0gdmVuZG9yO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IERlbXV4ZXJJbmxpbmUucHJvdG90eXBlO1xuXG4gIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICB2YXIgZGVtdXhlciA9IHRoaXMuZGVtdXhlcjtcblxuICAgIGlmIChkZW11eGVyKSB7XG4gICAgICBkZW11eGVyLmRlc3Ryb3koKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnB1c2ggPSBmdW5jdGlvbiBwdXNoKGRhdGEsIGRlY3J5cHRkYXRhLCBpbml0U2VnbWVudCwgYXVkaW9Db2RlYywgdmlkZW9Db2RlYywgdGltZU9mZnNldCwgZGlzY29udGludWl0eSwgdHJhY2tTd2l0Y2gsIGNvbnRpZ3VvdXMsIGR1cmF0aW9uLCBhY2N1cmF0ZVRpbWVPZmZzZXQsIGRlZmF1bHRJbml0UFRTKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmIChkYXRhLmJ5dGVMZW5ndGggPiAwICYmIGRlY3J5cHRkYXRhICE9IG51bGwgJiYgZGVjcnlwdGRhdGEua2V5ICE9IG51bGwgJiYgZGVjcnlwdGRhdGEubWV0aG9kID09PSAnQUVTLTEyOCcpIHtcbiAgICAgIHZhciBkZWNyeXB0ZXIgPSB0aGlzLmRlY3J5cHRlcjtcblxuICAgICAgaWYgKGRlY3J5cHRlciA9PSBudWxsKSB7XG4gICAgICAgIGRlY3J5cHRlciA9IHRoaXMuZGVjcnlwdGVyID0gbmV3IGNyeXB0X2RlY3J5cHRlcltcImRlZmF1bHRcIl0odGhpcy5vYnNlcnZlciwgdGhpcy5jb25maWcpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RhcnRUaW1lID0gbm93KCk7XG4gICAgICBkZWNyeXB0ZXIuZGVjcnlwdChkYXRhLCBkZWNyeXB0ZGF0YS5rZXkuYnVmZmVyLCBkZWNyeXB0ZGF0YS5pdi5idWZmZXIsIGZ1bmN0aW9uIChkZWNyeXB0ZWREYXRhKSB7XG4gICAgICAgIHZhciBlbmRUaW1lID0gbm93KCk7XG5cbiAgICAgICAgX3RoaXMub2JzZXJ2ZXIudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkZSQUdfREVDUllQVEVELCB7XG4gICAgICAgICAgc3RhdHM6IHtcbiAgICAgICAgICAgIHRzdGFydDogc3RhcnRUaW1lLFxuICAgICAgICAgICAgdGRlY3J5cHQ6IGVuZFRpbWVcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF90aGlzLnB1c2hEZWNyeXB0ZWQobmV3IFVpbnQ4QXJyYXkoZGVjcnlwdGVkRGF0YSksIGRlY3J5cHRkYXRhLCBuZXcgVWludDhBcnJheShpbml0U2VnbWVudCksIGF1ZGlvQ29kZWMsIHZpZGVvQ29kZWMsIHRpbWVPZmZzZXQsIGRpc2NvbnRpbnVpdHksIHRyYWNrU3dpdGNoLCBjb250aWd1b3VzLCBkdXJhdGlvbiwgYWNjdXJhdGVUaW1lT2Zmc2V0LCBkZWZhdWx0SW5pdFBUUyk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoRGVjcnlwdGVkKG5ldyBVaW50OEFycmF5KGRhdGEpLCBkZWNyeXB0ZGF0YSwgbmV3IFVpbnQ4QXJyYXkoaW5pdFNlZ21lbnQpLCBhdWRpb0NvZGVjLCB2aWRlb0NvZGVjLCB0aW1lT2Zmc2V0LCBkaXNjb250aW51aXR5LCB0cmFja1N3aXRjaCwgY29udGlndW91cywgZHVyYXRpb24sIGFjY3VyYXRlVGltZU9mZnNldCwgZGVmYXVsdEluaXRQVFMpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucHVzaERlY3J5cHRlZCA9IGZ1bmN0aW9uIHB1c2hEZWNyeXB0ZWQoZGF0YSwgZGVjcnlwdGRhdGEsIGluaXRTZWdtZW50LCBhdWRpb0NvZGVjLCB2aWRlb0NvZGVjLCB0aW1lT2Zmc2V0LCBkaXNjb250aW51aXR5LCB0cmFja1N3aXRjaCwgY29udGlndW91cywgZHVyYXRpb24sIGFjY3VyYXRlVGltZU9mZnNldCwgZGVmYXVsdEluaXRQVFMpIHtcbiAgICB2YXIgZGVtdXhlciA9IHRoaXMuZGVtdXhlcjtcbiAgICB2YXIgcmVtdXhlciA9IHRoaXMucmVtdXhlcjtcblxuICAgIGlmICghZGVtdXhlciB8fCAvLyBpbiBjYXNlIG9mIGNvbnRpbnVpdHkgY2hhbmdlLCBvciB0cmFjayBzd2l0Y2hcbiAgICAvLyB3ZSBtaWdodCBzd2l0Y2ggZnJvbSBjb250ZW50IHR5cGUgKEFBQyBjb250YWluZXIgdG8gVFMgY29udGFpbmVyLCBvciBUUyB0byBmbXA0IGZvciBleGFtcGxlKVxuICAgIGRpc2NvbnRpbnVpdHkgfHwgdHJhY2tTd2l0Y2gpIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IHRoaXMub2JzZXJ2ZXI7XG4gICAgICB2YXIgdHlwZVN1cHBvcnRlZCA9IHRoaXMudHlwZVN1cHBvcnRlZDtcbiAgICAgIHZhciBjb25maWcgPSB0aGlzLmNvbmZpZzsgLy8gcHJvYmluZyBvcmRlciBpcyBUUy9NUDQvQUFDL01QM1xuXG4gICAgICB2YXIgbXV4Q29uZmlnID0gW3tcbiAgICAgICAgZGVtdXg6IHRzZGVtdXhlcixcbiAgICAgICAgcmVtdXg6IG1wNF9yZW11eGVyXG4gICAgICB9LCB7XG4gICAgICAgIGRlbXV4OiBtcDRkZW11eGVyW1wiZGVmYXVsdFwiXSxcbiAgICAgICAgcmVtdXg6IHBhc3N0aHJvdWdoX3JlbXV4ZXJcbiAgICAgIH0sIHtcbiAgICAgICAgZGVtdXg6IGFhY2RlbXV4ZXIsXG4gICAgICAgIHJlbXV4OiBtcDRfcmVtdXhlclxuICAgICAgfSwge1xuICAgICAgICBkZW11eDogbXAzZGVtdXhlcixcbiAgICAgICAgcmVtdXg6IG1wNF9yZW11eGVyXG4gICAgICB9XTsgLy8gcHJvYmUgZm9yIGNvbnRlbnQgdHlwZVxuXG4gICAgICB2YXIgbXV4O1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbXV4Q29uZmlnLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIG11eCA9IG11eENvbmZpZ1tpXTtcblxuICAgICAgICBpZiAobXV4LmRlbXV4LnByb2JlKGRhdGEpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFtdXgpIHtcbiAgICAgICAgb2JzZXJ2ZXIudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkVSUk9SLCB7XG4gICAgICAgICAgdHlwZTogZXJyb3JzW1wiRXJyb3JUeXBlc1wiXS5NRURJQV9FUlJPUixcbiAgICAgICAgICBkZXRhaWxzOiBlcnJvcnNbXCJFcnJvckRldGFpbHNcIl0uRlJBR19QQVJTSU5HX0VSUk9SLFxuICAgICAgICAgIGZhdGFsOiB0cnVlLFxuICAgICAgICAgIHJlYXNvbjogJ25vIGRlbXV4IG1hdGNoaW5nIHdpdGggY29udGVudCBmb3VuZCdcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gc28gbGV0J3MgY2hlY2sgdGhhdCBjdXJyZW50IHJlbXV4ZXIgYW5kIGRlbXV4ZXIgYXJlIHN0aWxsIHZhbGlkXG5cblxuICAgICAgaWYgKCFyZW11eGVyIHx8ICEocmVtdXhlciBpbnN0YW5jZW9mIG11eC5yZW11eCkpIHtcbiAgICAgICAgcmVtdXhlciA9IG5ldyBtdXgucmVtdXgob2JzZXJ2ZXIsIGNvbmZpZywgdHlwZVN1cHBvcnRlZCwgdGhpcy52ZW5kb3IpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWRlbXV4ZXIgfHwgIShkZW11eGVyIGluc3RhbmNlb2YgbXV4LmRlbXV4KSkge1xuICAgICAgICBkZW11eGVyID0gbmV3IG11eC5kZW11eChvYnNlcnZlciwgcmVtdXhlciwgY29uZmlnLCB0eXBlU3VwcG9ydGVkKTtcbiAgICAgICAgdGhpcy5wcm9iZSA9IG11eC5kZW11eC5wcm9iZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5kZW11eGVyID0gZGVtdXhlcjtcbiAgICAgIHRoaXMucmVtdXhlciA9IHJlbXV4ZXI7XG4gICAgfVxuXG4gICAgaWYgKGRpc2NvbnRpbnVpdHkgfHwgdHJhY2tTd2l0Y2gpIHtcbiAgICAgIGRlbXV4ZXIucmVzZXRJbml0U2VnbWVudChpbml0U2VnbWVudCwgYXVkaW9Db2RlYywgdmlkZW9Db2RlYywgZHVyYXRpb24pO1xuICAgICAgcmVtdXhlci5yZXNldEluaXRTZWdtZW50KCk7XG4gICAgfVxuXG4gICAgaWYgKGRpc2NvbnRpbnVpdHkpIHtcbiAgICAgIGRlbXV4ZXIucmVzZXRUaW1lU3RhbXAoZGVmYXVsdEluaXRQVFMpO1xuICAgICAgcmVtdXhlci5yZXNldFRpbWVTdGFtcChkZWZhdWx0SW5pdFBUUyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBkZW11eGVyLnNldERlY3J5cHREYXRhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBkZW11eGVyLnNldERlY3J5cHREYXRhKGRlY3J5cHRkYXRhKTtcbiAgICB9XG5cbiAgICBkZW11eGVyLmFwcGVuZChkYXRhLCB0aW1lT2Zmc2V0LCBjb250aWd1b3VzLCBhY2N1cmF0ZVRpbWVPZmZzZXQpO1xuICB9O1xuXG4gIHJldHVybiBEZW11eGVySW5saW5lO1xufSgpO1xuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBkZW11eGVyX2lubGluZSA9IF9fd2VicGFja19leHBvcnRzX19bXCJkZWZhdWx0XCJdID0gKGRlbXV4ZXJfaW5saW5lX0RlbXV4ZXJJbmxpbmUpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9kZW11eC9kZW11eGVyLXdvcmtlci5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9kZW11eC9kZW11eGVyLXdvcmtlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBkZWZhdWx0ICovXG4vKiEgTW9kdWxlQ29uY2F0ZW5hdGlvbiBiYWlsb3V0OiBNb2R1bGUgaXMgcmVmZXJlbmNlZCBmcm9tIHRoZXNlIG1vZHVsZXMgd2l0aCB1bnN1cHBvcnRlZCBzeW50YXg6IC4vc3JjL2RlbXV4L2RlbXV4ZXIuanMgKHJlZmVyZW5jZWQgd2l0aCByZXF1aXJlLnJlc29sdmUpICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9kZW11eF9kZW11eGVyX2lubGluZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vZGVtdXgvZGVtdXhlci1pbmxpbmUgKi8gXCIuL3NyYy9kZW11eC9kZW11eGVyLWlubGluZS5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfZXZlbnRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9ldmVudHMgKi8gXCIuL3NyYy9ldmVudHMuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3V0aWxzX2xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vdXRpbHMvbG9nZ2VyICovIFwiLi9zcmMvdXRpbHMvbG9nZ2VyLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIGV2ZW50ZW1pdHRlcjNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGV2ZW50ZW1pdHRlcjMgKi8gXCIuL25vZGVfbW9kdWxlcy9ldmVudGVtaXR0ZXIzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIGV2ZW50ZW1pdHRlcjNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihldmVudGVtaXR0ZXIzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18pO1xuLyogZGVtdXhlciB3ZWIgd29ya2VyLlxuICogIC0gbGlzdGVuIHRvIHdvcmtlciBtZXNzYWdlLCBhbmQgdHJpZ2dlciBEZW11eGVySW5saW5lIHVwb24gcmVjZXB0aW9uIG9mIEZyYWdtZW50cy5cbiAqICAtIHByb3ZpZGVzIE1QNCBCb3hlcyBiYWNrIHRvIG1haW4gdGhyZWFkIHVzaW5nIFt0cmFuc2ZlcmFibGUgb2JqZWN0c10oaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vd2ViL3VwZGF0ZXMvMjAxMS8xMi9UcmFuc2ZlcmFibGUtT2JqZWN0cy1MaWdodG5pbmctRmFzdCkgaW4gb3JkZXIgdG8gbWluaW1pemUgbWVzc2FnZSBwYXNzaW5nIG92ZXJoZWFkLlxuICovXG5cblxuXG5cblxudmFyIERlbXV4ZXJXb3JrZXIgPSBmdW5jdGlvbiBEZW11eGVyV29ya2VyKHNlbGYpIHtcbiAgLy8gb2JzZXJ2ZXIgc2V0dXBcbiAgdmFyIG9ic2VydmVyID0gbmV3IGV2ZW50ZW1pdHRlcjNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIkV2ZW50RW1pdHRlclwiXSgpO1xuXG4gIG9ic2VydmVyLnRyaWdnZXIgPSBmdW5jdGlvbiB0cmlnZ2VyKGV2ZW50KSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGRhdGEgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgZGF0YVtfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgb2JzZXJ2ZXIuZW1pdC5hcHBseShvYnNlcnZlciwgW2V2ZW50LCBldmVudF0uY29uY2F0KGRhdGEpKTtcbiAgfTtcblxuICBvYnNlcnZlci5vZmYgPSBmdW5jdGlvbiBvZmYoZXZlbnQpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGRhdGEgPSBuZXcgQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgZGF0YVtfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICBvYnNlcnZlci5yZW1vdmVMaXN0ZW5lci5hcHBseShvYnNlcnZlciwgW2V2ZW50XS5jb25jYXQoZGF0YSkpO1xuICB9O1xuXG4gIHZhciBmb3J3YXJkTWVzc2FnZSA9IGZ1bmN0aW9uIGZvcndhcmRNZXNzYWdlKGV2LCBkYXRhKSB7XG4gICAgc2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICBldmVudDogZXYsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSk7XG4gIH07XG5cbiAgc2VsZi5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZnVuY3Rpb24gKGV2KSB7XG4gICAgdmFyIGRhdGEgPSBldi5kYXRhOyAvLyBjb25zb2xlLmxvZygnZGVtdXhlciBjbWQ6JyArIGRhdGEuY21kKTtcblxuICAgIHN3aXRjaCAoZGF0YS5jbWQpIHtcbiAgICAgIGNhc2UgJ2luaXQnOlxuICAgICAgICB2YXIgY29uZmlnID0gSlNPTi5wYXJzZShkYXRhLmNvbmZpZyk7XG4gICAgICAgIHNlbGYuZGVtdXhlciA9IG5ldyBfZGVtdXhfZGVtdXhlcl9pbmxpbmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1tcImRlZmF1bHRcIl0ob2JzZXJ2ZXIsIGRhdGEudHlwZVN1cHBvcnRlZCwgY29uZmlnLCBkYXRhLnZlbmRvcik7XG4gICAgICAgIE9iamVjdChfdXRpbHNfbG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJlbmFibGVMb2dzXCJdKShjb25maWcuZGVidWcpOyAvLyBzaWduYWwgZW5kIG9mIHdvcmtlciBpbml0XG5cbiAgICAgICAgZm9yd2FyZE1lc3NhZ2UoJ2luaXQnLCBudWxsKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2RlbXV4JzpcbiAgICAgICAgc2VsZi5kZW11eGVyLnB1c2goZGF0YS5kYXRhLCBkYXRhLmRlY3J5cHRkYXRhLCBkYXRhLmluaXRTZWdtZW50LCBkYXRhLmF1ZGlvQ29kZWMsIGRhdGEudmlkZW9Db2RlYywgZGF0YS50aW1lT2Zmc2V0LCBkYXRhLmRpc2NvbnRpbnVpdHksIGRhdGEudHJhY2tTd2l0Y2gsIGRhdGEuY29udGlndW91cywgZGF0YS5kdXJhdGlvbiwgZGF0YS5hY2N1cmF0ZVRpbWVPZmZzZXQsIGRhdGEuZGVmYXVsdEluaXRQVFMpO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9KTsgLy8gZm9yd2FyZCBldmVudHMgdG8gbWFpbiB0aHJlYWRcblxuICBvYnNlcnZlci5vbihfZXZlbnRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19bXCJkZWZhdWx0XCJdLkZSQUdfREVDUllQVEVELCBmb3J3YXJkTWVzc2FnZSk7XG4gIG9ic2VydmVyLm9uKF9ldmVudHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX1tcImRlZmF1bHRcIl0uRlJBR19QQVJTSU5HX0lOSVRfU0VHTUVOVCwgZm9yd2FyZE1lc3NhZ2UpO1xuICBvYnNlcnZlci5vbihfZXZlbnRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19bXCJkZWZhdWx0XCJdLkZSQUdfUEFSU0VELCBmb3J3YXJkTWVzc2FnZSk7XG4gIG9ic2VydmVyLm9uKF9ldmVudHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX1tcImRlZmF1bHRcIl0uRVJST1IsIGZvcndhcmRNZXNzYWdlKTtcbiAgb2JzZXJ2ZXIub24oX2V2ZW50c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fW1wiZGVmYXVsdFwiXS5GUkFHX1BBUlNJTkdfTUVUQURBVEEsIGZvcndhcmRNZXNzYWdlKTtcbiAgb2JzZXJ2ZXIub24oX2V2ZW50c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fW1wiZGVmYXVsdFwiXS5GUkFHX1BBUlNJTkdfVVNFUkRBVEEsIGZvcndhcmRNZXNzYWdlKTtcbiAgb2JzZXJ2ZXIub24oX2V2ZW50c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fW1wiZGVmYXVsdFwiXS5JTklUX1BUU19GT1VORCwgZm9yd2FyZE1lc3NhZ2UpOyAvLyBzcGVjaWFsIGNhc2UgZm9yIEZSQUdfUEFSU0lOR19EQVRBOiBwYXNzIGRhdGExL2RhdGEyIGFzIHRyYW5zZmVyYWJsZSBvYmplY3QgKG5vIGNvcHkpXG5cbiAgb2JzZXJ2ZXIub24oX2V2ZW50c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fW1wiZGVmYXVsdFwiXS5GUkFHX1BBUlNJTkdfREFUQSwgZnVuY3Rpb24gKGV2LCBkYXRhKSB7XG4gICAgdmFyIHRyYW5zZmVyYWJsZSA9IFtdO1xuICAgIHZhciBtZXNzYWdlID0ge1xuICAgICAgZXZlbnQ6IGV2LFxuICAgICAgZGF0YTogZGF0YVxuICAgIH07XG5cbiAgICBpZiAoZGF0YS5kYXRhMSkge1xuICAgICAgbWVzc2FnZS5kYXRhMSA9IGRhdGEuZGF0YTEuYnVmZmVyO1xuICAgICAgdHJhbnNmZXJhYmxlLnB1c2goZGF0YS5kYXRhMS5idWZmZXIpO1xuICAgICAgZGVsZXRlIGRhdGEuZGF0YTE7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEuZGF0YTIpIHtcbiAgICAgIG1lc3NhZ2UuZGF0YTIgPSBkYXRhLmRhdGEyLmJ1ZmZlcjtcbiAgICAgIHRyYW5zZmVyYWJsZS5wdXNoKGRhdGEuZGF0YTIuYnVmZmVyKTtcbiAgICAgIGRlbGV0ZSBkYXRhLmRhdGEyO1xuICAgIH1cblxuICAgIHNlbGYucG9zdE1lc3NhZ2UobWVzc2FnZSwgdHJhbnNmZXJhYmxlKTtcbiAgfSk7XG59O1xuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXCJkZWZhdWx0XCJdID0gKERlbXV4ZXJXb3JrZXIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9kZW11eC9pZDMuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2RlbXV4L2lkMy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogZGVmYXVsdCwgdXRmOEFycmF5VG9TdHIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwidXRmOEFycmF5VG9TdHJcIiwgZnVuY3Rpb24oKSB7IHJldHVybiB1dGY4QXJyYXlUb1N0cjsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3V0aWxzX2dldF9zZWxmX3Njb3BlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi91dGlscy9nZXQtc2VsZi1zY29wZSAqLyBcIi4vc3JjL3V0aWxzL2dldC1zZWxmLXNjb3BlLmpzXCIpO1xuXG4vKipcbiAqIElEMyBwYXJzZXJcbiAqL1xuXG52YXIgSUQzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gSUQzKCkge31cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIGFuIElEMyBoZWFkZXIgY2FuIGJlIGZvdW5kIGF0IG9mZnNldCBpbiBkYXRhXG4gICAqIEBwYXJhbSB7VWludDhBcnJheX0gZGF0YSAtIFRoZSBkYXRhIHRvIHNlYXJjaCBpblxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IC0gVGhlIG9mZnNldCBhdCB3aGljaCB0byBzdGFydCBzZWFyY2hpbmdcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gLSBUcnVlIGlmIGFuIElEMyBoZWFkZXIgaXMgZm91bmRcbiAgICovXG4gIElEMy5pc0hlYWRlciA9IGZ1bmN0aW9uIGlzSGVhZGVyKGRhdGEsIG9mZnNldCkge1xuICAgIC8qXG4gICAgKiBodHRwOi8vaWQzLm9yZy9pZDN2Mi4zLjBcbiAgICAqIFswXSAgICAgPSAnSSdcbiAgICAqIFsxXSAgICAgPSAnRCdcbiAgICAqIFsyXSAgICAgPSAnMydcbiAgICAqIFszLDRdICAgPSB7VmVyc2lvbn1cbiAgICAqIFs1XSAgICAgPSB7RmxhZ3N9XG4gICAgKiBbNi05XSAgID0ge0lEMyBTaXplfVxuICAgICpcbiAgICAqIEFuIElEM3YyIHRhZyBjYW4gYmUgZGV0ZWN0ZWQgd2l0aCB0aGUgZm9sbG93aW5nIHBhdHRlcm46XG4gICAgKiAgJDQ5IDQ0IDMzIHl5IHl5IHh4IHp6IHp6IHp6IHp6XG4gICAgKiBXaGVyZSB5eSBpcyBsZXNzIHRoYW4gJEZGLCB4eCBpcyB0aGUgJ2ZsYWdzJyBieXRlIGFuZCB6eiBpcyBsZXNzIHRoYW4gJDgwXG4gICAgKi9cbiAgICBpZiAob2Zmc2V0ICsgMTAgPD0gZGF0YS5sZW5ndGgpIHtcbiAgICAgIC8vIGxvb2sgZm9yICdJRDMnIGlkZW50aWZpZXJcbiAgICAgIGlmIChkYXRhW29mZnNldF0gPT09IDB4NDkgJiYgZGF0YVtvZmZzZXQgKyAxXSA9PT0gMHg0NCAmJiBkYXRhW29mZnNldCArIDJdID09PSAweDMzKSB7XG4gICAgICAgIC8vIGNoZWNrIHZlcnNpb24gaXMgd2l0aGluIHJhbmdlXG4gICAgICAgIGlmIChkYXRhW29mZnNldCArIDNdIDwgMHhGRiAmJiBkYXRhW29mZnNldCArIDRdIDwgMHhGRikge1xuICAgICAgICAgIC8vIGNoZWNrIHNpemUgaXMgd2l0aGluIHJhbmdlXG4gICAgICAgICAgaWYgKGRhdGFbb2Zmc2V0ICsgNl0gPCAweDgwICYmIGRhdGFbb2Zmc2V0ICsgN10gPCAweDgwICYmIGRhdGFbb2Zmc2V0ICsgOF0gPCAweDgwICYmIGRhdGFbb2Zmc2V0ICsgOV0gPCAweDgwKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBhbiBJRDMgZm9vdGVyIGNhbiBiZSBmb3VuZCBhdCBvZmZzZXQgaW4gZGF0YVxuICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGRhdGEgLSBUaGUgZGF0YSB0byBzZWFyY2ggaW5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCAtIFRoZSBvZmZzZXQgYXQgd2hpY2ggdG8gc3RhcnQgc2VhcmNoaW5nXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IC0gVHJ1ZSBpZiBhbiBJRDMgZm9vdGVyIGlzIGZvdW5kXG4gICAqL1xuICA7XG5cbiAgSUQzLmlzRm9vdGVyID0gZnVuY3Rpb24gaXNGb290ZXIoZGF0YSwgb2Zmc2V0KSB7XG4gICAgLypcbiAgICAqIFRoZSBmb290ZXIgaXMgYSBjb3B5IG9mIHRoZSBoZWFkZXIsIGJ1dCB3aXRoIGEgZGlmZmVyZW50IGlkZW50aWZpZXJcbiAgICAqL1xuICAgIGlmIChvZmZzZXQgKyAxMCA8PSBkYXRhLmxlbmd0aCkge1xuICAgICAgLy8gbG9vayBmb3IgJzNESScgaWRlbnRpZmllclxuICAgICAgaWYgKGRhdGFbb2Zmc2V0XSA9PT0gMHgzMyAmJiBkYXRhW29mZnNldCArIDFdID09PSAweDQ0ICYmIGRhdGFbb2Zmc2V0ICsgMl0gPT09IDB4NDkpIHtcbiAgICAgICAgLy8gY2hlY2sgdmVyc2lvbiBpcyB3aXRoaW4gcmFuZ2VcbiAgICAgICAgaWYgKGRhdGFbb2Zmc2V0ICsgM10gPCAweEZGICYmIGRhdGFbb2Zmc2V0ICsgNF0gPCAweEZGKSB7XG4gICAgICAgICAgLy8gY2hlY2sgc2l6ZSBpcyB3aXRoaW4gcmFuZ2VcbiAgICAgICAgICBpZiAoZGF0YVtvZmZzZXQgKyA2XSA8IDB4ODAgJiYgZGF0YVtvZmZzZXQgKyA3XSA8IDB4ODAgJiYgZGF0YVtvZmZzZXQgKyA4XSA8IDB4ODAgJiYgZGF0YVtvZmZzZXQgKyA5XSA8IDB4ODApIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbnkgYWRqYWNlbnQgSUQzIHRhZ3MgZm91bmQgaW4gZGF0YSBzdGFydGluZyBhdCBvZmZzZXQsIGFzIG9uZSBibG9jayBvZiBkYXRhXG4gICAqIEBwYXJhbSB7VWludDhBcnJheX0gZGF0YSAtIFRoZSBkYXRhIHRvIHNlYXJjaCBpblxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IC0gVGhlIG9mZnNldCBhdCB3aGljaCB0byBzdGFydCBzZWFyY2hpbmdcbiAgICogQHJldHVybiB7VWludDhBcnJheX0gLSBUaGUgYmxvY2sgb2YgZGF0YSBjb250YWluaW5nIGFueSBJRDMgdGFncyBmb3VuZFxuICAgKi9cbiAgO1xuXG4gIElEMy5nZXRJRDNEYXRhID0gZnVuY3Rpb24gZ2V0SUQzRGF0YShkYXRhLCBvZmZzZXQpIHtcbiAgICB2YXIgZnJvbnQgPSBvZmZzZXQ7XG4gICAgdmFyIGxlbmd0aCA9IDA7XG5cbiAgICB3aGlsZSAoSUQzLmlzSGVhZGVyKGRhdGEsIG9mZnNldCkpIHtcbiAgICAgIC8vIElEMyBoZWFkZXIgaXMgMTAgYnl0ZXNcbiAgICAgIGxlbmd0aCArPSAxMDtcblxuICAgICAgdmFyIHNpemUgPSBJRDMuX3JlYWRTaXplKGRhdGEsIG9mZnNldCArIDYpO1xuXG4gICAgICBsZW5ndGggKz0gc2l6ZTtcblxuICAgICAgaWYgKElEMy5pc0Zvb3RlcihkYXRhLCBvZmZzZXQgKyAxMCkpIHtcbiAgICAgICAgLy8gSUQzIGZvb3RlciBpcyAxMCBieXRlc1xuICAgICAgICBsZW5ndGggKz0gMTA7XG4gICAgICB9XG5cbiAgICAgIG9mZnNldCArPSBsZW5ndGg7XG4gICAgfVxuXG4gICAgaWYgKGxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBkYXRhLnN1YmFycmF5KGZyb250LCBmcm9udCArIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcblxuICBJRDMuX3JlYWRTaXplID0gZnVuY3Rpb24gX3JlYWRTaXplKGRhdGEsIG9mZnNldCkge1xuICAgIHZhciBzaXplID0gMDtcbiAgICBzaXplID0gKGRhdGFbb2Zmc2V0XSAmIDB4N2YpIDw8IDIxO1xuICAgIHNpemUgfD0gKGRhdGFbb2Zmc2V0ICsgMV0gJiAweDdmKSA8PCAxNDtcbiAgICBzaXplIHw9IChkYXRhW29mZnNldCArIDJdICYgMHg3ZikgPDwgNztcbiAgICBzaXplIHw9IGRhdGFbb2Zmc2V0ICsgM10gJiAweDdmO1xuICAgIHJldHVybiBzaXplO1xuICB9XG4gIC8qKlxuICAgKiBTZWFyY2hlcyBmb3IgdGhlIEVsZW1lbnRhcnkgU3RyZWFtIHRpbWVzdGFtcCBmb3VuZCBpbiB0aGUgSUQzIGRhdGEgY2h1bmtcbiAgICogQHBhcmFtIHtVaW50OEFycmF5fSBkYXRhIC0gQmxvY2sgb2YgZGF0YSBjb250YWluaW5nIG9uZSBvciBtb3JlIElEMyB0YWdzXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBUaGUgdGltZXN0YW1wXG4gICAqL1xuICA7XG5cbiAgSUQzLmdldFRpbWVTdGFtcCA9IGZ1bmN0aW9uIGdldFRpbWVTdGFtcChkYXRhKSB7XG4gICAgdmFyIGZyYW1lcyA9IElEMy5nZXRJRDNGcmFtZXMoZGF0YSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZyYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGZyYW1lID0gZnJhbWVzW2ldO1xuXG4gICAgICBpZiAoSUQzLmlzVGltZVN0YW1wRnJhbWUoZnJhbWUpKSB7XG4gICAgICAgIHJldHVybiBJRDMuX3JlYWRUaW1lU3RhbXAoZnJhbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSUQzIGZyYW1lIGlzIGFuIEVsZW1lbnRhcnkgU3RyZWFtIHRpbWVzdGFtcCBmcmFtZVxuICAgKiBAcGFyYW0ge0lEMyBmcmFtZX0gZnJhbWVcbiAgICovXG4gIDtcblxuICBJRDMuaXNUaW1lU3RhbXBGcmFtZSA9IGZ1bmN0aW9uIGlzVGltZVN0YW1wRnJhbWUoZnJhbWUpIHtcbiAgICByZXR1cm4gZnJhbWUgJiYgZnJhbWUua2V5ID09PSAnUFJJVicgJiYgZnJhbWUuaW5mbyA9PT0gJ2NvbS5hcHBsZS5zdHJlYW1pbmcudHJhbnNwb3J0U3RyZWFtVGltZXN0YW1wJztcbiAgfTtcblxuICBJRDMuX2dldEZyYW1lRGF0YSA9IGZ1bmN0aW9uIF9nZXRGcmFtZURhdGEoZGF0YSkge1xuICAgIC8qXG4gICAgRnJhbWUgSUQgICAgICAgJHh4IHh4IHh4IHh4IChmb3VyIGNoYXJhY3RlcnMpXG4gICAgU2l6ZSAgICAgICAgICAgJHh4IHh4IHh4IHh4XG4gICAgRmxhZ3MgICAgICAgICAgJHh4IHh4XG4gICAgKi9cbiAgICB2YXIgdHlwZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoZGF0YVswXSwgZGF0YVsxXSwgZGF0YVsyXSwgZGF0YVszXSk7XG5cbiAgICB2YXIgc2l6ZSA9IElEMy5fcmVhZFNpemUoZGF0YSwgNCk7IC8vIHNraXAgZnJhbWUgaWQsIHNpemUsIGFuZCBmbGFnc1xuXG5cbiAgICB2YXIgb2Zmc2V0ID0gMTA7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IHR5cGUsXG4gICAgICBzaXplOiBzaXplLFxuICAgICAgZGF0YTogZGF0YS5zdWJhcnJheShvZmZzZXQsIG9mZnNldCArIHNpemUpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBhcnJheSBvZiBJRDMgZnJhbWVzIGZvdW5kIGluIGFsbCB0aGUgSUQzIHRhZ3MgaW4gdGhlIGlkM0RhdGFcbiAgICogQHBhcmFtIHtVaW50OEFycmF5fSBpZDNEYXRhIC0gVGhlIElEMyBkYXRhIGNvbnRhaW5pbmcgb25lIG9yIG1vcmUgSUQzIHRhZ3NcbiAgICogQHJldHVybiB7SUQzIGZyYW1lW119IC0gQXJyYXkgb2YgSUQzIGZyYW1lIG9iamVjdHNcbiAgICovXG4gIDtcblxuICBJRDMuZ2V0SUQzRnJhbWVzID0gZnVuY3Rpb24gZ2V0SUQzRnJhbWVzKGlkM0RhdGEpIHtcbiAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICB2YXIgZnJhbWVzID0gW107XG5cbiAgICB3aGlsZSAoSUQzLmlzSGVhZGVyKGlkM0RhdGEsIG9mZnNldCkpIHtcbiAgICAgIHZhciBzaXplID0gSUQzLl9yZWFkU2l6ZShpZDNEYXRhLCBvZmZzZXQgKyA2KTsgLy8gc2tpcCBwYXN0IElEMyBoZWFkZXJcblxuXG4gICAgICBvZmZzZXQgKz0gMTA7XG4gICAgICB2YXIgZW5kID0gb2Zmc2V0ICsgc2l6ZTsgLy8gbG9vcCB0aHJvdWdoIGZyYW1lcyBpbiB0aGUgSUQzIHRhZ1xuXG4gICAgICB3aGlsZSAob2Zmc2V0ICsgOCA8IGVuZCkge1xuICAgICAgICB2YXIgZnJhbWVEYXRhID0gSUQzLl9nZXRGcmFtZURhdGEoaWQzRGF0YS5zdWJhcnJheShvZmZzZXQpKTtcblxuICAgICAgICB2YXIgZnJhbWUgPSBJRDMuX2RlY29kZUZyYW1lKGZyYW1lRGF0YSk7XG5cbiAgICAgICAgaWYgKGZyYW1lKSB7XG4gICAgICAgICAgZnJhbWVzLnB1c2goZnJhbWUpO1xuICAgICAgICB9IC8vIHNraXAgZnJhbWUgaGVhZGVyIGFuZCBmcmFtZSBkYXRhXG5cblxuICAgICAgICBvZmZzZXQgKz0gZnJhbWVEYXRhLnNpemUgKyAxMDtcbiAgICAgIH1cblxuICAgICAgaWYgKElEMy5pc0Zvb3RlcihpZDNEYXRhLCBvZmZzZXQpKSB7XG4gICAgICAgIG9mZnNldCArPSAxMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnJhbWVzO1xuICB9O1xuXG4gIElEMy5fZGVjb2RlRnJhbWUgPSBmdW5jdGlvbiBfZGVjb2RlRnJhbWUoZnJhbWUpIHtcbiAgICBpZiAoZnJhbWUudHlwZSA9PT0gJ1BSSVYnKSB7XG4gICAgICByZXR1cm4gSUQzLl9kZWNvZGVQcml2RnJhbWUoZnJhbWUpO1xuICAgIH0gZWxzZSBpZiAoZnJhbWUudHlwZVswXSA9PT0gJ1cnKSB7XG4gICAgICByZXR1cm4gSUQzLl9kZWNvZGVVUkxGcmFtZShmcmFtZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIElEMy5fZGVjb2RlVGV4dEZyYW1lKGZyYW1lKTtcbiAgfTtcblxuICBJRDMuX3JlYWRUaW1lU3RhbXAgPSBmdW5jdGlvbiBfcmVhZFRpbWVTdGFtcCh0aW1lU3RhbXBGcmFtZSkge1xuICAgIGlmICh0aW1lU3RhbXBGcmFtZS5kYXRhLmJ5dGVMZW5ndGggPT09IDgpIHtcbiAgICAgIHZhciBkYXRhID0gbmV3IFVpbnQ4QXJyYXkodGltZVN0YW1wRnJhbWUuZGF0YSk7IC8vIHRpbWVzdGFtcCBpcyAzMyBiaXQgZXhwcmVzc2VkIGFzIGEgYmlnLWVuZGlhbiBlaWdodC1vY3RldCBudW1iZXIsXG4gICAgICAvLyB3aXRoIHRoZSB1cHBlciAzMSBiaXRzIHNldCB0byB6ZXJvLlxuXG4gICAgICB2YXIgcHRzMzNCaXQgPSBkYXRhWzNdICYgMHgxO1xuICAgICAgdmFyIHRpbWVzdGFtcCA9IChkYXRhWzRdIDw8IDIzKSArIChkYXRhWzVdIDw8IDE1KSArIChkYXRhWzZdIDw8IDcpICsgZGF0YVs3XTtcbiAgICAgIHRpbWVzdGFtcCAvPSA0NTtcblxuICAgICAgaWYgKHB0czMzQml0KSB7XG4gICAgICAgIHRpbWVzdGFtcCArPSA0NzcyMTg1OC44NDtcbiAgICAgIH0gLy8gMl4zMiAvIDkwXG5cblxuICAgICAgcmV0dXJuIE1hdGgucm91bmQodGltZXN0YW1wKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuXG4gIElEMy5fZGVjb2RlUHJpdkZyYW1lID0gZnVuY3Rpb24gX2RlY29kZVByaXZGcmFtZShmcmFtZSkge1xuICAgIC8qXG4gICAgRm9ybWF0OiA8dGV4dCBzdHJpbmc+XFwwPGJpbmFyeSBkYXRhPlxuICAgICovXG4gICAgaWYgKGZyYW1lLnNpemUgPCAyKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHZhciBvd25lciA9IElEMy5fdXRmOEFycmF5VG9TdHIoZnJhbWUuZGF0YSwgdHJ1ZSk7XG5cbiAgICB2YXIgcHJpdmF0ZURhdGEgPSBuZXcgVWludDhBcnJheShmcmFtZS5kYXRhLnN1YmFycmF5KG93bmVyLmxlbmd0aCArIDEpKTtcbiAgICByZXR1cm4ge1xuICAgICAga2V5OiBmcmFtZS50eXBlLFxuICAgICAgaW5mbzogb3duZXIsXG4gICAgICBkYXRhOiBwcml2YXRlRGF0YS5idWZmZXJcbiAgICB9O1xuICB9O1xuXG4gIElEMy5fZGVjb2RlVGV4dEZyYW1lID0gZnVuY3Rpb24gX2RlY29kZVRleHRGcmFtZShmcmFtZSkge1xuICAgIGlmIChmcmFtZS5zaXplIDwgMikge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoZnJhbWUudHlwZSA9PT0gJ1RYWFgnKSB7XG4gICAgICAvKlxuICAgICAgRm9ybWF0OlxuICAgICAgWzBdICAgPSB7VGV4dCBFbmNvZGluZ31cbiAgICAgIFsxLT9dID0ge0Rlc2NyaXB0aW9ufVxcMHtWYWx1ZX1cbiAgICAgICovXG4gICAgICB2YXIgaW5kZXggPSAxO1xuXG4gICAgICB2YXIgZGVzY3JpcHRpb24gPSBJRDMuX3V0ZjhBcnJheVRvU3RyKGZyYW1lLmRhdGEuc3ViYXJyYXkoaW5kZXgpLCB0cnVlKTtcblxuICAgICAgaW5kZXggKz0gZGVzY3JpcHRpb24ubGVuZ3RoICsgMTtcblxuICAgICAgdmFyIHZhbHVlID0gSUQzLl91dGY4QXJyYXlUb1N0cihmcmFtZS5kYXRhLnN1YmFycmF5KGluZGV4KSk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtleTogZnJhbWUudHlwZSxcbiAgICAgICAgaW5mbzogZGVzY3JpcHRpb24sXG4gICAgICAgIGRhdGE6IHZhbHVlXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAvKlxuICAgICAgRm9ybWF0OlxuICAgICAgWzBdICAgPSB7VGV4dCBFbmNvZGluZ31cbiAgICAgIFsxLT9dID0ge1ZhbHVlfVxuICAgICAgKi9cbiAgICAgIHZhciB0ZXh0ID0gSUQzLl91dGY4QXJyYXlUb1N0cihmcmFtZS5kYXRhLnN1YmFycmF5KDEpKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAga2V5OiBmcmFtZS50eXBlLFxuICAgICAgICBkYXRhOiB0ZXh0XG4gICAgICB9O1xuICAgIH1cbiAgfTtcblxuICBJRDMuX2RlY29kZVVSTEZyYW1lID0gZnVuY3Rpb24gX2RlY29kZVVSTEZyYW1lKGZyYW1lKSB7XG4gICAgaWYgKGZyYW1lLnR5cGUgPT09ICdXWFhYJykge1xuICAgICAgLypcbiAgICAgIEZvcm1hdDpcbiAgICAgIFswXSAgID0ge1RleHQgRW5jb2Rpbmd9XG4gICAgICBbMS0/XSA9IHtEZXNjcmlwdGlvbn1cXDB7VVJMfVxuICAgICAgKi9cbiAgICAgIGlmIChmcmFtZS5zaXplIDwgMikge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW5kZXggPSAxO1xuXG4gICAgICB2YXIgZGVzY3JpcHRpb24gPSBJRDMuX3V0ZjhBcnJheVRvU3RyKGZyYW1lLmRhdGEuc3ViYXJyYXkoaW5kZXgpLCB0cnVlKTtcblxuICAgICAgaW5kZXggKz0gZGVzY3JpcHRpb24ubGVuZ3RoICsgMTtcblxuICAgICAgdmFyIHZhbHVlID0gSUQzLl91dGY4QXJyYXlUb1N0cihmcmFtZS5kYXRhLnN1YmFycmF5KGluZGV4KSk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtleTogZnJhbWUudHlwZSxcbiAgICAgICAgaW5mbzogZGVzY3JpcHRpb24sXG4gICAgICAgIGRhdGE6IHZhbHVlXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAvKlxuICAgICAgRm9ybWF0OlxuICAgICAgWzAtP10gPSB7VVJMfVxuICAgICAgKi9cbiAgICAgIHZhciB1cmwgPSBJRDMuX3V0ZjhBcnJheVRvU3RyKGZyYW1lLmRhdGEpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBrZXk6IGZyYW1lLnR5cGUsXG4gICAgICAgIGRhdGE6IHVybFxuICAgICAgfTtcbiAgICB9XG4gIH0gLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy84OTM2OTg0L3VpbnQ4YXJyYXktdG8tc3RyaW5nLWluLWphdmFzY3JpcHQvMjIzNzMxOTdcbiAgLy8gaHR0cDovL3d3dy5vbmljb3MuY29tL3N0YWZmL2l6L2FtdXNlL2phdmFzY3JpcHQvZXhwZXJ0L3V0Zi50eHRcblxuICAvKiB1dGYuanMgLSBVVEYtOCA8PT4gVVRGLTE2IGNvbnZlcnRpb25cbiAgICpcbiAgICogQ29weXJpZ2h0IChDKSAxOTk5IE1hc2FuYW8gSXp1bW8gPGl6QG9uaWNvcy5jby5qcD5cbiAgICogVmVyc2lvbjogMS4wXG4gICAqIExhc3RNb2RpZmllZDogRGVjIDI1IDE5OTlcbiAgICogVGhpcyBsaWJyYXJ5IGlzIGZyZWUuICBZb3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5IGl0LlxuICAgKi9cbiAgO1xuXG4gIElEMy5fdXRmOEFycmF5VG9TdHIgPSBmdW5jdGlvbiBfdXRmOEFycmF5VG9TdHIoYXJyYXksIGV4aXRPbk51bGwpIHtcbiAgICBpZiAoZXhpdE9uTnVsbCA9PT0gdm9pZCAwKSB7XG4gICAgICBleGl0T25OdWxsID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGRlY29kZXIgPSBnZXRUZXh0RGVjb2RlcigpO1xuXG4gICAgaWYgKGRlY29kZXIpIHtcbiAgICAgIHZhciBkZWNvZGVkID0gZGVjb2Rlci5kZWNvZGUoYXJyYXkpO1xuXG4gICAgICBpZiAoZXhpdE9uTnVsbCkge1xuICAgICAgICAvLyBncmFiIHVwIHRvIHRoZSBmaXJzdCBudWxsXG4gICAgICAgIHZhciBpZHggPSBkZWNvZGVkLmluZGV4T2YoJ1xcMCcpO1xuICAgICAgICByZXR1cm4gaWR4ICE9PSAtMSA/IGRlY29kZWQuc3Vic3RyaW5nKDAsIGlkeCkgOiBkZWNvZGVkO1xuICAgICAgfSAvLyByZW1vdmUgYW55IG51bGwgY2hhcmFjdGVyc1xuXG5cbiAgICAgIHJldHVybiBkZWNvZGVkLnJlcGxhY2UoL1xcMC9nLCAnJyk7XG4gICAgfVxuXG4gICAgdmFyIGxlbiA9IGFycmF5Lmxlbmd0aDtcbiAgICB2YXIgYztcbiAgICB2YXIgY2hhcjI7XG4gICAgdmFyIGNoYXIzO1xuICAgIHZhciBvdXQgPSAnJztcbiAgICB2YXIgaSA9IDA7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgYyA9IGFycmF5W2krK107XG5cbiAgICAgIGlmIChjID09PSAweDAwICYmIGV4aXRPbk51bGwpIHtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgIH0gZWxzZSBpZiAoYyA9PT0gMHgwMCB8fCBjID09PSAweDAzKSB7XG4gICAgICAgIC8vIElmIHRoZSBjaGFyYWN0ZXIgaXMgMyAoRU5EX09GX1RFWFQpIG9yIDAgKE5VTEwpIHRoZW4gc2tpcCBpdFxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChjID4+IDQpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICBjYXNlIDE6XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICBjYXNlIDQ6XG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgY2FzZSA2OlxuICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgLy8gMHh4eHh4eHhcbiAgICAgICAgICBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDEyOlxuICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgIC8vIDExMHggeHh4eCAgIDEweHggeHh4eFxuICAgICAgICAgIGNoYXIyID0gYXJyYXlbaSsrXTtcbiAgICAgICAgICBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoYyAmIDB4MUYpIDw8IDYgfCBjaGFyMiAmIDB4M0YpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgLy8gMTExMCB4eHh4ICAxMHh4IHh4eHggIDEweHggeHh4eFxuICAgICAgICAgIGNoYXIyID0gYXJyYXlbaSsrXTtcbiAgICAgICAgICBjaGFyMyA9IGFycmF5W2krK107XG4gICAgICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGMgJiAweDBGKSA8PCAxMiB8IChjaGFyMiAmIDB4M0YpIDw8IDYgfCAoY2hhcjMgJiAweDNGKSA8PCAwKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG4gIH07XG5cbiAgcmV0dXJuIElEMztcbn0oKTtcblxudmFyIGRlY29kZXI7XG5cbmZ1bmN0aW9uIGdldFRleHREZWNvZGVyKCkge1xuICB2YXIgZ2xvYmFsID0gT2JqZWN0KF91dGlsc19nZXRfc2VsZl9zY29wZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fW1wiZ2V0U2VsZlNjb3BlXCJdKSgpOyAvLyBzYWZlZ3VhcmQgZm9yIGNvZGUgdGhhdCBtaWdodCBydW4gYm90aCBvbiB3b3JrZXIgYW5kIG1haW4gdGhyZWFkXG5cbiAgaWYgKCFkZWNvZGVyICYmIHR5cGVvZiBnbG9iYWwuVGV4dERlY29kZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZGVjb2RlciA9IG5ldyBnbG9iYWwuVGV4dERlY29kZXIoJ3V0Zi04Jyk7XG4gIH1cblxuICByZXR1cm4gZGVjb2Rlcjtcbn1cblxudmFyIHV0ZjhBcnJheVRvU3RyID0gSUQzLl91dGY4QXJyYXlUb1N0cjtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImRlZmF1bHRcIl0gPSAoSUQzKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9kZW11eC9tcDRkZW11eGVyLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvZGVtdXgvbXA0ZGVtdXhlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IGRlZmF1bHQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3V0aWxzX2xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vdXRpbHMvbG9nZ2VyICovIFwiLi9zcmMvdXRpbHMvbG9nZ2VyLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9ldmVudHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2V2ZW50cyAqLyBcIi4vc3JjL2V2ZW50cy5qc1wiKTtcbi8qKlxuICogTVA0IGRlbXV4ZXJcbiAqL1xuXG5cbnZhciBVSU5UMzJfTUFYID0gTWF0aC5wb3coMiwgMzIpIC0gMTtcblxudmFyIE1QNERlbXV4ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNUDREZW11eGVyKG9ic2VydmVyLCByZW11eGVyKSB7XG4gICAgdGhpcy5vYnNlcnZlciA9IG9ic2VydmVyO1xuICAgIHRoaXMucmVtdXhlciA9IHJlbXV4ZXI7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTVA0RGVtdXhlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlc2V0VGltZVN0YW1wID0gZnVuY3Rpb24gcmVzZXRUaW1lU3RhbXAoaW5pdFBUUykge1xuICAgIHRoaXMuaW5pdFBUUyA9IGluaXRQVFM7XG4gIH07XG5cbiAgX3Byb3RvLnJlc2V0SW5pdFNlZ21lbnQgPSBmdW5jdGlvbiByZXNldEluaXRTZWdtZW50KGluaXRTZWdtZW50LCBhdWRpb0NvZGVjLCB2aWRlb0NvZGVjLCBkdXJhdGlvbikge1xuICAgIC8vIGpzaGludCB1bnVzZWQ6ZmFsc2VcbiAgICBpZiAoaW5pdFNlZ21lbnQgJiYgaW5pdFNlZ21lbnQuYnl0ZUxlbmd0aCkge1xuICAgICAgdmFyIGluaXREYXRhID0gdGhpcy5pbml0RGF0YSA9IE1QNERlbXV4ZXIucGFyc2VJbml0U2VnbWVudChpbml0U2VnbWVudCk7IC8vIGRlZmF1bHQgYXVkaW8gY29kZWMgaWYgbm90aGluZyBzcGVjaWZpZWRcbiAgICAgIC8vIFRPRE8gOiBleHRyYWN0IHRoYXQgZnJvbSBpbml0c2VnbWVudFxuXG4gICAgICBpZiAoYXVkaW9Db2RlYyA9PSBudWxsKSB7XG4gICAgICAgIGF1ZGlvQ29kZWMgPSAnbXA0YS40MC41JztcbiAgICAgIH1cblxuICAgICAgaWYgKHZpZGVvQ29kZWMgPT0gbnVsbCkge1xuICAgICAgICB2aWRlb0NvZGVjID0gJ2F2YzEuNDJlMDFlJztcbiAgICAgIH1cblxuICAgICAgdmFyIHRyYWNrcyA9IHt9O1xuXG4gICAgICBpZiAoaW5pdERhdGEuYXVkaW8gJiYgaW5pdERhdGEudmlkZW8pIHtcbiAgICAgICAgdHJhY2tzLmF1ZGlvdmlkZW8gPSB7XG4gICAgICAgICAgY29udGFpbmVyOiAndmlkZW8vbXA0JyxcbiAgICAgICAgICBjb2RlYzogYXVkaW9Db2RlYyArICcsJyArIHZpZGVvQ29kZWMsXG4gICAgICAgICAgaW5pdFNlZ21lbnQ6IGR1cmF0aW9uID8gaW5pdFNlZ21lbnQgOiBudWxsXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaW5pdERhdGEuYXVkaW8pIHtcbiAgICAgICAgICB0cmFja3MuYXVkaW8gPSB7XG4gICAgICAgICAgICBjb250YWluZXI6ICdhdWRpby9tcDQnLFxuICAgICAgICAgICAgY29kZWM6IGF1ZGlvQ29kZWMsXG4gICAgICAgICAgICBpbml0U2VnbWVudDogZHVyYXRpb24gPyBpbml0U2VnbWVudCA6IG51bGxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluaXREYXRhLnZpZGVvKSB7XG4gICAgICAgICAgdHJhY2tzLnZpZGVvID0ge1xuICAgICAgICAgICAgY29udGFpbmVyOiAndmlkZW8vbXA0JyxcbiAgICAgICAgICAgIGNvZGVjOiB2aWRlb0NvZGVjLFxuICAgICAgICAgICAgaW5pdFNlZ21lbnQ6IGR1cmF0aW9uID8gaW5pdFNlZ21lbnQgOiBudWxsXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLm9ic2VydmVyLnRyaWdnZXIoX2V2ZW50c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fW1wiZGVmYXVsdFwiXS5GUkFHX1BBUlNJTkdfSU5JVF9TRUdNRU5ULCB7XG4gICAgICAgIHRyYWNrczogdHJhY2tzXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGF1ZGlvQ29kZWMpIHtcbiAgICAgICAgdGhpcy5hdWRpb0NvZGVjID0gYXVkaW9Db2RlYztcbiAgICAgIH1cblxuICAgICAgaWYgKHZpZGVvQ29kZWMpIHtcbiAgICAgICAgdGhpcy52aWRlb0NvZGVjID0gdmlkZW9Db2RlYztcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgTVA0RGVtdXhlci5wcm9iZSA9IGZ1bmN0aW9uIHByb2JlKGRhdGEpIHtcbiAgICAvLyBlbnN1cmUgd2UgZmluZCBhIG1vb2YgYm94IGluIHRoZSBmaXJzdCAxNiBrQlxuICAgIHJldHVybiBNUDREZW11eGVyLmZpbmRCb3goe1xuICAgICAgZGF0YTogZGF0YSxcbiAgICAgIHN0YXJ0OiAwLFxuICAgICAgZW5kOiBNYXRoLm1pbihkYXRhLmxlbmd0aCwgMTYzODQpXG4gICAgfSwgWydtb29mJ10pLmxlbmd0aCA+IDA7XG4gIH07XG5cbiAgTVA0RGVtdXhlci5iaW4yc3RyID0gZnVuY3Rpb24gYmluMnN0cihidWZmZXIpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBidWZmZXIpO1xuICB9O1xuXG4gIE1QNERlbXV4ZXIucmVhZFVpbnQxNiA9IGZ1bmN0aW9uIHJlYWRVaW50MTYoYnVmZmVyLCBvZmZzZXQpIHtcbiAgICBpZiAoYnVmZmVyLmRhdGEpIHtcbiAgICAgIG9mZnNldCArPSBidWZmZXIuc3RhcnQ7XG4gICAgICBidWZmZXIgPSBidWZmZXIuZGF0YTtcbiAgICB9XG5cbiAgICB2YXIgdmFsID0gYnVmZmVyW29mZnNldF0gPDwgOCB8IGJ1ZmZlcltvZmZzZXQgKyAxXTtcbiAgICByZXR1cm4gdmFsIDwgMCA/IDY1NTM2ICsgdmFsIDogdmFsO1xuICB9O1xuXG4gIE1QNERlbXV4ZXIucmVhZFVpbnQzMiA9IGZ1bmN0aW9uIHJlYWRVaW50MzIoYnVmZmVyLCBvZmZzZXQpIHtcbiAgICBpZiAoYnVmZmVyLmRhdGEpIHtcbiAgICAgIG9mZnNldCArPSBidWZmZXIuc3RhcnQ7XG4gICAgICBidWZmZXIgPSBidWZmZXIuZGF0YTtcbiAgICB9XG5cbiAgICB2YXIgdmFsID0gYnVmZmVyW29mZnNldF0gPDwgMjQgfCBidWZmZXJbb2Zmc2V0ICsgMV0gPDwgMTYgfCBidWZmZXJbb2Zmc2V0ICsgMl0gPDwgOCB8IGJ1ZmZlcltvZmZzZXQgKyAzXTtcbiAgICByZXR1cm4gdmFsIDwgMCA/IDQyOTQ5NjcyOTYgKyB2YWwgOiB2YWw7XG4gIH07XG5cbiAgTVA0RGVtdXhlci53cml0ZVVpbnQzMiA9IGZ1bmN0aW9uIHdyaXRlVWludDMyKGJ1ZmZlciwgb2Zmc2V0LCB2YWx1ZSkge1xuICAgIGlmIChidWZmZXIuZGF0YSkge1xuICAgICAgb2Zmc2V0ICs9IGJ1ZmZlci5zdGFydDtcbiAgICAgIGJ1ZmZlciA9IGJ1ZmZlci5kYXRhO1xuICAgIH1cblxuICAgIGJ1ZmZlcltvZmZzZXRdID0gdmFsdWUgPj4gMjQ7XG4gICAgYnVmZmVyW29mZnNldCArIDFdID0gdmFsdWUgPj4gMTYgJiAweGZmO1xuICAgIGJ1ZmZlcltvZmZzZXQgKyAyXSA9IHZhbHVlID4+IDggJiAweGZmO1xuICAgIGJ1ZmZlcltvZmZzZXQgKyAzXSA9IHZhbHVlICYgMHhmZjtcbiAgfSAvLyBGaW5kIHRoZSBkYXRhIGZvciBhIGJveCBzcGVjaWZpZWQgYnkgaXRzIHBhdGhcbiAgO1xuXG4gIE1QNERlbXV4ZXIuZmluZEJveCA9IGZ1bmN0aW9uIGZpbmRCb3goZGF0YSwgcGF0aCkge1xuICAgIHZhciByZXN1bHRzID0gW10sXG4gICAgICAgIGksXG4gICAgICAgIHNpemUsXG4gICAgICAgIHR5cGUsXG4gICAgICAgIGVuZCxcbiAgICAgICAgc3VicmVzdWx0cyxcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIGVuZGJveDtcblxuICAgIGlmIChkYXRhLmRhdGEpIHtcbiAgICAgIHN0YXJ0ID0gZGF0YS5zdGFydDtcbiAgICAgIGVuZCA9IGRhdGEuZW5kO1xuICAgICAgZGF0YSA9IGRhdGEuZGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnQgPSAwO1xuICAgICAgZW5kID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgIH1cblxuICAgIGlmICghcGF0aC5sZW5ndGgpIHtcbiAgICAgIC8vIHNob3J0LWNpcmN1aXQgdGhlIHNlYXJjaCBmb3IgZW1wdHkgcGF0aHNcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOykge1xuICAgICAgc2l6ZSA9IE1QNERlbXV4ZXIucmVhZFVpbnQzMihkYXRhLCBpKTtcbiAgICAgIHR5cGUgPSBNUDREZW11eGVyLmJpbjJzdHIoZGF0YS5zdWJhcnJheShpICsgNCwgaSArIDgpKTtcbiAgICAgIGVuZGJveCA9IHNpemUgPiAxID8gaSArIHNpemUgOiBlbmQ7XG5cbiAgICAgIGlmICh0eXBlID09PSBwYXRoWzBdKSB7XG4gICAgICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIC8vIHRoaXMgaXMgdGhlIGVuZCBvZiB0aGUgcGF0aCBhbmQgd2UndmUgZm91bmQgdGhlIGJveCB3ZSB3ZXJlXG4gICAgICAgICAgLy8gbG9va2luZyBmb3JcbiAgICAgICAgICByZXN1bHRzLnB1c2goe1xuICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICAgIHN0YXJ0OiBpICsgOCxcbiAgICAgICAgICAgIGVuZDogZW5kYm94XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gcmVjdXJzaXZlbHkgc2VhcmNoIGZvciB0aGUgbmV4dCBib3ggYWxvbmcgdGhlIHBhdGhcbiAgICAgICAgICBzdWJyZXN1bHRzID0gTVA0RGVtdXhlci5maW5kQm94KHtcbiAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICBzdGFydDogaSArIDgsXG4gICAgICAgICAgICBlbmQ6IGVuZGJveFxuICAgICAgICAgIH0sIHBhdGguc2xpY2UoMSkpO1xuXG4gICAgICAgICAgaWYgKHN1YnJlc3VsdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5jb25jYXQoc3VicmVzdWx0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGkgPSBlbmRib3g7XG4gICAgfSAvLyB3ZSd2ZSBmaW5pc2hlZCBzZWFyY2hpbmcgYWxsIG9mIGRhdGFcblxuXG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgTVA0RGVtdXhlci5wYXJzZVNlZ21lbnRJbmRleCA9IGZ1bmN0aW9uIHBhcnNlU2VnbWVudEluZGV4KGluaXRTZWdtZW50KSB7XG4gICAgdmFyIG1vb3YgPSBNUDREZW11eGVyLmZpbmRCb3goaW5pdFNlZ21lbnQsIFsnbW9vdiddKVswXTtcbiAgICB2YXIgbW9vdkVuZE9mZnNldCA9IG1vb3YgPyBtb292LmVuZCA6IG51bGw7IC8vIHdlIG5lZWQgdGhpcyBpbiBjYXNlIHdlIG5lZWQgdG8gY2hvcCBvZiBnYXJiYWdlIG9mIHRoZSBlbmQgb2YgY3VycmVudCBkYXRhXG5cbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBzaWR4ID0gTVA0RGVtdXhlci5maW5kQm94KGluaXRTZWdtZW50LCBbJ3NpZHgnXSk7XG4gICAgdmFyIHJlZmVyZW5jZXM7XG5cbiAgICBpZiAoIXNpZHggfHwgIXNpZHhbMF0pIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJlZmVyZW5jZXMgPSBbXTtcbiAgICBzaWR4ID0gc2lkeFswXTtcbiAgICB2YXIgdmVyc2lvbiA9IHNpZHguZGF0YVswXTsgLy8gc2V0IGluaXRpYWwgb2Zmc2V0LCB3ZSBza2lwIHRoZSByZWZlcmVuY2UgSUQgKG5vdCBuZWVkZWQpXG5cbiAgICBpbmRleCA9IHZlcnNpb24gPT09IDAgPyA4IDogMTY7XG4gICAgdmFyIHRpbWVzY2FsZSA9IE1QNERlbXV4ZXIucmVhZFVpbnQzMihzaWR4LCBpbmRleCk7XG4gICAgaW5kZXggKz0gNDsgLy8gVE9ETzogcGFyc2UgZWFybGllc3RQcmVzZW50YXRpb25UaW1lIGFuZCBmaXJzdE9mZnNldFxuICAgIC8vIHVzdWFsbHkgemVybyBpbiBvdXIgY2FzZVxuXG4gICAgdmFyIGVhcmxpZXN0UHJlc2VudGF0aW9uVGltZSA9IDA7XG4gICAgdmFyIGZpcnN0T2Zmc2V0ID0gMDtcblxuICAgIGlmICh2ZXJzaW9uID09PSAwKSB7XG4gICAgICBpbmRleCArPSA4O1xuICAgIH0gZWxzZSB7XG4gICAgICBpbmRleCArPSAxNjtcbiAgICB9IC8vIHNraXAgcmVzZXJ2ZWRcblxuXG4gICAgaW5kZXggKz0gMjtcbiAgICB2YXIgc3RhcnRCeXRlID0gc2lkeC5lbmQgKyBmaXJzdE9mZnNldDtcbiAgICB2YXIgcmVmZXJlbmNlc0NvdW50ID0gTVA0RGVtdXhlci5yZWFkVWludDE2KHNpZHgsIGluZGV4KTtcbiAgICBpbmRleCArPSAyO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWZlcmVuY2VzQ291bnQ7IGkrKykge1xuICAgICAgdmFyIHJlZmVyZW5jZUluZGV4ID0gaW5kZXg7XG4gICAgICB2YXIgcmVmZXJlbmNlSW5mbyA9IE1QNERlbXV4ZXIucmVhZFVpbnQzMihzaWR4LCByZWZlcmVuY2VJbmRleCk7XG4gICAgICByZWZlcmVuY2VJbmRleCArPSA0O1xuICAgICAgdmFyIHJlZmVyZW5jZVNpemUgPSByZWZlcmVuY2VJbmZvICYgMHg3RkZGRkZGRjtcbiAgICAgIHZhciByZWZlcmVuY2VUeXBlID0gKHJlZmVyZW5jZUluZm8gJiAweDgwMDAwMDAwKSA+Pj4gMzE7XG5cbiAgICAgIGlmIChyZWZlcmVuY2VUeXBlID09PSAxKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignU0lEWCBoYXMgaGllcmFyY2hpY2FsIHJlZmVyZW5jZXMgKG5vdCBzdXBwb3J0ZWQpJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHN1YnNlZ21lbnREdXJhdGlvbiA9IE1QNERlbXV4ZXIucmVhZFVpbnQzMihzaWR4LCByZWZlcmVuY2VJbmRleCk7XG4gICAgICByZWZlcmVuY2VJbmRleCArPSA0O1xuICAgICAgcmVmZXJlbmNlcy5wdXNoKHtcbiAgICAgICAgcmVmZXJlbmNlU2l6ZTogcmVmZXJlbmNlU2l6ZSxcbiAgICAgICAgc3Vic2VnbWVudER1cmF0aW9uOiBzdWJzZWdtZW50RHVyYXRpb24sXG4gICAgICAgIC8vIHVuc2NhbGVkXG4gICAgICAgIGluZm86IHtcbiAgICAgICAgICBkdXJhdGlvbjogc3Vic2VnbWVudER1cmF0aW9uIC8gdGltZXNjYWxlLFxuICAgICAgICAgIHN0YXJ0OiBzdGFydEJ5dGUsXG4gICAgICAgICAgZW5kOiBzdGFydEJ5dGUgKyByZWZlcmVuY2VTaXplIC0gMVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHN0YXJ0Qnl0ZSArPSByZWZlcmVuY2VTaXplOyAvLyBTa2lwcGluZyAxIGJpdCBmb3IgfHN0YXJ0c1dpdGhTYXB8LCAzIGJpdHMgZm9yIHxzYXBUeXBlfCwgYW5kIDI4IGJpdHNcbiAgICAgIC8vIGZvciB8c2FwRGVsdGF8LlxuXG4gICAgICByZWZlcmVuY2VJbmRleCArPSA0OyAvLyBza2lwIHRvIG5leHQgcmVmXG5cbiAgICAgIGluZGV4ID0gcmVmZXJlbmNlSW5kZXg7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGVhcmxpZXN0UHJlc2VudGF0aW9uVGltZTogZWFybGllc3RQcmVzZW50YXRpb25UaW1lLFxuICAgICAgdGltZXNjYWxlOiB0aW1lc2NhbGUsXG4gICAgICB2ZXJzaW9uOiB2ZXJzaW9uLFxuICAgICAgcmVmZXJlbmNlc0NvdW50OiByZWZlcmVuY2VzQ291bnQsXG4gICAgICByZWZlcmVuY2VzOiByZWZlcmVuY2VzLFxuICAgICAgbW9vdkVuZE9mZnNldDogbW9vdkVuZE9mZnNldFxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFBhcnNlcyBhbiBNUDQgaW5pdGlhbGl6YXRpb24gc2VnbWVudCBhbmQgZXh0cmFjdHMgc3RyZWFtIHR5cGUgYW5kXG4gICAqIHRpbWVzY2FsZSB2YWx1ZXMgZm9yIGFueSBkZWNsYXJlZCB0cmFja3MuIFRpbWVzY2FsZSB2YWx1ZXMgaW5kaWNhdGUgdGhlXG4gICAqIG51bWJlciBvZiBjbG9jayB0aWNrcyBwZXIgc2Vjb25kIHRvIGFzc3VtZSBmb3IgdGltZS1iYXNlZCB2YWx1ZXNcbiAgICogZWxzZXdoZXJlIGluIHRoZSBNUDQuXG4gICAqXG4gICAqIFRvIGRldGVybWluZSB0aGUgc3RhcnQgdGltZSBvZiBhbiBNUDQsIHlvdSBuZWVkIHR3byBwaWVjZXMgb2ZcbiAgICogaW5mb3JtYXRpb246IHRoZSB0aW1lc2NhbGUgdW5pdCBhbmQgdGhlIGVhcmxpZXN0IGJhc2UgbWVkaWEgZGVjb2RlXG4gICAqIHRpbWUuIE11bHRpcGxlIHRpbWVzY2FsZXMgY2FuIGJlIHNwZWNpZmllZCB3aXRoaW4gYW4gTVA0IGJ1dCB0aGVcbiAgICogYmFzZSBtZWRpYSBkZWNvZGUgdGltZSBpcyBhbHdheXMgZXhwcmVzc2VkIGluIHRoZSB0aW1lc2NhbGUgZnJvbVxuICAgKiB0aGUgbWVkaWEgaGVhZGVyIGJveCBmb3IgdGhlIHRyYWNrOlxuICAgKiBgYGBcbiAgICogbW9vdiA+IHRyYWsgPiBtZGlhID4gbWRoZC50aW1lc2NhbGVcbiAgICogbW9vdiA+IHRyYWsgPiBtZGlhID4gaGRsclxuICAgKiBgYGBcbiAgICogQHBhcmFtIGluaXQge1VpbnQ4QXJyYXl9IHRoZSBieXRlcyBvZiB0aGUgaW5pdCBzZWdtZW50XG4gICAqIEByZXR1cm4ge29iamVjdH0gYSBoYXNoIG9mIHRyYWNrIHR5cGUgdG8gdGltZXNjYWxlIHZhbHVlcyBvciBudWxsIGlmXG4gICAqIHRoZSBpbml0IHNlZ21lbnQgaXMgbWFsZm9ybWVkLlxuICAgKi9cbiAgO1xuXG4gIE1QNERlbXV4ZXIucGFyc2VJbml0U2VnbWVudCA9IGZ1bmN0aW9uIHBhcnNlSW5pdFNlZ21lbnQoaW5pdFNlZ21lbnQpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIHRyYWtzID0gTVA0RGVtdXhlci5maW5kQm94KGluaXRTZWdtZW50LCBbJ21vb3YnLCAndHJhayddKTtcbiAgICB0cmFrcy5mb3JFYWNoKGZ1bmN0aW9uICh0cmFrKSB7XG4gICAgICB2YXIgdGtoZCA9IE1QNERlbXV4ZXIuZmluZEJveCh0cmFrLCBbJ3RraGQnXSlbMF07XG5cbiAgICAgIGlmICh0a2hkKSB7XG4gICAgICAgIHZhciB2ZXJzaW9uID0gdGtoZC5kYXRhW3RraGQuc3RhcnRdO1xuICAgICAgICB2YXIgaW5kZXggPSB2ZXJzaW9uID09PSAwID8gMTIgOiAyMDtcbiAgICAgICAgdmFyIHRyYWNrSWQgPSBNUDREZW11eGVyLnJlYWRVaW50MzIodGtoZCwgaW5kZXgpO1xuICAgICAgICB2YXIgbWRoZCA9IE1QNERlbXV4ZXIuZmluZEJveCh0cmFrLCBbJ21kaWEnLCAnbWRoZCddKVswXTtcblxuICAgICAgICBpZiAobWRoZCkge1xuICAgICAgICAgIHZlcnNpb24gPSBtZGhkLmRhdGFbbWRoZC5zdGFydF07XG4gICAgICAgICAgaW5kZXggPSB2ZXJzaW9uID09PSAwID8gMTIgOiAyMDtcbiAgICAgICAgICB2YXIgdGltZXNjYWxlID0gTVA0RGVtdXhlci5yZWFkVWludDMyKG1kaGQsIGluZGV4KTtcbiAgICAgICAgICB2YXIgaGRsciA9IE1QNERlbXV4ZXIuZmluZEJveCh0cmFrLCBbJ21kaWEnLCAnaGRsciddKVswXTtcblxuICAgICAgICAgIGlmIChoZGxyKSB7XG4gICAgICAgICAgICB2YXIgaGRsclR5cGUgPSBNUDREZW11eGVyLmJpbjJzdHIoaGRsci5kYXRhLnN1YmFycmF5KGhkbHIuc3RhcnQgKyA4LCBoZGxyLnN0YXJ0ICsgMTIpKTtcbiAgICAgICAgICAgIHZhciB0eXBlID0ge1xuICAgICAgICAgICAgICAnc291bic6ICdhdWRpbycsXG4gICAgICAgICAgICAgICd2aWRlJzogJ3ZpZGVvJ1xuICAgICAgICAgICAgfVtoZGxyVHlwZV07XG5cbiAgICAgICAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgICAgICAgIC8vIGV4dHJhY3QgY29kZWMgaW5mby4gVE9ETyA6IHBhcnNlIGNvZGVjIGRldGFpbHMgdG8gYmUgYWJsZSB0byBidWlsZCBNSU1FIHR5cGVcbiAgICAgICAgICAgICAgdmFyIGNvZGVjQm94ID0gTVA0RGVtdXhlci5maW5kQm94KHRyYWssIFsnbWRpYScsICdtaW5mJywgJ3N0YmwnLCAnc3RzZCddKTtcblxuICAgICAgICAgICAgICBpZiAoY29kZWNCb3gubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29kZWNCb3ggPSBjb2RlY0JveFswXTtcbiAgICAgICAgICAgICAgICB2YXIgY29kZWNUeXBlID0gTVA0RGVtdXhlci5iaW4yc3RyKGNvZGVjQm94LmRhdGEuc3ViYXJyYXkoY29kZWNCb3guc3RhcnQgKyAxMiwgY29kZWNCb3guc3RhcnQgKyAxNikpO1xuICAgICAgICAgICAgICAgIF91dGlsc19sb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1tcImxvZ2dlclwiXS5sb2coXCJNUDREZW11eGVyOlwiICsgdHlwZSArIFwiOlwiICsgY29kZWNUeXBlICsgXCIgZm91bmRcIik7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXN1bHRbdHJhY2tJZF0gPSB7XG4gICAgICAgICAgICAgICAgdGltZXNjYWxlOiB0aW1lc2NhbGUsXG4gICAgICAgICAgICAgICAgdHlwZTogdHlwZVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICByZXN1bHRbdHlwZV0gPSB7XG4gICAgICAgICAgICAgICAgdGltZXNjYWxlOiB0aW1lc2NhbGUsXG4gICAgICAgICAgICAgICAgaWQ6IHRyYWNrSWRcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIC8qKlxuICAqIERldGVybWluZSB0aGUgYmFzZSBtZWRpYSBkZWNvZGUgc3RhcnQgdGltZSwgaW4gc2Vjb25kcywgZm9yIGFuIE1QNFxuICAqIGZyYWdtZW50LiBJZiBtdWx0aXBsZSBmcmFnbWVudHMgYXJlIHNwZWNpZmllZCwgdGhlIGVhcmxpZXN0IHRpbWUgaXNcbiAgKiByZXR1cm5lZC5cbiAgKlxuICAqIFRoZSBiYXNlIG1lZGlhIGRlY29kZSB0aW1lIGNhbiBiZSBwYXJzZWQgZnJvbSB0cmFjayBmcmFnbWVudFxuICAqIG1ldGFkYXRhOlxuICAqIGBgYFxuICAqIG1vb2YgPiB0cmFmID4gdGZkdC5iYXNlTWVkaWFEZWNvZGVUaW1lXG4gICogYGBgXG4gICogSXQgcmVxdWlyZXMgdGhlIHRpbWVzY2FsZSB2YWx1ZSBmcm9tIHRoZSBtZGhkIHRvIGludGVycHJldC5cbiAgKlxuICAqIEBwYXJhbSB0aW1lc2NhbGUge29iamVjdH0gYSBoYXNoIG9mIHRyYWNrIGlkcyB0byB0aW1lc2NhbGUgdmFsdWVzLlxuICAqIEByZXR1cm4ge251bWJlcn0gdGhlIGVhcmxpZXN0IGJhc2UgbWVkaWEgZGVjb2RlIHN0YXJ0IHRpbWUgZm9yIHRoZVxuICAqIGZyYWdtZW50LCBpbiBzZWNvbmRzXG4gICovXG4gIDtcblxuICBNUDREZW11eGVyLmdldFN0YXJ0RFRTID0gZnVuY3Rpb24gZ2V0U3RhcnREVFMoaW5pdERhdGEsIGZyYWdtZW50KSB7XG4gICAgdmFyIHRyYWZzLCBiYXNlVGltZXMsIHJlc3VsdDsgLy8gd2UgbmVlZCBpbmZvIGZyb20gdHdvIGNoaWxkcmVuZCBvZiBlYWNoIHRyYWNrIGZyYWdtZW50IGJveFxuXG4gICAgdHJhZnMgPSBNUDREZW11eGVyLmZpbmRCb3goZnJhZ21lbnQsIFsnbW9vZicsICd0cmFmJ10pOyAvLyBkZXRlcm1pbmUgdGhlIHN0YXJ0IHRpbWVzIGZvciBlYWNoIHRyYWNrXG5cbiAgICBiYXNlVGltZXMgPSBbXS5jb25jYXQuYXBwbHkoW10sIHRyYWZzLm1hcChmdW5jdGlvbiAodHJhZikge1xuICAgICAgcmV0dXJuIE1QNERlbXV4ZXIuZmluZEJveCh0cmFmLCBbJ3RmaGQnXSkubWFwKGZ1bmN0aW9uICh0ZmhkKSB7XG4gICAgICAgIHZhciBpZCwgc2NhbGUsIGJhc2VUaW1lOyAvLyBnZXQgdGhlIHRyYWNrIGlkIGZyb20gdGhlIHRmaGRcblxuICAgICAgICBpZCA9IE1QNERlbXV4ZXIucmVhZFVpbnQzMih0ZmhkLCA0KTsgLy8gYXNzdW1lIGEgOTBrSHogY2xvY2sgaWYgbm8gdGltZXNjYWxlIHdhcyBzcGVjaWZpZWRcblxuICAgICAgICBzY2FsZSA9IGluaXREYXRhW2lkXS50aW1lc2NhbGUgfHwgOTBlMzsgLy8gZ2V0IHRoZSBiYXNlIG1lZGlhIGRlY29kZSB0aW1lIGZyb20gdGhlIHRmZHRcblxuICAgICAgICBiYXNlVGltZSA9IE1QNERlbXV4ZXIuZmluZEJveCh0cmFmLCBbJ3RmZHQnXSkubWFwKGZ1bmN0aW9uICh0ZmR0KSB7XG4gICAgICAgICAgdmFyIHZlcnNpb24sIHJlc3VsdDtcbiAgICAgICAgICB2ZXJzaW9uID0gdGZkdC5kYXRhW3RmZHQuc3RhcnRdO1xuICAgICAgICAgIHJlc3VsdCA9IE1QNERlbXV4ZXIucmVhZFVpbnQzMih0ZmR0LCA0KTtcblxuICAgICAgICAgIGlmICh2ZXJzaW9uID09PSAxKSB7XG4gICAgICAgICAgICByZXN1bHQgKj0gTWF0aC5wb3coMiwgMzIpO1xuICAgICAgICAgICAgcmVzdWx0ICs9IE1QNERlbXV4ZXIucmVhZFVpbnQzMih0ZmR0LCA4KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9KVswXTsgLy8gY29udmVydCBiYXNlIHRpbWUgdG8gc2Vjb25kc1xuXG4gICAgICAgIHJldHVybiBiYXNlVGltZSAvIHNjYWxlO1xuICAgICAgfSk7XG4gICAgfSkpOyAvLyByZXR1cm4gdGhlIG1pbmltdW1cblxuICAgIHJlc3VsdCA9IE1hdGgubWluLmFwcGx5KG51bGwsIGJhc2VUaW1lcyk7XG4gICAgcmV0dXJuIGlzRmluaXRlKHJlc3VsdCkgPyByZXN1bHQgOiAwO1xuICB9O1xuXG4gIE1QNERlbXV4ZXIub2Zmc2V0U3RhcnREVFMgPSBmdW5jdGlvbiBvZmZzZXRTdGFydERUUyhpbml0RGF0YSwgZnJhZ21lbnQsIHRpbWVPZmZzZXQpIHtcbiAgICBNUDREZW11eGVyLmZpbmRCb3goZnJhZ21lbnQsIFsnbW9vZicsICd0cmFmJ10pLm1hcChmdW5jdGlvbiAodHJhZikge1xuICAgICAgcmV0dXJuIE1QNERlbXV4ZXIuZmluZEJveCh0cmFmLCBbJ3RmaGQnXSkubWFwKGZ1bmN0aW9uICh0ZmhkKSB7XG4gICAgICAgIC8vIGdldCB0aGUgdHJhY2sgaWQgZnJvbSB0aGUgdGZoZFxuICAgICAgICB2YXIgaWQgPSBNUDREZW11eGVyLnJlYWRVaW50MzIodGZoZCwgNCk7IC8vIGFzc3VtZSBhIDkwa0h6IGNsb2NrIGlmIG5vIHRpbWVzY2FsZSB3YXMgc3BlY2lmaWVkXG5cbiAgICAgICAgdmFyIHRpbWVzY2FsZSA9IGluaXREYXRhW2lkXS50aW1lc2NhbGUgfHwgOTBlMzsgLy8gZ2V0IHRoZSBiYXNlIG1lZGlhIGRlY29kZSB0aW1lIGZyb20gdGhlIHRmZHRcblxuICAgICAgICBNUDREZW11eGVyLmZpbmRCb3godHJhZiwgWyd0ZmR0J10pLm1hcChmdW5jdGlvbiAodGZkdCkge1xuICAgICAgICAgIHZhciB2ZXJzaW9uID0gdGZkdC5kYXRhW3RmZHQuc3RhcnRdO1xuICAgICAgICAgIHZhciBiYXNlTWVkaWFEZWNvZGVUaW1lID0gTVA0RGVtdXhlci5yZWFkVWludDMyKHRmZHQsIDQpO1xuXG4gICAgICAgICAgaWYgKHZlcnNpb24gPT09IDApIHtcbiAgICAgICAgICAgIE1QNERlbXV4ZXIud3JpdGVVaW50MzIodGZkdCwgNCwgYmFzZU1lZGlhRGVjb2RlVGltZSAtIHRpbWVPZmZzZXQgKiB0aW1lc2NhbGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBiYXNlTWVkaWFEZWNvZGVUaW1lICo9IE1hdGgucG93KDIsIDMyKTtcbiAgICAgICAgICAgIGJhc2VNZWRpYURlY29kZVRpbWUgKz0gTVA0RGVtdXhlci5yZWFkVWludDMyKHRmZHQsIDgpO1xuICAgICAgICAgICAgYmFzZU1lZGlhRGVjb2RlVGltZSAtPSB0aW1lT2Zmc2V0ICogdGltZXNjYWxlO1xuICAgICAgICAgICAgYmFzZU1lZGlhRGVjb2RlVGltZSA9IE1hdGgubWF4KGJhc2VNZWRpYURlY29kZVRpbWUsIDApO1xuICAgICAgICAgICAgdmFyIHVwcGVyID0gTWF0aC5mbG9vcihiYXNlTWVkaWFEZWNvZGVUaW1lIC8gKFVJTlQzMl9NQVggKyAxKSk7XG4gICAgICAgICAgICB2YXIgbG93ZXIgPSBNYXRoLmZsb29yKGJhc2VNZWRpYURlY29kZVRpbWUgJSAoVUlOVDMyX01BWCArIDEpKTtcbiAgICAgICAgICAgIE1QNERlbXV4ZXIud3JpdGVVaW50MzIodGZkdCwgNCwgdXBwZXIpO1xuICAgICAgICAgICAgTVA0RGVtdXhlci53cml0ZVVpbnQzMih0ZmR0LCA4LCBsb3dlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9IC8vIGZlZWQgaW5jb21pbmcgZGF0YSB0byB0aGUgZnJvbnQgb2YgdGhlIHBhcnNpbmcgcGlwZWxpbmVcbiAgO1xuXG4gIF9wcm90by5hcHBlbmQgPSBmdW5jdGlvbiBhcHBlbmQoZGF0YSwgdGltZU9mZnNldCwgY29udGlndW91cywgYWNjdXJhdGVUaW1lT2Zmc2V0KSB7XG4gICAgdmFyIGluaXREYXRhID0gdGhpcy5pbml0RGF0YTtcblxuICAgIGlmICghaW5pdERhdGEpIHtcbiAgICAgIHRoaXMucmVzZXRJbml0U2VnbWVudChkYXRhLCB0aGlzLmF1ZGlvQ29kZWMsIHRoaXMudmlkZW9Db2RlYywgZmFsc2UpO1xuICAgICAgaW5pdERhdGEgPSB0aGlzLmluaXREYXRhO1xuICAgIH1cblxuICAgIHZhciBzdGFydERUUyxcbiAgICAgICAgaW5pdFBUUyA9IHRoaXMuaW5pdFBUUztcblxuICAgIGlmIChpbml0UFRTID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBfc3RhcnREVFMgPSBNUDREZW11eGVyLmdldFN0YXJ0RFRTKGluaXREYXRhLCBkYXRhKTtcblxuICAgICAgdGhpcy5pbml0UFRTID0gaW5pdFBUUyA9IF9zdGFydERUUyAtIHRpbWVPZmZzZXQ7XG4gICAgICB0aGlzLm9ic2VydmVyLnRyaWdnZXIoX2V2ZW50c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fW1wiZGVmYXVsdFwiXS5JTklUX1BUU19GT1VORCwge1xuICAgICAgICBpbml0UFRTOiBpbml0UFRTXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBNUDREZW11eGVyLm9mZnNldFN0YXJ0RFRTKGluaXREYXRhLCBkYXRhLCBpbml0UFRTKTtcbiAgICBzdGFydERUUyA9IE1QNERlbXV4ZXIuZ2V0U3RhcnREVFMoaW5pdERhdGEsIGRhdGEpO1xuICAgIHRoaXMucmVtdXhlci5yZW11eChpbml0RGF0YS5hdWRpbywgaW5pdERhdGEudmlkZW8sIG51bGwsIG51bGwsIHN0YXJ0RFRTLCBjb250aWd1b3VzLCBhY2N1cmF0ZVRpbWVPZmZzZXQsIGRhdGEpO1xuICB9O1xuXG4gIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHt9O1xuXG4gIHJldHVybiBNUDREZW11eGVyO1xufSgpO1xuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXCJkZWZhdWx0XCJdID0gKE1QNERlbXV4ZXIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9lcnJvcnMudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2Vycm9ycy50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogRXJyb3JUeXBlcywgRXJyb3JEZXRhaWxzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkVycm9yVHlwZXNcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBFcnJvclR5cGVzOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJFcnJvckRldGFpbHNcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBFcnJvckRldGFpbHM7IH0pO1xudmFyIEVycm9yVHlwZXM7XG4vKipcbiAqIEBlbnVtIHtFcnJvckRldGFpbHN9XG4gKiBAdHlwZWRlZiB7c3RyaW5nfSBFcnJvckRldGFpbFxuICovXG5cbihmdW5jdGlvbiAoRXJyb3JUeXBlcykge1xuICBFcnJvclR5cGVzW1wiTkVUV09SS19FUlJPUlwiXSA9IFwibmV0d29ya0Vycm9yXCI7XG4gIEVycm9yVHlwZXNbXCJNRURJQV9FUlJPUlwiXSA9IFwibWVkaWFFcnJvclwiO1xuICBFcnJvclR5cGVzW1wiS0VZX1NZU1RFTV9FUlJPUlwiXSA9IFwia2V5U3lzdGVtRXJyb3JcIjtcbiAgRXJyb3JUeXBlc1tcIk1VWF9FUlJPUlwiXSA9IFwibXV4RXJyb3JcIjtcbiAgRXJyb3JUeXBlc1tcIk9USEVSX0VSUk9SXCJdID0gXCJvdGhlckVycm9yXCI7XG59KShFcnJvclR5cGVzIHx8IChFcnJvclR5cGVzID0ge30pKTtcblxudmFyIEVycm9yRGV0YWlscztcblxuKGZ1bmN0aW9uIChFcnJvckRldGFpbHMpIHtcbiAgRXJyb3JEZXRhaWxzW1wiS0VZX1NZU1RFTV9OT19LRVlTXCJdID0gXCJrZXlTeXN0ZW1Ob0tleXNcIjtcbiAgRXJyb3JEZXRhaWxzW1wiS0VZX1NZU1RFTV9OT19BQ0NFU1NcIl0gPSBcImtleVN5c3RlbU5vQWNjZXNzXCI7XG4gIEVycm9yRGV0YWlsc1tcIktFWV9TWVNURU1fTk9fU0VTU0lPTlwiXSA9IFwia2V5U3lzdGVtTm9TZXNzaW9uXCI7XG4gIEVycm9yRGV0YWlsc1tcIktFWV9TWVNURU1fTElDRU5TRV9SRVFVRVNUX0ZBSUxFRFwiXSA9IFwia2V5U3lzdGVtTGljZW5zZVJlcXVlc3RGYWlsZWRcIjtcbiAgRXJyb3JEZXRhaWxzW1wiS0VZX1NZU1RFTV9OT19JTklUX0RBVEFcIl0gPSBcImtleVN5c3RlbU5vSW5pdERhdGFcIjtcbiAgRXJyb3JEZXRhaWxzW1wiTUFOSUZFU1RfTE9BRF9FUlJPUlwiXSA9IFwibWFuaWZlc3RMb2FkRXJyb3JcIjtcbiAgRXJyb3JEZXRhaWxzW1wiTUFOSUZFU1RfTE9BRF9USU1FT1VUXCJdID0gXCJtYW5pZmVzdExvYWRUaW1lT3V0XCI7XG4gIEVycm9yRGV0YWlsc1tcIk1BTklGRVNUX1BBUlNJTkdfRVJST1JcIl0gPSBcIm1hbmlmZXN0UGFyc2luZ0Vycm9yXCI7XG4gIEVycm9yRGV0YWlsc1tcIk1BTklGRVNUX0lOQ09NUEFUSUJMRV9DT0RFQ1NfRVJST1JcIl0gPSBcIm1hbmlmZXN0SW5jb21wYXRpYmxlQ29kZWNzRXJyb3JcIjtcbiAgRXJyb3JEZXRhaWxzW1wiTEVWRUxfRU1QVFlfRVJST1JcIl0gPSBcImxldmVsRW1wdHlFcnJvclwiO1xuICBFcnJvckRldGFpbHNbXCJMRVZFTF9MT0FEX0VSUk9SXCJdID0gXCJsZXZlbExvYWRFcnJvclwiO1xuICBFcnJvckRldGFpbHNbXCJMRVZFTF9MT0FEX1RJTUVPVVRcIl0gPSBcImxldmVsTG9hZFRpbWVPdXRcIjtcbiAgRXJyb3JEZXRhaWxzW1wiTEVWRUxfU1dJVENIX0VSUk9SXCJdID0gXCJsZXZlbFN3aXRjaEVycm9yXCI7XG4gIEVycm9yRGV0YWlsc1tcIkFVRElPX1RSQUNLX0xPQURfRVJST1JcIl0gPSBcImF1ZGlvVHJhY2tMb2FkRXJyb3JcIjtcbiAgRXJyb3JEZXRhaWxzW1wiQVVESU9fVFJBQ0tfTE9BRF9USU1FT1VUXCJdID0gXCJhdWRpb1RyYWNrTG9hZFRpbWVPdXRcIjtcbiAgRXJyb3JEZXRhaWxzW1wiRlJBR19MT0FEX0VSUk9SXCJdID0gXCJmcmFnTG9hZEVycm9yXCI7XG4gIEVycm9yRGV0YWlsc1tcIkZSQUdfTE9BRF9USU1FT1VUXCJdID0gXCJmcmFnTG9hZFRpbWVPdXRcIjtcbiAgRXJyb3JEZXRhaWxzW1wiRlJBR19ERUNSWVBUX0VSUk9SXCJdID0gXCJmcmFnRGVjcnlwdEVycm9yXCI7XG4gIEVycm9yRGV0YWlsc1tcIkZSQUdfUEFSU0lOR19FUlJPUlwiXSA9IFwiZnJhZ1BhcnNpbmdFcnJvclwiO1xuICBFcnJvckRldGFpbHNbXCJSRU1VWF9BTExPQ19FUlJPUlwiXSA9IFwicmVtdXhBbGxvY0Vycm9yXCI7XG4gIEVycm9yRGV0YWlsc1tcIktFWV9MT0FEX0VSUk9SXCJdID0gXCJrZXlMb2FkRXJyb3JcIjtcbiAgRXJyb3JEZXRhaWxzW1wiS0VZX0xPQURfVElNRU9VVFwiXSA9IFwia2V5TG9hZFRpbWVPdXRcIjtcbiAgRXJyb3JEZXRhaWxzW1wiQlVGRkVSX0FERF9DT0RFQ19FUlJPUlwiXSA9IFwiYnVmZmVyQWRkQ29kZWNFcnJvclwiO1xuICBFcnJvckRldGFpbHNbXCJCVUZGRVJfQVBQRU5EX0VSUk9SXCJdID0gXCJidWZmZXJBcHBlbmRFcnJvclwiO1xuICBFcnJvckRldGFpbHNbXCJCVUZGRVJfQVBQRU5ESU5HX0VSUk9SXCJdID0gXCJidWZmZXJBcHBlbmRpbmdFcnJvclwiO1xuICBFcnJvckRldGFpbHNbXCJCVUZGRVJfU1RBTExFRF9FUlJPUlwiXSA9IFwiYnVmZmVyU3RhbGxlZEVycm9yXCI7XG4gIEVycm9yRGV0YWlsc1tcIkJVRkZFUl9GVUxMX0VSUk9SXCJdID0gXCJidWZmZXJGdWxsRXJyb3JcIjtcbiAgRXJyb3JEZXRhaWxzW1wiQlVGRkVSX1NFRUtfT1ZFUl9IT0xFXCJdID0gXCJidWZmZXJTZWVrT3ZlckhvbGVcIjtcbiAgRXJyb3JEZXRhaWxzW1wiQlVGRkVSX05VREdFX09OX1NUQUxMXCJdID0gXCJidWZmZXJOdWRnZU9uU3RhbGxcIjtcbiAgRXJyb3JEZXRhaWxzW1wiSU5URVJOQUxfRVhDRVBUSU9OXCJdID0gXCJpbnRlcm5hbEV4Y2VwdGlvblwiO1xufSkoRXJyb3JEZXRhaWxzIHx8IChFcnJvckRldGFpbHMgPSB7fSkpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9ldmVudHMuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2V2ZW50cy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogZGVmYXVsdCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qKlxuICogQHJlYWRvbmx5XG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG52YXIgSGxzRXZlbnRzID0ge1xuICAvLyBmaXJlZCBiZWZvcmUgTWVkaWFTb3VyY2UgaXMgYXR0YWNoaW5nIHRvIG1lZGlhIGVsZW1lbnQgLSBkYXRhOiB7IG1lZGlhIH1cbiAgTUVESUFfQVRUQUNISU5HOiAnaGxzTWVkaWFBdHRhY2hpbmcnLFxuICAvLyBmaXJlZCB3aGVuIE1lZGlhU291cmNlIGhhcyBiZWVuIHN1Y2Nlc2Z1bGx5IGF0dGFjaGVkIHRvIG1lZGlhIGVsZW1lbnQgLSBkYXRhOiB7IH1cbiAgTUVESUFfQVRUQUNIRUQ6ICdobHNNZWRpYUF0dGFjaGVkJyxcbiAgLy8gZmlyZWQgYmVmb3JlIGRldGFjaGluZyBNZWRpYVNvdXJjZSBmcm9tIG1lZGlhIGVsZW1lbnQgLSBkYXRhOiB7IH1cbiAgTUVESUFfREVUQUNISU5HOiAnaGxzTWVkaWFEZXRhY2hpbmcnLFxuICAvLyBmaXJlZCB3aGVuIE1lZGlhU291cmNlIGhhcyBiZWVuIGRldGFjaGVkIGZyb20gbWVkaWEgZWxlbWVudCAtIGRhdGE6IHsgfVxuICBNRURJQV9ERVRBQ0hFRDogJ2hsc01lZGlhRGV0YWNoZWQnLFxuICAvLyBmaXJlZCB3aGVuIHdlIGJ1ZmZlciBpcyBnb2luZyB0byBiZSByZXNldCAtIGRhdGE6IHsgfVxuICBCVUZGRVJfUkVTRVQ6ICdobHNCdWZmZXJSZXNldCcsXG4gIC8vIGZpcmVkIHdoZW4gd2Uga25vdyBhYm91dCB0aGUgY29kZWNzIHRoYXQgd2UgbmVlZCBidWZmZXJzIGZvciB0byBwdXNoIGludG8gLSBkYXRhOiB7dHJhY2tzIDogeyBjb250YWluZXIsIGNvZGVjLCBsZXZlbENvZGVjLCBpbml0U2VnbWVudCwgbWV0YWRhdGEgfX1cbiAgQlVGRkVSX0NPREVDUzogJ2hsc0J1ZmZlckNvZGVjcycsXG4gIC8vIGZpcmVkIHdoZW4gc291cmNlYnVmZmVycyBoYXZlIGJlZW4gY3JlYXRlZCAtIGRhdGE6IHsgdHJhY2tzIDogdHJhY2tzIH1cbiAgQlVGRkVSX0NSRUFURUQ6ICdobHNCdWZmZXJDcmVhdGVkJyxcbiAgLy8gZmlyZWQgd2hlbiB3ZSBhcHBlbmQgYSBzZWdtZW50IHRvIHRoZSBidWZmZXIgLSBkYXRhOiB7IHNlZ21lbnQ6IHNlZ21lbnQgb2JqZWN0IH1cbiAgQlVGRkVSX0FQUEVORElORzogJ2hsc0J1ZmZlckFwcGVuZGluZycsXG4gIC8vIGZpcmVkIHdoZW4gd2UgYXJlIGRvbmUgd2l0aCBhcHBlbmRpbmcgYSBtZWRpYSBzZWdtZW50IHRvIHRoZSBidWZmZXIgLSBkYXRhIDogeyBwYXJlbnQgOiBzZWdtZW50IHBhcmVudCB0aGF0IHRyaWdnZXJlZCBCVUZGRVJfQVBQRU5ESU5HLCBwZW5kaW5nIDogbmIgb2Ygc2VnbWVudHMgd2FpdGluZyBmb3IgYXBwZW5kaW5nIGZvciB0aGlzIHNlZ21lbnQgcGFyZW50fVxuICBCVUZGRVJfQVBQRU5ERUQ6ICdobHNCdWZmZXJBcHBlbmRlZCcsXG4gIC8vIGZpcmVkIHdoZW4gdGhlIHN0cmVhbSBpcyBmaW5pc2hlZCBhbmQgd2Ugd2FudCB0byBub3RpZnkgdGhlIG1lZGlhIGJ1ZmZlciB0aGF0IHRoZXJlIHdpbGwgYmUgbm8gbW9yZSBkYXRhIC0gZGF0YTogeyB9XG4gIEJVRkZFUl9FT1M6ICdobHNCdWZmZXJFb3MnLFxuICAvLyBmaXJlZCB3aGVuIHRoZSBtZWRpYSBidWZmZXIgc2hvdWxkIGJlIGZsdXNoZWQgLSBkYXRhIHsgc3RhcnRPZmZzZXQsIGVuZE9mZnNldCB9XG4gIEJVRkZFUl9GTFVTSElORzogJ2hsc0J1ZmZlckZsdXNoaW5nJyxcbiAgLy8gZmlyZWQgd2hlbiB0aGUgbWVkaWEgYnVmZmVyIGhhcyBiZWVuIGZsdXNoZWQgLSBkYXRhOiB7IH1cbiAgQlVGRkVSX0ZMVVNIRUQ6ICdobHNCdWZmZXJGbHVzaGVkJyxcbiAgLy8gZmlyZWQgdG8gc2lnbmFsIHRoYXQgYSBtYW5pZmVzdCBsb2FkaW5nIHN0YXJ0cyAtIGRhdGE6IHsgdXJsIDogbWFuaWZlc3RVUkx9XG4gIE1BTklGRVNUX0xPQURJTkc6ICdobHNNYW5pZmVzdExvYWRpbmcnLFxuICAvLyBmaXJlZCBhZnRlciBtYW5pZmVzdCBoYXMgYmVlbiBsb2FkZWQgLSBkYXRhOiB7IGxldmVscyA6IFthdmFpbGFibGUgcXVhbGl0eSBsZXZlbHNdLCBhdWRpb1RyYWNrcyA6IFsgYXZhaWxhYmxlIGF1ZGlvIHRyYWNrc10sIHVybCA6IG1hbmlmZXN0VVJMLCBzdGF0cyA6IHsgdHJlcXVlc3QsIHRmaXJzdCwgdGxvYWQsIG10aW1lfX1cbiAgTUFOSUZFU1RfTE9BREVEOiAnaGxzTWFuaWZlc3RMb2FkZWQnLFxuICAvLyBmaXJlZCBhZnRlciBtYW5pZmVzdCBoYXMgYmVlbiBwYXJzZWQgLSBkYXRhOiB7IGxldmVscyA6IFthdmFpbGFibGUgcXVhbGl0eSBsZXZlbHNdLCBmaXJzdExldmVsIDogaW5kZXggb2YgZmlyc3QgcXVhbGl0eSBsZXZlbCBhcHBlYXJpbmcgaW4gTWFuaWZlc3R9XG4gIE1BTklGRVNUX1BBUlNFRDogJ2hsc01hbmlmZXN0UGFyc2VkJyxcbiAgLy8gZmlyZWQgd2hlbiBhIGxldmVsIHN3aXRjaCBpcyByZXF1ZXN0ZWQgLSBkYXRhOiB7IGxldmVsIDogaWQgb2YgbmV3IGxldmVsIH1cbiAgTEVWRUxfU1dJVENISU5HOiAnaGxzTGV2ZWxTd2l0Y2hpbmcnLFxuICAvLyBmaXJlZCB3aGVuIGEgbGV2ZWwgc3dpdGNoIGlzIGVmZmVjdGl2ZSAtIGRhdGE6IHsgbGV2ZWwgOiBpZCBvZiBuZXcgbGV2ZWwgfVxuICBMRVZFTF9TV0lUQ0hFRDogJ2hsc0xldmVsU3dpdGNoZWQnLFxuICAvLyBmaXJlZCB3aGVuIGEgbGV2ZWwgcGxheWxpc3QgbG9hZGluZyBzdGFydHMgLSBkYXRhOiB7IHVybCA6IGxldmVsIFVSTCwgbGV2ZWwgOiBpZCBvZiBsZXZlbCBiZWluZyBsb2FkZWR9XG4gIExFVkVMX0xPQURJTkc6ICdobHNMZXZlbExvYWRpbmcnLFxuICAvLyBmaXJlZCB3aGVuIGEgbGV2ZWwgcGxheWxpc3QgbG9hZGluZyBmaW5pc2hlcyAtIGRhdGE6IHsgZGV0YWlscyA6IGxldmVsRGV0YWlscyBvYmplY3QsIGxldmVsIDogaWQgb2YgbG9hZGVkIGxldmVsLCBzdGF0cyA6IHsgdHJlcXVlc3QsIHRmaXJzdCwgdGxvYWQsIG10aW1lfSB9XG4gIExFVkVMX0xPQURFRDogJ2hsc0xldmVsTG9hZGVkJyxcbiAgLy8gZmlyZWQgd2hlbiBhIGxldmVsJ3MgZGV0YWlscyBoYXZlIGJlZW4gdXBkYXRlZCBiYXNlZCBvbiBwcmV2aW91cyBkZXRhaWxzLCBhZnRlciBpdCBoYXMgYmVlbiBsb2FkZWQgLSBkYXRhOiB7IGRldGFpbHMgOiBsZXZlbERldGFpbHMgb2JqZWN0LCBsZXZlbCA6IGlkIG9mIHVwZGF0ZWQgbGV2ZWwgfVxuICBMRVZFTF9VUERBVEVEOiAnaGxzTGV2ZWxVcGRhdGVkJyxcbiAgLy8gZmlyZWQgd2hlbiBhIGxldmVsJ3MgUFRTIGluZm9ybWF0aW9uIGhhcyBiZWVuIHVwZGF0ZWQgYWZ0ZXIgcGFyc2luZyBhIGZyYWdtZW50IC0gZGF0YTogeyBkZXRhaWxzIDogbGV2ZWxEZXRhaWxzIG9iamVjdCwgbGV2ZWwgOiBpZCBvZiB1cGRhdGVkIGxldmVsLCBkcmlmdDogUFRTIGRyaWZ0IG9ic2VydmVkIHdoZW4gcGFyc2luZyBsYXN0IGZyYWdtZW50IH1cbiAgTEVWRUxfUFRTX1VQREFURUQ6ICdobHNMZXZlbFB0c1VwZGF0ZWQnLFxuICAvLyBmaXJlZCB0byBub3RpZnkgdGhhdCBsZXZlbHMgaGF2ZSBjaGFuZ2VkIGFmdGVyIHJlbW92aW5nIGEgbGV2ZWwgLSBkYXRhOiB7IGxldmVscyA6IFthdmFpbGFibGUgcXVhbGl0eSBsZXZlbHNdIH1cbiAgTEVWRUxTX1VQREFURUQ6ICdobHNMZXZlbHNVcGRhdGVkJyxcbiAgLy8gZmlyZWQgdG8gbm90aWZ5IHRoYXQgYXVkaW8gdHJhY2sgbGlzdHMgaGFzIGJlZW4gdXBkYXRlZCAtIGRhdGE6IHsgYXVkaW9UcmFja3MgOiBhdWRpb1RyYWNrcyB9XG4gIEFVRElPX1RSQUNLU19VUERBVEVEOiAnaGxzQXVkaW9UcmFja3NVcGRhdGVkJyxcbiAgLy8gZmlyZWQgd2hlbiBhbiBhdWRpbyB0cmFjayBzd2l0Y2hpbmcgaXMgcmVxdWVzdGVkIC0gZGF0YTogeyBpZCA6IGF1ZGlvIHRyYWNrIGlkIH1cbiAgQVVESU9fVFJBQ0tfU1dJVENISU5HOiAnaGxzQXVkaW9UcmFja1N3aXRjaGluZycsXG4gIC8vIGZpcmVkIHdoZW4gYW4gYXVkaW8gdHJhY2sgc3dpdGNoIGFjdHVhbGx5IG9jY3VycyAtIGRhdGE6IHsgaWQgOiBhdWRpbyB0cmFjayBpZCB9XG4gIEFVRElPX1RSQUNLX1NXSVRDSEVEOiAnaGxzQXVkaW9UcmFja1N3aXRjaGVkJyxcbiAgLy8gZmlyZWQgd2hlbiBhbiBhdWRpbyB0cmFjayBsb2FkaW5nIHN0YXJ0cyAtIGRhdGE6IHsgdXJsIDogYXVkaW8gdHJhY2sgVVJMLCBpZCA6IGF1ZGlvIHRyYWNrIGlkIH1cbiAgQVVESU9fVFJBQ0tfTE9BRElORzogJ2hsc0F1ZGlvVHJhY2tMb2FkaW5nJyxcbiAgLy8gZmlyZWQgd2hlbiBhbiBhdWRpbyB0cmFjayBsb2FkaW5nIGZpbmlzaGVzIC0gZGF0YTogeyBkZXRhaWxzIDogbGV2ZWxEZXRhaWxzIG9iamVjdCwgaWQgOiBhdWRpbyB0cmFjayBpZCwgc3RhdHMgOiB7IHRyZXF1ZXN0LCB0Zmlyc3QsIHRsb2FkLCBtdGltZSB9IH1cbiAgQVVESU9fVFJBQ0tfTE9BREVEOiAnaGxzQXVkaW9UcmFja0xvYWRlZCcsXG4gIC8vIGZpcmVkIHRvIG5vdGlmeSB0aGF0IHN1YnRpdGxlIHRyYWNrIGxpc3RzIGhhcyBiZWVuIHVwZGF0ZWQgLSBkYXRhOiB7IHN1YnRpdGxlVHJhY2tzIDogc3VidGl0bGVUcmFja3MgfVxuICBTVUJUSVRMRV9UUkFDS1NfVVBEQVRFRDogJ2hsc1N1YnRpdGxlVHJhY2tzVXBkYXRlZCcsXG4gIC8vIGZpcmVkIHdoZW4gYW4gc3VidGl0bGUgdHJhY2sgc3dpdGNoIG9jY3VycyAtIGRhdGE6IHsgaWQgOiBzdWJ0aXRsZSB0cmFjayBpZCB9XG4gIFNVQlRJVExFX1RSQUNLX1NXSVRDSDogJ2hsc1N1YnRpdGxlVHJhY2tTd2l0Y2gnLFxuICAvLyBmaXJlZCB3aGVuIGEgc3VidGl0bGUgdHJhY2sgbG9hZGluZyBzdGFydHMgLSBkYXRhOiB7IHVybCA6IHN1YnRpdGxlIHRyYWNrIFVSTCwgaWQgOiBzdWJ0aXRsZSB0cmFjayBpZCB9XG4gIFNVQlRJVExFX1RSQUNLX0xPQURJTkc6ICdobHNTdWJ0aXRsZVRyYWNrTG9hZGluZycsXG4gIC8vIGZpcmVkIHdoZW4gYSBzdWJ0aXRsZSB0cmFjayBsb2FkaW5nIGZpbmlzaGVzIC0gZGF0YTogeyBkZXRhaWxzIDogbGV2ZWxEZXRhaWxzIG9iamVjdCwgaWQgOiBzdWJ0aXRsZSB0cmFjayBpZCwgc3RhdHMgOiB7IHRyZXF1ZXN0LCB0Zmlyc3QsIHRsb2FkLCBtdGltZSB9IH1cbiAgU1VCVElUTEVfVFJBQ0tfTE9BREVEOiAnaGxzU3VidGl0bGVUcmFja0xvYWRlZCcsXG4gIC8vIGZpcmVkIHdoZW4gYSBzdWJ0aXRsZSBmcmFnbWVudCBoYXMgYmVlbiBwcm9jZXNzZWQgLSBkYXRhOiB7IHN1Y2Nlc3MgOiBib29sZWFuLCBmcmFnIDogdGhlIHByb2Nlc3NlZCBmcmFnIH1cbiAgU1VCVElUTEVfRlJBR19QUk9DRVNTRUQ6ICdobHNTdWJ0aXRsZUZyYWdQcm9jZXNzZWQnLFxuICAvLyBmaXJlZCB3aGVuIGEgc2V0IG9mIFZUVEN1ZXMgdG8gYmUgbWFuYWdlZCBleHRlcm5hbGx5IGhhcyBiZWVuIHBhcnNlZCAtIGRhdGE6IHsgdHlwZTogc3RyaW5nLCB0cmFjazogc3RyaW5nLCBjdWVzOiBbIFZUVEN1ZSBdIH1cbiAgQ1VFU19QQVJTRUQ6ICdobHNDdWVzUGFyc2VkJyxcbiAgLy8gZmlyZWQgd2hlbiBhIHRleHQgdHJhY2sgdG8gYmUgbWFuYWdlZCBleHRlcm5hbGx5IGlzIGZvdW5kIC0gZGF0YTogeyB0cmFja3M6IFsgeyBsYWJlbDogc3RyaW5nLCBraW5kOiBzdHJpbmcsIGRlZmF1bHQ6IGJvb2xlYW4gfSBdIH1cbiAgTk9OX05BVElWRV9URVhUX1RSQUNLU19GT1VORDogJ2hsc05vbk5hdGl2ZVRleHRUcmFja3NGb3VuZCcsXG4gIC8vIGZpcmVkIHdoZW4gdGhlIGZpcnN0IHRpbWVzdGFtcCBpcyBmb3VuZCAtIGRhdGE6IHsgaWQgOiBkZW11eGVyIGlkLCBpbml0UFRTOiBpbml0UFRTLCBmcmFnIDogZnJhZ21lbnQgb2JqZWN0IH1cbiAgSU5JVF9QVFNfRk9VTkQ6ICdobHNJbml0UHRzRm91bmQnLFxuICAvLyBmaXJlZCB3aGVuIGEgZnJhZ21lbnQgbG9hZGluZyBzdGFydHMgLSBkYXRhOiB7IGZyYWcgOiBmcmFnbWVudCBvYmplY3QgfVxuICBGUkFHX0xPQURJTkc6ICdobHNGcmFnTG9hZGluZycsXG4gIC8vIGZpcmVkIHdoZW4gYSBmcmFnbWVudCBsb2FkaW5nIGlzIHByb2dyZXNzaW5nIC0gZGF0YTogeyBmcmFnIDogZnJhZ21lbnQgb2JqZWN0LCB7IHRyZXF1ZXN0LCB0Zmlyc3QsIGxvYWRlZCB9IH1cbiAgRlJBR19MT0FEX1BST0dSRVNTOiAnaGxzRnJhZ0xvYWRQcm9ncmVzcycsXG4gIC8vIElkZW50aWZpZXIgZm9yIGZyYWdtZW50IGxvYWQgYWJvcnRpbmcgZm9yIGVtZXJnZW5jeSBzd2l0Y2ggZG93biAtIGRhdGE6IHsgZnJhZyA6IGZyYWdtZW50IG9iamVjdCB9XG4gIEZSQUdfTE9BRF9FTUVSR0VOQ1lfQUJPUlRFRDogJ2hsc0ZyYWdMb2FkRW1lcmdlbmN5QWJvcnRlZCcsXG4gIC8vIGZpcmVkIHdoZW4gYSBmcmFnbWVudCBsb2FkaW5nIGlzIGNvbXBsZXRlZCAtIGRhdGE6IHsgZnJhZyA6IGZyYWdtZW50IG9iamVjdCwgcGF5bG9hZCA6IGZyYWdtZW50IHBheWxvYWQsIHN0YXRzIDogeyB0cmVxdWVzdCwgdGZpcnN0LCB0bG9hZCwgbGVuZ3RoIH0gfVxuICBGUkFHX0xPQURFRDogJ2hsc0ZyYWdMb2FkZWQnLFxuICAvLyBmaXJlZCB3aGVuIGEgZnJhZ21lbnQgaGFzIGZpbmlzaGVkIGRlY3J5cHRpbmcgLSBkYXRhOiB7IGlkIDogZGVtdXhlciBpZCwgZnJhZzogZnJhZ21lbnQgb2JqZWN0LCBwYXlsb2FkIDogZnJhZ21lbnQgcGF5bG9hZCwgc3RhdHMgOiB7IHRzdGFydCwgdGRlY3J5cHQgfSB9XG4gIEZSQUdfREVDUllQVEVEOiAnaGxzRnJhZ0RlY3J5cHRlZCcsXG4gIC8vIGZpcmVkIHdoZW4gSW5pdCBTZWdtZW50IGhhcyBiZWVuIGV4dHJhY3RlZCBmcm9tIGZyYWdtZW50IC0gZGF0YTogeyBpZCA6IGRlbXV4ZXIgaWQsIGZyYWc6IGZyYWdtZW50IG9iamVjdCwgbW9vdiA6IG1vb3YgTVA0IGJveCwgY29kZWNzIDogY29kZWNzIGZvdW5kIHdoaWxlIHBhcnNpbmcgZnJhZ21lbnQgfVxuICBGUkFHX1BBUlNJTkdfSU5JVF9TRUdNRU5UOiAnaGxzRnJhZ1BhcnNpbmdJbml0U2VnbWVudCcsXG4gIC8vIGZpcmVkIHdoZW4gcGFyc2luZyBzZWkgdGV4dCBpcyBjb21wbGV0ZWQgLSBkYXRhOiB7IGlkIDogZGVtdXhlciBpZCwgZnJhZzogZnJhZ21lbnQgb2JqZWN0LCBzYW1wbGVzIDogWyBzZWkgc2FtcGxlcyBwZXMgXSB9XG4gIEZSQUdfUEFSU0lOR19VU0VSREFUQTogJ2hsc0ZyYWdQYXJzaW5nVXNlcmRhdGEnLFxuICAvLyBmaXJlZCB3aGVuIHBhcnNpbmcgaWQzIGlzIGNvbXBsZXRlZCAtIGRhdGE6IHsgaWQgOiBkZW11eGVyIGlkLCBmcmFnOiBmcmFnbWVudCBvYmplY3QsIHNhbXBsZXMgOiBbIGlkMyBzYW1wbGVzIHBlcyBdIH1cbiAgRlJBR19QQVJTSU5HX01FVEFEQVRBOiAnaGxzRnJhZ1BhcnNpbmdNZXRhZGF0YScsXG4gIC8vIGZpcmVkIHdoZW4gZGF0YSBoYXZlIGJlZW4gZXh0cmFjdGVkIGZyb20gZnJhZ21lbnQgLSBkYXRhOiB7IGlkIDogZGVtdXhlciBpZCwgZnJhZzogZnJhZ21lbnQgb2JqZWN0LCBkYXRhMSA6IG1vb2YgTVA0IGJveCBvciBUUyBmcmFnbWVudHMsIGRhdGEyIDogbWRhdCBNUDQgYm94IG9yIG51bGx9XG4gIEZSQUdfUEFSU0lOR19EQVRBOiAnaGxzRnJhZ1BhcnNpbmdEYXRhJyxcbiAgLy8gZmlyZWQgd2hlbiBmcmFnbWVudCBwYXJzaW5nIGlzIGNvbXBsZXRlZCAtIGRhdGE6IHsgaWQgOiBkZW11eGVyIGlkLCBmcmFnOiBmcmFnbWVudCBvYmplY3QgfVxuICBGUkFHX1BBUlNFRDogJ2hsc0ZyYWdQYXJzZWQnLFxuICAvLyBmaXJlZCB3aGVuIGZyYWdtZW50IHJlbXV4ZWQgTVA0IGJveGVzIGhhdmUgYWxsIGJlZW4gYXBwZW5kZWQgaW50byBTb3VyY2VCdWZmZXIgLSBkYXRhOiB7IGlkIDogZGVtdXhlciBpZCwgZnJhZyA6IGZyYWdtZW50IG9iamVjdCwgc3RhdHMgOiB7IHRyZXF1ZXN0LCB0Zmlyc3QsIHRsb2FkLCB0cGFyc2VkLCB0YnVmZmVyZWQsIGxlbmd0aCwgYndFc3RpbWF0ZSB9IH1cbiAgRlJBR19CVUZGRVJFRDogJ2hsc0ZyYWdCdWZmZXJlZCcsXG4gIC8vIGZpcmVkIHdoZW4gZnJhZ21lbnQgbWF0Y2hpbmcgd2l0aCBjdXJyZW50IG1lZGlhIHBvc2l0aW9uIGlzIGNoYW5naW5nIC0gZGF0YSA6IHsgaWQgOiBkZW11eGVyIGlkLCBmcmFnIDogZnJhZ21lbnQgb2JqZWN0IH1cbiAgRlJBR19DSEFOR0VEOiAnaGxzRnJhZ0NoYW5nZWQnLFxuICAvLyBJZGVudGlmaWVyIGZvciBhIEZQUyBkcm9wIGV2ZW50IC0gZGF0YTogeyBjdXJlbnREcm9wcGVkLCBjdXJyZW50RGVjb2RlZCwgdG90YWxEcm9wcGVkRnJhbWVzIH1cbiAgRlBTX0RST1A6ICdobHNGcHNEcm9wJyxcbiAgLy8gdHJpZ2dlcmVkIHdoZW4gRlBTIGRyb3AgdHJpZ2dlcnMgYXV0byBsZXZlbCBjYXBwaW5nIC0gZGF0YTogeyBsZXZlbCwgZHJvcHBlZGxldmVsIH1cbiAgRlBTX0RST1BfTEVWRUxfQ0FQUElORzogJ2hsc0Zwc0Ryb3BMZXZlbENhcHBpbmcnLFxuICAvLyBJZGVudGlmaWVyIGZvciBhbiBlcnJvciBldmVudCAtIGRhdGE6IHsgdHlwZSA6IGVycm9yIHR5cGUsIGRldGFpbHMgOiBlcnJvciBkZXRhaWxzLCBmYXRhbCA6IGlmIHRydWUsIGhscy5qcyBjYW5ub3Qvd2lsbCBub3QgdHJ5IHRvIHJlY292ZXIsIGlmIGZhbHNlLCBobHMuanMgd2lsbCB0cnkgdG8gcmVjb3ZlcixvdGhlciBlcnJvciBzcGVjaWZpYyBkYXRhIH1cbiAgRVJST1I6ICdobHNFcnJvcicsXG4gIC8vIGZpcmVkIHdoZW4gaGxzLmpzIGluc3RhbmNlIHN0YXJ0cyBkZXN0cm95aW5nLiBEaWZmZXJlbnQgZnJvbSBNRURJQV9ERVRBQ0hFRCBhcyBvbmUgY291bGQgd2FudCB0byBkZXRhY2ggYW5kIHJlYXR0YWNoIGEgbWVkaWEgdG8gdGhlIGluc3RhbmNlIG9mIGhscy5qcyB0byBoYW5kbGUgbWlkLXJvbGxzIGZvciBleGFtcGxlIC0gZGF0YTogeyB9XG4gIERFU1RST1lJTkc6ICdobHNEZXN0cm95aW5nJyxcbiAgLy8gZmlyZWQgd2hlbiBhIGRlY3J5cHQga2V5IGxvYWRpbmcgc3RhcnRzIC0gZGF0YTogeyBmcmFnIDogZnJhZ21lbnQgb2JqZWN0IH1cbiAgS0VZX0xPQURJTkc6ICdobHNLZXlMb2FkaW5nJyxcbiAgLy8gZmlyZWQgd2hlbiBhIGRlY3J5cHQga2V5IGxvYWRpbmcgaXMgY29tcGxldGVkIC0gZGF0YTogeyBmcmFnIDogZnJhZ21lbnQgb2JqZWN0LCBwYXlsb2FkIDoga2V5IHBheWxvYWQsIHN0YXRzIDogeyB0cmVxdWVzdCwgdGZpcnN0LCB0bG9hZCwgbGVuZ3RoIH0gfVxuICBLRVlfTE9BREVEOiAnaGxzS2V5TG9hZGVkJyxcbiAgLy8gZmlyZWQgdXBvbiBzdHJlYW0gY29udHJvbGxlciBzdGF0ZSB0cmFuc2l0aW9ucyAtIGRhdGE6IHsgcHJldmlvdXNTdGF0ZSwgbmV4dFN0YXRlIH1cbiAgU1RSRUFNX1NUQVRFX1RSQU5TSVRJT046ICdobHNTdHJlYW1TdGF0ZVRyYW5zaXRpb24nLFxuICAvLyBmaXJlZCB3aGVuIHRoZSBsaXZlIGJhY2sgYnVmZmVyIGlzIHJlYWNoZWQgZGVmaW5lZCBieSB0aGUgbGl2ZUJhY2tCdWZmZXJMZW5ndGggY29uZmlnIG9wdGlvbiAtIGRhdGEgOiB7IGJ1ZmZlckVuZDogbnVtYmVyIH1cbiAgTElWRV9CQUNLX0JVRkZFUl9SRUFDSEVEOiAnaGxzTGl2ZUJhY2tCdWZmZXJSZWFjaGVkJ1xufTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImRlZmF1bHRcIl0gPSAoSGxzRXZlbnRzKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvaGxzLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvaGxzLnRzICsgNTAgbW9kdWxlcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IGRlZmF1bHQgKi9cbi8qISBNb2R1bGVDb25jYXRlbmF0aW9uIGJhaWxvdXQ6IENhbm5vdCBjb25jYXQgd2l0aCAuL3NyYy9jcnlwdC9kZWNyeXB0ZXIuanMgYmVjYXVzZSBvZiAuL3NyYy9kZW11eC9kZW11eGVyLXdvcmtlci5qcyAqL1xuLyohIE1vZHVsZUNvbmNhdGVuYXRpb24gYmFpbG91dDogQ2Fubm90IGNvbmNhdCB3aXRoIC4vc3JjL2RlbXV4L2RlbXV4ZXItaW5saW5lLmpzIGJlY2F1c2Ugb2YgLi9zcmMvZGVtdXgvZGVtdXhlci13b3JrZXIuanMgKi9cbi8qISBNb2R1bGVDb25jYXRlbmF0aW9uIGJhaWxvdXQ6IENhbm5vdCBjb25jYXQgd2l0aCAuL3NyYy9kZW11eC9pZDMuanMgYmVjYXVzZSBvZiAuL3NyYy9kZW11eC9kZW11eGVyLXdvcmtlci5qcyAqL1xuLyohIE1vZHVsZUNvbmNhdGVuYXRpb24gYmFpbG91dDogQ2Fubm90IGNvbmNhdCB3aXRoIC4vc3JjL2RlbXV4L21wNGRlbXV4ZXIuanMgYmVjYXVzZSBvZiAuL3NyYy9kZW11eC9kZW11eGVyLXdvcmtlci5qcyAqL1xuLyohIE1vZHVsZUNvbmNhdGVuYXRpb24gYmFpbG91dDogQ2Fubm90IGNvbmNhdCB3aXRoIC4vc3JjL2Vycm9ycy50cyBiZWNhdXNlIG9mIC4vc3JjL2RlbXV4L2RlbXV4ZXItd29ya2VyLmpzICovXG4vKiEgTW9kdWxlQ29uY2F0ZW5hdGlvbiBiYWlsb3V0OiBDYW5ub3QgY29uY2F0IHdpdGggLi9zcmMvZXZlbnRzLmpzIGJlY2F1c2Ugb2YgLi9zcmMvZGVtdXgvZGVtdXhlci13b3JrZXIuanMgKi9cbi8qISBNb2R1bGVDb25jYXRlbmF0aW9uIGJhaWxvdXQ6IENhbm5vdCBjb25jYXQgd2l0aCAuL3NyYy9wb2x5ZmlsbHMvbnVtYmVyLmpzIGJlY2F1c2Ugb2YgLi9zcmMvZGVtdXgvZGVtdXhlci13b3JrZXIuanMgKi9cbi8qISBNb2R1bGVDb25jYXRlbmF0aW9uIGJhaWxvdXQ6IENhbm5vdCBjb25jYXQgd2l0aCAuL3NyYy91dGlscy9nZXQtc2VsZi1zY29wZS5qcyBiZWNhdXNlIG9mIC4vc3JjL2RlbXV4L2RlbXV4ZXItd29ya2VyLmpzICovXG4vKiEgTW9kdWxlQ29uY2F0ZW5hdGlvbiBiYWlsb3V0OiBDYW5ub3QgY29uY2F0IHdpdGggLi9zcmMvdXRpbHMvbG9nZ2VyLmpzIGJlY2F1c2Ugb2YgLi9zcmMvZGVtdXgvZGVtdXhlci13b3JrZXIuanMgKi9cbi8qISBNb2R1bGVDb25jYXRlbmF0aW9uIGJhaWxvdXQ6IENhbm5vdCBjb25jYXQgd2l0aCAuL25vZGVfbW9kdWxlcy9ldmVudGVtaXR0ZXIzL2luZGV4LmpzICg8LSBNb2R1bGUgaXMgbm90IGFuIEVDTUFTY3JpcHQgbW9kdWxlKSAqL1xuLyohIE1vZHVsZUNvbmNhdGVuYXRpb24gYmFpbG91dDogQ2Fubm90IGNvbmNhdCB3aXRoIC4vbm9kZV9tb2R1bGVzL3VybC10b29sa2l0L3NyYy91cmwtdG9vbGtpdC5qcyAoPC0gTW9kdWxlIGlzIG5vdCBhbiBFQ01BU2NyaXB0IG1vZHVsZSkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vLyBFU00gQ09NUEFUIEZMQUdcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcblxuLy8gRVhQT1JUU1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiZGVmYXVsdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIC8qIGJpbmRpbmcgKi8gaGxzX0hsczsgfSk7XG5cbi8vIE5BTUVTUEFDRSBPQkpFQ1Q6IC4vc3JjL3V0aWxzL2N1ZXMudHNcbnZhciBjdWVzX25hbWVzcGFjZU9iamVjdCA9IHt9O1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKGN1ZXNfbmFtZXNwYWNlT2JqZWN0KTtcbl9fd2VicGFja19yZXF1aXJlX18uZChjdWVzX25hbWVzcGFjZU9iamVjdCwgXCJuZXdDdWVcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBuZXdDdWU7IH0pO1xuXG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL3VybC10b29sa2l0L3NyYy91cmwtdG9vbGtpdC5qc1xudmFyIHVybF90b29sa2l0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3VybC10b29sa2l0L3NyYy91cmwtdG9vbGtpdC5qc1wiKTtcblxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9lcnJvcnMudHNcbnZhciBlcnJvcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvZXJyb3JzLnRzXCIpO1xuXG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vc3JjL3BvbHlmaWxscy9udW1iZXIuanNcbnZhciBudW1iZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvcG9seWZpbGxzL251bWJlci5qc1wiKTtcblxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9ldmVudHMuanNcbnZhciBldmVudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvZXZlbnRzLmpzXCIpO1xuXG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vc3JjL3V0aWxzL2xvZ2dlci5qc1xudmFyIGxvZ2dlciA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy91dGlscy9sb2dnZXIuanNcIik7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2V2ZW50LWhhbmRsZXIudHNcbi8qXG4qXG4qIEFsbCBvYmplY3RzIGluIHRoZSBldmVudCBoYW5kbGluZyBjaGFpbiBzaG91bGQgaW5oZXJpdCBmcm9tIHRoaXMgY2xhc3NcbipcbiovXG5cblxuXG52YXIgRk9SQklEREVOX0VWRU5UX05BTUVTID0ge1xuICAnaGxzRXZlbnRHZW5lcmljJzogdHJ1ZSxcbiAgJ2hsc0hhbmRsZXJEZXN0cm95aW5nJzogdHJ1ZSxcbiAgJ2hsc0hhbmRsZXJEZXN0cm95ZWQnOiB0cnVlXG59O1xuXG52YXIgZXZlbnRfaGFuZGxlcl9FdmVudEhhbmRsZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBFdmVudEhhbmRsZXIoaGxzKSB7XG4gICAgdGhpcy5obHMgPSB2b2lkIDA7XG4gICAgdGhpcy5oYW5kbGVkRXZlbnRzID0gdm9pZCAwO1xuICAgIHRoaXMudXNlR2VuZXJpY0hhbmRsZXIgPSB2b2lkIDA7XG4gICAgdGhpcy5obHMgPSBobHM7XG4gICAgdGhpcy5vbkV2ZW50ID0gdGhpcy5vbkV2ZW50LmJpbmQodGhpcyk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZXZlbnRzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGV2ZW50c1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdGhpcy5oYW5kbGVkRXZlbnRzID0gZXZlbnRzO1xuICAgIHRoaXMudXNlR2VuZXJpY0hhbmRsZXIgPSB0cnVlO1xuICAgIHRoaXMucmVnaXN0ZXJMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBFdmVudEhhbmRsZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICB0aGlzLm9uSGFuZGxlckRlc3Ryb3lpbmcoKTtcbiAgICB0aGlzLnVucmVnaXN0ZXJMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLm9uSGFuZGxlckRlc3Ryb3llZCgpO1xuICB9O1xuXG4gIF9wcm90by5vbkhhbmRsZXJEZXN0cm95aW5nID0gZnVuY3Rpb24gb25IYW5kbGVyRGVzdHJveWluZygpIHt9O1xuXG4gIF9wcm90by5vbkhhbmRsZXJEZXN0cm95ZWQgPSBmdW5jdGlvbiBvbkhhbmRsZXJEZXN0cm95ZWQoKSB7fTtcblxuICBfcHJvdG8uaXNFdmVudEhhbmRsZXIgPSBmdW5jdGlvbiBpc0V2ZW50SGFuZGxlcigpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMuaGFuZGxlZEV2ZW50cyA9PT0gJ29iamVjdCcgJiYgdGhpcy5oYW5kbGVkRXZlbnRzLmxlbmd0aCAmJiB0eXBlb2YgdGhpcy5vbkV2ZW50ID09PSAnZnVuY3Rpb24nO1xuICB9O1xuXG4gIF9wcm90by5yZWdpc3Rlckxpc3RlbmVycyA9IGZ1bmN0aW9uIHJlZ2lzdGVyTGlzdGVuZXJzKCkge1xuICAgIGlmICh0aGlzLmlzRXZlbnRIYW5kbGVyKCkpIHtcbiAgICAgIHRoaXMuaGFuZGxlZEV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoRk9SQklEREVOX0VWRU5UX05BTUVTW2V2ZW50XSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRm9yYmlkZGVuIGV2ZW50LW5hbWU6ICcgKyBldmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmhscy5vbihldmVudCwgdGhpcy5vbkV2ZW50KTtcbiAgICAgIH0sIHRoaXMpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8udW5yZWdpc3Rlckxpc3RlbmVycyA9IGZ1bmN0aW9uIHVucmVnaXN0ZXJMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKHRoaXMuaXNFdmVudEhhbmRsZXIoKSkge1xuICAgICAgdGhpcy5oYW5kbGVkRXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuaGxzLm9mZihldmVudCwgdGhpcy5vbkV2ZW50KTtcbiAgICAgIH0sIHRoaXMpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogYXJndW1lbnRzOiBldmVudCAoc3RyaW5nKSwgZGF0YSAoYW55KVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vbkV2ZW50ID0gZnVuY3Rpb24gb25FdmVudChldmVudCwgZGF0YSkge1xuICAgIHRoaXMub25FdmVudEdlbmVyaWMoZXZlbnQsIGRhdGEpO1xuICB9O1xuXG4gIF9wcm90by5vbkV2ZW50R2VuZXJpYyA9IGZ1bmN0aW9uIG9uRXZlbnRHZW5lcmljKGV2ZW50LCBkYXRhKSB7XG4gICAgdmFyIGV2ZW50VG9GdW5jdGlvbiA9IGZ1bmN0aW9uIGV2ZW50VG9GdW5jdGlvbihldmVudCwgZGF0YSkge1xuICAgICAgdmFyIGZ1bmNOYW1lID0gJ29uJyArIGV2ZW50LnJlcGxhY2UoJ2hscycsICcnKTtcblxuICAgICAgaWYgKHR5cGVvZiB0aGlzW2Z1bmNOYW1lXSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFdmVudCBcIiArIGV2ZW50ICsgXCIgaGFzIG5vIGdlbmVyaWMgaGFuZGxlciBpbiB0aGlzIFwiICsgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgXCIgY2xhc3MgKHRyaWVkIFwiICsgZnVuY05hbWUgKyBcIilcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzW2Z1bmNOYW1lXS5iaW5kKHRoaXMsIGRhdGEpO1xuICAgIH07XG5cbiAgICB0cnkge1xuICAgICAgZXZlbnRUb0Z1bmN0aW9uLmNhbGwodGhpcywgZXZlbnQsIGRhdGEpLmNhbGwoKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5lcnJvcihcIkFuIGludGVybmFsIGVycm9yIGhhcHBlbmVkIHdoaWxlIGhhbmRsaW5nIGV2ZW50IFwiICsgZXZlbnQgKyBcIi4gRXJyb3IgbWVzc2FnZTogXFxcIlwiICsgZXJyLm1lc3NhZ2UgKyBcIlxcXCIuIEhlcmUgaXMgYSBzdGFja3RyYWNlOlwiLCBlcnIpO1xuICAgICAgdGhpcy5obHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkVSUk9SLCB7XG4gICAgICAgIHR5cGU6IGVycm9yc1tcIkVycm9yVHlwZXNcIl0uT1RIRVJfRVJST1IsXG4gICAgICAgIGRldGFpbHM6IGVycm9yc1tcIkVycm9yRGV0YWlsc1wiXS5JTlRFUk5BTF9FWENFUFRJT04sXG4gICAgICAgIGZhdGFsOiBmYWxzZSxcbiAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICBlcnI6IGVyclxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBFdmVudEhhbmRsZXI7XG59KCk7XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGV2ZW50X2hhbmRsZXIgPSAoZXZlbnRfaGFuZGxlcl9FdmVudEhhbmRsZXIpO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvdHlwZXMvbG9hZGVyLnRzXG4vKipcbiAqIGB0eXBlYCBwcm9wZXJ0eSB2YWx1ZXMgZm9yIHRoaXMgbG9hZGVycycgY29udGV4dCBvYmplY3RcbiAqIEBlbnVtXG4gKlxuICovXG52YXIgUGxheWxpc3RDb250ZXh0VHlwZTtcbi8qKlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuXG4oZnVuY3Rpb24gKFBsYXlsaXN0Q29udGV4dFR5cGUpIHtcbiAgUGxheWxpc3RDb250ZXh0VHlwZVtcIk1BTklGRVNUXCJdID0gXCJtYW5pZmVzdFwiO1xuICBQbGF5bGlzdENvbnRleHRUeXBlW1wiTEVWRUxcIl0gPSBcImxldmVsXCI7XG4gIFBsYXlsaXN0Q29udGV4dFR5cGVbXCJBVURJT19UUkFDS1wiXSA9IFwiYXVkaW9UcmFja1wiO1xuICBQbGF5bGlzdENvbnRleHRUeXBlW1wiU1VCVElUTEVfVFJBQ0tcIl0gPSBcInN1YnRpdGxlVHJhY2tcIjtcbn0pKFBsYXlsaXN0Q29udGV4dFR5cGUgfHwgKFBsYXlsaXN0Q29udGV4dFR5cGUgPSB7fSkpO1xuXG52YXIgUGxheWxpc3RMZXZlbFR5cGU7XG5cbihmdW5jdGlvbiAoUGxheWxpc3RMZXZlbFR5cGUpIHtcbiAgUGxheWxpc3RMZXZlbFR5cGVbXCJNQUlOXCJdID0gXCJtYWluXCI7XG4gIFBsYXlsaXN0TGV2ZWxUeXBlW1wiQVVESU9cIl0gPSBcImF1ZGlvXCI7XG4gIFBsYXlsaXN0TGV2ZWxUeXBlW1wiU1VCVElUTEVcIl0gPSBcInN1YnRpdGxlXCI7XG59KShQbGF5bGlzdExldmVsVHlwZSB8fCAoUGxheWxpc3RMZXZlbFR5cGUgPSB7fSkpO1xuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9kZW11eC9tcDRkZW11eGVyLmpzXG52YXIgbXA0ZGVtdXhlciA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9kZW11eC9tcDRkZW11eGVyLmpzXCIpO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9sb2FkZXIvbGV2ZWwta2V5LnRzXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cblxuXG52YXIgbGV2ZWxfa2V5X0xldmVsS2V5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTGV2ZWxLZXkoYmFzZVVSSSwgcmVsYXRpdmVVUkkpIHtcbiAgICB0aGlzLl91cmkgPSBudWxsO1xuICAgIHRoaXMuYmFzZXVyaSA9IHZvaWQgMDtcbiAgICB0aGlzLnJlbHVyaSA9IHZvaWQgMDtcbiAgICB0aGlzLm1ldGhvZCA9IG51bGw7XG4gICAgdGhpcy5rZXkgPSBudWxsO1xuICAgIHRoaXMuaXYgPSBudWxsO1xuICAgIHRoaXMuYmFzZXVyaSA9IGJhc2VVUkk7XG4gICAgdGhpcy5yZWx1cmkgPSByZWxhdGl2ZVVSSTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhMZXZlbEtleSwgW3tcbiAgICBrZXk6IFwidXJpXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICBpZiAoIXRoaXMuX3VyaSAmJiB0aGlzLnJlbHVyaSkge1xuICAgICAgICB0aGlzLl91cmkgPSBPYmplY3QodXJsX3Rvb2xraXRbXCJidWlsZEFic29sdXRlVVJMXCJdKSh0aGlzLmJhc2V1cmksIHRoaXMucmVsdXJpLCB7XG4gICAgICAgICAgYWx3YXlzTm9ybWFsaXplOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fdXJpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBMZXZlbEtleTtcbn0oKTtcblxuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9sb2FkZXIvZnJhZ21lbnQudHNcblxuXG5cbmZ1bmN0aW9uIGZyYWdtZW50X2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBmcmFnbWVudF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGZyYWdtZW50X2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBmcmFnbWVudF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5cblxuXG52YXIgRWxlbWVudGFyeVN0cmVhbVR5cGVzO1xuXG4oZnVuY3Rpb24gKEVsZW1lbnRhcnlTdHJlYW1UeXBlcykge1xuICBFbGVtZW50YXJ5U3RyZWFtVHlwZXNbXCJBVURJT1wiXSA9IFwiYXVkaW9cIjtcbiAgRWxlbWVudGFyeVN0cmVhbVR5cGVzW1wiVklERU9cIl0gPSBcInZpZGVvXCI7XG59KShFbGVtZW50YXJ5U3RyZWFtVHlwZXMgfHwgKEVsZW1lbnRhcnlTdHJlYW1UeXBlcyA9IHt9KSk7XG5cbnZhciBmcmFnbWVudF9GcmFnbWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEZyYWdtZW50KCkge1xuICAgIHZhciBfdGhpcyRfZWxlbWVudGFyeVN0cmU7XG5cbiAgICB0aGlzLl91cmwgPSBudWxsO1xuICAgIHRoaXMuX2J5dGVSYW5nZSA9IG51bGw7XG4gICAgdGhpcy5fZGVjcnlwdGRhdGEgPSBudWxsO1xuICAgIHRoaXMuX2VsZW1lbnRhcnlTdHJlYW1zID0gKF90aGlzJF9lbGVtZW50YXJ5U3RyZSA9IHt9LCBfdGhpcyRfZWxlbWVudGFyeVN0cmVbRWxlbWVudGFyeVN0cmVhbVR5cGVzLkFVRElPXSA9IGZhbHNlLCBfdGhpcyRfZWxlbWVudGFyeVN0cmVbRWxlbWVudGFyeVN0cmVhbVR5cGVzLlZJREVPXSA9IGZhbHNlLCBfdGhpcyRfZWxlbWVudGFyeVN0cmUpO1xuICAgIHRoaXMuZGVsdGFQVFMgPSAwO1xuICAgIHRoaXMucmF3UHJvZ3JhbURhdGVUaW1lID0gbnVsbDtcbiAgICB0aGlzLnByb2dyYW1EYXRlVGltZSA9IG51bGw7XG4gICAgdGhpcy50aXRsZSA9IG51bGw7XG4gICAgdGhpcy50YWdMaXN0ID0gW107XG4gICAgdGhpcy5jYyA9IHZvaWQgMDtcbiAgICB0aGlzLnR5cGUgPSB2b2lkIDA7XG4gICAgdGhpcy5yZWx1cmwgPSB2b2lkIDA7XG4gICAgdGhpcy5iYXNldXJsID0gdm9pZCAwO1xuICAgIHRoaXMuZHVyYXRpb24gPSB2b2lkIDA7XG4gICAgdGhpcy5zdGFydCA9IHZvaWQgMDtcbiAgICB0aGlzLnNuID0gMDtcbiAgICB0aGlzLnVybElkID0gMDtcbiAgICB0aGlzLmxldmVsID0gMDtcbiAgICB0aGlzLmxldmVsa2V5ID0gdm9pZCAwO1xuICAgIHRoaXMubG9hZGVyID0gdm9pZCAwO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEZyYWdtZW50LnByb3RvdHlwZTtcblxuICAvLyBzZXRCeXRlUmFuZ2UgY29udmVydHMgYSBFWFQtWC1CWVRFUkFOR0UgYXR0cmlidXRlIGludG8gYSB0d28gZWxlbWVudCBhcnJheVxuICBfcHJvdG8uc2V0Qnl0ZVJhbmdlID0gZnVuY3Rpb24gc2V0Qnl0ZVJhbmdlKHZhbHVlLCBwcmV2aW91c0ZyYWcpIHtcbiAgICB2YXIgcGFyYW1zID0gdmFsdWUuc3BsaXQoJ0AnLCAyKTtcbiAgICB2YXIgYnl0ZVJhbmdlID0gW107XG5cbiAgICBpZiAocGFyYW1zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgYnl0ZVJhbmdlWzBdID0gcHJldmlvdXNGcmFnID8gcHJldmlvdXNGcmFnLmJ5dGVSYW5nZUVuZE9mZnNldCA6IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJ5dGVSYW5nZVswXSA9IHBhcnNlSW50KHBhcmFtc1sxXSk7XG4gICAgfVxuXG4gICAgYnl0ZVJhbmdlWzFdID0gcGFyc2VJbnQocGFyYW1zWzBdKSArIGJ5dGVSYW5nZVswXTtcbiAgICB0aGlzLl9ieXRlUmFuZ2UgPSBieXRlUmFuZ2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RWxlbWVudGFyeVN0cmVhbVR5cGVzfSB0eXBlXG4gICAqL1xuICBfcHJvdG8uYWRkRWxlbWVudGFyeVN0cmVhbSA9IGZ1bmN0aW9uIGFkZEVsZW1lbnRhcnlTdHJlYW0odHlwZSkge1xuICAgIHRoaXMuX2VsZW1lbnRhcnlTdHJlYW1zW3R5cGVdID0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtFbGVtZW50YXJ5U3RyZWFtVHlwZXN9IHR5cGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFzRWxlbWVudGFyeVN0cmVhbSA9IGZ1bmN0aW9uIGhhc0VsZW1lbnRhcnlTdHJlYW0odHlwZSkge1xuICAgIHJldHVybiB0aGlzLl9lbGVtZW50YXJ5U3RyZWFtc1t0eXBlXSA9PT0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogVXRpbGl0eSBtZXRob2QgZm9yIHBhcnNlTGV2ZWxQbGF5bGlzdCB0byBjcmVhdGUgYW4gaW5pdGlhbGl6YXRpb24gdmVjdG9yIGZvciBhIGdpdmVuIHNlZ21lbnRcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNlZ21lbnROdW1iZXIgLSBzZWdtZW50IG51bWJlciB0byBnZW5lcmF0ZSBJViB3aXRoXG4gICAqIEByZXR1cm5zIHtVaW50OEFycmF5fVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVJbml0aWFsaXphdGlvblZlY3RvciA9IGZ1bmN0aW9uIGNyZWF0ZUluaXRpYWxpemF0aW9uVmVjdG9yKHNlZ21lbnROdW1iZXIpIHtcbiAgICB2YXIgdWludDhWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuXG4gICAgZm9yICh2YXIgaSA9IDEyOyBpIDwgMTY7IGkrKykge1xuICAgICAgdWludDhWaWV3W2ldID0gc2VnbWVudE51bWJlciA+PiA4ICogKDE1IC0gaSkgJiAweGZmO1xuICAgIH1cblxuICAgIHJldHVybiB1aW50OFZpZXc7XG4gIH1cbiAgLyoqXG4gICAqIFV0aWxpdHkgbWV0aG9kIGZvciBwYXJzZUxldmVsUGxheWxpc3QgdG8gZ2V0IGEgZnJhZ21lbnQncyBkZWNyeXB0aW9uIGRhdGEgZnJvbSB0aGUgY3VycmVudGx5IHBhcnNlZCBlbmNyeXB0aW9uIGtleSBkYXRhXG4gICAqIEBwYXJhbSBsZXZlbGtleSAtIGEgcGxheWxpc3QncyBlbmNyeXB0aW9uIGluZm9cbiAgICogQHBhcmFtIHNlZ21lbnROdW1iZXIgLSB0aGUgZnJhZ21lbnQncyBzZWdtZW50IG51bWJlclxuICAgKiBAcmV0dXJucyB7TGV2ZWxLZXl9IC0gYW4gb2JqZWN0IHRvIGJlIGFwcGxpZWQgYXMgYSBmcmFnbWVudCdzIGRlY3J5cHRkYXRhXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNldERlY3J5cHREYXRhRnJvbUxldmVsS2V5ID0gZnVuY3Rpb24gc2V0RGVjcnlwdERhdGFGcm9tTGV2ZWxLZXkobGV2ZWxrZXksIHNlZ21lbnROdW1iZXIpIHtcbiAgICB2YXIgZGVjcnlwdGRhdGEgPSBsZXZlbGtleTtcblxuICAgIGlmICgobGV2ZWxrZXkgPT09IG51bGwgfHwgbGV2ZWxrZXkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxldmVsa2V5Lm1ldGhvZCkgJiYgbGV2ZWxrZXkudXJpICYmICFsZXZlbGtleS5pdikge1xuICAgICAgZGVjcnlwdGRhdGEgPSBuZXcgbGV2ZWxfa2V5X0xldmVsS2V5KGxldmVsa2V5LmJhc2V1cmksIGxldmVsa2V5LnJlbHVyaSk7XG4gICAgICBkZWNyeXB0ZGF0YS5tZXRob2QgPSBsZXZlbGtleS5tZXRob2Q7XG4gICAgICBkZWNyeXB0ZGF0YS5pdiA9IHRoaXMuY3JlYXRlSW5pdGlhbGl6YXRpb25WZWN0b3Ioc2VnbWVudE51bWJlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlY3J5cHRkYXRhO1xuICB9O1xuXG4gIGZyYWdtZW50X2NyZWF0ZUNsYXNzKEZyYWdtZW50LCBbe1xuICAgIGtleTogXCJ1cmxcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIGlmICghdGhpcy5fdXJsICYmIHRoaXMucmVsdXJsKSB7XG4gICAgICAgIHRoaXMuX3VybCA9IE9iamVjdCh1cmxfdG9vbGtpdFtcImJ1aWxkQWJzb2x1dGVVUkxcIl0pKHRoaXMuYmFzZXVybCwgdGhpcy5yZWx1cmwsIHtcbiAgICAgICAgICBhbHdheXNOb3JtYWxpemU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl91cmw7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgdGhpcy5fdXJsID0gdmFsdWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImJ5dGVSYW5nZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKCF0aGlzLl9ieXRlUmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fYnl0ZVJhbmdlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiYnl0ZVJhbmdlU3RhcnRPZmZzZXRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmJ5dGVSYW5nZVswXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYnl0ZVJhbmdlRW5kT2Zmc2V0XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5ieXRlUmFuZ2VbMV07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRlY3J5cHRkYXRhXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICBpZiAoIXRoaXMubGV2ZWxrZXkgJiYgIXRoaXMuX2RlY3J5cHRkYXRhKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuX2RlY3J5cHRkYXRhICYmIHRoaXMubGV2ZWxrZXkpIHtcbiAgICAgICAgdmFyIHNuID0gdGhpcy5zbjtcblxuICAgICAgICBpZiAodHlwZW9mIHNuICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgIC8vIFdlIGFyZSBmZXRjaGluZyBkZWNyeXB0aW9uIGRhdGEgZm9yIGEgaW5pdGlhbGl6YXRpb24gc2VnbWVudFxuICAgICAgICAgIC8vIElmIHRoZSBzZWdtZW50IHdhcyBlbmNyeXB0ZWQgd2l0aCBBRVMtMTI4XG4gICAgICAgICAgLy8gSXQgbXVzdCBoYXZlIGFuIElWIGRlZmluZWQuIFdlIGNhbm5vdCBzdWJzdGl0dXRlIHRoZSBTZWdtZW50IE51bWJlciBpbi5cbiAgICAgICAgICBpZiAodGhpcy5sZXZlbGtleSAmJiB0aGlzLmxldmVsa2V5Lm1ldGhvZCA9PT0gJ0FFUy0xMjgnICYmICF0aGlzLmxldmVsa2V5Lml2KSB7XG4gICAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ud2FybihcIm1pc3NpbmcgSVYgZm9yIGluaXRpYWxpemF0aW9uIHNlZ21lbnQgd2l0aCBtZXRob2Q9XFxcIlwiICsgdGhpcy5sZXZlbGtleS5tZXRob2QgKyBcIlxcXCIgLSBjb21wbGlhbmNlIGlzc3VlXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvKlxuICAgICAgICAgIEJlIGNvbnZlcnRlZCB0byBhIE51bWJlci5cbiAgICAgICAgICAnaW5pdFNlZ21lbnQnIHdpbGwgYmVjb21lIE5hTi5cbiAgICAgICAgICBOYU4sIHdoaWNoIHdoZW4gY29udmVydGVkIHRocm91Z2ggVG9JbnQzMigpIC0+ICswLlxuICAgICAgICAgIC0tLVxuICAgICAgICAgIEV4cGxpY2l0bHkgc2V0IHNuIHRvIHJlc3VsdGluZyB2YWx1ZSBmcm9tIGltcGxpY2l0IGNvbnZlcnNpb25zICdpbml0U2VnbWVudCcgdmFsdWVzIGZvciBJViBnZW5lcmF0aW9uLlxuICAgICAgICAgICovXG5cblxuICAgICAgICAgIHNuID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2RlY3J5cHRkYXRhID0gdGhpcy5zZXREZWNyeXB0RGF0YUZyb21MZXZlbEtleSh0aGlzLmxldmVsa2V5LCBzbik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9kZWNyeXB0ZGF0YTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZW5kUHJvZ3JhbURhdGVUaW1lXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICBpZiAodGhpcy5wcm9ncmFtRGF0ZVRpbWUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICghT2JqZWN0KG51bWJlcltcImlzRmluaXRlTnVtYmVyXCJdKSh0aGlzLnByb2dyYW1EYXRlVGltZSkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBkdXJhdGlvbiA9ICFPYmplY3QobnVtYmVyW1wiaXNGaW5pdGVOdW1iZXJcIl0pKHRoaXMuZHVyYXRpb24pID8gMCA6IHRoaXMuZHVyYXRpb247XG4gICAgICByZXR1cm4gdGhpcy5wcm9ncmFtRGF0ZVRpbWUgKyBkdXJhdGlvbiAqIDEwMDA7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImVuY3J5cHRlZFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuICEhKHRoaXMuZGVjcnlwdGRhdGEgJiYgdGhpcy5kZWNyeXB0ZGF0YS51cmkgIT09IG51bGwgJiYgdGhpcy5kZWNyeXB0ZGF0YS5rZXkgPT09IG51bGwpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBGcmFnbWVudDtcbn0oKTtcblxuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9sb2FkZXIvbGV2ZWwuanNcblxuXG5mdW5jdGlvbiBsZXZlbF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gbGV2ZWxfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBsZXZlbF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgbGV2ZWxfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxudmFyIGxldmVsX0xldmVsID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTGV2ZWwoYmFzZVVybCkge1xuICAgIC8vIFBsZWFzZSBrZWVwIHByb3BlcnRpZXMgaW4gYWxwaGFiZXRpY2FsIG9yZGVyXG4gICAgdGhpcy5lbmRDQyA9IDA7XG4gICAgdGhpcy5lbmRTTiA9IDA7XG4gICAgdGhpcy5mcmFnbWVudHMgPSBbXTtcbiAgICB0aGlzLmluaXRTZWdtZW50ID0gbnVsbDtcbiAgICB0aGlzLmxpdmUgPSB0cnVlO1xuICAgIHRoaXMubmVlZFNpZHhSYW5nZXMgPSBmYWxzZTtcbiAgICB0aGlzLnN0YXJ0Q0MgPSAwO1xuICAgIHRoaXMuc3RhcnRTTiA9IDA7XG4gICAgdGhpcy5zdGFydFRpbWVPZmZzZXQgPSBudWxsO1xuICAgIHRoaXMudGFyZ2V0ZHVyYXRpb24gPSAwO1xuICAgIHRoaXMudG90YWxkdXJhdGlvbiA9IDA7XG4gICAgdGhpcy50eXBlID0gbnVsbDtcbiAgICB0aGlzLnVybCA9IGJhc2VVcmw7XG4gICAgdGhpcy52ZXJzaW9uID0gbnVsbDtcbiAgfVxuXG4gIGxldmVsX2NyZWF0ZUNsYXNzKExldmVsLCBbe1xuICAgIGtleTogXCJoYXNQcm9ncmFtRGF0ZVRpbWVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiAhISh0aGlzLmZyYWdtZW50c1swXSAmJiBPYmplY3QobnVtYmVyW1wiaXNGaW5pdGVOdW1iZXJcIl0pKHRoaXMuZnJhZ21lbnRzWzBdLnByb2dyYW1EYXRlVGltZSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBMZXZlbDtcbn0oKTtcblxuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy91dGlscy9hdHRyLWxpc3QuanNcbnZhciBERUNJTUFMX1JFU09MVVRJT05fUkVHRVggPSAvXihcXGQrKXgoXFxkKykkLzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11c2VsZXNzLWVzY2FwZVxuXG52YXIgQVRUUl9MSVNUX1JFR0VYID0gL1xccyooLis/KVxccyo9KCg/OlxcXCIuKj9cXFwiKXwuKj8pKD86LHwkKS9nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG4vLyBhZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2thbm9uZ2lsL25vZGUtbTN1OHBhcnNlL2Jsb2IvbWFzdGVyL2F0dHJsaXN0LmpzXG5cbnZhciBBdHRyTGlzdCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEF0dHJMaXN0KGF0dHJzKSB7XG4gICAgaWYgKHR5cGVvZiBhdHRycyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGF0dHJzID0gQXR0ckxpc3QucGFyc2VBdHRyTGlzdChhdHRycyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgYXR0ciBpbiBhdHRycykge1xuICAgICAgaWYgKGF0dHJzLmhhc093blByb3BlcnR5KGF0dHIpKSB7XG4gICAgICAgIHRoaXNbYXR0cl0gPSBhdHRyc1thdHRyXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQXR0ckxpc3QucHJvdG90eXBlO1xuXG4gIF9wcm90by5kZWNpbWFsSW50ZWdlciA9IGZ1bmN0aW9uIGRlY2ltYWxJbnRlZ2VyKGF0dHJOYW1lKSB7XG4gICAgdmFyIGludFZhbHVlID0gcGFyc2VJbnQodGhpc1thdHRyTmFtZV0sIDEwKTtcblxuICAgIGlmIChpbnRWYWx1ZSA+IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGludFZhbHVlO1xuICB9O1xuXG4gIF9wcm90by5oZXhhZGVjaW1hbEludGVnZXIgPSBmdW5jdGlvbiBoZXhhZGVjaW1hbEludGVnZXIoYXR0ck5hbWUpIHtcbiAgICBpZiAodGhpc1thdHRyTmFtZV0pIHtcbiAgICAgIHZhciBzdHJpbmdWYWx1ZSA9ICh0aGlzW2F0dHJOYW1lXSB8fCAnMHgnKS5zbGljZSgyKTtcbiAgICAgIHN0cmluZ1ZhbHVlID0gKHN0cmluZ1ZhbHVlLmxlbmd0aCAmIDEgPyAnMCcgOiAnJykgKyBzdHJpbmdWYWx1ZTtcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBVaW50OEFycmF5KHN0cmluZ1ZhbHVlLmxlbmd0aCAvIDIpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZ1ZhbHVlLmxlbmd0aCAvIDI7IGkrKykge1xuICAgICAgICB2YWx1ZVtpXSA9IHBhcnNlSW50KHN0cmluZ1ZhbHVlLnNsaWNlKGkgKiAyLCBpICogMiArIDIpLCAxNik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5oZXhhZGVjaW1hbEludGVnZXJBc051bWJlciA9IGZ1bmN0aW9uIGhleGFkZWNpbWFsSW50ZWdlckFzTnVtYmVyKGF0dHJOYW1lKSB7XG4gICAgdmFyIGludFZhbHVlID0gcGFyc2VJbnQodGhpc1thdHRyTmFtZV0sIDE2KTtcblxuICAgIGlmIChpbnRWYWx1ZSA+IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGludFZhbHVlO1xuICB9O1xuXG4gIF9wcm90by5kZWNpbWFsRmxvYXRpbmdQb2ludCA9IGZ1bmN0aW9uIGRlY2ltYWxGbG9hdGluZ1BvaW50KGF0dHJOYW1lKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodGhpc1thdHRyTmFtZV0pO1xuICB9O1xuXG4gIF9wcm90by5lbnVtZXJhdGVkU3RyaW5nID0gZnVuY3Rpb24gZW51bWVyYXRlZFN0cmluZyhhdHRyTmFtZSkge1xuICAgIHJldHVybiB0aGlzW2F0dHJOYW1lXTtcbiAgfTtcblxuICBfcHJvdG8uZGVjaW1hbFJlc29sdXRpb24gPSBmdW5jdGlvbiBkZWNpbWFsUmVzb2x1dGlvbihhdHRyTmFtZSkge1xuICAgIHZhciByZXMgPSBERUNJTUFMX1JFU09MVVRJT05fUkVHRVguZXhlYyh0aGlzW2F0dHJOYW1lXSk7XG5cbiAgICBpZiAocmVzID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB3aWR0aDogcGFyc2VJbnQocmVzWzFdLCAxMCksXG4gICAgICBoZWlnaHQ6IHBhcnNlSW50KHJlc1syXSwgMTApXG4gICAgfTtcbiAgfTtcblxuICBBdHRyTGlzdC5wYXJzZUF0dHJMaXN0ID0gZnVuY3Rpb24gcGFyc2VBdHRyTGlzdChpbnB1dCkge1xuICAgIHZhciBtYXRjaCxcbiAgICAgICAgYXR0cnMgPSB7fTtcbiAgICBBVFRSX0xJU1RfUkVHRVgubGFzdEluZGV4ID0gMDtcblxuICAgIHdoaWxlICgobWF0Y2ggPSBBVFRSX0xJU1RfUkVHRVguZXhlYyhpbnB1dCkpICE9PSBudWxsKSB7XG4gICAgICB2YXIgdmFsdWUgPSBtYXRjaFsyXSxcbiAgICAgICAgICBxdW90ZSA9ICdcIic7XG5cbiAgICAgIGlmICh2YWx1ZS5pbmRleE9mKHF1b3RlKSA9PT0gMCAmJiB2YWx1ZS5sYXN0SW5kZXhPZihxdW90ZSkgPT09IHZhbHVlLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgxLCAtMSk7XG4gICAgICB9XG5cbiAgICAgIGF0dHJzW21hdGNoWzFdXSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBhdHRycztcbiAgfTtcblxuICByZXR1cm4gQXR0ckxpc3Q7XG59KCk7XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGF0dHJfbGlzdCA9IChBdHRyTGlzdCk7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy91dGlscy9jb2RlY3MudHNcbi8vIGZyb20gaHR0cDovL21wNHJhLm9yZy9jb2RlY3MuaHRtbFxudmFyIHNhbXBsZUVudHJ5Q29kZXNJU08gPSB7XG4gIGF1ZGlvOiB7XG4gICAgJ2EzZHMnOiB0cnVlLFxuICAgICdhYy0zJzogdHJ1ZSxcbiAgICAnYWMtNCc6IHRydWUsXG4gICAgJ2FsYWMnOiB0cnVlLFxuICAgICdhbGF3JzogdHJ1ZSxcbiAgICAnZHJhMSc6IHRydWUsXG4gICAgJ2R0cysnOiB0cnVlLFxuICAgICdkdHMtJzogdHJ1ZSxcbiAgICAnZHRzYyc6IHRydWUsXG4gICAgJ2R0c2UnOiB0cnVlLFxuICAgICdkdHNoJzogdHJ1ZSxcbiAgICAnZWMtMyc6IHRydWUsXG4gICAgJ2VuY2EnOiB0cnVlLFxuICAgICdnNzE5JzogdHJ1ZSxcbiAgICAnZzcyNic6IHRydWUsXG4gICAgJ200YWUnOiB0cnVlLFxuICAgICdtaGExJzogdHJ1ZSxcbiAgICAnbWhhMic6IHRydWUsXG4gICAgJ21obTEnOiB0cnVlLFxuICAgICdtaG0yJzogdHJ1ZSxcbiAgICAnbWxwYSc6IHRydWUsXG4gICAgJ21wNGEnOiB0cnVlLFxuICAgICdyYXcgJzogdHJ1ZSxcbiAgICAnT3B1cyc6IHRydWUsXG4gICAgJ3NhbXInOiB0cnVlLFxuICAgICdzYXdiJzogdHJ1ZSxcbiAgICAnc2F3cCc6IHRydWUsXG4gICAgJ3NldmMnOiB0cnVlLFxuICAgICdzcWNwJzogdHJ1ZSxcbiAgICAnc3Ntdic6IHRydWUsXG4gICAgJ3R3b3MnOiB0cnVlLFxuICAgICd1bGF3JzogdHJ1ZVxuICB9LFxuICB2aWRlbzoge1xuICAgICdhdmMxJzogdHJ1ZSxcbiAgICAnYXZjMic6IHRydWUsXG4gICAgJ2F2YzMnOiB0cnVlLFxuICAgICdhdmM0JzogdHJ1ZSxcbiAgICAnYXZjcCc6IHRydWUsXG4gICAgJ2RyYWMnOiB0cnVlLFxuICAgICdkdmF2JzogdHJ1ZSxcbiAgICAnZHZoZSc6IHRydWUsXG4gICAgJ2VuY3YnOiB0cnVlLFxuICAgICdoZXYxJzogdHJ1ZSxcbiAgICAnaHZjMSc6IHRydWUsXG4gICAgJ21qcDInOiB0cnVlLFxuICAgICdtcDR2JzogdHJ1ZSxcbiAgICAnbXZjMSc6IHRydWUsXG4gICAgJ212YzInOiB0cnVlLFxuICAgICdtdmMzJzogdHJ1ZSxcbiAgICAnbXZjNCc6IHRydWUsXG4gICAgJ3Jlc3YnOiB0cnVlLFxuICAgICdydjYwJzogdHJ1ZSxcbiAgICAnczI2Myc6IHRydWUsXG4gICAgJ3N2YzEnOiB0cnVlLFxuICAgICdzdmMyJzogdHJ1ZSxcbiAgICAndmMtMSc6IHRydWUsXG4gICAgJ3ZwMDgnOiB0cnVlLFxuICAgICd2cDA5JzogdHJ1ZVxuICB9XG59O1xuXG5mdW5jdGlvbiBpc0NvZGVjVHlwZShjb2RlYywgdHlwZSkge1xuICB2YXIgdHlwZUNvZGVzID0gc2FtcGxlRW50cnlDb2Rlc0lTT1t0eXBlXTtcbiAgcmV0dXJuICEhdHlwZUNvZGVzICYmIHR5cGVDb2Rlc1tjb2RlYy5zbGljZSgwLCA0KV0gPT09IHRydWU7XG59XG5cbmZ1bmN0aW9uIGlzQ29kZWNTdXBwb3J0ZWRJbk1wNChjb2RlYywgdHlwZSkge1xuICByZXR1cm4gTWVkaWFTb3VyY2UuaXNUeXBlU3VwcG9ydGVkKCh0eXBlIHx8ICd2aWRlbycpICsgXCIvbXA0O2NvZGVjcz1cXFwiXCIgKyBjb2RlYyArIFwiXFxcIlwiKTtcbn1cblxuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9sb2FkZXIvbTN1OC1wYXJzZXIudHNcblxuXG5cblxuXG5cblxuXG5cblxuXG4vKipcbiAqIE0zVTggcGFyc2VyXG4gKiBAbW9kdWxlXG4gKi9cbi8vIGh0dHBzOi8vcmVnZXgxMDEuY29tIGlzIHlvdXIgZnJpZW5kXG52YXIgTUFTVEVSX1BMQVlMSVNUX1JFR0VYID0gLyg/OiNFWFQtWC1TVFJFQU0tSU5GOihbXlxcblxccl0qKVtcXHJcXG5dKyhbXlxcclxcbl0rKXwjRVhULVgtU0VTU0lPTi1EQVRBOihbXlxcblxccl0qKVtcXHJcXG5dKykvZztcbnZhciBNQVNURVJfUExBWUxJU1RfTUVESUFfUkVHRVggPSAvI0VYVC1YLU1FRElBOiguKikvZztcbnZhciBMRVZFTF9QTEFZTElTVF9SRUdFWF9GQVNUID0gbmV3IFJlZ0V4cChbLyNFWFRJTkY6XFxzKihcXGQqKD86XFwuXFxkKyk/KSg/OiwoLiopXFxzKyk/Ly5zb3VyY2UsIC8vIGR1cmF0aW9uICgjRVhUSU5GOjxkdXJhdGlvbj4sPHRpdGxlPiksIGdyb3VwIDEgPT4gZHVyYXRpb24sIGdyb3VwIDIgPT4gdGl0bGVcbi98KD8hIykoW1xcUysgP10rKS8uc291cmNlLCAvLyBzZWdtZW50IFVSSSwgZ3JvdXAgMyA9PiB0aGUgVVJJIChub3RlIG5ld2xpbmUgaXMgbm90IGVhdGVuKVxuL3wjRVhULVgtQllURVJBTkdFOiooLispLy5zb3VyY2UsIC8vIG5leHQgc2VnbWVudCdzIGJ5dGVyYW5nZSwgZ3JvdXAgNCA9PiByYW5nZSBzcGVjICh4QHkpXG4vfCNFWFQtWC1QUk9HUkFNLURBVEUtVElNRTooLispLy5zb3VyY2UsIC8vIG5leHQgc2VnbWVudCdzIHByb2dyYW0gZGF0ZS90aW1lIGdyb3VwIDUgPT4gdGhlIGRhdGV0aW1lIHNwZWNcbi98Iy4qLy5zb3VyY2UgLy8gQWxsIG90aGVyIG5vbi1zZWdtZW50IG9yaWVudGVkIHRhZ3Mgd2lsbCBtYXRjaCB3aXRoIGFsbCBncm91cHMgZW1wdHlcbl0uam9pbignJyksICdnJyk7XG52YXIgTEVWRUxfUExBWUxJU1RfUkVHRVhfU0xPVyA9IC8oPzooPzojKEVYVE0zVSkpfCg/OiNFWFQtWC0oUExBWUxJU1QtVFlQRSk6KC4rKSl8KD86I0VYVC1YLShNRURJQS1TRVFVRU5DRSk6ICooXFxkKykpfCg/OiNFWFQtWC0oVEFSR0VURFVSQVRJT04pOiAqKFxcZCspKXwoPzojRVhULVgtKEtFWSk6KC4rKSl8KD86I0VYVC1YLShTVEFSVCk6KC4rKSl8KD86I0VYVC1YLShFTkRMSVNUKSl8KD86I0VYVC1YLShESVNDT05USU5VSVRZLVNFUSlVRU5DRTooXFxkKykpfCg/OiNFWFQtWC0oRElTKUNPTlRJTlVJVFkpKXwoPzojRVhULVgtKFZFUlNJT04pOihcXGQrKSl8KD86I0VYVC1YLShNQVApOiguKykpfCg/OigjKShbXjpdKik6KC4qKSl8KD86KCMpKC4qKSkoPzouKilcXHI/XFxuPy87XG52YXIgTVA0X1JFR0VYX1NVRkZJWCA9IC9cXC4obXA0fG00c3xtNHZ8bTRhKSQvaTtcblxudmFyIG0zdThfcGFyc2VyX00zVThQYXJzZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNM1U4UGFyc2VyKCkge31cblxuICBNM1U4UGFyc2VyLmZpbmRHcm91cCA9IGZ1bmN0aW9uIGZpbmRHcm91cChncm91cHMsIG1lZGlhR3JvdXBJZCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZ3JvdXAgPSBncm91cHNbaV07XG5cbiAgICAgIGlmIChncm91cC5pZCA9PT0gbWVkaWFHcm91cElkKSB7XG4gICAgICAgIHJldHVybiBncm91cDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgTTNVOFBhcnNlci5jb252ZXJ0QVZDMVRvQVZDT1RJID0gZnVuY3Rpb24gY29udmVydEFWQzFUb0FWQ09USShjb2RlYykge1xuICAgIHZhciBhdmNkYXRhID0gY29kZWMuc3BsaXQoJy4nKTtcbiAgICB2YXIgcmVzdWx0O1xuXG4gICAgaWYgKGF2Y2RhdGEubGVuZ3RoID4gMikge1xuICAgICAgcmVzdWx0ID0gYXZjZGF0YS5zaGlmdCgpICsgJy4nO1xuICAgICAgcmVzdWx0ICs9IHBhcnNlSW50KGF2Y2RhdGEuc2hpZnQoKSkudG9TdHJpbmcoMTYpO1xuICAgICAgcmVzdWx0ICs9ICgnMDAwJyArIHBhcnNlSW50KGF2Y2RhdGEuc2hpZnQoKSkudG9TdHJpbmcoMTYpKS5zdWJzdHIoLTQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBjb2RlYztcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIE0zVThQYXJzZXIucmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUodXJsLCBiYXNlVXJsKSB7XG4gICAgcmV0dXJuIHVybF90b29sa2l0W1wiYnVpbGRBYnNvbHV0ZVVSTFwiXShiYXNlVXJsLCB1cmwsIHtcbiAgICAgIGFsd2F5c05vcm1hbGl6ZTogdHJ1ZVxuICAgIH0pO1xuICB9O1xuXG4gIE0zVThQYXJzZXIucGFyc2VNYXN0ZXJQbGF5bGlzdCA9IGZ1bmN0aW9uIHBhcnNlTWFzdGVyUGxheWxpc3Qoc3RyaW5nLCBiYXNldXJsKSB7XG4gICAgLy8gVE9ETyh0eXBlc2NyaXB0LWxldmVsKVxuICAgIHZhciBsZXZlbHMgPSBbXTtcbiAgICB2YXIgc2Vzc2lvbkRhdGEgPSB7fTtcbiAgICB2YXIgaGFzU2Vzc2lvbkRhdGEgPSBmYWxzZTtcbiAgICBNQVNURVJfUExBWUxJU1RfUkVHRVgubGFzdEluZGV4ID0gMDsgLy8gVE9ETyh0eXBlc2NyaXB0LWxldmVsKVxuXG4gICAgZnVuY3Rpb24gc2V0Q29kZWNzKGNvZGVjcywgbGV2ZWwpIHtcbiAgICAgIFsndmlkZW8nLCAnYXVkaW8nXS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgIHZhciBmaWx0ZXJlZCA9IGNvZGVjcy5maWx0ZXIoZnVuY3Rpb24gKGNvZGVjKSB7XG4gICAgICAgICAgcmV0dXJuIGlzQ29kZWNUeXBlKGNvZGVjLCB0eXBlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGZpbHRlcmVkLmxlbmd0aCkge1xuICAgICAgICAgIHZhciBwcmVmZXJyZWQgPSBmaWx0ZXJlZC5maWx0ZXIoZnVuY3Rpb24gKGNvZGVjKSB7XG4gICAgICAgICAgICByZXR1cm4gY29kZWMubGFzdEluZGV4T2YoJ2F2YzEnLCAwKSA9PT0gMCB8fCBjb2RlYy5sYXN0SW5kZXhPZignbXA0YScsIDApID09PSAwO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGxldmVsW3R5cGUgKyBcIkNvZGVjXCJdID0gcHJlZmVycmVkLmxlbmd0aCA+IDAgPyBwcmVmZXJyZWRbMF0gOiBmaWx0ZXJlZFswXTsgLy8gcmVtb3ZlIGZyb20gbGlzdFxuXG4gICAgICAgICAgY29kZWNzID0gY29kZWNzLmZpbHRlcihmdW5jdGlvbiAoY29kZWMpIHtcbiAgICAgICAgICAgIHJldHVybiBmaWx0ZXJlZC5pbmRleE9mKGNvZGVjKSA9PT0gLTE7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgbGV2ZWwudW5rbm93bkNvZGVjcyA9IGNvZGVjcztcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0O1xuXG4gICAgd2hpbGUgKChyZXN1bHQgPSBNQVNURVJfUExBWUxJU1RfUkVHRVguZXhlYyhzdHJpbmcpKSAhPSBudWxsKSB7XG4gICAgICBpZiAocmVzdWx0WzFdKSB7XG4gICAgICAgIC8vICcjRVhULVgtU1RSRUFNLUlORicgaXMgZm91bmQsIHBhcnNlIGxldmVsIHRhZyAgaW4gZ3JvdXAgMVxuICAgICAgICAvLyBUT0RPKHR5cGVzY3JpcHQtbGV2ZWwpXG4gICAgICAgIHZhciBsZXZlbCA9IHt9O1xuICAgICAgICB2YXIgYXR0cnMgPSBsZXZlbC5hdHRycyA9IG5ldyBhdHRyX2xpc3QocmVzdWx0WzFdKTtcbiAgICAgICAgbGV2ZWwudXJsID0gTTNVOFBhcnNlci5yZXNvbHZlKHJlc3VsdFsyXSwgYmFzZXVybCk7XG4gICAgICAgIHZhciByZXNvbHV0aW9uID0gYXR0cnMuZGVjaW1hbFJlc29sdXRpb24oJ1JFU09MVVRJT04nKTtcblxuICAgICAgICBpZiAocmVzb2x1dGlvbikge1xuICAgICAgICAgIGxldmVsLndpZHRoID0gcmVzb2x1dGlvbi53aWR0aDtcbiAgICAgICAgICBsZXZlbC5oZWlnaHQgPSByZXNvbHV0aW9uLmhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldmVsLmJpdHJhdGUgPSBhdHRycy5kZWNpbWFsSW50ZWdlcignQVZFUkFHRS1CQU5EV0lEVEgnKSB8fCBhdHRycy5kZWNpbWFsSW50ZWdlcignQkFORFdJRFRIJyk7XG4gICAgICAgIGxldmVsLm5hbWUgPSBhdHRycy5OQU1FO1xuICAgICAgICBzZXRDb2RlY3MoW10uY29uY2F0KChhdHRycy5DT0RFQ1MgfHwgJycpLnNwbGl0KC9bICxdKy8pKSwgbGV2ZWwpO1xuXG4gICAgICAgIGlmIChsZXZlbC52aWRlb0NvZGVjICYmIGxldmVsLnZpZGVvQ29kZWMuaW5kZXhPZignYXZjMScpICE9PSAtMSkge1xuICAgICAgICAgIGxldmVsLnZpZGVvQ29kZWMgPSBNM1U4UGFyc2VyLmNvbnZlcnRBVkMxVG9BVkNPVEkobGV2ZWwudmlkZW9Db2RlYyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXZlbHMucHVzaChsZXZlbCk7XG4gICAgICB9IGVsc2UgaWYgKHJlc3VsdFszXSkge1xuICAgICAgICAvLyAnI0VYVC1YLVNFU1NJT04tREFUQScgaXMgZm91bmQsIHBhcnNlIHNlc3Npb24gZGF0YSBpbiBncm91cCAzXG4gICAgICAgIHZhciBzZXNzaW9uQXR0cnMgPSBuZXcgYXR0cl9saXN0KHJlc3VsdFszXSk7XG5cbiAgICAgICAgaWYgKHNlc3Npb25BdHRyc1snREFUQS1JRCddKSB7XG4gICAgICAgICAgaGFzU2Vzc2lvbkRhdGEgPSB0cnVlO1xuICAgICAgICAgIHNlc3Npb25EYXRhW3Nlc3Npb25BdHRyc1snREFUQS1JRCddXSA9IHNlc3Npb25BdHRycztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBsZXZlbHM6IGxldmVscyxcbiAgICAgIHNlc3Npb25EYXRhOiBoYXNTZXNzaW9uRGF0YSA/IHNlc3Npb25EYXRhIDogbnVsbFxuICAgIH07XG4gIH07XG5cbiAgTTNVOFBhcnNlci5wYXJzZU1hc3RlclBsYXlsaXN0TWVkaWEgPSBmdW5jdGlvbiBwYXJzZU1hc3RlclBsYXlsaXN0TWVkaWEoc3RyaW5nLCBiYXNldXJsLCB0eXBlLCBhdWRpb0dyb3Vwcykge1xuICAgIGlmIChhdWRpb0dyb3VwcyA9PT0gdm9pZCAwKSB7XG4gICAgICBhdWRpb0dyb3VwcyA9IFtdO1xuICAgIH1cblxuICAgIHZhciByZXN1bHQ7XG4gICAgdmFyIG1lZGlhcyA9IFtdO1xuICAgIHZhciBpZCA9IDA7XG4gICAgTUFTVEVSX1BMQVlMSVNUX01FRElBX1JFR0VYLmxhc3RJbmRleCA9IDA7XG5cbiAgICB3aGlsZSAoKHJlc3VsdCA9IE1BU1RFUl9QTEFZTElTVF9NRURJQV9SRUdFWC5leGVjKHN0cmluZykpICE9PSBudWxsKSB7XG4gICAgICB2YXIgYXR0cnMgPSBuZXcgYXR0cl9saXN0KHJlc3VsdFsxXSk7XG5cbiAgICAgIGlmIChhdHRycy5UWVBFID09PSB0eXBlKSB7XG4gICAgICAgIHZhciBtZWRpYSA9IHtcbiAgICAgICAgICBhdHRyczogYXR0cnMsXG4gICAgICAgICAgaWQ6IGlkKyssXG4gICAgICAgICAgZ3JvdXBJZDogYXR0cnNbJ0dST1VQLUlEJ10sXG4gICAgICAgICAgaW5zdHJlYW1JZDogYXR0cnNbJ0lOU1RSRUFNLUlEJ10sXG4gICAgICAgICAgbmFtZTogYXR0cnMuTkFNRSB8fCBhdHRycy5MQU5HVUFHRSxcbiAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgIGRlZmF1bHQ6IGF0dHJzLkRFRkFVTFQgPT09ICdZRVMnLFxuICAgICAgICAgIGF1dG9zZWxlY3Q6IGF0dHJzLkFVVE9TRUxFQ1QgPT09ICdZRVMnLFxuICAgICAgICAgIGZvcmNlZDogYXR0cnMuRk9SQ0VEID09PSAnWUVTJyxcbiAgICAgICAgICBsYW5nOiBhdHRycy5MQU5HVUFHRVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChhdHRycy5VUkkpIHtcbiAgICAgICAgICBtZWRpYS51cmwgPSBNM1U4UGFyc2VyLnJlc29sdmUoYXR0cnMuVVJJLCBiYXNldXJsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhdWRpb0dyb3Vwcy5sZW5ndGgpIHtcbiAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgYXVkaW8gZ3JvdXBzIHNpZ25hbGxlZCBpbiB0aGUgbWFuaWZlc3QsIGxldCdzIGxvb2sgZm9yIGEgbWF0Y2hpbmcgY29kZWMgc3RyaW5nIGZvciB0aGlzIHRyYWNrXG4gICAgICAgICAgdmFyIGdyb3VwQ29kZWMgPSBNM1U4UGFyc2VyLmZpbmRHcm91cChhdWRpb0dyb3VwcywgbWVkaWEuZ3JvdXBJZCk7IC8vIElmIHdlIGRvbid0IGZpbmQgdGhlIHRyYWNrIHNpZ25hbGxlZCwgbGV0cyB1c2UgdGhlIGZpcnN0IGF1ZGlvIGdyb3VwcyBjb2RlYyB3ZSBoYXZlXG4gICAgICAgICAgLy8gQWN0aW5nIGFzIGEgYmVzdCBndWVzc1xuXG4gICAgICAgICAgbWVkaWEuYXVkaW9Db2RlYyA9IGdyb3VwQ29kZWMgPyBncm91cENvZGVjLmNvZGVjIDogYXVkaW9Hcm91cHNbMF0uY29kZWM7XG4gICAgICAgIH1cblxuICAgICAgICBtZWRpYXMucHVzaChtZWRpYSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lZGlhcztcbiAgfTtcblxuICBNM1U4UGFyc2VyLnBhcnNlTGV2ZWxQbGF5bGlzdCA9IGZ1bmN0aW9uIHBhcnNlTGV2ZWxQbGF5bGlzdChzdHJpbmcsIGJhc2V1cmwsIGlkLCB0eXBlLCBsZXZlbFVybElkKSB7XG4gICAgdmFyIGN1cnJlbnRTTiA9IDA7XG4gICAgdmFyIHRvdGFsZHVyYXRpb24gPSAwO1xuICAgIHZhciBsZXZlbCA9IG5ldyBsZXZlbF9MZXZlbChiYXNldXJsKTtcbiAgICB2YXIgZGlzY29udGludWl0eUNvdW50ZXIgPSAwO1xuICAgIHZhciBwcmV2RnJhZyA9IG51bGw7XG4gICAgdmFyIGZyYWcgPSBuZXcgZnJhZ21lbnRfRnJhZ21lbnQoKTtcbiAgICB2YXIgcmVzdWx0O1xuICAgIHZhciBpO1xuICAgIHZhciBsZXZlbGtleTtcbiAgICB2YXIgZmlyc3RQZHRJbmRleCA9IG51bGw7XG4gICAgTEVWRUxfUExBWUxJU1RfUkVHRVhfRkFTVC5sYXN0SW5kZXggPSAwO1xuXG4gICAgd2hpbGUgKChyZXN1bHQgPSBMRVZFTF9QTEFZTElTVF9SRUdFWF9GQVNULmV4ZWMoc3RyaW5nKSkgIT09IG51bGwpIHtcbiAgICAgIHZhciBkdXJhdGlvbiA9IHJlc3VsdFsxXTtcblxuICAgICAgaWYgKGR1cmF0aW9uKSB7XG4gICAgICAgIC8vIElORlxuICAgICAgICBmcmFnLmR1cmF0aW9uID0gcGFyc2VGbG9hdChkdXJhdGlvbik7IC8vIGF2b2lkIHNsaWNlZCBzdHJpbmdzICAgIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlby1kZXYvaGxzLmpzL2lzc3Vlcy85MzlcblxuICAgICAgICB2YXIgdGl0bGUgPSAoJyAnICsgcmVzdWx0WzJdKS5zbGljZSgxKTtcbiAgICAgICAgZnJhZy50aXRsZSA9IHRpdGxlIHx8IG51bGw7XG4gICAgICAgIGZyYWcudGFnTGlzdC5wdXNoKHRpdGxlID8gWydJTkYnLCBkdXJhdGlvbiwgdGl0bGVdIDogWydJTkYnLCBkdXJhdGlvbl0pO1xuICAgICAgfSBlbHNlIGlmIChyZXN1bHRbM10pIHtcbiAgICAgICAgLy8gdXJsXG4gICAgICAgIGlmIChPYmplY3QobnVtYmVyW1wiaXNGaW5pdGVOdW1iZXJcIl0pKGZyYWcuZHVyYXRpb24pKSB7XG4gICAgICAgICAgdmFyIHNuID0gY3VycmVudFNOKys7XG4gICAgICAgICAgZnJhZy50eXBlID0gdHlwZTtcbiAgICAgICAgICBmcmFnLnN0YXJ0ID0gdG90YWxkdXJhdGlvbjtcblxuICAgICAgICAgIGlmIChsZXZlbGtleSkge1xuICAgICAgICAgICAgZnJhZy5sZXZlbGtleSA9IGxldmVsa2V5O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZyYWcuc24gPSBzbjtcbiAgICAgICAgICBmcmFnLmxldmVsID0gaWQ7XG4gICAgICAgICAgZnJhZy5jYyA9IGRpc2NvbnRpbnVpdHlDb3VudGVyO1xuICAgICAgICAgIGZyYWcudXJsSWQgPSBsZXZlbFVybElkO1xuICAgICAgICAgIGZyYWcuYmFzZXVybCA9IGJhc2V1cmw7IC8vIGF2b2lkIHNsaWNlZCBzdHJpbmdzICAgIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlby1kZXYvaGxzLmpzL2lzc3Vlcy85MzlcblxuICAgICAgICAgIGZyYWcucmVsdXJsID0gKCcgJyArIHJlc3VsdFszXSkuc2xpY2UoMSk7XG4gICAgICAgICAgYXNzaWduUHJvZ3JhbURhdGVUaW1lKGZyYWcsIHByZXZGcmFnKTtcbiAgICAgICAgICBsZXZlbC5mcmFnbWVudHMucHVzaChmcmFnKTtcbiAgICAgICAgICBwcmV2RnJhZyA9IGZyYWc7XG4gICAgICAgICAgdG90YWxkdXJhdGlvbiArPSBmcmFnLmR1cmF0aW9uO1xuICAgICAgICAgIGZyYWcgPSBuZXcgZnJhZ21lbnRfRnJhZ21lbnQoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChyZXN1bHRbNF0pIHtcbiAgICAgICAgLy8gWC1CWVRFUkFOR0VcbiAgICAgICAgdmFyIGRhdGEgPSAoJyAnICsgcmVzdWx0WzRdKS5zbGljZSgxKTtcblxuICAgICAgICBpZiAocHJldkZyYWcpIHtcbiAgICAgICAgICBmcmFnLnNldEJ5dGVSYW5nZShkYXRhLCBwcmV2RnJhZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZnJhZy5zZXRCeXRlUmFuZ2UoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocmVzdWx0WzVdKSB7XG4gICAgICAgIC8vIFBST0dSQU0tREFURS1USU1FXG4gICAgICAgIC8vIGF2b2lkIHNsaWNlZCBzdHJpbmdzICAgIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlby1kZXYvaGxzLmpzL2lzc3Vlcy85MzlcbiAgICAgICAgZnJhZy5yYXdQcm9ncmFtRGF0ZVRpbWUgPSAoJyAnICsgcmVzdWx0WzVdKS5zbGljZSgxKTtcbiAgICAgICAgZnJhZy50YWdMaXN0LnB1c2goWydQUk9HUkFNLURBVEUtVElNRScsIGZyYWcucmF3UHJvZ3JhbURhdGVUaW1lXSk7XG5cbiAgICAgICAgaWYgKGZpcnN0UGR0SW5kZXggPT09IG51bGwpIHtcbiAgICAgICAgICBmaXJzdFBkdEluZGV4ID0gbGV2ZWwuZnJhZ21lbnRzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0WzBdLm1hdGNoKExFVkVMX1BMQVlMSVNUX1JFR0VYX1NMT1cpO1xuXG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLndhcm4oJ05vIG1hdGNoZXMgb24gc2xvdyByZWdleCBtYXRjaCBmb3IgbGV2ZWwgcGxheWxpc3QhJyk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgcmVzdWx0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHRbaV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gYXZvaWQgc2xpY2VkIHN0cmluZ3MgICAgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvLWRldi9obHMuanMvaXNzdWVzLzkzOVxuXG5cbiAgICAgICAgdmFyIHZhbHVlMSA9ICgnICcgKyByZXN1bHRbaSArIDFdKS5zbGljZSgxKTtcbiAgICAgICAgdmFyIHZhbHVlMiA9ICgnICcgKyByZXN1bHRbaSArIDJdKS5zbGljZSgxKTtcblxuICAgICAgICBzd2l0Y2ggKHJlc3VsdFtpXSkge1xuICAgICAgICAgIGNhc2UgJyMnOlxuICAgICAgICAgICAgZnJhZy50YWdMaXN0LnB1c2godmFsdWUyID8gW3ZhbHVlMSwgdmFsdWUyXSA6IFt2YWx1ZTFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnUExBWUxJU1QtVFlQRSc6XG4gICAgICAgICAgICBsZXZlbC50eXBlID0gdmFsdWUxLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ01FRElBLVNFUVVFTkNFJzpcbiAgICAgICAgICAgIGN1cnJlbnRTTiA9IGxldmVsLnN0YXJ0U04gPSBwYXJzZUludCh2YWx1ZTEpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdUQVJHRVREVVJBVElPTic6XG4gICAgICAgICAgICBsZXZlbC50YXJnZXRkdXJhdGlvbiA9IHBhcnNlRmxvYXQodmFsdWUxKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnVkVSU0lPTic6XG4gICAgICAgICAgICBsZXZlbC52ZXJzaW9uID0gcGFyc2VJbnQodmFsdWUxKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnRVhUTTNVJzpcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnRU5ETElTVCc6XG4gICAgICAgICAgICBsZXZlbC5saXZlID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ0RJUyc6XG4gICAgICAgICAgICBkaXNjb250aW51aXR5Q291bnRlcisrO1xuICAgICAgICAgICAgZnJhZy50YWdMaXN0LnB1c2goWydESVMnXSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ0RJU0NPTlRJTlVJVFktU0VRJzpcbiAgICAgICAgICAgIGRpc2NvbnRpbnVpdHlDb3VudGVyID0gcGFyc2VJbnQodmFsdWUxKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnS0VZJzpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzgyMTYjc2VjdGlvbi00LjMuMi40XG4gICAgICAgICAgICAgIHZhciBkZWNyeXB0cGFyYW1zID0gdmFsdWUxO1xuICAgICAgICAgICAgICB2YXIga2V5QXR0cnMgPSBuZXcgYXR0cl9saXN0KGRlY3J5cHRwYXJhbXMpO1xuICAgICAgICAgICAgICB2YXIgZGVjcnlwdG1ldGhvZCA9IGtleUF0dHJzLmVudW1lcmF0ZWRTdHJpbmcoJ01FVEhPRCcpO1xuICAgICAgICAgICAgICB2YXIgZGVjcnlwdHVyaSA9IGtleUF0dHJzLlVSSTtcbiAgICAgICAgICAgICAgdmFyIGRlY3J5cHRpdiA9IGtleUF0dHJzLmhleGFkZWNpbWFsSW50ZWdlcignSVYnKTsgLy8gRnJvbSBSRkM6IFRoaXMgYXR0cmlidXRlIGlzIE9QVElPTkFMOyBpdHMgYWJzZW5jZSBpbmRpY2F0ZXMgYW4gaW1wbGljaXQgdmFsdWUgb2YgXCJpZGVudGl0eVwiLlxuXG4gICAgICAgICAgICAgIHZhciBkZWNyeXB0a2V5Zm9ybWF0ID0ga2V5QXR0cnMuS0VZRk9STUFUIHx8ICdpZGVudGl0eSc7XG5cbiAgICAgICAgICAgICAgaWYgKGRlY3J5cHRrZXlmb3JtYXQgPT09ICdjb20uYXBwbGUuc3RyZWFtaW5na2V5ZGVsaXZlcnknKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLndhcm4oJ0tleWZvcm1hdCBjb20uYXBwbGUuc3RyZWFtaW5na2V5ZGVsaXZlcnkgaXMgbm90IHN1cHBvcnRlZCcpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGRlY3J5cHRtZXRob2QpIHtcbiAgICAgICAgICAgICAgICBsZXZlbGtleSA9IG5ldyBsZXZlbF9rZXlfTGV2ZWxLZXkoYmFzZXVybCwgZGVjcnlwdHVyaSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZGVjcnlwdHVyaSAmJiBbJ0FFUy0xMjgnLCAnU0FNUExFLUFFUycsICdTQU1QTEUtQUVTLUNFTkMnXS5pbmRleE9mKGRlY3J5cHRtZXRob2QpID49IDApIHtcbiAgICAgICAgICAgICAgICAgIGxldmVsa2V5Lm1ldGhvZCA9IGRlY3J5cHRtZXRob2Q7XG4gICAgICAgICAgICAgICAgICBsZXZlbGtleS5rZXkgPSBudWxsOyAvLyBJbml0aWFsaXphdGlvbiBWZWN0b3IgKElWKVxuXG4gICAgICAgICAgICAgICAgICBsZXZlbGtleS5pdiA9IGRlY3J5cHRpdjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIGNhc2UgJ1NUQVJUJzpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdmFyIHN0YXJ0QXR0cnMgPSBuZXcgYXR0cl9saXN0KHZhbHVlMSk7XG4gICAgICAgICAgICAgIHZhciBzdGFydFRpbWVPZmZzZXQgPSBzdGFydEF0dHJzLmRlY2ltYWxGbG9hdGluZ1BvaW50KCdUSU1FLU9GRlNFVCcpOyAvLyBUSU1FLU9GRlNFVCBjYW4gYmUgMFxuXG4gICAgICAgICAgICAgIGlmIChPYmplY3QobnVtYmVyW1wiaXNGaW5pdGVOdW1iZXJcIl0pKHN0YXJ0VGltZU9mZnNldCkpIHtcbiAgICAgICAgICAgICAgICBsZXZlbC5zdGFydFRpbWVPZmZzZXQgPSBzdGFydFRpbWVPZmZzZXQ7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIGNhc2UgJ01BUCc6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHZhciBtYXBBdHRycyA9IG5ldyBhdHRyX2xpc3QodmFsdWUxKTtcbiAgICAgICAgICAgICAgZnJhZy5yZWx1cmwgPSBtYXBBdHRycy5VUkk7XG5cbiAgICAgICAgICAgICAgaWYgKG1hcEF0dHJzLkJZVEVSQU5HRSkge1xuICAgICAgICAgICAgICAgIGZyYWcuc2V0Qnl0ZVJhbmdlKG1hcEF0dHJzLkJZVEVSQU5HRSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBmcmFnLmJhc2V1cmwgPSBiYXNldXJsO1xuICAgICAgICAgICAgICBmcmFnLmxldmVsID0gaWQ7XG4gICAgICAgICAgICAgIGZyYWcudHlwZSA9IHR5cGU7XG4gICAgICAgICAgICAgIGZyYWcuc24gPSAnaW5pdFNlZ21lbnQnO1xuICAgICAgICAgICAgICBsZXZlbC5pbml0U2VnbWVudCA9IGZyYWc7XG4gICAgICAgICAgICAgIGZyYWcgPSBuZXcgZnJhZ21lbnRfRnJhZ21lbnQoKTtcbiAgICAgICAgICAgICAgZnJhZy5yYXdQcm9ncmFtRGF0ZVRpbWUgPSBsZXZlbC5pbml0U2VnbWVudC5yYXdQcm9ncmFtRGF0ZVRpbWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuKFwibGluZSBwYXJzZWQgYnV0IG5vdCBoYW5kbGVkOiBcIiArIHJlc3VsdCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZyYWcgPSBwcmV2RnJhZzsgLy8gbG9nZ2VyLmxvZygnZm91bmQgJyArIGxldmVsLmZyYWdtZW50cy5sZW5ndGggKyAnIGZyYWdtZW50cycpO1xuXG4gICAgaWYgKGZyYWcgJiYgIWZyYWcucmVsdXJsKSB7XG4gICAgICBsZXZlbC5mcmFnbWVudHMucG9wKCk7XG4gICAgICB0b3RhbGR1cmF0aW9uIC09IGZyYWcuZHVyYXRpb247XG4gICAgfVxuXG4gICAgbGV2ZWwudG90YWxkdXJhdGlvbiA9IHRvdGFsZHVyYXRpb247XG4gICAgbGV2ZWwuYXZlcmFnZXRhcmdldGR1cmF0aW9uID0gdG90YWxkdXJhdGlvbiAvIGxldmVsLmZyYWdtZW50cy5sZW5ndGg7XG4gICAgbGV2ZWwuZW5kU04gPSBjdXJyZW50U04gLSAxO1xuICAgIGxldmVsLnN0YXJ0Q0MgPSBsZXZlbC5mcmFnbWVudHNbMF0gPyBsZXZlbC5mcmFnbWVudHNbMF0uY2MgOiAwO1xuICAgIGxldmVsLmVuZENDID0gZGlzY29udGludWl0eUNvdW50ZXI7XG5cbiAgICBpZiAoIWxldmVsLmluaXRTZWdtZW50ICYmIGxldmVsLmZyYWdtZW50cy5sZW5ndGgpIHtcbiAgICAgIC8vIHRoaXMgaXMgYSBiaXQgbHVya3kgYnV0IEhMUyByZWFsbHkgaGFzIG5vIG90aGVyIHdheSB0byB0ZWxsIHVzXG4gICAgICAvLyBpZiB0aGUgZnJhZ21lbnRzIGFyZSBUUyBvciBNUDQsIGV4Y2VwdCBpZiB3ZSBkb3dubG9hZCB0aGVtIDovXG4gICAgICAvLyBidXQgdGhpcyBpcyB0byBiZSBhYmxlIHRvIGhhbmRsZSBTSURYLlxuICAgICAgaWYgKGxldmVsLmZyYWdtZW50cy5ldmVyeShmdW5jdGlvbiAoZnJhZykge1xuICAgICAgICByZXR1cm4gTVA0X1JFR0VYX1NVRkZJWC50ZXN0KGZyYWcucmVsdXJsKTtcbiAgICAgIH0pKSB7XG4gICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuKCdNUDQgZnJhZ21lbnRzIGZvdW5kIGJ1dCBubyBpbml0IHNlZ21lbnQgKHByb2JhYmx5IG5vIE1BUCwgaW5jb21wbGV0ZSBNM1U4KSwgdHJ5aW5nIHRvIGZldGNoIFNJRFgnKTtcbiAgICAgICAgZnJhZyA9IG5ldyBmcmFnbWVudF9GcmFnbWVudCgpO1xuICAgICAgICBmcmFnLnJlbHVybCA9IGxldmVsLmZyYWdtZW50c1swXS5yZWx1cmw7XG4gICAgICAgIGZyYWcuYmFzZXVybCA9IGJhc2V1cmw7XG4gICAgICAgIGZyYWcubGV2ZWwgPSBpZDtcbiAgICAgICAgZnJhZy50eXBlID0gdHlwZTtcbiAgICAgICAgZnJhZy5zbiA9ICdpbml0U2VnbWVudCc7XG4gICAgICAgIGxldmVsLmluaXRTZWdtZW50ID0gZnJhZztcbiAgICAgICAgbGV2ZWwubmVlZFNpZHhSYW5nZXMgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBCYWNrZmlsbCBhbnkgbWlzc2luZyBQRFQgdmFsdWVzXG4gICAgICAgXCJJZiB0aGUgZmlyc3QgRVhULVgtUFJPR1JBTS1EQVRFLVRJTUUgdGFnIGluIGEgUGxheWxpc3QgYXBwZWFycyBhZnRlclxuICAgICAgIG9uZSBvciBtb3JlIE1lZGlhIFNlZ21lbnQgVVJJcywgdGhlIGNsaWVudCBTSE9VTEQgZXh0cmFwb2xhdGVcbiAgICAgICBiYWNrd2FyZCBmcm9tIHRoYXQgdGFnICh1c2luZyBFWFRJTkYgZHVyYXRpb25zIGFuZC9vciBtZWRpYVxuICAgICAgIHRpbWVzdGFtcHMpIHRvIGFzc29jaWF0ZSBkYXRlcyB3aXRoIHRob3NlIHNlZ21lbnRzLlwiXG4gICAgICogV2UgaGF2ZSBhbHJlYWR5IGV4dHJhcG9sYXRlZCBmb3J3YXJkLCBidXQgYWxsIGZyYWdtZW50cyB1cCB0byB0aGUgZmlyc3QgaW5zdGFuY2Ugb2YgUERUIGRvIG5vdCBoYXZlIHRoZWlyIFBEVHNcbiAgICAgKiBjb21wdXRlZC5cbiAgICAgKi9cblxuXG4gICAgaWYgKGZpcnN0UGR0SW5kZXgpIHtcbiAgICAgIGJhY2tmaWxsUHJvZ3JhbURhdGVUaW1lcyhsZXZlbC5mcmFnbWVudHMsIGZpcnN0UGR0SW5kZXgpO1xuICAgIH1cblxuICAgIHJldHVybiBsZXZlbDtcbiAgfTtcblxuICByZXR1cm4gTTNVOFBhcnNlcjtcbn0oKTtcblxuXG5cbmZ1bmN0aW9uIGJhY2tmaWxsUHJvZ3JhbURhdGVUaW1lcyhmcmFnbWVudHMsIHN0YXJ0SW5kZXgpIHtcbiAgdmFyIGZyYWdQcmV2ID0gZnJhZ21lbnRzW3N0YXJ0SW5kZXhdO1xuXG4gIGZvciAodmFyIGkgPSBzdGFydEluZGV4IC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgZnJhZyA9IGZyYWdtZW50c1tpXTtcbiAgICBmcmFnLnByb2dyYW1EYXRlVGltZSA9IGZyYWdQcmV2LnByb2dyYW1EYXRlVGltZSAtIGZyYWcuZHVyYXRpb24gKiAxMDAwO1xuICAgIGZyYWdQcmV2ID0gZnJhZztcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NpZ25Qcm9ncmFtRGF0ZVRpbWUoZnJhZywgcHJldkZyYWcpIHtcbiAgaWYgKGZyYWcucmF3UHJvZ3JhbURhdGVUaW1lKSB7XG4gICAgZnJhZy5wcm9ncmFtRGF0ZVRpbWUgPSBEYXRlLnBhcnNlKGZyYWcucmF3UHJvZ3JhbURhdGVUaW1lKTtcbiAgfSBlbHNlIGlmIChwcmV2RnJhZyA9PT0gbnVsbCB8fCBwcmV2RnJhZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJldkZyYWcucHJvZ3JhbURhdGVUaW1lKSB7XG4gICAgZnJhZy5wcm9ncmFtRGF0ZVRpbWUgPSBwcmV2RnJhZy5lbmRQcm9ncmFtRGF0ZVRpbWU7XG4gIH1cblxuICBpZiAoIU9iamVjdChudW1iZXJbXCJpc0Zpbml0ZU51bWJlclwiXSkoZnJhZy5wcm9ncmFtRGF0ZVRpbWUpKSB7XG4gICAgZnJhZy5wcm9ncmFtRGF0ZVRpbWUgPSBudWxsO1xuICAgIGZyYWcucmF3UHJvZ3JhbURhdGVUaW1lID0gbnVsbDtcbiAgfVxufVxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvbG9hZGVyL3BsYXlsaXN0LWxvYWRlci50c1xuXG5cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogUGxheWxpc3RMb2FkZXIgLSBkZWxlZ2F0ZSBmb3IgbWVkaWEgbWFuaWZlc3QvcGxheWxpc3QgbG9hZGluZyB0YXNrcy4gVGFrZXMgY2FyZSBvZiBwYXJzaW5nIG1lZGlhIHRvIGludGVybmFsIGRhdGEtbW9kZWxzLlxuICpcbiAqIE9uY2UgbG9hZGVkLCBkaXNwYXRjaGVzIGV2ZW50cyB3aXRoIHBhcnNlZCBkYXRhLW1vZGVscyBvZiBtYW5pZmVzdC9sZXZlbHMvYXVkaW8vc3VidGl0bGUgdHJhY2tzLlxuICpcbiAqIFVzZXMgbG9hZGVyKHMpIHNldCBpbiBjb25maWcgdG8gZG8gYWN0dWFsIGludGVybmFsIGxvYWRpbmcgb2YgcmVzb3VyY2UgdGFza3MuXG4gKlxuICogQG1vZHVsZVxuICpcbiAqL1xuXG5cblxuXG5cblxuXG52YXIgX3dpbmRvdyA9IHdpbmRvdyxcbiAgICBwZXJmb3JtYW5jZSA9IF93aW5kb3cucGVyZm9ybWFuY2U7XG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5cbnZhciBwbGF5bGlzdF9sb2FkZXJfUGxheWxpc3RMb2FkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9FdmVudEhhbmRsZXIpIHtcbiAgX2luaGVyaXRzTG9vc2UoUGxheWxpc3RMb2FkZXIsIF9FdmVudEhhbmRsZXIpO1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0c1xuICAgKiBAcGFyYW0ge0hsc30gaGxzXG4gICAqL1xuICBmdW5jdGlvbiBQbGF5bGlzdExvYWRlcihobHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9FdmVudEhhbmRsZXIuY2FsbCh0aGlzLCBobHMsIGV2ZW50c1tcImRlZmF1bHRcIl0uTUFOSUZFU1RfTE9BRElORywgZXZlbnRzW1wiZGVmYXVsdFwiXS5MRVZFTF9MT0FESU5HLCBldmVudHNbXCJkZWZhdWx0XCJdLkFVRElPX1RSQUNLX0xPQURJTkcsIGV2ZW50c1tcImRlZmF1bHRcIl0uU1VCVElUTEVfVFJBQ0tfTE9BRElORykgfHwgdGhpcztcbiAgICBfdGhpcy5sb2FkZXJzID0ge307XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1BsYXlsaXN0Q29udGV4dFR5cGV9IHR5cGVcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuXG5cbiAgUGxheWxpc3RMb2FkZXIuY2FuSGF2ZVF1YWxpdHlMZXZlbHMgPSBmdW5jdGlvbiBjYW5IYXZlUXVhbGl0eUxldmVscyh0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGUgIT09IFBsYXlsaXN0Q29udGV4dFR5cGUuQVVESU9fVFJBQ0sgJiYgdHlwZSAhPT0gUGxheWxpc3RDb250ZXh0VHlwZS5TVUJUSVRMRV9UUkFDSztcbiAgfVxuICAvKipcbiAgICogTWFwIGNvbnRleHQudHlwZSB0byBMZXZlbFR5cGVcbiAgICogQHBhcmFtIHtQbGF5bGlzdExvYWRlckNvbnRleHR9IGNvbnRleHRcbiAgICogQHJldHVybnMge0xldmVsVHlwZX1cbiAgICovXG4gIDtcblxuICBQbGF5bGlzdExvYWRlci5tYXBDb250ZXh0VG9MZXZlbFR5cGUgPSBmdW5jdGlvbiBtYXBDb250ZXh0VG9MZXZlbFR5cGUoY29udGV4dCkge1xuICAgIHZhciB0eXBlID0gY29udGV4dC50eXBlO1xuXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFBsYXlsaXN0Q29udGV4dFR5cGUuQVVESU9fVFJBQ0s6XG4gICAgICAgIHJldHVybiBQbGF5bGlzdExldmVsVHlwZS5BVURJTztcblxuICAgICAgY2FzZSBQbGF5bGlzdENvbnRleHRUeXBlLlNVQlRJVExFX1RSQUNLOlxuICAgICAgICByZXR1cm4gUGxheWxpc3RMZXZlbFR5cGUuU1VCVElUTEU7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBQbGF5bGlzdExldmVsVHlwZS5NQUlOO1xuICAgIH1cbiAgfTtcblxuICBQbGF5bGlzdExvYWRlci5nZXRSZXNwb25zZVVybCA9IGZ1bmN0aW9uIGdldFJlc3BvbnNlVXJsKHJlc3BvbnNlLCBjb250ZXh0KSB7XG4gICAgdmFyIHVybCA9IHJlc3BvbnNlLnVybDsgLy8gcmVzcG9uc2VVUkwgbm90IHN1cHBvcnRlZCBvbiBzb21lIGJyb3dzZXJzIChpdCBpcyB1c2VkIHRvIGRldGVjdCBVUkwgcmVkaXJlY3Rpb24pXG4gICAgLy8gZGF0YS11cmkgbW9kZSBhbHNvIG5vdCBzdXBwb3J0ZWQgKGJ1dCBubyBuZWVkIHRvIGRldGVjdCByZWRpcmVjdGlvbilcblxuICAgIGlmICh1cmwgPT09IHVuZGVmaW5lZCB8fCB1cmwuaW5kZXhPZignZGF0YTonKSA9PT0gMCkge1xuICAgICAgLy8gZmFsbGJhY2sgdG8gaW5pdGlhbCBVUkxcbiAgICAgIHVybCA9IGNvbnRleHQudXJsO1xuICAgIH1cblxuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgZGVmYXVsdHMgb3IgY29uZmlndXJlZCBsb2FkZXItdHlwZSBvdmVybG9hZHMgKHBMb2FkZXIgYW5kIGxvYWRlciBjb25maWcgcGFyYW1zKVxuICAgKiBEZWZhdWx0IGxvYWRlciBpcyBYSFJMb2FkZXIgKHNlZSB1dGlscylcbiAgICogQHBhcmFtIHtQbGF5bGlzdExvYWRlckNvbnRleHR9IGNvbnRleHRcbiAgICogQHJldHVybnMge0xvYWRlcn0gb3Igb3RoZXIgY29tcGF0aWJsZSBjb25maWd1cmVkIG92ZXJsb2FkXG4gICAqL1xuICA7XG5cbiAgdmFyIF9wcm90byA9IFBsYXlsaXN0TG9hZGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY3JlYXRlSW50ZXJuYWxMb2FkZXIgPSBmdW5jdGlvbiBjcmVhdGVJbnRlcm5hbExvYWRlcihjb250ZXh0KSB7XG4gICAgdmFyIGNvbmZpZyA9IHRoaXMuaGxzLmNvbmZpZztcbiAgICB2YXIgUExvYWRlciA9IGNvbmZpZy5wTG9hZGVyO1xuICAgIHZhciBMb2FkZXIgPSBjb25maWcubG9hZGVyOyAvLyBUT0RPKHR5cGVzY3JpcHQtY29uZmlnKTogVmVyaWZ5IG9uY2UgY29uZmlnIGlzIHR5cGVkIHRoYXQgSW50ZXJuYWxMb2FkZXIgYWx3YXlzIHJldHVybnMgYSBMb2FkZXJcblxuICAgIHZhciBJbnRlcm5hbExvYWRlciA9IFBMb2FkZXIgfHwgTG9hZGVyO1xuICAgIHZhciBsb2FkZXIgPSBuZXcgSW50ZXJuYWxMb2FkZXIoY29uZmlnKTsgLy8gVE9ETyAtIERvIHdlIHJlYWxseSBuZWVkIHRvIGFzc2lnbiB0aGUgaW5zdGFuY2Ugb3IgaWYgdGhlIGRlcCBoYXMgYmVlbiBsb3N0XG5cbiAgICBjb250ZXh0LmxvYWRlciA9IGxvYWRlcjtcbiAgICB0aGlzLmxvYWRlcnNbY29udGV4dC50eXBlXSA9IGxvYWRlcjtcbiAgICByZXR1cm4gbG9hZGVyO1xuICB9O1xuXG4gIF9wcm90by5nZXRJbnRlcm5hbExvYWRlciA9IGZ1bmN0aW9uIGdldEludGVybmFsTG9hZGVyKGNvbnRleHQpIHtcbiAgICByZXR1cm4gdGhpcy5sb2FkZXJzW2NvbnRleHQudHlwZV07XG4gIH07XG5cbiAgX3Byb3RvLnJlc2V0SW50ZXJuYWxMb2FkZXIgPSBmdW5jdGlvbiByZXNldEludGVybmFsTG9hZGVyKGNvbnRleHRUeXBlKSB7XG4gICAgaWYgKHRoaXMubG9hZGVyc1tjb250ZXh0VHlwZV0pIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmxvYWRlcnNbY29udGV4dFR5cGVdO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2FsbCBgZGVzdHJveWAgb24gYWxsIGludGVybmFsIGxvYWRlciBpbnN0YW5jZXMgbWFwcGVkIChvbmUgcGVyIGNvbnRleHQgdHlwZSlcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGVzdHJveUludGVybmFsTG9hZGVycyA9IGZ1bmN0aW9uIGRlc3Ryb3lJbnRlcm5hbExvYWRlcnMoKSB7XG4gICAgZm9yICh2YXIgY29udGV4dFR5cGUgaW4gdGhpcy5sb2FkZXJzKSB7XG4gICAgICB2YXIgbG9hZGVyID0gdGhpcy5sb2FkZXJzW2NvbnRleHRUeXBlXTtcblxuICAgICAgaWYgKGxvYWRlcikge1xuICAgICAgICBsb2FkZXIuZGVzdHJveSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlc2V0SW50ZXJuYWxMb2FkZXIoY29udGV4dFR5cGUpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5kZXN0cm95SW50ZXJuYWxMb2FkZXJzKCk7XG5cbiAgICBfRXZlbnRIYW5kbGVyLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLm9uTWFuaWZlc3RMb2FkaW5nID0gZnVuY3Rpb24gb25NYW5pZmVzdExvYWRpbmcoZGF0YSkge1xuICAgIHRoaXMubG9hZCh7XG4gICAgICB1cmw6IGRhdGEudXJsLFxuICAgICAgdHlwZTogUGxheWxpc3RDb250ZXh0VHlwZS5NQU5JRkVTVCxcbiAgICAgIGxldmVsOiAwLFxuICAgICAgaWQ6IG51bGwsXG4gICAgICByZXNwb25zZVR5cGU6ICd0ZXh0J1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5vbkxldmVsTG9hZGluZyA9IGZ1bmN0aW9uIG9uTGV2ZWxMb2FkaW5nKGRhdGEpIHtcbiAgICB0aGlzLmxvYWQoe1xuICAgICAgdXJsOiBkYXRhLnVybCxcbiAgICAgIHR5cGU6IFBsYXlsaXN0Q29udGV4dFR5cGUuTEVWRUwsXG4gICAgICBsZXZlbDogZGF0YS5sZXZlbCxcbiAgICAgIGlkOiBkYXRhLmlkLFxuICAgICAgcmVzcG9uc2VUeXBlOiAndGV4dCdcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ub25BdWRpb1RyYWNrTG9hZGluZyA9IGZ1bmN0aW9uIG9uQXVkaW9UcmFja0xvYWRpbmcoZGF0YSkge1xuICAgIHRoaXMubG9hZCh7XG4gICAgICB1cmw6IGRhdGEudXJsLFxuICAgICAgdHlwZTogUGxheWxpc3RDb250ZXh0VHlwZS5BVURJT19UUkFDSyxcbiAgICAgIGxldmVsOiBudWxsLFxuICAgICAgaWQ6IGRhdGEuaWQsXG4gICAgICByZXNwb25zZVR5cGU6ICd0ZXh0J1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5vblN1YnRpdGxlVHJhY2tMb2FkaW5nID0gZnVuY3Rpb24gb25TdWJ0aXRsZVRyYWNrTG9hZGluZyhkYXRhKSB7XG4gICAgdGhpcy5sb2FkKHtcbiAgICAgIHVybDogZGF0YS51cmwsXG4gICAgICB0eXBlOiBQbGF5bGlzdENvbnRleHRUeXBlLlNVQlRJVExFX1RSQUNLLFxuICAgICAgbGV2ZWw6IG51bGwsXG4gICAgICBpZDogZGF0YS5pZCxcbiAgICAgIHJlc3BvbnNlVHlwZTogJ3RleHQnXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmxvYWQgPSBmdW5jdGlvbiBsb2FkKGNvbnRleHQpIHtcbiAgICB2YXIgY29uZmlnID0gdGhpcy5obHMuY29uZmlnO1xuICAgIGxvZ2dlcltcImxvZ2dlclwiXS5kZWJ1ZyhcIkxvYWRpbmcgcGxheWxpc3Qgb2YgdHlwZSBcIiArIGNvbnRleHQudHlwZSArIFwiLCBsZXZlbDogXCIgKyBjb250ZXh0LmxldmVsICsgXCIsIGlkOiBcIiArIGNvbnRleHQuaWQpOyAvLyBDaGVjayBpZiBhIGxvYWRlciBmb3IgdGhpcyBjb250ZXh0IGFscmVhZHkgZXhpc3RzXG5cbiAgICB2YXIgbG9hZGVyID0gdGhpcy5nZXRJbnRlcm5hbExvYWRlcihjb250ZXh0KTtcblxuICAgIGlmIChsb2FkZXIpIHtcbiAgICAgIHZhciBsb2FkZXJDb250ZXh0ID0gbG9hZGVyLmNvbnRleHQ7XG5cbiAgICAgIGlmIChsb2FkZXJDb250ZXh0ICYmIGxvYWRlckNvbnRleHQudXJsID09PSBjb250ZXh0LnVybCkge1xuICAgICAgICAvLyBzYW1lIFVSTCBjYW4ndCBvdmVybGFwXG4gICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS50cmFjZSgncGxheWxpc3QgcmVxdWVzdCBvbmdvaW5nJyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuKFwiYWJvcnRpbmcgcHJldmlvdXMgbG9hZGVyIGZvciB0eXBlOiBcIiArIGNvbnRleHQudHlwZSk7XG4gICAgICAgIGxvYWRlci5hYm9ydCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBtYXhSZXRyeTtcbiAgICB2YXIgdGltZW91dDtcbiAgICB2YXIgcmV0cnlEZWxheTtcbiAgICB2YXIgbWF4UmV0cnlEZWxheTsgLy8gYXBwbHkgZGlmZmVyZW50IGNvbmZpZ3MgZm9yIHJldHJpZXMgZGVwZW5kaW5nIG9uXG4gICAgLy8gY29udGV4dCAobWFuaWZlc3QsIGxldmVsLCBhdWRpby9zdWJzIHBsYXlsaXN0KVxuXG4gICAgc3dpdGNoIChjb250ZXh0LnR5cGUpIHtcbiAgICAgIGNhc2UgUGxheWxpc3RDb250ZXh0VHlwZS5NQU5JRkVTVDpcbiAgICAgICAgbWF4UmV0cnkgPSBjb25maWcubWFuaWZlc3RMb2FkaW5nTWF4UmV0cnk7XG4gICAgICAgIHRpbWVvdXQgPSBjb25maWcubWFuaWZlc3RMb2FkaW5nVGltZU91dDtcbiAgICAgICAgcmV0cnlEZWxheSA9IGNvbmZpZy5tYW5pZmVzdExvYWRpbmdSZXRyeURlbGF5O1xuICAgICAgICBtYXhSZXRyeURlbGF5ID0gY29uZmlnLm1hbmlmZXN0TG9hZGluZ01heFJldHJ5VGltZW91dDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgUGxheWxpc3RDb250ZXh0VHlwZS5MRVZFTDpcbiAgICAgICAgLy8gRGlzYWJsZSBpbnRlcm5hbCBsb2FkZXIgcmV0cnkgbG9naWMsIHNpbmNlIHdlIGFyZSBtYW5hZ2luZyByZXRyaWVzIGluIExldmVsIENvbnRyb2xsZXJcbiAgICAgICAgbWF4UmV0cnkgPSAwO1xuICAgICAgICBtYXhSZXRyeURlbGF5ID0gMDtcbiAgICAgICAgcmV0cnlEZWxheSA9IDA7XG4gICAgICAgIHRpbWVvdXQgPSBjb25maWcubGV2ZWxMb2FkaW5nVGltZU91dDsgLy8gVE9ETyBJbnRyb2R1Y2UgcmV0cnkgc2V0dGluZ3MgZm9yIGF1ZGlvLXRyYWNrIGFuZCBzdWJ0aXRsZS10cmFjaywgaXQgc2hvdWxkIG5vdCB1c2UgbGV2ZWwgcmV0cnkgY29uZmlnXG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG1heFJldHJ5ID0gY29uZmlnLmxldmVsTG9hZGluZ01heFJldHJ5O1xuICAgICAgICB0aW1lb3V0ID0gY29uZmlnLmxldmVsTG9hZGluZ1RpbWVPdXQ7XG4gICAgICAgIHJldHJ5RGVsYXkgPSBjb25maWcubGV2ZWxMb2FkaW5nUmV0cnlEZWxheTtcbiAgICAgICAgbWF4UmV0cnlEZWxheSA9IGNvbmZpZy5sZXZlbExvYWRpbmdNYXhSZXRyeVRpbWVvdXQ7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGxvYWRlciA9IHRoaXMuY3JlYXRlSW50ZXJuYWxMb2FkZXIoY29udGV4dCk7XG4gICAgdmFyIGxvYWRlckNvbmZpZyA9IHtcbiAgICAgIHRpbWVvdXQ6IHRpbWVvdXQsXG4gICAgICBtYXhSZXRyeTogbWF4UmV0cnksXG4gICAgICByZXRyeURlbGF5OiByZXRyeURlbGF5LFxuICAgICAgbWF4UmV0cnlEZWxheTogbWF4UmV0cnlEZWxheVxuICAgIH07XG4gICAgdmFyIGxvYWRlckNhbGxiYWNrcyA9IHtcbiAgICAgIG9uU3VjY2VzczogdGhpcy5sb2Fkc3VjY2Vzcy5iaW5kKHRoaXMpLFxuICAgICAgb25FcnJvcjogdGhpcy5sb2FkZXJyb3IuYmluZCh0aGlzKSxcbiAgICAgIG9uVGltZW91dDogdGhpcy5sb2FkdGltZW91dC5iaW5kKHRoaXMpXG4gICAgfTtcbiAgICBsb2dnZXJbXCJsb2dnZXJcIl0uZGVidWcoXCJDYWxsaW5nIGludGVybmFsIGxvYWRlciBkZWxlZ2F0ZSBmb3IgVVJMOiBcIiArIGNvbnRleHQudXJsKTtcbiAgICBsb2FkZXIubG9hZChjb250ZXh0LCBsb2FkZXJDb25maWcsIGxvYWRlckNhbGxiYWNrcyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgX3Byb3RvLmxvYWRzdWNjZXNzID0gZnVuY3Rpb24gbG9hZHN1Y2Nlc3MocmVzcG9uc2UsIHN0YXRzLCBjb250ZXh0LCBuZXR3b3JrRGV0YWlscykge1xuICAgIGlmIChuZXR3b3JrRGV0YWlscyA9PT0gdm9pZCAwKSB7XG4gICAgICBuZXR3b3JrRGV0YWlscyA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRleHQuaXNTaWR4UmVxdWVzdCkge1xuICAgICAgdGhpcy5faGFuZGxlU2lkeFJlcXVlc3QocmVzcG9uc2UsIGNvbnRleHQpO1xuXG4gICAgICB0aGlzLl9oYW5kbGVQbGF5bGlzdExvYWRlZChyZXNwb25zZSwgc3RhdHMsIGNvbnRleHQsIG5ldHdvcmtEZXRhaWxzKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucmVzZXRJbnRlcm5hbExvYWRlcihjb250ZXh0LnR5cGUpO1xuXG4gICAgaWYgKHR5cGVvZiByZXNwb25zZS5kYXRhICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdleHBlY3RlZCByZXNwb25zZVR5cGUgb2YgXCJ0ZXh0XCIgZm9yIFBsYXlsaXN0TG9hZGVyJyk7XG4gICAgfVxuXG4gICAgdmFyIHN0cmluZyA9IHJlc3BvbnNlLmRhdGE7XG4gICAgc3RhdHMudGxvYWQgPSBwZXJmb3JtYW5jZS5ub3coKTsgLy8gc3RhdHMubXRpbWUgPSBuZXcgRGF0ZSh0YXJnZXQuZ2V0UmVzcG9uc2VIZWFkZXIoJ0xhc3QtTW9kaWZpZWQnKSk7XG4gICAgLy8gVmFsaWRhdGUgaWYgaXQgaXMgYW4gTTNVOCBhdCBhbGxcblxuICAgIGlmIChzdHJpbmcuaW5kZXhPZignI0VYVE0zVScpICE9PSAwKSB7XG4gICAgICB0aGlzLl9oYW5kbGVNYW5pZmVzdFBhcnNpbmdFcnJvcihyZXNwb25zZSwgY29udGV4dCwgJ25vIEVYVE0zVSBkZWxpbWl0ZXInLCBuZXR3b3JrRGV0YWlscyk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9IC8vIENoZWNrIGlmIGNodW5rLWxpc3Qgb3IgbWFzdGVyLiBoYW5kbGUgZW1wdHkgY2h1bmsgbGlzdCBjYXNlIChmaXJzdCBFWFRJTkYgbm90IHNpZ25hbGVkLCBidXQgVEFSR0VURFVSQVRJT04gcHJlc2VudClcblxuXG4gICAgaWYgKHN0cmluZy5pbmRleE9mKCcjRVhUSU5GOicpID4gMCB8fCBzdHJpbmcuaW5kZXhPZignI0VYVC1YLVRBUkdFVERVUkFUSU9OOicpID4gMCkge1xuICAgICAgdGhpcy5faGFuZGxlVHJhY2tPckxldmVsUGxheWxpc3QocmVzcG9uc2UsIHN0YXRzLCBjb250ZXh0LCBuZXR3b3JrRGV0YWlscyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2hhbmRsZU1hc3RlclBsYXlsaXN0KHJlc3BvbnNlLCBzdGF0cywgY29udGV4dCwgbmV0d29ya0RldGFpbHMpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ubG9hZGVycm9yID0gZnVuY3Rpb24gbG9hZGVycm9yKHJlc3BvbnNlLCBjb250ZXh0LCBuZXR3b3JrRGV0YWlscykge1xuICAgIGlmIChuZXR3b3JrRGV0YWlscyA9PT0gdm9pZCAwKSB7XG4gICAgICBuZXR3b3JrRGV0YWlscyA9IG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy5faGFuZGxlTmV0d29ya0Vycm9yKGNvbnRleHQsIG5ldHdvcmtEZXRhaWxzLCBmYWxzZSwgcmVzcG9uc2UpO1xuICB9O1xuXG4gIF9wcm90by5sb2FkdGltZW91dCA9IGZ1bmN0aW9uIGxvYWR0aW1lb3V0KHN0YXRzLCBjb250ZXh0LCBuZXR3b3JrRGV0YWlscykge1xuICAgIGlmIChuZXR3b3JrRGV0YWlscyA9PT0gdm9pZCAwKSB7XG4gICAgICBuZXR3b3JrRGV0YWlscyA9IG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy5faGFuZGxlTmV0d29ya0Vycm9yKGNvbnRleHQsIG5ldHdvcmtEZXRhaWxzLCB0cnVlKTtcbiAgfSAvLyBUT0RPKHR5cGVzY3JpcHQtY29uZmlnKTogbmV0d29ya0RldGFpbHMgY2FuIGN1cnJlbnRseSBiZSBhIFhIUiBvciBGZXRjaCBpbXBsLFxuICAvLyBidXQgd2l0aCBjdXN0b20gbG9hZGVycyBpdCBjb3VsZCBiZSBnZW5lcmljIGludmVzdGlnYXRlIHRoaXMgZnVydGhlciB3aGVuIGNvbmZpZyBpcyB0eXBlZFxuICA7XG5cbiAgX3Byb3RvLl9oYW5kbGVNYXN0ZXJQbGF5bGlzdCA9IGZ1bmN0aW9uIF9oYW5kbGVNYXN0ZXJQbGF5bGlzdChyZXNwb25zZSwgc3RhdHMsIGNvbnRleHQsIG5ldHdvcmtEZXRhaWxzKSB7XG4gICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuICAgIHZhciBzdHJpbmcgPSByZXNwb25zZS5kYXRhO1xuICAgIHZhciB1cmwgPSBQbGF5bGlzdExvYWRlci5nZXRSZXNwb25zZVVybChyZXNwb25zZSwgY29udGV4dCk7XG5cbiAgICB2YXIgX00zVThQYXJzZXIkcGFyc2VNYXN0ID0gbTN1OF9wYXJzZXJfTTNVOFBhcnNlci5wYXJzZU1hc3RlclBsYXlsaXN0KHN0cmluZywgdXJsKSxcbiAgICAgICAgbGV2ZWxzID0gX00zVThQYXJzZXIkcGFyc2VNYXN0LmxldmVscyxcbiAgICAgICAgc2Vzc2lvbkRhdGEgPSBfTTNVOFBhcnNlciRwYXJzZU1hc3Quc2Vzc2lvbkRhdGE7XG5cbiAgICBpZiAoIWxldmVscy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX2hhbmRsZU1hbmlmZXN0UGFyc2luZ0Vycm9yKHJlc3BvbnNlLCBjb250ZXh0LCAnbm8gbGV2ZWwgZm91bmQgaW4gbWFuaWZlc3QnLCBuZXR3b3JrRGV0YWlscyk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9IC8vIG11bHRpIGxldmVsIHBsYXlsaXN0LCBwYXJzZSBsZXZlbCBpbmZvXG5cblxuICAgIHZhciBhdWRpb0dyb3VwcyA9IGxldmVscy5tYXAoZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpZDogbGV2ZWwuYXR0cnMuQVVESU8sXG4gICAgICAgIGNvZGVjOiBsZXZlbC5hdWRpb0NvZGVjXG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciBhdWRpb1RyYWNrcyA9IG0zdThfcGFyc2VyX00zVThQYXJzZXIucGFyc2VNYXN0ZXJQbGF5bGlzdE1lZGlhKHN0cmluZywgdXJsLCAnQVVESU8nLCBhdWRpb0dyb3Vwcyk7XG4gICAgdmFyIHN1YnRpdGxlcyA9IG0zdThfcGFyc2VyX00zVThQYXJzZXIucGFyc2VNYXN0ZXJQbGF5bGlzdE1lZGlhKHN0cmluZywgdXJsLCAnU1VCVElUTEVTJyk7XG4gICAgdmFyIGNhcHRpb25zID0gbTN1OF9wYXJzZXJfTTNVOFBhcnNlci5wYXJzZU1hc3RlclBsYXlsaXN0TWVkaWEoc3RyaW5nLCB1cmwsICdDTE9TRUQtQ0FQVElPTlMnKTtcblxuICAgIGlmIChhdWRpb1RyYWNrcy5sZW5ndGgpIHtcbiAgICAgIC8vIGNoZWNrIGlmIHdlIGhhdmUgZm91bmQgYW4gYXVkaW8gdHJhY2sgZW1iZWRkZWQgaW4gbWFpbiBwbGF5bGlzdCAoYXVkaW8gdHJhY2sgd2l0aG91dCBVUkkgYXR0cmlidXRlKVxuICAgICAgdmFyIGVtYmVkZGVkQXVkaW9Gb3VuZCA9IGZhbHNlO1xuICAgICAgYXVkaW9UcmFja3MuZm9yRWFjaChmdW5jdGlvbiAoYXVkaW9UcmFjaykge1xuICAgICAgICBpZiAoIWF1ZGlvVHJhY2sudXJsKSB7XG4gICAgICAgICAgZW1iZWRkZWRBdWRpb0ZvdW5kID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7IC8vIGlmIG5vIGVtYmVkZGVkIGF1ZGlvIHRyYWNrIGRlZmluZWQsIGJ1dCBhdWRpbyBjb2RlYyBzaWduYWxlZCBpbiBxdWFsaXR5IGxldmVsLFxuICAgICAgLy8gd2UgbmVlZCB0byBzaWduYWwgdGhpcyBtYWluIGF1ZGlvIHRyYWNrIHRoaXMgY291bGQgaGFwcGVuIHdpdGggcGxheWxpc3RzIHdpdGhcbiAgICAgIC8vIGFsdCBhdWRpbyByZW5kaXRpb24gaW4gd2hpY2ggcXVhbGl0eSBsZXZlbHMgKG1haW4pXG4gICAgICAvLyBjb250YWlucyBib3RoIGF1ZGlvK3ZpZGVvLiBidXQgd2l0aCBtaXhlZCBhdWRpbyB0cmFjayBub3Qgc2lnbmFsZWRcblxuICAgICAgaWYgKGVtYmVkZGVkQXVkaW9Gb3VuZCA9PT0gZmFsc2UgJiYgbGV2ZWxzWzBdLmF1ZGlvQ29kZWMgJiYgIWxldmVsc1swXS5hdHRycy5BVURJTykge1xuICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKCdhdWRpbyBjb2RlYyBzaWduYWxlZCBpbiBxdWFsaXR5IGxldmVsLCBidXQgbm8gZW1iZWRkZWQgYXVkaW8gdHJhY2sgc2lnbmFsZWQsIGNyZWF0ZSBvbmUnKTtcbiAgICAgICAgYXVkaW9UcmFja3MudW5zaGlmdCh7XG4gICAgICAgICAgdHlwZTogJ21haW4nLFxuICAgICAgICAgIG5hbWU6ICdtYWluJyxcbiAgICAgICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgICBhdXRvc2VsZWN0OiBmYWxzZSxcbiAgICAgICAgICBmb3JjZWQ6IGZhbHNlLFxuICAgICAgICAgIGlkOiAtMSxcbiAgICAgICAgICBhdHRyczoge30sXG4gICAgICAgICAgdXJsOiAnJ1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBobHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLk1BTklGRVNUX0xPQURFRCwge1xuICAgICAgbGV2ZWxzOiBsZXZlbHMsXG4gICAgICBhdWRpb1RyYWNrczogYXVkaW9UcmFja3MsXG4gICAgICBzdWJ0aXRsZXM6IHN1YnRpdGxlcyxcbiAgICAgIGNhcHRpb25zOiBjYXB0aW9ucyxcbiAgICAgIHVybDogdXJsLFxuICAgICAgc3RhdHM6IHN0YXRzLFxuICAgICAgbmV0d29ya0RldGFpbHM6IG5ldHdvcmtEZXRhaWxzLFxuICAgICAgc2Vzc2lvbkRhdGE6IHNlc3Npb25EYXRhXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLl9oYW5kbGVUcmFja09yTGV2ZWxQbGF5bGlzdCA9IGZ1bmN0aW9uIF9oYW5kbGVUcmFja09yTGV2ZWxQbGF5bGlzdChyZXNwb25zZSwgc3RhdHMsIGNvbnRleHQsIG5ldHdvcmtEZXRhaWxzKSB7XG4gICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuICAgIHZhciBpZCA9IGNvbnRleHQuaWQsXG4gICAgICAgIGxldmVsID0gY29udGV4dC5sZXZlbCxcbiAgICAgICAgdHlwZSA9IGNvbnRleHQudHlwZTtcbiAgICB2YXIgdXJsID0gUGxheWxpc3RMb2FkZXIuZ2V0UmVzcG9uc2VVcmwocmVzcG9uc2UsIGNvbnRleHQpOyAvLyBpZiB0aGUgdmFsdWVzIGFyZSBudWxsLCB0aGV5IHdpbGwgcmVzdWx0IGluIHRoZSBlbHNlIGNvbmRpdGlvbmFsXG5cbiAgICB2YXIgbGV2ZWxVcmxJZCA9IE9iamVjdChudW1iZXJbXCJpc0Zpbml0ZU51bWJlclwiXSkoaWQpID8gaWQgOiAwO1xuICAgIHZhciBsZXZlbElkID0gT2JqZWN0KG51bWJlcltcImlzRmluaXRlTnVtYmVyXCJdKShsZXZlbCkgPyBsZXZlbCA6IGxldmVsVXJsSWQ7XG4gICAgdmFyIGxldmVsVHlwZSA9IFBsYXlsaXN0TG9hZGVyLm1hcENvbnRleHRUb0xldmVsVHlwZShjb250ZXh0KTtcbiAgICB2YXIgbGV2ZWxEZXRhaWxzID0gbTN1OF9wYXJzZXJfTTNVOFBhcnNlci5wYXJzZUxldmVsUGxheWxpc3QocmVzcG9uc2UuZGF0YSwgdXJsLCBsZXZlbElkLCBsZXZlbFR5cGUsIGxldmVsVXJsSWQpOyAvLyBzZXQgc3RhdHMgb24gbGV2ZWwgc3RydWN0dXJlXG4gICAgLy8gVE9ETyhqc3RhY2tob3VzZSk6IHdoeT8gbWl4aW5nIGNvbmNlcm5zLCBpcyBpdCBqdXN0IHRyZWF0ZWQgYXMgdmFsdWUgYmFnP1xuXG4gICAgbGV2ZWxEZXRhaWxzLnRsb2FkID0gc3RhdHMudGxvYWQ7XG5cbiAgICBpZiAoIWxldmVsRGV0YWlscy5mcmFnbWVudHMubGVuZ3RoKSB7XG4gICAgICBobHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkVSUk9SLCB7XG4gICAgICAgIHR5cGU6IGVycm9yc1tcIkVycm9yVHlwZXNcIl0uTkVUV09SS19FUlJPUixcbiAgICAgICAgZGV0YWlsczogZXJyb3JzW1wiRXJyb3JEZXRhaWxzXCJdLkxFVkVMX0VNUFRZX0VSUk9SLFxuICAgICAgICBmYXRhbDogZmFsc2UsXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICByZWFzb246ICdubyBmcmFnbWVudHMgZm91bmQgaW4gbGV2ZWwnLFxuICAgICAgICBsZXZlbDogdHlwZW9mIGNvbnRleHQubGV2ZWwgPT09ICdudW1iZXInID8gY29udGV4dC5sZXZlbCA6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBXZSBoYXZlIGRvbmUgb3VyIGZpcnN0IHJlcXVlc3QgKE1hbmlmZXN0LXR5cGUpIGFuZCByZWNlaXZlXG4gICAgLy8gbm90IGEgbWFzdGVyIHBsYXlsaXN0IGJ1dCBhIGNodW5rLWxpc3QgKHRyYWNrL2xldmVsKVxuICAgIC8vIFdlIGZpcmUgdGhlIG1hbmlmZXN0LWxvYWRlZCBldmVudCBhbnl3YXkgd2l0aCB0aGUgcGFyc2VkIGxldmVsLWRldGFpbHNcbiAgICAvLyBieSBjcmVhdGluZyBhIHNpbmdsZS1sZXZlbCBzdHJ1Y3R1cmUgZm9yIGl0LlxuXG5cbiAgICBpZiAodHlwZSA9PT0gUGxheWxpc3RDb250ZXh0VHlwZS5NQU5JRkVTVCkge1xuICAgICAgdmFyIHNpbmdsZUxldmVsID0ge1xuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgZGV0YWlsczogbGV2ZWxEZXRhaWxzXG4gICAgICB9O1xuICAgICAgaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5NQU5JRkVTVF9MT0FERUQsIHtcbiAgICAgICAgbGV2ZWxzOiBbc2luZ2xlTGV2ZWxdLFxuICAgICAgICBhdWRpb1RyYWNrczogW10sXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICBzdGF0czogc3RhdHMsXG4gICAgICAgIG5ldHdvcmtEZXRhaWxzOiBuZXR3b3JrRGV0YWlscyxcbiAgICAgICAgc2Vzc2lvbkRhdGE6IG51bGxcbiAgICAgIH0pO1xuICAgIH0gLy8gc2F2ZSBwYXJzaW5nIHRpbWVcblxuXG4gICAgc3RhdHMudHBhcnNlZCA9IHBlcmZvcm1hbmNlLm5vdygpOyAvLyBpbiBjYXNlIHdlIG5lZWQgU0lEWCByYW5nZXNcbiAgICAvLyByZXR1cm4gZWFybHkgYWZ0ZXIgY2FsbGluZyBsb2FkIGZvclxuICAgIC8vIHRoZSBTSURYIGJveC5cblxuICAgIGlmIChsZXZlbERldGFpbHMubmVlZFNpZHhSYW5nZXMpIHtcbiAgICAgIHZhciBzaWR4VXJsID0gbGV2ZWxEZXRhaWxzLmluaXRTZWdtZW50LnVybDtcbiAgICAgIHRoaXMubG9hZCh7XG4gICAgICAgIHVybDogc2lkeFVybCxcbiAgICAgICAgaXNTaWR4UmVxdWVzdDogdHJ1ZSxcbiAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgbGV2ZWw6IGxldmVsLFxuICAgICAgICBsZXZlbERldGFpbHM6IGxldmVsRGV0YWlscyxcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICByYW5nZVN0YXJ0OiAwLFxuICAgICAgICByYW5nZUVuZDogMjA0OCxcbiAgICAgICAgcmVzcG9uc2VUeXBlOiAnYXJyYXlidWZmZXInXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIGV4dGVuZCB0aGUgY29udGV4dCB3aXRoIHRoZSBuZXcgbGV2ZWxEZXRhaWxzIHByb3BlcnR5XG5cblxuICAgIGNvbnRleHQubGV2ZWxEZXRhaWxzID0gbGV2ZWxEZXRhaWxzO1xuXG4gICAgdGhpcy5faGFuZGxlUGxheWxpc3RMb2FkZWQocmVzcG9uc2UsIHN0YXRzLCBjb250ZXh0LCBuZXR3b3JrRGV0YWlscyk7XG4gIH07XG5cbiAgX3Byb3RvLl9oYW5kbGVTaWR4UmVxdWVzdCA9IGZ1bmN0aW9uIF9oYW5kbGVTaWR4UmVxdWVzdChyZXNwb25zZSwgY29udGV4dCkge1xuICAgIGlmICh0eXBlb2YgcmVzcG9uc2UuZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignc2lkeCByZXF1ZXN0IG11c3QgYmUgbWFkZSB3aXRoIHJlc3BvbnNlVHlwZSBvZiBhcnJheSBidWZmZXInKTtcbiAgICB9XG5cbiAgICB2YXIgc2lkeEluZm8gPSBtcDRkZW11eGVyW1wiZGVmYXVsdFwiXS5wYXJzZVNlZ21lbnRJbmRleChuZXcgVWludDhBcnJheShyZXNwb25zZS5kYXRhKSk7IC8vIGlmIHByb3ZpZGVkIGZyYWdtZW50IGRvZXMgbm90IGNvbnRhaW4gc2lkeCwgZWFybHkgcmV0dXJuXG5cbiAgICBpZiAoIXNpZHhJbmZvKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHNpZHhSZWZlcmVuY2VzID0gc2lkeEluZm8ucmVmZXJlbmNlcztcbiAgICB2YXIgbGV2ZWxEZXRhaWxzID0gY29udGV4dC5sZXZlbERldGFpbHM7XG4gICAgc2lkeFJlZmVyZW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoc2VnbWVudFJlZiwgaW5kZXgpIHtcbiAgICAgIHZhciBzZWdSZWZJbmZvID0gc2VnbWVudFJlZi5pbmZvO1xuXG4gICAgICBpZiAoIWxldmVsRGV0YWlscykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBmcmFnID0gbGV2ZWxEZXRhaWxzLmZyYWdtZW50c1tpbmRleF07XG5cbiAgICAgIGlmIChmcmFnLmJ5dGVSYW5nZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZnJhZy5zZXRCeXRlUmFuZ2UoU3RyaW5nKDEgKyBzZWdSZWZJbmZvLmVuZCAtIHNlZ1JlZkluZm8uc3RhcnQpICsgJ0AnICsgU3RyaW5nKHNlZ1JlZkluZm8uc3RhcnQpKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChsZXZlbERldGFpbHMpIHtcbiAgICAgIGxldmVsRGV0YWlscy5pbml0U2VnbWVudC5zZXRCeXRlUmFuZ2UoU3RyaW5nKHNpZHhJbmZvLm1vb3ZFbmRPZmZzZXQpICsgJ0AwJyk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5faGFuZGxlTWFuaWZlc3RQYXJzaW5nRXJyb3IgPSBmdW5jdGlvbiBfaGFuZGxlTWFuaWZlc3RQYXJzaW5nRXJyb3IocmVzcG9uc2UsIGNvbnRleHQsIHJlYXNvbiwgbmV0d29ya0RldGFpbHMpIHtcbiAgICB0aGlzLmhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uRVJST1IsIHtcbiAgICAgIHR5cGU6IGVycm9yc1tcIkVycm9yVHlwZXNcIl0uTkVUV09SS19FUlJPUixcbiAgICAgIGRldGFpbHM6IGVycm9yc1tcIkVycm9yRGV0YWlsc1wiXS5NQU5JRkVTVF9QQVJTSU5HX0VSUk9SLFxuICAgICAgZmF0YWw6IHRydWUsXG4gICAgICB1cmw6IHJlc3BvbnNlLnVybCxcbiAgICAgIHJlYXNvbjogcmVhc29uLFxuICAgICAgbmV0d29ya0RldGFpbHM6IG5ldHdvcmtEZXRhaWxzXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLl9oYW5kbGVOZXR3b3JrRXJyb3IgPSBmdW5jdGlvbiBfaGFuZGxlTmV0d29ya0Vycm9yKGNvbnRleHQsIG5ldHdvcmtEZXRhaWxzLCB0aW1lb3V0LCByZXNwb25zZSkge1xuICAgIGlmICh0aW1lb3V0ID09PSB2b2lkIDApIHtcbiAgICAgIHRpbWVvdXQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAocmVzcG9uc2UgPT09IHZvaWQgMCkge1xuICAgICAgcmVzcG9uc2UgPSBudWxsO1xuICAgIH1cblxuICAgIGxvZ2dlcltcImxvZ2dlclwiXS5pbmZvKFwiQSBuZXR3b3JrIGVycm9yIG9jY3VyZWQgd2hpbGUgbG9hZGluZyBhIFwiICsgY29udGV4dC50eXBlICsgXCItdHlwZSBwbGF5bGlzdFwiKTtcbiAgICB2YXIgZGV0YWlscztcbiAgICB2YXIgZmF0YWw7XG4gICAgdmFyIGxvYWRlciA9IHRoaXMuZ2V0SW50ZXJuYWxMb2FkZXIoY29udGV4dCk7XG5cbiAgICBzd2l0Y2ggKGNvbnRleHQudHlwZSkge1xuICAgICAgY2FzZSBQbGF5bGlzdENvbnRleHRUeXBlLk1BTklGRVNUOlxuICAgICAgICBkZXRhaWxzID0gdGltZW91dCA/IGVycm9yc1tcIkVycm9yRGV0YWlsc1wiXS5NQU5JRkVTVF9MT0FEX1RJTUVPVVQgOiBlcnJvcnNbXCJFcnJvckRldGFpbHNcIl0uTUFOSUZFU1RfTE9BRF9FUlJPUjtcbiAgICAgICAgZmF0YWwgPSB0cnVlO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBQbGF5bGlzdENvbnRleHRUeXBlLkxFVkVMOlxuICAgICAgICBkZXRhaWxzID0gdGltZW91dCA/IGVycm9yc1tcIkVycm9yRGV0YWlsc1wiXS5MRVZFTF9MT0FEX1RJTUVPVVQgOiBlcnJvcnNbXCJFcnJvckRldGFpbHNcIl0uTEVWRUxfTE9BRF9FUlJPUjtcbiAgICAgICAgZmF0YWwgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgUGxheWxpc3RDb250ZXh0VHlwZS5BVURJT19UUkFDSzpcbiAgICAgICAgZGV0YWlscyA9IHRpbWVvdXQgPyBlcnJvcnNbXCJFcnJvckRldGFpbHNcIl0uQVVESU9fVFJBQ0tfTE9BRF9USU1FT1VUIDogZXJyb3JzW1wiRXJyb3JEZXRhaWxzXCJdLkFVRElPX1RSQUNLX0xPQURfRVJST1I7XG4gICAgICAgIGZhdGFsID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBkZXRhaWxzID0gLi4uP1xuICAgICAgICBmYXRhbCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChsb2FkZXIpIHtcbiAgICAgIGxvYWRlci5hYm9ydCgpO1xuICAgICAgdGhpcy5yZXNldEludGVybmFsTG9hZGVyKGNvbnRleHQudHlwZSk7XG4gICAgfSAvLyBUT0RPKHR5cGVzY3JpcHQtZXZlbnRzKTogd2hlbiBlcnJvciBldmVudHMgYXJlIGhhbmRsZWQsIHR5cGUgdGhpc1xuXG5cbiAgICB2YXIgZXJyb3JEYXRhID0ge1xuICAgICAgdHlwZTogZXJyb3JzW1wiRXJyb3JUeXBlc1wiXS5ORVRXT1JLX0VSUk9SLFxuICAgICAgZGV0YWlsczogZGV0YWlscyxcbiAgICAgIGZhdGFsOiBmYXRhbCxcbiAgICAgIHVybDogY29udGV4dC51cmwsXG4gICAgICBsb2FkZXI6IGxvYWRlcixcbiAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICBuZXR3b3JrRGV0YWlsczogbmV0d29ya0RldGFpbHNcbiAgICB9O1xuXG4gICAgaWYgKHJlc3BvbnNlKSB7XG4gICAgICBlcnJvckRhdGEucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICB9XG5cbiAgICB0aGlzLmhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uRVJST1IsIGVycm9yRGF0YSk7XG4gIH07XG5cbiAgX3Byb3RvLl9oYW5kbGVQbGF5bGlzdExvYWRlZCA9IGZ1bmN0aW9uIF9oYW5kbGVQbGF5bGlzdExvYWRlZChyZXNwb25zZSwgc3RhdHMsIGNvbnRleHQsIG5ldHdvcmtEZXRhaWxzKSB7XG4gICAgdmFyIHR5cGUgPSBjb250ZXh0LnR5cGUsXG4gICAgICAgIGxldmVsID0gY29udGV4dC5sZXZlbCxcbiAgICAgICAgaWQgPSBjb250ZXh0LmlkLFxuICAgICAgICBsZXZlbERldGFpbHMgPSBjb250ZXh0LmxldmVsRGV0YWlscztcblxuICAgIGlmICghbGV2ZWxEZXRhaWxzIHx8ICFsZXZlbERldGFpbHMudGFyZ2V0ZHVyYXRpb24pIHtcbiAgICAgIHRoaXMuX2hhbmRsZU1hbmlmZXN0UGFyc2luZ0Vycm9yKHJlc3BvbnNlLCBjb250ZXh0LCAnaW52YWxpZCB0YXJnZXQgZHVyYXRpb24nLCBuZXR3b3JrRGV0YWlscyk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY2FuSGF2ZUxldmVscyA9IFBsYXlsaXN0TG9hZGVyLmNhbkhhdmVRdWFsaXR5TGV2ZWxzKGNvbnRleHQudHlwZSk7XG5cbiAgICBpZiAoY2FuSGF2ZUxldmVscykge1xuICAgICAgdGhpcy5obHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkxFVkVMX0xPQURFRCwge1xuICAgICAgICBkZXRhaWxzOiBsZXZlbERldGFpbHMsXG4gICAgICAgIGxldmVsOiBsZXZlbCB8fCAwLFxuICAgICAgICBpZDogaWQgfHwgMCxcbiAgICAgICAgc3RhdHM6IHN0YXRzLFxuICAgICAgICBuZXR3b3JrRGV0YWlsczogbmV0d29ya0RldGFpbHNcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBQbGF5bGlzdENvbnRleHRUeXBlLkFVRElPX1RSQUNLOlxuICAgICAgICAgIHRoaXMuaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5BVURJT19UUkFDS19MT0FERUQsIHtcbiAgICAgICAgICAgIGRldGFpbHM6IGxldmVsRGV0YWlscyxcbiAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgIHN0YXRzOiBzdGF0cyxcbiAgICAgICAgICAgIG5ldHdvcmtEZXRhaWxzOiBuZXR3b3JrRGV0YWlsc1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUGxheWxpc3RDb250ZXh0VHlwZS5TVUJUSVRMRV9UUkFDSzpcbiAgICAgICAgICB0aGlzLmhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uU1VCVElUTEVfVFJBQ0tfTE9BREVELCB7XG4gICAgICAgICAgICBkZXRhaWxzOiBsZXZlbERldGFpbHMsXG4gICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICBzdGF0czogc3RhdHMsXG4gICAgICAgICAgICBuZXR3b3JrRGV0YWlsczogbmV0d29ya0RldGFpbHNcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFBsYXlsaXN0TG9hZGVyO1xufShldmVudF9oYW5kbGVyKTtcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgcGxheWxpc3RfbG9hZGVyID0gKHBsYXlsaXN0X2xvYWRlcl9QbGF5bGlzdExvYWRlcik7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9sb2FkZXIvZnJhZ21lbnQtbG9hZGVyLmpzXG5cblxuXG5mdW5jdGlvbiBmcmFnbWVudF9sb2FkZXJfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLypcbiAqIEZyYWdtZW50IExvYWRlclxuKi9cblxuXG5cblxuXG52YXIgZnJhZ21lbnRfbG9hZGVyX0ZyYWdtZW50TG9hZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfRXZlbnRIYW5kbGVyKSB7XG4gIGZyYWdtZW50X2xvYWRlcl9pbmhlcml0c0xvb3NlKEZyYWdtZW50TG9hZGVyLCBfRXZlbnRIYW5kbGVyKTtcblxuICBmdW5jdGlvbiBGcmFnbWVudExvYWRlcihobHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9FdmVudEhhbmRsZXIuY2FsbCh0aGlzLCBobHMsIGV2ZW50c1tcImRlZmF1bHRcIl0uRlJBR19MT0FESU5HKSB8fCB0aGlzO1xuICAgIF90aGlzLmxvYWRlcnMgPSB7fTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRnJhZ21lbnRMb2FkZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICB2YXIgbG9hZGVycyA9IHRoaXMubG9hZGVycztcblxuICAgIGZvciAodmFyIGxvYWRlck5hbWUgaW4gbG9hZGVycykge1xuICAgICAgdmFyIGxvYWRlciA9IGxvYWRlcnNbbG9hZGVyTmFtZV07XG5cbiAgICAgIGlmIChsb2FkZXIpIHtcbiAgICAgICAgbG9hZGVyLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxvYWRlcnMgPSB7fTtcblxuICAgIF9FdmVudEhhbmRsZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8ub25GcmFnTG9hZGluZyA9IGZ1bmN0aW9uIG9uRnJhZ0xvYWRpbmcoZGF0YSkge1xuICAgIHZhciBmcmFnID0gZGF0YS5mcmFnLFxuICAgICAgICB0eXBlID0gZnJhZy50eXBlLFxuICAgICAgICBsb2FkZXJzID0gdGhpcy5sb2FkZXJzLFxuICAgICAgICBjb25maWcgPSB0aGlzLmhscy5jb25maWcsXG4gICAgICAgIEZyYWdtZW50SUxvYWRlciA9IGNvbmZpZy5mTG9hZGVyLFxuICAgICAgICBEZWZhdWx0SUxvYWRlciA9IGNvbmZpZy5sb2FkZXI7IC8vIHJlc2V0IGZyYWdtZW50IHN0YXRlXG5cbiAgICBmcmFnLmxvYWRlZCA9IDA7XG4gICAgdmFyIGxvYWRlciA9IGxvYWRlcnNbdHlwZV07XG5cbiAgICBpZiAobG9hZGVyKSB7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ud2FybihcImFib3J0IHByZXZpb3VzIGZyYWdtZW50IGxvYWRlciBmb3IgdHlwZTogXCIgKyB0eXBlKTtcbiAgICAgIGxvYWRlci5hYm9ydCgpO1xuICAgIH1cblxuICAgIGxvYWRlciA9IGxvYWRlcnNbdHlwZV0gPSBmcmFnLmxvYWRlciA9IGNvbmZpZy5mTG9hZGVyID8gbmV3IEZyYWdtZW50SUxvYWRlcihjb25maWcpIDogbmV3IERlZmF1bHRJTG9hZGVyKGNvbmZpZyk7XG4gICAgdmFyIGxvYWRlckNvbnRleHQsIGxvYWRlckNvbmZpZywgbG9hZGVyQ2FsbGJhY2tzO1xuICAgIGxvYWRlckNvbnRleHQgPSB7XG4gICAgICB1cmw6IGZyYWcudXJsLFxuICAgICAgZnJhZzogZnJhZyxcbiAgICAgIHJlc3BvbnNlVHlwZTogJ2FycmF5YnVmZmVyJyxcbiAgICAgIHByb2dyZXNzRGF0YTogZmFsc2VcbiAgICB9O1xuICAgIHZhciBzdGFydCA9IGZyYWcuYnl0ZVJhbmdlU3RhcnRPZmZzZXQsXG4gICAgICAgIGVuZCA9IGZyYWcuYnl0ZVJhbmdlRW5kT2Zmc2V0O1xuXG4gICAgaWYgKE9iamVjdChudW1iZXJbXCJpc0Zpbml0ZU51bWJlclwiXSkoc3RhcnQpICYmIE9iamVjdChudW1iZXJbXCJpc0Zpbml0ZU51bWJlclwiXSkoZW5kKSkge1xuICAgICAgbG9hZGVyQ29udGV4dC5yYW5nZVN0YXJ0ID0gc3RhcnQ7XG4gICAgICBsb2FkZXJDb250ZXh0LnJhbmdlRW5kID0gZW5kO1xuICAgIH1cblxuICAgIGxvYWRlckNvbmZpZyA9IHtcbiAgICAgIHRpbWVvdXQ6IGNvbmZpZy5mcmFnTG9hZGluZ1RpbWVPdXQsXG4gICAgICBtYXhSZXRyeTogMCxcbiAgICAgIHJldHJ5RGVsYXk6IDAsXG4gICAgICBtYXhSZXRyeURlbGF5OiBjb25maWcuZnJhZ0xvYWRpbmdNYXhSZXRyeVRpbWVvdXRcbiAgICB9O1xuICAgIGxvYWRlckNhbGxiYWNrcyA9IHtcbiAgICAgIG9uU3VjY2VzczogdGhpcy5sb2Fkc3VjY2Vzcy5iaW5kKHRoaXMpLFxuICAgICAgb25FcnJvcjogdGhpcy5sb2FkZXJyb3IuYmluZCh0aGlzKSxcbiAgICAgIG9uVGltZW91dDogdGhpcy5sb2FkdGltZW91dC5iaW5kKHRoaXMpLFxuICAgICAgb25Qcm9ncmVzczogdGhpcy5sb2FkcHJvZ3Jlc3MuYmluZCh0aGlzKVxuICAgIH07XG4gICAgbG9hZGVyLmxvYWQobG9hZGVyQ29udGV4dCwgbG9hZGVyQ29uZmlnLCBsb2FkZXJDYWxsYmFja3MpO1xuICB9O1xuXG4gIF9wcm90by5sb2Fkc3VjY2VzcyA9IGZ1bmN0aW9uIGxvYWRzdWNjZXNzKHJlc3BvbnNlLCBzdGF0cywgY29udGV4dCwgbmV0d29ya0RldGFpbHMpIHtcbiAgICBpZiAobmV0d29ya0RldGFpbHMgPT09IHZvaWQgMCkge1xuICAgICAgbmV0d29ya0RldGFpbHMgPSBudWxsO1xuICAgIH1cblxuICAgIHZhciBwYXlsb2FkID0gcmVzcG9uc2UuZGF0YSxcbiAgICAgICAgZnJhZyA9IGNvbnRleHQuZnJhZzsgLy8gZGV0YWNoIGZyYWdtZW50IGxvYWRlciBvbiBsb2FkIHN1Y2Nlc3NcblxuICAgIGZyYWcubG9hZGVyID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubG9hZGVyc1tmcmFnLnR5cGVdID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5GUkFHX0xPQURFRCwge1xuICAgICAgcGF5bG9hZDogcGF5bG9hZCxcbiAgICAgIGZyYWc6IGZyYWcsXG4gICAgICBzdGF0czogc3RhdHMsXG4gICAgICBuZXR3b3JrRGV0YWlsczogbmV0d29ya0RldGFpbHNcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ubG9hZGVycm9yID0gZnVuY3Rpb24gbG9hZGVycm9yKHJlc3BvbnNlLCBjb250ZXh0LCBuZXR3b3JrRGV0YWlscykge1xuICAgIGlmIChuZXR3b3JrRGV0YWlscyA9PT0gdm9pZCAwKSB7XG4gICAgICBuZXR3b3JrRGV0YWlscyA9IG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGZyYWcgPSBjb250ZXh0LmZyYWc7XG4gICAgdmFyIGxvYWRlciA9IGZyYWcubG9hZGVyO1xuXG4gICAgaWYgKGxvYWRlcikge1xuICAgICAgbG9hZGVyLmFib3J0KCk7XG4gICAgfVxuXG4gICAgdGhpcy5sb2FkZXJzW2ZyYWcudHlwZV0gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5obHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkVSUk9SLCB7XG4gICAgICB0eXBlOiBlcnJvcnNbXCJFcnJvclR5cGVzXCJdLk5FVFdPUktfRVJST1IsXG4gICAgICBkZXRhaWxzOiBlcnJvcnNbXCJFcnJvckRldGFpbHNcIl0uRlJBR19MT0FEX0VSUk9SLFxuICAgICAgZmF0YWw6IGZhbHNlLFxuICAgICAgZnJhZzogY29udGV4dC5mcmFnLFxuICAgICAgcmVzcG9uc2U6IHJlc3BvbnNlLFxuICAgICAgbmV0d29ya0RldGFpbHM6IG5ldHdvcmtEZXRhaWxzXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmxvYWR0aW1lb3V0ID0gZnVuY3Rpb24gbG9hZHRpbWVvdXQoc3RhdHMsIGNvbnRleHQsIG5ldHdvcmtEZXRhaWxzKSB7XG4gICAgaWYgKG5ldHdvcmtEZXRhaWxzID09PSB2b2lkIDApIHtcbiAgICAgIG5ldHdvcmtEZXRhaWxzID0gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgZnJhZyA9IGNvbnRleHQuZnJhZztcbiAgICB2YXIgbG9hZGVyID0gZnJhZy5sb2FkZXI7XG5cbiAgICBpZiAobG9hZGVyKSB7XG4gICAgICBsb2FkZXIuYWJvcnQoKTtcbiAgICB9XG5cbiAgICB0aGlzLmxvYWRlcnNbZnJhZy50eXBlXSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uRVJST1IsIHtcbiAgICAgIHR5cGU6IGVycm9yc1tcIkVycm9yVHlwZXNcIl0uTkVUV09SS19FUlJPUixcbiAgICAgIGRldGFpbHM6IGVycm9yc1tcIkVycm9yRGV0YWlsc1wiXS5GUkFHX0xPQURfVElNRU9VVCxcbiAgICAgIGZhdGFsOiBmYWxzZSxcbiAgICAgIGZyYWc6IGNvbnRleHQuZnJhZyxcbiAgICAgIG5ldHdvcmtEZXRhaWxzOiBuZXR3b3JrRGV0YWlsc1xuICAgIH0pO1xuICB9IC8vIGRhdGEgd2lsbCBiZSB1c2VkIGZvciBwcm9ncmVzc2l2ZSBwYXJzaW5nXG4gIDtcblxuICBfcHJvdG8ubG9hZHByb2dyZXNzID0gZnVuY3Rpb24gbG9hZHByb2dyZXNzKHN0YXRzLCBjb250ZXh0LCBkYXRhLCBuZXR3b3JrRGV0YWlscykge1xuICAgIGlmIChuZXR3b3JrRGV0YWlscyA9PT0gdm9pZCAwKSB7XG4gICAgICBuZXR3b3JrRGV0YWlscyA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8ganNoaW50IGlnbm9yZTpsaW5lXG4gICAgdmFyIGZyYWcgPSBjb250ZXh0LmZyYWc7XG4gICAgZnJhZy5sb2FkZWQgPSBzdGF0cy5sb2FkZWQ7XG4gICAgdGhpcy5obHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkZSQUdfTE9BRF9QUk9HUkVTUywge1xuICAgICAgZnJhZzogZnJhZyxcbiAgICAgIHN0YXRzOiBzdGF0cyxcbiAgICAgIG5ldHdvcmtEZXRhaWxzOiBuZXR3b3JrRGV0YWlsc1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBGcmFnbWVudExvYWRlcjtcbn0oZXZlbnRfaGFuZGxlcik7XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGZyYWdtZW50X2xvYWRlciA9IChmcmFnbWVudF9sb2FkZXJfRnJhZ21lbnRMb2FkZXIpO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvbG9hZGVyL2tleS1sb2FkZXIudHNcbmZ1bmN0aW9uIGtleV9sb2FkZXJfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLypcbiAqIERlY3J5cHQga2V5IExvYWRlclxuKi9cblxuXG5cblxuXG52YXIga2V5X2xvYWRlcl9LZXlMb2FkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9FdmVudEhhbmRsZXIpIHtcbiAga2V5X2xvYWRlcl9pbmhlcml0c0xvb3NlKEtleUxvYWRlciwgX0V2ZW50SGFuZGxlcik7XG5cbiAgZnVuY3Rpb24gS2V5TG9hZGVyKGhscykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0V2ZW50SGFuZGxlci5jYWxsKHRoaXMsIGhscywgZXZlbnRzW1wiZGVmYXVsdFwiXS5LRVlfTE9BRElORykgfHwgdGhpcztcbiAgICBfdGhpcy5sb2FkZXJzID0ge307XG4gICAgX3RoaXMuZGVjcnlwdGtleSA9IG51bGw7XG4gICAgX3RoaXMuZGVjcnlwdHVybCA9IG51bGw7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEtleUxvYWRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGZvciAodmFyIGxvYWRlck5hbWUgaW4gdGhpcy5sb2FkZXJzKSB7XG4gICAgICB2YXIgbG9hZGVyID0gdGhpcy5sb2FkZXJzW2xvYWRlck5hbWVdO1xuXG4gICAgICBpZiAobG9hZGVyKSB7XG4gICAgICAgIGxvYWRlci5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sb2FkZXJzID0ge307XG5cbiAgICBfRXZlbnRIYW5kbGVyLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLm9uS2V5TG9hZGluZyA9IGZ1bmN0aW9uIG9uS2V5TG9hZGluZyhkYXRhKSB7XG4gICAgdmFyIGZyYWcgPSBkYXRhLmZyYWc7XG4gICAgdmFyIHR5cGUgPSBmcmFnLnR5cGU7XG4gICAgdmFyIGxvYWRlciA9IHRoaXMubG9hZGVyc1t0eXBlXTtcblxuICAgIGlmICghZnJhZy5kZWNyeXB0ZGF0YSkge1xuICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLndhcm4oJ01pc3NpbmcgZGVjcnlwdGlvbiBkYXRhIG9uIGZyYWdtZW50IGluIG9uS2V5TG9hZGluZycpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gTG9hZCB0aGUga2V5IGlmIHRoZSB1cmkgaXMgZGlmZmVyZW50IGZyb20gcHJldmlvdXMgb25lLCBvciBpZiB0aGUgZGVjcnlwdCBrZXkgaGFzIG5vdCB5ZXQgYmVlbiByZXRyaWV2ZWRcblxuXG4gICAgdmFyIHVyaSA9IGZyYWcuZGVjcnlwdGRhdGEudXJpO1xuXG4gICAgaWYgKHVyaSAhPT0gdGhpcy5kZWNyeXB0dXJsIHx8IHRoaXMuZGVjcnlwdGtleSA9PT0gbnVsbCkge1xuICAgICAgdmFyIGNvbmZpZyA9IHRoaXMuaGxzLmNvbmZpZztcblxuICAgICAgaWYgKGxvYWRlcikge1xuICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ud2FybihcImFib3J0IHByZXZpb3VzIGtleSBsb2FkZXIgZm9yIHR5cGU6XCIgKyB0eXBlKTtcbiAgICAgICAgbG9hZGVyLmFib3J0KCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdXJpKSB7XG4gICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuKCdrZXkgdXJpIGlzIGZhbHN5Jyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZnJhZy5sb2FkZXIgPSB0aGlzLmxvYWRlcnNbdHlwZV0gPSBuZXcgY29uZmlnLmxvYWRlcihjb25maWcpO1xuICAgICAgdGhpcy5kZWNyeXB0dXJsID0gdXJpO1xuICAgICAgdGhpcy5kZWNyeXB0a2V5ID0gbnVsbDtcbiAgICAgIHZhciBsb2FkZXJDb250ZXh0ID0ge1xuICAgICAgICB1cmw6IHVyaSxcbiAgICAgICAgZnJhZzogZnJhZyxcbiAgICAgICAgcmVzcG9uc2VUeXBlOiAnYXJyYXlidWZmZXInXG4gICAgICB9OyAvLyBtYXhSZXRyeSBpcyAwIHNvIHRoYXQgaW5zdGVhZCBvZiByZXRyeWluZyB0aGUgc2FtZSBrZXkgb24gdGhlIHNhbWUgdmFyaWFudCBtdWx0aXBsZSB0aW1lcyxcbiAgICAgIC8vIGtleS1sb2FkZXIgd2lsbCB0cmlnZ2VyIGFuIGVycm9yIGFuZCByZWx5IG9uIHN0cmVhbS1jb250cm9sbGVyIHRvIGhhbmRsZSByZXRyeSBsb2dpYy5cbiAgICAgIC8vIHRoaXMgd2lsbCBhbHNvIGFsaWduIHJldHJ5IGxvZ2ljIHdpdGggZnJhZ21lbnQtbG9hZGVyXG5cbiAgICAgIHZhciBsb2FkZXJDb25maWcgPSB7XG4gICAgICAgIHRpbWVvdXQ6IGNvbmZpZy5mcmFnTG9hZGluZ1RpbWVPdXQsXG4gICAgICAgIG1heFJldHJ5OiAwLFxuICAgICAgICByZXRyeURlbGF5OiBjb25maWcuZnJhZ0xvYWRpbmdSZXRyeURlbGF5LFxuICAgICAgICBtYXhSZXRyeURlbGF5OiBjb25maWcuZnJhZ0xvYWRpbmdNYXhSZXRyeVRpbWVvdXRcbiAgICAgIH07XG4gICAgICB2YXIgbG9hZGVyQ2FsbGJhY2tzID0ge1xuICAgICAgICBvblN1Y2Nlc3M6IHRoaXMubG9hZHN1Y2Nlc3MuYmluZCh0aGlzKSxcbiAgICAgICAgb25FcnJvcjogdGhpcy5sb2FkZXJyb3IuYmluZCh0aGlzKSxcbiAgICAgICAgb25UaW1lb3V0OiB0aGlzLmxvYWR0aW1lb3V0LmJpbmQodGhpcylcbiAgICAgIH07XG4gICAgICBmcmFnLmxvYWRlci5sb2FkKGxvYWRlckNvbnRleHQsIGxvYWRlckNvbmZpZywgbG9hZGVyQ2FsbGJhY2tzKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZGVjcnlwdGtleSkge1xuICAgICAgLy8gUmV0dXJuIHRoZSBrZXkgaWYgaXQncyBhbHJlYWR5IGJlZW4gbG9hZGVkXG4gICAgICBmcmFnLmRlY3J5cHRkYXRhLmtleSA9IHRoaXMuZGVjcnlwdGtleTtcbiAgICAgIHRoaXMuaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5LRVlfTE9BREVELCB7XG4gICAgICAgIGZyYWc6IGZyYWdcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ubG9hZHN1Y2Nlc3MgPSBmdW5jdGlvbiBsb2Fkc3VjY2VzcyhyZXNwb25zZSwgc3RhdHMsIGNvbnRleHQpIHtcbiAgICB2YXIgZnJhZyA9IGNvbnRleHQuZnJhZztcblxuICAgIGlmICghZnJhZy5kZWNyeXB0ZGF0YSkge1xuICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmVycm9yKCdhZnRlciBrZXkgbG9hZCwgZGVjcnlwdGRhdGEgdW5zZXQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmRlY3J5cHRrZXkgPSBmcmFnLmRlY3J5cHRkYXRhLmtleSA9IG5ldyBVaW50OEFycmF5KHJlc3BvbnNlLmRhdGEpOyAvLyBkZXRhY2ggZnJhZ21lbnQgbG9hZGVyIG9uIGxvYWQgc3VjY2Vzc1xuXG4gICAgZnJhZy5sb2FkZXIgPSB1bmRlZmluZWQ7XG4gICAgZGVsZXRlIHRoaXMubG9hZGVyc1tmcmFnLnR5cGVdO1xuICAgIHRoaXMuaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5LRVlfTE9BREVELCB7XG4gICAgICBmcmFnOiBmcmFnXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmxvYWRlcnJvciA9IGZ1bmN0aW9uIGxvYWRlcnJvcihyZXNwb25zZSwgY29udGV4dCkge1xuICAgIHZhciBmcmFnID0gY29udGV4dC5mcmFnO1xuICAgIHZhciBsb2FkZXIgPSBmcmFnLmxvYWRlcjtcblxuICAgIGlmIChsb2FkZXIpIHtcbiAgICAgIGxvYWRlci5hYm9ydCgpO1xuICAgIH1cblxuICAgIGRlbGV0ZSB0aGlzLmxvYWRlcnNbZnJhZy50eXBlXTtcbiAgICB0aGlzLmhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uRVJST1IsIHtcbiAgICAgIHR5cGU6IGVycm9yc1tcIkVycm9yVHlwZXNcIl0uTkVUV09SS19FUlJPUixcbiAgICAgIGRldGFpbHM6IGVycm9yc1tcIkVycm9yRGV0YWlsc1wiXS5LRVlfTE9BRF9FUlJPUixcbiAgICAgIGZhdGFsOiBmYWxzZSxcbiAgICAgIGZyYWc6IGZyYWcsXG4gICAgICByZXNwb25zZTogcmVzcG9uc2VcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ubG9hZHRpbWVvdXQgPSBmdW5jdGlvbiBsb2FkdGltZW91dChzdGF0cywgY29udGV4dCkge1xuICAgIHZhciBmcmFnID0gY29udGV4dC5mcmFnO1xuICAgIHZhciBsb2FkZXIgPSBmcmFnLmxvYWRlcjtcblxuICAgIGlmIChsb2FkZXIpIHtcbiAgICAgIGxvYWRlci5hYm9ydCgpO1xuICAgIH1cblxuICAgIGRlbGV0ZSB0aGlzLmxvYWRlcnNbZnJhZy50eXBlXTtcbiAgICB0aGlzLmhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uRVJST1IsIHtcbiAgICAgIHR5cGU6IGVycm9yc1tcIkVycm9yVHlwZXNcIl0uTkVUV09SS19FUlJPUixcbiAgICAgIGRldGFpbHM6IGVycm9yc1tcIkVycm9yRGV0YWlsc1wiXS5LRVlfTE9BRF9USU1FT1VULFxuICAgICAgZmF0YWw6IGZhbHNlLFxuICAgICAgZnJhZzogZnJhZ1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBLZXlMb2FkZXI7XG59KGV2ZW50X2hhbmRsZXIpO1xuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBrZXlfbG9hZGVyID0gKGtleV9sb2FkZXJfS2V5TG9hZGVyKTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvbnRyb2xsZXIvZnJhZ21lbnQtdHJhY2tlci5qc1xuXG5cbmZ1bmN0aW9uIGZyYWdtZW50X3RyYWNrZXJfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuXG5cbnZhciBGcmFnbWVudFN0YXRlID0ge1xuICBOT1RfTE9BREVEOiAnTk9UX0xPQURFRCcsXG4gIEFQUEVORElORzogJ0FQUEVORElORycsXG4gIFBBUlRJQUw6ICdQQVJUSUFMJyxcbiAgT0s6ICdPSydcbn07XG52YXIgZnJhZ21lbnRfdHJhY2tlcl9GcmFnbWVudFRyYWNrZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9FdmVudEhhbmRsZXIpIHtcbiAgZnJhZ21lbnRfdHJhY2tlcl9pbmhlcml0c0xvb3NlKEZyYWdtZW50VHJhY2tlciwgX0V2ZW50SGFuZGxlcik7XG5cbiAgZnVuY3Rpb24gRnJhZ21lbnRUcmFja2VyKGhscykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0V2ZW50SGFuZGxlci5jYWxsKHRoaXMsIGhscywgZXZlbnRzW1wiZGVmYXVsdFwiXS5CVUZGRVJfQVBQRU5ERUQsIGV2ZW50c1tcImRlZmF1bHRcIl0uRlJBR19CVUZGRVJFRCwgZXZlbnRzW1wiZGVmYXVsdFwiXS5GUkFHX0xPQURFRCkgfHwgdGhpcztcbiAgICBfdGhpcy5idWZmZXJQYWRkaW5nID0gMC4yO1xuICAgIF90aGlzLmZyYWdtZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgX3RoaXMudGltZVJhbmdlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgX3RoaXMuY29uZmlnID0gaGxzLmNvbmZpZztcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRnJhZ21lbnRUcmFja2VyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5mcmFnbWVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMudGltZVJhbmdlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5jb25maWcgPSBudWxsO1xuICAgIGV2ZW50X2hhbmRsZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcblxuICAgIF9FdmVudEhhbmRsZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGEgRnJhZ21lbnQgdGhhdCBtYXRjaCB0aGUgcG9zaXRpb24gYW5kIGxldmVsVHlwZS5cbiAgICogSWYgbm90IGZvdW5kIGFueSBGcmFnbWVudCwgcmV0dXJuIG51bGxcbiAgICogQHBhcmFtIHtudW1iZXJ9IHBvc2l0aW9uXG4gICAqIEBwYXJhbSB7TGV2ZWxUeXBlfSBsZXZlbFR5cGVcbiAgICogQHJldHVybnMge0ZyYWdtZW50fG51bGx9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldEJ1ZmZlcmVkRnJhZyA9IGZ1bmN0aW9uIGdldEJ1ZmZlcmVkRnJhZyhwb3NpdGlvbiwgbGV2ZWxUeXBlKSB7XG4gICAgdmFyIGZyYWdtZW50cyA9IHRoaXMuZnJhZ21lbnRzO1xuICAgIHZhciBidWZmZXJlZEZyYWdzID0gT2JqZWN0LmtleXMoZnJhZ21lbnRzKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIGZyYWdtZW50RW50aXR5ID0gZnJhZ21lbnRzW2tleV07XG5cbiAgICAgIGlmIChmcmFnbWVudEVudGl0eS5ib2R5LnR5cGUgIT09IGxldmVsVHlwZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICghZnJhZ21lbnRFbnRpdHkuYnVmZmVyZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZnJhZyA9IGZyYWdtZW50RW50aXR5LmJvZHk7XG4gICAgICByZXR1cm4gZnJhZy5zdGFydFBUUyA8PSBwb3NpdGlvbiAmJiBwb3NpdGlvbiA8PSBmcmFnLmVuZFBUUztcbiAgICB9KTtcblxuICAgIGlmIChidWZmZXJlZEZyYWdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlby1kZXYvaGxzLmpzL3B1bGwvMTU0NSNkaXNjdXNzaW9uX3IxNjYyMjk1NjZcbiAgICAgIHZhciBidWZmZXJlZEZyYWdLZXkgPSBidWZmZXJlZEZyYWdzLnBvcCgpO1xuICAgICAgcmV0dXJuIGZyYWdtZW50c1tidWZmZXJlZEZyYWdLZXldLmJvZHk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBQYXJ0aWFsIGZyYWdtZW50cyBlZmZlY3RlZCBieSBjb2RlZCBmcmFtZSBldmljdGlvbiB3aWxsIGJlIHJlbW92ZWRcbiAgICogVGhlIGJyb3dzZXIgd2lsbCB1bmxvYWQgcGFydHMgb2YgdGhlIGJ1ZmZlciB0byBmcmVlIHVwIG1lbW9yeSBmb3IgbmV3IGJ1ZmZlciBkYXRhXG4gICAqIEZyYWdtZW50cyB3aWxsIG5lZWQgdG8gYmUgcmVsb2FkZWQgd2hlbiB0aGUgYnVmZmVyIGlzIGZyZWVkIHVwLCByZW1vdmluZyBwYXJ0aWFsIGZyYWdtZW50cyB3aWxsIGFsbG93IHRoZW0gdG8gcmVsb2FkKHNpbmNlIHRoZXJlIG1pZ2h0IGJlIHBhcnRzIHRoYXQgYXJlIHN0aWxsIHBsYXlhYmxlKVxuICAgKiBAcGFyYW0ge1N0cmluZ30gZWxlbWVudGFyeVN0cmVhbSBUaGUgZWxlbWVudGFyeVN0cmVhbSBvZiBtZWRpYSB0aGlzIGlzIChlZy4gdmlkZW8vYXVkaW8pXG4gICAqIEBwYXJhbSB7VGltZVJhbmdlc30gdGltZVJhbmdlIFRpbWVSYW5nZSBvYmplY3QgZnJvbSBhIHNvdXJjZUJ1ZmZlclxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZXRlY3RFdmljdGVkRnJhZ21lbnRzID0gZnVuY3Rpb24gZGV0ZWN0RXZpY3RlZEZyYWdtZW50cyhlbGVtZW50YXJ5U3RyZWFtLCB0aW1lUmFuZ2UpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIC8vIENoZWNrIGlmIGFueSBmbGFnZ2VkIGZyYWdtZW50cyBoYXZlIGJlZW4gdW5sb2FkZWRcbiAgICBPYmplY3Qua2V5cyh0aGlzLmZyYWdtZW50cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgZnJhZ21lbnRFbnRpdHkgPSBfdGhpczIuZnJhZ21lbnRzW2tleV07XG5cbiAgICAgIGlmICghZnJhZ21lbnRFbnRpdHkgfHwgIWZyYWdtZW50RW50aXR5LmJ1ZmZlcmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGVzRGF0YSA9IGZyYWdtZW50RW50aXR5LnJhbmdlW2VsZW1lbnRhcnlTdHJlYW1dO1xuXG4gICAgICBpZiAoIWVzRGF0YSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBmcmFnbWVudFRpbWVzID0gZXNEYXRhLnRpbWU7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZnJhZ21lbnRUaW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdGltZSA9IGZyYWdtZW50VGltZXNbaV07XG5cbiAgICAgICAgaWYgKCFfdGhpczIuaXNUaW1lQnVmZmVyZWQodGltZS5zdGFydFBUUywgdGltZS5lbmRQVFMsIHRpbWVSYW5nZSkpIHtcbiAgICAgICAgICAvLyBVbnJlZ2lzdGVyIHBhcnRpYWwgZnJhZ21lbnQgYXMgaXQgbmVlZHMgdG8gbG9hZCBhZ2FpbiB0byBiZSByZXVzZWRcbiAgICAgICAgICBfdGhpczIucmVtb3ZlRnJhZ21lbnQoZnJhZ21lbnRFbnRpdHkuYm9keSk7XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIGZyYWdtZW50IHBhc3NlZCBpbiBpcyBsb2FkZWQgaW4gdGhlIGJ1ZmZlciBwcm9wZXJseVxuICAgKiBQYXJ0aWFsbHkgbG9hZGVkIGZyYWdtZW50cyB3aWxsIGJlIHJlZ2lzdGVyZWQgYXMgYSBwYXJ0aWFsIGZyYWdtZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBmcmFnbWVudCBDaGVjayB0aGUgZnJhZ21lbnQgYWdhaW5zdCBhbGwgc291cmNlQnVmZmVycyBsb2FkZWRcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGV0ZWN0UGFydGlhbEZyYWdtZW50cyA9IGZ1bmN0aW9uIGRldGVjdFBhcnRpYWxGcmFnbWVudHMoZnJhZ21lbnQpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBmcmFnS2V5ID0gdGhpcy5nZXRGcmFnbWVudEtleShmcmFnbWVudCk7XG4gICAgdmFyIGZyYWdtZW50RW50aXR5ID0gdGhpcy5mcmFnbWVudHNbZnJhZ0tleV07XG5cbiAgICBpZiAoZnJhZ21lbnRFbnRpdHkpIHtcbiAgICAgIGZyYWdtZW50RW50aXR5LmJ1ZmZlcmVkID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMudGltZVJhbmdlcykuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudGFyeVN0cmVhbSkge1xuICAgICAgICBpZiAoZnJhZ21lbnQuaGFzRWxlbWVudGFyeVN0cmVhbShlbGVtZW50YXJ5U3RyZWFtKSkge1xuICAgICAgICAgIHZhciB0aW1lUmFuZ2UgPSBfdGhpczMudGltZVJhbmdlc1tlbGVtZW50YXJ5U3RyZWFtXTsgLy8gQ2hlY2sgZm9yIG1hbGZvcm1lZCBmcmFnbWVudHNcbiAgICAgICAgICAvLyBHYXBzIG5lZWQgdG8gYmUgY2FsY3VsYXRlZCBmb3IgZWFjaCBlbGVtZW50YXJ5U3RyZWFtXG5cbiAgICAgICAgICBmcmFnbWVudEVudGl0eS5yYW5nZVtlbGVtZW50YXJ5U3RyZWFtXSA9IF90aGlzMy5nZXRCdWZmZXJlZFRpbWVzKGZyYWdtZW50LnN0YXJ0UFRTLCBmcmFnbWVudC5lbmRQVFMsIHRpbWVSYW5nZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZ2V0QnVmZmVyZWRUaW1lcyA9IGZ1bmN0aW9uIGdldEJ1ZmZlcmVkVGltZXMoc3RhcnRQVFMsIGVuZFBUUywgdGltZVJhbmdlKSB7XG4gICAgdmFyIGZyYWdtZW50VGltZXMgPSBbXTtcbiAgICB2YXIgc3RhcnRUaW1lLCBlbmRUaW1lO1xuICAgIHZhciBmcmFnbWVudFBhcnRpYWwgPSBmYWxzZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGltZVJhbmdlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzdGFydFRpbWUgPSB0aW1lUmFuZ2Uuc3RhcnQoaSkgLSB0aGlzLmJ1ZmZlclBhZGRpbmc7XG4gICAgICBlbmRUaW1lID0gdGltZVJhbmdlLmVuZChpKSArIHRoaXMuYnVmZmVyUGFkZGluZztcblxuICAgICAgaWYgKHN0YXJ0UFRTID49IHN0YXJ0VGltZSAmJiBlbmRQVFMgPD0gZW5kVGltZSkge1xuICAgICAgICAvLyBGcmFnbWVudCBpcyBlbnRpcmVseSBjb250YWluZWQgaW4gYnVmZmVyXG4gICAgICAgIC8vIE5vIG5lZWQgdG8gY2hlY2sgdGhlIG90aGVyIHRpbWVSYW5nZSB0aW1lcyBzaW5jZSBpdCdzIGNvbXBsZXRlbHkgcGxheWFibGVcbiAgICAgICAgZnJhZ21lbnRUaW1lcy5wdXNoKHtcbiAgICAgICAgICBzdGFydFBUUzogTWF0aC5tYXgoc3RhcnRQVFMsIHRpbWVSYW5nZS5zdGFydChpKSksXG4gICAgICAgICAgZW5kUFRTOiBNYXRoLm1pbihlbmRQVFMsIHRpbWVSYW5nZS5lbmQoaSkpXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIH0gZWxzZSBpZiAoc3RhcnRQVFMgPCBlbmRUaW1lICYmIGVuZFBUUyA+IHN0YXJ0VGltZSkge1xuICAgICAgICAvLyBDaGVjayBmb3IgaW50ZXJzZWN0aW9uIHdpdGggYnVmZmVyXG4gICAgICAgIC8vIEdldCBwbGF5YWJsZSBzZWN0aW9ucyBvZiB0aGUgZnJhZ21lbnRcbiAgICAgICAgZnJhZ21lbnRUaW1lcy5wdXNoKHtcbiAgICAgICAgICBzdGFydFBUUzogTWF0aC5tYXgoc3RhcnRQVFMsIHRpbWVSYW5nZS5zdGFydChpKSksXG4gICAgICAgICAgZW5kUFRTOiBNYXRoLm1pbihlbmRQVFMsIHRpbWVSYW5nZS5lbmQoaSkpXG4gICAgICAgIH0pO1xuICAgICAgICBmcmFnbWVudFBhcnRpYWwgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChlbmRQVFMgPD0gc3RhcnRUaW1lKSB7XG4gICAgICAgIC8vIE5vIG5lZWQgdG8gY2hlY2sgdGhlIHJlc3Qgb2YgdGhlIHRpbWVSYW5nZSBhcyBpdCBpcyBpbiBvcmRlclxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdGltZTogZnJhZ21lbnRUaW1lcyxcbiAgICAgIHBhcnRpYWw6IGZyYWdtZW50UGFydGlhbFxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLmdldEZyYWdtZW50S2V5ID0gZnVuY3Rpb24gZ2V0RnJhZ21lbnRLZXkoZnJhZ21lbnQpIHtcbiAgICByZXR1cm4gZnJhZ21lbnQudHlwZSArIFwiX1wiICsgZnJhZ21lbnQubGV2ZWwgKyBcIl9cIiArIGZyYWdtZW50LnVybElkICsgXCJfXCIgKyBmcmFnbWVudC5zbjtcbiAgfVxuICAvKipcbiAgICogR2V0cyB0aGUgcGFydGlhbCBmcmFnbWVudCBmb3IgYSBjZXJ0YWluIHRpbWVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHRpbWVcbiAgICogQHJldHVybnMge09iamVjdH0gZnJhZ21lbnQgUmV0dXJucyBhIHBhcnRpYWwgZnJhZ21lbnQgYXQgYSB0aW1lIG9yIG51bGwgaWYgdGhlcmUgaXMgbm8gcGFydGlhbCBmcmFnbWVudFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXRQYXJ0aWFsRnJhZ21lbnQgPSBmdW5jdGlvbiBnZXRQYXJ0aWFsRnJhZ21lbnQodGltZSkge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgdmFyIHRpbWVQYWRkaW5nLCBzdGFydFRpbWUsIGVuZFRpbWU7XG4gICAgdmFyIGJlc3RGcmFnbWVudCA9IG51bGw7XG4gICAgdmFyIGJlc3RPdmVybGFwID0gMDtcbiAgICBPYmplY3Qua2V5cyh0aGlzLmZyYWdtZW50cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgZnJhZ21lbnRFbnRpdHkgPSBfdGhpczQuZnJhZ21lbnRzW2tleV07XG5cbiAgICAgIGlmIChfdGhpczQuaXNQYXJ0aWFsKGZyYWdtZW50RW50aXR5KSkge1xuICAgICAgICBzdGFydFRpbWUgPSBmcmFnbWVudEVudGl0eS5ib2R5LnN0YXJ0UFRTIC0gX3RoaXM0LmJ1ZmZlclBhZGRpbmc7XG4gICAgICAgIGVuZFRpbWUgPSBmcmFnbWVudEVudGl0eS5ib2R5LmVuZFBUUyArIF90aGlzNC5idWZmZXJQYWRkaW5nO1xuXG4gICAgICAgIGlmICh0aW1lID49IHN0YXJ0VGltZSAmJiB0aW1lIDw9IGVuZFRpbWUpIHtcbiAgICAgICAgICAvLyBVc2UgdGhlIGZyYWdtZW50IHRoYXQgaGFzIHRoZSBtb3N0IHBhZGRpbmcgZnJvbSBzdGFydCBhbmQgZW5kIHRpbWVcbiAgICAgICAgICB0aW1lUGFkZGluZyA9IE1hdGgubWluKHRpbWUgLSBzdGFydFRpbWUsIGVuZFRpbWUgLSB0aW1lKTtcblxuICAgICAgICAgIGlmIChiZXN0T3ZlcmxhcCA8PSB0aW1lUGFkZGluZykge1xuICAgICAgICAgICAgYmVzdEZyYWdtZW50ID0gZnJhZ21lbnRFbnRpdHkuYm9keTtcbiAgICAgICAgICAgIGJlc3RPdmVybGFwID0gdGltZVBhZGRpbmc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGJlc3RGcmFnbWVudDtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtPYmplY3R9IGZyYWdtZW50IFRoZSBmcmFnbWVudCB0byBjaGVja1xuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBSZXR1cm5zIHRoZSBmcmFnbWVudCBzdGF0ZSB3aGVuIGEgZnJhZ21lbnQgbmV2ZXIgbG9hZGVkIG9yIGlmIGl0IHBhcnRpYWxseSBsb2FkZWRcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0U3RhdGUgPSBmdW5jdGlvbiBnZXRTdGF0ZShmcmFnbWVudCkge1xuICAgIHZhciBmcmFnS2V5ID0gdGhpcy5nZXRGcmFnbWVudEtleShmcmFnbWVudCk7XG4gICAgdmFyIGZyYWdtZW50RW50aXR5ID0gdGhpcy5mcmFnbWVudHNbZnJhZ0tleV07XG4gICAgdmFyIHN0YXRlID0gRnJhZ21lbnRTdGF0ZS5OT1RfTE9BREVEO1xuXG4gICAgaWYgKGZyYWdtZW50RW50aXR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICghZnJhZ21lbnRFbnRpdHkuYnVmZmVyZWQpIHtcbiAgICAgICAgc3RhdGUgPSBGcmFnbWVudFN0YXRlLkFQUEVORElORztcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1BhcnRpYWwoZnJhZ21lbnRFbnRpdHkpID09PSB0cnVlKSB7XG4gICAgICAgIHN0YXRlID0gRnJhZ21lbnRTdGF0ZS5QQVJUSUFMO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUgPSBGcmFnbWVudFN0YXRlLk9LO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdGF0ZTtcbiAgfTtcblxuICBfcHJvdG8uaXNQYXJ0aWFsID0gZnVuY3Rpb24gaXNQYXJ0aWFsKGZyYWdtZW50RW50aXR5KSB7XG4gICAgcmV0dXJuIGZyYWdtZW50RW50aXR5LmJ1ZmZlcmVkID09PSB0cnVlICYmIChmcmFnbWVudEVudGl0eS5yYW5nZS52aWRlbyAhPT0gdW5kZWZpbmVkICYmIGZyYWdtZW50RW50aXR5LnJhbmdlLnZpZGVvLnBhcnRpYWwgPT09IHRydWUgfHwgZnJhZ21lbnRFbnRpdHkucmFuZ2UuYXVkaW8gIT09IHVuZGVmaW5lZCAmJiBmcmFnbWVudEVudGl0eS5yYW5nZS5hdWRpby5wYXJ0aWFsID09PSB0cnVlKTtcbiAgfTtcblxuICBfcHJvdG8uaXNUaW1lQnVmZmVyZWQgPSBmdW5jdGlvbiBpc1RpbWVCdWZmZXJlZChzdGFydFBUUywgZW5kUFRTLCB0aW1lUmFuZ2UpIHtcbiAgICB2YXIgc3RhcnRUaW1lLCBlbmRUaW1lO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aW1lUmFuZ2UubGVuZ3RoOyBpKyspIHtcbiAgICAgIHN0YXJ0VGltZSA9IHRpbWVSYW5nZS5zdGFydChpKSAtIHRoaXMuYnVmZmVyUGFkZGluZztcbiAgICAgIGVuZFRpbWUgPSB0aW1lUmFuZ2UuZW5kKGkpICsgdGhpcy5idWZmZXJQYWRkaW5nO1xuXG4gICAgICBpZiAoc3RhcnRQVFMgPj0gc3RhcnRUaW1lICYmIGVuZFBUUyA8PSBlbmRUaW1lKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZW5kUFRTIDw9IHN0YXJ0VGltZSkge1xuICAgICAgICAvLyBObyBuZWVkIHRvIGNoZWNrIHRoZSByZXN0IG9mIHRoZSB0aW1lUmFuZ2UgYXMgaXQgaXMgaW4gb3JkZXJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogRmlyZXMgd2hlbiBhIGZyYWdtZW50IGxvYWRpbmcgaXMgY29tcGxldGVkXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uRnJhZ0xvYWRlZCA9IGZ1bmN0aW9uIG9uRnJhZ0xvYWRlZChlKSB7XG4gICAgdmFyIGZyYWdtZW50ID0gZS5mcmFnOyAvLyBkb24ndCB0cmFjayBpbml0c2VnbWVudCAoZm9yIHdoaWNoIHNuIGlzIG5vdCBhIG51bWJlcilcbiAgICAvLyBkb24ndCB0cmFjayBmcmFncyB1c2VkIGZvciBiaXRyYXRlVGVzdCwgdGhleSdyZSBpcnJlbGV2YW50LlxuXG4gICAgaWYgKCFPYmplY3QobnVtYmVyW1wiaXNGaW5pdGVOdW1iZXJcIl0pKGZyYWdtZW50LnNuKSB8fCBmcmFnbWVudC5iaXRyYXRlVGVzdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZnJhZ21lbnRzW3RoaXMuZ2V0RnJhZ21lbnRLZXkoZnJhZ21lbnQpXSA9IHtcbiAgICAgIGJvZHk6IGZyYWdtZW50LFxuICAgICAgcmFuZ2U6IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICBidWZmZXJlZDogZmFsc2VcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBGaXJlcyB3aGVuIHRoZSBidWZmZXIgaXMgdXBkYXRlZFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vbkJ1ZmZlckFwcGVuZGVkID0gZnVuY3Rpb24gb25CdWZmZXJBcHBlbmRlZChlKSB7XG4gICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAvLyBTdG9yZSB0aGUgbGF0ZXN0IHRpbWVSYW5nZXMgbG9hZGVkIGluIHRoZSBidWZmZXJcbiAgICB0aGlzLnRpbWVSYW5nZXMgPSBlLnRpbWVSYW5nZXM7XG4gICAgT2JqZWN0LmtleXModGhpcy50aW1lUmFuZ2VzKS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50YXJ5U3RyZWFtKSB7XG4gICAgICB2YXIgdGltZVJhbmdlID0gX3RoaXM1LnRpbWVSYW5nZXNbZWxlbWVudGFyeVN0cmVhbV07XG5cbiAgICAgIF90aGlzNS5kZXRlY3RFdmljdGVkRnJhZ21lbnRzKGVsZW1lbnRhcnlTdHJlYW0sIHRpbWVSYW5nZSk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEZpcmVzIGFmdGVyIGEgZnJhZ21lbnQgaGFzIGJlZW4gbG9hZGVkIGludG8gdGhlIHNvdXJjZSBidWZmZXJcbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25GcmFnQnVmZmVyZWQgPSBmdW5jdGlvbiBvbkZyYWdCdWZmZXJlZChlKSB7XG4gICAgdGhpcy5kZXRlY3RQYXJ0aWFsRnJhZ21lbnRzKGUuZnJhZyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB0cnVlIGlmIGZyYWdtZW50IHRyYWNrZXIgaGFzIHRoZSBmcmFnbWVudC5cbiAgICogQHBhcmFtIHtPYmplY3R9IGZyYWdtZW50XG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYXNGcmFnbWVudCA9IGZ1bmN0aW9uIGhhc0ZyYWdtZW50KGZyYWdtZW50KSB7XG4gICAgdmFyIGZyYWdLZXkgPSB0aGlzLmdldEZyYWdtZW50S2V5KGZyYWdtZW50KTtcbiAgICByZXR1cm4gdGhpcy5mcmFnbWVudHNbZnJhZ0tleV0gIT09IHVuZGVmaW5lZDtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIGEgZnJhZ21lbnQgZnJvbSBmcmFnbWVudCB0cmFja2VyIHVudGlsIGl0IGlzIGxvYWRlZCBhZ2FpblxuICAgKiBAcGFyYW0ge09iamVjdH0gZnJhZ21lbnQgVGhlIGZyYWdtZW50IHRvIHJlbW92ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmVGcmFnbWVudCA9IGZ1bmN0aW9uIHJlbW92ZUZyYWdtZW50KGZyYWdtZW50KSB7XG4gICAgdmFyIGZyYWdLZXkgPSB0aGlzLmdldEZyYWdtZW50S2V5KGZyYWdtZW50KTtcbiAgICBkZWxldGUgdGhpcy5mcmFnbWVudHNbZnJhZ0tleV07XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBhbGwgZnJhZ21lbnRzIGZyb20gZnJhZ21lbnQgdHJhY2tlci5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlQWxsRnJhZ21lbnRzID0gZnVuY3Rpb24gcmVtb3ZlQWxsRnJhZ21lbnRzKCkge1xuICAgIHRoaXMuZnJhZ21lbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfTtcblxuICByZXR1cm4gRnJhZ21lbnRUcmFja2VyO1xufShldmVudF9oYW5kbGVyKTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3V0aWxzL2JpbmFyeS1zZWFyY2gudHNcbnZhciBCaW5hcnlTZWFyY2ggPSB7XG4gIC8qKlxuICAgKiBTZWFyY2hlcyBmb3IgYW4gaXRlbSBpbiBhbiBhcnJheSB3aGljaCBtYXRjaGVzIGEgY2VydGFpbiBjb25kaXRpb24uXG4gICAqIFRoaXMgcmVxdWlyZXMgdGhlIGNvbmRpdGlvbiB0byBvbmx5IG1hdGNoIG9uZSBpdGVtIGluIHRoZSBhcnJheSxcbiAgICogYW5kIGZvciB0aGUgYXJyYXkgdG8gYmUgb3JkZXJlZC5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheTxUPn0gbGlzdCBUaGUgYXJyYXkgdG8gc2VhcmNoLlxuICAgKiBAcGFyYW0ge0JpbmFyeVNlYXJjaENvbXBhcmlzb248VD59IGNvbXBhcmlzb25GblxuICAgKiAgICAgIENhbGxlZCBhbmQgcHJvdmlkZWQgYSBjYW5kaWRhdGUgaXRlbSBhcyB0aGUgZmlyc3QgYXJndW1lbnQuXG4gICAqICAgICAgU2hvdWxkIHJldHVybjpcbiAgICogICAgICAgICAgPiAtMSBpZiB0aGUgaXRlbSBzaG91bGQgYmUgbG9jYXRlZCBhdCBhIGxvd2VyIGluZGV4IHRoYW4gdGhlIHByb3ZpZGVkIGl0ZW0uXG4gICAqICAgICAgICAgID4gMSBpZiB0aGUgaXRlbSBzaG91bGQgYmUgbG9jYXRlZCBhdCBhIGhpZ2hlciBpbmRleCB0aGFuIHRoZSBwcm92aWRlZCBpdGVtLlxuICAgKiAgICAgICAgICA+IDAgaWYgdGhlIGl0ZW0gaXMgdGhlIGl0ZW0geW91J3JlIGxvb2tpbmcgZm9yLlxuICAgKlxuICAgKiBAcmV0dXJuIHtUIHwgbnVsbH0gVGhlIG9iamVjdCBpZiBpdCBpcyBmb3VuZCBvciBudWxsIG90aGVyd2lzZS5cbiAgICovXG4gIHNlYXJjaDogZnVuY3Rpb24gc2VhcmNoKGxpc3QsIGNvbXBhcmlzb25Gbikge1xuICAgIHZhciBtaW5JbmRleCA9IDA7XG4gICAgdmFyIG1heEluZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuICAgIHZhciBjdXJyZW50SW5kZXggPSBudWxsO1xuICAgIHZhciBjdXJyZW50RWxlbWVudCA9IG51bGw7XG5cbiAgICB3aGlsZSAobWluSW5kZXggPD0gbWF4SW5kZXgpIHtcbiAgICAgIGN1cnJlbnRJbmRleCA9IChtaW5JbmRleCArIG1heEluZGV4KSAvIDIgfCAwO1xuICAgICAgY3VycmVudEVsZW1lbnQgPSBsaXN0W2N1cnJlbnRJbmRleF07XG4gICAgICB2YXIgY29tcGFyaXNvblJlc3VsdCA9IGNvbXBhcmlzb25GbihjdXJyZW50RWxlbWVudCk7XG5cbiAgICAgIGlmIChjb21wYXJpc29uUmVzdWx0ID4gMCkge1xuICAgICAgICBtaW5JbmRleCA9IGN1cnJlbnRJbmRleCArIDE7XG4gICAgICB9IGVsc2UgaWYgKGNvbXBhcmlzb25SZXN1bHQgPCAwKSB7XG4gICAgICAgIG1heEluZGV4ID0gY3VycmVudEluZGV4IC0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50RWxlbWVudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGJpbmFyeV9zZWFyY2ggPSAoQmluYXJ5U2VhcmNoKTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3V0aWxzL2J1ZmZlci1oZWxwZXIudHNcbi8qKlxuICogQG1vZHVsZSBCdWZmZXJIZWxwZXJcbiAqXG4gKiBQcm92aWRpbmcgbWV0aG9kcyBkZWFsaW5nIHdpdGggYnVmZmVyIGxlbmd0aCByZXRyaWV2YWwgZm9yIGV4YW1wbGUuXG4gKlxuICogSW4gZ2VuZXJhbCwgYSBoZWxwZXIgYXJvdW5kIEhUTUw1IE1lZGlhRWxlbWVudCBUaW1lUmFuZ2VzIGdhdGhlcmVkIGZyb20gYGJ1ZmZlcmVkYCBwcm9wZXJ0eS5cbiAqXG4gKiBBbHNvIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxNZWRpYUVsZW1lbnQvYnVmZmVyZWRcbiovXG52YXIgQnVmZmVySGVscGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQnVmZmVySGVscGVyKCkge31cblxuICAvKipcbiAgICogUmV0dXJuIHRydWUgaWYgYG1lZGlhYCdzIGJ1ZmZlcmVkIGluY2x1ZGUgYHBvc2l0aW9uYFxuICAgKiBAcGFyYW0ge0J1ZmZlcmFibGV9IG1lZGlhXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwb3NpdGlvblxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIEJ1ZmZlckhlbHBlci5pc0J1ZmZlcmVkID0gZnVuY3Rpb24gaXNCdWZmZXJlZChtZWRpYSwgcG9zaXRpb24pIHtcbiAgICB0cnkge1xuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIHZhciBidWZmZXJlZCA9IG1lZGlhLmJ1ZmZlcmVkO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnVmZmVyZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAocG9zaXRpb24gPj0gYnVmZmVyZWQuc3RhcnQoaSkgJiYgcG9zaXRpb24gPD0gYnVmZmVyZWQuZW5kKGkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikgey8vIHRoaXMgaXMgdG8gY2F0Y2hcbiAgICAgIC8vIEludmFsaWRTdGF0ZUVycm9yOiBGYWlsZWQgdG8gcmVhZCB0aGUgJ2J1ZmZlcmVkJyBwcm9wZXJ0eSBmcm9tICdTb3VyY2VCdWZmZXInOlxuICAgICAgLy8gVGhpcyBTb3VyY2VCdWZmZXIgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIHRoZSBwYXJlbnQgbWVkaWEgc291cmNlXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIEJ1ZmZlckhlbHBlci5idWZmZXJJbmZvID0gZnVuY3Rpb24gYnVmZmVySW5mbyhtZWRpYSwgcG9zLCBtYXhIb2xlRHVyYXRpb24pIHtcbiAgICB0cnkge1xuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIHZhciB2YnVmZmVyZWQgPSBtZWRpYS5idWZmZXJlZDtcbiAgICAgICAgdmFyIGJ1ZmZlcmVkID0gW107XG4gICAgICAgIHZhciBpO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB2YnVmZmVyZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBidWZmZXJlZC5wdXNoKHtcbiAgICAgICAgICAgIHN0YXJ0OiB2YnVmZmVyZWQuc3RhcnQoaSksXG4gICAgICAgICAgICBlbmQ6IHZidWZmZXJlZC5lbmQoaSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlcmVkSW5mbyhidWZmZXJlZCwgcG9zLCBtYXhIb2xlRHVyYXRpb24pO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7Ly8gdGhpcyBpcyB0byBjYXRjaFxuICAgICAgLy8gSW52YWxpZFN0YXRlRXJyb3I6IEZhaWxlZCB0byByZWFkIHRoZSAnYnVmZmVyZWQnIHByb3BlcnR5IGZyb20gJ1NvdXJjZUJ1ZmZlcic6XG4gICAgICAvLyBUaGlzIFNvdXJjZUJ1ZmZlciBoYXMgYmVlbiByZW1vdmVkIGZyb20gdGhlIHBhcmVudCBtZWRpYSBzb3VyY2VcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgbGVuOiAwLFxuICAgICAgc3RhcnQ6IHBvcyxcbiAgICAgIGVuZDogcG9zLFxuICAgICAgbmV4dFN0YXJ0OiB1bmRlZmluZWRcbiAgICB9O1xuICB9O1xuXG4gIEJ1ZmZlckhlbHBlci5idWZmZXJlZEluZm8gPSBmdW5jdGlvbiBidWZmZXJlZEluZm8oYnVmZmVyZWQsIHBvcywgbWF4SG9sZUR1cmF0aW9uKSB7XG4gICAgLy8gc29ydCBvbiBidWZmZXIuc3RhcnQvc21hbGxlciBlbmQgKElFIGRvZXMgbm90IGFsd2F5cyByZXR1cm4gc29ydGVkIGJ1ZmZlcmVkIHJhbmdlKVxuICAgIGJ1ZmZlcmVkLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHZhciBkaWZmID0gYS5zdGFydCAtIGIuc3RhcnQ7XG5cbiAgICAgIGlmIChkaWZmKSB7XG4gICAgICAgIHJldHVybiBkaWZmO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGIuZW5kIC0gYS5lbmQ7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdmFyIGJ1ZmZlcmVkMiA9IFtdO1xuXG4gICAgaWYgKG1heEhvbGVEdXJhdGlvbikge1xuICAgICAgLy8gdGhlcmUgbWlnaHQgYmUgc29tZSBzbWFsbCBob2xlcyBiZXR3ZWVuIGJ1ZmZlciB0aW1lIHJhbmdlXG4gICAgICAvLyBjb25zaWRlciB0aGF0IGhvbGVzIHNtYWxsZXIgdGhhbiBtYXhIb2xlRHVyYXRpb24gYXJlIGlycmVsZXZhbnQgYW5kIGJ1aWxkIGFub3RoZXJcbiAgICAgIC8vIGJ1ZmZlciB0aW1lIHJhbmdlIHJlcHJlc2VudGF0aW9ucyB0aGF0IGRpc2NhcmRzIHRob3NlIGhvbGVzXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1ZmZlcmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBidWYybGVuID0gYnVmZmVyZWQyLmxlbmd0aDtcblxuICAgICAgICBpZiAoYnVmMmxlbikge1xuICAgICAgICAgIHZhciBidWYyZW5kID0gYnVmZmVyZWQyW2J1ZjJsZW4gLSAxXS5lbmQ7IC8vIGlmIHNtYWxsIGhvbGUgKHZhbHVlIGJldHdlZW4gMCBvciBtYXhIb2xlRHVyYXRpb24gKSBvciBvdmVybGFwcGluZyAobmVnYXRpdmUpXG5cbiAgICAgICAgICBpZiAoYnVmZmVyZWRbaV0uc3RhcnQgLSBidWYyZW5kIDwgbWF4SG9sZUR1cmF0aW9uKSB7XG4gICAgICAgICAgICAvLyBtZXJnZSBvdmVybGFwcGluZyB0aW1lIHJhbmdlc1xuICAgICAgICAgICAgLy8gdXBkYXRlIGxhc3RSYW5nZS5lbmQgb25seSBpZiBzbWFsbGVyIHRoYW4gaXRlbS5lbmRcbiAgICAgICAgICAgIC8vIGUuZy4gIFsgMSwgMTVdIHdpdGggIFsgMiw4XSA9PiBbIDEsMTVdIChubyBuZWVkIHRvIG1vZGlmeSBsYXN0UmFuZ2UuZW5kKVxuICAgICAgICAgICAgLy8gd2hlcmVhcyBbIDEsIDhdIHdpdGggIFsgMiwxNV0gPT4gWyAxLDE1XSAoIGxhc3RSYW5nZSBzaG91bGQgc3dpdGNoIGZyb20gWzEsOF0gdG8gWzEsMTVdKVxuICAgICAgICAgICAgaWYgKGJ1ZmZlcmVkW2ldLmVuZCA+IGJ1ZjJlbmQpIHtcbiAgICAgICAgICAgICAgYnVmZmVyZWQyW2J1ZjJsZW4gLSAxXS5lbmQgPSBidWZmZXJlZFtpXS5lbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGJpZyBob2xlXG4gICAgICAgICAgICBidWZmZXJlZDIucHVzaChidWZmZXJlZFtpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGZpcnN0IHZhbHVlXG4gICAgICAgICAgYnVmZmVyZWQyLnB1c2goYnVmZmVyZWRbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1ZmZlcmVkMiA9IGJ1ZmZlcmVkO1xuICAgIH1cblxuICAgIHZhciBidWZmZXJMZW4gPSAwOyAvLyBidWZmZXJTdGFydE5leHQgY2FuIHBvc3NpYmx5IGJlIHVuZGVmaW5lZCBiYXNlZCBvbiB0aGUgY29uZGl0aW9uYWwgbG9naWMgYmVsb3dcblxuICAgIHZhciBidWZmZXJTdGFydE5leHQ7IC8vIGJ1ZmZlclN0YXJ0IGFuZCBidWZmZXJFbmQgYXJlIGJ1ZmZlciBib3VuZGFyaWVzIGFyb3VuZCBjdXJyZW50IHZpZGVvIHBvc2l0aW9uXG5cbiAgICB2YXIgYnVmZmVyU3RhcnQgPSBwb3M7XG4gICAgdmFyIGJ1ZmZlckVuZCA9IHBvcztcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBidWZmZXJlZDIubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgc3RhcnQgPSBidWZmZXJlZDJbX2ldLnN0YXJ0LFxuICAgICAgICAgIGVuZCA9IGJ1ZmZlcmVkMltfaV0uZW5kOyAvLyBsb2dnZXIubG9nKCdidWYgc3RhcnQvZW5kOicgKyBidWZmZXJlZC5zdGFydChpKSArICcvJyArIGJ1ZmZlcmVkLmVuZChpKSk7XG5cbiAgICAgIGlmIChwb3MgKyBtYXhIb2xlRHVyYXRpb24gPj0gc3RhcnQgJiYgcG9zIDwgZW5kKSB7XG4gICAgICAgIC8vIHBsYXkgcG9zaXRpb24gaXMgaW5zaWRlIHRoaXMgYnVmZmVyIFRpbWVSYW5nZSwgcmV0cmlldmUgZW5kIG9mIGJ1ZmZlciBwb3NpdGlvbiBhbmQgYnVmZmVyIGxlbmd0aFxuICAgICAgICBidWZmZXJTdGFydCA9IHN0YXJ0O1xuICAgICAgICBidWZmZXJFbmQgPSBlbmQ7XG4gICAgICAgIGJ1ZmZlckxlbiA9IGJ1ZmZlckVuZCAtIHBvcztcbiAgICAgIH0gZWxzZSBpZiAocG9zICsgbWF4SG9sZUR1cmF0aW9uIDwgc3RhcnQpIHtcbiAgICAgICAgYnVmZmVyU3RhcnROZXh0ID0gc3RhcnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBsZW46IGJ1ZmZlckxlbixcbiAgICAgIHN0YXJ0OiBidWZmZXJTdGFydCxcbiAgICAgIGVuZDogYnVmZmVyRW5kLFxuICAgICAgbmV4dFN0YXJ0OiBidWZmZXJTdGFydE5leHRcbiAgICB9O1xuICB9O1xuXG4gIHJldHVybiBCdWZmZXJIZWxwZXI7XG59KCk7XG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2V2ZW50ZW1pdHRlcjMvaW5kZXguanNcbnZhciBldmVudGVtaXR0ZXIzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL2V2ZW50ZW1pdHRlcjMvaW5kZXguanNcIik7XG5cbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvd2Vid29ya2lmeS13ZWJwYWNrL2luZGV4LmpzXG52YXIgd2Vid29ya2lmeV93ZWJwYWNrID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3dlYndvcmtpZnktd2VicGFjay9pbmRleC5qc1wiKTtcblxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9kZW11eC9kZW11eGVyLWlubGluZS5qcyArIDEyIG1vZHVsZXNcbnZhciBkZW11eGVyX2lubGluZSA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9kZW11eC9kZW11eGVyLWlubGluZS5qc1wiKTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvdXRpbHMvbWVkaWFzb3VyY2UtaGVscGVyLnRzXG4vKipcbiAqIE1lZGlhU291cmNlIGhlbHBlclxuICovXG5mdW5jdGlvbiBnZXRNZWRpYVNvdXJjZSgpIHtcbiAgcmV0dXJuIHdpbmRvdy5NZWRpYVNvdXJjZSB8fCB3aW5kb3cuV2ViS2l0TWVkaWFTb3VyY2U7XG59XG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vc3JjL3V0aWxzL2dldC1zZWxmLXNjb3BlLmpzXG52YXIgZ2V0X3NlbGZfc2NvcGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvdXRpbHMvZ2V0LXNlbGYtc2NvcGUuanNcIik7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL29ic2VydmVyLnRzXG5mdW5jdGlvbiBvYnNlcnZlcl9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5cbi8qKlxuICogU2ltcGxlIGFkYXB0ZXIgc3ViLWNsYXNzIG9mIE5vZGVqcy1saWtlIEV2ZW50RW1pdHRlci5cbiAqL1xuXG52YXIgT2JzZXJ2ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9FdmVudEVtaXR0ZXIpIHtcbiAgb2JzZXJ2ZXJfaW5oZXJpdHNMb29zZShPYnNlcnZlciwgX0V2ZW50RW1pdHRlcik7XG5cbiAgZnVuY3Rpb24gT2JzZXJ2ZXIoKSB7XG4gICAgcmV0dXJuIF9FdmVudEVtaXR0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE9ic2VydmVyLnByb3RvdHlwZTtcblxuICAvKipcbiAgICogV2Ugc2ltcGx5IHdhbnQgdG8gcGFzcyBhbG9uZyB0aGUgZXZlbnQtbmFtZSBpdHNlbGZcbiAgICogaW4gZXZlcnkgY2FsbCB0byBhIGhhbmRsZXIsIHdoaWNoIGlzIHRoZSBwdXJwb3NlIG9mIG91ciBgdHJpZ2dlcmAgbWV0aG9kXG4gICAqIGV4dGVuZGluZyB0aGUgc3RhbmRhcmQgQVBJLlxuICAgKi9cbiAgX3Byb3RvLnRyaWdnZXIgPSBmdW5jdGlvbiB0cmlnZ2VyKGV2ZW50KSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGRhdGEgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgZGF0YVtfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdGhpcy5lbWl0LmFwcGx5KHRoaXMsIFtldmVudCwgZXZlbnRdLmNvbmNhdChkYXRhKSk7XG4gIH07XG5cbiAgcmV0dXJuIE9ic2VydmVyO1xufShldmVudGVtaXR0ZXIzW1wiRXZlbnRFbWl0dGVyXCJdKTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2RlbXV4L2RlbXV4ZXIuanNcblxuXG5cblxuXG5cblxuXG5cbiAvLyBzZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzExMjM3MjU5LzU4OTQ5M1xuXG52YXIgZ2xvYmFsID0gT2JqZWN0KGdldF9zZWxmX3Njb3BlW1wiZ2V0U2VsZlNjb3BlXCJdKSgpOyAvLyBzYWZlZ3VhcmQgZm9yIGNvZGUgdGhhdCBtaWdodCBydW4gYm90aCBvbiB3b3JrZXIgYW5kIG1haW4gdGhyZWFkXG5cbnZhciBkZW11eGVyX01lZGlhU291cmNlID0gZ2V0TWVkaWFTb3VyY2UoKSB8fCB7XG4gIGlzVHlwZVN1cHBvcnRlZDogZnVuY3Rpb24gaXNUeXBlU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxudmFyIGRlbXV4ZXJfRGVtdXhlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIERlbXV4ZXIoaGxzLCBpZCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLmhscyA9IGhscztcbiAgICB0aGlzLmlkID0gaWQ7XG4gICAgdmFyIG9ic2VydmVyID0gdGhpcy5vYnNlcnZlciA9IG5ldyBPYnNlcnZlcigpO1xuICAgIHZhciBjb25maWcgPSBobHMuY29uZmlnO1xuXG4gICAgdmFyIGZvcndhcmRNZXNzYWdlID0gZnVuY3Rpb24gZm9yd2FyZE1lc3NhZ2UoZXYsIGRhdGEpIHtcbiAgICAgIGRhdGEgPSBkYXRhIHx8IHt9O1xuICAgICAgZGF0YS5mcmFnID0gX3RoaXMuZnJhZztcbiAgICAgIGRhdGEuaWQgPSBfdGhpcy5pZDtcbiAgICAgIGhscy50cmlnZ2VyKGV2LCBkYXRhKTtcbiAgICB9OyAvLyBmb3J3YXJkIGV2ZW50cyB0byBtYWluIHRocmVhZFxuXG5cbiAgICBvYnNlcnZlci5vbihldmVudHNbXCJkZWZhdWx0XCJdLkZSQUdfREVDUllQVEVELCBmb3J3YXJkTWVzc2FnZSk7XG4gICAgb2JzZXJ2ZXIub24oZXZlbnRzW1wiZGVmYXVsdFwiXS5GUkFHX1BBUlNJTkdfSU5JVF9TRUdNRU5ULCBmb3J3YXJkTWVzc2FnZSk7XG4gICAgb2JzZXJ2ZXIub24oZXZlbnRzW1wiZGVmYXVsdFwiXS5GUkFHX1BBUlNJTkdfREFUQSwgZm9yd2FyZE1lc3NhZ2UpO1xuICAgIG9ic2VydmVyLm9uKGV2ZW50c1tcImRlZmF1bHRcIl0uRlJBR19QQVJTRUQsIGZvcndhcmRNZXNzYWdlKTtcbiAgICBvYnNlcnZlci5vbihldmVudHNbXCJkZWZhdWx0XCJdLkVSUk9SLCBmb3J3YXJkTWVzc2FnZSk7XG4gICAgb2JzZXJ2ZXIub24oZXZlbnRzW1wiZGVmYXVsdFwiXS5GUkFHX1BBUlNJTkdfTUVUQURBVEEsIGZvcndhcmRNZXNzYWdlKTtcbiAgICBvYnNlcnZlci5vbihldmVudHNbXCJkZWZhdWx0XCJdLkZSQUdfUEFSU0lOR19VU0VSREFUQSwgZm9yd2FyZE1lc3NhZ2UpO1xuICAgIG9ic2VydmVyLm9uKGV2ZW50c1tcImRlZmF1bHRcIl0uSU5JVF9QVFNfRk9VTkQsIGZvcndhcmRNZXNzYWdlKTtcbiAgICB2YXIgdHlwZVN1cHBvcnRlZCA9IHtcbiAgICAgIG1wNDogZGVtdXhlcl9NZWRpYVNvdXJjZS5pc1R5cGVTdXBwb3J0ZWQoJ3ZpZGVvL21wNCcpLFxuICAgICAgbXBlZzogZGVtdXhlcl9NZWRpYVNvdXJjZS5pc1R5cGVTdXBwb3J0ZWQoJ2F1ZGlvL21wZWcnKSxcbiAgICAgIG1wMzogZGVtdXhlcl9NZWRpYVNvdXJjZS5pc1R5cGVTdXBwb3J0ZWQoJ2F1ZGlvL21wNDsgY29kZWNzPVwibXAzXCInKVxuICAgIH07IC8vIG5hdmlnYXRvci52ZW5kb3IgaXMgbm90IGFsd2F5cyBhdmFpbGFibGUgaW4gV2ViIFdvcmtlclxuICAgIC8vIHJlZmVyIHRvIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Xb3JrZXJHbG9iYWxTY29wZS9uYXZpZ2F0b3JcblxuICAgIHZhciB2ZW5kb3IgPSBuYXZpZ2F0b3IudmVuZG9yO1xuXG4gICAgaWYgKGNvbmZpZy5lbmFibGVXb3JrZXIgJiYgdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coJ2RlbXV4aW5nIGluIHdlYndvcmtlcicpO1xuICAgICAgdmFyIHc7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHcgPSB0aGlzLncgPSB3ZWJ3b3JraWZ5X3dlYnBhY2soLypyZXF1aXJlLnJlc29sdmUqLygvKiEgLi4vZGVtdXgvZGVtdXhlci13b3JrZXIuanMgKi8gXCIuL3NyYy9kZW11eC9kZW11eGVyLXdvcmtlci5qc1wiKSk7XG4gICAgICAgIHRoaXMub253bXNnID0gdGhpcy5vbldvcmtlck1lc3NhZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgdGhpcy5vbndtc2cpO1xuXG4gICAgICAgIHcub25lcnJvciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uRVJST1IsIHtcbiAgICAgICAgICAgIHR5cGU6IGVycm9yc1tcIkVycm9yVHlwZXNcIl0uT1RIRVJfRVJST1IsXG4gICAgICAgICAgICBkZXRhaWxzOiBlcnJvcnNbXCJFcnJvckRldGFpbHNcIl0uSU5URVJOQUxfRVhDRVBUSU9OLFxuICAgICAgICAgICAgZmF0YWw6IHRydWUsXG4gICAgICAgICAgICBldmVudDogJ2RlbXV4ZXJXb3JrZXInLFxuICAgICAgICAgICAgZXJyOiB7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6IGV2ZW50Lm1lc3NhZ2UgKyAnICgnICsgZXZlbnQuZmlsZW5hbWUgKyAnOicgKyBldmVudC5saW5lbm8gKyAnKSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICB3LnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICBjbWQ6ICdpbml0JyxcbiAgICAgICAgICB0eXBlU3VwcG9ydGVkOiB0eXBlU3VwcG9ydGVkLFxuICAgICAgICAgIHZlbmRvcjogdmVuZG9yLFxuICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICBjb25maWc6IEpTT04uc3RyaW5naWZ5KGNvbmZpZylcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLndhcm4oJ0Vycm9yIGluIHdvcmtlcjonLCBlcnIpO1xuICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0uZXJyb3IoJ0Vycm9yIHdoaWxlIGluaXRpYWxpemluZyBEZW11eGVyV29ya2VyLCBmYWxsYmFjayBvbiBEZW11eGVySW5saW5lJyk7XG5cbiAgICAgICAgaWYgKHcpIHtcbiAgICAgICAgICAvLyByZXZva2UgdGhlIE9iamVjdCBVUkwgdGhhdCB3YXMgdXNlZCB0byBjcmVhdGUgZGVtdXhlciB3b3JrZXIsIHNvIGFzIG5vdCB0byBsZWFrIGl0XG4gICAgICAgICAgZ2xvYmFsLlVSTC5yZXZva2VPYmplY3RVUkwody5vYmplY3RVUkwpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kZW11eGVyID0gbmV3IGRlbXV4ZXJfaW5saW5lW1wiZGVmYXVsdFwiXShvYnNlcnZlciwgdHlwZVN1cHBvcnRlZCwgY29uZmlnLCB2ZW5kb3IpO1xuICAgICAgICB0aGlzLncgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGVtdXhlciA9IG5ldyBkZW11eGVyX2lubGluZVtcImRlZmF1bHRcIl0ob2JzZXJ2ZXIsIHR5cGVTdXBwb3J0ZWQsIGNvbmZpZywgdmVuZG9yKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRGVtdXhlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIHZhciB3ID0gdGhpcy53O1xuXG4gICAgaWYgKHcpIHtcbiAgICAgIHcucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMub253bXNnKTtcbiAgICAgIHcudGVybWluYXRlKCk7XG4gICAgICB0aGlzLncgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZGVtdXhlciA9IHRoaXMuZGVtdXhlcjtcblxuICAgICAgaWYgKGRlbXV4ZXIpIHtcbiAgICAgICAgZGVtdXhlci5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuZGVtdXhlciA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG9ic2VydmVyID0gdGhpcy5vYnNlcnZlcjtcblxuICAgIGlmIChvYnNlcnZlcikge1xuICAgICAgb2JzZXJ2ZXIucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICB0aGlzLm9ic2VydmVyID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnB1c2ggPSBmdW5jdGlvbiBwdXNoKGRhdGEsIGluaXRTZWdtZW50LCBhdWRpb0NvZGVjLCB2aWRlb0NvZGVjLCBmcmFnLCBkdXJhdGlvbiwgYWNjdXJhdGVUaW1lT2Zmc2V0LCBkZWZhdWx0SW5pdFBUUykge1xuICAgIHZhciB3ID0gdGhpcy53O1xuICAgIHZhciB0aW1lT2Zmc2V0ID0gT2JqZWN0KG51bWJlcltcImlzRmluaXRlTnVtYmVyXCJdKShmcmFnLnN0YXJ0UFRTKSA/IGZyYWcuc3RhcnRQVFMgOiBmcmFnLnN0YXJ0O1xuICAgIHZhciBkZWNyeXB0ZGF0YSA9IGZyYWcuZGVjcnlwdGRhdGE7XG4gICAgdmFyIGxhc3RGcmFnID0gdGhpcy5mcmFnO1xuICAgIHZhciBkaXNjb250aW51aXR5ID0gIShsYXN0RnJhZyAmJiBmcmFnLmNjID09PSBsYXN0RnJhZy5jYyk7XG4gICAgdmFyIHRyYWNrU3dpdGNoID0gIShsYXN0RnJhZyAmJiBmcmFnLmxldmVsID09PSBsYXN0RnJhZy5sZXZlbCk7XG4gICAgdmFyIG5leHRTTiA9IGxhc3RGcmFnICYmIGZyYWcuc24gPT09IGxhc3RGcmFnLnNuICsgMTtcbiAgICB2YXIgY29udGlndW91cyA9ICF0cmFja1N3aXRjaCAmJiBuZXh0U047XG5cbiAgICBpZiAoZGlzY29udGludWl0eSkge1xuICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyh0aGlzLmlkICsgXCI6ZGlzY29udGludWl0eSBkZXRlY3RlZFwiKTtcbiAgICB9XG5cbiAgICBpZiAodHJhY2tTd2l0Y2gpIHtcbiAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2codGhpcy5pZCArIFwiOnN3aXRjaCBkZXRlY3RlZFwiKTtcbiAgICB9XG5cbiAgICB0aGlzLmZyYWcgPSBmcmFnO1xuXG4gICAgaWYgKHcpIHtcbiAgICAgIC8vIHBvc3QgZnJhZ21lbnQgcGF5bG9hZCBhcyB0cmFuc2ZlcmFibGUgb2JqZWN0cyBmb3IgQXJyYXlCdWZmZXIgKG5vIGNvcHkpXG4gICAgICB3LnBvc3RNZXNzYWdlKHtcbiAgICAgICAgY21kOiAnZGVtdXgnLFxuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBkZWNyeXB0ZGF0YTogZGVjcnlwdGRhdGEsXG4gICAgICAgIGluaXRTZWdtZW50OiBpbml0U2VnbWVudCxcbiAgICAgICAgYXVkaW9Db2RlYzogYXVkaW9Db2RlYyxcbiAgICAgICAgdmlkZW9Db2RlYzogdmlkZW9Db2RlYyxcbiAgICAgICAgdGltZU9mZnNldDogdGltZU9mZnNldCxcbiAgICAgICAgZGlzY29udGludWl0eTogZGlzY29udGludWl0eSxcbiAgICAgICAgdHJhY2tTd2l0Y2g6IHRyYWNrU3dpdGNoLFxuICAgICAgICBjb250aWd1b3VzOiBjb250aWd1b3VzLFxuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgIGFjY3VyYXRlVGltZU9mZnNldDogYWNjdXJhdGVUaW1lT2Zmc2V0LFxuICAgICAgICBkZWZhdWx0SW5pdFBUUzogZGVmYXVsdEluaXRQVFNcbiAgICAgIH0sIGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciA/IFtkYXRhXSA6IFtdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGRlbXV4ZXIgPSB0aGlzLmRlbXV4ZXI7XG5cbiAgICAgIGlmIChkZW11eGVyKSB7XG4gICAgICAgIGRlbXV4ZXIucHVzaChkYXRhLCBkZWNyeXB0ZGF0YSwgaW5pdFNlZ21lbnQsIGF1ZGlvQ29kZWMsIHZpZGVvQ29kZWMsIHRpbWVPZmZzZXQsIGRpc2NvbnRpbnVpdHksIHRyYWNrU3dpdGNoLCBjb250aWd1b3VzLCBkdXJhdGlvbiwgYWNjdXJhdGVUaW1lT2Zmc2V0LCBkZWZhdWx0SW5pdFBUUyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vbldvcmtlck1lc3NhZ2UgPSBmdW5jdGlvbiBvbldvcmtlck1lc3NhZ2UoZXYpIHtcbiAgICB2YXIgZGF0YSA9IGV2LmRhdGEsXG4gICAgICAgIGhscyA9IHRoaXMuaGxzO1xuXG4gICAgc3dpdGNoIChkYXRhLmV2ZW50KSB7XG4gICAgICBjYXNlICdpbml0JzpcbiAgICAgICAgLy8gcmV2b2tlIHRoZSBPYmplY3QgVVJMIHRoYXQgd2FzIHVzZWQgdG8gY3JlYXRlIGRlbXV4ZXIgd29ya2VyLCBzbyBhcyBub3QgdG8gbGVhayBpdFxuICAgICAgICBnbG9iYWwuVVJMLnJldm9rZU9iamVjdFVSTCh0aGlzLncub2JqZWN0VVJMKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIEZSQUdfUEFSU0lOR19EQVRBOiBkYXRhMSBhbmQgZGF0YTIgYXJlIHRyYW5zZmVyYWJsZSBvYmplY3RzXG5cbiAgICAgIGNhc2UgZXZlbnRzW1wiZGVmYXVsdFwiXS5GUkFHX1BBUlNJTkdfREFUQTpcbiAgICAgICAgZGF0YS5kYXRhLmRhdGExID0gbmV3IFVpbnQ4QXJyYXkoZGF0YS5kYXRhMSk7XG5cbiAgICAgICAgaWYgKGRhdGEuZGF0YTIpIHtcbiAgICAgICAgICBkYXRhLmRhdGEuZGF0YTIgPSBuZXcgVWludDhBcnJheShkYXRhLmRhdGEyKTtcbiAgICAgICAgfVxuXG4gICAgICAvKiBmYWxscyB0aHJvdWdoICovXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGRhdGEuZGF0YSA9IGRhdGEuZGF0YSB8fCB7fTtcbiAgICAgICAgZGF0YS5kYXRhLmZyYWcgPSB0aGlzLmZyYWc7XG4gICAgICAgIGRhdGEuZGF0YS5pZCA9IHRoaXMuaWQ7XG4gICAgICAgIGhscy50cmlnZ2VyKGRhdGEuZXZlbnQsIGRhdGEuZGF0YSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gRGVtdXhlcjtcbn0oKTtcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgZGVtdXhfZGVtdXhlciA9IChkZW11eGVyX0RlbXV4ZXIpO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29udHJvbGxlci9sZXZlbC1oZWxwZXIuanNcblxuXG5cblxuXG4vKipcbiAqIEBtb2R1bGUgTGV2ZWxIZWxwZXJcbiAqXG4gKiBQcm92aWRpbmcgbWV0aG9kcyBkZWFsaW5nIHdpdGggcGxheWxpc3Qgc2xpZGluZyBhbmQgZHJpZnRcbiAqXG4gKiBUT0RPOiBDcmVhdGUgYW4gYWN0dWFsIGBMZXZlbGAgY2xhc3MvbW9kZWwgdGhhdCBkZWFscyB3aXRoIGFsbCB0aGlzIGxvZ2ljIGluIGFuIG9iamVjdC1vcmllbnRlZC1tYW5uZXIuXG4gKlxuICogKi9cblxuZnVuY3Rpb24gYWRkR3JvdXBJZChsZXZlbCwgdHlwZSwgaWQpIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnYXVkaW8nOlxuICAgICAgaWYgKCFsZXZlbC5hdWRpb0dyb3VwSWRzKSB7XG4gICAgICAgIGxldmVsLmF1ZGlvR3JvdXBJZHMgPSBbXTtcbiAgICAgIH1cblxuICAgICAgbGV2ZWwuYXVkaW9Hcm91cElkcy5wdXNoKGlkKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAndGV4dCc6XG4gICAgICBpZiAoIWxldmVsLnRleHRHcm91cElkcykge1xuICAgICAgICBsZXZlbC50ZXh0R3JvdXBJZHMgPSBbXTtcbiAgICAgIH1cblxuICAgICAgbGV2ZWwudGV4dEdyb3VwSWRzLnB1c2goaWQpO1xuICAgICAgYnJlYWs7XG4gIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZVBUUyhmcmFnbWVudHMsIGZyb21JZHgsIHRvSWR4KSB7XG4gIHZhciBmcmFnRnJvbSA9IGZyYWdtZW50c1tmcm9tSWR4XSxcbiAgICAgIGZyYWdUbyA9IGZyYWdtZW50c1t0b0lkeF0sXG4gICAgICBmcmFnVG9QVFMgPSBmcmFnVG8uc3RhcnRQVFM7IC8vIGlmIHdlIGtub3cgc3RhcnRQVFNbdG9JZHhdXG5cbiAgaWYgKE9iamVjdChudW1iZXJbXCJpc0Zpbml0ZU51bWJlclwiXSkoZnJhZ1RvUFRTKSkge1xuICAgIC8vIHVwZGF0ZSBmcmFnbWVudCBkdXJhdGlvbi5cbiAgICAvLyBpdCBoZWxwcyB0byBmaXggZHJpZnRzIGJldHdlZW4gcGxheWxpc3QgcmVwb3J0ZWQgZHVyYXRpb24gYW5kIGZyYWdtZW50IHJlYWwgZHVyYXRpb25cbiAgICBpZiAodG9JZHggPiBmcm9tSWR4KSB7XG4gICAgICBmcmFnRnJvbS5kdXJhdGlvbiA9IGZyYWdUb1BUUyAtIGZyYWdGcm9tLnN0YXJ0O1xuXG4gICAgICBpZiAoZnJhZ0Zyb20uZHVyYXRpb24gPCAwKSB7XG4gICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuKFwibmVnYXRpdmUgZHVyYXRpb24gY29tcHV0ZWQgZm9yIGZyYWcgXCIgKyBmcmFnRnJvbS5zbiArIFwiLGxldmVsIFwiICsgZnJhZ0Zyb20ubGV2ZWwgKyBcIiwgdGhlcmUgc2hvdWxkIGJlIHNvbWUgZHVyYXRpb24gZHJpZnQgYmV0d2VlbiBwbGF5bGlzdCBhbmQgZnJhZ21lbnQhXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmcmFnVG8uZHVyYXRpb24gPSBmcmFnRnJvbS5zdGFydCAtIGZyYWdUb1BUUztcblxuICAgICAgaWYgKGZyYWdUby5kdXJhdGlvbiA8IDApIHtcbiAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLndhcm4oXCJuZWdhdGl2ZSBkdXJhdGlvbiBjb21wdXRlZCBmb3IgZnJhZyBcIiArIGZyYWdUby5zbiArIFwiLGxldmVsIFwiICsgZnJhZ1RvLmxldmVsICsgXCIsIHRoZXJlIHNob3VsZCBiZSBzb21lIGR1cmF0aW9uIGRyaWZ0IGJldHdlZW4gcGxheWxpc3QgYW5kIGZyYWdtZW50IVwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gd2UgZG9udCBrbm93IHN0YXJ0UFRTW3RvSWR4XVxuICAgIGlmICh0b0lkeCA+IGZyb21JZHgpIHtcbiAgICAgIHZhciBjb250aWd1b3VzID0gZnJhZ0Zyb20uY2MgPT09IGZyYWdUby5jYztcbiAgICAgIGZyYWdUby5zdGFydCA9IGZyYWdGcm9tLnN0YXJ0ICsgKGNvbnRpZ3VvdXMgJiYgZnJhZ0Zyb20ubWluRW5kUFRTID8gZnJhZ0Zyb20ubWluRW5kUFRTIC0gZnJhZ0Zyb20uc3RhcnQgOiBmcmFnRnJvbS5kdXJhdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZyYWdUby5zdGFydCA9IE1hdGgubWF4KGZyYWdGcm9tLnN0YXJ0IC0gZnJhZ1RvLmR1cmF0aW9uLCAwKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZUZyYWdQVFNEVFMoZGV0YWlscywgZnJhZywgc3RhcnRQVFMsIGVuZFBUUywgc3RhcnREVFMsIGVuZERUUykge1xuICAvLyB1cGRhdGUgZnJhZyBQVFMvRFRTXG4gIHZhciBtYXhTdGFydFBUUyA9IHN0YXJ0UFRTO1xuICB2YXIgbWluRW5kUFRTID0gZW5kUFRTO1xuXG4gIGlmIChPYmplY3QobnVtYmVyW1wiaXNGaW5pdGVOdW1iZXJcIl0pKGZyYWcuc3RhcnRQVFMpKSB7XG4gICAgLy8gZGVsdGEgUFRTIGJldHdlZW4gYXVkaW8gYW5kIHZpZGVvXG4gICAgdmFyIGRlbHRhUFRTID0gTWF0aC5hYnMoZnJhZy5zdGFydFBUUyAtIHN0YXJ0UFRTKTtcblxuICAgIGlmICghT2JqZWN0KG51bWJlcltcImlzRmluaXRlTnVtYmVyXCJdKShmcmFnLmRlbHRhUFRTKSkge1xuICAgICAgZnJhZy5kZWx0YVBUUyA9IGRlbHRhUFRTO1xuICAgIH0gZWxzZSB7XG4gICAgICBmcmFnLmRlbHRhUFRTID0gTWF0aC5tYXgoZGVsdGFQVFMsIGZyYWcuZGVsdGFQVFMpO1xuICAgIH1cblxuICAgIG1heFN0YXJ0UFRTID0gTWF0aC5tYXgoc3RhcnRQVFMsIGZyYWcuc3RhcnRQVFMpO1xuICAgIHN0YXJ0UFRTID0gTWF0aC5taW4oc3RhcnRQVFMsIGZyYWcuc3RhcnRQVFMpO1xuICAgIG1pbkVuZFBUUyA9IE1hdGgubWluKGVuZFBUUywgZnJhZy5lbmRQVFMpO1xuICAgIGVuZFBUUyA9IE1hdGgubWF4KGVuZFBUUywgZnJhZy5lbmRQVFMpO1xuICAgIHN0YXJ0RFRTID0gTWF0aC5taW4oc3RhcnREVFMsIGZyYWcuc3RhcnREVFMpO1xuICAgIGVuZERUUyA9IE1hdGgubWF4KGVuZERUUywgZnJhZy5lbmREVFMpO1xuICB9XG5cbiAgdmFyIGRyaWZ0ID0gc3RhcnRQVFMgLSBmcmFnLnN0YXJ0O1xuICBmcmFnLnN0YXJ0ID0gZnJhZy5zdGFydFBUUyA9IHN0YXJ0UFRTO1xuICBmcmFnLm1heFN0YXJ0UFRTID0gbWF4U3RhcnRQVFM7XG4gIGZyYWcuZW5kUFRTID0gZW5kUFRTO1xuICBmcmFnLm1pbkVuZFBUUyA9IG1pbkVuZFBUUztcbiAgZnJhZy5zdGFydERUUyA9IHN0YXJ0RFRTO1xuICBmcmFnLmVuZERUUyA9IGVuZERUUztcbiAgZnJhZy5kdXJhdGlvbiA9IGVuZFBUUyAtIHN0YXJ0UFRTO1xuICB2YXIgc24gPSBmcmFnLnNuOyAvLyBleGl0IGlmIHNuIG91dCBvZiByYW5nZVxuXG4gIGlmICghZGV0YWlscyB8fCBzbiA8IGRldGFpbHMuc3RhcnRTTiB8fCBzbiA+IGRldGFpbHMuZW5kU04pIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciBmcmFnSWR4LCBmcmFnbWVudHMsIGk7XG4gIGZyYWdJZHggPSBzbiAtIGRldGFpbHMuc3RhcnRTTjtcbiAgZnJhZ21lbnRzID0gZGV0YWlscy5mcmFnbWVudHM7IC8vIHVwZGF0ZSBmcmFnIHJlZmVyZW5jZSBpbiBmcmFnbWVudHMgYXJyYXlcbiAgLy8gcmF0aW9uYWxlIGlzIHRoYXQgZnJhZ21lbnRzIGFycmF5IG1pZ2h0IG5vdCBjb250YWluIHRoaXMgZnJhZyBvYmplY3QuXG4gIC8vIHRoaXMgd2lsbCBoYXBwZW4gaWYgcGxheWxpc3QgaGFzIGJlZW4gcmVmcmVzaGVkIGJldHdlZW4gZnJhZyBsb2FkaW5nIGFuZCBjYWxsIHRvIHVwZGF0ZUZyYWdQVFNEVFMoKVxuICAvLyBpZiB3ZSBkb24ndCB1cGRhdGUgZnJhZywgd2Ugd29uJ3QgYmUgYWJsZSB0byBwcm9wYWdhdGUgUFRTIGluZm8gb24gdGhlIHBsYXlsaXN0XG4gIC8vIHJlc3VsdGluZyBpbiBpbnZhbGlkIHNsaWRpbmcgY29tcHV0YXRpb25cblxuICBmcmFnbWVudHNbZnJhZ0lkeF0gPSBmcmFnOyAvLyBhZGp1c3QgZnJhZ21lbnQgUFRTL2R1cmF0aW9uIGZyb20gc2VxbnVtLTEgdG8gZnJhZyAwXG5cbiAgZm9yIChpID0gZnJhZ0lkeDsgaSA+IDA7IGktLSkge1xuICAgIHVwZGF0ZVBUUyhmcmFnbWVudHMsIGksIGkgLSAxKTtcbiAgfSAvLyBhZGp1c3QgZnJhZ21lbnQgUFRTL2R1cmF0aW9uIGZyb20gc2VxbnVtIHRvIGxhc3QgZnJhZ1xuXG5cbiAgZm9yIChpID0gZnJhZ0lkeDsgaSA8IGZyYWdtZW50cy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICB1cGRhdGVQVFMoZnJhZ21lbnRzLCBpLCBpICsgMSk7XG4gIH1cblxuICBkZXRhaWxzLlBUU0tub3duID0gdHJ1ZTtcbiAgcmV0dXJuIGRyaWZ0O1xufVxuZnVuY3Rpb24gbWVyZ2VEZXRhaWxzKG9sZERldGFpbHMsIG5ld0RldGFpbHMpIHtcbiAgLy8gcG90ZW50aWFsbHkgcmV0cmlldmUgY2FjaGVkIGluaXRzZWdtZW50XG4gIGlmIChuZXdEZXRhaWxzLmluaXRTZWdtZW50ICYmIG9sZERldGFpbHMuaW5pdFNlZ21lbnQpIHtcbiAgICBuZXdEZXRhaWxzLmluaXRTZWdtZW50ID0gb2xkRGV0YWlscy5pbml0U2VnbWVudDtcbiAgfSAvLyBjaGVjayBpZiBvbGQvbmV3IHBsYXlsaXN0cyBoYXZlIGZyYWdtZW50cyBpbiBjb21tb25cbiAgLy8gbG9vcCB0aHJvdWdoIG92ZXJsYXBwaW5nIFNOIGFuZCB1cGRhdGUgc3RhcnRQVFMgLCBjYywgYW5kIGR1cmF0aW9uIGlmIGFueSBmb3VuZFxuXG5cbiAgdmFyIGNjT2Zmc2V0ID0gMDtcbiAgdmFyIFBUU0ZyYWc7XG4gIG1hcEZyYWdtZW50SW50ZXJzZWN0aW9uKG9sZERldGFpbHMsIG5ld0RldGFpbHMsIGZ1bmN0aW9uIChvbGRGcmFnLCBuZXdGcmFnKSB7XG4gICAgY2NPZmZzZXQgPSBvbGRGcmFnLmNjIC0gbmV3RnJhZy5jYztcblxuICAgIGlmIChPYmplY3QobnVtYmVyW1wiaXNGaW5pdGVOdW1iZXJcIl0pKG9sZEZyYWcuc3RhcnRQVFMpKSB7XG4gICAgICBuZXdGcmFnLnN0YXJ0ID0gbmV3RnJhZy5zdGFydFBUUyA9IG9sZEZyYWcuc3RhcnRQVFM7XG4gICAgICBuZXdGcmFnLmVuZFBUUyA9IG9sZEZyYWcuZW5kUFRTO1xuICAgICAgbmV3RnJhZy5kdXJhdGlvbiA9IG9sZEZyYWcuZHVyYXRpb247XG4gICAgICBuZXdGcmFnLmJhY2t0cmFja2VkID0gb2xkRnJhZy5iYWNrdHJhY2tlZDtcbiAgICAgIG5ld0ZyYWcuZHJvcHBlZCA9IG9sZEZyYWcuZHJvcHBlZDtcbiAgICAgIFBUU0ZyYWcgPSBuZXdGcmFnO1xuICAgIH0gLy8gUFRTIGlzIGtub3duIHdoZW4gdGhlcmUgYXJlIG92ZXJsYXBwaW5nIHNlZ21lbnRzXG5cblxuICAgIG5ld0RldGFpbHMuUFRTS25vd24gPSB0cnVlO1xuICB9KTtcblxuICBpZiAoIW5ld0RldGFpbHMuUFRTS25vd24pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoY2NPZmZzZXQpIHtcbiAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKCdkaXNjb250aW51aXR5IHNsaWRpbmcgZnJvbSBwbGF5bGlzdCwgdGFrZSBkcmlmdCBpbnRvIGFjY291bnQnKTtcbiAgICB2YXIgbmV3RnJhZ21lbnRzID0gbmV3RGV0YWlscy5mcmFnbWVudHM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld0ZyYWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgbmV3RnJhZ21lbnRzW2ldLmNjICs9IGNjT2Zmc2V0O1xuICAgIH1cbiAgfSAvLyBpZiBhdCBsZWFzdCBvbmUgZnJhZ21lbnQgY29udGFpbnMgUFRTIGluZm8sIHJlY29tcHV0ZSBQVFMgaW5mb3JtYXRpb24gZm9yIGFsbCBmcmFnbWVudHNcblxuXG4gIGlmIChQVFNGcmFnKSB7XG4gICAgdXBkYXRlRnJhZ1BUU0RUUyhuZXdEZXRhaWxzLCBQVFNGcmFnLCBQVFNGcmFnLnN0YXJ0UFRTLCBQVFNGcmFnLmVuZFBUUywgUFRTRnJhZy5zdGFydERUUywgUFRTRnJhZy5lbmREVFMpO1xuICB9IGVsc2Uge1xuICAgIC8vIGVuc3VyZSB0aGF0IGRlbHRhIGlzIHdpdGhpbiBvbGRGcmFnbWVudHMgcmFuZ2VcbiAgICAvLyBhbHNvIGFkanVzdCBzbGlkaW5nIGluIGNhc2UgZGVsdGEgaXMgMCAod2UgY291bGQgaGF2ZSBvbGQ9WzUwLTYwXSBhbmQgbmV3PW9sZD1bNTAtNjFdKVxuICAgIC8vIGluIHRoYXQgY2FzZSB3ZSBhbHNvIG5lZWQgdG8gYWRqdXN0IHN0YXJ0IG9mZnNldCBvZiBhbGwgZnJhZ21lbnRzXG4gICAgYWRqdXN0U2xpZGluZyhvbGREZXRhaWxzLCBuZXdEZXRhaWxzKTtcbiAgfSAvLyBpZiB3ZSBhcmUgaGVyZSwgaXQgbWVhbnMgd2UgaGF2ZSBmcmFnbWVudHMgb3ZlcmxhcHBpbmcgYmV0d2VlblxuICAvLyBvbGQgYW5kIG5ldyBsZXZlbC4gcmVsaWFibGUgUFRTIGluZm8gaXMgdGh1cyByZWx5aW5nIG9uIG9sZCBsZXZlbFxuXG5cbiAgbmV3RGV0YWlscy5QVFNLbm93biA9IG9sZERldGFpbHMuUFRTS25vd247XG59XG5mdW5jdGlvbiBtZXJnZVN1YnRpdGxlUGxheWxpc3RzKG9sZFBsYXlsaXN0LCBuZXdQbGF5bGlzdCwgcmVmZXJlbmNlU3RhcnQpIHtcbiAgaWYgKHJlZmVyZW5jZVN0YXJ0ID09PSB2b2lkIDApIHtcbiAgICByZWZlcmVuY2VTdGFydCA9IDA7XG4gIH1cblxuICB2YXIgbGFzdEluZGV4ID0gLTE7XG4gIG1hcEZyYWdtZW50SW50ZXJzZWN0aW9uKG9sZFBsYXlsaXN0LCBuZXdQbGF5bGlzdCwgZnVuY3Rpb24gKG9sZEZyYWcsIG5ld0ZyYWcsIGluZGV4KSB7XG4gICAgbmV3RnJhZy5zdGFydCA9IG9sZEZyYWcuc3RhcnQ7XG4gICAgbGFzdEluZGV4ID0gaW5kZXg7XG4gIH0pO1xuICB2YXIgZnJhZ3MgPSBuZXdQbGF5bGlzdC5mcmFnbWVudHM7XG5cbiAgaWYgKGxhc3RJbmRleCA8IDApIHtcbiAgICBmcmFncy5mb3JFYWNoKGZ1bmN0aW9uIChmcmFnKSB7XG4gICAgICBmcmFnLnN0YXJ0ICs9IHJlZmVyZW5jZVN0YXJ0O1xuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSBsYXN0SW5kZXggKyAxOyBpIDwgZnJhZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBmcmFnc1tpXS5zdGFydCA9IGZyYWdzW2kgLSAxXS5zdGFydCArIGZyYWdzW2kgLSAxXS5kdXJhdGlvbjtcbiAgfVxufVxuZnVuY3Rpb24gbWFwRnJhZ21lbnRJbnRlcnNlY3Rpb24ob2xkUGxheWxpc3QsIG5ld1BsYXlsaXN0LCBpbnRlcnNlY3Rpb25Gbikge1xuICBpZiAoIW9sZFBsYXlsaXN0IHx8ICFuZXdQbGF5bGlzdCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzdGFydCA9IE1hdGgubWF4KG9sZFBsYXlsaXN0LnN0YXJ0U04sIG5ld1BsYXlsaXN0LnN0YXJ0U04pIC0gbmV3UGxheWxpc3Quc3RhcnRTTjtcbiAgdmFyIGVuZCA9IE1hdGgubWluKG9sZFBsYXlsaXN0LmVuZFNOLCBuZXdQbGF5bGlzdC5lbmRTTikgLSBuZXdQbGF5bGlzdC5zdGFydFNOO1xuICB2YXIgZGVsdGEgPSBuZXdQbGF5bGlzdC5zdGFydFNOIC0gb2xkUGxheWxpc3Quc3RhcnRTTjtcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPD0gZW5kOyBpKyspIHtcbiAgICB2YXIgb2xkRnJhZyA9IG9sZFBsYXlsaXN0LmZyYWdtZW50c1tkZWx0YSArIGldO1xuICAgIHZhciBuZXdGcmFnID0gbmV3UGxheWxpc3QuZnJhZ21lbnRzW2ldO1xuXG4gICAgaWYgKCFvbGRGcmFnIHx8ICFuZXdGcmFnKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpbnRlcnNlY3Rpb25GbihvbGRGcmFnLCBuZXdGcmFnLCBpKTtcbiAgfVxufVxuZnVuY3Rpb24gYWRqdXN0U2xpZGluZyhvbGRQbGF5bGlzdCwgbmV3UGxheWxpc3QpIHtcbiAgdmFyIGRlbHRhID0gbmV3UGxheWxpc3Quc3RhcnRTTiAtIG9sZFBsYXlsaXN0LnN0YXJ0U047XG4gIHZhciBvbGRGcmFnbWVudHMgPSBvbGRQbGF5bGlzdC5mcmFnbWVudHM7XG4gIHZhciBuZXdGcmFnbWVudHMgPSBuZXdQbGF5bGlzdC5mcmFnbWVudHM7XG5cbiAgaWYgKGRlbHRhIDwgMCB8fCBkZWx0YSA+IG9sZEZyYWdtZW50cy5sZW5ndGgpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld0ZyYWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIG5ld0ZyYWdtZW50c1tpXS5zdGFydCArPSBvbGRGcmFnbWVudHNbZGVsdGFdLnN0YXJ0O1xuICB9XG59XG5mdW5jdGlvbiBjb21wdXRlUmVsb2FkSW50ZXJ2YWwoY3VycmVudFBsYXlsaXN0LCBuZXdQbGF5bGlzdCwgbGFzdFJlcXVlc3RUaW1lKSB7XG4gIHZhciByZWxvYWRJbnRlcnZhbCA9IDEwMDAgKiAobmV3UGxheWxpc3QuYXZlcmFnZXRhcmdldGR1cmF0aW9uID8gbmV3UGxheWxpc3QuYXZlcmFnZXRhcmdldGR1cmF0aW9uIDogbmV3UGxheWxpc3QudGFyZ2V0ZHVyYXRpb24pO1xuICB2YXIgbWluUmVsb2FkSW50ZXJ2YWwgPSByZWxvYWRJbnRlcnZhbCAvIDI7XG5cbiAgaWYgKGN1cnJlbnRQbGF5bGlzdCAmJiBuZXdQbGF5bGlzdC5lbmRTTiA9PT0gY3VycmVudFBsYXlsaXN0LmVuZFNOKSB7XG4gICAgLy8gZm9sbG93IEhMUyBTcGVjLCBJZiB0aGUgY2xpZW50IHJlbG9hZHMgYSBQbGF5bGlzdCBmaWxlIGFuZCBmaW5kcyB0aGF0IGl0IGhhcyBub3RcbiAgICAvLyBjaGFuZ2VkIHRoZW4gaXQgTVVTVCB3YWl0IGZvciBhIHBlcmlvZCBvZiBvbmUtaGFsZiB0aGUgdGFyZ2V0XG4gICAgLy8gZHVyYXRpb24gYmVmb3JlIHJldHJ5aW5nLlxuICAgIHJlbG9hZEludGVydmFsID0gbWluUmVsb2FkSW50ZXJ2YWw7XG4gIH1cblxuICBpZiAobGFzdFJlcXVlc3RUaW1lKSB7XG4gICAgcmVsb2FkSW50ZXJ2YWwgPSBNYXRoLm1heChtaW5SZWxvYWRJbnRlcnZhbCwgcmVsb2FkSW50ZXJ2YWwgLSAod2luZG93LnBlcmZvcm1hbmNlLm5vdygpIC0gbGFzdFJlcXVlc3RUaW1lKSk7XG4gIH0gLy8gaW4gYW55IGNhc2UsIGRvbid0IHJlbG9hZCBtb3JlIHRoYW4gaGFsZiBvZiB0YXJnZXQgZHVyYXRpb25cblxuXG4gIHJldHVybiBNYXRoLnJvdW5kKHJlbG9hZEludGVydmFsKTtcbn1cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3V0aWxzL3RpbWUtcmFuZ2VzLnRzXG4vKipcbiAqICBUaW1lUmFuZ2VzIHRvIHN0cmluZyBoZWxwZXJcbiAqL1xudmFyIFRpbWVSYW5nZXMgPSB7XG4gIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZyhyKSB7XG4gICAgdmFyIGxvZyA9ICcnO1xuICAgIHZhciBsZW4gPSByLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGxvZyArPSAnWycgKyByLnN0YXJ0KGkpLnRvRml4ZWQoMykgKyAnLCcgKyByLmVuZChpKS50b0ZpeGVkKDMpICsgJ10nO1xuICAgIH1cblxuICAgIHJldHVybiBsb2c7XG4gIH1cbn07XG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciB0aW1lX3JhbmdlcyA9IChUaW1lUmFuZ2VzKTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3V0aWxzL2Rpc2NvbnRpbnVpdGllcy5qc1xuXG5cblxuZnVuY3Rpb24gZmluZEZpcnN0RnJhZ1dpdGhDQyhmcmFnbWVudHMsIGNjKSB7XG4gIHZhciBmaXJzdEZyYWcgPSBudWxsO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZnJhZ21lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIGN1cnJlbnRGcmFnID0gZnJhZ21lbnRzW2ldO1xuXG4gICAgaWYgKGN1cnJlbnRGcmFnICYmIGN1cnJlbnRGcmFnLmNjID09PSBjYykge1xuICAgICAgZmlyc3RGcmFnID0gY3VycmVudEZyYWc7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmlyc3RGcmFnO1xufVxuZnVuY3Rpb24gZmluZEZyYWdXaXRoQ0MoZnJhZ21lbnRzLCBDQykge1xuICByZXR1cm4gYmluYXJ5X3NlYXJjaC5zZWFyY2goZnJhZ21lbnRzLCBmdW5jdGlvbiAoY2FuZGlkYXRlKSB7XG4gICAgaWYgKGNhbmRpZGF0ZS5jYyA8IENDKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGNhbmRpZGF0ZS5jYyA+IENDKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBzaG91bGRBbGlnbk9uRGlzY29udGludWl0aWVzKGxhc3RGcmFnLCBsYXN0TGV2ZWwsIGRldGFpbHMpIHtcbiAgdmFyIHNob3VsZEFsaWduID0gZmFsc2U7XG5cbiAgaWYgKGxhc3RMZXZlbCAmJiBsYXN0TGV2ZWwuZGV0YWlscyAmJiBkZXRhaWxzKSB7XG4gICAgaWYgKGRldGFpbHMuZW5kQ0MgPiBkZXRhaWxzLnN0YXJ0Q0MgfHwgbGFzdEZyYWcgJiYgbGFzdEZyYWcuY2MgPCBkZXRhaWxzLnN0YXJ0Q0MpIHtcbiAgICAgIHNob3VsZEFsaWduID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2hvdWxkQWxpZ247XG59IC8vIEZpbmQgdGhlIGZpcnN0IGZyYWcgaW4gdGhlIHByZXZpb3VzIGxldmVsIHdoaWNoIG1hdGNoZXMgdGhlIENDIG9mIHRoZSBmaXJzdCBmcmFnIG9mIHRoZSBuZXcgbGV2ZWxcblxuZnVuY3Rpb24gZmluZERpc2NvbnRpbnVvdXNSZWZlcmVuY2VGcmFnKHByZXZEZXRhaWxzLCBjdXJEZXRhaWxzKSB7XG4gIHZhciBwcmV2RnJhZ3MgPSBwcmV2RGV0YWlscy5mcmFnbWVudHM7XG4gIHZhciBjdXJGcmFncyA9IGN1ckRldGFpbHMuZnJhZ21lbnRzO1xuXG4gIGlmICghY3VyRnJhZ3MubGVuZ3RoIHx8ICFwcmV2RnJhZ3MubGVuZ3RoKSB7XG4gICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZygnTm8gZnJhZ21lbnRzIHRvIGFsaWduJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHByZXZTdGFydEZyYWcgPSBmaW5kRmlyc3RGcmFnV2l0aENDKHByZXZGcmFncywgY3VyRnJhZ3NbMF0uY2MpO1xuXG4gIGlmICghcHJldlN0YXJ0RnJhZyB8fCBwcmV2U3RhcnRGcmFnICYmICFwcmV2U3RhcnRGcmFnLnN0YXJ0UFRTKSB7XG4gICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZygnTm8gZnJhZyBpbiBwcmV2aW91cyBsZXZlbCB0byBhbGlnbiBvbicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHJldHVybiBwcmV2U3RhcnRGcmFnO1xufVxuZnVuY3Rpb24gYWRqdXN0UHRzKHNsaWRpbmcsIGRldGFpbHMpIHtcbiAgZGV0YWlscy5mcmFnbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZnJhZykge1xuICAgIGlmIChmcmFnKSB7XG4gICAgICB2YXIgc3RhcnQgPSBmcmFnLnN0YXJ0ICsgc2xpZGluZztcbiAgICAgIGZyYWcuc3RhcnQgPSBmcmFnLnN0YXJ0UFRTID0gc3RhcnQ7XG4gICAgICBmcmFnLmVuZFBUUyA9IHN0YXJ0ICsgZnJhZy5kdXJhdGlvbjtcbiAgICB9XG4gIH0pO1xuICBkZXRhaWxzLlBUU0tub3duID0gdHJ1ZTtcbn1cbi8qKlxuICogVXNpbmcgdGhlIHBhcmFtZXRlcnMgb2YgdGhlIGxhc3QgbGV2ZWwsIHRoaXMgZnVuY3Rpb24gY29tcHV0ZXMgUFRTJyBvZiB0aGUgbmV3IGZyYWdtZW50cyBzbyB0aGF0IHRoZXkgZm9ybSBhXG4gKiBjb250aWd1b3VzIHN0cmVhbSB3aXRoIHRoZSBsYXN0IGZyYWdtZW50cy5cbiAqIFRoZSBQVFMgb2YgYSBmcmFnbWVudCBsZXRzIEhscy5qcyBrbm93IHdoZXJlIGl0IGZpdHMgaW50byBhIHN0cmVhbSAtIGJ5IGtub3dpbmcgZXZlcnkgUFRTLCB3ZSBrbm93IHdoaWNoIGZyYWdtZW50IHRvXG4gKiBkb3dubG9hZCBhdCBhbnkgZ2l2ZW4gdGltZS4gUFRTIGlzIG5vcm1hbGx5IGNvbXB1dGVkIHdoZW4gdGhlIGZyYWdtZW50IGlzIGRlbXV4ZWQsIHNvIHRha2luZyB0aGlzIHN0ZXAgc2F2ZXMgdXMgdGltZVxuICogYW5kIGFuIGV4dHJhIGRvd25sb2FkLlxuICogQHBhcmFtIGxhc3RGcmFnXG4gKiBAcGFyYW0gbGFzdExldmVsXG4gKiBAcGFyYW0gZGV0YWlsc1xuICovXG5cbmZ1bmN0aW9uIGFsaWduU3RyZWFtKGxhc3RGcmFnLCBsYXN0TGV2ZWwsIGRldGFpbHMpIHtcbiAgYWxpZ25EaXNjb250aW51aXRpZXMobGFzdEZyYWcsIGRldGFpbHMsIGxhc3RMZXZlbCk7XG5cbiAgaWYgKCFkZXRhaWxzLlBUU0tub3duICYmIGxhc3RMZXZlbCkge1xuICAgIC8vIElmIHRoZSBQVFMgd2Fzbid0IGZpZ3VyZWQgb3V0IHZpYSBkaXNjb250aW51aXR5IHNlcXVlbmNlIHRoYXQgbWVhbnMgdGhlcmUgd2FzIG5vIENDIGluY3JlYXNlIHdpdGhpbiB0aGUgbGV2ZWwuXG4gICAgLy8gQWxpZ25pbmcgdmlhIFByb2dyYW0gRGF0ZSBUaW1lIHNob3VsZCB0aGVyZWZvcmUgYmUgcmVsaWFibGUsIHNpbmNlIFBEVCBzaG91bGQgYmUgdGhlIHNhbWUgd2l0aGluIHRoZSBzYW1lXG4gICAgLy8gZGlzY29udGludWl0eSBzZXF1ZW5jZS5cbiAgICBhbGlnblBEVChkZXRhaWxzLCBsYXN0TGV2ZWwuZGV0YWlscyk7XG4gIH1cbn1cbi8qKlxuICogQ29tcHV0ZXMgdGhlIFBUUyBpZiBhIG5ldyBsZXZlbCdzIGZyYWdtZW50cyB1c2luZyB0aGUgUFRTIG9mIGEgZnJhZ21lbnQgaW4gdGhlIGxhc3QgbGV2ZWwgd2hpY2ggc2hhcmVzIHRoZSBzYW1lXG4gKiBkaXNjb250aW51aXR5IHNlcXVlbmNlLlxuICogQHBhcmFtIGxhc3RMZXZlbCAtIFRoZSBkZXRhaWxzIG9mIHRoZSBsYXN0IGxvYWRlZCBsZXZlbFxuICogQHBhcmFtIGRldGFpbHMgLSBUaGUgZGV0YWlscyBvZiB0aGUgbmV3IGxldmVsXG4gKi9cblxuZnVuY3Rpb24gYWxpZ25EaXNjb250aW51aXRpZXMobGFzdEZyYWcsIGRldGFpbHMsIGxhc3RMZXZlbCkge1xuICBpZiAoc2hvdWxkQWxpZ25PbkRpc2NvbnRpbnVpdGllcyhsYXN0RnJhZywgbGFzdExldmVsLCBkZXRhaWxzKSkge1xuICAgIHZhciByZWZlcmVuY2VGcmFnID0gZmluZERpc2NvbnRpbnVvdXNSZWZlcmVuY2VGcmFnKGxhc3RMZXZlbC5kZXRhaWxzLCBkZXRhaWxzKTtcblxuICAgIGlmIChyZWZlcmVuY2VGcmFnKSB7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKCdBZGp1c3RpbmcgUFRTIHVzaW5nIGxhc3QgbGV2ZWwgZHVlIHRvIENDIGluY3JlYXNlIHdpdGhpbiBjdXJyZW50IGxldmVsJyk7XG4gICAgICBhZGp1c3RQdHMocmVmZXJlbmNlRnJhZy5zdGFydCwgZGV0YWlscyk7XG4gICAgfVxuICB9XG59XG4vKipcbiAqIENvbXB1dGVzIHRoZSBQVFMgb2YgYSBuZXcgbGV2ZWwncyBmcmFnbWVudHMgdXNpbmcgdGhlIGRpZmZlcmVuY2UgaW4gUHJvZ3JhbSBEYXRlIFRpbWUgZnJvbSB0aGUgbGFzdCBsZXZlbC5cbiAqIEBwYXJhbSBkZXRhaWxzIC0gVGhlIGRldGFpbHMgb2YgdGhlIG5ldyBsZXZlbFxuICogQHBhcmFtIGxhc3REZXRhaWxzIC0gVGhlIGRldGFpbHMgb2YgdGhlIGxhc3QgbG9hZGVkIGxldmVsXG4gKi9cblxuZnVuY3Rpb24gYWxpZ25QRFQoZGV0YWlscywgbGFzdERldGFpbHMpIHtcbiAgaWYgKGxhc3REZXRhaWxzICYmIGxhc3REZXRhaWxzLmZyYWdtZW50cy5sZW5ndGgpIHtcbiAgICBpZiAoIWRldGFpbHMuaGFzUHJvZ3JhbURhdGVUaW1lIHx8ICFsYXN0RGV0YWlscy5oYXNQcm9ncmFtRGF0ZVRpbWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIGlmIGxhc3QgbGV2ZWwgc2xpZGluZyBpcyAxMDAwIGFuZCBpdHMgZmlyc3QgZnJhZyBQUk9HUkFNLURBVEUtVElNRSBpcyAyMDE3LTA4LTIwIDE6MTA6MDAgQU1cbiAgICAvLyBhbmQgaWYgbmV3IGRldGFpbHMgZmlyc3QgZnJhZyBQUk9HUkFNIERBVEUtVElNRSBpcyAyMDE3LTA4LTIwIDE6MTA6MDggQU1cbiAgICAvLyB0aGVuIHdlIGNhbiBkZWR1Y2UgdGhhdCBwbGF5bGlzdCBCIHNsaWRpbmcgaXMgMTAwMCs4ID0gMTAwOHNcblxuXG4gICAgdmFyIGxhc3RQRFQgPSBsYXN0RGV0YWlscy5mcmFnbWVudHNbMF0ucHJvZ3JhbURhdGVUaW1lO1xuICAgIHZhciBuZXdQRFQgPSBkZXRhaWxzLmZyYWdtZW50c1swXS5wcm9ncmFtRGF0ZVRpbWU7IC8vIGRhdGUgZGlmZiBpcyBpbiBtcy4gZnJhZy5zdGFydCBpcyBpbiBzZWNvbmRzXG5cbiAgICB2YXIgc2xpZGluZyA9IChuZXdQRFQgLSBsYXN0UERUKSAvIDEwMDAgKyBsYXN0RGV0YWlscy5mcmFnbWVudHNbMF0uc3RhcnQ7XG5cbiAgICBpZiAoT2JqZWN0KG51bWJlcltcImlzRmluaXRlTnVtYmVyXCJdKShzbGlkaW5nKSkge1xuICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyhcImFkanVzdGluZyBQVFMgdXNpbmcgcHJvZ3JhbURhdGVUaW1lIGRlbHRhLCBzbGlkaW5nOlwiICsgc2xpZGluZy50b0ZpeGVkKDMpKTtcbiAgICAgIGFkanVzdFB0cyhzbGlkaW5nLCBkZXRhaWxzKTtcbiAgICB9XG4gIH1cbn1cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvbnRyb2xsZXIvZnJhZ21lbnQtZmluZGVycy50c1xuXG5cblxuLyoqXG4gKiBSZXR1cm5zIGZpcnN0IGZyYWdtZW50IHdob3NlIGVuZFBkdCB2YWx1ZSBleGNlZWRzIHRoZSBnaXZlbiBQRFQuXG4gKiBAcGFyYW0ge0FycmF5PEZyYWdtZW50Pn0gZnJhZ21lbnRzIC0gVGhlIGFycmF5IG9mIGNhbmRpZGF0ZSBmcmFnbWVudHNcbiAqIEBwYXJhbSB7bnVtYmVyfG51bGx9IFtQRFRWYWx1ZSA9IG51bGxdIC0gVGhlIFBEVCB2YWx1ZSB3aGljaCBtdXN0IGJlIGV4Y2VlZGVkXG4gKiBAcGFyYW0ge251bWJlcn0gW21heEZyYWdMb29rVXBUb2xlcmFuY2UgPSAwXSAtIFRoZSBhbW91bnQgb2YgdGltZSB0aGF0IGEgZnJhZ21lbnQncyBzdGFydC9lbmQgY2FuIGJlIHdpdGhpbiBpbiBvcmRlciB0byBiZSBjb25zaWRlcmVkIGNvbnRpZ3VvdXNcbiAqIEByZXR1cm5zIHsqfG51bGx9IGZyYWdtZW50IC0gVGhlIGJlc3QgbWF0Y2hpbmcgZnJhZ21lbnRcbiAqL1xuZnVuY3Rpb24gZmluZEZyYWdtZW50QnlQRFQoZnJhZ21lbnRzLCBQRFRWYWx1ZSwgbWF4RnJhZ0xvb2tVcFRvbGVyYW5jZSkge1xuICBpZiAoUERUVmFsdWUgPT09IG51bGwgfHwgIUFycmF5LmlzQXJyYXkoZnJhZ21lbnRzKSB8fCAhZnJhZ21lbnRzLmxlbmd0aCB8fCAhT2JqZWN0KG51bWJlcltcImlzRmluaXRlTnVtYmVyXCJdKShQRFRWYWx1ZSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSAvLyBpZiBsZXNzIHRoYW4gc3RhcnRcblxuXG4gIHZhciBzdGFydFBEVCA9IGZyYWdtZW50c1swXS5wcm9ncmFtRGF0ZVRpbWU7XG5cbiAgaWYgKFBEVFZhbHVlIDwgKHN0YXJ0UERUIHx8IDApKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgZW5kUERUID0gZnJhZ21lbnRzW2ZyYWdtZW50cy5sZW5ndGggLSAxXS5lbmRQcm9ncmFtRGF0ZVRpbWU7XG5cbiAgaWYgKFBEVFZhbHVlID49IChlbmRQRFQgfHwgMCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIG1heEZyYWdMb29rVXBUb2xlcmFuY2UgPSBtYXhGcmFnTG9va1VwVG9sZXJhbmNlIHx8IDA7XG5cbiAgZm9yICh2YXIgc2VnID0gMDsgc2VnIDwgZnJhZ21lbnRzLmxlbmd0aDsgKytzZWcpIHtcbiAgICB2YXIgZnJhZyA9IGZyYWdtZW50c1tzZWddO1xuXG4gICAgaWYgKHBkdFdpdGhpblRvbGVyYW5jZVRlc3QoUERUVmFsdWUsIG1heEZyYWdMb29rVXBUb2xlcmFuY2UsIGZyYWcpKSB7XG4gICAgICByZXR1cm4gZnJhZztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogRmluZHMgYSBmcmFnbWVudCBiYXNlZCBvbiB0aGUgU04gb2YgdGhlIHByZXZpb3VzIGZyYWdtZW50OyBvciBiYXNlZCBvbiB0aGUgbmVlZHMgb2YgdGhlIGN1cnJlbnQgYnVmZmVyLlxuICogVGhpcyBtZXRob2QgY29tcGVuc2F0ZXMgZm9yIHNtYWxsIGJ1ZmZlciBnYXBzIGJ5IGFwcGx5aW5nIGEgdG9sZXJhbmNlIHRvIHRoZSBzdGFydCBvZiBhbnkgY2FuZGlkYXRlIGZyYWdtZW50LCB0aHVzXG4gKiBicmVha2luZyBhbnkgdHJhcHMgd2hpY2ggd291bGQgY2F1c2UgdGhlIHNhbWUgZnJhZ21lbnQgdG8gYmUgY29udGludW91c2x5IHNlbGVjdGVkIHdpdGhpbiBhIHNtYWxsIHJhbmdlLlxuICogQHBhcmFtIHsqfSBmcmFnUHJldmlvdXMgLSBUaGUgbGFzdCBmcmFnIHN1Y2Nlc3NmdWxseSBhcHBlbmRlZFxuICogQHBhcmFtIHtBcnJheTxGcmFnbWVudD59IGZyYWdtZW50cyAtIFRoZSBhcnJheSBvZiBjYW5kaWRhdGUgZnJhZ21lbnRzXG4gKiBAcGFyYW0ge251bWJlcn0gW2J1ZmZlckVuZCA9IDBdIC0gVGhlIGVuZCBvZiB0aGUgY29udGlndW91cyBidWZmZXJlZCByYW5nZSB0aGUgcGxheWhlYWQgaXMgY3VycmVudGx5IHdpdGhpblxuICogQHBhcmFtIHtudW1iZXJ9IG1heEZyYWdMb29rVXBUb2xlcmFuY2UgLSBUaGUgYW1vdW50IG9mIHRpbWUgdGhhdCBhIGZyYWdtZW50J3Mgc3RhcnQvZW5kIGNhbiBiZSB3aXRoaW4gaW4gb3JkZXIgdG8gYmUgY29uc2lkZXJlZCBjb250aWd1b3VzXG4gKiBAcmV0dXJucyB7Kn0gZm91bmRGcmFnIC0gVGhlIGJlc3QgbWF0Y2hpbmcgZnJhZ21lbnRcbiAqL1xuXG5mdW5jdGlvbiBmaW5kRnJhZ21lbnRCeVBUUyhmcmFnUHJldmlvdXMsIGZyYWdtZW50cywgYnVmZmVyRW5kLCBtYXhGcmFnTG9va1VwVG9sZXJhbmNlKSB7XG4gIGlmIChidWZmZXJFbmQgPT09IHZvaWQgMCkge1xuICAgIGJ1ZmZlckVuZCA9IDA7XG4gIH1cblxuICBpZiAobWF4RnJhZ0xvb2tVcFRvbGVyYW5jZSA9PT0gdm9pZCAwKSB7XG4gICAgbWF4RnJhZ0xvb2tVcFRvbGVyYW5jZSA9IDA7XG4gIH1cblxuICB2YXIgZnJhZ05leHQgPSBudWxsO1xuXG4gIGlmIChmcmFnUHJldmlvdXMpIHtcbiAgICBmcmFnTmV4dCA9IGZyYWdtZW50c1tmcmFnUHJldmlvdXMuc24gLSBmcmFnbWVudHNbMF0uc24gKyAxXTtcbiAgfSBlbHNlIGlmIChidWZmZXJFbmQgPT09IDAgJiYgZnJhZ21lbnRzWzBdLnN0YXJ0ID09PSAwKSB7XG4gICAgZnJhZ05leHQgPSBmcmFnbWVudHNbMF07XG4gIH0gLy8gUHJlZmVyIHRoZSBuZXh0IGZyYWdtZW50IGlmIGl0J3Mgd2l0aGluIHRvbGVyYW5jZVxuXG5cbiAgaWYgKGZyYWdOZXh0ICYmIGZyYWdtZW50V2l0aGluVG9sZXJhbmNlVGVzdChidWZmZXJFbmQsIG1heEZyYWdMb29rVXBUb2xlcmFuY2UsIGZyYWdOZXh0KSA9PT0gMCkge1xuICAgIHJldHVybiBmcmFnTmV4dDtcbiAgfSAvLyBXZSBtaWdodCBiZSBzZWVraW5nIHBhc3QgdGhlIHRvbGVyYW5jZSBzbyBmaW5kIHRoZSBiZXN0IG1hdGNoXG5cblxuICB2YXIgZm91bmRGcmFnbWVudCA9IGJpbmFyeV9zZWFyY2guc2VhcmNoKGZyYWdtZW50cywgZnJhZ21lbnRXaXRoaW5Ub2xlcmFuY2VUZXN0LmJpbmQobnVsbCwgYnVmZmVyRW5kLCBtYXhGcmFnTG9va1VwVG9sZXJhbmNlKSk7XG5cbiAgaWYgKGZvdW5kRnJhZ21lbnQpIHtcbiAgICByZXR1cm4gZm91bmRGcmFnbWVudDtcbiAgfSAvLyBJZiBubyBtYXRjaCB3YXMgZm91bmQgcmV0dXJuIHRoZSBuZXh0IGZyYWdtZW50IGFmdGVyIGZyYWdQcmV2aW91cywgb3IgbnVsbFxuXG5cbiAgcmV0dXJuIGZyYWdOZXh0O1xufVxuLyoqXG4gKiBUaGUgdGVzdCBmdW5jdGlvbiB1c2VkIGJ5IHRoZSBmaW5kRnJhZ21lbnRCeVNuJ3MgQmluYXJ5U2VhcmNoIHRvIGxvb2sgZm9yIHRoZSBiZXN0IG1hdGNoIHRvIHRoZSBjdXJyZW50IGJ1ZmZlciBjb25kaXRpb25zLlxuICogQHBhcmFtIHsqfSBjYW5kaWRhdGUgLSBUaGUgZnJhZ21lbnQgdG8gdGVzdFxuICogQHBhcmFtIHtudW1iZXJ9IFtidWZmZXJFbmQgPSAwXSAtIFRoZSBlbmQgb2YgdGhlIGN1cnJlbnQgYnVmZmVyZWQgcmFuZ2UgdGhlIHBsYXloZWFkIGlzIGN1cnJlbnRseSB3aXRoaW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbWF4RnJhZ0xvb2tVcFRvbGVyYW5jZSA9IDBdIC0gVGhlIGFtb3VudCBvZiB0aW1lIHRoYXQgYSBmcmFnbWVudCdzIHN0YXJ0IGNhbiBiZSB3aXRoaW4gaW4gb3JkZXIgdG8gYmUgY29uc2lkZXJlZCBjb250aWd1b3VzXG4gKiBAcmV0dXJucyB7bnVtYmVyfSAtIDAgaWYgaXQgbWF0Y2hlcywgMSBpZiB0b28gbG93LCAtMSBpZiB0b28gaGlnaFxuICovXG5cbmZ1bmN0aW9uIGZyYWdtZW50V2l0aGluVG9sZXJhbmNlVGVzdChidWZmZXJFbmQsIG1heEZyYWdMb29rVXBUb2xlcmFuY2UsIGNhbmRpZGF0ZSkge1xuICBpZiAoYnVmZmVyRW5kID09PSB2b2lkIDApIHtcbiAgICBidWZmZXJFbmQgPSAwO1xuICB9XG5cbiAgaWYgKG1heEZyYWdMb29rVXBUb2xlcmFuY2UgPT09IHZvaWQgMCkge1xuICAgIG1heEZyYWdMb29rVXBUb2xlcmFuY2UgPSAwO1xuICB9XG5cbiAgLy8gb2Zmc2V0IHNob3VsZCBiZSB3aXRoaW4gZnJhZ21lbnQgYm91bmRhcnkgLSBjb25maWcubWF4RnJhZ0xvb2tVcFRvbGVyYW5jZVxuICAvLyB0aGlzIGlzIHRvIGNvcGUgd2l0aCBzaXR1YXRpb25zIGxpa2VcbiAgLy8gYnVmZmVyRW5kID0gOS45OTFcbiAgLy8gZnJhZ1vDmF0gOiBbMCwxMF1cbiAgLy8gZnJhZ1sxXSA6IFsxMCwyMF1cbiAgLy8gYnVmZmVyRW5kIGlzIHdpdGhpbiBmcmFnWzBdIHJhbmdlIC4uLiBhbHRob3VnaCB3aGF0IHdlIGFyZSBleHBlY3RpbmcgaXMgdG8gcmV0dXJuIGZyYWdbMV0gaGVyZVxuICAvLyAgICAgICAgICAgICAgZnJhZyBzdGFydCAgICAgICAgICAgICAgIGZyYWcgc3RhcnQrZHVyYXRpb25cbiAgLy8gICAgICAgICAgICAgICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gIC8vICAgICAgICAgICAgICA8LS0tPiAgICAgICAgICAgICAgICAgICAgICAgICA8LS0tPlxuICAvLyAgLi4uLS0tLS0tLS0+PC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tPjwtLS0tLS0tLS0uLi4uXG4gIC8vIHByZXZpb3VzIGZyYWcgICAgICAgICBtYXRjaGluZyBmcmFnbWVudCAgICAgICAgIG5leHQgZnJhZ1xuICAvLyAgcmV0dXJuIC0xICAgICAgICAgICAgIHJldHVybiAwICAgICAgICAgICAgICAgICByZXR1cm4gMVxuICAvLyBsb2dnZXIubG9nKGBsZXZlbC9zbi9zdGFydC9lbmQvYnVmRW5kOiR7bGV2ZWx9LyR7Y2FuZGlkYXRlLnNufS8ke2NhbmRpZGF0ZS5zdGFydH0vJHsoY2FuZGlkYXRlLnN0YXJ0K2NhbmRpZGF0ZS5kdXJhdGlvbil9LyR7YnVmZmVyRW5kfWApO1xuICAvLyBTZXQgdGhlIGxvb2t1cCB0b2xlcmFuY2UgdG8gYmUgc21hbGwgZW5vdWdoIHRvIGRldGVjdCB0aGUgY3VycmVudCBzZWdtZW50IC0gZW5zdXJlcyB3ZSBkb24ndCBza2lwIG92ZXIgdmVyeSBzbWFsbCBzZWdtZW50c1xuICB2YXIgY2FuZGlkYXRlTG9va3VwVG9sZXJhbmNlID0gTWF0aC5taW4obWF4RnJhZ0xvb2tVcFRvbGVyYW5jZSwgY2FuZGlkYXRlLmR1cmF0aW9uICsgKGNhbmRpZGF0ZS5kZWx0YVBUUyA/IGNhbmRpZGF0ZS5kZWx0YVBUUyA6IDApKTtcblxuICBpZiAoY2FuZGlkYXRlLnN0YXJ0ICsgY2FuZGlkYXRlLmR1cmF0aW9uIC0gY2FuZGlkYXRlTG9va3VwVG9sZXJhbmNlIDw9IGJ1ZmZlckVuZCkge1xuICAgIHJldHVybiAxO1xuICB9IGVsc2UgaWYgKGNhbmRpZGF0ZS5zdGFydCAtIGNhbmRpZGF0ZUxvb2t1cFRvbGVyYW5jZSA+IGJ1ZmZlckVuZCAmJiBjYW5kaWRhdGUuc3RhcnQpIHtcbiAgICAvLyBpZiBtYXhGcmFnTG9va1VwVG9sZXJhbmNlIHdpbGwgaGF2ZSBuZWdhdGl2ZSB2YWx1ZSB0aGVuIGRvbid0IHJldHVybiAtMSBmb3IgZmlyc3QgZWxlbWVudFxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIHJldHVybiAwO1xufVxuLyoqXG4gKiBUaGUgdGVzdCBmdW5jdGlvbiB1c2VkIGJ5IHRoZSBmaW5kRnJhZ21lbnRCeVBkdCdzIEJpbmFyeVNlYXJjaCB0byBsb29rIGZvciB0aGUgYmVzdCBtYXRjaCB0byB0aGUgY3VycmVudCBidWZmZXIgY29uZGl0aW9ucy5cbiAqIFRoaXMgZnVuY3Rpb24gdGVzdHMgdGhlIGNhbmRpZGF0ZSdzIHByb2dyYW0gZGF0ZSB0aW1lIHZhbHVlcywgYXMgcmVwcmVzZW50ZWQgaW4gVW5peCB0aW1lXG4gKiBAcGFyYW0geyp9IGNhbmRpZGF0ZSAtIFRoZSBmcmFnbWVudCB0byB0ZXN0XG4gKiBAcGFyYW0ge251bWJlcn0gW3BkdEJ1ZmZlckVuZCA9IDBdIC0gVGhlIFVuaXggdGltZSByZXByZXNlbnRpbmcgdGhlIGVuZCBvZiB0aGUgY3VycmVudCBidWZmZXJlZCByYW5nZVxuICogQHBhcmFtIHtudW1iZXJ9IFttYXhGcmFnTG9va1VwVG9sZXJhbmNlID0gMF0gLSBUaGUgYW1vdW50IG9mIHRpbWUgdGhhdCBhIGZyYWdtZW50J3Mgc3RhcnQgY2FuIGJlIHdpdGhpbiBpbiBvcmRlciB0byBiZSBjb25zaWRlcmVkIGNvbnRpZ3VvdXNcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGNvbnRpZ3VvdXMsIGZhbHNlIG90aGVyd2lzZVxuICovXG5cbmZ1bmN0aW9uIHBkdFdpdGhpblRvbGVyYW5jZVRlc3QocGR0QnVmZmVyRW5kLCBtYXhGcmFnTG9va1VwVG9sZXJhbmNlLCBjYW5kaWRhdGUpIHtcbiAgdmFyIGNhbmRpZGF0ZUxvb2t1cFRvbGVyYW5jZSA9IE1hdGgubWluKG1heEZyYWdMb29rVXBUb2xlcmFuY2UsIGNhbmRpZGF0ZS5kdXJhdGlvbiArIChjYW5kaWRhdGUuZGVsdGFQVFMgPyBjYW5kaWRhdGUuZGVsdGFQVFMgOiAwKSkgKiAxMDAwOyAvLyBlbmRQcm9ncmFtRGF0ZVRpbWUgY2FuIGJlIG51bGwsIGRlZmF1bHQgdG8gemVyb1xuXG4gIHZhciBlbmRQcm9ncmFtRGF0ZVRpbWUgPSBjYW5kaWRhdGUuZW5kUHJvZ3JhbURhdGVUaW1lIHx8IDA7XG4gIHJldHVybiBlbmRQcm9ncmFtRGF0ZVRpbWUgLSBjYW5kaWRhdGVMb29rdXBUb2xlcmFuY2UgPiBwZHRCdWZmZXJFbmQ7XG59XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb250cm9sbGVyL2dhcC1jb250cm9sbGVyLmpzXG5cblxuXG5cbnZhciBTVEFMTF9NSU5JTVVNX0RVUkFUSU9OX01TID0gMjUwO1xudmFyIE1BWF9TVEFSVF9HQVBfSlVNUCA9IDIuMDtcbnZhciBTS0lQX0JVRkZFUl9IT0xFX1NURVBfU0VDT05EUyA9IDAuMTtcbnZhciBTS0lQX0JVRkZFUl9SQU5HRV9TVEFSVCA9IDAuMDU7XG5cbnZhciBnYXBfY29udHJvbGxlcl9HYXBDb250cm9sbGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gR2FwQ29udHJvbGxlcihjb25maWcsIG1lZGlhLCBmcmFnbWVudFRyYWNrZXIsIGhscykge1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIHRoaXMubWVkaWEgPSBtZWRpYTtcbiAgICB0aGlzLmZyYWdtZW50VHJhY2tlciA9IGZyYWdtZW50VHJhY2tlcjtcbiAgICB0aGlzLmhscyA9IGhscztcbiAgICB0aGlzLm51ZGdlUmV0cnkgPSAwO1xuICAgIHRoaXMuc3RhbGxSZXBvcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuc3RhbGxlZCA9IG51bGw7XG4gICAgdGhpcy5tb3ZlZCA9IGZhbHNlO1xuICAgIHRoaXMuc2Vla2luZyA9IGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIHBsYXloZWFkIGlzIHN0dWNrIHdpdGhpbiBhIGdhcCwgYW5kIGlmIHNvLCBhdHRlbXB0cyB0byBmcmVlIGl0LlxuICAgKiBBIGdhcCBpcyBhbiB1bmJ1ZmZlcmVkIHJhbmdlIGJldHdlZW4gdHdvIGJ1ZmZlcmVkIHJhbmdlcyAob3IgdGhlIHN0YXJ0IGFuZCB0aGUgZmlyc3QgYnVmZmVyZWQgcmFuZ2UpLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGFzdEN1cnJlbnRUaW1lIFByZXZpb3VzbHkgcmVhZCBwbGF5aGVhZCBwb3NpdGlvblxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBHYXBDb250cm9sbGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucG9sbCA9IGZ1bmN0aW9uIHBvbGwobGFzdEN1cnJlbnRUaW1lKSB7XG4gICAgdmFyIGNvbmZpZyA9IHRoaXMuY29uZmlnLFxuICAgICAgICBtZWRpYSA9IHRoaXMubWVkaWEsXG4gICAgICAgIHN0YWxsZWQgPSB0aGlzLnN0YWxsZWQ7XG4gICAgdmFyIGN1cnJlbnRUaW1lID0gbWVkaWEuY3VycmVudFRpbWUsXG4gICAgICAgIHNlZWtpbmcgPSBtZWRpYS5zZWVraW5nO1xuICAgIHZhciBzZWVrZWQgPSB0aGlzLnNlZWtpbmcgJiYgIXNlZWtpbmc7XG4gICAgdmFyIGJlZ2luU2VlayA9ICF0aGlzLnNlZWtpbmcgJiYgc2Vla2luZztcbiAgICB0aGlzLnNlZWtpbmcgPSBzZWVraW5nOyAvLyBUaGUgcGxheWhlYWQgaXMgbW92aW5nLCBuby1vcFxuXG4gICAgaWYgKGN1cnJlbnRUaW1lICE9PSBsYXN0Q3VycmVudFRpbWUpIHtcbiAgICAgIHRoaXMubW92ZWQgPSB0cnVlO1xuXG4gICAgICBpZiAoc3RhbGxlZCAhPT0gbnVsbCkge1xuICAgICAgICAvLyBUaGUgcGxheWhlYWQgaXMgbm93IG1vdmluZywgYnV0IHdhcyBwcmV2aW91c2x5IHN0YWxsZWRcbiAgICAgICAgaWYgKHRoaXMuc3RhbGxSZXBvcnRlZCkge1xuICAgICAgICAgIHZhciBfc3RhbGxlZER1cmF0aW9uID0gc2VsZi5wZXJmb3JtYW5jZS5ub3coKSAtIHN0YWxsZWQ7XG5cbiAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ud2FybihcInBsYXliYWNrIG5vdCBzdHVjayBhbnltb3JlIEBcIiArIGN1cnJlbnRUaW1lICsgXCIsIGFmdGVyIFwiICsgTWF0aC5yb3VuZChfc3RhbGxlZER1cmF0aW9uKSArIFwibXNcIik7XG4gICAgICAgICAgdGhpcy5zdGFsbFJlcG9ydGVkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnN0YWxsZWQgPSBudWxsO1xuICAgICAgICB0aGlzLm51ZGdlUmV0cnkgPSAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfSAvLyBDbGVhciBzdGFsbGVkIHN0YXRlIHdoZW4gYmVnaW5uaW5nIG9yIGZpbmlzaGluZyBzZWVraW5nIHNvIHRoYXQgd2UgZG9uJ3QgcmVwb3J0IHN0YWxscyBjb21pbmcgb3V0IG9mIGEgc2Vla1xuXG5cbiAgICBpZiAoYmVnaW5TZWVrIHx8IHNlZWtlZCkge1xuICAgICAgdGhpcy5zdGFsbGVkID0gbnVsbDtcbiAgICB9IC8vIFRoZSBwbGF5aGVhZCBzaG91bGQgbm90IGJlIG1vdmluZ1xuXG5cbiAgICBpZiAobWVkaWEucGF1c2VkIHx8IG1lZGlhLmVuZGVkIHx8IG1lZGlhLnBsYXliYWNrUmF0ZSA9PT0gMCB8fCAhbWVkaWEuYnVmZmVyZWQubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGJ1ZmZlckluZm8gPSBCdWZmZXJIZWxwZXIuYnVmZmVySW5mbyhtZWRpYSwgY3VycmVudFRpbWUsIDApO1xuICAgIHZhciBpc0J1ZmZlcmVkID0gYnVmZmVySW5mby5sZW4gPiAwO1xuICAgIHZhciBuZXh0U3RhcnQgPSBidWZmZXJJbmZvLm5leHRTdGFydCB8fCAwOyAvLyBUaGVyZSBpcyBubyBwbGF5YWJsZSBidWZmZXIgKHdhaXRpbmcgZm9yIGJ1ZmZlciBhcHBlbmQpXG5cbiAgICBpZiAoIWlzQnVmZmVyZWQgJiYgIW5leHRTdGFydCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzZWVraW5nKSB7XG4gICAgICAvLyBXYWl0aW5nIGZvciBzZWVraW5nIGluIGEgYnVmZmVyZWQgcmFuZ2UgdG8gY29tcGxldGVcbiAgICAgIHZhciBoYXNFbm91Z2hCdWZmZXIgPSBidWZmZXJJbmZvLmxlbiA+IE1BWF9TVEFSVF9HQVBfSlVNUDsgLy8gTmV4dCBidWZmZXJlZCByYW5nZSBpcyB0b28gZmFyIGFoZWFkIHRvIGp1bXAgdG8gd2hpbGUgc3RpbGwgc2Vla2luZ1xuXG4gICAgICB2YXIgbm9CdWZmZXJHYXAgPSAhbmV4dFN0YXJ0IHx8IG5leHRTdGFydCAtIGN1cnJlbnRUaW1lID4gTUFYX1NUQVJUX0dBUF9KVU1QICYmICF0aGlzLmZyYWdtZW50VHJhY2tlci5nZXRQYXJ0aWFsRnJhZ21lbnQoY3VycmVudFRpbWUpO1xuXG4gICAgICBpZiAoaGFzRW5vdWdoQnVmZmVyIHx8IG5vQnVmZmVyR2FwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gUmVzZXQgbW92ZWQgc3RhdGUgd2hlbiBzZWVraW5nIHRvIGEgcG9pbnQgaW4gb3IgYmVmb3JlIGEgZ2FwXG5cblxuICAgICAgdGhpcy5tb3ZlZCA9IGZhbHNlO1xuICAgIH0gLy8gU2tpcCBzdGFydCBnYXBzIGlmIHdlIGhhdmVuJ3QgcGxheWVkLCBidXQgdGhlIGxhc3QgcG9sbCBkZXRlY3RlZCB0aGUgc3RhcnQgb2YgYSBzdGFsbFxuICAgIC8vIFRoZSBhZGRpdGlvbiBwb2xsIGdpdmVzIHRoZSBicm93c2VyIGEgY2hhbmNlIHRvIGp1bXAgdGhlIGdhcCBmb3IgdXNcblxuXG4gICAgaWYgKCF0aGlzLm1vdmVkICYmIHRoaXMuc3RhbGxlZCkge1xuICAgICAgLy8gSnVtcCBzdGFydCBnYXBzIHdpdGhpbiBqdW1wIHRocmVzaG9sZFxuICAgICAgdmFyIHN0YXJ0SnVtcCA9IE1hdGgubWF4KG5leHRTdGFydCwgYnVmZmVySW5mby5zdGFydCB8fCAwKSAtIGN1cnJlbnRUaW1lO1xuXG4gICAgICBpZiAoc3RhcnRKdW1wID4gMCAmJiBzdGFydEp1bXAgPD0gTUFYX1NUQVJUX0dBUF9KVU1QKSB7XG4gICAgICAgIHRoaXMuX3RyeVNraXBCdWZmZXJIb2xlKG51bGwpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IC8vIFN0YXJ0IHRyYWNraW5nIHN0YWxsIHRpbWVcblxuXG4gICAgdmFyIHRub3cgPSBzZWxmLnBlcmZvcm1hbmNlLm5vdygpO1xuXG4gICAgaWYgKHN0YWxsZWQgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuc3RhbGxlZCA9IHRub3c7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHN0YWxsZWREdXJhdGlvbiA9IHRub3cgLSBzdGFsbGVkO1xuXG4gICAgaWYgKCFzZWVraW5nICYmIHN0YWxsZWREdXJhdGlvbiA+PSBTVEFMTF9NSU5JTVVNX0RVUkFUSU9OX01TKSB7XG4gICAgICAvLyBSZXBvcnQgc3RhbGxpbmcgYWZ0ZXIgdHJ5aW5nIHRvIGZpeFxuICAgICAgdGhpcy5fcmVwb3J0U3RhbGwoYnVmZmVySW5mby5sZW4pO1xuICAgIH1cblxuICAgIHZhciBidWZmZXJlZFdpdGhIb2xlcyA9IEJ1ZmZlckhlbHBlci5idWZmZXJJbmZvKG1lZGlhLCBjdXJyZW50VGltZSwgY29uZmlnLm1heEJ1ZmZlckhvbGUpO1xuXG4gICAgdGhpcy5fdHJ5Rml4QnVmZmVyU3RhbGwoYnVmZmVyZWRXaXRoSG9sZXMsIHN0YWxsZWREdXJhdGlvbik7XG4gIH1cbiAgLyoqXG4gICAqIERldGVjdHMgYW5kIGF0dGVtcHRzIHRvIGZpeCBrbm93biBidWZmZXIgc3RhbGxpbmcgaXNzdWVzLlxuICAgKiBAcGFyYW0gYnVmZmVySW5mbyAtIFRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBjdXJyZW50IGJ1ZmZlci5cbiAgICogQHBhcmFtIHN0YWxsZWREdXJhdGlvbk1zIC0gVGhlIGFtb3VudCBvZiB0aW1lIEhscy5qcyBoYXMgYmVlbiBzdGFsbGluZyBmb3IuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLl90cnlGaXhCdWZmZXJTdGFsbCA9IGZ1bmN0aW9uIF90cnlGaXhCdWZmZXJTdGFsbChidWZmZXJJbmZvLCBzdGFsbGVkRHVyYXRpb25Ncykge1xuICAgIHZhciBjb25maWcgPSB0aGlzLmNvbmZpZyxcbiAgICAgICAgZnJhZ21lbnRUcmFja2VyID0gdGhpcy5mcmFnbWVudFRyYWNrZXIsXG4gICAgICAgIG1lZGlhID0gdGhpcy5tZWRpYTtcbiAgICB2YXIgY3VycmVudFRpbWUgPSBtZWRpYS5jdXJyZW50VGltZTtcbiAgICB2YXIgcGFydGlhbCA9IGZyYWdtZW50VHJhY2tlci5nZXRQYXJ0aWFsRnJhZ21lbnQoY3VycmVudFRpbWUpO1xuXG4gICAgaWYgKHBhcnRpYWwpIHtcbiAgICAgIC8vIFRyeSB0byBza2lwIG92ZXIgdGhlIGJ1ZmZlciBob2xlIGNhdXNlZCBieSBhIHBhcnRpYWwgZnJhZ21lbnRcbiAgICAgIC8vIFRoaXMgbWV0aG9kIGlzbid0IGxpbWl0ZWQgYnkgdGhlIHNpemUgb2YgdGhlIGdhcCBiZXR3ZWVuIGJ1ZmZlcmVkIHJhbmdlc1xuICAgICAgdmFyIHRhcmdldFRpbWUgPSB0aGlzLl90cnlTa2lwQnVmZmVySG9sZShwYXJ0aWFsKTsgLy8gd2UgcmV0dXJuIGhlcmUgaW4gdGhpcyBjYXNlLCBtZWFuaW5nXG4gICAgICAvLyB0aGUgYnJhbmNoIGJlbG93IG9ubHkgZXhlY3V0ZXMgd2hlbiB3ZSBkb24ndCBoYW5kbGUgYSBwYXJ0aWFsIGZyYWdtZW50XG5cblxuICAgICAgaWYgKHRhcmdldFRpbWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gLy8gaWYgd2UgaGF2ZW4ndCBoYWQgdG8gc2tpcCBvdmVyIGEgYnVmZmVyIGhvbGUgb2YgYSBwYXJ0aWFsIGZyYWdtZW50XG4gICAgLy8gd2UgbWF5IGp1c3QgaGF2ZSB0byBcIm51ZGdlXCIgdGhlIHBsYXlsaXN0IGFzIHRoZSBicm93c2VyIGRlY29kaW5nL3JlbmRlcmluZyBlbmdpbmVcbiAgICAvLyBuZWVkcyB0byBjcm9zcyBzb21lIHNvcnQgb2YgdGhyZXNob2xkIGNvdmVyaW5nIGFsbCBzb3VyY2UtYnVmZmVycyBjb250ZW50XG4gICAgLy8gdG8gc3RhcnQgcGxheWluZyBwcm9wZXJseS5cblxuXG4gICAgaWYgKGJ1ZmZlckluZm8ubGVuID4gY29uZmlnLm1heEJ1ZmZlckhvbGUgJiYgc3RhbGxlZER1cmF0aW9uTXMgPiBjb25maWcuaGlnaEJ1ZmZlcldhdGNoZG9nUGVyaW9kICogMTAwMCkge1xuICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLndhcm4oJ1RyeWluZyB0byBudWRnZSBwbGF5aGVhZCBvdmVyIGJ1ZmZlci1ob2xlJyk7IC8vIFRyeSB0byBudWRnZSBjdXJyZW50VGltZSBvdmVyIGEgYnVmZmVyIGhvbGUgaWYgd2UndmUgYmVlbiBzdGFsbGluZyBmb3IgdGhlIGNvbmZpZ3VyZWQgYW1vdW50IG9mIHNlY29uZHNcbiAgICAgIC8vIFdlIG9ubHkgdHJ5IHRvIGp1bXAgdGhlIGhvbGUgaWYgaXQncyB1bmRlciB0aGUgY29uZmlndXJlZCBzaXplXG4gICAgICAvLyBSZXNldCBzdGFsbGVkIHNvIHRvIHJlYXJtIHdhdGNoZG9nIHRpbWVyXG5cbiAgICAgIHRoaXMuc3RhbGxlZCA9IG51bGw7XG5cbiAgICAgIHRoaXMuX3RyeU51ZGdlQnVmZmVyKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBUcmlnZ2VycyBhIEJVRkZFUl9TVEFMTEVEX0VSUk9SIGV2ZW50LCBidXQgb25seSBvbmNlIHBlciBzdGFsbCBwZXJpb2QuXG4gICAqIEBwYXJhbSBidWZmZXJMZW4gLSBUaGUgcGxheWhlYWQgZGlzdGFuY2UgZnJvbSB0aGUgZW5kIG9mIHRoZSBjdXJyZW50IGJ1ZmZlciBzZWdtZW50LlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5fcmVwb3J0U3RhbGwgPSBmdW5jdGlvbiBfcmVwb3J0U3RhbGwoYnVmZmVyTGVuKSB7XG4gICAgdmFyIGhscyA9IHRoaXMuaGxzLFxuICAgICAgICBtZWRpYSA9IHRoaXMubWVkaWEsXG4gICAgICAgIHN0YWxsUmVwb3J0ZWQgPSB0aGlzLnN0YWxsUmVwb3J0ZWQ7XG5cbiAgICBpZiAoIXN0YWxsUmVwb3J0ZWQpIHtcbiAgICAgIC8vIFJlcG9ydCBzdGFsbGVkIGVycm9yIG9uY2VcbiAgICAgIHRoaXMuc3RhbGxSZXBvcnRlZCA9IHRydWU7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ud2FybihcIlBsYXliYWNrIHN0YWxsaW5nIGF0IEBcIiArIG1lZGlhLmN1cnJlbnRUaW1lICsgXCIgZHVlIHRvIGxvdyBidWZmZXIgKGJ1ZmZlcj1cIiArIGJ1ZmZlckxlbiArIFwiKVwiKTtcbiAgICAgIGhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uRVJST1IsIHtcbiAgICAgICAgdHlwZTogZXJyb3JzW1wiRXJyb3JUeXBlc1wiXS5NRURJQV9FUlJPUixcbiAgICAgICAgZGV0YWlsczogZXJyb3JzW1wiRXJyb3JEZXRhaWxzXCJdLkJVRkZFUl9TVEFMTEVEX0VSUk9SLFxuICAgICAgICBmYXRhbDogZmFsc2UsXG4gICAgICAgIGJ1ZmZlcjogYnVmZmVyTGVuXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEF0dGVtcHRzIHRvIGZpeCBidWZmZXIgc3RhbGxzIGJ5IGp1bXBpbmcgb3ZlciBrbm93biBnYXBzIGNhdXNlZCBieSBwYXJ0aWFsIGZyYWdtZW50c1xuICAgKiBAcGFyYW0gcGFydGlhbCAtIFRoZSBwYXJ0aWFsIGZyYWdtZW50IGZvdW5kIGF0IHRoZSBjdXJyZW50IHRpbWUgKHdoZXJlIHBsYXliYWNrIGlzIHN0YWxsaW5nKS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uX3RyeVNraXBCdWZmZXJIb2xlID0gZnVuY3Rpb24gX3RyeVNraXBCdWZmZXJIb2xlKHBhcnRpYWwpIHtcbiAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWcsXG4gICAgICAgIGhscyA9IHRoaXMuaGxzLFxuICAgICAgICBtZWRpYSA9IHRoaXMubWVkaWE7XG4gICAgdmFyIGN1cnJlbnRUaW1lID0gbWVkaWEuY3VycmVudFRpbWU7XG4gICAgdmFyIGxhc3RFbmRUaW1lID0gMDsgLy8gQ2hlY2sgaWYgY3VycmVudFRpbWUgaXMgYmV0d2VlbiB1bmJ1ZmZlcmVkIHJlZ2lvbnMgb2YgcGFydGlhbCBmcmFnbWVudHNcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWVkaWEuYnVmZmVyZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzdGFydFRpbWUgPSBtZWRpYS5idWZmZXJlZC5zdGFydChpKTtcblxuICAgICAgaWYgKGN1cnJlbnRUaW1lICsgY29uZmlnLm1heEJ1ZmZlckhvbGUgPj0gbGFzdEVuZFRpbWUgJiYgY3VycmVudFRpbWUgPCBzdGFydFRpbWUpIHtcbiAgICAgICAgdmFyIHRhcmdldFRpbWUgPSBNYXRoLm1heChzdGFydFRpbWUgKyBTS0lQX0JVRkZFUl9SQU5HRV9TVEFSVCwgbWVkaWEuY3VycmVudFRpbWUgKyBTS0lQX0JVRkZFUl9IT0xFX1NURVBfU0VDT05EUyk7XG4gICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuKFwic2tpcHBpbmcgaG9sZSwgYWRqdXN0aW5nIGN1cnJlbnRUaW1lIGZyb20gXCIgKyBjdXJyZW50VGltZSArIFwiIHRvIFwiICsgdGFyZ2V0VGltZSk7XG4gICAgICAgIHRoaXMubW92ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnN0YWxsZWQgPSBudWxsO1xuICAgICAgICBtZWRpYS5jdXJyZW50VGltZSA9IHRhcmdldFRpbWU7XG5cbiAgICAgICAgaWYgKHBhcnRpYWwpIHtcbiAgICAgICAgICBobHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkVSUk9SLCB7XG4gICAgICAgICAgICB0eXBlOiBlcnJvcnNbXCJFcnJvclR5cGVzXCJdLk1FRElBX0VSUk9SLFxuICAgICAgICAgICAgZGV0YWlsczogZXJyb3JzW1wiRXJyb3JEZXRhaWxzXCJdLkJVRkZFUl9TRUVLX09WRVJfSE9MRSxcbiAgICAgICAgICAgIGZhdGFsOiBmYWxzZSxcbiAgICAgICAgICAgIHJlYXNvbjogXCJmcmFnbWVudCBsb2FkZWQgd2l0aCBidWZmZXIgaG9sZXMsIHNlZWtpbmcgZnJvbSBcIiArIGN1cnJlbnRUaW1lICsgXCIgdG8gXCIgKyB0YXJnZXRUaW1lLFxuICAgICAgICAgICAgZnJhZzogcGFydGlhbFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldFRpbWU7XG4gICAgICB9XG5cbiAgICAgIGxhc3RFbmRUaW1lID0gbWVkaWEuYnVmZmVyZWQuZW5kKGkpO1xuICAgIH1cblxuICAgIHJldHVybiAwO1xuICB9XG4gIC8qKlxuICAgKiBBdHRlbXB0cyB0byBmaXggYnVmZmVyIHN0YWxscyBieSBhZHZhbmNpbmcgdGhlIG1lZGlhRWxlbWVudCdzIGN1cnJlbnQgdGltZSBieSBhIHNtYWxsIGFtb3VudC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uX3RyeU51ZGdlQnVmZmVyID0gZnVuY3Rpb24gX3RyeU51ZGdlQnVmZmVyKCkge1xuICAgIHZhciBjb25maWcgPSB0aGlzLmNvbmZpZyxcbiAgICAgICAgaGxzID0gdGhpcy5obHMsXG4gICAgICAgIG1lZGlhID0gdGhpcy5tZWRpYTtcbiAgICB2YXIgY3VycmVudFRpbWUgPSBtZWRpYS5jdXJyZW50VGltZTtcbiAgICB2YXIgbnVkZ2VSZXRyeSA9ICh0aGlzLm51ZGdlUmV0cnkgfHwgMCkgKyAxO1xuICAgIHRoaXMubnVkZ2VSZXRyeSA9IG51ZGdlUmV0cnk7XG5cbiAgICBpZiAobnVkZ2VSZXRyeSA8IGNvbmZpZy5udWRnZU1heFJldHJ5KSB7XG4gICAgICB2YXIgdGFyZ2V0VGltZSA9IGN1cnJlbnRUaW1lICsgbnVkZ2VSZXRyeSAqIGNvbmZpZy5udWRnZU9mZnNldDsgLy8gcGxheWJhY2sgc3RhbGxlZCBpbiBidWZmZXJlZCBhcmVhIC4uLiBsZXQncyBudWRnZSBjdXJyZW50VGltZSB0byB0cnkgdG8gb3ZlcmNvbWUgdGhpc1xuXG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ud2FybihcIk51ZGdpbmcgJ2N1cnJlbnRUaW1lJyBmcm9tIFwiICsgY3VycmVudFRpbWUgKyBcIiB0byBcIiArIHRhcmdldFRpbWUpO1xuICAgICAgbWVkaWEuY3VycmVudFRpbWUgPSB0YXJnZXRUaW1lO1xuICAgICAgaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5FUlJPUiwge1xuICAgICAgICB0eXBlOiBlcnJvcnNbXCJFcnJvclR5cGVzXCJdLk1FRElBX0VSUk9SLFxuICAgICAgICBkZXRhaWxzOiBlcnJvcnNbXCJFcnJvckRldGFpbHNcIl0uQlVGRkVSX05VREdFX09OX1NUQUxMLFxuICAgICAgICBmYXRhbDogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0uZXJyb3IoXCJQbGF5aGVhZCBzdGlsbCBub3QgbW92aW5nIHdoaWxlIGVub3VnaCBkYXRhIGJ1ZmZlcmVkIEBcIiArIGN1cnJlbnRUaW1lICsgXCIgYWZ0ZXIgXCIgKyBjb25maWcubnVkZ2VNYXhSZXRyeSArIFwiIG51ZGdlc1wiKTtcbiAgICAgIGhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uRVJST1IsIHtcbiAgICAgICAgdHlwZTogZXJyb3JzW1wiRXJyb3JUeXBlc1wiXS5NRURJQV9FUlJPUixcbiAgICAgICAgZGV0YWlsczogZXJyb3JzW1wiRXJyb3JEZXRhaWxzXCJdLkJVRkZFUl9TVEFMTEVEX0VSUk9SLFxuICAgICAgICBmYXRhbDogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBHYXBDb250cm9sbGVyO1xufSgpO1xuXG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3Rhc2stbG9vcC50c1xuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIHRhc2tfbG9vcF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5cblxuLyoqXG4gKiBTdWItY2xhc3Mgc3BlY2lhbGl6YXRpb24gb2YgRXZlbnRIYW5kbGVyIGJhc2UgY2xhc3MuXG4gKlxuICogVGFza0xvb3AgYWxsb3dzIHRvIHNjaGVkdWxlIGEgdGFzayBmdW5jdGlvbiBiZWluZyBjYWxsZWQgKG9wdGlvbm5hbHkgcmVwZWF0ZWRseSkgb24gdGhlIG1haW4gbG9vcCxcbiAqIHNjaGVkdWxlZCBhc3luY2hyb25lb3VzbHksIGF2b2lkaW5nIHJlY3Vyc2l2ZSBjYWxscyBpbiB0aGUgc2FtZSB0aWNrLlxuICpcbiAqIFRoZSB0YXNrIGl0c2VsZiBpcyBpbXBsZW1lbnRlZCBpbiBgZG9UaWNrYC4gSXQgY2FuIGJlIHJlcXVlc3RlZCBhbmQgY2FsbGVkIGZvciBzaW5nbGUgZXhlY3V0aW9uXG4gKiB1c2luZyB0aGUgYHRpY2tgIG1ldGhvZC5cbiAqXG4gKiBJdCB3aWxsIGJlIGFzc3VyZWQgdGhhdCB0aGUgdGFzayBleGVjdXRpb24gbWV0aG9kIChgdGlja2ApIG9ubHkgZ2V0cyBjYWxsZWQgb25jZSBwZXIgbWFpbiBsb29wIFwidGlja1wiLFxuICogbm8gbWF0dGVyIGhvdyBvZnRlbiBpdCBnZXRzIHJlcXVlc3RlZCBmb3IgZXhlY3V0aW9uLiBFeGVjdXRpb24gaW4gZnVydGhlciB0aWNrcyB3aWxsIGJlIHNjaGVkdWxlZCBhY2NvcmRpbmdseS5cbiAqXG4gKiBJZiBmdXJ0aGVyIGV4ZWN1dGlvbiByZXF1ZXN0cyBoYXZlIGFscmVhZHkgYmVlbiBzY2hlZHVsZWQgb24gdGhlIG5leHQgdGljaywgaXQgY2FuIGJlIGNoZWNrZWQgd2l0aCBgaGFzTmV4dFRpY2tgLFxuICogYW5kIGNhbmNlbGxlZCB3aXRoIGBjbGVhck5leHRUaWNrYC5cbiAqXG4gKiBUaGUgdGFzayBjYW4gYmUgc2NoZWR1bGVkIGFzIGFuIGludGVydmFsIHJlcGVhdGVkbHkgd2l0aCBhIHBlcmlvZCBhcyBwYXJhbWV0ZXIgKHNlZSBgc2V0SW50ZXJ2YWxgLCBgY2xlYXJJbnRlcnZhbGApLlxuICpcbiAqIFN1Yi1jbGFzc2VzIG5lZWQgdG8gaW1wbGVtZW50IHRoZSBgZG9UaWNrYCBtZXRob2Qgd2hpY2ggd2lsbCBlZmZlY3RpdmVseSBoYXZlIHRoZSB0YXNrIGV4ZWN1dGlvbiByb3V0aW5lLlxuICpcbiAqIEZ1cnRoZXIgZXhwbGFuYXRpb25zOlxuICpcbiAqIFRoZSBiYXNlY2xhc3MgaGFzIGEgYHRpY2tgIG1ldGhvZCB0aGF0IHdpbGwgc2NoZWR1bGUgdGhlIGRvVGljayBjYWxsLiBJdCBtYXkgYmUgY2FsbGVkIHN5bmNocm9uZW91c2x5XG4gKiBvbmx5IGZvciBhIHN0YWNrLWRlcHRoIG9mIG9uZS4gT24gcmUtZW50cmFudCBjYWxscywgc3ViLXNlcXVlbnQgY2FsbHMgYXJlIHNjaGVkdWxlZCBmb3IgbmV4dCBtYWluIGxvb3AgdGlja3MuXG4gKlxuICogV2hlbiB0aGUgdGFzayBleGVjdXRpb24gKGB0aWNrYCBtZXRob2QpIGlzIGNhbGxlZCBpbiByZS1lbnRyYW50IHdheSB0aGlzIGlzIGRldGVjdGVkIGFuZFxuICogd2UgYXJlIGxpbWl0aW5nIHRoZSB0YXNrIGV4ZWN1dGlvbiBwZXIgY2FsbCBzdGFjayB0byBleGFjdGx5IG9uZSwgYnV0IHNjaGVkdWxpbmcvcG9zdC1wb25pbmcgZnVydGhlclxuICogdGFzayBwcm9jZXNzaW5nIG9uIHRoZSBuZXh0IG1haW4gbG9vcCBpdGVyYXRpb24gKGFsc28ga25vd24gYXMgXCJuZXh0IHRpY2tcIiBpbiB0aGUgTm9kZS9KUyBydW50aW1lIGxpbmdvKS5cbiAqL1xudmFyIFRhc2tMb29wID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfRXZlbnRIYW5kbGVyKSB7XG4gIHRhc2tfbG9vcF9pbmhlcml0c0xvb3NlKFRhc2tMb29wLCBfRXZlbnRIYW5kbGVyKTtcblxuICBmdW5jdGlvbiBUYXNrTG9vcChobHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZXZlbnRzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGV2ZW50c1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfRXZlbnRIYW5kbGVyLmNhbGwuYXBwbHkoX0V2ZW50SGFuZGxlciwgW3RoaXMsIGhsc10uY29uY2F0KGV2ZW50cykpIHx8IHRoaXM7XG4gICAgX3RoaXMuX2JvdW5kVGljayA9IHZvaWQgMDtcbiAgICBfdGhpcy5fdGlja1RpbWVyID0gbnVsbDtcbiAgICBfdGhpcy5fdGlja0ludGVydmFsID0gbnVsbDtcbiAgICBfdGhpcy5fdGlja0NhbGxDb3VudCA9IDA7XG4gICAgX3RoaXMuX2JvdW5kVGljayA9IF90aGlzLnRpY2suYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gVGFza0xvb3AucHJvdG90eXBlO1xuXG4gIF9wcm90by5vbkhhbmRsZXJEZXN0cm95aW5nID0gZnVuY3Rpb24gb25IYW5kbGVyRGVzdHJveWluZygpIHtcbiAgICAvLyBjbGVhciBhbGwgdGltZXJzIGJlZm9yZSB1bnJlZ2lzdGVyaW5nIGZyb20gZXZlbnQgYnVzXG4gICAgdGhpcy5jbGVhck5leHRUaWNrKCk7XG4gICAgdGhpcy5jbGVhckludGVydmFsKCk7XG4gIH1cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYXNJbnRlcnZhbCA9IGZ1bmN0aW9uIGhhc0ludGVydmFsKCkge1xuICAgIHJldHVybiAhIXRoaXMuX3RpY2tJbnRlcnZhbDtcbiAgfVxuICAvKipcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhc05leHRUaWNrID0gZnVuY3Rpb24gaGFzTmV4dFRpY2soKSB7XG4gICAgcmV0dXJuICEhdGhpcy5fdGlja1RpbWVyO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbWlsbGlzIEludGVydmFsIHRpbWUgKG1zKVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSB3aGVuIGludGVydmFsIGhhcyBiZWVuIHNjaGVkdWxlZCwgZmFsc2Ugd2hlbiBhbHJlYWR5IHNjaGVkdWxlZCAobm8gZWZmZWN0KVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uIHNldEludGVydmFsKG1pbGxpcykge1xuICAgIGlmICghdGhpcy5fdGlja0ludGVydmFsKSB7XG4gICAgICB0aGlzLl90aWNrSW50ZXJ2YWwgPSBzZWxmLnNldEludGVydmFsKHRoaXMuX2JvdW5kVGljaywgbWlsbGlzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgd2hlbiBpbnRlcnZhbCB3YXMgY2xlYXJlZCwgZmFsc2Ugd2hlbiBub25lIHdhcyBzZXQgKG5vIGVmZmVjdClcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uIGNsZWFySW50ZXJ2YWwoKSB7XG4gICAgaWYgKHRoaXMuX3RpY2tJbnRlcnZhbCkge1xuICAgICAgc2VsZi5jbGVhckludGVydmFsKHRoaXMuX3RpY2tJbnRlcnZhbCk7XG4gICAgICB0aGlzLl90aWNrSW50ZXJ2YWwgPSBudWxsO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSB3aGVuIHRpbWVvdXQgd2FzIGNsZWFyZWQsIGZhbHNlIHdoZW4gbm9uZSB3YXMgc2V0IChubyBlZmZlY3QpXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNsZWFyTmV4dFRpY2sgPSBmdW5jdGlvbiBjbGVhck5leHRUaWNrKCkge1xuICAgIGlmICh0aGlzLl90aWNrVGltZXIpIHtcbiAgICAgIHNlbGYuY2xlYXJUaW1lb3V0KHRoaXMuX3RpY2tUaW1lcik7XG4gICAgICB0aGlzLl90aWNrVGltZXIgPSBudWxsO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBXaWxsIGNhbGwgdGhlIHN1YmNsYXNzIGRvVGljayBpbXBsZW1lbnRhdGlvbiBpbiB0aGlzIG1haW4gbG9vcCB0aWNrXG4gICAqIG9yIGluIHRoZSBuZXh0IG9uZSAodmlhIHNldFRpbWVvdXQoLDApKSBpbiBjYXNlIGl0IGhhcyBhbHJlYWR5IGJlZW4gY2FsbGVkXG4gICAqIGluIHRoaXMgdGljayAoaW4gY2FzZSB0aGlzIGlzIGEgcmUtZW50cmFudCBjYWxsKS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udGljayA9IGZ1bmN0aW9uIHRpY2soKSB7XG4gICAgdGhpcy5fdGlja0NhbGxDb3VudCsrO1xuXG4gICAgaWYgKHRoaXMuX3RpY2tDYWxsQ291bnQgPT09IDEpIHtcbiAgICAgIHRoaXMuZG9UaWNrKCk7IC8vIHJlLWVudHJhbnQgY2FsbCB0byB0aWNrIGZyb20gcHJldmlvdXMgZG9UaWNrIGNhbGwgc3RhY2tcbiAgICAgIC8vIC0+IHNjaGVkdWxlIGEgY2FsbCBvbiB0aGUgbmV4dCBtYWluIGxvb3AgaXRlcmF0aW9uIHRvIHByb2Nlc3MgdGhpcyB0YXNrIHByb2Nlc3NpbmcgcmVxdWVzdFxuXG4gICAgICBpZiAodGhpcy5fdGlja0NhbGxDb3VudCA+IDEpIHtcbiAgICAgICAgLy8gbWFrZSBzdXJlIG9ubHkgb25lIHRpbWVyIGV4aXN0cyBhdCBhbnkgdGltZSBhdCBtYXhcbiAgICAgICAgdGhpcy5jbGVhck5leHRUaWNrKCk7XG4gICAgICAgIHRoaXMuX3RpY2tUaW1lciA9IHNlbGYuc2V0VGltZW91dCh0aGlzLl9ib3VuZFRpY2ssIDApO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl90aWNrQ2FsbENvdW50ID0gMDtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEZvciBzdWJjbGFzcyB0byBpbXBsZW1lbnQgdGFzayBsb2dpY1xuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZG9UaWNrID0gZnVuY3Rpb24gZG9UaWNrKCkge307XG5cbiAgcmV0dXJuIFRhc2tMb29wO1xufShldmVudF9oYW5kbGVyKTtcblxuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb250cm9sbGVyL2Jhc2Utc3RyZWFtLWNvbnRyb2xsZXIuanNcblxuXG5mdW5jdGlvbiBiYXNlX3N0cmVhbV9jb250cm9sbGVyX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cblxuXG5cblxudmFyIFN0YXRlID0ge1xuICBTVE9QUEVEOiAnU1RPUFBFRCcsXG4gIFNUQVJUSU5HOiAnU1RBUlRJTkcnLFxuICBJRExFOiAnSURMRScsXG4gIFBBVVNFRDogJ1BBVVNFRCcsXG4gIEtFWV9MT0FESU5HOiAnS0VZX0xPQURJTkcnLFxuICBGUkFHX0xPQURJTkc6ICdGUkFHX0xPQURJTkcnLFxuICBGUkFHX0xPQURJTkdfV0FJVElOR19SRVRSWTogJ0ZSQUdfTE9BRElOR19XQUlUSU5HX1JFVFJZJyxcbiAgV0FJVElOR19UUkFDSzogJ1dBSVRJTkdfVFJBQ0snLFxuICBQQVJTSU5HOiAnUEFSU0lORycsXG4gIFBBUlNFRDogJ1BBUlNFRCcsXG4gIEJVRkZFUl9GTFVTSElORzogJ0JVRkZFUl9GTFVTSElORycsXG4gIEVOREVEOiAnRU5ERUQnLFxuICBFUlJPUjogJ0VSUk9SJyxcbiAgV0FJVElOR19JTklUX1BUUzogJ1dBSVRJTkdfSU5JVF9QVFMnLFxuICBXQUlUSU5HX0xFVkVMOiAnV0FJVElOR19MRVZFTCdcbn07XG5cbnZhciBiYXNlX3N0cmVhbV9jb250cm9sbGVyX0Jhc2VTdHJlYW1Db250cm9sbGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfVGFza0xvb3ApIHtcbiAgYmFzZV9zdHJlYW1fY29udHJvbGxlcl9pbmhlcml0c0xvb3NlKEJhc2VTdHJlYW1Db250cm9sbGVyLCBfVGFza0xvb3ApO1xuXG4gIGZ1bmN0aW9uIEJhc2VTdHJlYW1Db250cm9sbGVyKCkge1xuICAgIHJldHVybiBfVGFza0xvb3AuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEJhc2VTdHJlYW1Db250cm9sbGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZG9UaWNrID0gZnVuY3Rpb24gZG9UaWNrKCkge307XG5cbiAgX3Byb3RvLnN0YXJ0TG9hZCA9IGZ1bmN0aW9uIHN0YXJ0TG9hZCgpIHt9O1xuXG4gIF9wcm90by5zdG9wTG9hZCA9IGZ1bmN0aW9uIHN0b3BMb2FkKCkge1xuICAgIHZhciBmcmFnID0gdGhpcy5mcmFnQ3VycmVudDtcblxuICAgIGlmIChmcmFnKSB7XG4gICAgICBpZiAoZnJhZy5sb2FkZXIpIHtcbiAgICAgICAgZnJhZy5sb2FkZXIuYWJvcnQoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5mcmFnbWVudFRyYWNrZXIucmVtb3ZlRnJhZ21lbnQoZnJhZyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZGVtdXhlcikge1xuICAgICAgdGhpcy5kZW11eGVyLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMuZGVtdXhlciA9IG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy5mcmFnQ3VycmVudCA9IG51bGw7XG4gICAgdGhpcy5mcmFnUHJldmlvdXMgPSBudWxsO1xuICAgIHRoaXMuY2xlYXJJbnRlcnZhbCgpO1xuICAgIHRoaXMuY2xlYXJOZXh0VGljaygpO1xuICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TVE9QUEVEO1xuICB9O1xuXG4gIF9wcm90by5fc3RyZWFtRW5kZWQgPSBmdW5jdGlvbiBfc3RyZWFtRW5kZWQoYnVmZmVySW5mbywgbGV2ZWxEZXRhaWxzKSB7XG4gICAgdmFyIGZyYWdDdXJyZW50ID0gdGhpcy5mcmFnQ3VycmVudCxcbiAgICAgICAgZnJhZ21lbnRUcmFja2VyID0gdGhpcy5mcmFnbWVudFRyYWNrZXI7IC8vIHdlIGp1c3QgZ290IGRvbmUgbG9hZGluZyB0aGUgZmluYWwgZnJhZ21lbnQgYW5kIHRoZXJlIGlzIG5vIG90aGVyIGJ1ZmZlcmVkIHJhbmdlIGFmdGVyIC4uLlxuICAgIC8vIHJhdGlvbmFsZSBpcyB0aGF0IGluIGNhc2UgdGhlcmUgYXJlIGFueSBidWZmZXJlZCByYW5nZXMgYWZ0ZXIsIGl0IG1lYW5zIHRoYXQgdGhlcmUgYXJlIHVuYnVmZmVyZWQgcG9ydGlvbiBpbiBiZXR3ZWVuXG4gICAgLy8gc28gd2Ugc2hvdWxkIG5vdCBzd2l0Y2ggdG8gRU5ERUQgaW4gdGhhdCBjYXNlLCB0byBiZSBhYmxlIHRvIGJ1ZmZlciB0aGVtXG4gICAgLy8gZG9udCBzd2l0Y2ggdG8gRU5ERUQgaWYgd2UgbmVlZCB0byBiYWNrdHJhY2sgbGFzdCBmcmFnbWVudFxuXG4gICAgaWYgKCFsZXZlbERldGFpbHMubGl2ZSAmJiBmcmFnQ3VycmVudCAmJiAhZnJhZ0N1cnJlbnQuYmFja3RyYWNrZWQgJiYgZnJhZ0N1cnJlbnQuc24gPT09IGxldmVsRGV0YWlscy5lbmRTTiAmJiAhYnVmZmVySW5mby5uZXh0U3RhcnQpIHtcbiAgICAgIHZhciBmcmFnU3RhdGUgPSBmcmFnbWVudFRyYWNrZXIuZ2V0U3RhdGUoZnJhZ0N1cnJlbnQpO1xuICAgICAgcmV0dXJuIGZyYWdTdGF0ZSA9PT0gRnJhZ21lbnRTdGF0ZS5QQVJUSUFMIHx8IGZyYWdTdGF0ZSA9PT0gRnJhZ21lbnRTdGF0ZS5PSztcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgX3Byb3RvLm9uTWVkaWFTZWVraW5nID0gZnVuY3Rpb24gb25NZWRpYVNlZWtpbmcoKSB7XG4gICAgdmFyIGNvbmZpZyA9IHRoaXMuY29uZmlnLFxuICAgICAgICBtZWRpYSA9IHRoaXMubWVkaWEsXG4gICAgICAgIG1lZGlhQnVmZmVyID0gdGhpcy5tZWRpYUJ1ZmZlcixcbiAgICAgICAgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgIHZhciBjdXJyZW50VGltZSA9IG1lZGlhID8gbWVkaWEuY3VycmVudFRpbWUgOiBudWxsO1xuICAgIHZhciBidWZmZXJJbmZvID0gQnVmZmVySGVscGVyLmJ1ZmZlckluZm8obWVkaWFCdWZmZXIgfHwgbWVkaWEsIGN1cnJlbnRUaW1lLCB0aGlzLmNvbmZpZy5tYXhCdWZmZXJIb2xlKTtcbiAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKFwibWVkaWEgc2Vla2luZyB0byBcIiArIChPYmplY3QobnVtYmVyW1wiaXNGaW5pdGVOdW1iZXJcIl0pKGN1cnJlbnRUaW1lKSA/IGN1cnJlbnRUaW1lLnRvRml4ZWQoMykgOiBjdXJyZW50VGltZSkpO1xuXG4gICAgaWYgKHN0YXRlID09PSBTdGF0ZS5GUkFHX0xPQURJTkcpIHtcbiAgICAgIHZhciBmcmFnQ3VycmVudCA9IHRoaXMuZnJhZ0N1cnJlbnQ7IC8vIGNoZWNrIGlmIHdlIGFyZSBzZWVraW5nIHRvIGEgdW5idWZmZXJlZCBhcmVhIEFORCBpZiBmcmFnIGxvYWRpbmcgaXMgaW4gcHJvZ3Jlc3NcblxuICAgICAgaWYgKGJ1ZmZlckluZm8ubGVuID09PSAwICYmIGZyYWdDdXJyZW50KSB7XG4gICAgICAgIHZhciB0b2xlcmFuY2UgPSBjb25maWcubWF4RnJhZ0xvb2tVcFRvbGVyYW5jZTtcbiAgICAgICAgdmFyIGZyYWdTdGFydE9mZnNldCA9IGZyYWdDdXJyZW50LnN0YXJ0IC0gdG9sZXJhbmNlO1xuICAgICAgICB2YXIgZnJhZ0VuZE9mZnNldCA9IGZyYWdDdXJyZW50LnN0YXJ0ICsgZnJhZ0N1cnJlbnQuZHVyYXRpb24gKyB0b2xlcmFuY2U7IC8vIGNoZWNrIGlmIHdlIHNlZWsgcG9zaXRpb24gd2lsbCBiZSBvdXQgb2YgY3VycmVudGx5IGxvYWRlZCBmcmFnIHJhbmdlIDogaWYgb3V0IGNhbmNlbCBmcmFnIGxvYWQsIGlmIGluLCBkb24ndCBkbyBhbnl0aGluZ1xuXG4gICAgICAgIGlmIChjdXJyZW50VGltZSA8IGZyYWdTdGFydE9mZnNldCB8fCBjdXJyZW50VGltZSA+IGZyYWdFbmRPZmZzZXQpIHtcbiAgICAgICAgICBpZiAoZnJhZ0N1cnJlbnQubG9hZGVyKSB7XG4gICAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKCdzZWVraW5nIG91dHNpZGUgb2YgYnVmZmVyIHdoaWxlIGZyYWdtZW50IGxvYWQgaW4gcHJvZ3Jlc3MsIGNhbmNlbCBmcmFnbWVudCBsb2FkJyk7XG4gICAgICAgICAgICBmcmFnQ3VycmVudC5sb2FkZXIuYWJvcnQoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmZyYWdDdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICB0aGlzLmZyYWdQcmV2aW91cyA9IG51bGw7IC8vIHN3aXRjaCB0byBJRExFIHN0YXRlIHRvIGxvYWQgbmV3IGZyYWdtZW50XG5cbiAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSURMRTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKCdzZWVraW5nIG91dHNpZGUgb2YgYnVmZmVyIGJ1dCB3aXRoaW4gY3VycmVudGx5IGxvYWRlZCBmcmFnbWVudCByYW5nZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gU3RhdGUuRU5ERUQpIHtcbiAgICAgIC8vIGlmIHNlZWtpbmcgdG8gdW5idWZmZXJlZCBhcmVhLCBjbGVhbiB1cCBmcmFnUHJldmlvdXNcbiAgICAgIGlmIChidWZmZXJJbmZvLmxlbiA9PT0gMCkge1xuICAgICAgICB0aGlzLmZyYWdQcmV2aW91cyA9IG51bGw7XG4gICAgICAgIHRoaXMuZnJhZ0N1cnJlbnQgPSBudWxsO1xuICAgICAgfSAvLyBzd2l0Y2ggdG8gSURMRSBzdGF0ZSB0byBjaGVjayBmb3IgcG90ZW50aWFsIG5ldyBmcmFnbWVudFxuXG5cbiAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JRExFO1xuICAgIH1cblxuICAgIGlmIChtZWRpYSkge1xuICAgICAgdGhpcy5sYXN0Q3VycmVudFRpbWUgPSBjdXJyZW50VGltZTtcbiAgICB9IC8vIGluIGNhc2Ugc2Vla2luZyBvY2N1cnMgYWx0aG91Z2ggbm8gbWVkaWEgYnVmZmVyZWQsIGFkanVzdCBzdGFydFBvc2l0aW9uIGFuZCBuZXh0TG9hZFBvc2l0aW9uIHRvIHNlZWsgdGFyZ2V0XG5cblxuICAgIGlmICghdGhpcy5sb2FkZWRtZXRhZGF0YSkge1xuICAgICAgdGhpcy5uZXh0TG9hZFBvc2l0aW9uID0gdGhpcy5zdGFydFBvc2l0aW9uID0gY3VycmVudFRpbWU7XG4gICAgfSAvLyB0aWNrIHRvIHNwZWVkIHVwIHByb2Nlc3NpbmdcblxuXG4gICAgdGhpcy50aWNrKCk7XG4gIH07XG5cbiAgX3Byb3RvLm9uTWVkaWFFbmRlZCA9IGZ1bmN0aW9uIG9uTWVkaWFFbmRlZCgpIHtcbiAgICAvLyByZXNldCBzdGFydFBvc2l0aW9uIGFuZCBsYXN0Q3VycmVudFRpbWUgdG8gcmVzdGFydCBwbGF5YmFjayBAIHN0cmVhbSBiZWdpbm5pbmdcbiAgICB0aGlzLnN0YXJ0UG9zaXRpb24gPSB0aGlzLmxhc3RDdXJyZW50VGltZSA9IDA7XG4gIH07XG5cbiAgX3Byb3RvLm9uSGFuZGxlckRlc3Ryb3lpbmcgPSBmdW5jdGlvbiBvbkhhbmRsZXJEZXN0cm95aW5nKCkge1xuICAgIHRoaXMuc3RvcExvYWQoKTtcblxuICAgIF9UYXNrTG9vcC5wcm90b3R5cGUub25IYW5kbGVyRGVzdHJveWluZy5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5vbkhhbmRsZXJEZXN0cm95ZWQgPSBmdW5jdGlvbiBvbkhhbmRsZXJEZXN0cm95ZWQoKSB7XG4gICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlNUT1BQRUQ7XG4gICAgdGhpcy5mcmFnbWVudFRyYWNrZXIgPSBudWxsO1xuICB9O1xuXG4gIF9wcm90by5jb21wdXRlTGl2ZVBvc2l0aW9uID0gZnVuY3Rpb24gY29tcHV0ZUxpdmVQb3NpdGlvbihzbGlkaW5nLCBsZXZlbERldGFpbHMpIHtcbiAgICB2YXIgdGFyZ2V0TGF0ZW5jeSA9IHRoaXMuY29uZmlnLmxpdmVTeW5jRHVyYXRpb24gIT09IHVuZGVmaW5lZCA/IHRoaXMuY29uZmlnLmxpdmVTeW5jRHVyYXRpb24gOiB0aGlzLmNvbmZpZy5saXZlU3luY0R1cmF0aW9uQ291bnQgKiBsZXZlbERldGFpbHMudGFyZ2V0ZHVyYXRpb247XG4gICAgcmV0dXJuIHNsaWRpbmcgKyBNYXRoLm1heCgwLCBsZXZlbERldGFpbHMudG90YWxkdXJhdGlvbiAtIHRhcmdldExhdGVuY3kpO1xuICB9O1xuXG4gIHJldHVybiBCYXNlU3RyZWFtQ29udHJvbGxlcjtcbn0oVGFza0xvb3ApO1xuXG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvbnRyb2xsZXIvc3RyZWFtLWNvbnRyb2xsZXIuanNcblxuXG5cblxuXG5cblxuZnVuY3Rpb24gc3RyZWFtX2NvbnRyb2xsZXJfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIHN0cmVhbV9jb250cm9sbGVyX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgc3RyZWFtX2NvbnRyb2xsZXJfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIHN0cmVhbV9jb250cm9sbGVyX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIHN0cmVhbV9jb250cm9sbGVyX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qXG4gKiBTdHJlYW0gQ29udHJvbGxlclxuKi9cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbnZhciBUSUNLX0lOVEVSVkFMID0gMTAwOyAvLyBob3cgb2Z0ZW4gdG8gdGljayBpbiBtc1xuXG52YXIgc3RyZWFtX2NvbnRyb2xsZXJfU3RyZWFtQ29udHJvbGxlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VTdHJlYW1Db250cm9sbGVyKSB7XG4gIHN0cmVhbV9jb250cm9sbGVyX2luaGVyaXRzTG9vc2UoU3RyZWFtQ29udHJvbGxlciwgX0Jhc2VTdHJlYW1Db250cm9sbGVyKTtcblxuICBmdW5jdGlvbiBTdHJlYW1Db250cm9sbGVyKGhscywgZnJhZ21lbnRUcmFja2VyKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfQmFzZVN0cmVhbUNvbnRyb2xsZXIuY2FsbCh0aGlzLCBobHMsIGV2ZW50c1tcImRlZmF1bHRcIl0uTUVESUFfQVRUQUNIRUQsIGV2ZW50c1tcImRlZmF1bHRcIl0uTUVESUFfREVUQUNISU5HLCBldmVudHNbXCJkZWZhdWx0XCJdLk1BTklGRVNUX0xPQURJTkcsIGV2ZW50c1tcImRlZmF1bHRcIl0uTUFOSUZFU1RfUEFSU0VELCBldmVudHNbXCJkZWZhdWx0XCJdLkxFVkVMX0xPQURFRCwgZXZlbnRzW1wiZGVmYXVsdFwiXS5MRVZFTFNfVVBEQVRFRCwgZXZlbnRzW1wiZGVmYXVsdFwiXS5LRVlfTE9BREVELCBldmVudHNbXCJkZWZhdWx0XCJdLkZSQUdfTE9BREVELCBldmVudHNbXCJkZWZhdWx0XCJdLkZSQUdfTE9BRF9FTUVSR0VOQ1lfQUJPUlRFRCwgZXZlbnRzW1wiZGVmYXVsdFwiXS5GUkFHX1BBUlNJTkdfSU5JVF9TRUdNRU5ULCBldmVudHNbXCJkZWZhdWx0XCJdLkZSQUdfUEFSU0lOR19EQVRBLCBldmVudHNbXCJkZWZhdWx0XCJdLkZSQUdfUEFSU0VELCBldmVudHNbXCJkZWZhdWx0XCJdLkVSUk9SLCBldmVudHNbXCJkZWZhdWx0XCJdLkFVRElPX1RSQUNLX1NXSVRDSElORywgZXZlbnRzW1wiZGVmYXVsdFwiXS5BVURJT19UUkFDS19TV0lUQ0hFRCwgZXZlbnRzW1wiZGVmYXVsdFwiXS5CVUZGRVJfQ1JFQVRFRCwgZXZlbnRzW1wiZGVmYXVsdFwiXS5CVUZGRVJfQVBQRU5ERUQsIGV2ZW50c1tcImRlZmF1bHRcIl0uQlVGRkVSX0ZMVVNIRUQpIHx8IHRoaXM7XG4gICAgX3RoaXMuZnJhZ21lbnRUcmFja2VyID0gZnJhZ21lbnRUcmFja2VyO1xuICAgIF90aGlzLmNvbmZpZyA9IGhscy5jb25maWc7XG4gICAgX3RoaXMuYXVkaW9Db2RlY1N3YXAgPSBmYWxzZTtcbiAgICBfdGhpcy5fc3RhdGUgPSBTdGF0ZS5TVE9QUEVEO1xuICAgIF90aGlzLnN0YWxsUmVwb3J0ZWQgPSBmYWxzZTtcbiAgICBfdGhpcy5nYXBDb250cm9sbGVyID0gbnVsbDtcbiAgICBfdGhpcy5hbHRBdWRpbyA9IGZhbHNlO1xuICAgIF90aGlzLmF1ZGlvT25seSA9IGZhbHNlO1xuICAgIF90aGlzLmJpdHJhdGVUZXN0ID0gZmFsc2U7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0cmVhbUNvbnRyb2xsZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5zdGFydExvYWQgPSBmdW5jdGlvbiBzdGFydExvYWQoc3RhcnRQb3NpdGlvbikge1xuICAgIGlmICh0aGlzLmxldmVscykge1xuICAgICAgdmFyIGxhc3RDdXJyZW50VGltZSA9IHRoaXMubGFzdEN1cnJlbnRUaW1lLFxuICAgICAgICAgIGhscyA9IHRoaXMuaGxzO1xuICAgICAgdGhpcy5zdG9wTG9hZCgpO1xuICAgICAgdGhpcy5zZXRJbnRlcnZhbChUSUNLX0lOVEVSVkFMKTtcbiAgICAgIHRoaXMubGV2ZWwgPSAtMTtcbiAgICAgIHRoaXMuZnJhZ0xvYWRFcnJvciA9IDA7XG5cbiAgICAgIGlmICghdGhpcy5zdGFydEZyYWdSZXF1ZXN0ZWQpIHtcbiAgICAgICAgLy8gZGV0ZXJtaW5lIGxvYWQgbGV2ZWxcbiAgICAgICAgdmFyIHN0YXJ0TGV2ZWwgPSBobHMuc3RhcnRMZXZlbDtcblxuICAgICAgICBpZiAoc3RhcnRMZXZlbCA9PT0gLTEpIHtcbiAgICAgICAgICBpZiAoaGxzLmNvbmZpZy50ZXN0QmFuZHdpZHRoKSB7XG4gICAgICAgICAgICAvLyAtMSA6IGd1ZXNzIHN0YXJ0IExldmVsIGJ5IGRvaW5nIGEgYml0cmF0ZSB0ZXN0IGJ5IGxvYWRpbmcgZmlyc3QgZnJhZ21lbnQgb2YgbG93ZXN0IHF1YWxpdHkgbGV2ZWxcbiAgICAgICAgICAgIHN0YXJ0TGV2ZWwgPSAwO1xuICAgICAgICAgICAgdGhpcy5iaXRyYXRlVGVzdCA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXJ0TGV2ZWwgPSBobHMubmV4dEF1dG9MZXZlbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gc2V0IG5ldyBsZXZlbCB0byBwbGF5bGlzdCBsb2FkZXIgOiB0aGlzIHdpbGwgdHJpZ2dlciBzdGFydCBsZXZlbCBsb2FkXG4gICAgICAgIC8vIGhscy5uZXh0TG9hZExldmVsIHJlbWFpbnMgdW50aWwgaXQgaXMgc2V0IHRvIGEgbmV3IHZhbHVlIG9yIHVudGlsIGEgbmV3IGZyYWcgaXMgc3VjY2Vzc2Z1bGx5IGxvYWRlZFxuXG5cbiAgICAgICAgdGhpcy5sZXZlbCA9IGhscy5uZXh0TG9hZExldmVsID0gc3RhcnRMZXZlbDtcbiAgICAgICAgdGhpcy5sb2FkZWRtZXRhZGF0YSA9IGZhbHNlO1xuICAgICAgfSAvLyBpZiBzdGFydFBvc2l0aW9uIHVuZGVmaW5lZCBidXQgbGFzdEN1cnJlbnRUaW1lIHNldCwgc2V0IHN0YXJ0UG9zaXRpb24gdG8gbGFzdCBjdXJyZW50VGltZVxuXG5cbiAgICAgIGlmIChsYXN0Q3VycmVudFRpbWUgPiAwICYmIHN0YXJ0UG9zaXRpb24gPT09IC0xKSB7XG4gICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJvdmVycmlkZSBzdGFydFBvc2l0aW9uIHdpdGggbGFzdEN1cnJlbnRUaW1lIEBcIiArIGxhc3RDdXJyZW50VGltZS50b0ZpeGVkKDMpKTtcbiAgICAgICAgc3RhcnRQb3NpdGlvbiA9IGxhc3RDdXJyZW50VGltZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLklETEU7XG4gICAgICB0aGlzLm5leHRMb2FkUG9zaXRpb24gPSB0aGlzLnN0YXJ0UG9zaXRpb24gPSB0aGlzLmxhc3RDdXJyZW50VGltZSA9IHN0YXJ0UG9zaXRpb247XG4gICAgICB0aGlzLnRpY2soKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5mb3JjZVN0YXJ0TG9hZCA9IHRydWU7XG4gICAgICB0aGlzLnN0YXRlID0gU3RhdGUuU1RPUFBFRDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnN0b3BMb2FkID0gZnVuY3Rpb24gc3RvcExvYWQoKSB7XG4gICAgdGhpcy5mb3JjZVN0YXJ0TG9hZCA9IGZhbHNlO1xuXG4gICAgX0Jhc2VTdHJlYW1Db250cm9sbGVyLnByb3RvdHlwZS5zdG9wTG9hZC5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5kb1RpY2sgPSBmdW5jdGlvbiBkb1RpY2soKSB7XG4gICAgc3dpdGNoICh0aGlzLnN0YXRlKSB7XG4gICAgICBjYXNlIFN0YXRlLkJVRkZFUl9GTFVTSElORzpcbiAgICAgICAgLy8gaW4gYnVmZmVyIGZsdXNoaW5nIHN0YXRlLCByZXNldCBmcmFnTG9hZEVycm9yIGNvdW50ZXJcbiAgICAgICAgdGhpcy5mcmFnTG9hZEVycm9yID0gMDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgU3RhdGUuSURMRTpcbiAgICAgICAgdGhpcy5fZG9UaWNrSWRsZSgpO1xuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFN0YXRlLldBSVRJTkdfTEVWRUw6XG4gICAgICAgIHZhciBsZXZlbCA9IHRoaXMubGV2ZWxzW3RoaXMubGV2ZWxdOyAvLyBjaGVjayBpZiBwbGF5bGlzdCBpcyBhbHJlYWR5IGxvYWRlZFxuXG4gICAgICAgIGlmIChsZXZlbCAmJiBsZXZlbC5kZXRhaWxzKSB7XG4gICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLklETEU7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBTdGF0ZS5GUkFHX0xPQURJTkdfV0FJVElOR19SRVRSWTpcbiAgICAgICAgdmFyIG5vdyA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgdmFyIHJldHJ5RGF0ZSA9IHRoaXMucmV0cnlEYXRlOyAvLyBpZiBjdXJyZW50IHRpbWUgaXMgZ3QgdGhhbiByZXRyeURhdGUsIG9yIGlmIG1lZGlhIHNlZWtpbmcgbGV0J3Mgc3dpdGNoIHRvIElETEUgc3RhdGUgdG8gcmV0cnkgbG9hZGluZ1xuXG4gICAgICAgIGlmICghcmV0cnlEYXRlIHx8IG5vdyA+PSByZXRyeURhdGUgfHwgdGhpcy5tZWRpYSAmJiB0aGlzLm1lZGlhLnNlZWtpbmcpIHtcbiAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKCdtZWRpYUNvbnRyb2xsZXI6IHJldHJ5RGF0ZSByZWFjaGVkLCBzd2l0Y2ggYmFjayB0byBJRExFIHN0YXRlJyk7XG4gICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLklETEU7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBTdGF0ZS5FUlJPUjpcbiAgICAgIGNhc2UgU3RhdGUuU1RPUFBFRDpcbiAgICAgIGNhc2UgU3RhdGUuRlJBR19MT0FESU5HOlxuICAgICAgY2FzZSBTdGF0ZS5QQVJTSU5HOlxuICAgICAgY2FzZSBTdGF0ZS5QQVJTRUQ6XG4gICAgICBjYXNlIFN0YXRlLkVOREVEOlxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfSAvLyBjaGVjayBidWZmZXJcblxuXG4gICAgdGhpcy5fY2hlY2tCdWZmZXIoKTsgLy8gY2hlY2svdXBkYXRlIGN1cnJlbnQgZnJhZ21lbnRcblxuXG4gICAgdGhpcy5fY2hlY2tGcmFnbWVudENoYW5nZWQoKTtcbiAgfSAvLyBJcm9uaWNhbGx5IHRoZSBcImlkbGVcIiBzdGF0ZSBpcyB0aGUgb24gd2UgZG8gdGhlIG1vc3QgbG9naWMgaW4gaXQgc2VlbXMgLi4uLlxuICAvLyBOT1RFOiBNYXliZSB3ZSBjb3VsZCByYXRoZXIgc2NoZWR1bGUgYSBjaGVjayBmb3IgYnVmZmVyIGxlbmd0aCBhZnRlciBoYWxmIG9mIHRoZSBjdXJyZW50bHlcbiAgLy8gICAgICAgcGxheWVkIHNlZ21lbnQsIG9yIG9uIHBhdXNlL3BsYXkvc2VlayBpbnN0ZWFkIG9mIG5haXZlbHkgY2hlY2tpbmcgZXZlcnkgMTAwbXM/XG4gIDtcblxuICBfcHJvdG8uX2RvVGlja0lkbGUgPSBmdW5jdGlvbiBfZG9UaWNrSWRsZSgpIHtcbiAgICB2YXIgaGxzID0gdGhpcy5obHMsXG4gICAgICAgIGNvbmZpZyA9IGhscy5jb25maWcsXG4gICAgICAgIG1lZGlhID0gdGhpcy5tZWRpYTsgLy8gaWYgc3RhcnQgbGV2ZWwgbm90IHBhcnNlZCB5ZXQgT1JcbiAgICAvLyBpZiB2aWRlbyBub3QgYXR0YWNoZWQgQU5EIHN0YXJ0IGZyYWdtZW50IGFscmVhZHkgcmVxdWVzdGVkIE9SIHN0YXJ0IGZyYWcgcHJlZmV0Y2ggZGlzYWJsZVxuICAgIC8vIGV4aXQgbG9vcCwgYXMgd2UgZWl0aGVyIG5lZWQgbW9yZSBpbmZvIChsZXZlbCBub3QgcGFyc2VkKSBvciB3ZSBuZWVkIG1lZGlhIHRvIGJlIGF0dGFjaGVkIHRvIGxvYWQgbmV3IGZyYWdtZW50XG5cbiAgICBpZiAodGhpcy5sZXZlbExhc3RMb2FkZWQgPT09IHVuZGVmaW5lZCB8fCAhbWVkaWEgJiYgKHRoaXMuc3RhcnRGcmFnUmVxdWVzdGVkIHx8ICFjb25maWcuc3RhcnRGcmFnUHJlZmV0Y2gpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBJZiB0aGUgXCJtYWluXCIgbGV2ZWwgaXMgYXVkaW8tb25seSBidXQgd2UgYXJlIGxvYWRpbmcgYW4gYWx0ZXJuYXRlIHRyYWNrIGluIHRoZSBzYW1lIGdyb3VwLCBkbyBub3QgbG9hZCBhbnl0aGluZ1xuXG5cbiAgICBpZiAodGhpcy5hbHRBdWRpbyAmJiB0aGlzLmF1ZGlvT25seSkge1xuICAgICAgLy8gQ2xlYXIgYXVkaW8gZGVtdXhlciBzdGF0ZSBzbyB3aGVuIHN3aXRjaGluZyBiYWNrIHRvIG1haW4gYXVkaW8gd2UncmUgbm90IHN0aWxsIGFwcGVuZGluZyB3aGVyZSB3ZSBsZWZ0IG9mZlxuICAgICAgdGhpcy5kZW11eGVyLmZyYWcgPSBudWxsO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gaWYgd2UgaGF2ZSBub3QgeWV0IGxvYWRlZCBhbnkgZnJhZ21lbnQsIHN0YXJ0IGxvYWRpbmcgZnJvbSBzdGFydCBwb3NpdGlvblxuXG5cbiAgICB2YXIgcG9zO1xuXG4gICAgaWYgKHRoaXMubG9hZGVkbWV0YWRhdGEpIHtcbiAgICAgIHBvcyA9IG1lZGlhLmN1cnJlbnRUaW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICBwb3MgPSB0aGlzLm5leHRMb2FkUG9zaXRpb247XG4gICAgfSAvLyBkZXRlcm1pbmUgbmV4dCBsb2FkIGxldmVsXG5cblxuICAgIHZhciBsZXZlbCA9IGhscy5uZXh0TG9hZExldmVsLFxuICAgICAgICBsZXZlbEluZm8gPSB0aGlzLmxldmVsc1tsZXZlbF07XG5cbiAgICBpZiAoIWxldmVsSW5mbykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBsZXZlbEJpdHJhdGUgPSBsZXZlbEluZm8uYml0cmF0ZSxcbiAgICAgICAgbWF4QnVmTGVuOyAvLyBjb21wdXRlIG1heCBCdWZmZXIgTGVuZ3RoIHRoYXQgd2UgY291bGQgZ2V0IGZyb20gdGhpcyBsb2FkIGxldmVsLCBiYXNlZCBvbiBsZXZlbCBiaXRyYXRlLlxuXG4gICAgaWYgKGxldmVsQml0cmF0ZSkge1xuICAgICAgbWF4QnVmTGVuID0gTWF0aC5tYXgoOCAqIGNvbmZpZy5tYXhCdWZmZXJTaXplIC8gbGV2ZWxCaXRyYXRlLCBjb25maWcubWF4QnVmZmVyTGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWF4QnVmTGVuID0gY29uZmlnLm1heEJ1ZmZlckxlbmd0aDtcbiAgICB9XG5cbiAgICBtYXhCdWZMZW4gPSBNYXRoLm1pbihtYXhCdWZMZW4sIGNvbmZpZy5tYXhNYXhCdWZmZXJMZW5ndGgpOyAvLyBkZXRlcm1pbmUgbmV4dCBjYW5kaWRhdGUgZnJhZ21lbnQgdG8gYmUgbG9hZGVkLCBiYXNlZCBvbiBjdXJyZW50IHBvc2l0aW9uIGFuZCBlbmQgb2YgYnVmZmVyIHBvc2l0aW9uXG4gICAgLy8gZW5zdXJlIHVwIHRvIGBjb25maWcubWF4TWF4QnVmZmVyTGVuZ3RoYCBvZiBidWZmZXIgdXBmcm9udFxuXG4gICAgdmFyIG1heEJ1ZmZlckhvbGUgPSBwb3MgPCBjb25maWcubWF4QnVmZmVySG9sZSA/IE1hdGgubWF4KE1BWF9TVEFSVF9HQVBfSlVNUCwgY29uZmlnLm1heEJ1ZmZlckhvbGUpIDogY29uZmlnLm1heEJ1ZmZlckhvbGU7XG4gICAgdmFyIGJ1ZmZlckluZm8gPSBCdWZmZXJIZWxwZXIuYnVmZmVySW5mbyh0aGlzLm1lZGlhQnVmZmVyID8gdGhpcy5tZWRpYUJ1ZmZlciA6IG1lZGlhLCBwb3MsIG1heEJ1ZmZlckhvbGUpO1xuICAgIHZhciBidWZmZXJMZW4gPSBidWZmZXJJbmZvLmxlbjsgLy8gU3RheSBpZGxlIGlmIHdlIGFyZSBzdGlsbCB3aXRoIGJ1ZmZlciBtYXJnaW5zXG5cbiAgICBpZiAoYnVmZmVyTGVuID49IG1heEJ1Zkxlbikge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gaWYgYnVmZmVyIGxlbmd0aCBpcyBsZXNzIHRoYW4gbWF4QnVmTGVuIHRyeSB0byBsb2FkIGEgbmV3IGZyYWdtZW50IC4uLlxuXG5cbiAgICBsb2dnZXJbXCJsb2dnZXJcIl0udHJhY2UoXCJidWZmZXIgbGVuZ3RoIG9mIFwiICsgYnVmZmVyTGVuLnRvRml4ZWQoMykgKyBcIiBpcyBiZWxvdyBtYXggb2YgXCIgKyBtYXhCdWZMZW4udG9GaXhlZCgzKSArIFwiLiBjaGVja2luZyBmb3IgbW9yZSBwYXlsb2FkIC4uLlwiKTsgLy8gc2V0IG5leHQgbG9hZCBsZXZlbCA6IHRoaXMgd2lsbCB0cmlnZ2VyIGEgcGxheWxpc3QgbG9hZCBpZiBuZWVkZWRcblxuICAgIHRoaXMubGV2ZWwgPSBobHMubmV4dExvYWRMZXZlbCA9IGxldmVsO1xuICAgIHZhciBsZXZlbERldGFpbHMgPSBsZXZlbEluZm8uZGV0YWlsczsgLy8gaWYgbGV2ZWwgaW5mbyBub3QgcmV0cmlldmVkIHlldCwgc3dpdGNoIHN0YXRlIGFuZCB3YWl0IGZvciBsZXZlbCByZXRyaWV2YWxcbiAgICAvLyBpZiBsaXZlIHBsYXlsaXN0LCBlbnN1cmUgdGhhdCBuZXcgcGxheWxpc3QgaGFzIGJlZW4gcmVmcmVzaGVkIHRvIGF2b2lkIGxvYWRpbmcvdHJ5IHRvIGxvYWRcbiAgICAvLyBhIHVzZWxlc3MgYW5kIG91dGRhdGVkIGZyYWdtZW50ICh0aGF0IG1pZ2h0IGV2ZW4gaW50cm9kdWNlIGxvYWQgZXJyb3IgaWYgaXQgaXMgYWxyZWFkeSBvdXQgb2YgdGhlIGxpdmUgcGxheWxpc3QpXG5cbiAgICBpZiAoIWxldmVsRGV0YWlscyB8fCBsZXZlbERldGFpbHMubGl2ZSAmJiB0aGlzLmxldmVsTGFzdExvYWRlZCAhPT0gbGV2ZWwpIHtcbiAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5XQUlUSU5HX0xFVkVMO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9zdHJlYW1FbmRlZChidWZmZXJJbmZvLCBsZXZlbERldGFpbHMpKSB7XG4gICAgICB2YXIgZGF0YSA9IHt9O1xuXG4gICAgICBpZiAodGhpcy5hbHRBdWRpbykge1xuICAgICAgICBkYXRhLnR5cGUgPSAndmlkZW8nO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uQlVGRkVSX0VPUywgZGF0YSk7XG4gICAgICB0aGlzLnN0YXRlID0gU3RhdGUuRU5ERUQ7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBpZiB3ZSBoYXZlIHRoZSBsZXZlbERldGFpbHMgZm9yIHRoZSBzZWxlY3RlZCB2YXJpYW50LCBsZXRzIGNvbnRpbnVlIGVucmljaGVuIG91ciBzdHJlYW0gKGxvYWQga2V5cy9mcmFnbWVudHMgb3IgdHJpZ2dlciBFT1MsIGV0Yy4uKVxuXG5cbiAgICB0aGlzLl9mZXRjaFBheWxvYWRPckVvcyhwb3MsIGJ1ZmZlckluZm8sIGxldmVsRGV0YWlscyk7XG4gIH07XG5cbiAgX3Byb3RvLl9mZXRjaFBheWxvYWRPckVvcyA9IGZ1bmN0aW9uIF9mZXRjaFBheWxvYWRPckVvcyhwb3MsIGJ1ZmZlckluZm8sIGxldmVsRGV0YWlscykge1xuICAgIHZhciBmcmFnUHJldmlvdXMgPSB0aGlzLmZyYWdQcmV2aW91cyxcbiAgICAgICAgbGV2ZWwgPSB0aGlzLmxldmVsLFxuICAgICAgICBmcmFnbWVudHMgPSBsZXZlbERldGFpbHMuZnJhZ21lbnRzLFxuICAgICAgICBmcmFnTGVuID0gZnJhZ21lbnRzLmxlbmd0aDsgLy8gZW1wdHkgcGxheWxpc3RcblxuICAgIGlmIChmcmFnTGVuID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBmaW5kIGZyYWdtZW50IGluZGV4LCBjb250aWd1b3VzIHdpdGggZW5kIG9mIGJ1ZmZlciBwb3NpdGlvblxuXG5cbiAgICB2YXIgc3RhcnQgPSBmcmFnbWVudHNbMF0uc3RhcnQsXG4gICAgICAgIGVuZCA9IGZyYWdtZW50c1tmcmFnTGVuIC0gMV0uc3RhcnQgKyBmcmFnbWVudHNbZnJhZ0xlbiAtIDFdLmR1cmF0aW9uLFxuICAgICAgICBidWZmZXJFbmQgPSBidWZmZXJJbmZvLmVuZCxcbiAgICAgICAgZnJhZztcblxuICAgIGlmIChsZXZlbERldGFpbHMuaW5pdFNlZ21lbnQgJiYgIWxldmVsRGV0YWlscy5pbml0U2VnbWVudC5kYXRhKSB7XG4gICAgICBmcmFnID0gbGV2ZWxEZXRhaWxzLmluaXRTZWdtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbiBjYXNlIG9mIGxpdmUgcGxheWxpc3Qgd2UgbmVlZCB0byBlbnN1cmUgdGhhdCByZXF1ZXN0ZWQgcG9zaXRpb24gaXMgbm90IGxvY2F0ZWQgYmVmb3JlIHBsYXlsaXN0IHN0YXJ0XG4gICAgICBpZiAobGV2ZWxEZXRhaWxzLmxpdmUpIHtcbiAgICAgICAgdmFyIGluaXRpYWxMaXZlTWFuaWZlc3RTaXplID0gdGhpcy5jb25maWcuaW5pdGlhbExpdmVNYW5pZmVzdFNpemU7XG5cbiAgICAgICAgaWYgKGZyYWdMZW4gPCBpbml0aWFsTGl2ZU1hbmlmZXN0U2l6ZSkge1xuICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuKFwiQ2FuIG5vdCBzdGFydCBwbGF5YmFjayBvZiBhIGxldmVsLCByZWFzb246IG5vdCBlbm91Z2ggZnJhZ21lbnRzIFwiICsgZnJhZ0xlbiArIFwiIDwgXCIgKyBpbml0aWFsTGl2ZU1hbmlmZXN0U2l6ZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZnJhZyA9IHRoaXMuX2Vuc3VyZUZyYWdtZW50QXRMaXZlUG9pbnQobGV2ZWxEZXRhaWxzLCBidWZmZXJFbmQsIHN0YXJ0LCBlbmQsIGZyYWdQcmV2aW91cywgZnJhZ21lbnRzKTsgLy8gaWYgaXQgZXhwbGljaXRlbHkgcmV0dXJucyBudWxsIGRvbid0IGxvYWQgYW55IGZyYWdtZW50IGFuZCBleGl0IGZ1bmN0aW9uIG5vd1xuXG4gICAgICAgIGlmIChmcmFnID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBWb0QgcGxheWxpc3Q6IGlmIGJ1ZmZlckVuZCBiZWZvcmUgc3RhcnQgb2YgcGxheWxpc3QsIGxvYWQgZmlyc3QgZnJhZ21lbnRcbiAgICAgICAgaWYgKGJ1ZmZlckVuZCA8IHN0YXJ0KSB7XG4gICAgICAgICAgZnJhZyA9IGZyYWdtZW50c1swXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghZnJhZykge1xuICAgICAgZnJhZyA9IHRoaXMuX2ZpbmRGcmFnbWVudChzdGFydCwgZnJhZ1ByZXZpb3VzLCBmcmFnTGVuLCBmcmFnbWVudHMsIGJ1ZmZlckVuZCwgZW5kLCBsZXZlbERldGFpbHMpO1xuICAgIH1cblxuICAgIGlmIChmcmFnKSB7XG4gICAgICBpZiAoZnJhZy5lbmNyeXB0ZWQpIHtcbiAgICAgICAgdGhpcy5fbG9hZEtleShmcmFnLCBsZXZlbERldGFpbHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fbG9hZEZyYWdtZW50KGZyYWcsIGxldmVsRGV0YWlscywgcG9zLCBidWZmZXJFbmQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX2Vuc3VyZUZyYWdtZW50QXRMaXZlUG9pbnQgPSBmdW5jdGlvbiBfZW5zdXJlRnJhZ21lbnRBdExpdmVQb2ludChsZXZlbERldGFpbHMsIGJ1ZmZlckVuZCwgc3RhcnQsIGVuZCwgZnJhZ1ByZXZpb3VzLCBmcmFnbWVudHMpIHtcbiAgICB2YXIgY29uZmlnID0gdGhpcy5obHMuY29uZmlnLFxuICAgICAgICBtZWRpYSA9IHRoaXMubWVkaWE7XG4gICAgdmFyIGZyYWc7IC8vIGNoZWNrIGlmIHJlcXVlc3RlZCBwb3NpdGlvbiBpcyB3aXRoaW4gc2Vla2FibGUgYm91bmRhcmllcyA6XG4gICAgLy8gbG9nZ2VyLmxvZyhgc3RhcnQvcG9zL2J1ZkVuZC9zZWVraW5nOiR7c3RhcnQudG9GaXhlZCgzKX0vJHtwb3MudG9GaXhlZCgzKX0vJHtidWZmZXJFbmQudG9GaXhlZCgzKX0vJHt0aGlzLm1lZGlhLnNlZWtpbmd9YCk7XG5cbiAgICB2YXIgbWF4TGF0ZW5jeSA9IEluZmluaXR5O1xuXG4gICAgaWYgKGNvbmZpZy5saXZlTWF4TGF0ZW5jeUR1cmF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG1heExhdGVuY3kgPSBjb25maWcubGl2ZU1heExhdGVuY3lEdXJhdGlvbjtcbiAgICB9IGVsc2UgaWYgKE9iamVjdChudW1iZXJbXCJpc0Zpbml0ZU51bWJlclwiXSkoY29uZmlnLmxpdmVNYXhMYXRlbmN5RHVyYXRpb25Db3VudCkpIHtcbiAgICAgIG1heExhdGVuY3kgPSBjb25maWcubGl2ZU1heExhdGVuY3lEdXJhdGlvbkNvdW50ICogbGV2ZWxEZXRhaWxzLnRhcmdldGR1cmF0aW9uO1xuICAgIH1cblxuICAgIGlmIChidWZmZXJFbmQgPCBNYXRoLm1heChzdGFydCAtIGNvbmZpZy5tYXhGcmFnTG9va1VwVG9sZXJhbmNlLCBlbmQgLSBtYXhMYXRlbmN5KSkge1xuICAgICAgdmFyIGxpdmVTeW5jUG9zaXRpb24gPSB0aGlzLmxpdmVTeW5jUG9zaXRpb24gPSB0aGlzLmNvbXB1dGVMaXZlUG9zaXRpb24oc3RhcnQsIGxldmVsRGV0YWlscyk7XG4gICAgICBidWZmZXJFbmQgPSBsaXZlU3luY1Bvc2l0aW9uO1xuXG4gICAgICBpZiAobWVkaWEgJiYgIW1lZGlhLnBhdXNlZCAmJiBtZWRpYS5yZWFkeVN0YXRlICYmIG1lZGlhLmR1cmF0aW9uID4gbGl2ZVN5bmNQb3NpdGlvbiAmJiBsaXZlU3luY1Bvc2l0aW9uID4gbWVkaWEuY3VycmVudFRpbWUpIHtcbiAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyhcImJ1ZmZlciBlbmQ6IFwiICsgYnVmZmVyRW5kLnRvRml4ZWQoMykgKyBcIiBpcyBsb2NhdGVkIHRvbyBmYXIgZnJvbSB0aGUgZW5kIG9mIGxpdmUgc2xpZGluZyBwbGF5bGlzdCwgcmVzZXQgY3VycmVudFRpbWUgdG8gOiBcIiArIGxpdmVTeW5jUG9zaXRpb24udG9GaXhlZCgzKSk7XG4gICAgICAgIG1lZGlhLmN1cnJlbnRUaW1lID0gbGl2ZVN5bmNQb3NpdGlvbjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5uZXh0TG9hZFBvc2l0aW9uID0gbGl2ZVN5bmNQb3NpdGlvbjtcbiAgICB9IC8vIGlmIGVuZCBvZiBidWZmZXIgZ3JlYXRlciB0aGFuIGxpdmUgZWRnZSwgZG9uJ3QgbG9hZCBhbnkgZnJhZ21lbnRcbiAgICAvLyB0aGlzIGNvdWxkIGhhcHBlbiBpZiBsaXZlIHBsYXlsaXN0IGludGVybWl0dGVudGx5IHNsaWRlcyBpbiB0aGUgcGFzdC5cbiAgICAvLyBsZXZlbCAxIGxvYWRlZCBbMTgyNTgwMTYxLDE4MjU4MDE2N11cbiAgICAvLyBsZXZlbCAxIGxvYWRlZCBbMTgyNTgwMTYyLDE4MjU4MDE2OV1cbiAgICAvLyBMb2FkaW5nIDE4MjU4MDE2OCBvZiBbMTgyNTgwMTYyICwxODI1ODAxNjldLGxldmVsIDEgLi5cbiAgICAvLyBMb2FkaW5nIDE4MjU4MDE2OSBvZiBbMTgyNTgwMTYyICwxODI1ODAxNjldLGxldmVsIDEgLi5cbiAgICAvLyBsZXZlbCAxIGxvYWRlZCBbMTgyNTgwMTYyLDE4MjU4MDE2OF0gPD09PT09PT09PT09PT0gaGVyZSB3ZSBzaG91bGQgaGF2ZSBidWZmZXJFbmQgPiBlbmQuIGluIHRoYXQgY2FzZSBicmVhayB0byBhdm9pZCByZWxvYWRpbmcgMTgyNTgwMTY4XG4gICAgLy8gbGV2ZWwgMSBsb2FkZWQgWzE4MjU4MDE2NCwxODI1ODAxNzFdXG4gICAgLy9cbiAgICAvLyBkb24ndCByZXR1cm4gbnVsbCBpbiBjYXNlIG1lZGlhIG5vdCBsb2FkZWQgeWV0IChyZWFkeXN0YXRlID09PSAwKVxuXG5cbiAgICBpZiAobGV2ZWxEZXRhaWxzLlBUU0tub3duICYmIGJ1ZmZlckVuZCA+IGVuZCAmJiBtZWRpYSAmJiBtZWRpYS5yZWFkeVN0YXRlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zdGFydEZyYWdSZXF1ZXN0ZWQgJiYgIWxldmVsRGV0YWlscy5QVFNLbm93bikge1xuICAgICAgLyogd2UgYXJlIHN3aXRjaGluZyBsZXZlbCBvbiBsaXZlIHBsYXlsaXN0LCBidXQgd2UgZG9uJ3QgaGF2ZSBhbnkgUFRTIGluZm8gZm9yIHRoYXQgcXVhbGl0eSBsZXZlbCAuLi5cbiAgICAgICAgIHRyeSB0byBsb2FkIGZyYWcgbWF0Y2hpbmcgd2l0aCBuZXh0IFNOLlxuICAgICAgICAgZXZlbiBpZiBTTiBhcmUgbm90IHN5bmNocm9uaXplZCBiZXR3ZWVuIHBsYXlsaXN0cywgbG9hZGluZyB0aGlzIGZyYWcgd2lsbCBoZWxwIHVzXG4gICAgICAgICBjb21wdXRlIHBsYXlsaXN0IHNsaWRpbmcgYW5kIGZpbmQgdGhlIHJpZ2h0IG9uZSBhZnRlciBpbiBjYXNlIGl0IHdhcyBub3QgdGhlIHJpZ2h0IGNvbnNlY3V0aXZlIG9uZSAqL1xuICAgICAgaWYgKGZyYWdQcmV2aW91cykge1xuICAgICAgICBpZiAobGV2ZWxEZXRhaWxzLmhhc1Byb2dyYW1EYXRlVGltZSkge1xuICAgICAgICAgIC8vIFJlbGllcyBvbiBQRFQgaW4gb3JkZXIgdG8gc3dpdGNoIGJpdHJhdGVzIChTdXBwb3J0IEVYVC1YLURJU0NPTlRJTlVJVFkgd2l0aG91dCBFWFQtWC1ESVNDT05USU5VSVRZLVNFUVVFTkNFKVxuICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJsaXZlIHBsYXlsaXN0LCBzd2l0Y2hpbmcgcGxheWxpc3QsIGxvYWQgZnJhZyB3aXRoIHNhbWUgUERUOiBcIiArIGZyYWdQcmV2aW91cy5wcm9ncmFtRGF0ZVRpbWUpO1xuICAgICAgICAgIGZyYWcgPSBmaW5kRnJhZ21lbnRCeVBEVChmcmFnbWVudHMsIGZyYWdQcmV2aW91cy5lbmRQcm9ncmFtRGF0ZVRpbWUsIGNvbmZpZy5tYXhGcmFnTG9va1VwVG9sZXJhbmNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBVc2VzIGJ1ZmZlciBhbmQgc2VxdWVuY2UgbnVtYmVyIHRvIGNhbGN1bGF0ZSBzd2l0Y2ggc2VnbWVudCAocmVxdWlyZWQgaWYgdXNpbmcgRVhULVgtRElTQ09OVElOVUlUWS1TRVFVRU5DRSlcbiAgICAgICAgICB2YXIgdGFyZ2V0U04gPSBmcmFnUHJldmlvdXMuc24gKyAxO1xuXG4gICAgICAgICAgaWYgKHRhcmdldFNOID49IGxldmVsRGV0YWlscy5zdGFydFNOICYmIHRhcmdldFNOIDw9IGxldmVsRGV0YWlscy5lbmRTTikge1xuICAgICAgICAgICAgdmFyIGZyYWdOZXh0ID0gZnJhZ21lbnRzW3RhcmdldFNOIC0gbGV2ZWxEZXRhaWxzLnN0YXJ0U05dO1xuXG4gICAgICAgICAgICBpZiAoZnJhZ1ByZXZpb3VzLmNjID09PSBmcmFnTmV4dC5jYykge1xuICAgICAgICAgICAgICBmcmFnID0gZnJhZ05leHQ7XG4gICAgICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJsaXZlIHBsYXlsaXN0LCBzd2l0Y2hpbmcgcGxheWxpc3QsIGxvYWQgZnJhZyB3aXRoIG5leHQgU046IFwiICsgZnJhZy5zbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSAvLyBuZXh0IGZyYWcgU04gbm90IGF2YWlsYWJsZSAob3Igbm90IHdpdGggc2FtZSBjb250aW51aXR5IGNvdW50ZXIpXG4gICAgICAgICAgLy8gbG9vayBmb3IgYSBmcmFnIHNoYXJpbmcgdGhlIHNhbWUgQ0NcblxuXG4gICAgICAgICAgaWYgKCFmcmFnKSB7XG4gICAgICAgICAgICBmcmFnID0gYmluYXJ5X3NlYXJjaC5zZWFyY2goZnJhZ21lbnRzLCBmdW5jdGlvbiAoZnJhZykge1xuICAgICAgICAgICAgICByZXR1cm4gZnJhZ1ByZXZpb3VzLmNjIC0gZnJhZy5jYztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoZnJhZykge1xuICAgICAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKFwibGl2ZSBwbGF5bGlzdCwgc3dpdGNoaW5nIHBsYXlsaXN0LCBsb2FkIGZyYWcgd2l0aCBzYW1lIENDOiBcIiArIGZyYWcuc24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmcmFnO1xuICB9O1xuXG4gIF9wcm90by5fZmluZEZyYWdtZW50ID0gZnVuY3Rpb24gX2ZpbmRGcmFnbWVudChzdGFydCwgZnJhZ1ByZXZpb3VzTG9hZCwgZnJhZ21lbnRJbmRleFJhbmdlLCBmcmFnbWVudHMsIGJ1ZmZlckVuZCwgZW5kLCBsZXZlbERldGFpbHMpIHtcbiAgICB2YXIgY29uZmlnID0gdGhpcy5obHMuY29uZmlnO1xuICAgIHZhciBmcmFnTmV4dExvYWQ7XG5cbiAgICBpZiAoYnVmZmVyRW5kIDwgZW5kKSB7XG4gICAgICB2YXIgbG9va3VwVG9sZXJhbmNlID0gYnVmZmVyRW5kID4gZW5kIC0gY29uZmlnLm1heEZyYWdMb29rVXBUb2xlcmFuY2UgPyAwIDogY29uZmlnLm1heEZyYWdMb29rVXBUb2xlcmFuY2U7IC8vIFJlbW92ZSB0aGUgdG9sZXJhbmNlIGlmIGl0IHdvdWxkIHB1dCB0aGUgYnVmZmVyRW5kIHBhc3QgdGhlIGFjdHVhbCBlbmQgb2Ygc3RyZWFtXG4gICAgICAvLyBVc2VzIGJ1ZmZlciBhbmQgc2VxdWVuY2UgbnVtYmVyIHRvIGNhbGN1bGF0ZSBzd2l0Y2ggc2VnbWVudCAocmVxdWlyZWQgaWYgdXNpbmcgRVhULVgtRElTQ09OVElOVUlUWS1TRVFVRU5DRSlcblxuICAgICAgZnJhZ05leHRMb2FkID0gZmluZEZyYWdtZW50QnlQVFMoZnJhZ1ByZXZpb3VzTG9hZCwgZnJhZ21lbnRzLCBidWZmZXJFbmQsIGxvb2t1cFRvbGVyYW5jZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJlYWNoIGVuZCBvZiBwbGF5bGlzdFxuICAgICAgZnJhZ05leHRMb2FkID0gZnJhZ21lbnRzW2ZyYWdtZW50SW5kZXhSYW5nZSAtIDFdO1xuICAgIH1cblxuICAgIGlmIChmcmFnTmV4dExvYWQpIHtcbiAgICAgIHZhciBjdXJTTklkeCA9IGZyYWdOZXh0TG9hZC5zbiAtIGxldmVsRGV0YWlscy5zdGFydFNOO1xuICAgICAgdmFyIHNhbWVMZXZlbCA9IGZyYWdQcmV2aW91c0xvYWQgJiYgZnJhZ05leHRMb2FkLmxldmVsID09PSBmcmFnUHJldmlvdXNMb2FkLmxldmVsO1xuICAgICAgdmFyIHByZXZTbkZyYWcgPSBmcmFnbWVudHNbY3VyU05JZHggLSAxXTtcbiAgICAgIHZhciBuZXh0U25GcmFnID0gZnJhZ21lbnRzW2N1clNOSWR4ICsgMV07IC8vIGxvZ2dlci5sb2coJ2ZpbmQgU04gbWF0Y2hpbmcgd2l0aCBwb3M6JyArICBidWZmZXJFbmQgKyAnOicgKyBmcmFnLnNuKTtcblxuICAgICAgaWYgKGZyYWdQcmV2aW91c0xvYWQgJiYgZnJhZ05leHRMb2FkLnNuID09PSBmcmFnUHJldmlvdXNMb2FkLnNuKSB7XG4gICAgICAgIGlmIChzYW1lTGV2ZWwgJiYgIWZyYWdOZXh0TG9hZC5iYWNrdHJhY2tlZCkge1xuICAgICAgICAgIGlmIChmcmFnTmV4dExvYWQuc24gPCBsZXZlbERldGFpbHMuZW5kU04pIHtcbiAgICAgICAgICAgIHZhciBkZWx0YVBUUyA9IGZyYWdQcmV2aW91c0xvYWQuZGVsdGFQVFM7IC8vIGlmIHRoZXJlIGlzIGEgc2lnbmlmaWNhbnQgZGVsdGEgYmV0d2VlbiBhdWRpbyBhbmQgdmlkZW8sIGxhcmdlciB0aGFuIG1heCBhbGxvd2VkIGhvbGUsXG4gICAgICAgICAgICAvLyBhbmQgaWYgcHJldmlvdXMgcmVtdXhlZCBmcmFnbWVudCBkaWQgbm90IHN0YXJ0IHdpdGggYSBrZXlmcmFtZS4gKGZyYWdQcmV2aW91cy5kcm9wcGVkKVxuICAgICAgICAgICAgLy8gbGV0J3MgdHJ5IHRvIGxvYWQgcHJldmlvdXMgZnJhZ21lbnQgYWdhaW4gdG8gZ2V0IGxhc3Qga2V5ZnJhbWVcbiAgICAgICAgICAgIC8vIHRoZW4gd2Ugd2lsbCByZWxvYWQgYWdhaW4gY3VycmVudCBmcmFnbWVudCAodGhhdCB3YXkgd2Ugc2hvdWxkIGJlIGFibGUgdG8gZmlsbCB0aGUgYnVmZmVyIGhvbGUgLi4uKVxuXG4gICAgICAgICAgICBpZiAoZGVsdGFQVFMgJiYgZGVsdGFQVFMgPiBjb25maWcubWF4QnVmZmVySG9sZSAmJiBmcmFnUHJldmlvdXNMb2FkLmRyb3BwZWQgJiYgY3VyU05JZHgpIHtcbiAgICAgICAgICAgICAgZnJhZ05leHRMb2FkID0gcHJldlNuRnJhZztcbiAgICAgICAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLndhcm4oJ1ByZXZpb3VzIGZyYWdtZW50IHdhcyBkcm9wcGVkIHdpdGggbGFyZ2UgUFRTIGdhcCBiZXR3ZWVuIGF1ZGlvIGFuZCB2aWRlby4gTWF5YmUgZnJhZ21lbnQgaXMgbm90IHN0YXJ0aW5nIHdpdGggYSBrZXlmcmFtZT8gTG9hZGluZyBwcmV2aW91cyBvbmUgdG8gdHJ5IHRvIG92ZXJjb21lIHRoaXMnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGZyYWdOZXh0TG9hZCA9IG5leHRTbkZyYWc7XG5cbiAgICAgICAgICAgICAgaWYgKHRoaXMuZnJhZ21lbnRUcmFja2VyLmdldFN0YXRlKGZyYWdOZXh0TG9hZCkgIT09IEZyYWdtZW50U3RhdGUuT0spIHtcbiAgICAgICAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKFwiUmUtbG9hZGluZyBmcmFnbWVudCB3aXRoIFNOOiBcIiArIGZyYWdOZXh0TG9hZC5zbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZnJhZ05leHRMb2FkID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZnJhZ05leHRMb2FkLmJhY2t0cmFja2VkKSB7XG4gICAgICAgICAgLy8gT25seSBiYWNrdHJhY2sgYSBtYXggb2YgMSBjb25zZWN1dGl2ZSBmcmFnbWVudCB0byBwcmV2ZW50IHNsaWRpbmcgYmFjayB0b28gZmFyIHdoZW4gbGl0dGxlIG9yIG5vIGZyYWdzIHN0YXJ0IHdpdGgga2V5ZnJhbWVzXG4gICAgICAgICAgaWYgKG5leHRTbkZyYWcgJiYgbmV4dFNuRnJhZy5iYWNrdHJhY2tlZCkge1xuICAgICAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLndhcm4oXCJBbHJlYWR5IGJhY2t0cmFja2VkIGZyb20gZnJhZ21lbnQgXCIgKyBuZXh0U25GcmFnLnNuICsgXCIsIHdpbGwgbm90IGJhY2t0cmFjayB0byBmcmFnbWVudCBcIiArIGZyYWdOZXh0TG9hZC5zbiArIFwiLiBMb2FkaW5nIGZyYWdtZW50IFwiICsgbmV4dFNuRnJhZy5zbik7XG4gICAgICAgICAgICBmcmFnTmV4dExvYWQgPSBuZXh0U25GcmFnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJZiBhIGZyYWdtZW50IGhhcyBkcm9wcGVkIGZyYW1lcyBhbmQgaXQncyBpbiBhIHNhbWUgbGV2ZWwvc2VxdWVuY2UsIGxvYWQgdGhlIHByZXZpb3VzIGZyYWdtZW50IHRvIHRyeSBhbmQgZmluZCB0aGUga2V5ZnJhbWVcbiAgICAgICAgICAgIC8vIFJlc2V0IHRoZSBkcm9wcGVkIGNvdW50IG5vdyBzaW5jZSBpdCB3b24ndCBiZSByZXNldCB1bnRpbCB3ZSBwYXJzZSB0aGUgZnJhZ21lbnQgYWdhaW4sIHdoaWNoIHByZXZlbnRzIGluZmluaXRlIGJhY2t0cmFja2luZyBvbiB0aGUgc2FtZSBzZWdtZW50XG4gICAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ud2FybignTG9hZGVkIGZyYWdtZW50IHdpdGggZHJvcHBlZCBmcmFtZXMsIGJhY2t0cmFja2luZyAxIHNlZ21lbnQgdG8gZmluZCBhIGtleWZyYW1lJyk7XG4gICAgICAgICAgICBmcmFnTmV4dExvYWQuZHJvcHBlZCA9IDA7XG5cbiAgICAgICAgICAgIGlmIChwcmV2U25GcmFnKSB7XG4gICAgICAgICAgICAgIGZyYWdOZXh0TG9hZCA9IHByZXZTbkZyYWc7XG4gICAgICAgICAgICAgIGZyYWdOZXh0TG9hZC5iYWNrdHJhY2tlZCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGN1clNOSWR4KSB7XG4gICAgICAgICAgICAgIC8vIGNhbid0IGJhY2t0cmFjayBvbiB2ZXJ5IGZpcnN0IGZyYWdtZW50XG4gICAgICAgICAgICAgIGZyYWdOZXh0TG9hZCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZyYWdOZXh0TG9hZDtcbiAgfTtcblxuICBfcHJvdG8uX2xvYWRLZXkgPSBmdW5jdGlvbiBfbG9hZEtleShmcmFnLCBsZXZlbERldGFpbHMpIHtcbiAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKFwiTG9hZGluZyBrZXkgZm9yIFwiICsgZnJhZy5zbiArIFwiIG9mIFtcIiArIGxldmVsRGV0YWlscy5zdGFydFNOICsgXCItXCIgKyBsZXZlbERldGFpbHMuZW5kU04gKyBcIl0sIGxldmVsIFwiICsgdGhpcy5sZXZlbCk7XG4gICAgdGhpcy5zdGF0ZSA9IFN0YXRlLktFWV9MT0FESU5HO1xuICAgIHRoaXMuaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5LRVlfTE9BRElORywge1xuICAgICAgZnJhZzogZnJhZ1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5fbG9hZEZyYWdtZW50ID0gZnVuY3Rpb24gX2xvYWRGcmFnbWVudChmcmFnLCBsZXZlbERldGFpbHMsIHBvcywgYnVmZmVyRW5kKSB7XG4gICAgLy8gQ2hlY2sgaWYgZnJhZ21lbnQgaXMgbm90IGxvYWRlZFxuICAgIHZhciBmcmFnU3RhdGUgPSB0aGlzLmZyYWdtZW50VHJhY2tlci5nZXRTdGF0ZShmcmFnKTtcbiAgICB0aGlzLmZyYWdDdXJyZW50ID0gZnJhZztcblxuICAgIGlmIChmcmFnLnNuICE9PSAnaW5pdFNlZ21lbnQnKSB7XG4gICAgICB0aGlzLnN0YXJ0RnJhZ1JlcXVlc3RlZCA9IHRydWU7XG4gICAgfSAvLyBEb24ndCB1cGRhdGUgbmV4dExvYWRQb3NpdGlvbiBmb3IgZnJhZ21lbnRzIHdoaWNoIGFyZSBub3QgYnVmZmVyZWRcblxuXG4gICAgaWYgKE9iamVjdChudW1iZXJbXCJpc0Zpbml0ZU51bWJlclwiXSkoZnJhZy5zbikgJiYgIWZyYWcuYml0cmF0ZVRlc3QpIHtcbiAgICAgIHRoaXMubmV4dExvYWRQb3NpdGlvbiA9IGZyYWcuc3RhcnQgKyBmcmFnLmR1cmF0aW9uO1xuICAgIH0gLy8gQWxsb3cgYmFja3RyYWNrZWQgZnJhZ21lbnRzIHRvIGxvYWRcblxuXG4gICAgaWYgKGZyYWcuYmFja3RyYWNrZWQgfHwgZnJhZ1N0YXRlID09PSBGcmFnbWVudFN0YXRlLk5PVF9MT0FERUQgfHwgZnJhZ1N0YXRlID09PSBGcmFnbWVudFN0YXRlLlBBUlRJQUwpIHtcbiAgICAgIGZyYWcuYXV0b0xldmVsID0gdGhpcy5obHMuYXV0b0xldmVsRW5hYmxlZDtcbiAgICAgIGZyYWcuYml0cmF0ZVRlc3QgPSB0aGlzLmJpdHJhdGVUZXN0O1xuICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyhcIkxvYWRpbmcgXCIgKyBmcmFnLnNuICsgXCIgb2YgW1wiICsgbGV2ZWxEZXRhaWxzLnN0YXJ0U04gKyBcIi1cIiArIGxldmVsRGV0YWlscy5lbmRTTiArIFwiXSwgbGV2ZWwgXCIgKyB0aGlzLmxldmVsICsgXCIsIFwiICsgKHRoaXMubG9hZGVkbWV0YWRhdGEgPyAnY3VycmVudFRpbWUnIDogJ25leHRMb2FkUG9zaXRpb24nKSArIFwiOiBcIiArIHBhcnNlRmxvYXQocG9zLnRvRml4ZWQoMykpICsgXCIsIGJ1ZmZlckVuZDogXCIgKyBwYXJzZUZsb2F0KGJ1ZmZlckVuZC50b0ZpeGVkKDMpKSk7XG4gICAgICB0aGlzLmhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uRlJBR19MT0FESU5HLCB7XG4gICAgICAgIGZyYWc6IGZyYWdcbiAgICAgIH0pOyAvLyBsYXp5IGRlbXV4ZXIgaW5pdCwgYXMgdGhpcyBjb3VsZCB0YWtlIHNvbWUgdGltZSAuLi4gZG8gaXQgZHVyaW5nIGZyYWcgbG9hZGluZ1xuXG4gICAgICBpZiAoIXRoaXMuZGVtdXhlcikge1xuICAgICAgICB0aGlzLmRlbXV4ZXIgPSBuZXcgZGVtdXhfZGVtdXhlcih0aGlzLmhscywgJ21haW4nKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkZSQUdfTE9BRElORztcbiAgICB9IGVsc2UgaWYgKGZyYWdTdGF0ZSA9PT0gRnJhZ21lbnRTdGF0ZS5BUFBFTkRJTkcpIHtcbiAgICAgIC8vIExvd2VyIHRoZSBidWZmZXIgc2l6ZSBhbmQgdHJ5IGFnYWluXG4gICAgICBpZiAodGhpcy5fcmVkdWNlTWF4QnVmZmVyTGVuZ3RoKGZyYWcuZHVyYXRpb24pKSB7XG4gICAgICAgIHRoaXMuZnJhZ21lbnRUcmFja2VyLnJlbW92ZUZyYWdtZW50KGZyYWcpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZ2V0QnVmZmVyZWRGcmFnID0gZnVuY3Rpb24gZ2V0QnVmZmVyZWRGcmFnKHBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZnJhZ21lbnRUcmFja2VyLmdldEJ1ZmZlcmVkRnJhZyhwb3NpdGlvbiwgUGxheWxpc3RMZXZlbFR5cGUuTUFJTik7XG4gIH07XG5cbiAgX3Byb3RvLmZvbGxvd2luZ0J1ZmZlcmVkRnJhZyA9IGZ1bmN0aW9uIGZvbGxvd2luZ0J1ZmZlcmVkRnJhZyhmcmFnKSB7XG4gICAgaWYgKGZyYWcpIHtcbiAgICAgIC8vIHRyeSB0byBnZXQgcmFuZ2Ugb2YgbmV4dCBmcmFnbWVudCAoNTAwbXMgYWZ0ZXIgdGhpcyByYW5nZSlcbiAgICAgIHJldHVybiB0aGlzLmdldEJ1ZmZlcmVkRnJhZyhmcmFnLmVuZFBUUyArIDAuNSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgX3Byb3RvLl9jaGVja0ZyYWdtZW50Q2hhbmdlZCA9IGZ1bmN0aW9uIF9jaGVja0ZyYWdtZW50Q2hhbmdlZCgpIHtcbiAgICB2YXIgZnJhZ1BsYXlpbmdDdXJyZW50LFxuICAgICAgICBjdXJyZW50VGltZSxcbiAgICAgICAgdmlkZW8gPSB0aGlzLm1lZGlhO1xuXG4gICAgaWYgKHZpZGVvICYmIHZpZGVvLnJlYWR5U3RhdGUgJiYgdmlkZW8uc2Vla2luZyA9PT0gZmFsc2UpIHtcbiAgICAgIGN1cnJlbnRUaW1lID0gdmlkZW8uY3VycmVudFRpbWU7XG4gICAgICAvKiBpZiB2aWRlbyBlbGVtZW50IGlzIGluIHNlZWtlZCBzdGF0ZSwgY3VycmVudFRpbWUgY2FuIG9ubHkgaW5jcmVhc2UuXG4gICAgICAgIChhc3N1bWluZyB0aGF0IHBsYXliYWNrIHJhdGUgaXMgcG9zaXRpdmUgLi4uKVxuICAgICAgICBBcyBzb21ldGltZXMgY3VycmVudFRpbWUganVtcHMgYmFjayB0byB6ZXJvIGFmdGVyIGFcbiAgICAgICAgbWVkaWEgZGVjb2RlIGVycm9yLCBjaGVjayB0aGlzLCB0byBhdm9pZCBzZWVraW5nIGJhY2sgdG9cbiAgICAgICAgd3JvbmcgcG9zaXRpb24gYWZ0ZXIgYSBtZWRpYSBkZWNvZGUgZXJyb3JcbiAgICAgICovXG5cbiAgICAgIGlmIChjdXJyZW50VGltZSA+IHRoaXMubGFzdEN1cnJlbnRUaW1lKSB7XG4gICAgICAgIHRoaXMubGFzdEN1cnJlbnRUaW1lID0gY3VycmVudFRpbWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChCdWZmZXJIZWxwZXIuaXNCdWZmZXJlZCh2aWRlbywgY3VycmVudFRpbWUpKSB7XG4gICAgICAgIGZyYWdQbGF5aW5nQ3VycmVudCA9IHRoaXMuZ2V0QnVmZmVyZWRGcmFnKGN1cnJlbnRUaW1lKTtcbiAgICAgIH0gZWxzZSBpZiAoQnVmZmVySGVscGVyLmlzQnVmZmVyZWQodmlkZW8sIGN1cnJlbnRUaW1lICsgMC4xKSkge1xuICAgICAgICAvKiBlbnN1cmUgdGhhdCBGUkFHX0NIQU5HRUQgZXZlbnQgaXMgdHJpZ2dlcmVkIGF0IHN0YXJ0dXAsXG4gICAgICAgICAgd2hlbiBmaXJzdCB2aWRlbyBmcmFtZSBpcyBkaXNwbGF5ZWQgYW5kIHBsYXliYWNrIGlzIHBhdXNlZC5cbiAgICAgICAgICBhZGQgYSB0b2xlcmFuY2Ugb2YgMTAwbXMsIGluIGNhc2UgY3VycmVudCBwb3NpdGlvbiBpcyBub3QgYnVmZmVyZWQsXG4gICAgICAgICAgY2hlY2sgaWYgY3VycmVudCBwb3MrMTAwbXMgaXMgYnVmZmVyZWQgYW5kIHVzZSB0aGF0IGJ1ZmZlciByYW5nZVxuICAgICAgICAgIGZvciBGUkFHX0NIQU5HRUQgZXZlbnQgcmVwb3J0aW5nICovXG4gICAgICAgIGZyYWdQbGF5aW5nQ3VycmVudCA9IHRoaXMuZ2V0QnVmZmVyZWRGcmFnKGN1cnJlbnRUaW1lICsgMC4xKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZyYWdQbGF5aW5nQ3VycmVudCkge1xuICAgICAgICB2YXIgZnJhZ1BsYXlpbmcgPSBmcmFnUGxheWluZ0N1cnJlbnQ7XG5cbiAgICAgICAgaWYgKGZyYWdQbGF5aW5nICE9PSB0aGlzLmZyYWdQbGF5aW5nKSB7XG4gICAgICAgICAgdGhpcy5obHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkZSQUdfQ0hBTkdFRCwge1xuICAgICAgICAgICAgZnJhZzogZnJhZ1BsYXlpbmdcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgZnJhZ1BsYXlpbmdMZXZlbCA9IGZyYWdQbGF5aW5nLmxldmVsO1xuXG4gICAgICAgICAgaWYgKCF0aGlzLmZyYWdQbGF5aW5nIHx8IHRoaXMuZnJhZ1BsYXlpbmcubGV2ZWwgIT09IGZyYWdQbGF5aW5nTGV2ZWwpIHtcbiAgICAgICAgICAgIHRoaXMuaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5MRVZFTF9TV0lUQ0hFRCwge1xuICAgICAgICAgICAgICBsZXZlbDogZnJhZ1BsYXlpbmdMZXZlbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5mcmFnUGxheWluZyA9IGZyYWdQbGF5aW5nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qXG4gICAgb24gaW1tZWRpYXRlIGxldmVsIHN3aXRjaCA6XG4gICAgIC0gcGF1c2UgcGxheWJhY2sgaWYgcGxheWluZ1xuICAgICAtIGNhbmNlbCBhbnkgcGVuZGluZyBsb2FkIHJlcXVlc3RcbiAgICAgLSBhbmQgdHJpZ2dlciBhIGJ1ZmZlciBmbHVzaFxuICAqL1xuICA7XG5cbiAgX3Byb3RvLmltbWVkaWF0ZUxldmVsU3dpdGNoID0gZnVuY3Rpb24gaW1tZWRpYXRlTGV2ZWxTd2l0Y2goKSB7XG4gICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZygnaW1tZWRpYXRlTGV2ZWxTd2l0Y2gnKTtcblxuICAgIGlmICghdGhpcy5pbW1lZGlhdGVTd2l0Y2gpIHtcbiAgICAgIHRoaXMuaW1tZWRpYXRlU3dpdGNoID0gdHJ1ZTtcbiAgICAgIHZhciBtZWRpYSA9IHRoaXMubWVkaWEsXG4gICAgICAgICAgcHJldmlvdXNseVBhdXNlZDtcblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIHByZXZpb3VzbHlQYXVzZWQgPSBtZWRpYS5wYXVzZWQ7XG5cbiAgICAgICAgaWYgKCFwcmV2aW91c2x5UGF1c2VkKSB7XG4gICAgICAgICAgbWVkaWEucGF1c2UoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZG9uJ3QgcmVzdGFydCBwbGF5YmFjayBhZnRlciBpbnN0YW50IGxldmVsIHN3aXRjaCBpbiBjYXNlIG1lZGlhIG5vdCBhdHRhY2hlZFxuICAgICAgICBwcmV2aW91c2x5UGF1c2VkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wcmV2aW91c2x5UGF1c2VkID0gcHJldmlvdXNseVBhdXNlZDtcbiAgICB9XG5cbiAgICB2YXIgZnJhZ0N1cnJlbnQgPSB0aGlzLmZyYWdDdXJyZW50O1xuXG4gICAgaWYgKGZyYWdDdXJyZW50ICYmIGZyYWdDdXJyZW50LmxvYWRlcikge1xuICAgICAgZnJhZ0N1cnJlbnQubG9hZGVyLmFib3J0KCk7XG4gICAgfVxuXG4gICAgdGhpcy5mcmFnQ3VycmVudCA9IG51bGw7IC8vIGZsdXNoIGV2ZXJ5dGhpbmdcblxuICAgIHRoaXMuZmx1c2hNYWluQnVmZmVyKDAsIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSk7XG4gIH1cbiAgLyoqXG4gICAqIG9uIGltbWVkaWF0ZSBsZXZlbCBzd2l0Y2ggZW5kLCBhZnRlciBuZXcgZnJhZ21lbnQgaGFzIGJlZW4gYnVmZmVyZWQ6XG4gICAqIC0gbnVkZ2UgdmlkZW8gZGVjb2RlciBieSBzbGlnaHRseSBhZGp1c3RpbmcgdmlkZW8gY3VycmVudFRpbWUgKGlmIGN1cnJlbnRUaW1lIGJ1ZmZlcmVkKVxuICAgKiAtIHJlc3VtZSB0aGUgcGxheWJhY2sgaWYgbmVlZGVkXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmltbWVkaWF0ZUxldmVsU3dpdGNoRW5kID0gZnVuY3Rpb24gaW1tZWRpYXRlTGV2ZWxTd2l0Y2hFbmQoKSB7XG4gICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYTtcblxuICAgIGlmIChtZWRpYSAmJiBtZWRpYS5idWZmZXJlZC5sZW5ndGgpIHtcbiAgICAgIHRoaXMuaW1tZWRpYXRlU3dpdGNoID0gZmFsc2U7XG5cbiAgICAgIGlmIChtZWRpYS5jdXJyZW50VGltZSA+IDAgJiYgQnVmZmVySGVscGVyLmlzQnVmZmVyZWQobWVkaWEsIG1lZGlhLmN1cnJlbnRUaW1lKSkge1xuICAgICAgICAvLyBvbmx5IG51ZGdlIGlmIGN1cnJlbnRUaW1lIGlzIGJ1ZmZlcmVkXG4gICAgICAgIG1lZGlhLmN1cnJlbnRUaW1lIC09IDAuMDAwMTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLnByZXZpb3VzbHlQYXVzZWQpIHtcbiAgICAgICAgbWVkaWEucGxheSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogdHJ5IHRvIHN3aXRjaCBBU0FQIHdpdGhvdXQgYnJlYWtpbmcgdmlkZW8gcGxheWJhY2s6XG4gICAqIGluIG9yZGVyIHRvIGVuc3VyZSBzbW9vdGggYnV0IHF1aWNrIGxldmVsIHN3aXRjaGluZyxcbiAgICogd2UgbmVlZCB0byBmaW5kIHRoZSBuZXh0IGZsdXNoYWJsZSBidWZmZXIgcmFuZ2VcbiAgICogd2Ugc2hvdWxkIHRha2UgaW50byBhY2NvdW50IG5ldyBzZWdtZW50IGZldGNoIHRpbWVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ubmV4dExldmVsU3dpdGNoID0gZnVuY3Rpb24gbmV4dExldmVsU3dpdGNoKCkge1xuICAgIHZhciBtZWRpYSA9IHRoaXMubWVkaWE7IC8vIGVuc3VyZSB0aGF0IG1lZGlhIGlzIGRlZmluZWQgYW5kIHRoYXQgbWV0YWRhdGEgYXJlIGF2YWlsYWJsZSAodG8gcmV0cmlldmUgY3VycmVudFRpbWUpXG5cbiAgICBpZiAobWVkaWEgJiYgbWVkaWEucmVhZHlTdGF0ZSkge1xuICAgICAgdmFyIGZldGNoZGVsYXk7XG4gICAgICB2YXIgZnJhZ1BsYXlpbmdDdXJyZW50ID0gdGhpcy5nZXRCdWZmZXJlZEZyYWcobWVkaWEuY3VycmVudFRpbWUpO1xuXG4gICAgICBpZiAoZnJhZ1BsYXlpbmdDdXJyZW50ICYmIGZyYWdQbGF5aW5nQ3VycmVudC5zdGFydFBUUyA+IDEpIHtcbiAgICAgICAgLy8gZmx1c2ggYnVmZmVyIHByZWNlZGluZyBjdXJyZW50IGZyYWdtZW50IChmbHVzaCB1bnRpbCBjdXJyZW50IGZyYWdtZW50IHN0YXJ0IG9mZnNldClcbiAgICAgICAgLy8gbWludXMgMXMgdG8gYXZvaWQgdmlkZW8gZnJlZXppbmcsIHRoYXQgY291bGQgaGFwcGVuIGlmIHdlIGZsdXNoIGtleWZyYW1lIG9mIGN1cnJlbnQgdmlkZW8gLi4uXG4gICAgICAgIHRoaXMuZmx1c2hNYWluQnVmZmVyKDAsIGZyYWdQbGF5aW5nQ3VycmVudC5zdGFydFBUUyAtIDEpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW1lZGlhLnBhdXNlZCkge1xuICAgICAgICAvLyBhZGQgYSBzYWZldHkgZGVsYXkgb2YgMXNcbiAgICAgICAgdmFyIG5leHRMZXZlbElkID0gdGhpcy5obHMubmV4dExvYWRMZXZlbCxcbiAgICAgICAgICAgIG5leHRMZXZlbCA9IHRoaXMubGV2ZWxzW25leHRMZXZlbElkXSxcbiAgICAgICAgICAgIGZyYWdMYXN0S2JwcyA9IHRoaXMuZnJhZ0xhc3RLYnBzO1xuXG4gICAgICAgIGlmIChmcmFnTGFzdEticHMgJiYgdGhpcy5mcmFnQ3VycmVudCkge1xuICAgICAgICAgIGZldGNoZGVsYXkgPSB0aGlzLmZyYWdDdXJyZW50LmR1cmF0aW9uICogbmV4dExldmVsLmJpdHJhdGUgLyAoMTAwMCAqIGZyYWdMYXN0S2JwcykgKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZldGNoZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmZXRjaGRlbGF5ID0gMDtcbiAgICAgIH0gLy8gbG9nZ2VyLmxvZygnZmV0Y2hkZWxheTonK2ZldGNoZGVsYXkpO1xuICAgICAgLy8gZmluZCBidWZmZXIgcmFuZ2UgdGhhdCB3aWxsIGJlIHJlYWNoZWQgb25jZSBuZXcgZnJhZ21lbnQgd2lsbCBiZSBmZXRjaGVkXG5cblxuICAgICAgdmFyIGJ1ZmZlcmVkRnJhZyA9IHRoaXMuZ2V0QnVmZmVyZWRGcmFnKG1lZGlhLmN1cnJlbnRUaW1lICsgZmV0Y2hkZWxheSk7XG5cbiAgICAgIGlmIChidWZmZXJlZEZyYWcpIHtcbiAgICAgICAgLy8gd2UgY2FuIGZsdXNoIGJ1ZmZlciByYW5nZSBmb2xsb3dpbmcgdGhpcyBvbmUgd2l0aG91dCBzdGFsbGluZyBwbGF5YmFja1xuICAgICAgICB2YXIgbmV4dEJ1ZmZlcmVkRnJhZyA9IHRoaXMuZm9sbG93aW5nQnVmZmVyZWRGcmFnKGJ1ZmZlcmVkRnJhZyk7XG5cbiAgICAgICAgaWYgKG5leHRCdWZmZXJlZEZyYWcpIHtcbiAgICAgICAgICAvLyBpZiB3ZSBhcmUgaGVyZSwgd2UgY2FuIGFsc28gY2FuY2VsIGFueSBsb2FkaW5nL2RlbXV4aW5nIGluIHByb2dyZXNzLCBhcyB0aGV5IGFyZSB1c2VsZXNzXG4gICAgICAgICAgdmFyIGZyYWdDdXJyZW50ID0gdGhpcy5mcmFnQ3VycmVudDtcblxuICAgICAgICAgIGlmIChmcmFnQ3VycmVudCAmJiBmcmFnQ3VycmVudC5sb2FkZXIpIHtcbiAgICAgICAgICAgIGZyYWdDdXJyZW50LmxvYWRlci5hYm9ydCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuZnJhZ0N1cnJlbnQgPSBudWxsOyAvLyBzdGFydCBmbHVzaCBwb3NpdGlvbiBpcyB0aGUgc3RhcnQgUFRTIG9mIG5leHQgYnVmZmVyZWQgZnJhZy5cbiAgICAgICAgICAvLyB3ZSB1c2UgZnJhZy5uYXhTdGFydFBUUyB3aGljaCBpcyBtYXgoYXVkaW8gc3RhcnRQVFMsIHZpZGVvIHN0YXJ0UFRTKS5cbiAgICAgICAgICAvLyBpbiBjYXNlIHRoZXJlIGlzIGEgc21hbGwgUFRTIERlbHRhIGJldHdlZW4gYXVkaW8gYW5kIHZpZGVvLCB1c2luZyBtYXhTdGFydFBUUyBhdm9pZHMgZmx1c2hpbmcgbGFzdCBzYW1wbGVzIGZyb20gY3VycmVudCBmcmFnbWVudFxuXG4gICAgICAgICAgdmFyIHN0YXJ0UHRzID0gTWF0aC5tYXgoYnVmZmVyZWRGcmFnLmVuZFBUUywgbmV4dEJ1ZmZlcmVkRnJhZy5tYXhTdGFydFBUUyArIE1hdGgubWluKHRoaXMuY29uZmlnLm1heEZyYWdMb29rVXBUb2xlcmFuY2UsIG5leHRCdWZmZXJlZEZyYWcuZHVyYXRpb24pKTtcbiAgICAgICAgICB0aGlzLmZsdXNoTWFpbkJ1ZmZlcihzdGFydFB0cywgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZmx1c2hNYWluQnVmZmVyID0gZnVuY3Rpb24gZmx1c2hNYWluQnVmZmVyKHN0YXJ0T2Zmc2V0LCBlbmRPZmZzZXQpIHtcbiAgICB0aGlzLnN0YXRlID0gU3RhdGUuQlVGRkVSX0ZMVVNISU5HO1xuICAgIHZhciBmbHVzaFNjb3BlID0ge1xuICAgICAgc3RhcnRPZmZzZXQ6IHN0YXJ0T2Zmc2V0LFxuICAgICAgZW5kT2Zmc2V0OiBlbmRPZmZzZXRcbiAgICB9OyAvLyBpZiBhbHRlcm5hdGUgYXVkaW8gdHJhY2tzIGFyZSB1c2VkLCBvbmx5IGZsdXNoIHZpZGVvLCBvdGhlcndpc2UgZmx1c2ggZXZlcnl0aGluZ1xuXG4gICAgaWYgKHRoaXMuYWx0QXVkaW8pIHtcbiAgICAgIGZsdXNoU2NvcGUudHlwZSA9ICd2aWRlbyc7XG4gICAgfVxuXG4gICAgdGhpcy5obHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkJVRkZFUl9GTFVTSElORywgZmx1c2hTY29wZSk7XG4gIH07XG5cbiAgX3Byb3RvLm9uTWVkaWFBdHRhY2hlZCA9IGZ1bmN0aW9uIG9uTWVkaWFBdHRhY2hlZChkYXRhKSB7XG4gICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYSA9IHRoaXMubWVkaWFCdWZmZXIgPSBkYXRhLm1lZGlhO1xuICAgIHRoaXMub252c2Vla2luZyA9IHRoaXMub25NZWRpYVNlZWtpbmcuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9udnNlZWtlZCA9IHRoaXMub25NZWRpYVNlZWtlZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMub252ZW5kZWQgPSB0aGlzLm9uTWVkaWFFbmRlZC5iaW5kKHRoaXMpO1xuICAgIG1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ3NlZWtpbmcnLCB0aGlzLm9udnNlZWtpbmcpO1xuICAgIG1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ3NlZWtlZCcsIHRoaXMub252c2Vla2VkKTtcbiAgICBtZWRpYS5hZGRFdmVudExpc3RlbmVyKCdlbmRlZCcsIHRoaXMub252ZW5kZWQpO1xuICAgIHZhciBjb25maWcgPSB0aGlzLmNvbmZpZztcblxuICAgIGlmICh0aGlzLmxldmVscyAmJiBjb25maWcuYXV0b1N0YXJ0TG9hZCkge1xuICAgICAgdGhpcy5obHMuc3RhcnRMb2FkKGNvbmZpZy5zdGFydFBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICB0aGlzLmdhcENvbnRyb2xsZXIgPSBuZXcgZ2FwX2NvbnRyb2xsZXJfR2FwQ29udHJvbGxlcihjb25maWcsIG1lZGlhLCB0aGlzLmZyYWdtZW50VHJhY2tlciwgdGhpcy5obHMpO1xuICB9O1xuXG4gIF9wcm90by5vbk1lZGlhRGV0YWNoaW5nID0gZnVuY3Rpb24gb25NZWRpYURldGFjaGluZygpIHtcbiAgICB2YXIgbWVkaWEgPSB0aGlzLm1lZGlhO1xuXG4gICAgaWYgKG1lZGlhICYmIG1lZGlhLmVuZGVkKSB7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKCdNU0UgZGV0YWNoaW5nIGFuZCB2aWRlbyBlbmRlZCwgcmVzZXQgc3RhcnRQb3NpdGlvbicpO1xuICAgICAgdGhpcy5zdGFydFBvc2l0aW9uID0gdGhpcy5sYXN0Q3VycmVudFRpbWUgPSAwO1xuICAgIH0gLy8gcmVzZXQgZnJhZ21lbnQgYmFja3RyYWNrZWQgZmxhZ1xuXG5cbiAgICB2YXIgbGV2ZWxzID0gdGhpcy5sZXZlbHM7XG5cbiAgICBpZiAobGV2ZWxzKSB7XG4gICAgICBsZXZlbHMuZm9yRWFjaChmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICAgICAgaWYgKGxldmVsLmRldGFpbHMpIHtcbiAgICAgICAgICBsZXZlbC5kZXRhaWxzLmZyYWdtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChmcmFnbWVudCkge1xuICAgICAgICAgICAgZnJhZ21lbnQuYmFja3RyYWNrZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gLy8gcmVtb3ZlIHZpZGVvIGxpc3RlbmVyc1xuXG5cbiAgICBpZiAobWVkaWEpIHtcbiAgICAgIG1lZGlhLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3NlZWtpbmcnLCB0aGlzLm9udnNlZWtpbmcpO1xuICAgICAgbWVkaWEucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Vla2VkJywgdGhpcy5vbnZzZWVrZWQpO1xuICAgICAgbWVkaWEucmVtb3ZlRXZlbnRMaXN0ZW5lcignZW5kZWQnLCB0aGlzLm9udmVuZGVkKTtcbiAgICAgIHRoaXMub252c2Vla2luZyA9IHRoaXMub252c2Vla2VkID0gdGhpcy5vbnZlbmRlZCA9IG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy5mcmFnbWVudFRyYWNrZXIucmVtb3ZlQWxsRnJhZ21lbnRzKCk7XG4gICAgdGhpcy5tZWRpYSA9IHRoaXMubWVkaWFCdWZmZXIgPSBudWxsO1xuICAgIHRoaXMubG9hZGVkbWV0YWRhdGEgPSBmYWxzZTtcbiAgICB0aGlzLnN0b3BMb2FkKCk7XG4gIH07XG5cbiAgX3Byb3RvLm9uTWVkaWFTZWVrZWQgPSBmdW5jdGlvbiBvbk1lZGlhU2Vla2VkKCkge1xuICAgIHZhciBtZWRpYSA9IHRoaXMubWVkaWE7XG4gICAgdmFyIGN1cnJlbnRUaW1lID0gbWVkaWEgPyBtZWRpYS5jdXJyZW50VGltZSA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChPYmplY3QobnVtYmVyW1wiaXNGaW5pdGVOdW1iZXJcIl0pKGN1cnJlbnRUaW1lKSkge1xuICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyhcIm1lZGlhIHNlZWtlZCB0byBcIiArIGN1cnJlbnRUaW1lLnRvRml4ZWQoMykpO1xuICAgIH0gLy8gdGljayB0byBzcGVlZCB1cCBGUkFHTUVOVF9QTEFZSU5HIHRyaWdnZXJpbmdcblxuXG4gICAgdGhpcy50aWNrKCk7XG4gIH07XG5cbiAgX3Byb3RvLm9uTWFuaWZlc3RMb2FkaW5nID0gZnVuY3Rpb24gb25NYW5pZmVzdExvYWRpbmcoKSB7XG4gICAgLy8gcmVzZXQgYnVmZmVyIG9uIG1hbmlmZXN0IGxvYWRpbmdcbiAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKCd0cmlnZ2VyIEJVRkZFUl9SRVNFVCcpO1xuICAgIHRoaXMuaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5CVUZGRVJfUkVTRVQpO1xuICAgIHRoaXMuZnJhZ21lbnRUcmFja2VyLnJlbW92ZUFsbEZyYWdtZW50cygpO1xuICAgIHRoaXMuc3RhbGxlZCA9IGZhbHNlO1xuICAgIHRoaXMuc3RhcnRQb3NpdGlvbiA9IHRoaXMubGFzdEN1cnJlbnRUaW1lID0gMDtcbiAgfTtcblxuICBfcHJvdG8ub25NYW5pZmVzdFBhcnNlZCA9IGZ1bmN0aW9uIG9uTWFuaWZlc3RQYXJzZWQoZGF0YSkge1xuICAgIHZhciBhYWMgPSBmYWxzZSxcbiAgICAgICAgaGVhYWMgPSBmYWxzZSxcbiAgICAgICAgY29kZWM7XG4gICAgZGF0YS5sZXZlbHMuZm9yRWFjaChmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICAgIC8vIGRldGVjdCBpZiB3ZSBoYXZlIGRpZmZlcmVudCBraW5kIG9mIGF1ZGlvIGNvZGVjcyB1c2VkIGFtb25nc3QgcGxheWxpc3RzXG4gICAgICBjb2RlYyA9IGxldmVsLmF1ZGlvQ29kZWM7XG5cbiAgICAgIGlmIChjb2RlYykge1xuICAgICAgICBpZiAoY29kZWMuaW5kZXhPZignbXA0YS40MC4yJykgIT09IC0xKSB7XG4gICAgICAgICAgYWFjID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb2RlYy5pbmRleE9mKCdtcDRhLjQwLjUnKSAhPT0gLTEpIHtcbiAgICAgICAgICBoZWFhYyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmF1ZGlvQ29kZWNTd2l0Y2ggPSBhYWMgJiYgaGVhYWM7XG5cbiAgICBpZiAodGhpcy5hdWRpb0NvZGVjU3dpdGNoKSB7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKCdib3RoIEFBQy9IRS1BQUMgYXVkaW8gZm91bmQgaW4gbGV2ZWxzOyBkZWNsYXJpbmcgbGV2ZWwgY29kZWMgYXMgSEUtQUFDJyk7XG4gICAgfVxuXG4gICAgdGhpcy5hbHRBdWRpbyA9IGRhdGEuYWx0QXVkaW87XG4gICAgdGhpcy5sZXZlbHMgPSBkYXRhLmxldmVscztcbiAgICB0aGlzLnN0YXJ0RnJhZ1JlcXVlc3RlZCA9IGZhbHNlO1xuICAgIHZhciBjb25maWcgPSB0aGlzLmNvbmZpZztcblxuICAgIGlmIChjb25maWcuYXV0b1N0YXJ0TG9hZCB8fCB0aGlzLmZvcmNlU3RhcnRMb2FkKSB7XG4gICAgICB0aGlzLmhscy5zdGFydExvYWQoY29uZmlnLnN0YXJ0UG9zaXRpb24pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25MZXZlbExvYWRlZCA9IGZ1bmN0aW9uIG9uTGV2ZWxMb2FkZWQoZGF0YSkge1xuICAgIHZhciBuZXdEZXRhaWxzID0gZGF0YS5kZXRhaWxzO1xuICAgIHZhciBuZXdMZXZlbElkID0gZGF0YS5sZXZlbDtcbiAgICB2YXIgbGFzdExldmVsID0gdGhpcy5sZXZlbHNbdGhpcy5sZXZlbExhc3RMb2FkZWRdO1xuICAgIHZhciBjdXJMZXZlbCA9IHRoaXMubGV2ZWxzW25ld0xldmVsSWRdO1xuICAgIHZhciBkdXJhdGlvbiA9IG5ld0RldGFpbHMudG90YWxkdXJhdGlvbjtcbiAgICB2YXIgc2xpZGluZyA9IDA7XG4gICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyhcImxldmVsIFwiICsgbmV3TGV2ZWxJZCArIFwiIGxvYWRlZCBbXCIgKyBuZXdEZXRhaWxzLnN0YXJ0U04gKyBcIixcIiArIG5ld0RldGFpbHMuZW5kU04gKyBcIl0sZHVyYXRpb246XCIgKyBkdXJhdGlvbik7XG5cbiAgICBpZiAobmV3RGV0YWlscy5saXZlIHx8IGN1ckxldmVsLmRldGFpbHMgJiYgY3VyTGV2ZWwuZGV0YWlscy5saXZlKSB7XG4gICAgICB2YXIgY3VyRGV0YWlscyA9IGN1ckxldmVsLmRldGFpbHM7XG5cbiAgICAgIGlmIChjdXJEZXRhaWxzICYmIG5ld0RldGFpbHMuZnJhZ21lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gd2UgYWxyZWFkeSBoYXZlIGRldGFpbHMgZm9yIHRoYXQgbGV2ZWwsIG1lcmdlIHRoZW1cbiAgICAgICAgbWVyZ2VEZXRhaWxzKGN1ckRldGFpbHMsIG5ld0RldGFpbHMpO1xuICAgICAgICBzbGlkaW5nID0gbmV3RGV0YWlscy5mcmFnbWVudHNbMF0uc3RhcnQ7XG4gICAgICAgIHRoaXMubGl2ZVN5bmNQb3NpdGlvbiA9IHRoaXMuY29tcHV0ZUxpdmVQb3NpdGlvbihzbGlkaW5nLCBjdXJEZXRhaWxzKTtcblxuICAgICAgICBpZiAobmV3RGV0YWlscy5QVFNLbm93biAmJiBPYmplY3QobnVtYmVyW1wiaXNGaW5pdGVOdW1iZXJcIl0pKHNsaWRpbmcpKSB7XG4gICAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyhcImxpdmUgcGxheWxpc3Qgc2xpZGluZzpcIiArIHNsaWRpbmcudG9GaXhlZCgzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZygnbGl2ZSBwbGF5bGlzdCAtIG91dGRhdGVkIFBUUywgdW5rbm93biBzbGlkaW5nJyk7XG4gICAgICAgICAgYWxpZ25TdHJlYW0odGhpcy5mcmFnUHJldmlvdXMsIGxhc3RMZXZlbCwgbmV3RGV0YWlscyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coJ2xpdmUgcGxheWxpc3QgLSBmaXJzdCBsb2FkLCB1bmtub3duIHNsaWRpbmcnKTtcbiAgICAgICAgbmV3RGV0YWlscy5QVFNLbm93biA9IGZhbHNlO1xuICAgICAgICBhbGlnblN0cmVhbSh0aGlzLmZyYWdQcmV2aW91cywgbGFzdExldmVsLCBuZXdEZXRhaWxzKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbmV3RGV0YWlscy5QVFNLbm93biA9IGZhbHNlO1xuICAgIH0gLy8gb3ZlcnJpZGUgbGV2ZWwgaW5mb1xuXG5cbiAgICBjdXJMZXZlbC5kZXRhaWxzID0gbmV3RGV0YWlscztcbiAgICB0aGlzLmxldmVsTGFzdExvYWRlZCA9IG5ld0xldmVsSWQ7XG4gICAgdGhpcy5obHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkxFVkVMX1VQREFURUQsIHtcbiAgICAgIGRldGFpbHM6IG5ld0RldGFpbHMsXG4gICAgICBsZXZlbDogbmV3TGV2ZWxJZFxuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMuc3RhcnRGcmFnUmVxdWVzdGVkID09PSBmYWxzZSkge1xuICAgICAgLy8gY29tcHV0ZSBzdGFydCBwb3NpdGlvbiBpZiBzZXQgdG8gLTEuIHVzZSBpdCBzdHJhaWdodCBhd2F5IGlmIHZhbHVlIGlzIGRlZmluZWRcbiAgICAgIGlmICh0aGlzLnN0YXJ0UG9zaXRpb24gPT09IC0xIHx8IHRoaXMubGFzdEN1cnJlbnRUaW1lID09PSAtMSkge1xuICAgICAgICAvLyBmaXJzdCwgY2hlY2sgaWYgc3RhcnQgdGltZSBvZmZzZXQgaGFzIGJlZW4gc2V0IGluIHBsYXlsaXN0LCBpZiB5ZXMsIHVzZSB0aGlzIHZhbHVlXG4gICAgICAgIHZhciBzdGFydFRpbWVPZmZzZXQgPSBuZXdEZXRhaWxzLnN0YXJ0VGltZU9mZnNldDtcblxuICAgICAgICBpZiAoT2JqZWN0KG51bWJlcltcImlzRmluaXRlTnVtYmVyXCJdKShzdGFydFRpbWVPZmZzZXQpKSB7XG4gICAgICAgICAgaWYgKHN0YXJ0VGltZU9mZnNldCA8IDApIHtcbiAgICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJuZWdhdGl2ZSBzdGFydCB0aW1lIG9mZnNldCBcIiArIHN0YXJ0VGltZU9mZnNldCArIFwiLCBjb3VudCBmcm9tIGVuZCBvZiBsYXN0IGZyYWdtZW50XCIpO1xuICAgICAgICAgICAgc3RhcnRUaW1lT2Zmc2V0ID0gc2xpZGluZyArIGR1cmF0aW9uICsgc3RhcnRUaW1lT2Zmc2V0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJzdGFydCB0aW1lIG9mZnNldCBmb3VuZCBpbiBwbGF5bGlzdCwgYWRqdXN0IHN0YXJ0UG9zaXRpb24gdG8gXCIgKyBzdGFydFRpbWVPZmZzZXQpO1xuICAgICAgICAgIHRoaXMuc3RhcnRQb3NpdGlvbiA9IHN0YXJ0VGltZU9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBpZiBsaXZlIHBsYXlsaXN0LCBzZXQgc3RhcnQgcG9zaXRpb24gdG8gYmUgZnJhZ21lbnQgTi10aGlzLmNvbmZpZy5saXZlU3luY0R1cmF0aW9uQ291bnQgKHVzdWFsbHkgMylcbiAgICAgICAgICBpZiAobmV3RGV0YWlscy5saXZlKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0UG9zaXRpb24gPSB0aGlzLmNvbXB1dGVMaXZlUG9zaXRpb24oc2xpZGluZywgbmV3RGV0YWlscyk7XG4gICAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKFwiY29uZmlndXJlIHN0YXJ0UG9zaXRpb24gdG8gXCIgKyB0aGlzLnN0YXJ0UG9zaXRpb24pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0UG9zaXRpb24gPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubGFzdEN1cnJlbnRUaW1lID0gdGhpcy5zdGFydFBvc2l0aW9uO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm5leHRMb2FkUG9zaXRpb24gPSB0aGlzLnN0YXJ0UG9zaXRpb247XG4gICAgfSAvLyBvbmx5IHN3aXRjaCBiYXRjayB0byBJRExFIHN0YXRlIGlmIHdlIHdlcmUgd2FpdGluZyBmb3IgbGV2ZWwgdG8gc3RhcnQgZG93bmxvYWRpbmcgYSBuZXcgZnJhZ21lbnRcblxuXG4gICAgaWYgKHRoaXMuc3RhdGUgPT09IFN0YXRlLldBSVRJTkdfTEVWRUwpIHtcbiAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JRExFO1xuICAgIH0gLy8gdHJpZ2dlciBoYW5kbGVyIHJpZ2h0IG5vd1xuXG5cbiAgICB0aGlzLnRpY2soKTtcbiAgfTtcblxuICBfcHJvdG8ub25LZXlMb2FkZWQgPSBmdW5jdGlvbiBvbktleUxvYWRlZCgpIHtcbiAgICBpZiAodGhpcy5zdGF0ZSA9PT0gU3RhdGUuS0VZX0xPQURJTkcpIHtcbiAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JRExFO1xuICAgICAgdGhpcy50aWNrKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vbkZyYWdMb2FkZWQgPSBmdW5jdGlvbiBvbkZyYWdMb2FkZWQoZGF0YSkge1xuICAgIHZhciBmcmFnQ3VycmVudCA9IHRoaXMuZnJhZ0N1cnJlbnQsXG4gICAgICAgIGhscyA9IHRoaXMuaGxzLFxuICAgICAgICBsZXZlbHMgPSB0aGlzLmxldmVscyxcbiAgICAgICAgbWVkaWEgPSB0aGlzLm1lZGlhO1xuICAgIHZhciBmcmFnTG9hZGVkID0gZGF0YS5mcmFnO1xuXG4gICAgaWYgKHRoaXMuc3RhdGUgPT09IFN0YXRlLkZSQUdfTE9BRElORyAmJiBmcmFnQ3VycmVudCAmJiBmcmFnTG9hZGVkLnR5cGUgPT09ICdtYWluJyAmJiBmcmFnTG9hZGVkLmxldmVsID09PSBmcmFnQ3VycmVudC5sZXZlbCAmJiBmcmFnTG9hZGVkLnNuID09PSBmcmFnQ3VycmVudC5zbikge1xuICAgICAgdmFyIHN0YXRzID0gZGF0YS5zdGF0cztcbiAgICAgIHZhciBjdXJyZW50TGV2ZWwgPSBsZXZlbHNbZnJhZ0N1cnJlbnQubGV2ZWxdO1xuICAgICAgdmFyIGRldGFpbHMgPSBjdXJyZW50TGV2ZWwuZGV0YWlsczsgLy8gcmVzZXQgZnJhZyBiaXRyYXRlIHRlc3QgaW4gYW55IGNhc2UgYWZ0ZXIgZnJhZyBsb2FkZWQgZXZlbnRcbiAgICAgIC8vIGlmIHRoaXMgZnJhZyB3YXMgbG9hZGVkIHRvIHBlcmZvcm0gYSBiaXRyYXRlIHRlc3QgQU5EIGlmIGhscy5uZXh0TG9hZExldmVsIGlzIGdyZWF0ZXIgdGhhbiAwXG4gICAgICAvLyB0aGVuIHRoaXMgbWVhbnMgdGhhdCB3ZSBzaG91bGQgYmUgYWJsZSB0byBsb2FkIGEgZnJhZ21lbnQgYXQgYSBoaWdoZXIgcXVhbGl0eSBsZXZlbFxuXG4gICAgICB0aGlzLmJpdHJhdGVUZXN0ID0gZmFsc2U7XG4gICAgICB0aGlzLnN0YXRzID0gc3RhdHM7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKFwiTG9hZGVkIFwiICsgZnJhZ0N1cnJlbnQuc24gKyBcIiBvZiBbXCIgKyBkZXRhaWxzLnN0YXJ0U04gKyBcIiAsXCIgKyBkZXRhaWxzLmVuZFNOICsgXCJdLGxldmVsIFwiICsgZnJhZ0N1cnJlbnQubGV2ZWwpO1xuXG4gICAgICBpZiAoZnJhZ0xvYWRlZC5iaXRyYXRlVGVzdCAmJiBobHMubmV4dExvYWRMZXZlbCkge1xuICAgICAgICAvLyBzd2l0Y2ggYmFjayB0byBJRExFIHN0YXRlIC4uLiB3ZSBqdXN0IGxvYWRlZCBhIGZyYWdtZW50IHRvIGRldGVybWluZSBhZGVxdWF0ZSBzdGFydCBiaXRyYXRlIGFuZCBpbml0aWFsaXplIGF1dG9zd2l0Y2ggYWxnb1xuICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSURMRTtcbiAgICAgICAgdGhpcy5zdGFydEZyYWdSZXF1ZXN0ZWQgPSBmYWxzZTtcbiAgICAgICAgc3RhdHMudHBhcnNlZCA9IHN0YXRzLnRidWZmZXJlZCA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5GUkFHX0JVRkZFUkVELCB7XG4gICAgICAgICAgc3RhdHM6IHN0YXRzLFxuICAgICAgICAgIGZyYWc6IGZyYWdDdXJyZW50LFxuICAgICAgICAgIGlkOiAnbWFpbidcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudGljaygpO1xuICAgICAgfSBlbHNlIGlmIChmcmFnTG9hZGVkLnNuID09PSAnaW5pdFNlZ21lbnQnKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JRExFO1xuICAgICAgICBzdGF0cy50cGFyc2VkID0gc3RhdHMudGJ1ZmZlcmVkID0gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICBkZXRhaWxzLmluaXRTZWdtZW50LmRhdGEgPSBkYXRhLnBheWxvYWQ7XG4gICAgICAgIGhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uRlJBR19CVUZGRVJFRCwge1xuICAgICAgICAgIHN0YXRzOiBzdGF0cyxcbiAgICAgICAgICBmcmFnOiBmcmFnQ3VycmVudCxcbiAgICAgICAgICBpZDogJ21haW4nXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRpY2soKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJQYXJzaW5nIFwiICsgZnJhZ0N1cnJlbnQuc24gKyBcIiBvZiBbXCIgKyBkZXRhaWxzLnN0YXJ0U04gKyBcIiAsXCIgKyBkZXRhaWxzLmVuZFNOICsgXCJdLGxldmVsIFwiICsgZnJhZ0N1cnJlbnQubGV2ZWwgKyBcIiwgY2MgXCIgKyBmcmFnQ3VycmVudC5jYyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5QQVJTSU5HO1xuICAgICAgICB0aGlzLnBlbmRpbmdCdWZmZXJpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmFwcGVuZGVkID0gZmFsc2U7IC8vIEJpdHJhdGUgdGVzdCBmcmFncyBhcmUgbm90IHVzdWFsbHkgYnVmZmVyZWQgc28gdGhlIGZyYWdtZW50IHRyYWNrZXIgaWdub3JlcyB0aGVtLiBJZiBIbHMuanMgZGVjaWRlcyB0byBidWZmZXJcbiAgICAgICAgLy8gaXQgKGFuZCB0aGVyZWZvcmUgZW5kcyB1cCBhdCB0aGlzIGxpbmUpLCB0aGVuIHRoZSBmcmFnbWVudCB0cmFja2VyIG5lZWRzIHRvIGJlIG1hbnVhbGx5IGluZm9ybWVkLlxuXG4gICAgICAgIGlmIChmcmFnTG9hZGVkLmJpdHJhdGVUZXN0KSB7XG4gICAgICAgICAgZnJhZ0xvYWRlZC5iaXRyYXRlVGVzdCA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuZnJhZ21lbnRUcmFja2VyLm9uRnJhZ0xvYWRlZCh7XG4gICAgICAgICAgICBmcmFnOiBmcmFnTG9hZGVkXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gLy8gdGltZSBPZmZzZXQgaXMgYWNjdXJhdGUgaWYgbGV2ZWwgUFRTIGlzIGtub3duLCBvciBpZiBwbGF5bGlzdCBpcyBub3Qgc2xpZGluZyAobm90IGxpdmUpIGFuZCBpZiBtZWRpYSBpcyBub3Qgc2Vla2luZyAodGhpcyBpcyB0byBvdmVyY29tZSBwb3RlbnRpYWwgdGltZXN0YW1wIGRyaWZ0cyBiZXR3ZWVuIHBsYXlsaXN0cyBhbmQgZnJhZ21lbnRzKVxuXG5cbiAgICAgICAgdmFyIGFjY3VyYXRlVGltZU9mZnNldCA9ICEobWVkaWEgJiYgbWVkaWEuc2Vla2luZykgJiYgKGRldGFpbHMuUFRTS25vd24gfHwgIWRldGFpbHMubGl2ZSk7XG4gICAgICAgIHZhciBpbml0U2VnbWVudERhdGEgPSBkZXRhaWxzLmluaXRTZWdtZW50ID8gZGV0YWlscy5pbml0U2VnbWVudC5kYXRhIDogW107XG5cbiAgICAgICAgdmFyIGF1ZGlvQ29kZWMgPSB0aGlzLl9nZXRBdWRpb0NvZGVjKGN1cnJlbnRMZXZlbCk7IC8vIHRyYW5zbXV4IHRoZSBNUEVHLVRTIGRhdGEgdG8gSVNPLUJNRkYgc2VnbWVudHNcblxuXG4gICAgICAgIHZhciBkZW11eGVyID0gdGhpcy5kZW11eGVyID0gdGhpcy5kZW11eGVyIHx8IG5ldyBkZW11eF9kZW11eGVyKHRoaXMuaGxzLCAnbWFpbicpO1xuICAgICAgICBkZW11eGVyLnB1c2goZGF0YS5wYXlsb2FkLCBpbml0U2VnbWVudERhdGEsIGF1ZGlvQ29kZWMsIGN1cnJlbnRMZXZlbC52aWRlb0NvZGVjLCBmcmFnQ3VycmVudCwgZGV0YWlscy50b3RhbGR1cmF0aW9uLCBhY2N1cmF0ZVRpbWVPZmZzZXQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZnJhZ0xvYWRFcnJvciA9IDA7XG4gIH07XG5cbiAgX3Byb3RvLm9uRnJhZ1BhcnNpbmdJbml0U2VnbWVudCA9IGZ1bmN0aW9uIG9uRnJhZ1BhcnNpbmdJbml0U2VnbWVudChkYXRhKSB7XG4gICAgdmFyIGZyYWdDdXJyZW50ID0gdGhpcy5mcmFnQ3VycmVudDtcbiAgICB2YXIgZnJhZ05ldyA9IGRhdGEuZnJhZztcblxuICAgIGlmIChmcmFnQ3VycmVudCAmJiBkYXRhLmlkID09PSAnbWFpbicgJiYgZnJhZ05ldy5zbiA9PT0gZnJhZ0N1cnJlbnQuc24gJiYgZnJhZ05ldy5sZXZlbCA9PT0gZnJhZ0N1cnJlbnQubGV2ZWwgJiYgdGhpcy5zdGF0ZSA9PT0gU3RhdGUuUEFSU0lORykge1xuICAgICAgdmFyIHRyYWNrcyA9IGRhdGEudHJhY2tzLFxuICAgICAgICAgIHRyYWNrTmFtZSxcbiAgICAgICAgICB0cmFjaztcbiAgICAgIHRoaXMuYXVkaW9Pbmx5ID0gdHJhY2tzLmF1ZGlvICYmICF0cmFja3MudmlkZW87IC8vIGlmIGF1ZGlvIHRyYWNrIGlzIGV4cGVjdGVkIHRvIGNvbWUgZnJvbSBhdWRpbyBzdHJlYW0gY29udHJvbGxlciwgZGlzY2FyZCBhbnkgY29taW5nIGZyb20gbWFpblxuXG4gICAgICBpZiAodGhpcy5hbHRBdWRpbyAmJiAhdGhpcy5hdWRpb09ubHkpIHtcbiAgICAgICAgZGVsZXRlIHRyYWNrcy5hdWRpbztcbiAgICAgIH0gLy8gaW5jbHVkZSBsZXZlbENvZGVjIGluIGF1ZGlvIGFuZCB2aWRlbyB0cmFja3NcblxuXG4gICAgICB0cmFjayA9IHRyYWNrcy5hdWRpbztcblxuICAgICAgaWYgKHRyYWNrKSB7XG4gICAgICAgIHZhciBhdWRpb0NvZGVjID0gdGhpcy5sZXZlbHNbdGhpcy5sZXZlbF0uYXVkaW9Db2RlYyxcbiAgICAgICAgICAgIHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIGlmIChhdWRpb0NvZGVjICYmIHRoaXMuYXVkaW9Db2RlY1N3YXApIHtcbiAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKCdzd2FwcGluZyBwbGF5bGlzdCBhdWRpbyBjb2RlYycpO1xuXG4gICAgICAgICAgaWYgKGF1ZGlvQ29kZWMuaW5kZXhPZignbXA0YS40MC41JykgIT09IC0xKSB7XG4gICAgICAgICAgICBhdWRpb0NvZGVjID0gJ21wNGEuNDAuMic7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGF1ZGlvQ29kZWMgPSAnbXA0YS40MC41JztcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gaW4gY2FzZSBBQUMgYW5kIEhFLUFBQyBhdWRpbyBjb2RlY3MgYXJlIHNpZ25hbGxlZCBpbiBtYW5pZmVzdFxuICAgICAgICAvLyBmb3JjZSBIRS1BQUMgLCBhcyBpdCBzZWVtcyB0aGF0IG1vc3QgYnJvd3NlcnMgcHJlZmVycyB0aGF0IHdheSxcbiAgICAgICAgLy8gZXhjZXB0IGZvciBtb25vIHN0cmVhbXMgT1Igb24gRkZcbiAgICAgICAgLy8gdGhlc2UgY29uZGl0aW9ucyBtaWdodCBuZWVkIHRvIGJlIHJldmlld2VkIC4uLlxuXG5cbiAgICAgICAgaWYgKHRoaXMuYXVkaW9Db2RlY1N3aXRjaCkge1xuICAgICAgICAgIC8vIGRvbid0IGZvcmNlIEhFLUFBQyBpZiBtb25vIHN0cmVhbVxuICAgICAgICAgIGlmICh0cmFjay5tZXRhZGF0YS5jaGFubmVsQ291bnQgIT09IDEgJiYgLy8gZG9uJ3QgZm9yY2UgSEUtQUFDIGlmIGZpcmVmb3hcbiAgICAgICAgICB1YS5pbmRleE9mKCdmaXJlZm94JykgPT09IC0xKSB7XG4gICAgICAgICAgICBhdWRpb0NvZGVjID0gJ21wNGEuNDAuNSc7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIEhFLUFBQyBpcyBicm9rZW4gb24gQW5kcm9pZCwgYWx3YXlzIHNpZ25hbCBhdWRpbyBjb2RlYyBhcyBBQUMgZXZlbiBpZiB2YXJpYW50IG1hbmlmZXN0IHN0YXRlcyBvdGhlcndpc2VcblxuXG4gICAgICAgIGlmICh1YS5pbmRleE9mKCdhbmRyb2lkJykgIT09IC0xICYmIHRyYWNrLmNvbnRhaW5lciAhPT0gJ2F1ZGlvL21wZWcnKSB7XG4gICAgICAgICAgLy8gRXhjbHVkZSBtcGVnIGF1ZGlvXG4gICAgICAgICAgYXVkaW9Db2RlYyA9ICdtcDRhLjQwLjInO1xuICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJBbmRyb2lkOiBmb3JjZSBhdWRpbyBjb2RlYyB0byBcIiArIGF1ZGlvQ29kZWMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJhY2subGV2ZWxDb2RlYyA9IGF1ZGlvQ29kZWM7XG4gICAgICAgIHRyYWNrLmlkID0gZGF0YS5pZDtcbiAgICAgIH1cblxuICAgICAgdHJhY2sgPSB0cmFja3MudmlkZW87XG5cbiAgICAgIGlmICh0cmFjaykge1xuICAgICAgICB0cmFjay5sZXZlbENvZGVjID0gdGhpcy5sZXZlbHNbdGhpcy5sZXZlbF0udmlkZW9Db2RlYztcbiAgICAgICAgdHJhY2suaWQgPSBkYXRhLmlkO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uQlVGRkVSX0NPREVDUywgdHJhY2tzKTsgLy8gbG9vcCB0aHJvdWdoIHRyYWNrcyB0aGF0IGFyZSBnb2luZyB0byBiZSBwcm92aWRlZCB0byBidWZmZXJDb250cm9sbGVyXG5cbiAgICAgIGZvciAodHJhY2tOYW1lIGluIHRyYWNrcykge1xuICAgICAgICB0cmFjayA9IHRyYWNrc1t0cmFja05hbWVdO1xuICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKFwibWFpbiB0cmFjazpcIiArIHRyYWNrTmFtZSArIFwiLGNvbnRhaW5lcjpcIiArIHRyYWNrLmNvbnRhaW5lciArIFwiLGNvZGVjc1tsZXZlbC9wYXJzZWRdPVtcIiArIHRyYWNrLmxldmVsQ29kZWMgKyBcIi9cIiArIHRyYWNrLmNvZGVjICsgXCJdXCIpO1xuICAgICAgICB2YXIgaW5pdFNlZ21lbnQgPSB0cmFjay5pbml0U2VnbWVudDtcblxuICAgICAgICBpZiAoaW5pdFNlZ21lbnQpIHtcbiAgICAgICAgICB0aGlzLmFwcGVuZGVkID0gdHJ1ZTsgLy8gYXJtIHBlbmRpbmcgQnVmZmVyaW5nIGZsYWcgYmVmb3JlIGFwcGVuZGluZyBhIHNlZ21lbnRcblxuICAgICAgICAgIHRoaXMucGVuZGluZ0J1ZmZlcmluZyA9IHRydWU7XG4gICAgICAgICAgdGhpcy5obHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkJVRkZFUl9BUFBFTkRJTkcsIHtcbiAgICAgICAgICAgIHR5cGU6IHRyYWNrTmFtZSxcbiAgICAgICAgICAgIGRhdGE6IGluaXRTZWdtZW50LFxuICAgICAgICAgICAgcGFyZW50OiAnbWFpbicsXG4gICAgICAgICAgICBjb250ZW50OiAnaW5pdFNlZ21lbnQnXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gdHJpZ2dlciBoYW5kbGVyIHJpZ2h0IG5vd1xuXG5cbiAgICAgIHRoaXMudGljaygpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25GcmFnUGFyc2luZ0RhdGEgPSBmdW5jdGlvbiBvbkZyYWdQYXJzaW5nRGF0YShkYXRhKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgZnJhZ0N1cnJlbnQgPSB0aGlzLmZyYWdDdXJyZW50O1xuICAgIHZhciBmcmFnTmV3ID0gZGF0YS5mcmFnO1xuXG4gICAgaWYgKGZyYWdDdXJyZW50ICYmIGRhdGEuaWQgPT09ICdtYWluJyAmJiBmcmFnTmV3LnNuID09PSBmcmFnQ3VycmVudC5zbiAmJiBmcmFnTmV3LmxldmVsID09PSBmcmFnQ3VycmVudC5sZXZlbCAmJiAhKGRhdGEudHlwZSA9PT0gJ2F1ZGlvJyAmJiB0aGlzLmFsdEF1ZGlvKSAmJiAvLyBmaWx0ZXIgb3V0IG1haW4gYXVkaW8gaWYgYXVkaW8gdHJhY2sgaXMgbG9hZGVkIHRocm91Z2ggYXVkaW8gc3RyZWFtIGNvbnRyb2xsZXJcbiAgICB0aGlzLnN0YXRlID09PSBTdGF0ZS5QQVJTSU5HKSB7XG4gICAgICB2YXIgbGV2ZWwgPSB0aGlzLmxldmVsc1t0aGlzLmxldmVsXSxcbiAgICAgICAgICBmcmFnID0gZnJhZ0N1cnJlbnQ7XG5cbiAgICAgIGlmICghT2JqZWN0KG51bWJlcltcImlzRmluaXRlTnVtYmVyXCJdKShkYXRhLmVuZFBUUykpIHtcbiAgICAgICAgZGF0YS5lbmRQVFMgPSBkYXRhLnN0YXJ0UFRTICsgZnJhZ0N1cnJlbnQuZHVyYXRpb247XG4gICAgICAgIGRhdGEuZW5kRFRTID0gZGF0YS5zdGFydERUUyArIGZyYWdDdXJyZW50LmR1cmF0aW9uO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YS5oYXNBdWRpbyA9PT0gdHJ1ZSkge1xuICAgICAgICBmcmFnLmFkZEVsZW1lbnRhcnlTdHJlYW0oRWxlbWVudGFyeVN0cmVhbVR5cGVzLkFVRElPKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRhdGEuaGFzVmlkZW8gPT09IHRydWUpIHtcbiAgICAgICAgZnJhZy5hZGRFbGVtZW50YXJ5U3RyZWFtKEVsZW1lbnRhcnlTdHJlYW1UeXBlcy5WSURFTyk7XG4gICAgICB9XG5cbiAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJQYXJzZWQgXCIgKyBkYXRhLnR5cGUgKyBcIixQVFM6W1wiICsgZGF0YS5zdGFydFBUUy50b0ZpeGVkKDMpICsgXCIsXCIgKyBkYXRhLmVuZFBUUy50b0ZpeGVkKDMpICsgXCJdLERUUzpbXCIgKyBkYXRhLnN0YXJ0RFRTLnRvRml4ZWQoMykgKyBcIi9cIiArIGRhdGEuZW5kRFRTLnRvRml4ZWQoMykgKyBcIl0sbmI6XCIgKyBkYXRhLm5iICsgXCIsZHJvcHBlZDpcIiArIChkYXRhLmRyb3BwZWQgfHwgMCkpOyAvLyBEZXRlY3QgZ2FwcyBpbiBhIGZyYWdtZW50ICBhbmQgdHJ5IHRvIGZpeCBpdCBieSBmaW5kaW5nIGEga2V5ZnJhbWUgaW4gdGhlIHByZXZpb3VzIGZyYWdtZW50IChzZWUgX2ZpbmRGcmFnbWVudHMpXG5cbiAgICAgIGlmIChkYXRhLnR5cGUgPT09ICd2aWRlbycpIHtcbiAgICAgICAgZnJhZy5kcm9wcGVkID0gZGF0YS5kcm9wcGVkO1xuXG4gICAgICAgIGlmIChmcmFnLmRyb3BwZWQpIHtcbiAgICAgICAgICBpZiAoIWZyYWcuYmFja3RyYWNrZWQpIHtcbiAgICAgICAgICAgIHZhciBsZXZlbERldGFpbHMgPSBsZXZlbC5kZXRhaWxzO1xuXG4gICAgICAgICAgICBpZiAobGV2ZWxEZXRhaWxzICYmIGZyYWcuc24gPT09IGxldmVsRGV0YWlscy5zdGFydFNOKSB7XG4gICAgICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuKCdtaXNzaW5nIHZpZGVvIGZyYW1lKHMpIG9uIGZpcnN0IGZyYWcsIGFwcGVuZGluZyB3aXRoIGdhcCcsIGZyYWcuc24pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLndhcm4oJ21pc3NpbmcgdmlkZW8gZnJhbWUocyksIGJhY2t0cmFja2luZyBmcmFnbWVudCcsIGZyYWcuc24pOyAvLyBSZXR1cm4gYmFjayB0byB0aGUgSURMRSBzdGF0ZSB3aXRob3V0IGFwcGVuZGluZyB0byBidWZmZXJcbiAgICAgICAgICAgICAgLy8gQ2F1c2VzIGZpbmRGcmFnbWVudHMgdG8gYmFja3RyYWNrIGEgc2VnbWVudCBhbmQgZmluZCB0aGUga2V5ZnJhbWVcbiAgICAgICAgICAgICAgLy8gQXVkaW8gZnJhZ21lbnRzIGFycml2aW5nIGJlZm9yZSB2aWRlbyBzZXRzIHRoZSBuZXh0TG9hZFBvc2l0aW9uLCBjYXVzaW5nIF9maW5kRnJhZ21lbnRzIHRvIHNraXAgdGhlIGJhY2t0cmFja2VkIGZyYWdtZW50XG5cbiAgICAgICAgICAgICAgdGhpcy5mcmFnbWVudFRyYWNrZXIucmVtb3ZlRnJhZ21lbnQoZnJhZyk7XG4gICAgICAgICAgICAgIGZyYWcuYmFja3RyYWNrZWQgPSB0cnVlO1xuICAgICAgICAgICAgICB0aGlzLm5leHRMb2FkUG9zaXRpb24gPSBkYXRhLnN0YXJ0UFRTO1xuICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSURMRTtcbiAgICAgICAgICAgICAgdGhpcy5mcmFnUHJldmlvdXMgPSBmcmFnO1xuXG4gICAgICAgICAgICAgIGlmICh0aGlzLmRlbXV4ZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlbXV4ZXIuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGVtdXhlciA9IG51bGw7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0aGlzLnRpY2soKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ud2FybignQWxyZWFkeSBiYWNrdHJhY2tlZCBvbiB0aGlzIGZyYWdtZW50LCBhcHBlbmRpbmcgd2l0aCB0aGUgZ2FwJywgZnJhZy5zbik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE9ubHkgcmVzZXQgdGhlIGJhY2t0cmFja2VkIGZsYWcgaWYgd2UndmUgbG9hZGVkIHRoZSBmcmFnIHdpdGhvdXQgYW55IGRyb3BwZWQgZnJhbWVzXG4gICAgICAgICAgZnJhZy5iYWNrdHJhY2tlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBkcmlmdCA9IHVwZGF0ZUZyYWdQVFNEVFMobGV2ZWwuZGV0YWlscywgZnJhZywgZGF0YS5zdGFydFBUUywgZGF0YS5lbmRQVFMsIGRhdGEuc3RhcnREVFMsIGRhdGEuZW5kRFRTKSxcbiAgICAgICAgICBobHMgPSB0aGlzLmhscztcbiAgICAgIGhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uTEVWRUxfUFRTX1VQREFURUQsIHtcbiAgICAgICAgZGV0YWlsczogbGV2ZWwuZGV0YWlscyxcbiAgICAgICAgbGV2ZWw6IHRoaXMubGV2ZWwsXG4gICAgICAgIGRyaWZ0OiBkcmlmdCxcbiAgICAgICAgdHlwZTogZGF0YS50eXBlLFxuICAgICAgICBzdGFydDogZGF0YS5zdGFydFBUUyxcbiAgICAgICAgZW5kOiBkYXRhLmVuZFBUU1xuICAgICAgfSk7IC8vIGhhcyByZW11eGVyIGRyb3BwZWQgdmlkZW8gZnJhbWVzIGxvY2F0ZWQgYmVmb3JlIGZpcnN0IGtleWZyYW1lID9cblxuICAgICAgW2RhdGEuZGF0YTEsIGRhdGEuZGF0YTJdLmZvckVhY2goZnVuY3Rpb24gKGJ1ZmZlcikge1xuICAgICAgICAvLyBvbmx5IGFwcGVuZCBpbiBQQVJTSU5HIHN0YXRlIChyYXRpb25hbGUgaXMgdGhhdCBhbiBhcHBlbmRpbmcgZXJyb3IgY291bGQgaGFwcGVuIHN5bmNocm9ub3VzbHkgb24gZmlyc3Qgc2VnbWVudCBhcHBlbmRpbmcpXG4gICAgICAgIC8vIGluIHRoYXQgY2FzZSBpdCBpcyB1c2VsZXNzIHRvIGFwcGVuZCBmb2xsb3dpbmcgc2VnbWVudHNcbiAgICAgICAgaWYgKGJ1ZmZlciAmJiBidWZmZXIubGVuZ3RoICYmIF90aGlzMi5zdGF0ZSA9PT0gU3RhdGUuUEFSU0lORykge1xuICAgICAgICAgIF90aGlzMi5hcHBlbmRlZCA9IHRydWU7IC8vIGFybSBwZW5kaW5nIEJ1ZmZlcmluZyBmbGFnIGJlZm9yZSBhcHBlbmRpbmcgYSBzZWdtZW50XG5cbiAgICAgICAgICBfdGhpczIucGVuZGluZ0J1ZmZlcmluZyA9IHRydWU7XG4gICAgICAgICAgaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5CVUZGRVJfQVBQRU5ESU5HLCB7XG4gICAgICAgICAgICB0eXBlOiBkYXRhLnR5cGUsXG4gICAgICAgICAgICBkYXRhOiBidWZmZXIsXG4gICAgICAgICAgICBwYXJlbnQ6ICdtYWluJyxcbiAgICAgICAgICAgIGNvbnRlbnQ6ICdkYXRhJ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTsgLy8gdHJpZ2dlciBoYW5kbGVyIHJpZ2h0IG5vd1xuXG4gICAgICB0aGlzLnRpY2soKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uRnJhZ1BhcnNlZCA9IGZ1bmN0aW9uIG9uRnJhZ1BhcnNlZChkYXRhKSB7XG4gICAgdmFyIGZyYWdDdXJyZW50ID0gdGhpcy5mcmFnQ3VycmVudDtcbiAgICB2YXIgZnJhZ05ldyA9IGRhdGEuZnJhZztcblxuICAgIGlmIChmcmFnQ3VycmVudCAmJiBkYXRhLmlkID09PSAnbWFpbicgJiYgZnJhZ05ldy5zbiA9PT0gZnJhZ0N1cnJlbnQuc24gJiYgZnJhZ05ldy5sZXZlbCA9PT0gZnJhZ0N1cnJlbnQubGV2ZWwgJiYgdGhpcy5zdGF0ZSA9PT0gU3RhdGUuUEFSU0lORykge1xuICAgICAgdGhpcy5zdGF0cy50cGFyc2VkID0gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlBBUlNFRDtcblxuICAgICAgdGhpcy5fY2hlY2tBcHBlbmRlZFBhcnNlZCgpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25BdWRpb1RyYWNrU3dpdGNoaW5nID0gZnVuY3Rpb24gb25BdWRpb1RyYWNrU3dpdGNoaW5nKGRhdGEpIHtcbiAgICAvLyBpZiBhbnkgVVJMIGZvdW5kIG9uIG5ldyBhdWRpbyB0cmFjaywgaXQgaXMgYW4gYWx0ZXJuYXRlIGF1ZGlvIHRyYWNrXG4gICAgdmFyIGZyb21BbHRBdWRpbyA9IHRoaXMuYWx0QXVkaW87XG4gICAgdmFyIGFsdEF1ZGlvID0gISFkYXRhLnVybDtcbiAgICB2YXIgdHJhY2tJZCA9IGRhdGEuaWQ7IC8vIGlmIHdlIHN3aXRjaCBvbiBtYWluIGF1ZGlvLCBlbnN1cmUgdGhhdCBtYWluIGZyYWdtZW50IHNjaGVkdWxpbmcgaXMgc3luY2VkIHdpdGggbWVkaWEuYnVmZmVyZWRcbiAgICAvLyBkb24ndCBkbyBhbnl0aGluZyBpZiB3ZSBzd2l0Y2ggdG8gYWx0IGF1ZGlvOiBhdWRpbyBzdHJlYW0gY29udHJvbGxlciBpcyBoYW5kbGluZyBpdC5cbiAgICAvLyB3ZSB3aWxsIGp1c3QgaGF2ZSB0byBjaGFuZ2UgYnVmZmVyIHNjaGVkdWxpbmcgb24gYXVkaW9UcmFja1N3aXRjaGVkXG5cbiAgICBpZiAoIWFsdEF1ZGlvKSB7XG4gICAgICBpZiAodGhpcy5tZWRpYUJ1ZmZlciAhPT0gdGhpcy5tZWRpYSkge1xuICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKCdzd2l0Y2hpbmcgb24gbWFpbiBhdWRpbywgdXNlIG1lZGlhLmJ1ZmZlcmVkIHRvIHNjaGVkdWxlIG1haW4gZnJhZ21lbnQgbG9hZGluZycpO1xuICAgICAgICB0aGlzLm1lZGlhQnVmZmVyID0gdGhpcy5tZWRpYTtcbiAgICAgICAgdmFyIGZyYWdDdXJyZW50ID0gdGhpcy5mcmFnQ3VycmVudDsgLy8gd2UgbmVlZCB0byByZWZpbGwgYXVkaW8gYnVmZmVyIGZyb20gbWFpbjogY2FuY2VsIGFueSBmcmFnIGxvYWRpbmcgdG8gc3BlZWQgdXAgYXVkaW8gc3dpdGNoXG5cbiAgICAgICAgaWYgKGZyYWdDdXJyZW50LmxvYWRlcikge1xuICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coJ3N3aXRjaGluZyB0byBtYWluIGF1ZGlvIHRyYWNrLCBjYW5jZWwgbWFpbiBmcmFnbWVudCBsb2FkJyk7XG4gICAgICAgICAgZnJhZ0N1cnJlbnQubG9hZGVyLmFib3J0KCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmZyYWdDdXJyZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5mcmFnUHJldmlvdXMgPSBudWxsOyAvLyBkZXN0cm95IGRlbXV4ZXIgdG8gZm9yY2UgaW5pdCBzZWdtZW50IGdlbmVyYXRpb24gKGZvbGxvd2luZyBhdWRpbyBzd2l0Y2gpXG5cbiAgICAgICAgaWYgKHRoaXMuZGVtdXhlcikge1xuICAgICAgICAgIHRoaXMuZGVtdXhlci5kZXN0cm95KCk7XG4gICAgICAgICAgdGhpcy5kZW11eGVyID0gbnVsbDtcbiAgICAgICAgfSAvLyBzd2l0Y2ggdG8gSURMRSBzdGF0ZSB0byBsb2FkIG5ldyBmcmFnbWVudFxuXG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLklETEU7XG4gICAgICB9XG5cbiAgICAgIHZhciBobHMgPSB0aGlzLmhsczsgLy8gSWYgc3dpdGNoaW5nIGZyb20gYWx0IHRvIG1haW4gYXVkaW8sIGZsdXNoIGFsbCBhdWRpbyBhbmQgdHJpZ2dlciB0cmFjayBzd2l0Y2hlZFxuXG4gICAgICBpZiAoZnJvbUFsdEF1ZGlvKSB7XG4gICAgICAgIGhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uQlVGRkVSX0ZMVVNISU5HLCB7XG4gICAgICAgICAgc3RhcnRPZmZzZXQ6IDAsXG4gICAgICAgICAgZW5kT2Zmc2V0OiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXG4gICAgICAgICAgdHlwZTogJ2F1ZGlvJ1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5BVURJT19UUkFDS19TV0lUQ0hFRCwge1xuICAgICAgICBpZDogdHJhY2tJZFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vbkF1ZGlvVHJhY2tTd2l0Y2hlZCA9IGZ1bmN0aW9uIG9uQXVkaW9UcmFja1N3aXRjaGVkKGRhdGEpIHtcbiAgICB2YXIgdHJhY2tJZCA9IGRhdGEuaWQsXG4gICAgICAgIGFsdEF1ZGlvID0gISF0aGlzLmhscy5hdWRpb1RyYWNrc1t0cmFja0lkXS51cmw7XG5cbiAgICBpZiAoYWx0QXVkaW8pIHtcbiAgICAgIHZhciB2aWRlb0J1ZmZlciA9IHRoaXMudmlkZW9CdWZmZXI7IC8vIGlmIHdlIHN3aXRjaGVkIG9uIGFsdGVybmF0ZSBhdWRpbywgZW5zdXJlIHRoYXQgbWFpbiBmcmFnbWVudCBzY2hlZHVsaW5nIGlzIHN5bmNlZCB3aXRoIHZpZGVvIHNvdXJjZWJ1ZmZlciBidWZmZXJlZFxuXG4gICAgICBpZiAodmlkZW9CdWZmZXIgJiYgdGhpcy5tZWRpYUJ1ZmZlciAhPT0gdmlkZW9CdWZmZXIpIHtcbiAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZygnc3dpdGNoaW5nIG9uIGFsdGVybmF0ZSBhdWRpbywgdXNlIHZpZGVvLmJ1ZmZlcmVkIHRvIHNjaGVkdWxlIG1haW4gZnJhZ21lbnQgbG9hZGluZycpO1xuICAgICAgICB0aGlzLm1lZGlhQnVmZmVyID0gdmlkZW9CdWZmZXI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5hbHRBdWRpbyA9IGFsdEF1ZGlvO1xuICAgIHRoaXMudGljaygpO1xuICB9O1xuXG4gIF9wcm90by5vbkJ1ZmZlckNyZWF0ZWQgPSBmdW5jdGlvbiBvbkJ1ZmZlckNyZWF0ZWQoZGF0YSkge1xuICAgIHZhciB0cmFja3MgPSBkYXRhLnRyYWNrcyxcbiAgICAgICAgbWVkaWFUcmFjayxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgYWx0ZXJuYXRlID0gZmFsc2U7XG5cbiAgICBmb3IgKHZhciB0eXBlIGluIHRyYWNrcykge1xuICAgICAgdmFyIHRyYWNrID0gdHJhY2tzW3R5cGVdO1xuXG4gICAgICBpZiAodHJhY2suaWQgPT09ICdtYWluJykge1xuICAgICAgICBuYW1lID0gdHlwZTtcbiAgICAgICAgbWVkaWFUcmFjayA9IHRyYWNrOyAvLyBrZWVwIHZpZGVvIHNvdXJjZSBidWZmZXIgcmVmZXJlbmNlXG5cbiAgICAgICAgaWYgKHR5cGUgPT09ICd2aWRlbycpIHtcbiAgICAgICAgICB0aGlzLnZpZGVvQnVmZmVyID0gdHJhY2tzW3R5cGVdLmJ1ZmZlcjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWx0ZXJuYXRlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYWx0ZXJuYXRlICYmIG1lZGlhVHJhY2spIHtcbiAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJhbHRlcm5hdGUgdHJhY2sgZm91bmQsIHVzZSBcIiArIG5hbWUgKyBcIi5idWZmZXJlZCB0byBzY2hlZHVsZSBtYWluIGZyYWdtZW50IGxvYWRpbmdcIik7XG4gICAgICB0aGlzLm1lZGlhQnVmZmVyID0gbWVkaWFUcmFjay5idWZmZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubWVkaWFCdWZmZXIgPSB0aGlzLm1lZGlhO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25CdWZmZXJBcHBlbmRlZCA9IGZ1bmN0aW9uIG9uQnVmZmVyQXBwZW5kZWQoZGF0YSkge1xuICAgIGlmIChkYXRhLnBhcmVudCA9PT0gJ21haW4nKSB7XG4gICAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlO1xuXG4gICAgICBpZiAoc3RhdGUgPT09IFN0YXRlLlBBUlNJTkcgfHwgc3RhdGUgPT09IFN0YXRlLlBBUlNFRCkge1xuICAgICAgICAvLyBjaGVjayBpZiBhbGwgYnVmZmVycyBoYXZlIGJlZW4gYXBwZW5kZWRcbiAgICAgICAgdGhpcy5wZW5kaW5nQnVmZmVyaW5nID0gZGF0YS5wZW5kaW5nID4gMDtcblxuICAgICAgICB0aGlzLl9jaGVja0FwcGVuZGVkUGFyc2VkKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fY2hlY2tBcHBlbmRlZFBhcnNlZCA9IGZ1bmN0aW9uIF9jaGVja0FwcGVuZGVkUGFyc2VkKCkge1xuICAgIC8vIHRyaWdnZXIgaGFuZGxlciByaWdodCBub3dcbiAgICBpZiAodGhpcy5zdGF0ZSA9PT0gU3RhdGUuUEFSU0VEICYmICghdGhpcy5hcHBlbmRlZCB8fCAhdGhpcy5wZW5kaW5nQnVmZmVyaW5nKSkge1xuICAgICAgdmFyIGZyYWcgPSB0aGlzLmZyYWdDdXJyZW50O1xuXG4gICAgICBpZiAoZnJhZykge1xuICAgICAgICB2YXIgbWVkaWEgPSB0aGlzLm1lZGlhQnVmZmVyID8gdGhpcy5tZWRpYUJ1ZmZlciA6IHRoaXMubWVkaWE7XG4gICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJtYWluIGJ1ZmZlcmVkIDogXCIgKyB0aW1lX3Jhbmdlcy50b1N0cmluZyhtZWRpYS5idWZmZXJlZCkpO1xuICAgICAgICB0aGlzLmZyYWdQcmV2aW91cyA9IGZyYWc7XG4gICAgICAgIHZhciBzdGF0cyA9IHRoaXMuc3RhdHM7XG4gICAgICAgIHN0YXRzLnRidWZmZXJlZCA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKTsgLy8gd2Ugc2hvdWxkIGdldCByaWQgb2YgdGhpcy5mcmFnTGFzdEticHNcblxuICAgICAgICB0aGlzLmZyYWdMYXN0S2JwcyA9IE1hdGgucm91bmQoOCAqIHN0YXRzLnRvdGFsIC8gKHN0YXRzLnRidWZmZXJlZCAtIHN0YXRzLnRmaXJzdCkpO1xuICAgICAgICB0aGlzLmhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uRlJBR19CVUZGRVJFRCwge1xuICAgICAgICAgIHN0YXRzOiBzdGF0cyxcbiAgICAgICAgICBmcmFnOiBmcmFnLFxuICAgICAgICAgIGlkOiAnbWFpbidcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JRExFO1xuICAgICAgfSAvLyBEbyBub3QgdGljayB3aGVuIF9zZWVrVG9TdGFydFBvcyBuZWVkcyB0byBiZSBjYWxsZWQgYXMgc2Vla2luZyB0byB0aGUgc3RhcnQgY2FuIGZhaWwgb24gbGl2ZSBzdHJlYW1zIGF0IHRoaXMgcG9pbnRcblxuXG4gICAgICBpZiAodGhpcy5sb2FkZWRtZXRhZGF0YSB8fCB0aGlzLnN0YXJ0UG9zaXRpb24gPD0gMCkge1xuICAgICAgICB0aGlzLnRpY2soKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uRXJyb3IgPSBmdW5jdGlvbiBvbkVycm9yKGRhdGEpIHtcbiAgICB2YXIgZnJhZyA9IGRhdGEuZnJhZyB8fCB0aGlzLmZyYWdDdXJyZW50OyAvLyBkb24ndCBoYW5kbGUgZnJhZyBlcnJvciBub3QgcmVsYXRlZCB0byBtYWluIGZyYWdtZW50XG5cbiAgICBpZiAoZnJhZyAmJiBmcmFnLnR5cGUgIT09ICdtYWluJykge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gMC41IDogdG9sZXJhbmNlIG5lZWRlZCBhcyBzb21lIGJyb3dzZXJzIHN0YWxscyBwbGF5YmFjayBiZWZvcmUgcmVhY2hpbmcgYnVmZmVyZWQgZW5kXG5cblxuICAgIHZhciBtZWRpYUJ1ZmZlcmVkID0gISF0aGlzLm1lZGlhICYmIEJ1ZmZlckhlbHBlci5pc0J1ZmZlcmVkKHRoaXMubWVkaWEsIHRoaXMubWVkaWEuY3VycmVudFRpbWUpICYmIEJ1ZmZlckhlbHBlci5pc0J1ZmZlcmVkKHRoaXMubWVkaWEsIHRoaXMubWVkaWEuY3VycmVudFRpbWUgKyAwLjUpO1xuXG4gICAgc3dpdGNoIChkYXRhLmRldGFpbHMpIHtcbiAgICAgIGNhc2UgZXJyb3JzW1wiRXJyb3JEZXRhaWxzXCJdLkZSQUdfTE9BRF9FUlJPUjpcbiAgICAgIGNhc2UgZXJyb3JzW1wiRXJyb3JEZXRhaWxzXCJdLkZSQUdfTE9BRF9USU1FT1VUOlxuICAgICAgY2FzZSBlcnJvcnNbXCJFcnJvckRldGFpbHNcIl0uS0VZX0xPQURfRVJST1I6XG4gICAgICBjYXNlIGVycm9yc1tcIkVycm9yRGV0YWlsc1wiXS5LRVlfTE9BRF9USU1FT1VUOlxuICAgICAgICBpZiAoIWRhdGEuZmF0YWwpIHtcbiAgICAgICAgICAvLyBrZWVwIHJldHJ5aW5nIHVudGlsIHRoZSBsaW1pdCB3aWxsIGJlIHJlYWNoZWRcbiAgICAgICAgICBpZiAodGhpcy5mcmFnTG9hZEVycm9yICsgMSA8PSB0aGlzLmNvbmZpZy5mcmFnTG9hZGluZ01heFJldHJ5KSB7XG4gICAgICAgICAgICAvLyBleHBvbmVudGlhbCBiYWNrb2ZmIGNhcHBlZCB0byBjb25maWcuZnJhZ0xvYWRpbmdNYXhSZXRyeVRpbWVvdXRcbiAgICAgICAgICAgIHZhciBkZWxheSA9IE1hdGgubWluKE1hdGgucG93KDIsIHRoaXMuZnJhZ0xvYWRFcnJvcikgKiB0aGlzLmNvbmZpZy5mcmFnTG9hZGluZ1JldHJ5RGVsYXksIHRoaXMuY29uZmlnLmZyYWdMb2FkaW5nTWF4UmV0cnlUaW1lb3V0KTtcbiAgICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuKFwibWVkaWFDb250cm9sbGVyOiBmcmFnIGxvYWRpbmcgZmFpbGVkLCByZXRyeSBpbiBcIiArIGRlbGF5ICsgXCIgbXNcIik7XG4gICAgICAgICAgICB0aGlzLnJldHJ5RGF0ZSA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKSArIGRlbGF5OyAvLyByZXRyeSBsb2FkaW5nIHN0YXRlXG4gICAgICAgICAgICAvLyBpZiBsb2FkZWRtZXRhZGF0YSBpcyBub3Qgc2V0LCBpdCBtZWFucyB0aGF0IHdlIGFyZSBlbWVyZ2VuY3kgc3dpdGNoIGRvd24gb24gZmlyc3QgZnJhZ1xuICAgICAgICAgICAgLy8gaW4gdGhhdCBjYXNlLCByZXNldCBzdGFydEZyYWdSZXF1ZXN0ZWQgZmxhZ1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMubG9hZGVkbWV0YWRhdGEpIHtcbiAgICAgICAgICAgICAgdGhpcy5zdGFydEZyYWdSZXF1ZXN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgdGhpcy5uZXh0TG9hZFBvc2l0aW9uID0gdGhpcy5zdGFydFBvc2l0aW9uO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmZyYWdMb2FkRXJyb3IrKztcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5GUkFHX0xPQURJTkdfV0FJVElOR19SRVRSWTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmVycm9yKFwibWVkaWFDb250cm9sbGVyOiBcIiArIGRhdGEuZGV0YWlscyArIFwiIHJlYWNoZXMgbWF4IHJldHJ5LCByZWRpc3BhdGNoIGFzIGZhdGFsIC4uLlwiKTsgLy8gc3dpdGNoIGVycm9yIHRvIGZhdGFsXG5cbiAgICAgICAgICAgIGRhdGEuZmF0YWwgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkVSUk9SO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIGVycm9yc1tcIkVycm9yRGV0YWlsc1wiXS5MRVZFTF9MT0FEX0VSUk9SOlxuICAgICAgY2FzZSBlcnJvcnNbXCJFcnJvckRldGFpbHNcIl0uTEVWRUxfTE9BRF9USU1FT1VUOlxuICAgICAgICBpZiAodGhpcy5zdGF0ZSAhPT0gU3RhdGUuRVJST1IpIHtcbiAgICAgICAgICBpZiAoZGF0YS5mYXRhbCkge1xuICAgICAgICAgICAgLy8gaWYgZmF0YWwgZXJyb3IsIHN0b3AgcHJvY2Vzc2luZ1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkVSUk9SO1xuICAgICAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLndhcm4oXCJzdHJlYW1Db250cm9sbGVyOiBcIiArIGRhdGEuZGV0YWlscyArIFwiLHN3aXRjaCB0byBcIiArIHRoaXMuc3RhdGUgKyBcIiBzdGF0ZSAuLi5cIik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGluIGNhc2Ugb2Ygbm9uIGZhdGFsIGVycm9yIHdoaWxlIGxvYWRpbmcgbGV2ZWwsIGlmIGxldmVsIGNvbnRyb2xsZXIgaXMgbm90IHJldHJ5aW5nIHRvIGxvYWQgbGV2ZWwgLCBzd2l0Y2ggYmFjayB0byBJRExFXG4gICAgICAgICAgICBpZiAoIWRhdGEubGV2ZWxSZXRyeSAmJiB0aGlzLnN0YXRlID09PSBTdGF0ZS5XQUlUSU5HX0xFVkVMKSB7XG4gICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JRExFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIGVycm9yc1tcIkVycm9yRGV0YWlsc1wiXS5CVUZGRVJfRlVMTF9FUlJPUjpcbiAgICAgICAgLy8gaWYgaW4gYXBwZW5kaW5nIHN0YXRlXG4gICAgICAgIGlmIChkYXRhLnBhcmVudCA9PT0gJ21haW4nICYmICh0aGlzLnN0YXRlID09PSBTdGF0ZS5QQVJTSU5HIHx8IHRoaXMuc3RhdGUgPT09IFN0YXRlLlBBUlNFRCkpIHtcbiAgICAgICAgICAvLyByZWR1Y2UgbWF4IGJ1ZiBsZW4gaWYgY3VycmVudCBwb3NpdGlvbiBpcyBidWZmZXJlZFxuICAgICAgICAgIGlmIChtZWRpYUJ1ZmZlcmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWR1Y2VNYXhCdWZmZXJMZW5ndGgodGhpcy5jb25maWcubWF4QnVmZmVyTGVuZ3RoKTtcblxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLklETEU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGN1cnJlbnQgcG9zaXRpb24gaXMgbm90IGJ1ZmZlcmVkLCBidXQgYnJvd3NlciBpcyBzdGlsbCBjb21wbGFpbmluZyBhYm91dCBidWZmZXIgZnVsbCBlcnJvclxuICAgICAgICAgICAgLy8gdGhpcyBoYXBwZW5zIG9uIElFL0VkZ2UsIHJlZmVyIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlby1kZXYvaGxzLmpzL3B1bGwvNzA4XG4gICAgICAgICAgICAvLyBpbiB0aGF0IGNhc2UgZmx1c2ggdGhlIHdob2xlIGJ1ZmZlciB0byByZWNvdmVyXG4gICAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ud2FybignYnVmZmVyIGZ1bGwgZXJyb3IgYWxzbyBtZWRpYS5jdXJyZW50VGltZSBpcyBub3QgYnVmZmVyZWQsIGZsdXNoIGV2ZXJ5dGhpbmcnKTtcbiAgICAgICAgICAgIHRoaXMuZnJhZ0N1cnJlbnQgPSBudWxsOyAvLyBmbHVzaCBldmVyeXRoaW5nXG5cbiAgICAgICAgICAgIHRoaXMuZmx1c2hNYWluQnVmZmVyKDAsIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX3JlZHVjZU1heEJ1ZmZlckxlbmd0aCA9IGZ1bmN0aW9uIF9yZWR1Y2VNYXhCdWZmZXJMZW5ndGgobWluTGVuZ3RoKSB7XG4gICAgdmFyIGNvbmZpZyA9IHRoaXMuY29uZmlnO1xuXG4gICAgaWYgKGNvbmZpZy5tYXhNYXhCdWZmZXJMZW5ndGggPj0gbWluTGVuZ3RoKSB7XG4gICAgICAvLyByZWR1Y2UgbWF4IGJ1ZmZlciBsZW5ndGggYXMgaXQgbWlnaHQgYmUgdG9vIGhpZ2guIHdlIGRvIHRoaXMgdG8gYXZvaWQgbG9vcCBmbHVzaGluZyAuLi5cbiAgICAgIGNvbmZpZy5tYXhNYXhCdWZmZXJMZW5ndGggLz0gMjtcbiAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuKFwibWFpbjpyZWR1Y2UgbWF4IGJ1ZmZlciBsZW5ndGggdG8gXCIgKyBjb25maWcubWF4TWF4QnVmZmVyTGVuZ3RoICsgXCJzXCIpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBDaGVja3MgdGhlIGhlYWx0aCBvZiB0aGUgYnVmZmVyIGFuZCBhdHRlbXB0cyB0byByZXNvbHZlIHBsYXliYWNrIHN0YWxscy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uX2NoZWNrQnVmZmVyID0gZnVuY3Rpb24gX2NoZWNrQnVmZmVyKCkge1xuICAgIHZhciBtZWRpYSA9IHRoaXMubWVkaWE7XG5cbiAgICBpZiAoIW1lZGlhIHx8IG1lZGlhLnJlYWR5U3RhdGUgPT09IDApIHtcbiAgICAgIC8vIEV4aXQgZWFybHkgaWYgd2UgZG9uJ3QgaGF2ZSBtZWRpYSBvciBpZiB0aGUgbWVkaWEgaGFzbid0IGJ1ZmZlcmQgYW55dGhpbmcgeWV0IChyZWFkeVN0YXRlIDApXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG1lZGlhQnVmZmVyID0gdGhpcy5tZWRpYUJ1ZmZlciA/IHRoaXMubWVkaWFCdWZmZXIgOiBtZWRpYTtcbiAgICB2YXIgYnVmZmVyZWQgPSBtZWRpYUJ1ZmZlci5idWZmZXJlZDtcblxuICAgIGlmICghdGhpcy5sb2FkZWRtZXRhZGF0YSAmJiBidWZmZXJlZC5sZW5ndGgpIHtcbiAgICAgIHRoaXMubG9hZGVkbWV0YWRhdGEgPSB0cnVlO1xuXG4gICAgICB0aGlzLl9zZWVrVG9TdGFydFBvcygpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5pbW1lZGlhdGVTd2l0Y2gpIHtcbiAgICAgIHRoaXMuaW1tZWRpYXRlTGV2ZWxTd2l0Y2hFbmQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5nYXBDb250cm9sbGVyLnBvbGwodGhpcy5sYXN0Q3VycmVudFRpbWUsIGJ1ZmZlcmVkKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uRnJhZ0xvYWRFbWVyZ2VuY3lBYm9ydGVkID0gZnVuY3Rpb24gb25GcmFnTG9hZEVtZXJnZW5jeUFib3J0ZWQoKSB7XG4gICAgdGhpcy5zdGF0ZSA9IFN0YXRlLklETEU7IC8vIGlmIGxvYWRlZG1ldGFkYXRhIGlzIG5vdCBzZXQsIGl0IG1lYW5zIHRoYXQgd2UgYXJlIGVtZXJnZW5jeSBzd2l0Y2ggZG93biBvbiBmaXJzdCBmcmFnXG4gICAgLy8gaW4gdGhhdCBjYXNlLCByZXNldCBzdGFydEZyYWdSZXF1ZXN0ZWQgZmxhZ1xuXG4gICAgaWYgKCF0aGlzLmxvYWRlZG1ldGFkYXRhKSB7XG4gICAgICB0aGlzLnN0YXJ0RnJhZ1JlcXVlc3RlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5uZXh0TG9hZFBvc2l0aW9uID0gdGhpcy5zdGFydFBvc2l0aW9uO1xuICAgIH1cblxuICAgIHRoaXMudGljaygpO1xuICB9O1xuXG4gIF9wcm90by5vbkJ1ZmZlckZsdXNoZWQgPSBmdW5jdGlvbiBvbkJ1ZmZlckZsdXNoZWQoKSB7XG4gICAgLyogYWZ0ZXIgc3VjY2Vzc2Z1bCBidWZmZXIgZmx1c2hpbmcsIGZpbHRlciBmbHVzaGVkIGZyYWdtZW50cyBmcm9tIGJ1ZmZlcmVkRnJhZ3NcbiAgICAgIHVzZSBtZWRpYUJ1ZmZlcmVkIGluc3RlYWQgb2YgbWVkaWEgKHNvIHRoYXQgd2Ugd2lsbCBjaGVjayBhZ2FpbnN0IHZpZGVvLmJ1ZmZlcmVkIHJhbmdlcyBpbiBjYXNlIG9mIGFsdCBhdWRpbyB0cmFjaylcbiAgICAqL1xuICAgIHZhciBtZWRpYSA9IHRoaXMubWVkaWFCdWZmZXIgPyB0aGlzLm1lZGlhQnVmZmVyIDogdGhpcy5tZWRpYTtcblxuICAgIGlmIChtZWRpYSkge1xuICAgICAgLy8gZmlsdGVyIGZyYWdtZW50cyBwb3RlbnRpYWxseSBldmljdGVkIGZyb20gYnVmZmVyLiB0aGlzIGlzIHRvIGF2b2lkIG1lbWxlYWsgb24gbGl2ZSBzdHJlYW1zXG4gICAgICB2YXIgZWxlbWVudGFyeVN0cmVhbVR5cGUgPSB0aGlzLmF1ZGlvT25seSA/IEVsZW1lbnRhcnlTdHJlYW1UeXBlcy5BVURJTyA6IEVsZW1lbnRhcnlTdHJlYW1UeXBlcy5WSURFTztcbiAgICAgIHRoaXMuZnJhZ21lbnRUcmFja2VyLmRldGVjdEV2aWN0ZWRGcmFnbWVudHMoZWxlbWVudGFyeVN0cmVhbVR5cGUsIG1lZGlhLmJ1ZmZlcmVkKTtcbiAgICB9IC8vIG1vdmUgdG8gSURMRSBvbmNlIGZsdXNoIGNvbXBsZXRlLiB0aGlzIHNob3VsZCB0cmlnZ2VyIG5ldyBmcmFnbWVudCBsb2FkaW5nXG5cblxuICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JRExFOyAvLyByZXNldCByZWZlcmVuY2UgdG8gZnJhZ1xuXG4gICAgdGhpcy5mcmFnUHJldmlvdXMgPSBudWxsO1xuICB9O1xuXG4gIF9wcm90by5vbkxldmVsc1VwZGF0ZWQgPSBmdW5jdGlvbiBvbkxldmVsc1VwZGF0ZWQoZGF0YSkge1xuICAgIHRoaXMubGV2ZWxzID0gZGF0YS5sZXZlbHM7XG4gIH07XG5cbiAgX3Byb3RvLnN3YXBBdWRpb0NvZGVjID0gZnVuY3Rpb24gc3dhcEF1ZGlvQ29kZWMoKSB7XG4gICAgdGhpcy5hdWRpb0NvZGVjU3dhcCA9ICF0aGlzLmF1ZGlvQ29kZWNTd2FwO1xuICB9XG4gIC8qKlxuICAgKiBTZWVrcyB0byB0aGUgc2V0IHN0YXJ0UG9zaXRpb24gaWYgbm90IGVxdWFsIHRvIHRoZSBtZWRpYUVsZW1lbnQncyBjdXJyZW50IHRpbWUuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLl9zZWVrVG9TdGFydFBvcyA9IGZ1bmN0aW9uIF9zZWVrVG9TdGFydFBvcygpIHtcbiAgICB2YXIgbWVkaWEgPSB0aGlzLm1lZGlhO1xuICAgIHZhciBjdXJyZW50VGltZSA9IG1lZGlhLmN1cnJlbnRUaW1lO1xuICAgIHZhciBzdGFydFBvc2l0aW9uID0gdGhpcy5zdGFydFBvc2l0aW9uOyAvLyBvbmx5IGFkanVzdCBjdXJyZW50VGltZSBpZiBkaWZmZXJlbnQgZnJvbSBzdGFydFBvc2l0aW9uIG9yIGlmIHN0YXJ0UG9zaXRpb24gbm90IGJ1ZmZlcmVkXG4gICAgLy8gYXQgdGhhdCBzdGFnZSwgdGhlcmUgc2hvdWxkIGJlIG9ubHkgb25lIGJ1ZmZlcmVkIHJhbmdlLCBhcyB3ZSByZWFjaCB0aGF0IGNvZGUgYWZ0ZXIgZmlyc3QgZnJhZ21lbnQgaGFzIGJlZW4gYnVmZmVyZWRcblxuICAgIGlmIChjdXJyZW50VGltZSAhPT0gc3RhcnRQb3NpdGlvbiAmJiBzdGFydFBvc2l0aW9uID49IDApIHtcbiAgICAgIGlmIChtZWRpYS5zZWVraW5nKSB7XG4gICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJjb3VsZCBub3Qgc2VlayB0byBcIiArIHN0YXJ0UG9zaXRpb24gKyBcIiwgYWxyZWFkeSBzZWVraW5nIGF0IFwiICsgY3VycmVudFRpbWUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBidWZmZXJTdGFydCA9IG1lZGlhLmJ1ZmZlcmVkLmxlbmd0aCA/IG1lZGlhLmJ1ZmZlcmVkLnN0YXJ0KDApIDogMDtcbiAgICAgIHZhciBkZWx0YSA9IGJ1ZmZlclN0YXJ0IC0gc3RhcnRQb3NpdGlvbjtcblxuICAgICAgaWYgKGRlbHRhID4gMCAmJiBkZWx0YSA8IHRoaXMuY29uZmlnLm1heEJ1ZmZlckhvbGUpIHtcbiAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyhcImFkanVzdGluZyBzdGFydCBwb3NpdGlvbiBieSBcIiArIGRlbHRhICsgXCIgdG8gbWF0Y2ggYnVmZmVyIHN0YXJ0XCIpO1xuICAgICAgICBzdGFydFBvc2l0aW9uICs9IGRlbHRhO1xuICAgICAgICB0aGlzLnN0YXJ0UG9zaXRpb24gPSBzdGFydFBvc2l0aW9uO1xuICAgICAgfVxuXG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKFwic2VlayB0byB0YXJnZXQgc3RhcnQgcG9zaXRpb24gXCIgKyBzdGFydFBvc2l0aW9uICsgXCIgZnJvbSBjdXJyZW50IHRpbWUgXCIgKyBjdXJyZW50VGltZSArIFwiLiByZWFkeSBzdGF0ZSBcIiArIG1lZGlhLnJlYWR5U3RhdGUpO1xuICAgICAgbWVkaWEuY3VycmVudFRpbWUgPSBzdGFydFBvc2l0aW9uO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX2dldEF1ZGlvQ29kZWMgPSBmdW5jdGlvbiBfZ2V0QXVkaW9Db2RlYyhjdXJyZW50TGV2ZWwpIHtcbiAgICB2YXIgYXVkaW9Db2RlYyA9IHRoaXMuY29uZmlnLmRlZmF1bHRBdWRpb0NvZGVjIHx8IGN1cnJlbnRMZXZlbC5hdWRpb0NvZGVjO1xuXG4gICAgaWYgKHRoaXMuYXVkaW9Db2RlY1N3YXApIHtcbiAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coJ3N3YXBwaW5nIHBsYXlsaXN0IGF1ZGlvIGNvZGVjJyk7XG5cbiAgICAgIGlmIChhdWRpb0NvZGVjKSB7XG4gICAgICAgIGlmIChhdWRpb0NvZGVjLmluZGV4T2YoJ21wNGEuNDAuNScpICE9PSAtMSkge1xuICAgICAgICAgIGF1ZGlvQ29kZWMgPSAnbXA0YS40MC4yJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhdWRpb0NvZGVjID0gJ21wNGEuNDAuNSc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYXVkaW9Db2RlYztcbiAgfTtcblxuICBzdHJlYW1fY29udHJvbGxlcl9jcmVhdGVDbGFzcyhTdHJlYW1Db250cm9sbGVyLCBbe1xuICAgIGtleTogXCJzdGF0ZVwiLFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG5leHRTdGF0ZSkge1xuICAgICAgaWYgKHRoaXMuc3RhdGUgIT09IG5leHRTdGF0ZSkge1xuICAgICAgICB2YXIgcHJldmlvdXNTdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gbmV4dFN0YXRlO1xuICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKFwibWFpbiBzdHJlYW0tY29udHJvbGxlcjogXCIgKyBwcmV2aW91c1N0YXRlICsgXCItPlwiICsgbmV4dFN0YXRlKTtcbiAgICAgICAgdGhpcy5obHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLlNUUkVBTV9TVEFURV9UUkFOU0lUSU9OLCB7XG4gICAgICAgICAgcHJldmlvdXNTdGF0ZTogcHJldmlvdXNTdGF0ZSxcbiAgICAgICAgICBuZXh0U3RhdGU6IG5leHRTdGF0ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjdXJyZW50TGV2ZWxcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBtZWRpYSA9IHRoaXMubWVkaWE7XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICB2YXIgZnJhZyA9IHRoaXMuZ2V0QnVmZmVyZWRGcmFnKG1lZGlhLmN1cnJlbnRUaW1lKTtcblxuICAgICAgICBpZiAoZnJhZykge1xuICAgICAgICAgIHJldHVybiBmcmFnLmxldmVsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibmV4dEJ1ZmZlcmVkRnJhZ1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYTtcblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIC8vIGZpcnN0IGdldCBlbmQgcmFuZ2Ugb2YgY3VycmVudCBmcmFnbWVudFxuICAgICAgICByZXR1cm4gdGhpcy5mb2xsb3dpbmdCdWZmZXJlZEZyYWcodGhpcy5nZXRCdWZmZXJlZEZyYWcobWVkaWEuY3VycmVudFRpbWUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJuZXh0TGV2ZWxcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBmcmFnID0gdGhpcy5uZXh0QnVmZmVyZWRGcmFnO1xuXG4gICAgICBpZiAoZnJhZykge1xuICAgICAgICByZXR1cm4gZnJhZy5sZXZlbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibGl2ZVN5bmNQb3NpdGlvblwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2xpdmVTeW5jUG9zaXRpb247XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgdGhpcy5fbGl2ZVN5bmNQb3NpdGlvbiA9IHZhbHVlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTdHJlYW1Db250cm9sbGVyO1xufShiYXNlX3N0cmVhbV9jb250cm9sbGVyX0Jhc2VTdHJlYW1Db250cm9sbGVyKTtcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgc3RyZWFtX2NvbnRyb2xsZXIgPSAoc3RyZWFtX2NvbnRyb2xsZXJfU3RyZWFtQ29udHJvbGxlcik7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb250cm9sbGVyL2xldmVsLWNvbnRyb2xsZXIuanNcbmZ1bmN0aW9uIGxldmVsX2NvbnRyb2xsZXJfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIGxldmVsX2NvbnRyb2xsZXJfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBsZXZlbF9jb250cm9sbGVyX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBsZXZlbF9jb250cm9sbGVyX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIGxldmVsX2NvbnRyb2xsZXJfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLypcbiAqIExldmVsIENvbnRyb2xsZXJcbiovXG5cblxuXG5cblxuXG52YXIgY2hyb21lT3JGaXJlZm94O1xuXG52YXIgbGV2ZWxfY29udHJvbGxlcl9MZXZlbENvbnRyb2xsZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9FdmVudEhhbmRsZXIpIHtcbiAgbGV2ZWxfY29udHJvbGxlcl9pbmhlcml0c0xvb3NlKExldmVsQ29udHJvbGxlciwgX0V2ZW50SGFuZGxlcik7XG5cbiAgZnVuY3Rpb24gTGV2ZWxDb250cm9sbGVyKGhscykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0V2ZW50SGFuZGxlci5jYWxsKHRoaXMsIGhscywgZXZlbnRzW1wiZGVmYXVsdFwiXS5NQU5JRkVTVF9MT0FERUQsIGV2ZW50c1tcImRlZmF1bHRcIl0uTEVWRUxfTE9BREVELCBldmVudHNbXCJkZWZhdWx0XCJdLkFVRElPX1RSQUNLX1NXSVRDSEVELCBldmVudHNbXCJkZWZhdWx0XCJdLkZSQUdfTE9BREVELCBldmVudHNbXCJkZWZhdWx0XCJdLkVSUk9SKSB8fCB0aGlzO1xuICAgIF90aGlzLmNhbmxvYWQgPSBmYWxzZTtcbiAgICBfdGhpcy5jdXJyZW50TGV2ZWxJbmRleCA9IG51bGw7XG4gICAgX3RoaXMubWFudWFsTGV2ZWxJbmRleCA9IC0xO1xuICAgIF90aGlzLnRpbWVyID0gbnVsbDtcbiAgICBjaHJvbWVPckZpcmVmb3ggPSAvY2hyb21lfGZpcmVmb3gvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGV2ZWxDb250cm9sbGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ub25IYW5kbGVyRGVzdHJveWluZyA9IGZ1bmN0aW9uIG9uSGFuZGxlckRlc3Ryb3lpbmcoKSB7XG4gICAgdGhpcy5jbGVhclRpbWVyKCk7XG4gICAgdGhpcy5tYW51YWxMZXZlbEluZGV4ID0gLTE7XG4gIH07XG5cbiAgX3Byb3RvLmNsZWFyVGltZXIgPSBmdW5jdGlvbiBjbGVhclRpbWVyKCkge1xuICAgIGlmICh0aGlzLnRpbWVyICE9PSBudWxsKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcik7XG4gICAgICB0aGlzLnRpbWVyID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnN0YXJ0TG9hZCA9IGZ1bmN0aW9uIHN0YXJ0TG9hZCgpIHtcbiAgICB2YXIgbGV2ZWxzID0gdGhpcy5fbGV2ZWxzO1xuICAgIHRoaXMuY2FubG9hZCA9IHRydWU7XG4gICAgdGhpcy5sZXZlbFJldHJ5Q291bnQgPSAwOyAvLyBjbGVhbiB1cCBsaXZlIGxldmVsIGRldGFpbHMgdG8gZm9yY2UgcmVsb2FkIHRoZW0sIGFuZCByZXNldCBsb2FkIGVycm9yc1xuXG4gICAgaWYgKGxldmVscykge1xuICAgICAgbGV2ZWxzLmZvckVhY2goZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgICAgIGxldmVsLmxvYWRFcnJvciA9IDA7XG4gICAgICAgIHZhciBsZXZlbERldGFpbHMgPSBsZXZlbC5kZXRhaWxzO1xuXG4gICAgICAgIGlmIChsZXZlbERldGFpbHMgJiYgbGV2ZWxEZXRhaWxzLmxpdmUpIHtcbiAgICAgICAgICBsZXZlbC5kZXRhaWxzID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IC8vIHNwZWVkIHVwIGxpdmUgcGxheWxpc3QgcmVmcmVzaCBpZiB0aW1lciBleGlzdHNcblxuXG4gICAgaWYgKHRoaXMudGltZXIgIT09IG51bGwpIHtcbiAgICAgIHRoaXMubG9hZExldmVsKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zdG9wTG9hZCA9IGZ1bmN0aW9uIHN0b3BMb2FkKCkge1xuICAgIHRoaXMuY2FubG9hZCA9IGZhbHNlO1xuICB9O1xuXG4gIF9wcm90by5vbk1hbmlmZXN0TG9hZGVkID0gZnVuY3Rpb24gb25NYW5pZmVzdExvYWRlZChkYXRhKSB7XG4gICAgdmFyIGxldmVscyA9IFtdO1xuICAgIHZhciBhdWRpb1RyYWNrcyA9IFtdO1xuICAgIHZhciBiaXRyYXRlU3RhcnQ7XG4gICAgdmFyIGxldmVsU2V0ID0ge307XG4gICAgdmFyIGxldmVsRnJvbVNldCA9IG51bGw7XG4gICAgdmFyIHZpZGVvQ29kZWNGb3VuZCA9IGZhbHNlO1xuICAgIHZhciBhdWRpb0NvZGVjRm91bmQgPSBmYWxzZTsgLy8gcmVncm91cCByZWR1bmRhbnQgbGV2ZWxzIHRvZ2V0aGVyXG5cbiAgICBkYXRhLmxldmVscy5mb3JFYWNoKGZ1bmN0aW9uIChsZXZlbCkge1xuICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBsZXZlbC5hdHRycztcbiAgICAgIGxldmVsLmxvYWRFcnJvciA9IDA7XG4gICAgICBsZXZlbC5mcmFnbWVudEVycm9yID0gZmFsc2U7XG4gICAgICB2aWRlb0NvZGVjRm91bmQgPSB2aWRlb0NvZGVjRm91bmQgfHwgISFsZXZlbC52aWRlb0NvZGVjO1xuICAgICAgYXVkaW9Db2RlY0ZvdW5kID0gYXVkaW9Db2RlY0ZvdW5kIHx8ICEhbGV2ZWwuYXVkaW9Db2RlYzsgLy8gZXJhc2UgYXVkaW8gY29kZWMgaW5mbyBpZiBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgbXA0YS40MC4zNC5cbiAgICAgIC8vIGRlbXV4ZXIgd2lsbCBhdXRvZGV0ZWN0IGNvZGVjIGFuZCBmYWxsYmFjayB0byBtcGVnL2F1ZGlvXG5cbiAgICAgIGlmIChjaHJvbWVPckZpcmVmb3ggJiYgbGV2ZWwuYXVkaW9Db2RlYyAmJiBsZXZlbC5hdWRpb0NvZGVjLmluZGV4T2YoJ21wNGEuNDAuMzQnKSAhPT0gLTEpIHtcbiAgICAgICAgbGV2ZWwuYXVkaW9Db2RlYyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgbGV2ZWxGcm9tU2V0ID0gbGV2ZWxTZXRbbGV2ZWwuYml0cmF0ZV07IC8vIEZJWE1FOiB3ZSB3b3VsZCBhbHNvIGhhdmUgdG8gbWF0Y2ggdGhlIHJlc29sdXRpb24gaGVyZVxuXG4gICAgICBpZiAoIWxldmVsRnJvbVNldCkge1xuICAgICAgICBsZXZlbC51cmwgPSBbbGV2ZWwudXJsXTtcbiAgICAgICAgbGV2ZWwudXJsSWQgPSAwO1xuICAgICAgICBsZXZlbFNldFtsZXZlbC5iaXRyYXRlXSA9IGxldmVsO1xuICAgICAgICBsZXZlbHMucHVzaChsZXZlbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXZlbEZyb21TZXQudXJsLnB1c2gobGV2ZWwudXJsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZXMuQVVESU8pIHtcbiAgICAgICAgICBhZGRHcm91cElkKGxldmVsRnJvbVNldCB8fCBsZXZlbCwgJ2F1ZGlvJywgYXR0cmlidXRlcy5BVURJTyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXR0cmlidXRlcy5TVUJUSVRMRVMpIHtcbiAgICAgICAgICBhZGRHcm91cElkKGxldmVsRnJvbVNldCB8fCBsZXZlbCwgJ3RleHQnLCBhdHRyaWJ1dGVzLlNVQlRJVExFUyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTsgLy8gcmVtb3ZlIGF1ZGlvLW9ubHkgbGV2ZWwgaWYgd2UgYWxzbyBoYXZlIGxldmVscyB3aXRoIGF1ZGlvK3ZpZGVvIGNvZGVjcyBzaWduYWxsZWRcblxuICAgIGlmICh2aWRlb0NvZGVjRm91bmQgJiYgYXVkaW9Db2RlY0ZvdW5kKSB7XG4gICAgICBsZXZlbHMgPSBsZXZlbHMuZmlsdGVyKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgIHZhciB2aWRlb0NvZGVjID0gX3JlZi52aWRlb0NvZGVjO1xuICAgICAgICByZXR1cm4gISF2aWRlb0NvZGVjO1xuICAgICAgfSk7XG4gICAgfSAvLyBvbmx5IGtlZXAgbGV2ZWxzIHdpdGggc3VwcG9ydGVkIGF1ZGlvL3ZpZGVvIGNvZGVjc1xuXG5cbiAgICBsZXZlbHMgPSBsZXZlbHMuZmlsdGVyKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgdmFyIGF1ZGlvQ29kZWMgPSBfcmVmMi5hdWRpb0NvZGVjLFxuICAgICAgICAgIHZpZGVvQ29kZWMgPSBfcmVmMi52aWRlb0NvZGVjO1xuICAgICAgcmV0dXJuICghYXVkaW9Db2RlYyB8fCBpc0NvZGVjU3VwcG9ydGVkSW5NcDQoYXVkaW9Db2RlYywgJ2F1ZGlvJykpICYmICghdmlkZW9Db2RlYyB8fCBpc0NvZGVjU3VwcG9ydGVkSW5NcDQodmlkZW9Db2RlYywgJ3ZpZGVvJykpO1xuICAgIH0pO1xuXG4gICAgaWYgKGRhdGEuYXVkaW9UcmFja3MpIHtcbiAgICAgIGF1ZGlvVHJhY2tzID0gZGF0YS5hdWRpb1RyYWNrcy5maWx0ZXIoZnVuY3Rpb24gKHRyYWNrKSB7XG4gICAgICAgIHJldHVybiAhdHJhY2suYXVkaW9Db2RlYyB8fCBpc0NvZGVjU3VwcG9ydGVkSW5NcDQodHJhY2suYXVkaW9Db2RlYywgJ2F1ZGlvJyk7XG4gICAgICB9KTsgLy8gUmVhc3NpZ24gaWQncyBhZnRlciBmaWx0ZXJpbmcgc2luY2UgdGhleSdyZSB1c2VkIGFzIGFycmF5IGluZGljZXNcblxuICAgICAgYXVkaW9UcmFja3MuZm9yRWFjaChmdW5jdGlvbiAodHJhY2ssIGluZGV4KSB7XG4gICAgICAgIHRyYWNrLmlkID0gaW5kZXg7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAobGV2ZWxzLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIHN0YXJ0IGJpdHJhdGUgaXMgdGhlIGZpcnN0IGJpdHJhdGUgb2YgdGhlIG1hbmlmZXN0XG4gICAgICBiaXRyYXRlU3RhcnQgPSBsZXZlbHNbMF0uYml0cmF0ZTsgLy8gc29ydCBsZXZlbCBvbiBiaXRyYXRlXG5cbiAgICAgIGxldmVscy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhLmJpdHJhdGUgLSBiLmJpdHJhdGU7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuX2xldmVscyA9IGxldmVsczsgLy8gZmluZCBpbmRleCBvZiBmaXJzdCBsZXZlbCBpbiBzb3J0ZWQgbGV2ZWxzXG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGV2ZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChsZXZlbHNbaV0uYml0cmF0ZSA9PT0gYml0cmF0ZVN0YXJ0KSB7XG4gICAgICAgICAgdGhpcy5fZmlyc3RMZXZlbCA9IGk7XG4gICAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyhcIm1hbmlmZXN0IGxvYWRlZCxcIiArIGxldmVscy5sZW5ndGggKyBcIiBsZXZlbChzKSBmb3VuZCwgZmlyc3QgYml0cmF0ZTpcIiArIGJpdHJhdGVTdGFydCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gQXVkaW8gaXMgb25seSBhbHRlcm5hdGUgaWYgbWFuaWZlc3QgaW5jbHVkZSBhIFVSSSBhbG9uZyB3aXRoIHRoZSBhdWRpbyBncm91cCB0YWcsXG4gICAgICAvLyBhbmQgdGhpcyBpcyBub3QgYW4gYXVkaW8tb25seSBzdHJlYW0gd2hlcmUgbGV2ZWxzIGNvbnRhaW4gYXVkaW8tb25seVxuXG5cbiAgICAgIHZhciBhdWRpb09ubHkgPSBhdWRpb0NvZGVjRm91bmQgJiYgIXZpZGVvQ29kZWNGb3VuZDtcbiAgICAgIHRoaXMuaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5NQU5JRkVTVF9QQVJTRUQsIHtcbiAgICAgICAgbGV2ZWxzOiBsZXZlbHMsXG4gICAgICAgIGF1ZGlvVHJhY2tzOiBhdWRpb1RyYWNrcyxcbiAgICAgICAgZmlyc3RMZXZlbDogdGhpcy5fZmlyc3RMZXZlbCxcbiAgICAgICAgc3RhdHM6IGRhdGEuc3RhdHMsXG4gICAgICAgIGF1ZGlvOiBhdWRpb0NvZGVjRm91bmQsXG4gICAgICAgIHZpZGVvOiB2aWRlb0NvZGVjRm91bmQsXG4gICAgICAgIGFsdEF1ZGlvOiAhYXVkaW9Pbmx5ICYmIGF1ZGlvVHJhY2tzLnNvbWUoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gISF0LnVybDtcbiAgICAgICAgfSlcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uRVJST1IsIHtcbiAgICAgICAgdHlwZTogZXJyb3JzW1wiRXJyb3JUeXBlc1wiXS5NRURJQV9FUlJPUixcbiAgICAgICAgZGV0YWlsczogZXJyb3JzW1wiRXJyb3JEZXRhaWxzXCJdLk1BTklGRVNUX0lOQ09NUEFUSUJMRV9DT0RFQ1NfRVJST1IsXG4gICAgICAgIGZhdGFsOiB0cnVlLFxuICAgICAgICB1cmw6IHRoaXMuaGxzLnVybCxcbiAgICAgICAgcmVhc29uOiAnbm8gbGV2ZWwgd2l0aCBjb21wYXRpYmxlIGNvZGVjcyBmb3VuZCBpbiBtYW5pZmVzdCdcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2V0TGV2ZWxJbnRlcm5hbCA9IGZ1bmN0aW9uIHNldExldmVsSW50ZXJuYWwobmV3TGV2ZWwpIHtcbiAgICB2YXIgbGV2ZWxzID0gdGhpcy5fbGV2ZWxzO1xuICAgIHZhciBobHMgPSB0aGlzLmhsczsgLy8gY2hlY2sgaWYgbGV2ZWwgaWR4IGlzIHZhbGlkXG5cbiAgICBpZiAobmV3TGV2ZWwgPj0gMCAmJiBuZXdMZXZlbCA8IGxldmVscy5sZW5ndGgpIHtcbiAgICAgIC8vIHN0b3BwaW5nIGxpdmUgcmVsb2FkaW5nIHRpbWVyIGlmIGFueVxuICAgICAgdGhpcy5jbGVhclRpbWVyKCk7XG5cbiAgICAgIGlmICh0aGlzLmN1cnJlbnRMZXZlbEluZGV4ICE9PSBuZXdMZXZlbCkge1xuICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKFwic3dpdGNoaW5nIHRvIGxldmVsIFwiICsgbmV3TGV2ZWwpO1xuICAgICAgICB0aGlzLmN1cnJlbnRMZXZlbEluZGV4ID0gbmV3TGV2ZWw7XG4gICAgICAgIHZhciBsZXZlbFByb3BlcnRpZXMgPSBsZXZlbHNbbmV3TGV2ZWxdO1xuICAgICAgICBsZXZlbFByb3BlcnRpZXMubGV2ZWwgPSBuZXdMZXZlbDtcbiAgICAgICAgaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5MRVZFTF9TV0lUQ0hJTkcsIGxldmVsUHJvcGVydGllcyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBsZXZlbCA9IGxldmVsc1tuZXdMZXZlbF07XG4gICAgICB2YXIgbGV2ZWxEZXRhaWxzID0gbGV2ZWwuZGV0YWlsczsgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBsb2FkIHBsYXlsaXN0IGZvciB0aGlzIGxldmVsXG5cbiAgICAgIGlmICghbGV2ZWxEZXRhaWxzIHx8IGxldmVsRGV0YWlscy5saXZlKSB7XG4gICAgICAgIC8vIGxldmVsIG5vdCByZXRyaWV2ZWQgeWV0LCBvciBsaXZlIHBsYXlsaXN0IHdlIG5lZWQgdG8gKHJlKWxvYWQgaXRcbiAgICAgICAgdmFyIHVybElkID0gbGV2ZWwudXJsSWQ7XG4gICAgICAgIGhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uTEVWRUxfTE9BRElORywge1xuICAgICAgICAgIHVybDogbGV2ZWwudXJsW3VybElkXSxcbiAgICAgICAgICBsZXZlbDogbmV3TGV2ZWwsXG4gICAgICAgICAgaWQ6IHVybElkXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbnZhbGlkIGxldmVsIGlkIGdpdmVuLCB0cmlnZ2VyIGVycm9yXG4gICAgICBobHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkVSUk9SLCB7XG4gICAgICAgIHR5cGU6IGVycm9yc1tcIkVycm9yVHlwZXNcIl0uT1RIRVJfRVJST1IsXG4gICAgICAgIGRldGFpbHM6IGVycm9yc1tcIkVycm9yRGV0YWlsc1wiXS5MRVZFTF9TV0lUQ0hfRVJST1IsXG4gICAgICAgIGxldmVsOiBuZXdMZXZlbCxcbiAgICAgICAgZmF0YWw6IGZhbHNlLFxuICAgICAgICByZWFzb246ICdpbnZhbGlkIGxldmVsIGlkeCdcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25FcnJvciA9IGZ1bmN0aW9uIG9uRXJyb3IoZGF0YSkge1xuICAgIGlmIChkYXRhLmZhdGFsKSB7XG4gICAgICBpZiAoZGF0YS50eXBlID09PSBlcnJvcnNbXCJFcnJvclR5cGVzXCJdLk5FVFdPUktfRVJST1IpIHtcbiAgICAgICAgdGhpcy5jbGVhclRpbWVyKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbGV2ZWxFcnJvciA9IGZhbHNlLFxuICAgICAgICBmcmFnbWVudEVycm9yID0gZmFsc2U7XG4gICAgdmFyIGxldmVsSW5kZXg7IC8vIHRyeSB0byByZWNvdmVyIG5vdCBmYXRhbCBlcnJvcnNcblxuICAgIHN3aXRjaCAoZGF0YS5kZXRhaWxzKSB7XG4gICAgICBjYXNlIGVycm9yc1tcIkVycm9yRGV0YWlsc1wiXS5GUkFHX0xPQURfRVJST1I6XG4gICAgICBjYXNlIGVycm9yc1tcIkVycm9yRGV0YWlsc1wiXS5GUkFHX0xPQURfVElNRU9VVDpcbiAgICAgIGNhc2UgZXJyb3JzW1wiRXJyb3JEZXRhaWxzXCJdLktFWV9MT0FEX0VSUk9SOlxuICAgICAgY2FzZSBlcnJvcnNbXCJFcnJvckRldGFpbHNcIl0uS0VZX0xPQURfVElNRU9VVDpcbiAgICAgICAgbGV2ZWxJbmRleCA9IGRhdGEuZnJhZy5sZXZlbDtcbiAgICAgICAgZnJhZ21lbnRFcnJvciA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIGVycm9yc1tcIkVycm9yRGV0YWlsc1wiXS5MRVZFTF9MT0FEX0VSUk9SOlxuICAgICAgY2FzZSBlcnJvcnNbXCJFcnJvckRldGFpbHNcIl0uTEVWRUxfTE9BRF9USU1FT1VUOlxuICAgICAgICBsZXZlbEluZGV4ID0gZGF0YS5jb250ZXh0LmxldmVsO1xuICAgICAgICBsZXZlbEVycm9yID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgZXJyb3JzW1wiRXJyb3JEZXRhaWxzXCJdLlJFTVVYX0FMTE9DX0VSUk9SOlxuICAgICAgICBsZXZlbEluZGV4ID0gZGF0YS5sZXZlbDtcbiAgICAgICAgbGV2ZWxFcnJvciA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChsZXZlbEluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMucmVjb3ZlckxldmVsKGRhdGEsIGxldmVsSW5kZXgsIGxldmVsRXJyb3IsIGZyYWdtZW50RXJyb3IpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogU3dpdGNoIHRvIGEgcmVkdW5kYW50IHN0cmVhbSBpZiBhbnkgYXZhaWxhYmxlLlxuICAgKiBJZiByZWR1bmRhbnQgc3RyZWFtIGlzIG5vdCBhdmFpbGFibGUsIGVtZXJnZW5jeSBzd2l0Y2ggZG93biBpZiBBQlIgbW9kZSBpcyBlbmFibGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gZXJyb3JFdmVudFxuICAgKiBAcGFyYW0ge051bWJlcn0gbGV2ZWxJbmRleCBjdXJyZW50IGxldmVsIGluZGV4XG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gbGV2ZWxFcnJvclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGZyYWdtZW50RXJyb3JcbiAgICovXG4gIC8vIEZJWE1FIEZpbmQgYSBiZXR0ZXIgYWJzdHJhY3Rpb24gd2hlcmUgZnJhZ21lbnQvbGV2ZWwgcmV0cnkgbWFuYWdlbWVudCBpcyB3ZWxsIGRlY291cGxlZFxuICA7XG5cbiAgX3Byb3RvLnJlY292ZXJMZXZlbCA9IGZ1bmN0aW9uIHJlY292ZXJMZXZlbChlcnJvckV2ZW50LCBsZXZlbEluZGV4LCBsZXZlbEVycm9yLCBmcmFnbWVudEVycm9yKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgY29uZmlnID0gdGhpcy5obHMuY29uZmlnO1xuICAgIHZhciBlcnJvckRldGFpbHMgPSBlcnJvckV2ZW50LmRldGFpbHM7XG4gICAgdmFyIGxldmVsID0gdGhpcy5fbGV2ZWxzW2xldmVsSW5kZXhdO1xuICAgIHZhciByZWR1bmRhbnRMZXZlbHMsIGRlbGF5LCBuZXh0TGV2ZWw7XG4gICAgbGV2ZWwubG9hZEVycm9yKys7XG4gICAgbGV2ZWwuZnJhZ21lbnRFcnJvciA9IGZyYWdtZW50RXJyb3I7XG5cbiAgICBpZiAobGV2ZWxFcnJvcikge1xuICAgICAgaWYgKHRoaXMubGV2ZWxSZXRyeUNvdW50ICsgMSA8PSBjb25maWcubGV2ZWxMb2FkaW5nTWF4UmV0cnkpIHtcbiAgICAgICAgLy8gZXhwb25lbnRpYWwgYmFja29mZiBjYXBwZWQgdG8gbWF4IHJldHJ5IHRpbWVvdXRcbiAgICAgICAgZGVsYXkgPSBNYXRoLm1pbihNYXRoLnBvdygyLCB0aGlzLmxldmVsUmV0cnlDb3VudCkgKiBjb25maWcubGV2ZWxMb2FkaW5nUmV0cnlEZWxheSwgY29uZmlnLmxldmVsTG9hZGluZ01heFJldHJ5VGltZW91dCk7IC8vIFNjaGVkdWxlIGxldmVsIHJlbG9hZFxuXG4gICAgICAgIHRoaXMudGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLmxvYWRMZXZlbCgpO1xuICAgICAgICB9LCBkZWxheSk7IC8vIGJvb2xlYW4gdXNlZCB0byBpbmZvcm0gc3RyZWFtIGNvbnRyb2xsZXIgbm90IHRvIHN3aXRjaCBiYWNrIHRvIElETEUgb24gbm9uIGZhdGFsIGVycm9yXG5cbiAgICAgICAgZXJyb3JFdmVudC5sZXZlbFJldHJ5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5sZXZlbFJldHJ5Q291bnQrKztcbiAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLndhcm4oXCJsZXZlbCBjb250cm9sbGVyLCBcIiArIGVycm9yRGV0YWlscyArIFwiLCByZXRyeSBpbiBcIiArIGRlbGF5ICsgXCIgbXMsIGN1cnJlbnQgcmV0cnkgY291bnQgaXMgXCIgKyB0aGlzLmxldmVsUmV0cnlDb3VudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0uZXJyb3IoXCJsZXZlbCBjb250cm9sbGVyLCBjYW5ub3QgcmVjb3ZlciBmcm9tIFwiICsgZXJyb3JEZXRhaWxzICsgXCIgZXJyb3JcIik7XG4gICAgICAgIHRoaXMuY3VycmVudExldmVsSW5kZXggPSBudWxsOyAvLyBzdG9wcGluZyBsaXZlIHJlbG9hZGluZyB0aW1lciBpZiBhbnlcblxuICAgICAgICB0aGlzLmNsZWFyVGltZXIoKTsgLy8gc3dpdGNoIGVycm9yIHRvIGZhdGFsXG5cbiAgICAgICAgZXJyb3JFdmVudC5mYXRhbCA9IHRydWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IC8vIFRyeSBhbnkgcmVkdW5kYW50IHN0cmVhbXMgaWYgYXZhaWxhYmxlIGZvciBib3RoIGVycm9yczogbGV2ZWwgYW5kIGZyYWdtZW50XG4gICAgLy8gSWYgbGV2ZWwubG9hZEVycm9yIHJlYWNoZXMgcmVkdW5kYW50TGV2ZWxzIGl0IG1lYW5zIHRoYXQgd2UgdHJpZWQgdGhlbSBhbGwsIG5vIGhvcGUgID0+IGxldCdzIHN3aXRjaCBkb3duXG5cblxuICAgIGlmIChsZXZlbEVycm9yIHx8IGZyYWdtZW50RXJyb3IpIHtcbiAgICAgIHJlZHVuZGFudExldmVscyA9IGxldmVsLnVybC5sZW5ndGg7XG5cbiAgICAgIGlmIChyZWR1bmRhbnRMZXZlbHMgPiAxICYmIGxldmVsLmxvYWRFcnJvciA8IHJlZHVuZGFudExldmVscykge1xuICAgICAgICBsZXZlbC51cmxJZCA9IChsZXZlbC51cmxJZCArIDEpICUgcmVkdW5kYW50TGV2ZWxzO1xuICAgICAgICBsZXZlbC5kZXRhaWxzID0gdW5kZWZpbmVkO1xuICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ud2FybihcImxldmVsIGNvbnRyb2xsZXIsIFwiICsgZXJyb3JEZXRhaWxzICsgXCIgZm9yIGxldmVsIFwiICsgbGV2ZWxJbmRleCArIFwiOiBzd2l0Y2hpbmcgdG8gcmVkdW5kYW50IFVSTC1pZCBcIiArIGxldmVsLnVybElkKTsgLy8gY29uc29sZS5sb2coJ0N1cnJlbnQgYXVkaW8gdHJhY2sgZ3JvdXAgSUQ6JywgdGhpcy5obHMuYXVkaW9UcmFja3NbdGhpcy5obHMuYXVkaW9UcmFja10uZ3JvdXBJZCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdOZXcgdmlkZW8gcXVhbGl0eSBsZXZlbCBhdWRpbyBncm91cCBpZDonLCBsZXZlbC5hdHRycy5BVURJTyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTZWFyY2ggZm9yIGF2YWlsYWJsZSBsZXZlbFxuICAgICAgICBpZiAodGhpcy5tYW51YWxMZXZlbEluZGV4ID09PSAtMSkge1xuICAgICAgICAgIC8vIFdoZW4gbG93ZXN0IGxldmVsIGhhcyBiZWVuIHJlYWNoZWQsIGxldCdzIHN0YXJ0IGh1bnQgZnJvbSB0aGUgdG9wXG4gICAgICAgICAgbmV4dExldmVsID0gbGV2ZWxJbmRleCA9PT0gMCA/IHRoaXMuX2xldmVscy5sZW5ndGggLSAxIDogbGV2ZWxJbmRleCAtIDE7XG4gICAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLndhcm4oXCJsZXZlbCBjb250cm9sbGVyLCBcIiArIGVycm9yRGV0YWlscyArIFwiOiBzd2l0Y2ggdG8gXCIgKyBuZXh0TGV2ZWwpO1xuICAgICAgICAgIHRoaXMuaGxzLm5leHRBdXRvTGV2ZWwgPSB0aGlzLmN1cnJlbnRMZXZlbEluZGV4ID0gbmV4dExldmVsO1xuICAgICAgICB9IGVsc2UgaWYgKGZyYWdtZW50RXJyb3IpIHtcbiAgICAgICAgICAvLyBBbGxvdyBmcmFnbWVudCByZXRyeSBhcyBsb25nIGFzIGNvbmZpZ3VyYXRpb24gYWxsb3dzLlxuICAgICAgICAgIC8vIHJlc2V0IHRoaXMuX2xldmVsIHNvIHRoYXQgYW5vdGhlciBjYWxsIHRvIHNldCBsZXZlbCgpIHdpbGwgdHJpZ2dlciBhZ2FpbiBhIGZyYWcgbG9hZFxuICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuKFwibGV2ZWwgY29udHJvbGxlciwgXCIgKyBlcnJvckRldGFpbHMgKyBcIjogcmVsb2FkIGEgZnJhZ21lbnRcIik7XG4gICAgICAgICAgdGhpcy5jdXJyZW50TGV2ZWxJbmRleCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gcmVzZXQgZXJyb3JzIG9uIHRoZSBzdWNjZXNzZnVsIGxvYWQgb2YgYSBmcmFnbWVudFxuICA7XG5cbiAgX3Byb3RvLm9uRnJhZ0xvYWRlZCA9IGZ1bmN0aW9uIG9uRnJhZ0xvYWRlZChfcmVmMykge1xuICAgIHZhciBmcmFnID0gX3JlZjMuZnJhZztcblxuICAgIGlmIChmcmFnICE9PSB1bmRlZmluZWQgJiYgZnJhZy50eXBlID09PSAnbWFpbicpIHtcbiAgICAgIHZhciBsZXZlbCA9IHRoaXMuX2xldmVsc1tmcmFnLmxldmVsXTtcblxuICAgICAgaWYgKGxldmVsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV2ZWwuZnJhZ21lbnRFcnJvciA9IGZhbHNlO1xuICAgICAgICBsZXZlbC5sb2FkRXJyb3IgPSAwO1xuICAgICAgICB0aGlzLmxldmVsUmV0cnlDb3VudCA9IDA7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vbkxldmVsTG9hZGVkID0gZnVuY3Rpb24gb25MZXZlbExvYWRlZChkYXRhKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgbGV2ZWwgPSBkYXRhLmxldmVsLFxuICAgICAgICBkZXRhaWxzID0gZGF0YS5kZXRhaWxzOyAvLyBvbmx5IHByb2Nlc3MgbGV2ZWwgbG9hZGVkIGV2ZW50cyBtYXRjaGluZyB3aXRoIGV4cGVjdGVkIGxldmVsXG5cbiAgICBpZiAobGV2ZWwgIT09IHRoaXMuY3VycmVudExldmVsSW5kZXgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY3VyTGV2ZWwgPSB0aGlzLl9sZXZlbHNbbGV2ZWxdOyAvLyByZXNldCBsZXZlbCBsb2FkIGVycm9yIGNvdW50ZXIgb24gc3VjY2Vzc2Z1bCBsZXZlbCBsb2FkZWQgb25seSBpZiB0aGVyZSBpcyBubyBpc3N1ZXMgd2l0aCBmcmFnbWVudHNcblxuICAgIGlmICghY3VyTGV2ZWwuZnJhZ21lbnRFcnJvcikge1xuICAgICAgY3VyTGV2ZWwubG9hZEVycm9yID0gMDtcbiAgICAgIHRoaXMubGV2ZWxSZXRyeUNvdW50ID0gMDtcbiAgICB9IC8vIGlmIGN1cnJlbnQgcGxheWxpc3QgaXMgYSBsaXZlIHBsYXlsaXN0LCBhcm0gYSB0aW1lciB0byByZWxvYWQgaXRcblxuXG4gICAgaWYgKGRldGFpbHMubGl2ZSkge1xuICAgICAgdmFyIHJlbG9hZEludGVydmFsID0gY29tcHV0ZVJlbG9hZEludGVydmFsKGN1ckxldmVsLmRldGFpbHMsIGRldGFpbHMsIGRhdGEuc3RhdHMudHJlcXVlc3QpO1xuICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyhcImxpdmUgcGxheWxpc3QsIHJlbG9hZCBpbiBcIiArIE1hdGgucm91bmQocmVsb2FkSW50ZXJ2YWwpICsgXCIgbXNcIik7XG4gICAgICB0aGlzLnRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczMubG9hZExldmVsKCk7XG4gICAgICB9LCByZWxvYWRJbnRlcnZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2xlYXJUaW1lcigpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25BdWRpb1RyYWNrU3dpdGNoZWQgPSBmdW5jdGlvbiBvbkF1ZGlvVHJhY2tTd2l0Y2hlZChkYXRhKSB7XG4gICAgdmFyIGF1ZGlvR3JvdXBJZCA9IHRoaXMuaGxzLmF1ZGlvVHJhY2tzW2RhdGEuaWRdLmdyb3VwSWQ7XG4gICAgdmFyIGN1cnJlbnRMZXZlbCA9IHRoaXMuaGxzLmxldmVsc1t0aGlzLmN1cnJlbnRMZXZlbEluZGV4XTtcblxuICAgIGlmICghY3VycmVudExldmVsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGN1cnJlbnRMZXZlbC5hdWRpb0dyb3VwSWRzKSB7XG4gICAgICB2YXIgdXJsSWQgPSAtMTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjdXJyZW50TGV2ZWwuYXVkaW9Hcm91cElkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoY3VycmVudExldmVsLmF1ZGlvR3JvdXBJZHNbaV0gPT09IGF1ZGlvR3JvdXBJZCkge1xuICAgICAgICAgIHVybElkID0gaTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodXJsSWQgIT09IGN1cnJlbnRMZXZlbC51cmxJZCkge1xuICAgICAgICBjdXJyZW50TGV2ZWwudXJsSWQgPSB1cmxJZDtcbiAgICAgICAgdGhpcy5zdGFydExvYWQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmxvYWRMZXZlbCA9IGZ1bmN0aW9uIGxvYWRMZXZlbCgpIHtcbiAgICBsb2dnZXJbXCJsb2dnZXJcIl0uZGVidWcoJ2NhbGwgdG8gbG9hZExldmVsJyk7XG5cbiAgICBpZiAodGhpcy5jdXJyZW50TGV2ZWxJbmRleCAhPT0gbnVsbCAmJiB0aGlzLmNhbmxvYWQpIHtcbiAgICAgIHZhciBsZXZlbE9iamVjdCA9IHRoaXMuX2xldmVsc1t0aGlzLmN1cnJlbnRMZXZlbEluZGV4XTtcblxuICAgICAgaWYgKHR5cGVvZiBsZXZlbE9iamVjdCA9PT0gJ29iamVjdCcgJiYgbGV2ZWxPYmplY3QudXJsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIGxldmVsID0gdGhpcy5jdXJyZW50TGV2ZWxJbmRleDtcbiAgICAgICAgdmFyIGlkID0gbGV2ZWxPYmplY3QudXJsSWQ7XG4gICAgICAgIHZhciB1cmwgPSBsZXZlbE9iamVjdC51cmxbaWRdO1xuICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKFwiQXR0ZW1wdCBsb2FkaW5nIGxldmVsIGluZGV4IFwiICsgbGV2ZWwgKyBcIiB3aXRoIFVSTC1pZCBcIiArIGlkKTsgLy8gY29uc29sZS5sb2coJ0N1cnJlbnQgYXVkaW8gdHJhY2sgZ3JvdXAgSUQ6JywgdGhpcy5obHMuYXVkaW9UcmFja3NbdGhpcy5obHMuYXVkaW9UcmFja10uZ3JvdXBJZCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdOZXcgdmlkZW8gcXVhbGl0eSBsZXZlbCBhdWRpbyBncm91cCBpZDonLCBsZXZlbE9iamVjdC5hdHRycy5BVURJTywgbGV2ZWwpO1xuXG4gICAgICAgIHRoaXMuaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5MRVZFTF9MT0FESU5HLCB7XG4gICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgbGV2ZWw6IGxldmVsLFxuICAgICAgICAgIGlkOiBpZFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbW92ZUxldmVsID0gZnVuY3Rpb24gcmVtb3ZlTGV2ZWwobGV2ZWxJbmRleCwgdXJsSWQpIHtcbiAgICB2YXIgbGV2ZWxzID0gdGhpcy5sZXZlbHMuZmlsdGVyKGZ1bmN0aW9uIChsZXZlbCwgaW5kZXgpIHtcbiAgICAgIGlmIChpbmRleCAhPT0gbGV2ZWxJbmRleCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxldmVsLnVybC5sZW5ndGggPiAxICYmIHVybElkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV2ZWwudXJsID0gbGV2ZWwudXJsLmZpbHRlcihmdW5jdGlvbiAodXJsLCBpZCkge1xuICAgICAgICAgIHJldHVybiBpZCAhPT0gdXJsSWQ7XG4gICAgICAgIH0pO1xuICAgICAgICBsZXZlbC51cmxJZCA9IDA7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSkubWFwKGZ1bmN0aW9uIChsZXZlbCwgaW5kZXgpIHtcbiAgICAgIHZhciBkZXRhaWxzID0gbGV2ZWwuZGV0YWlscztcblxuICAgICAgaWYgKGRldGFpbHMgJiYgZGV0YWlscy5mcmFnbWVudHMpIHtcbiAgICAgICAgZGV0YWlscy5mcmFnbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZnJhZ21lbnQpIHtcbiAgICAgICAgICBmcmFnbWVudC5sZXZlbCA9IGluZGV4O1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGxldmVsO1xuICAgIH0pO1xuICAgIHRoaXMuX2xldmVscyA9IGxldmVscztcbiAgICB0aGlzLmhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uTEVWRUxTX1VQREFURUQsIHtcbiAgICAgIGxldmVsczogbGV2ZWxzXG4gICAgfSk7XG4gIH07XG5cbiAgbGV2ZWxfY29udHJvbGxlcl9jcmVhdGVDbGFzcyhMZXZlbENvbnRyb2xsZXIsIFt7XG4gICAga2V5OiBcImxldmVsc1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2xldmVscztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibGV2ZWxcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRMZXZlbEluZGV4O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQobmV3TGV2ZWwpIHtcbiAgICAgIHZhciBsZXZlbHMgPSB0aGlzLl9sZXZlbHM7XG5cbiAgICAgIGlmIChsZXZlbHMpIHtcbiAgICAgICAgbmV3TGV2ZWwgPSBNYXRoLm1pbihuZXdMZXZlbCwgbGV2ZWxzLmxlbmd0aCAtIDEpO1xuXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRMZXZlbEluZGV4ICE9PSBuZXdMZXZlbCB8fCAhbGV2ZWxzW25ld0xldmVsXS5kZXRhaWxzKSB7XG4gICAgICAgICAgdGhpcy5zZXRMZXZlbEludGVybmFsKG5ld0xldmVsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJtYW51YWxMZXZlbFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMubWFudWFsTGV2ZWxJbmRleDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld0xldmVsKSB7XG4gICAgICB0aGlzLm1hbnVhbExldmVsSW5kZXggPSBuZXdMZXZlbDtcblxuICAgICAgaWYgKHRoaXMuX3N0YXJ0TGV2ZWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9zdGFydExldmVsID0gbmV3TGV2ZWw7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXdMZXZlbCAhPT0gLTEpIHtcbiAgICAgICAgdGhpcy5sZXZlbCA9IG5ld0xldmVsO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmaXJzdExldmVsXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZmlyc3RMZXZlbDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld0xldmVsKSB7XG4gICAgICB0aGlzLl9maXJzdExldmVsID0gbmV3TGV2ZWw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0YXJ0TGV2ZWxcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIC8vIGhscy5zdGFydExldmVsIHRha2VzIHByZWNlZGVuY2Ugb3ZlciBjb25maWcuc3RhcnRMZXZlbFxuICAgICAgLy8gaWYgbm9uZSBvZiB0aGVzZSB2YWx1ZXMgYXJlIGRlZmluZWQsIGZhbGxiYWNrIG9uIHRoaXMuX2ZpcnN0TGV2ZWwgKGZpcnN0IHF1YWxpdHkgbGV2ZWwgYXBwZWFyaW5nIGluIHZhcmlhbnQgbWFuaWZlc3QpXG4gICAgICBpZiAodGhpcy5fc3RhcnRMZXZlbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBjb25maWdTdGFydExldmVsID0gdGhpcy5obHMuY29uZmlnLnN0YXJ0TGV2ZWw7XG5cbiAgICAgICAgaWYgKGNvbmZpZ1N0YXJ0TGV2ZWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBjb25maWdTdGFydExldmVsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9maXJzdExldmVsO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhcnRMZXZlbDtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld0xldmVsKSB7XG4gICAgICB0aGlzLl9zdGFydExldmVsID0gbmV3TGV2ZWw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm5leHRMb2FkTGV2ZWxcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIGlmICh0aGlzLm1hbnVhbExldmVsSW5kZXggIT09IC0xKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hbnVhbExldmVsSW5kZXg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5obHMubmV4dEF1dG9MZXZlbDtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG5leHRMZXZlbCkge1xuICAgICAgdGhpcy5sZXZlbCA9IG5leHRMZXZlbDtcblxuICAgICAgaWYgKHRoaXMubWFudWFsTGV2ZWxJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgdGhpcy5obHMubmV4dEF1dG9MZXZlbCA9IG5leHRMZXZlbDtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTGV2ZWxDb250cm9sbGVyO1xufShldmVudF9oYW5kbGVyKTtcblxuXG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vc3JjL2RlbXV4L2lkMy5qc1xudmFyIGlkMyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9kZW11eC9pZDMuanNcIik7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3V0aWxzL3RleHR0cmFjay11dGlscy50c1xuZnVuY3Rpb24gc2VuZEFkZFRyYWNrRXZlbnQodHJhY2ssIHZpZGVvRWwpIHtcbiAgdmFyIGV2ZW50O1xuXG4gIHRyeSB7XG4gICAgZXZlbnQgPSBuZXcgRXZlbnQoJ2FkZHRyYWNrJyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIGZvciBJRTExXG4gICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBldmVudC5pbml0RXZlbnQoJ2FkZHRyYWNrJywgZmFsc2UsIGZhbHNlKTtcbiAgfVxuXG4gIGV2ZW50LnRyYWNrID0gdHJhY2s7XG4gIHZpZGVvRWwuZGlzcGF0Y2hFdmVudChldmVudCk7XG59XG5mdW5jdGlvbiBjbGVhckN1cnJlbnRDdWVzKHRyYWNrKSB7XG4gIGlmICh0cmFjayA9PT0gbnVsbCB8fCB0cmFjayA9PT0gdm9pZCAwID8gdm9pZCAwIDogdHJhY2suY3Vlcykge1xuICAgIHdoaWxlICh0cmFjay5jdWVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRyYWNrLnJlbW92ZUN1ZSh0cmFjay5jdWVzWzBdKTtcbiAgICB9XG4gIH1cbn1cbi8qKlxuICogIEdpdmVuIGEgbGlzdCBvZiBDdWVzLCBmaW5kcyB0aGUgY2xvc2VzdCBjdWUgbWF0Y2hpbmcgdGhlIGdpdmVuIHRpbWUuXG4gKiAgTW9kaWZpZWQgdmVyaXNvbiBvZiBiaW5hcnkgc2VhcmNoIE8obG9nKG4pKS5cbiAqXG4gKiBAZXhwb3J0XG4gKiBAcGFyYW0geyhUZXh0VHJhY2tDdWVMaXN0IHwgVGV4dFRyYWNrQ3VlW10pfSBjdWVzIC0gTGlzdCBvZiBjdWVzLlxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWUgLSBUYXJnZXQgdGltZSwgdG8gZmluZCBjbG9zZXN0IGN1ZSB0by5cbiAqIEByZXR1cm5zIHtUZXh0VHJhY2tDdWV9XG4gKi9cblxuZnVuY3Rpb24gZ2V0Q2xvc2VzdEN1ZShjdWVzLCB0aW1lKSB7XG4gIC8vIElmIHRoZSBvZmZzZXQgaXMgbGVzcyB0aGFuIHRoZSBmaXJzdCBlbGVtZW50LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB0aGUgY2xvc2VzdC5cbiAgaWYgKHRpbWUgPCBjdWVzWzBdLmVuZFRpbWUpIHtcbiAgICByZXR1cm4gY3Vlc1swXTtcbiAgfSAvLyBJZiB0aGUgb2Zmc2V0IGlzIGdyZWF0ZXIgdGhhbiB0aGUgbGFzdCBjdWUsIHRoZSBsYXN0IGlzIHRoZSBjbG9zZXN0LlxuXG5cbiAgaWYgKHRpbWUgPiBjdWVzW2N1ZXMubGVuZ3RoIC0gMV0uZW5kVGltZSkge1xuICAgIHJldHVybiBjdWVzW2N1ZXMubGVuZ3RoIC0gMV07XG4gIH1cblxuICB2YXIgbGVmdCA9IDA7XG4gIHZhciByaWdodCA9IGN1ZXMubGVuZ3RoIC0gMTtcblxuICB3aGlsZSAobGVmdCA8PSByaWdodCkge1xuICAgIHZhciBtaWQgPSBNYXRoLmZsb29yKChyaWdodCArIGxlZnQpIC8gMik7XG5cbiAgICBpZiAodGltZSA8IGN1ZXNbbWlkXS5lbmRUaW1lKSB7XG4gICAgICByaWdodCA9IG1pZCAtIDE7XG4gICAgfSBlbHNlIGlmICh0aW1lID4gY3Vlc1ttaWRdLmVuZFRpbWUpIHtcbiAgICAgIGxlZnQgPSBtaWQgKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiBpdCdzIG5vdCBsb3dlciBvciBoaWdoZXIsIGl0IG11c3QgYmUgZXF1YWwuXG4gICAgICByZXR1cm4gY3Vlc1ttaWRdO1xuICAgIH1cbiAgfSAvLyBBdCB0aGlzIHBvaW50LCBsZWZ0IGFuZCByaWdodCBoYXZlIHN3YXBwZWQuXG4gIC8vIE5vIGRpcmVjdCBtYXRjaCB3YXMgZm91bmQsIGxlZnQgb3IgcmlnaHQgZWxlbWVudCBtdXN0IGJlIHRoZSBjbG9zZXN0LiBDaGVjayB3aGljaCBvbmUgaGFzIHRoZSBzbWFsbGVzdCBkaWZmLlxuXG5cbiAgcmV0dXJuIGN1ZXNbbGVmdF0uZW5kVGltZSAtIHRpbWUgPCB0aW1lIC0gY3Vlc1tyaWdodF0uZW5kVGltZSA/IGN1ZXNbbGVmdF0gOiBjdWVzW3JpZ2h0XTtcbn1cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvbnRyb2xsZXIvaWQzLXRyYWNrLWNvbnRyb2xsZXIuanNcbmZ1bmN0aW9uIGlkM190cmFja19jb250cm9sbGVyX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qXG4gKiBpZDMgbWV0YWRhdGEgdHJhY2sgY29udHJvbGxlclxuKi9cblxuXG5cblxudmFyIE1JTl9DVUVfRFVSQVRJT04gPSAwLjI1O1xuXG52YXIgaWQzX3RyYWNrX2NvbnRyb2xsZXJfSUQzVHJhY2tDb250cm9sbGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfRXZlbnRIYW5kbGVyKSB7XG4gIGlkM190cmFja19jb250cm9sbGVyX2luaGVyaXRzTG9vc2UoSUQzVHJhY2tDb250cm9sbGVyLCBfRXZlbnRIYW5kbGVyKTtcblxuICBmdW5jdGlvbiBJRDNUcmFja0NvbnRyb2xsZXIoaGxzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfRXZlbnRIYW5kbGVyLmNhbGwodGhpcywgaGxzLCBldmVudHNbXCJkZWZhdWx0XCJdLk1FRElBX0FUVEFDSEVELCBldmVudHNbXCJkZWZhdWx0XCJdLk1FRElBX0RFVEFDSElORywgZXZlbnRzW1wiZGVmYXVsdFwiXS5GUkFHX1BBUlNJTkdfTUVUQURBVEEsIGV2ZW50c1tcImRlZmF1bHRcIl0uTElWRV9CQUNLX0JVRkZFUl9SRUFDSEVEKSB8fCB0aGlzO1xuICAgIF90aGlzLmlkM1RyYWNrID0gdW5kZWZpbmVkO1xuICAgIF90aGlzLm1lZGlhID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBJRDNUcmFja0NvbnRyb2xsZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBldmVudF9oYW5kbGVyLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gIH0gLy8gQWRkIElEMyBtZXRhdGFkYXRhIHRleHQgdHJhY2suXG4gIDtcblxuICBfcHJvdG8ub25NZWRpYUF0dGFjaGVkID0gZnVuY3Rpb24gb25NZWRpYUF0dGFjaGVkKGRhdGEpIHtcbiAgICB0aGlzLm1lZGlhID0gZGF0YS5tZWRpYTtcblxuICAgIGlmICghdGhpcy5tZWRpYSkge31cbiAgfTtcblxuICBfcHJvdG8ub25NZWRpYURldGFjaGluZyA9IGZ1bmN0aW9uIG9uTWVkaWFEZXRhY2hpbmcoKSB7XG4gICAgY2xlYXJDdXJyZW50Q3Vlcyh0aGlzLmlkM1RyYWNrKTtcbiAgICB0aGlzLmlkM1RyYWNrID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubWVkaWEgPSB1bmRlZmluZWQ7XG4gIH07XG5cbiAgX3Byb3RvLmdldElEM1RyYWNrID0gZnVuY3Rpb24gZ2V0SUQzVHJhY2sodGV4dFRyYWNrcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGV4dFRyYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRleHRUcmFjayA9IHRleHRUcmFja3NbaV07XG5cbiAgICAgIGlmICh0ZXh0VHJhY2sua2luZCA9PT0gJ21ldGFkYXRhJyAmJiB0ZXh0VHJhY2subGFiZWwgPT09ICdpZDMnKSB7XG4gICAgICAgIC8vIHNlbmQgJ2FkZHRyYWNrJyB3aGVuIHJldXNpbmcgdGhlIHRleHRUcmFjayBmb3IgbWV0YWRhdGEsXG4gICAgICAgIC8vIHNhbWUgYXMgd2hhdCB3ZSBkbyBmb3IgY2FwdGlvbnNcbiAgICAgICAgc2VuZEFkZFRyYWNrRXZlbnQodGV4dFRyYWNrLCB0aGlzLm1lZGlhKTtcbiAgICAgICAgcmV0dXJuIHRleHRUcmFjaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5tZWRpYS5hZGRUZXh0VHJhY2soJ21ldGFkYXRhJywgJ2lkMycpO1xuICB9O1xuXG4gIF9wcm90by5vbkZyYWdQYXJzaW5nTWV0YWRhdGEgPSBmdW5jdGlvbiBvbkZyYWdQYXJzaW5nTWV0YWRhdGEoZGF0YSkge1xuICAgIHZhciBmcmFnbWVudCA9IGRhdGEuZnJhZztcbiAgICB2YXIgc2FtcGxlcyA9IGRhdGEuc2FtcGxlczsgLy8gY3JlYXRlIHRyYWNrIGR5bmFtaWNhbGx5XG5cbiAgICBpZiAoIXRoaXMuaWQzVHJhY2spIHtcbiAgICAgIHRoaXMuaWQzVHJhY2sgPSB0aGlzLmdldElEM1RyYWNrKHRoaXMubWVkaWEudGV4dFRyYWNrcyk7XG4gICAgICB0aGlzLmlkM1RyYWNrLm1vZGUgPSAnaGlkZGVuJztcbiAgICB9IC8vIEF0dGVtcHQgdG8gcmVjcmVhdGUgU2FmYXJpIGZ1bmN0aW9uYWxpdHkgYnkgY3JlYXRpbmdcbiAgICAvLyBXZWJLaXREYXRhQ3VlIG9iamVjdHMgd2hlbiBhdmFpbGFibGUgYW5kIHN0b3JlIHRoZSBkZWNvZGVkXG4gICAgLy8gSUQzIGRhdGEgaW4gdGhlIHZhbHVlIHByb3BlcnR5IG9mIHRoZSBjdWVcblxuXG4gICAgdmFyIEN1ZSA9IHdpbmRvdy5XZWJLaXREYXRhQ3VlIHx8IHdpbmRvdy5WVFRDdWUgfHwgd2luZG93LlRleHRUcmFja0N1ZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2FtcGxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGZyYW1lcyA9IGlkM1tcImRlZmF1bHRcIl0uZ2V0SUQzRnJhbWVzKHNhbXBsZXNbaV0uZGF0YSk7XG5cbiAgICAgIGlmIChmcmFtZXMpIHtcbiAgICAgICAgLy8gRW5zdXJlIHRoZSBwdHMgaXMgcG9zaXRpdmUgLSBzb21ldGltZXMgaXQncyByZXBvcnRlZCBhcyBhIHNtYWxsIG5lZ2F0aXZlIG51bWJlclxuICAgICAgICB2YXIgc3RhcnRUaW1lID0gTWF0aC5tYXgoc2FtcGxlc1tpXS5wdHMsIDApO1xuICAgICAgICB2YXIgZW5kVGltZSA9IGkgPCBzYW1wbGVzLmxlbmd0aCAtIDEgPyBzYW1wbGVzW2kgKyAxXS5wdHMgOiBmcmFnbWVudC5lbmRQVFM7XG5cbiAgICAgICAgaWYgKCFlbmRUaW1lKSB7XG4gICAgICAgICAgZW5kVGltZSA9IGZyYWdtZW50LnN0YXJ0ICsgZnJhZ21lbnQuZHVyYXRpb247XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGltZURpZmYgPSBlbmRUaW1lIC0gc3RhcnRUaW1lO1xuXG4gICAgICAgIGlmICh0aW1lRGlmZiA8PSAwKSB7XG4gICAgICAgICAgZW5kVGltZSA9IHN0YXJ0VGltZSArIE1JTl9DVUVfRFVSQVRJT047XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGZyYW1lcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHZhciBmcmFtZSA9IGZyYW1lc1tqXTsgLy8gU2FmYXJpIGRvZXNuJ3QgcHV0IHRoZSB0aW1lc3RhbXAgZnJhbWUgaW4gdGhlIFRleHRUcmFja1xuXG4gICAgICAgICAgaWYgKCFpZDNbXCJkZWZhdWx0XCJdLmlzVGltZVN0YW1wRnJhbWUoZnJhbWUpKSB7XG4gICAgICAgICAgICB2YXIgY3VlID0gbmV3IEN1ZShzdGFydFRpbWUsIGVuZFRpbWUsICcnKTtcbiAgICAgICAgICAgIGN1ZS52YWx1ZSA9IGZyYW1lO1xuICAgICAgICAgICAgdGhpcy5pZDNUcmFjay5hZGRDdWUoY3VlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uTGl2ZUJhY2tCdWZmZXJSZWFjaGVkID0gZnVuY3Rpb24gb25MaXZlQmFja0J1ZmZlclJlYWNoZWQoX3JlZikge1xuICAgIHZhciBidWZmZXJFbmQgPSBfcmVmLmJ1ZmZlckVuZDtcbiAgICB2YXIgaWQzVHJhY2sgPSB0aGlzLmlkM1RyYWNrO1xuXG4gICAgaWYgKCFpZDNUcmFjayB8fCAhaWQzVHJhY2suY3VlcyB8fCAhaWQzVHJhY2suY3Vlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZm91bmRDdWUgPSBnZXRDbG9zZXN0Q3VlKGlkM1RyYWNrLmN1ZXMsIGJ1ZmZlckVuZCk7XG5cbiAgICBpZiAoIWZvdW5kQ3VlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2hpbGUgKGlkM1RyYWNrLmN1ZXNbMF0gIT09IGZvdW5kQ3VlKSB7XG4gICAgICBpZDNUcmFjay5yZW1vdmVDdWUoaWQzVHJhY2suY3Vlc1swXSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBJRDNUcmFja0NvbnRyb2xsZXI7XG59KGV2ZW50X2hhbmRsZXIpO1xuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBpZDNfdHJhY2tfY29udHJvbGxlciA9IChpZDNfdHJhY2tfY29udHJvbGxlcl9JRDNUcmFja0NvbnRyb2xsZXIpO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvaXMtc3VwcG9ydGVkLnRzXG5cbmZ1bmN0aW9uIGlzX3N1cHBvcnRlZF9pc1N1cHBvcnRlZCgpIHtcbiAgdmFyIG1lZGlhU291cmNlID0gZ2V0TWVkaWFTb3VyY2UoKTtcblxuICBpZiAoIW1lZGlhU291cmNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHNvdXJjZUJ1ZmZlciA9IHNlbGYuU291cmNlQnVmZmVyIHx8IHNlbGYuV2ViS2l0U291cmNlQnVmZmVyO1xuICB2YXIgaXNUeXBlU3VwcG9ydGVkID0gbWVkaWFTb3VyY2UgJiYgdHlwZW9mIG1lZGlhU291cmNlLmlzVHlwZVN1cHBvcnRlZCA9PT0gJ2Z1bmN0aW9uJyAmJiBtZWRpYVNvdXJjZS5pc1R5cGVTdXBwb3J0ZWQoJ3ZpZGVvL21wNDsgY29kZWNzPVwiYXZjMS40MkUwMUUsbXA0YS40MC4yXCInKTsgLy8gaWYgU291cmNlQnVmZmVyIGlzIGV4cG9zZWQgZW5zdXJlIGl0cyBBUEkgaXMgdmFsaWRcbiAgLy8gc2FmYXJpIGFuZCBvbGQgdmVyc2lvbiBvZiBDaHJvbWUgZG9lIG5vdCBleHBvc2UgU291cmNlQnVmZmVyIGdsb2JhbGx5IHNvIGNoZWNraW5nIFNvdXJjZUJ1ZmZlci5wcm90b3R5cGUgaXMgaW1wb3NzaWJsZVxuXG4gIHZhciBzb3VyY2VCdWZmZXJWYWxpZEFQSSA9ICFzb3VyY2VCdWZmZXIgfHwgc291cmNlQnVmZmVyLnByb3RvdHlwZSAmJiB0eXBlb2Ygc291cmNlQnVmZmVyLnByb3RvdHlwZS5hcHBlbmRCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHNvdXJjZUJ1ZmZlci5wcm90b3R5cGUucmVtb3ZlID09PSAnZnVuY3Rpb24nO1xuICByZXR1cm4gISFpc1R5cGVTdXBwb3J0ZWQgJiYgISFzb3VyY2VCdWZmZXJWYWxpZEFQSTtcbn1cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3V0aWxzL2V3bWEudHNcbi8qXG4gKiBjb21wdXRlIGFuIEV4cG9uZW50aWFsIFdlaWdodGVkIG1vdmluZyBhdmVyYWdlXG4gKiAtIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL01vdmluZ19hdmVyYWdlI0V4cG9uZW50aWFsX21vdmluZ19hdmVyYWdlXG4gKiAgLSBoZWF2aWx5IGluc3BpcmVkIGZyb20gc2hha2EtcGxheWVyXG4gKi9cbnZhciBFV01BID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLy8gIEFib3V0IGhhbGYgb2YgdGhlIGVzdGltYXRlZCB2YWx1ZSB3aWxsIGJlIGZyb20gdGhlIGxhc3QgfGhhbGZMaWZlfCBzYW1wbGVzIGJ5IHdlaWdodC5cbiAgZnVuY3Rpb24gRVdNQShoYWxmTGlmZSkge1xuICAgIHRoaXMuYWxwaGFfID0gdm9pZCAwO1xuICAgIHRoaXMuZXN0aW1hdGVfID0gdm9pZCAwO1xuICAgIHRoaXMudG90YWxXZWlnaHRfID0gdm9pZCAwO1xuICAgIC8vIExhcmdlciB2YWx1ZXMgb2YgYWxwaGEgZXhwaXJlIGhpc3RvcmljYWwgZGF0YSBtb3JlIHNsb3dseS5cbiAgICB0aGlzLmFscGhhXyA9IGhhbGZMaWZlID8gTWF0aC5leHAoTWF0aC5sb2coMC41KSAvIGhhbGZMaWZlKSA6IDA7XG4gICAgdGhpcy5lc3RpbWF0ZV8gPSAwO1xuICAgIHRoaXMudG90YWxXZWlnaHRfID0gMDtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBFV01BLnByb3RvdHlwZTtcblxuICBfcHJvdG8uc2FtcGxlID0gZnVuY3Rpb24gc2FtcGxlKHdlaWdodCwgdmFsdWUpIHtcbiAgICB2YXIgYWRqQWxwaGEgPSBNYXRoLnBvdyh0aGlzLmFscGhhXywgd2VpZ2h0KTtcbiAgICB0aGlzLmVzdGltYXRlXyA9IHZhbHVlICogKDEgLSBhZGpBbHBoYSkgKyBhZGpBbHBoYSAqIHRoaXMuZXN0aW1hdGVfO1xuICAgIHRoaXMudG90YWxXZWlnaHRfICs9IHdlaWdodDtcbiAgfTtcblxuICBfcHJvdG8uZ2V0VG90YWxXZWlnaHQgPSBmdW5jdGlvbiBnZXRUb3RhbFdlaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy50b3RhbFdlaWdodF87XG4gIH07XG5cbiAgX3Byb3RvLmdldEVzdGltYXRlID0gZnVuY3Rpb24gZ2V0RXN0aW1hdGUoKSB7XG4gICAgaWYgKHRoaXMuYWxwaGFfKSB7XG4gICAgICB2YXIgemVyb0ZhY3RvciA9IDEgLSBNYXRoLnBvdyh0aGlzLmFscGhhXywgdGhpcy50b3RhbFdlaWdodF8pO1xuICAgICAgcmV0dXJuIHRoaXMuZXN0aW1hdGVfIC8gemVyb0ZhY3RvcjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZXN0aW1hdGVfO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gRVdNQTtcbn0oKTtcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgZXdtYSA9IChFV01BKTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3V0aWxzL2V3bWEtYmFuZHdpZHRoLWVzdGltYXRvci50c1xuLypcbiAqIEVXTUEgQmFuZHdpZHRoIEVzdGltYXRvclxuICogIC0gaGVhdmlseSBpbnNwaXJlZCBmcm9tIHNoYWthLXBsYXllclxuICogVHJhY2tzIGJhbmR3aWR0aCBzYW1wbGVzIGFuZCBlc3RpbWF0ZXMgYXZhaWxhYmxlIGJhbmR3aWR0aC5cbiAqIEJhc2VkIG9uIHRoZSBtaW5pbXVtIG9mIHR3byBleHBvbmVudGlhbGx5LXdlaWdodGVkIG1vdmluZyBhdmVyYWdlcyB3aXRoXG4gKiBkaWZmZXJlbnQgaGFsZi1saXZlcy5cbiAqL1xuXG5cbnZhciBld21hX2JhbmR3aWR0aF9lc3RpbWF0b3JfRXdtYUJhbmRXaWR0aEVzdGltYXRvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8vIFRPRE8odHlwZXNjcmlwdC1obHMpXG4gIGZ1bmN0aW9uIEV3bWFCYW5kV2lkdGhFc3RpbWF0b3IoaGxzLCBzbG93LCBmYXN0LCBkZWZhdWx0RXN0aW1hdGUpIHtcbiAgICB0aGlzLmhscyA9IHZvaWQgMDtcbiAgICB0aGlzLmRlZmF1bHRFc3RpbWF0ZV8gPSB2b2lkIDA7XG4gICAgdGhpcy5taW5XZWlnaHRfID0gdm9pZCAwO1xuICAgIHRoaXMubWluRGVsYXlNc18gPSB2b2lkIDA7XG4gICAgdGhpcy5zbG93XyA9IHZvaWQgMDtcbiAgICB0aGlzLmZhc3RfID0gdm9pZCAwO1xuICAgIHRoaXMuaGxzID0gaGxzO1xuICAgIHRoaXMuZGVmYXVsdEVzdGltYXRlXyA9IGRlZmF1bHRFc3RpbWF0ZTtcbiAgICB0aGlzLm1pbldlaWdodF8gPSAwLjAwMTtcbiAgICB0aGlzLm1pbkRlbGF5TXNfID0gNTA7XG4gICAgdGhpcy5zbG93XyA9IG5ldyBld21hKHNsb3cpO1xuICAgIHRoaXMuZmFzdF8gPSBuZXcgZXdtYShmYXN0KTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBFd21hQmFuZFdpZHRoRXN0aW1hdG9yLnByb3RvdHlwZTtcblxuICBfcHJvdG8uc2FtcGxlID0gZnVuY3Rpb24gc2FtcGxlKGR1cmF0aW9uTXMsIG51bUJ5dGVzKSB7XG4gICAgZHVyYXRpb25NcyA9IE1hdGgubWF4KGR1cmF0aW9uTXMsIHRoaXMubWluRGVsYXlNc18pO1xuICAgIHZhciBudW1CaXRzID0gOCAqIG51bUJ5dGVzLFxuICAgICAgICAvLyB3ZWlnaHQgaXMgZHVyYXRpb24gaW4gc2Vjb25kc1xuICAgIGR1cmF0aW9uUyA9IGR1cmF0aW9uTXMgLyAxMDAwLFxuICAgICAgICAvLyB2YWx1ZSBpcyBiYW5kd2lkdGggaW4gYml0cy9zXG4gICAgYmFuZHdpZHRoSW5CcHMgPSBudW1CaXRzIC8gZHVyYXRpb25TO1xuICAgIHRoaXMuZmFzdF8uc2FtcGxlKGR1cmF0aW9uUywgYmFuZHdpZHRoSW5CcHMpO1xuICAgIHRoaXMuc2xvd18uc2FtcGxlKGR1cmF0aW9uUywgYmFuZHdpZHRoSW5CcHMpO1xuICB9O1xuXG4gIF9wcm90by5jYW5Fc3RpbWF0ZSA9IGZ1bmN0aW9uIGNhbkVzdGltYXRlKCkge1xuICAgIHZhciBmYXN0ID0gdGhpcy5mYXN0XztcbiAgICByZXR1cm4gZmFzdCAmJiBmYXN0LmdldFRvdGFsV2VpZ2h0KCkgPj0gdGhpcy5taW5XZWlnaHRfO1xuICB9O1xuXG4gIF9wcm90by5nZXRFc3RpbWF0ZSA9IGZ1bmN0aW9uIGdldEVzdGltYXRlKCkge1xuICAgIGlmICh0aGlzLmNhbkVzdGltYXRlKCkpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdzbG93IGVzdGltYXRlOicrIE1hdGgucm91bmQodGhpcy5zbG93Xy5nZXRFc3RpbWF0ZSgpKSk7XG4gICAgICAvLyBjb25zb2xlLmxvZygnZmFzdCBlc3RpbWF0ZTonKyBNYXRoLnJvdW5kKHRoaXMuZmFzdF8uZ2V0RXN0aW1hdGUoKSkpO1xuICAgICAgLy8gVGFrZSB0aGUgbWluaW11bSBvZiB0aGVzZSB0d28gZXN0aW1hdGVzLiAgVGhpcyBzaG91bGQgaGF2ZSB0aGUgZWZmZWN0IG9mXG4gICAgICAvLyBhZGFwdGluZyBkb3duIHF1aWNrbHksIGJ1dCB1cCBtb3JlIHNsb3dseS5cbiAgICAgIHJldHVybiBNYXRoLm1pbih0aGlzLmZhc3RfLmdldEVzdGltYXRlKCksIHRoaXMuc2xvd18uZ2V0RXN0aW1hdGUoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRFc3RpbWF0ZV87XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHt9O1xuXG4gIHJldHVybiBFd21hQmFuZFdpZHRoRXN0aW1hdG9yO1xufSgpO1xuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBld21hX2JhbmR3aWR0aF9lc3RpbWF0b3IgPSAoZXdtYV9iYW5kd2lkdGhfZXN0aW1hdG9yX0V3bWFCYW5kV2lkdGhFc3RpbWF0b3IpO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29udHJvbGxlci9hYnItY29udHJvbGxlci5qc1xuXG5cblxuZnVuY3Rpb24gYWJyX2NvbnRyb2xsZXJfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIGFicl9jb250cm9sbGVyX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgYWJyX2NvbnRyb2xsZXJfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGFicl9jb250cm9sbGVyX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIGFicl9jb250cm9sbGVyX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIGFicl9jb250cm9sbGVyX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qXG4gKiBzaW1wbGUgQUJSIENvbnRyb2xsZXJcbiAqICAtIGNvbXB1dGUgbmV4dCBsZXZlbCBiYXNlZCBvbiBsYXN0IGZyYWdtZW50IGJ3IGhldXJpc3RpY3NcbiAqICAtIGltcGxlbWVudCBhbiBhYmFuZG9uIHJ1bGVzIHRyaWdnZXJlZCBpZiB3ZSBoYXZlIGxlc3MgdGhhbiAyIGZyYWcgYnVmZmVyZWQgYW5kIGlmIGNvbXB1dGVkIGJ3IHNob3dzIHRoYXQgd2UgcmlzayBidWZmZXIgc3RhbGxpbmdcbiAqL1xuXG5cblxuXG5cblxudmFyIGFicl9jb250cm9sbGVyX3dpbmRvdyA9IHdpbmRvdyxcbiAgICBhYnJfY29udHJvbGxlcl9wZXJmb3JtYW5jZSA9IGFicl9jb250cm9sbGVyX3dpbmRvdy5wZXJmb3JtYW5jZTtcblxudmFyIGFicl9jb250cm9sbGVyX0FickNvbnRyb2xsZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9FdmVudEhhbmRsZXIpIHtcbiAgYWJyX2NvbnRyb2xsZXJfaW5oZXJpdHNMb29zZShBYnJDb250cm9sbGVyLCBfRXZlbnRIYW5kbGVyKTtcblxuICBmdW5jdGlvbiBBYnJDb250cm9sbGVyKGhscykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0V2ZW50SGFuZGxlci5jYWxsKHRoaXMsIGhscywgZXZlbnRzW1wiZGVmYXVsdFwiXS5GUkFHX0xPQURJTkcsIGV2ZW50c1tcImRlZmF1bHRcIl0uRlJBR19MT0FERUQsIGV2ZW50c1tcImRlZmF1bHRcIl0uRlJBR19CVUZGRVJFRCwgZXZlbnRzW1wiZGVmYXVsdFwiXS5FUlJPUikgfHwgdGhpcztcbiAgICBfdGhpcy5sYXN0TG9hZGVkRnJhZ0xldmVsID0gMDtcbiAgICBfdGhpcy5fbmV4dEF1dG9MZXZlbCA9IC0xO1xuICAgIF90aGlzLmhscyA9IGhscztcbiAgICBfdGhpcy50aW1lciA9IG51bGw7XG4gICAgX3RoaXMuX2J3RXN0aW1hdG9yID0gbnVsbDtcbiAgICBfdGhpcy5vbkNoZWNrID0gX3RoaXMuX2FiYW5kb25SdWxlc0NoZWNrLmJpbmQoYWJyX2NvbnRyb2xsZXJfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEFickNvbnRyb2xsZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICB0aGlzLmNsZWFyVGltZXIoKTtcbiAgICBldmVudF9oYW5kbGVyLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLm9uRnJhZ0xvYWRpbmcgPSBmdW5jdGlvbiBvbkZyYWdMb2FkaW5nKGRhdGEpIHtcbiAgICB2YXIgZnJhZyA9IGRhdGEuZnJhZztcblxuICAgIGlmIChmcmFnLnR5cGUgPT09ICdtYWluJykge1xuICAgICAgaWYgKCF0aGlzLnRpbWVyKSB7XG4gICAgICAgIHRoaXMuZnJhZ0N1cnJlbnQgPSBmcmFnO1xuICAgICAgICB0aGlzLnRpbWVyID0gc2V0SW50ZXJ2YWwodGhpcy5vbkNoZWNrLCAxMDApO1xuICAgICAgfSAvLyBsYXp5IGluaXQgb2YgQndFc3RpbWF0b3IsIHJhdGlvbmFsZSBpcyB0aGF0IHdlIHVzZSBkaWZmZXJlbnQgcGFyYW1zIGZvciBMaXZlL1ZvRFxuICAgICAgLy8gc28gd2UgbmVlZCB0byB3YWl0IGZvciBzdHJlYW0gbWFuaWZlc3QgLyBwbGF5bGlzdCB0eXBlIHRvIGluc3RhbnRpYXRlIGl0LlxuXG5cbiAgICAgIGlmICghdGhpcy5fYndFc3RpbWF0b3IpIHtcbiAgICAgICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuICAgICAgICB2YXIgY29uZmlnID0gaGxzLmNvbmZpZztcbiAgICAgICAgdmFyIGxldmVsID0gZnJhZy5sZXZlbDtcbiAgICAgICAgdmFyIGlzTGl2ZSA9IGhscy5sZXZlbHNbbGV2ZWxdLmRldGFpbHMubGl2ZTtcbiAgICAgICAgdmFyIGV3bWFGYXN0O1xuICAgICAgICB2YXIgZXdtYVNsb3c7XG5cbiAgICAgICAgaWYgKGlzTGl2ZSkge1xuICAgICAgICAgIGV3bWFGYXN0ID0gY29uZmlnLmFickV3bWFGYXN0TGl2ZTtcbiAgICAgICAgICBld21hU2xvdyA9IGNvbmZpZy5hYnJFd21hU2xvd0xpdmU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXdtYUZhc3QgPSBjb25maWcuYWJyRXdtYUZhc3RWb0Q7XG4gICAgICAgICAgZXdtYVNsb3cgPSBjb25maWcuYWJyRXdtYVNsb3dWb0Q7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9id0VzdGltYXRvciA9IG5ldyBld21hX2JhbmR3aWR0aF9lc3RpbWF0b3IoaGxzLCBld21hU2xvdywgZXdtYUZhc3QsIGNvbmZpZy5hYnJFd21hRGVmYXVsdEVzdGltYXRlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9hYmFuZG9uUnVsZXNDaGVjayA9IGZ1bmN0aW9uIF9hYmFuZG9uUnVsZXNDaGVjaygpIHtcbiAgICAvKlxuICAgICAgbW9uaXRvciBmcmFnbWVudCByZXRyaWV2YWwgdGltZS4uLlxuICAgICAgd2UgY29tcHV0ZSBleHBlY3RlZCB0aW1lIG9mIGFycml2YWwgb2YgdGhlIGNvbXBsZXRlIGZyYWdtZW50LlxuICAgICAgd2UgY29tcGFyZSBpdCB0byBleHBlY3RlZCB0aW1lIG9mIGJ1ZmZlciBzdGFydmF0aW9uXG4gICAgKi9cbiAgICB2YXIgaGxzID0gdGhpcy5obHM7XG4gICAgdmFyIHZpZGVvID0gaGxzLm1lZGlhO1xuICAgIHZhciBmcmFnID0gdGhpcy5mcmFnQ3VycmVudDtcblxuICAgIGlmICghZnJhZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBsb2FkZXIgPSBmcmFnLmxvYWRlcjsgLy8gaWYgbG9hZGVyIGhhcyBiZWVuIGRlc3Ryb3llZCBvciBsb2FkaW5nIGhhcyBiZWVuIGFib3J0ZWQsIHN0b3AgdGltZXIgYW5kIHJldHVyblxuXG4gICAgaWYgKCFsb2FkZXIgfHwgbG9hZGVyLnN0YXRzICYmIGxvYWRlci5zdGF0cy5hYm9ydGVkKSB7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ud2FybignZnJhZyBsb2FkZXIgZGVzdHJveSBvciBhYm9ydGVkLCBkaXNhcm0gYWJhbmRvblJ1bGVzJyk7XG4gICAgICB0aGlzLmNsZWFyVGltZXIoKTsgLy8gcmVzZXQgZm9yY2VkIGF1dG8gbGV2ZWwgdmFsdWUgc28gdGhhdCBuZXh0IGxldmVsIHdpbGwgYmUgc2VsZWN0ZWRcblxuICAgICAgdGhpcy5fbmV4dEF1dG9MZXZlbCA9IC0xO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzdGF0cyA9IGxvYWRlci5zdGF0cztcbiAgICAvKiBvbmx5IG1vbml0b3IgZnJhZyByZXRyaWV2YWwgdGltZSBpZlxuICAgICh2aWRlbyBub3QgcGF1c2VkIE9SIGZpcnN0IGZyYWdtZW50IGJlaW5nIGxvYWRlZChyZWFkeSBzdGF0ZSA9PT0gSEFWRV9OT1RISU5HID0gMCkpIEFORCBhdXRvc3dpdGNoaW5nIGVuYWJsZWQgQU5EIG5vdCBsb3dlc3QgbGV2ZWwgKD0+IG1lYW5zIHRoYXQgd2UgaGF2ZSBzZXZlcmFsIGxldmVscykgKi9cblxuICAgIGlmICh2aWRlbyAmJiBzdGF0cyAmJiAoIXZpZGVvLnBhdXNlZCAmJiB2aWRlby5wbGF5YmFja1JhdGUgIT09IDAgfHwgIXZpZGVvLnJlYWR5U3RhdGUpICYmIGZyYWcuYXV0b0xldmVsICYmIGZyYWcubGV2ZWwpIHtcbiAgICAgIHZhciByZXF1ZXN0RGVsYXkgPSBhYnJfY29udHJvbGxlcl9wZXJmb3JtYW5jZS5ub3coKSAtIHN0YXRzLnRyZXF1ZXN0O1xuICAgICAgdmFyIHBsYXliYWNrUmF0ZSA9IE1hdGguYWJzKHZpZGVvLnBsYXliYWNrUmF0ZSk7IC8vIG1vbml0b3IgZnJhZ21lbnQgbG9hZCBwcm9ncmVzcyBhZnRlciBoYWxmIG9mIGV4cGVjdGVkIGZyYWdtZW50IGR1cmF0aW9uLHRvIHN0YWJpbGl6ZSBiaXRyYXRlXG5cbiAgICAgIGlmIChyZXF1ZXN0RGVsYXkgPiA1MDAgKiBmcmFnLmR1cmF0aW9uIC8gcGxheWJhY2tSYXRlKSB7XG4gICAgICAgIHZhciBsZXZlbHMgPSBobHMubGV2ZWxzO1xuICAgICAgICB2YXIgbG9hZFJhdGUgPSBNYXRoLm1heCgxLCBzdGF0cy5idyA/IHN0YXRzLmJ3IC8gOCA6IHN0YXRzLmxvYWRlZCAqIDEwMDAgLyByZXF1ZXN0RGVsYXkpOyAvLyBieXRlL3M7IGF0IGxlYXN0IDEgYnl0ZS9zIHRvIGF2b2lkIGRpdmlzaW9uIGJ5IHplcm9cbiAgICAgICAgLy8gY29tcHV0ZSBleHBlY3RlZCBmcmFnbWVudCBsZW5ndGggdXNpbmcgZnJhZyBkdXJhdGlvbiBhbmQgbGV2ZWwgYml0cmF0ZS4gYWxzbyBlbnN1cmUgdGhhdCBleHBlY3RlZCBsZW4gaXMgZ3RlIHRoYW4gYWxyZWFkeSBsb2FkZWQgc2l6ZVxuXG4gICAgICAgIHZhciBsZXZlbCA9IGxldmVsc1tmcmFnLmxldmVsXTtcblxuICAgICAgICBpZiAoIWxldmVsKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxldmVsQml0cmF0ZSA9IGxldmVsLnJlYWxCaXRyYXRlID8gTWF0aC5tYXgobGV2ZWwucmVhbEJpdHJhdGUsIGxldmVsLmJpdHJhdGUpIDogbGV2ZWwuYml0cmF0ZTtcbiAgICAgICAgdmFyIGV4cGVjdGVkTGVuID0gc3RhdHMudG90YWwgPyBzdGF0cy50b3RhbCA6IE1hdGgubWF4KHN0YXRzLmxvYWRlZCwgTWF0aC5yb3VuZChmcmFnLmR1cmF0aW9uICogbGV2ZWxCaXRyYXRlIC8gOCkpO1xuICAgICAgICB2YXIgcG9zID0gdmlkZW8uY3VycmVudFRpbWU7XG4gICAgICAgIHZhciBmcmFnTG9hZGVkRGVsYXkgPSAoZXhwZWN0ZWRMZW4gLSBzdGF0cy5sb2FkZWQpIC8gbG9hZFJhdGU7XG4gICAgICAgIHZhciBidWZmZXJTdGFydmF0aW9uRGVsYXkgPSAoQnVmZmVySGVscGVyLmJ1ZmZlckluZm8odmlkZW8sIHBvcywgaGxzLmNvbmZpZy5tYXhCdWZmZXJIb2xlKS5lbmQgLSBwb3MpIC8gcGxheWJhY2tSYXRlOyAvLyBjb25zaWRlciBlbWVyZ2VuY3kgc3dpdGNoIGRvd24gb25seSBpZiB3ZSBoYXZlIGxlc3MgdGhhbiAyIGZyYWcgYnVmZmVyZWQgQU5EXG4gICAgICAgIC8vIHRpbWUgdG8gZmluaXNoIGxvYWRpbmcgY3VycmVudCBmcmFnbWVudCBpcyBiaWdnZXIgdGhhbiBidWZmZXIgc3RhcnZhdGlvbiBkZWxheVxuICAgICAgICAvLyBpZSBpZiB3ZSByaXNrIGJ1ZmZlciBzdGFydmF0aW9uIGlmIGJ3IGRvZXMgbm90IGluY3JlYXNlIHF1aWNrbHlcblxuICAgICAgICBpZiAoYnVmZmVyU3RhcnZhdGlvbkRlbGF5IDwgMiAqIGZyYWcuZHVyYXRpb24gLyBwbGF5YmFja1JhdGUgJiYgZnJhZ0xvYWRlZERlbGF5ID4gYnVmZmVyU3RhcnZhdGlvbkRlbGF5KSB7XG4gICAgICAgICAgdmFyIG1pbkF1dG9MZXZlbCA9IGhscy5taW5BdXRvTGV2ZWw7XG4gICAgICAgICAgdmFyIGZyYWdMZXZlbE5leHRMb2FkZWREZWxheTtcbiAgICAgICAgICB2YXIgbmV4dExvYWRMZXZlbDsgLy8gbGV0cyBpdGVyYXRlIHRocm91Z2ggbG93ZXIgbGV2ZWwgYW5kIHRyeSB0byBmaW5kIHRoZSBiaWdnZXN0IG9uZSB0aGF0IGNvdWxkIGF2b2lkIHJlYnVmZmVyaW5nXG4gICAgICAgICAgLy8gd2Ugc3RhcnQgZnJvbSBjdXJyZW50IGxldmVsIC0gMSBhbmQgd2Ugc3RlcCBkb3duICwgdW50aWwgd2UgZmluZCBhIG1hdGNoaW5nIGxldmVsXG5cbiAgICAgICAgICBmb3IgKG5leHRMb2FkTGV2ZWwgPSBmcmFnLmxldmVsIC0gMTsgbmV4dExvYWRMZXZlbCA+IG1pbkF1dG9MZXZlbDsgbmV4dExvYWRMZXZlbC0tKSB7XG4gICAgICAgICAgICAvLyBjb21wdXRlIHRpbWUgdG8gbG9hZCBuZXh0IGZyYWdtZW50IGF0IGxvd2VyIGxldmVsXG4gICAgICAgICAgICAvLyAwLjggOiBjb25zaWRlciBvbmx5IDgwJSBvZiBjdXJyZW50IGJ3IHRvIGJlIGNvbnNlcnZhdGl2ZVxuICAgICAgICAgICAgLy8gOCA9IGJpdHMgcGVyIGJ5dGUgKGJwcy9CcHMpXG4gICAgICAgICAgICB2YXIgbGV2ZWxOZXh0Qml0cmF0ZSA9IGxldmVsc1tuZXh0TG9hZExldmVsXS5yZWFsQml0cmF0ZSA/IE1hdGgubWF4KGxldmVsc1tuZXh0TG9hZExldmVsXS5yZWFsQml0cmF0ZSwgbGV2ZWxzW25leHRMb2FkTGV2ZWxdLmJpdHJhdGUpIDogbGV2ZWxzW25leHRMb2FkTGV2ZWxdLmJpdHJhdGU7XG5cbiAgICAgICAgICAgIHZhciBfZnJhZ0xldmVsTmV4dExvYWRlZERlbGF5ID0gZnJhZy5kdXJhdGlvbiAqIGxldmVsTmV4dEJpdHJhdGUgLyAoOCAqIDAuOCAqIGxvYWRSYXRlKTtcblxuICAgICAgICAgICAgaWYgKF9mcmFnTGV2ZWxOZXh0TG9hZGVkRGVsYXkgPCBidWZmZXJTdGFydmF0aW9uRGVsYXkpIHtcbiAgICAgICAgICAgICAgLy8gd2UgZm91bmQgYSBsb3dlciBsZXZlbCB0aGF0IGJlIHJlYnVmZmVyaW5nIGZyZWUgd2l0aCBjdXJyZW50IGVzdGltYXRlZCBidyAhXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gLy8gb25seSBlbWVyZ2VuY3kgc3dpdGNoIGRvd24gaWYgaXQgdGFrZXMgbGVzcyB0aW1lIHRvIGxvYWQgbmV3IGZyYWdtZW50IGF0IGxvd2VzdCBsZXZlbCBpbnN0ZWFkXG4gICAgICAgICAgLy8gb2YgZmluaXNoaW5nIGxvYWRpbmcgY3VycmVudCBvbmUgLi4uXG5cblxuICAgICAgICAgIGlmIChmcmFnTGV2ZWxOZXh0TG9hZGVkRGVsYXkgPCBmcmFnTG9hZGVkRGVsYXkpIHtcbiAgICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuKFwibG9hZGluZyB0b28gc2xvdywgYWJvcnQgZnJhZ21lbnQgbG9hZGluZyBhbmQgc3dpdGNoIHRvIGxldmVsIFwiICsgbmV4dExvYWRMZXZlbCArIFwiOmZyYWdMb2FkZWREZWxheVtcIiArIG5leHRMb2FkTGV2ZWwgKyBcIl08ZnJhZ0xvYWRlZERlbGF5W1wiICsgKGZyYWcubGV2ZWwgLSAxKSArIFwiXTtidWZmZXJTdGFydmF0aW9uRGVsYXk6XCIgKyBmcmFnTGV2ZWxOZXh0TG9hZGVkRGVsYXkudG9GaXhlZCgxKSArIFwiPFwiICsgZnJhZ0xvYWRlZERlbGF5LnRvRml4ZWQoMSkgKyBcIjpcIiArIGJ1ZmZlclN0YXJ2YXRpb25EZWxheS50b0ZpeGVkKDEpKTsgLy8gZm9yY2UgbmV4dCBsb2FkIGxldmVsIGluIGF1dG8gbW9kZVxuXG4gICAgICAgICAgICBobHMubmV4dExvYWRMZXZlbCA9IG5leHRMb2FkTGV2ZWw7IC8vIHVwZGF0ZSBidyBlc3RpbWF0ZSBmb3IgdGhpcyBmcmFnbWVudCBiZWZvcmUgY2FuY2VsbGluZyBsb2FkICh0aGlzIHdpbGwgaGVscCByZWR1Y2luZyB0aGUgYncpXG5cbiAgICAgICAgICAgIHRoaXMuX2J3RXN0aW1hdG9yLnNhbXBsZShyZXF1ZXN0RGVsYXksIHN0YXRzLmxvYWRlZCk7IC8vIGFib3J0IGZyYWdtZW50IGxvYWRpbmdcblxuXG4gICAgICAgICAgICBsb2FkZXIuYWJvcnQoKTsgLy8gc3RvcCBhYmFuZG9uIHJ1bGVzIHRpbWVyXG5cbiAgICAgICAgICAgIHRoaXMuY2xlYXJUaW1lcigpO1xuICAgICAgICAgICAgaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5GUkFHX0xPQURfRU1FUkdFTkNZX0FCT1JURUQsIHtcbiAgICAgICAgICAgICAgZnJhZzogZnJhZyxcbiAgICAgICAgICAgICAgc3RhdHM6IHN0YXRzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uRnJhZ0xvYWRlZCA9IGZ1bmN0aW9uIG9uRnJhZ0xvYWRlZChkYXRhKSB7XG4gICAgdmFyIGZyYWcgPSBkYXRhLmZyYWc7XG5cbiAgICBpZiAoZnJhZy50eXBlID09PSAnbWFpbicgJiYgT2JqZWN0KG51bWJlcltcImlzRmluaXRlTnVtYmVyXCJdKShmcmFnLnNuKSkge1xuICAgICAgLy8gc3RvcCBtb25pdG9yaW5nIGJ3IG9uY2UgZnJhZyBsb2FkZWRcbiAgICAgIHRoaXMuY2xlYXJUaW1lcigpOyAvLyBzdG9yZSBsZXZlbCBpZCBhZnRlciBzdWNjZXNzZnVsIGZyYWdtZW50IGxvYWRcblxuICAgICAgdGhpcy5sYXN0TG9hZGVkRnJhZ0xldmVsID0gZnJhZy5sZXZlbDsgLy8gcmVzZXQgZm9yY2VkIGF1dG8gbGV2ZWwgdmFsdWUgc28gdGhhdCBuZXh0IGxldmVsIHdpbGwgYmUgc2VsZWN0ZWRcblxuICAgICAgdGhpcy5fbmV4dEF1dG9MZXZlbCA9IC0xOyAvLyBjb21wdXRlIGxldmVsIGF2ZXJhZ2UgYml0cmF0ZVxuXG4gICAgICBpZiAodGhpcy5obHMuY29uZmlnLmFick1heFdpdGhSZWFsQml0cmF0ZSkge1xuICAgICAgICB2YXIgbGV2ZWwgPSB0aGlzLmhscy5sZXZlbHNbZnJhZy5sZXZlbF07XG4gICAgICAgIHZhciBsb2FkZWRCeXRlcyA9IChsZXZlbC5sb2FkZWQgPyBsZXZlbC5sb2FkZWQuYnl0ZXMgOiAwKSArIGRhdGEuc3RhdHMubG9hZGVkO1xuICAgICAgICB2YXIgbG9hZGVkRHVyYXRpb24gPSAobGV2ZWwubG9hZGVkID8gbGV2ZWwubG9hZGVkLmR1cmF0aW9uIDogMCkgKyBkYXRhLmZyYWcuZHVyYXRpb247XG4gICAgICAgIGxldmVsLmxvYWRlZCA9IHtcbiAgICAgICAgICBieXRlczogbG9hZGVkQnl0ZXMsXG4gICAgICAgICAgZHVyYXRpb246IGxvYWRlZER1cmF0aW9uXG4gICAgICAgIH07XG4gICAgICAgIGxldmVsLnJlYWxCaXRyYXRlID0gTWF0aC5yb3VuZCg4ICogbG9hZGVkQnl0ZXMgLyBsb2FkZWREdXJhdGlvbik7XG4gICAgICB9IC8vIGlmIGZyYWdtZW50IGhhcyBiZWVuIGxvYWRlZCB0byBwZXJmb3JtIGEgYml0cmF0ZSB0ZXN0LFxuXG5cbiAgICAgIGlmIChkYXRhLmZyYWcuYml0cmF0ZVRlc3QpIHtcbiAgICAgICAgdmFyIHN0YXRzID0gZGF0YS5zdGF0cztcbiAgICAgICAgc3RhdHMudHBhcnNlZCA9IHN0YXRzLnRidWZmZXJlZCA9IHN0YXRzLnRsb2FkO1xuICAgICAgICB0aGlzLm9uRnJhZ0J1ZmZlcmVkKGRhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25GcmFnQnVmZmVyZWQgPSBmdW5jdGlvbiBvbkZyYWdCdWZmZXJlZChkYXRhKSB7XG4gICAgdmFyIHN0YXRzID0gZGF0YS5zdGF0cztcbiAgICB2YXIgZnJhZyA9IGRhdGEuZnJhZzsgLy8gb25seSB1cGRhdGUgc3RhdHMgb24gZmlyc3QgZnJhZyBidWZmZXJpbmdcbiAgICAvLyBpZiBzYW1lIGZyYWcgaXMgbG9hZGVkIG11bHRpcGxlIHRpbWVzLCBpdCBtaWdodCBiZSBpbiBicm93c2VyIGNhY2hlLCBhbmQgbG9hZGVkIHF1aWNrbHlcbiAgICAvLyBhbmQgbGVhZGluZyB0byB3cm9uZyBidyBlc3RpbWF0aW9uXG4gICAgLy8gb24gYml0cmF0ZSB0ZXN0LCBhbHNvIG9ubHkgdXBkYXRlIHN0YXRzIG9uY2UgKGlmIHRsb2FkID0gdGJ1ZmZlcmVkID09IG9uIEZSQUdfTE9BREVEKVxuXG4gICAgaWYgKHN0YXRzLmFib3J0ZWQgIT09IHRydWUgJiYgZnJhZy50eXBlID09PSAnbWFpbicgJiYgT2JqZWN0KG51bWJlcltcImlzRmluaXRlTnVtYmVyXCJdKShmcmFnLnNuKSAmJiAoIWZyYWcuYml0cmF0ZVRlc3QgfHwgc3RhdHMudGxvYWQgPT09IHN0YXRzLnRidWZmZXJlZCkpIHtcbiAgICAgIC8vIHVzZSB0cGFyc2VkLXRyZXF1ZXN0IGluc3RlYWQgb2YgdGJ1ZmZlcmVkLXRyZXF1ZXN0IHRvIGNvbXB1dGUgZnJhZ0xvYWRpbmdQcm9jZXNzaW5nOyByYXRpb25hbGUgaXMgdGhhdCAgYnVmZmVyIGFwcGVuZGluZyBvbmx5IGhhcHBlbnMgb25jZSBtZWRpYSBpcyBhdHRhY2hlZFxuICAgICAgLy8gaW4gY2FzZSB3ZSB1c2UgY29uZmlnLnN0YXJ0RnJhZ1ByZWZldGNoIHdoaWxlIG1lZGlhIGlzIG5vdCBhdHRhY2hlZCB5ZXQsIGZyYWdtZW50IG1pZ2h0IGJlIHBhcnNlZCB3aGlsZSBtZWRpYSBub3QgYXR0YWNoZWQgeWV0LCBidXQgaXQgd2lsbCBvbmx5IGJlIGJ1ZmZlcmVkIG9uIG1lZGlhIGF0dGFjaGVkXG4gICAgICAvLyBhcyBhIGNvbnNlcXVlbmNlIGl0IGNvdWxkIGhhcHBlbiByZWFsbHkgbGF0ZSBpbiB0aGUgcHJvY2Vzcy4gbWVhbmluZyB0aGF0IGFwcGVuZGluZyBkdXJhdGlvbiBtaWdodCBhcHBlYXJzIGh1Z2UgLi4uIGxlYWRpbmcgdG8gdW5kZXJlc3RpbWF0ZWQgdGhyb3VnaHB1dCBlc3RpbWF0aW9uXG4gICAgICB2YXIgZnJhZ0xvYWRpbmdQcm9jZXNzaW5nTXMgPSBzdGF0cy50cGFyc2VkIC0gc3RhdHMudHJlcXVlc3Q7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKFwibGF0ZW5jeS9sb2FkaW5nL3BhcnNpbmcvYXBwZW5kL2ticHM6XCIgKyBNYXRoLnJvdW5kKHN0YXRzLnRmaXJzdCAtIHN0YXRzLnRyZXF1ZXN0KSArIFwiL1wiICsgTWF0aC5yb3VuZChzdGF0cy50bG9hZCAtIHN0YXRzLnRmaXJzdCkgKyBcIi9cIiArIE1hdGgucm91bmQoc3RhdHMudHBhcnNlZCAtIHN0YXRzLnRsb2FkKSArIFwiL1wiICsgTWF0aC5yb3VuZChzdGF0cy50YnVmZmVyZWQgLSBzdGF0cy50cGFyc2VkKSArIFwiL1wiICsgTWF0aC5yb3VuZCg4ICogc3RhdHMubG9hZGVkIC8gKHN0YXRzLnRidWZmZXJlZCAtIHN0YXRzLnRyZXF1ZXN0KSkpO1xuXG4gICAgICB0aGlzLl9id0VzdGltYXRvci5zYW1wbGUoZnJhZ0xvYWRpbmdQcm9jZXNzaW5nTXMsIHN0YXRzLmxvYWRlZCk7XG5cbiAgICAgIHN0YXRzLmJ3RXN0aW1hdGUgPSB0aGlzLl9id0VzdGltYXRvci5nZXRFc3RpbWF0ZSgpOyAvLyBpZiBmcmFnbWVudCBoYXMgYmVlbiBsb2FkZWQgdG8gcGVyZm9ybSBhIGJpdHJhdGUgdGVzdCwgKGhscy5zdGFydExldmVsID0gLTEpLCBzdG9yZSBiaXRyYXRlIHRlc3QgZGVsYXkgZHVyYXRpb25cblxuICAgICAgaWYgKGZyYWcuYml0cmF0ZVRlc3QpIHtcbiAgICAgICAgdGhpcy5iaXRyYXRlVGVzdERlbGF5ID0gZnJhZ0xvYWRpbmdQcm9jZXNzaW5nTXMgLyAxMDAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5iaXRyYXRlVGVzdERlbGF5ID0gMDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uRXJyb3IgPSBmdW5jdGlvbiBvbkVycm9yKGRhdGEpIHtcbiAgICAvLyBzdG9wIHRpbWVyIGluIGNhc2Ugb2YgZnJhZyBsb2FkaW5nIGVycm9yXG4gICAgc3dpdGNoIChkYXRhLmRldGFpbHMpIHtcbiAgICAgIGNhc2UgZXJyb3JzW1wiRXJyb3JEZXRhaWxzXCJdLkZSQUdfTE9BRF9FUlJPUjpcbiAgICAgIGNhc2UgZXJyb3JzW1wiRXJyb3JEZXRhaWxzXCJdLkZSQUdfTE9BRF9USU1FT1VUOlxuICAgICAgICB0aGlzLmNsZWFyVGltZXIoKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY2xlYXJUaW1lciA9IGZ1bmN0aW9uIGNsZWFyVGltZXIoKSB7XG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVyKTtcbiAgICB0aGlzLnRpbWVyID0gbnVsbDtcbiAgfSAvLyByZXR1cm4gbmV4dCBhdXRvIGxldmVsXG4gIDtcblxuICBfcHJvdG8uX2ZpbmRCZXN0TGV2ZWwgPSBmdW5jdGlvbiBfZmluZEJlc3RMZXZlbChjdXJyZW50TGV2ZWwsIGN1cnJlbnRGcmFnRHVyYXRpb24sIGN1cnJlbnRCdywgbWluQXV0b0xldmVsLCBtYXhBdXRvTGV2ZWwsIG1heEZldGNoRHVyYXRpb24sIGJ3RmFjdG9yLCBid1VwRmFjdG9yLCBsZXZlbHMpIHtcbiAgICBmb3IgKHZhciBpID0gbWF4QXV0b0xldmVsOyBpID49IG1pbkF1dG9MZXZlbDsgaS0tKSB7XG4gICAgICB2YXIgbGV2ZWxJbmZvID0gbGV2ZWxzW2ldO1xuXG4gICAgICBpZiAoIWxldmVsSW5mbykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGxldmVsRGV0YWlscyA9IGxldmVsSW5mby5kZXRhaWxzO1xuICAgICAgdmFyIGF2Z0R1cmF0aW9uID0gbGV2ZWxEZXRhaWxzID8gbGV2ZWxEZXRhaWxzLnRvdGFsZHVyYXRpb24gLyBsZXZlbERldGFpbHMuZnJhZ21lbnRzLmxlbmd0aCA6IGN1cnJlbnRGcmFnRHVyYXRpb247XG4gICAgICB2YXIgbGl2ZSA9IGxldmVsRGV0YWlscyA/IGxldmVsRGV0YWlscy5saXZlIDogZmFsc2U7XG4gICAgICB2YXIgYWRqdXN0ZWRidyA9IHZvaWQgMDsgLy8gZm9sbG93IGFsZ29yaXRobSBjYXB0dXJlZCBmcm9tIHN0YWdlZnJpZ2h0IDpcbiAgICAgIC8vIGh0dHBzOi8vYW5kcm9pZC5nb29nbGVzb3VyY2UuY29tL3BsYXRmb3JtL2ZyYW1ld29ya3MvYXYvKy9tYXN0ZXIvbWVkaWEvbGlic3RhZ2VmcmlnaHQvaHR0cGxpdmUvTGl2ZVNlc3Npb24uY3BwXG4gICAgICAvLyBQaWNrIHRoZSBoaWdoZXN0IGJhbmR3aWR0aCBzdHJlYW0gYmVsb3cgb3IgZXF1YWwgdG8gZXN0aW1hdGVkIGJhbmR3aWR0aC5cbiAgICAgIC8vIGNvbnNpZGVyIG9ubHkgODAlIG9mIHRoZSBhdmFpbGFibGUgYmFuZHdpZHRoLCBidXQgaWYgd2UgYXJlIHN3aXRjaGluZyB1cCxcbiAgICAgIC8vIGJlIGV2ZW4gbW9yZSBjb25zZXJ2YXRpdmUgKDcwJSkgdG8gYXZvaWQgb3ZlcmVzdGltYXRpbmcgYW5kIGltbWVkaWF0ZWx5XG4gICAgICAvLyBzd2l0Y2hpbmcgYmFjay5cblxuICAgICAgaWYgKGkgPD0gY3VycmVudExldmVsKSB7XG4gICAgICAgIGFkanVzdGVkYncgPSBid0ZhY3RvciAqIGN1cnJlbnRCdztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFkanVzdGVkYncgPSBid1VwRmFjdG9yICogY3VycmVudEJ3O1xuICAgICAgfVxuXG4gICAgICB2YXIgYml0cmF0ZSA9IGxldmVsc1tpXS5yZWFsQml0cmF0ZSA/IE1hdGgubWF4KGxldmVsc1tpXS5yZWFsQml0cmF0ZSwgbGV2ZWxzW2ldLmJpdHJhdGUpIDogbGV2ZWxzW2ldLmJpdHJhdGU7XG4gICAgICB2YXIgZmV0Y2hEdXJhdGlvbiA9IGJpdHJhdGUgKiBhdmdEdXJhdGlvbiAvIGFkanVzdGVkYnc7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0udHJhY2UoXCJsZXZlbC9hZGp1c3RlZGJ3L2JpdHJhdGUvYXZnRHVyYXRpb24vbWF4RmV0Y2hEdXJhdGlvbi9mZXRjaER1cmF0aW9uOiBcIiArIGkgKyBcIi9cIiArIE1hdGgucm91bmQoYWRqdXN0ZWRidykgKyBcIi9cIiArIGJpdHJhdGUgKyBcIi9cIiArIGF2Z0R1cmF0aW9uICsgXCIvXCIgKyBtYXhGZXRjaER1cmF0aW9uICsgXCIvXCIgKyBmZXRjaER1cmF0aW9uKTsgLy8gaWYgYWRqdXN0ZWQgYncgaXMgZ3JlYXRlciB0aGFuIGxldmVsIGJpdHJhdGUgQU5EXG5cbiAgICAgIGlmIChhZGp1c3RlZGJ3ID4gYml0cmF0ZSAmJiAoIC8vIGZyYWdtZW50IGZldGNoRHVyYXRpb24gdW5rbm93biBPUiBsaXZlIHN0cmVhbSBPUiBmcmFnbWVudCBmZXRjaER1cmF0aW9uIGxlc3MgdGhhbiBtYXggYWxsb3dlZCBmZXRjaCBkdXJhdGlvbiwgdGhlbiB0aGlzIGxldmVsIG1hdGNoZXNcbiAgICAgIC8vIHdlIGRvbid0IGFjY291bnQgZm9yIG1heCBGZXRjaCBEdXJhdGlvbiBmb3IgbGl2ZSBzdHJlYW1zLCB0aGlzIGlzIHRvIGF2b2lkIHN3aXRjaGluZyBkb3duIHdoZW4gbmVhciB0aGUgZWRnZSBvZiBsaXZlIHNsaWRpbmcgd2luZG93IC4uLlxuICAgICAgLy8gc3BlY2lhbCBjYXNlIHRvIHN1cHBvcnQgc3RhcnRMZXZlbCA9IC0xIChiaXRyYXRlVGVzdCkgb24gbGl2ZSBzdHJlYW1zIDogaW4gdGhhdCBjYXNlIHdlIHNob3VsZCBub3QgZXhpdCBsb29wIHNvIHRoYXQgX2ZpbmRCZXN0TGV2ZWwgd2lsbCByZXR1cm4gLTFcbiAgICAgICFmZXRjaER1cmF0aW9uIHx8IGxpdmUgJiYgIXRoaXMuYml0cmF0ZVRlc3REZWxheSB8fCBmZXRjaER1cmF0aW9uIDwgbWF4RmV0Y2hEdXJhdGlvbikpIHtcbiAgICAgICAgLy8gYXMgd2UgYXJlIGxvb3BpbmcgZnJvbSBoaWdoZXN0IHRvIGxvd2VzdCwgdGhpcyB3aWxsIHJldHVybiB0aGUgYmVzdCBhY2hpZXZhYmxlIHF1YWxpdHkgbGV2ZWxcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgfSAvLyBub3QgZW5vdWdoIHRpbWUgYnVkZ2V0IGV2ZW4gd2l0aCBxdWFsaXR5IGxldmVsIDAgLi4uIHJlYnVmZmVyaW5nIG1pZ2h0IGhhcHBlblxuXG5cbiAgICByZXR1cm4gLTE7XG4gIH07XG5cbiAgYWJyX2NvbnRyb2xsZXJfY3JlYXRlQ2xhc3MoQWJyQ29udHJvbGxlciwgW3tcbiAgICBrZXk6IFwibmV4dEF1dG9MZXZlbFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIGZvcmNlZEF1dG9MZXZlbCA9IHRoaXMuX25leHRBdXRvTGV2ZWw7XG4gICAgICB2YXIgYndFc3RpbWF0b3IgPSB0aGlzLl9id0VzdGltYXRvcjsgLy8gaW4gY2FzZSBuZXh0IGF1dG8gbGV2ZWwgaGFzIGJlZW4gZm9yY2VkLCBhbmQgYncgbm90IGF2YWlsYWJsZSBvciBub3QgcmVsaWFibGUsIHJldHVybiBmb3JjZWQgdmFsdWVcblxuICAgICAgaWYgKGZvcmNlZEF1dG9MZXZlbCAhPT0gLTEgJiYgKCFid0VzdGltYXRvciB8fCAhYndFc3RpbWF0b3IuY2FuRXN0aW1hdGUoKSkpIHtcbiAgICAgICAgcmV0dXJuIGZvcmNlZEF1dG9MZXZlbDtcbiAgICAgIH0gLy8gY29tcHV0ZSBuZXh0IGxldmVsIHVzaW5nIEFCUiBsb2dpY1xuXG5cbiAgICAgIHZhciBuZXh0QUJSQXV0b0xldmVsID0gdGhpcy5fbmV4dEFCUkF1dG9MZXZlbDsgLy8gaWYgZm9yY2VkIGF1dG8gbGV2ZWwgaGFzIGJlZW4gZGVmaW5lZCwgdXNlIGl0IHRvIGNhcCBBQlIgY29tcHV0ZWQgcXVhbGl0eSBsZXZlbFxuXG4gICAgICBpZiAoZm9yY2VkQXV0b0xldmVsICE9PSAtMSkge1xuICAgICAgICBuZXh0QUJSQXV0b0xldmVsID0gTWF0aC5taW4oZm9yY2VkQXV0b0xldmVsLCBuZXh0QUJSQXV0b0xldmVsKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5leHRBQlJBdXRvTGV2ZWw7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXh0TGV2ZWwpIHtcbiAgICAgIHRoaXMuX25leHRBdXRvTGV2ZWwgPSBuZXh0TGV2ZWw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9uZXh0QUJSQXV0b0xldmVsXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgaGxzID0gdGhpcy5obHM7XG4gICAgICB2YXIgbWF4QXV0b0xldmVsID0gaGxzLm1heEF1dG9MZXZlbCxcbiAgICAgICAgICBsZXZlbHMgPSBobHMubGV2ZWxzLFxuICAgICAgICAgIGNvbmZpZyA9IGhscy5jb25maWcsXG4gICAgICAgICAgbWluQXV0b0xldmVsID0gaGxzLm1pbkF1dG9MZXZlbDtcbiAgICAgIHZhciB2aWRlbyA9IGhscy5tZWRpYTtcbiAgICAgIHZhciBjdXJyZW50TGV2ZWwgPSB0aGlzLmxhc3RMb2FkZWRGcmFnTGV2ZWw7XG4gICAgICB2YXIgY3VycmVudEZyYWdEdXJhdGlvbiA9IHRoaXMuZnJhZ0N1cnJlbnQgPyB0aGlzLmZyYWdDdXJyZW50LmR1cmF0aW9uIDogMDtcbiAgICAgIHZhciBwb3MgPSB2aWRlbyA/IHZpZGVvLmN1cnJlbnRUaW1lIDogMDsgLy8gcGxheWJhY2tSYXRlIGlzIHRoZSBhYnNvbHV0ZSB2YWx1ZSBvZiB0aGUgcGxheWJhY2sgcmF0ZTsgaWYgdmlkZW8ucGxheWJhY2tSYXRlIGlzIDAsIHdlIHVzZSAxIHRvIGxvYWQgYXNcbiAgICAgIC8vIGlmIHdlJ3JlIHBsYXlpbmcgYmFjayBhdCB0aGUgbm9ybWFsIHJhdGUuXG5cbiAgICAgIHZhciBwbGF5YmFja1JhdGUgPSB2aWRlbyAmJiB2aWRlby5wbGF5YmFja1JhdGUgIT09IDAgPyBNYXRoLmFicyh2aWRlby5wbGF5YmFja1JhdGUpIDogMS4wO1xuICAgICAgdmFyIGF2Z2J3ID0gdGhpcy5fYndFc3RpbWF0b3IgPyB0aGlzLl9id0VzdGltYXRvci5nZXRFc3RpbWF0ZSgpIDogY29uZmlnLmFickV3bWFEZWZhdWx0RXN0aW1hdGU7IC8vIGJ1ZmZlclN0YXJ2YXRpb25EZWxheSBpcyB0aGUgd2FsbC1jbG9jayB0aW1lIGxlZnQgdW50aWwgdGhlIHBsYXliYWNrIGJ1ZmZlciBpcyBleGhhdXN0ZWQuXG5cbiAgICAgIHZhciBidWZmZXJTdGFydmF0aW9uRGVsYXkgPSAoQnVmZmVySGVscGVyLmJ1ZmZlckluZm8odmlkZW8sIHBvcywgY29uZmlnLm1heEJ1ZmZlckhvbGUpLmVuZCAtIHBvcykgLyBwbGF5YmFja1JhdGU7IC8vIEZpcnN0LCBsb29rIHRvIHNlZSBpZiB3ZSBjYW4gZmluZCBhIGxldmVsIG1hdGNoaW5nIHdpdGggb3VyIGF2ZyBiYW5kd2lkdGggQU5EIHRoYXQgY291bGQgYWxzbyBndWFyYW50ZWUgbm8gcmVidWZmZXJpbmcgYXQgYWxsXG5cbiAgICAgIHZhciBiZXN0TGV2ZWwgPSB0aGlzLl9maW5kQmVzdExldmVsKGN1cnJlbnRMZXZlbCwgY3VycmVudEZyYWdEdXJhdGlvbiwgYXZnYncsIG1pbkF1dG9MZXZlbCwgbWF4QXV0b0xldmVsLCBidWZmZXJTdGFydmF0aW9uRGVsYXksIGNvbmZpZy5hYnJCYW5kV2lkdGhGYWN0b3IsIGNvbmZpZy5hYnJCYW5kV2lkdGhVcEZhY3RvciwgbGV2ZWxzKTtcblxuICAgICAgaWYgKGJlc3RMZXZlbCA+PSAwKSB7XG4gICAgICAgIHJldHVybiBiZXN0TGV2ZWw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0udHJhY2UoJ3JlYnVmZmVyaW5nIGV4cGVjdGVkIHRvIGhhcHBlbiwgbGV0cyB0cnkgdG8gZmluZCBhIHF1YWxpdHkgbGV2ZWwgbWluaW1pemluZyB0aGUgcmVidWZmZXJpbmcnKTsgLy8gbm90IHBvc3NpYmxlIHRvIGdldCByaWQgb2YgcmVidWZmZXJpbmcgLi4uIGxldCdzIHRyeSB0byBmaW5kIGxldmVsIHRoYXQgd2lsbCBndWFyYW50ZWUgbGVzcyB0aGFuIG1heFN0YXJ2YXRpb25EZWxheSBvZiByZWJ1ZmZlcmluZ1xuICAgICAgICAvLyBpZiBubyBtYXRjaGluZyBsZXZlbCBmb3VuZCwgbG9naWMgd2lsbCByZXR1cm4gMFxuXG4gICAgICAgIHZhciBtYXhTdGFydmF0aW9uRGVsYXkgPSBjdXJyZW50RnJhZ0R1cmF0aW9uID8gTWF0aC5taW4oY3VycmVudEZyYWdEdXJhdGlvbiwgY29uZmlnLm1heFN0YXJ2YXRpb25EZWxheSkgOiBjb25maWcubWF4U3RhcnZhdGlvbkRlbGF5O1xuICAgICAgICB2YXIgYndGYWN0b3IgPSBjb25maWcuYWJyQmFuZFdpZHRoRmFjdG9yO1xuICAgICAgICB2YXIgYndVcEZhY3RvciA9IGNvbmZpZy5hYnJCYW5kV2lkdGhVcEZhY3RvcjtcblxuICAgICAgICBpZiAoYnVmZmVyU3RhcnZhdGlvbkRlbGF5ID09PSAwKSB7XG4gICAgICAgICAgLy8gaW4gY2FzZSBidWZmZXIgaXMgZW1wdHksIGxldCdzIGNoZWNrIGlmIHByZXZpb3VzIGZyYWdtZW50IHdhcyBsb2FkZWQgdG8gcGVyZm9ybSBhIGJpdHJhdGUgdGVzdFxuICAgICAgICAgIHZhciBiaXRyYXRlVGVzdERlbGF5ID0gdGhpcy5iaXRyYXRlVGVzdERlbGF5O1xuXG4gICAgICAgICAgaWYgKGJpdHJhdGVUZXN0RGVsYXkpIHtcbiAgICAgICAgICAgIC8vIGlmIGl0IGlzIHRoZSBjYXNlLCB0aGVuIHdlIG5lZWQgdG8gYWRqdXN0IG91ciBtYXggc3RhcnZhdGlvbiBkZWxheSB1c2luZyBtYXhMb2FkaW5nRGVsYXkgY29uZmlnIHZhbHVlXG4gICAgICAgICAgICAvLyBtYXggdmlkZW8gbG9hZGluZyBkZWxheSB1c2VkIGluICBhdXRvbWF0aWMgc3RhcnQgbGV2ZWwgc2VsZWN0aW9uIDpcbiAgICAgICAgICAgIC8vIGluIHRoYXQgbW9kZSBBQlIgY29udHJvbGxlciB3aWxsIGVuc3VyZSB0aGF0IHZpZGVvIGxvYWRpbmcgdGltZSAoaWUgdGhlIHRpbWUgdG8gZmV0Y2ggdGhlIGZpcnN0IGZyYWdtZW50IGF0IGxvd2VzdCBxdWFsaXR5IGxldmVsICtcbiAgICAgICAgICAgIC8vIHRoZSB0aW1lIHRvIGZldGNoIHRoZSBmcmFnbWVudCBhdCB0aGUgYXBwcm9wcmlhdGUgcXVhbGl0eSBsZXZlbCBpcyBsZXNzIHRoYW4gYGBgbWF4TG9hZGluZ0RlbGF5YGBgIClcbiAgICAgICAgICAgIC8vIGNhcCBtYXhMb2FkaW5nRGVsYXkgYW5kIGVuc3VyZSBpdCBpcyBub3QgYmlnZ2VyICd0aGFuIGJpdHJhdGUgdGVzdCcgZnJhZyBkdXJhdGlvblxuICAgICAgICAgICAgdmFyIG1heExvYWRpbmdEZWxheSA9IGN1cnJlbnRGcmFnRHVyYXRpb24gPyBNYXRoLm1pbihjdXJyZW50RnJhZ0R1cmF0aW9uLCBjb25maWcubWF4TG9hZGluZ0RlbGF5KSA6IGNvbmZpZy5tYXhMb2FkaW5nRGVsYXk7XG4gICAgICAgICAgICBtYXhTdGFydmF0aW9uRGVsYXkgPSBtYXhMb2FkaW5nRGVsYXkgLSBiaXRyYXRlVGVzdERlbGF5O1xuICAgICAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLnRyYWNlKFwiYml0cmF0ZSB0ZXN0IHRvb2sgXCIgKyBNYXRoLnJvdW5kKDEwMDAgKiBiaXRyYXRlVGVzdERlbGF5KSArIFwibXMsIHNldCBmaXJzdCBmcmFnbWVudCBtYXggZmV0Y2hEdXJhdGlvbiB0byBcIiArIE1hdGgucm91bmQoMTAwMCAqIG1heFN0YXJ2YXRpb25EZWxheSkgKyBcIiBtc1wiKTsgLy8gZG9uJ3QgdXNlIGNvbnNlcnZhdGl2ZSBmYWN0b3Igb24gYml0cmF0ZSB0ZXN0XG5cbiAgICAgICAgICAgIGJ3RmFjdG9yID0gYndVcEZhY3RvciA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYmVzdExldmVsID0gdGhpcy5fZmluZEJlc3RMZXZlbChjdXJyZW50TGV2ZWwsIGN1cnJlbnRGcmFnRHVyYXRpb24sIGF2Z2J3LCBtaW5BdXRvTGV2ZWwsIG1heEF1dG9MZXZlbCwgYnVmZmVyU3RhcnZhdGlvbkRlbGF5ICsgbWF4U3RhcnZhdGlvbkRlbGF5LCBid0ZhY3RvciwgYndVcEZhY3RvciwgbGV2ZWxzKTtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KGJlc3RMZXZlbCwgMCk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEFickNvbnRyb2xsZXI7XG59KGV2ZW50X2hhbmRsZXIpO1xuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBhYnJfY29udHJvbGxlciA9IChhYnJfY29udHJvbGxlcl9BYnJDb250cm9sbGVyKTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvbnRyb2xsZXIvYnVmZmVyLWNvbnRyb2xsZXIudHNcblxuXG5mdW5jdGlvbiBidWZmZXJfY29udHJvbGxlcl9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKlxuICogQnVmZmVyIENvbnRyb2xsZXJcbiAqL1xuXG5cblxuXG5cbnZhciBidWZmZXJfY29udHJvbGxlcl9NZWRpYVNvdXJjZSA9IGdldE1lZGlhU291cmNlKCk7XG5cbnZhciBidWZmZXJfY29udHJvbGxlcl9CdWZmZXJDb250cm9sbGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfRXZlbnRIYW5kbGVyKSB7XG4gIGJ1ZmZlcl9jb250cm9sbGVyX2luaGVyaXRzTG9vc2UoQnVmZmVyQ29udHJvbGxlciwgX0V2ZW50SGFuZGxlcik7XG5cbiAgLy8gdGhlIHZhbHVlIHRoYXQgd2UgaGF2ZSBzZXQgbWVkaWFzb3VyY2UuZHVyYXRpb24gdG9cbiAgLy8gKHRoZSBhY3R1YWwgZHVyYXRpb24gbWF5IGJlIHR3ZWFrZWQgc2xpZ2hseSBieSB0aGUgYnJvd3NlcilcbiAgLy8gdGhlIHZhbHVlIHRoYXQgd2Ugd2FudCB0byBzZXQgbWVkaWFTb3VyY2UuZHVyYXRpb24gdG9cbiAgLy8gdGhlIHRhcmdldCBkdXJhdGlvbiBvZiB0aGUgY3VycmVudCBtZWRpYSBwbGF5bGlzdFxuICAvLyBjdXJyZW50IHN0cmVhbSBzdGF0ZTogdHJ1ZSAtIGZvciBsaXZlIGJyb2FkY2FzdCwgZmFsc2UgLSBmb3IgVm9EIGNvbnRlbnRcbiAgLy8gY2FjaGUgdGhlIHNlbGYgZ2VuZXJhdGVkIG9iamVjdCB1cmwgdG8gZGV0ZWN0IGhpamFjayBvZiB2aWRlbyB0YWdcbiAgLy8gc2lnbmFscyB0aGF0IHRoZSBzb3VyY2VCdWZmZXJzIG5lZWQgdG8gYmUgZmx1c2hlZFxuICAvLyBzaWduYWxzIHRoYXQgbWVkaWFTb3VyY2Ugc2hvdWxkIGhhdmUgZW5kT2ZTdHJlYW0gY2FsbGVkXG4gIC8vIHRoaXMgaXMgb3B0aW9uYWwgYmVjYXVzZSB0aGlzIHByb3BlcnR5IGlzIHJlbW92ZWQgZnJvbSB0aGUgY2xhc3Mgc29tZXRpbWVzXG4gIC8vIFRoZSBudW1iZXIgb2YgQlVGRkVSX0NPREVDIGV2ZW50cyByZWNlaXZlZCBiZWZvcmUgYW55IHNvdXJjZUJ1ZmZlcnMgYXJlIGNyZWF0ZWRcbiAgLy8gVGhlIHRvdGFsIG51bWJlciBvZiBCVUZGRVJfQ09ERUMgZXZlbnRzIHJlY2VpdmVkXG4gIC8vIEEgcmVmZXJlbmNlIHRvIHRoZSBhdHRhY2hlZCBtZWRpYSBlbGVtZW50XG4gIC8vIEEgcmVmZXJlbmNlIHRvIHRoZSBhY3RpdmUgbWVkaWEgc291cmNlXG4gIC8vIExpc3Qgb2YgcGVuZGluZyBzZWdtZW50cyB0byBiZSBhcHBlbmRlZCB0byBzb3VyY2UgYnVmZmVyXG4gIC8vIEEgZ3VhcmQgdG8gc2VlIGlmIHdlIGFyZSBjdXJyZW50bHkgYXBwZW5kaW5nIHRvIHRoZSBzb3VyY2UgYnVmZmVyXG4gIC8vIGNvdW50ZXJzXG4gIGZ1bmN0aW9uIEJ1ZmZlckNvbnRyb2xsZXIoaGxzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfRXZlbnRIYW5kbGVyLmNhbGwodGhpcywgaGxzLCBldmVudHNbXCJkZWZhdWx0XCJdLk1FRElBX0FUVEFDSElORywgZXZlbnRzW1wiZGVmYXVsdFwiXS5NRURJQV9ERVRBQ0hJTkcsIGV2ZW50c1tcImRlZmF1bHRcIl0uTUFOSUZFU1RfUEFSU0VELCBldmVudHNbXCJkZWZhdWx0XCJdLkJVRkZFUl9SRVNFVCwgZXZlbnRzW1wiZGVmYXVsdFwiXS5CVUZGRVJfQVBQRU5ESU5HLCBldmVudHNbXCJkZWZhdWx0XCJdLkJVRkZFUl9DT0RFQ1MsIGV2ZW50c1tcImRlZmF1bHRcIl0uQlVGRkVSX0VPUywgZXZlbnRzW1wiZGVmYXVsdFwiXS5CVUZGRVJfRkxVU0hJTkcsIGV2ZW50c1tcImRlZmF1bHRcIl0uTEVWRUxfUFRTX1VQREFURUQsIGV2ZW50c1tcImRlZmF1bHRcIl0uTEVWRUxfVVBEQVRFRCkgfHwgdGhpcztcbiAgICBfdGhpcy5fbXNEdXJhdGlvbiA9IG51bGw7XG4gICAgX3RoaXMuX2xldmVsRHVyYXRpb24gPSBudWxsO1xuICAgIF90aGlzLl9sZXZlbFRhcmdldER1cmF0aW9uID0gMTA7XG4gICAgX3RoaXMuX2xpdmUgPSBudWxsO1xuICAgIF90aGlzLl9vYmplY3RVcmwgPSBudWxsO1xuICAgIF90aGlzLl9uZWVkc0ZsdXNoID0gZmFsc2U7XG4gICAgX3RoaXMuX25lZWRzRW9zID0gZmFsc2U7XG4gICAgX3RoaXMuY29uZmlnID0gdm9pZCAwO1xuICAgIF90aGlzLmF1ZGlvVGltZXN0YW1wT2Zmc2V0ID0gdm9pZCAwO1xuICAgIF90aGlzLmJ1ZmZlckNvZGVjRXZlbnRzRXhwZWN0ZWQgPSAwO1xuICAgIF90aGlzLl9idWZmZXJDb2RlY0V2ZW50c1RvdGFsID0gMDtcbiAgICBfdGhpcy5tZWRpYSA9IG51bGw7XG4gICAgX3RoaXMubWVkaWFTb3VyY2UgPSBudWxsO1xuICAgIF90aGlzLnNlZ21lbnRzID0gW107XG4gICAgX3RoaXMucGFyZW50ID0gdm9pZCAwO1xuICAgIF90aGlzLmFwcGVuZGluZyA9IGZhbHNlO1xuICAgIF90aGlzLmFwcGVuZGVkID0gMDtcbiAgICBfdGhpcy5hcHBlbmRFcnJvciA9IDA7XG4gICAgX3RoaXMuZmx1c2hCdWZmZXJDb3VudGVyID0gMDtcbiAgICBfdGhpcy50cmFja3MgPSB7fTtcbiAgICBfdGhpcy5wZW5kaW5nVHJhY2tzID0ge307XG4gICAgX3RoaXMuc291cmNlQnVmZmVyID0ge307XG4gICAgX3RoaXMuZmx1c2hSYW5nZSA9IFtdO1xuXG4gICAgX3RoaXMuX29uTWVkaWFTb3VyY2VPcGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZygnbWVkaWEgc291cmNlIG9wZW5lZCcpO1xuXG4gICAgICBfdGhpcy5obHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLk1FRElBX0FUVEFDSEVELCB7XG4gICAgICAgIG1lZGlhOiBfdGhpcy5tZWRpYVxuICAgICAgfSk7XG5cbiAgICAgIHZhciBtZWRpYVNvdXJjZSA9IF90aGlzLm1lZGlhU291cmNlO1xuXG4gICAgICBpZiAobWVkaWFTb3VyY2UpIHtcbiAgICAgICAgLy8gb25jZSByZWNlaXZlZCwgZG9uJ3QgbGlzdGVuIGFueW1vcmUgdG8gc291cmNlb3BlbiBldmVudFxuICAgICAgICBtZWRpYVNvdXJjZS5yZW1vdmVFdmVudExpc3RlbmVyKCdzb3VyY2VvcGVuJywgX3RoaXMuX29uTWVkaWFTb3VyY2VPcGVuKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuY2hlY2tQZW5kaW5nVHJhY2tzKCk7XG4gICAgfTtcblxuICAgIF90aGlzLl9vbk1lZGlhU291cmNlQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKCdtZWRpYSBzb3VyY2UgY2xvc2VkJyk7XG4gICAgfTtcblxuICAgIF90aGlzLl9vbk1lZGlhU291cmNlRW5kZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKCdtZWRpYSBzb3VyY2UgZW5kZWQnKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuX29uU0JVcGRhdGVFbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyB1cGRhdGUgdGltZXN0YW1wT2Zmc2V0XG4gICAgICBpZiAoX3RoaXMuYXVkaW9UaW1lc3RhbXBPZmZzZXQgJiYgX3RoaXMuc291cmNlQnVmZmVyLmF1ZGlvKSB7XG4gICAgICAgIHZhciBhdWRpb0J1ZmZlciA9IF90aGlzLnNvdXJjZUJ1ZmZlci5hdWRpbztcbiAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLndhcm4oXCJjaGFuZ2UgbXBlZyBhdWRpbyB0aW1lc3RhbXAgb2Zmc2V0IGZyb20gXCIgKyBhdWRpb0J1ZmZlci50aW1lc3RhbXBPZmZzZXQgKyBcIiB0byBcIiArIF90aGlzLmF1ZGlvVGltZXN0YW1wT2Zmc2V0KTtcbiAgICAgICAgYXVkaW9CdWZmZXIudGltZXN0YW1wT2Zmc2V0ID0gX3RoaXMuYXVkaW9UaW1lc3RhbXBPZmZzZXQ7XG4gICAgICAgIGRlbGV0ZSBfdGhpcy5hdWRpb1RpbWVzdGFtcE9mZnNldDtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLl9uZWVkc0ZsdXNoKSB7XG4gICAgICAgIF90aGlzLmRvRmx1c2goKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLl9uZWVkc0Vvcykge1xuICAgICAgICBfdGhpcy5jaGVja0VvcygpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5hcHBlbmRpbmcgPSBmYWxzZTtcbiAgICAgIHZhciBwYXJlbnQgPSBfdGhpcy5wYXJlbnQ7IC8vIGNvdW50IG5iIG9mIHBlbmRpbmcgc2VnbWVudHMgd2FpdGluZyBmb3IgYXBwZW5kaW5nIG9uIHRoaXMgc291cmNlYnVmZmVyXG5cbiAgICAgIHZhciBwZW5kaW5nID0gX3RoaXMuc2VnbWVudHMucmVkdWNlKGZ1bmN0aW9uIChjb3VudGVyLCBzZWdtZW50KSB7XG4gICAgICAgIHJldHVybiBzZWdtZW50LnBhcmVudCA9PT0gcGFyZW50ID8gY291bnRlciArIDEgOiBjb3VudGVyO1xuICAgICAgfSwgMCk7IC8vIHRoaXMuc291cmNlQnVmZmVyIGlzIGJldHRlciB0byB1c2UgdGhhbiBtZWRpYS5idWZmZXJlZCBhcyBpdCBpcyBjbG9zZXIgdG8gdGhlIFBUUyBkYXRhIGZyb20gdGhlIGZyYWdtZW50c1xuXG5cbiAgICAgIHZhciB0aW1lUmFuZ2VzID0ge307XG4gICAgICB2YXIgc2JTZXQgPSBfdGhpcy5zb3VyY2VCdWZmZXI7XG5cbiAgICAgIGZvciAodmFyIHN0cmVhbVR5cGUgaW4gc2JTZXQpIHtcbiAgICAgICAgdmFyIHNiID0gc2JTZXRbc3RyZWFtVHlwZV07XG5cbiAgICAgICAgaWYgKCFzYikge1xuICAgICAgICAgIHRocm93IEVycm9yKFwiaGFuZGxpbmcgc291cmNlIGJ1ZmZlciB1cGRhdGUgZW5kIGVycm9yOiBzb3VyY2UgYnVmZmVyIGZvciBcIiArIHN0cmVhbVR5cGUgKyBcIiB1bmluaXRpbGl6ZWQgYW5kIHVuYWJsZSB0byB1cGRhdGUgYnVmZmVyZWQgVGltZVJhbmdlcy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICB0aW1lUmFuZ2VzW3N0cmVhbVR5cGVdID0gc2IuYnVmZmVyZWQ7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uQlVGRkVSX0FQUEVOREVELCB7XG4gICAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgICBwZW5kaW5nOiBwZW5kaW5nLFxuICAgICAgICB0aW1lUmFuZ2VzOiB0aW1lUmFuZ2VzXG4gICAgICB9KTsgLy8gZG9uJ3QgYXBwZW5kIGluIGZsdXNoaW5nIG1vZGVcblxuXG4gICAgICBpZiAoIV90aGlzLl9uZWVkc0ZsdXNoKSB7XG4gICAgICAgIF90aGlzLmRvQXBwZW5kaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnVwZGF0ZU1lZGlhRWxlbWVudER1cmF0aW9uKCk7IC8vIGFwcGVuZGluZyBnb2VzIGZpcnN0XG5cblxuICAgICAgaWYgKHBlbmRpbmcgPT09IDApIHtcbiAgICAgICAgX3RoaXMuZmx1c2hMaXZlQmFja0J1ZmZlcigpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5fb25TQlVwZGF0ZUVycm9yID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0uZXJyb3IoJ3NvdXJjZUJ1ZmZlciBlcnJvcjonLCBldmVudCk7IC8vIGFjY29yZGluZyB0byBodHRwOi8vd3d3LnczLm9yZy9UUi9tZWRpYS1zb3VyY2UvI3NvdXJjZWJ1ZmZlci1hcHBlbmQtZXJyb3JcbiAgICAgIC8vIHRoaXMgZXJyb3IgbWlnaHQgbm90IGFsd2F5cyBiZSBmYXRhbCAoaXQgaXMgZmF0YWwgaWYgZGVjb2RlIGVycm9yIGlzIHNldCwgaW4gdGhhdCBjYXNlXG4gICAgICAvLyBpdCB3aWxsIGJlIGZvbGxvd2VkIGJ5IGEgbWVkaWFFbGVtZW50IGVycm9yIC4uLilcblxuICAgICAgX3RoaXMuaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5FUlJPUiwge1xuICAgICAgICB0eXBlOiBlcnJvcnNbXCJFcnJvclR5cGVzXCJdLk1FRElBX0VSUk9SLFxuICAgICAgICBkZXRhaWxzOiBlcnJvcnNbXCJFcnJvckRldGFpbHNcIl0uQlVGRkVSX0FQUEVORElOR19FUlJPUixcbiAgICAgICAgZmF0YWw6IGZhbHNlXG4gICAgICB9KTsgLy8gd2UgZG9uJ3QgbmVlZCB0byBkbyBtb3JlIHRoYW4gdGhhdCwgYXMgYWNjb3JkaW4gdG8gdGhlIHNwZWMsIHVwZGF0ZWVuZCB3aWxsIGJlIGZpcmVkIGp1c3QgYWZ0ZXJcblxuICAgIH07XG5cbiAgICBfdGhpcy5jb25maWcgPSBobHMuY29uZmlnO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBCdWZmZXJDb250cm9sbGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgZXZlbnRfaGFuZGxlci5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5vbkxldmVsUHRzVXBkYXRlZCA9IGZ1bmN0aW9uIG9uTGV2ZWxQdHNVcGRhdGVkKGRhdGEpIHtcbiAgICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgICB2YXIgYXVkaW9UcmFjayA9IHRoaXMudHJhY2tzLmF1ZGlvOyAvLyBBZGp1c3RpbmcgYFNvdXJjZUJ1ZmZlci50aW1lc3RhbXBPZmZzZXRgIChkZXNpcmVkIHBvaW50IGluIHRoZSB0aW1lbGluZSB3aGVyZSB0aGUgbmV4dCBmcmFtZXMgc2hvdWxkIGJlIGFwcGVuZGVkKVxuICAgIC8vIGluIENocm9tZSBicm93c2VyIHdoZW4gd2UgZGV0ZWN0IE1QRUcgYXVkaW8gY29udGFpbmVyIGFuZCB0aW1lIGRlbHRhIGJldHdlZW4gbGV2ZWwgUFRTIGFuZCBgU291cmNlQnVmZmVyLnRpbWVzdGFtcE9mZnNldGBcbiAgICAvLyBpcyBncmVhdGVyIHRoYW4gMTAwbXMgKHRoaXMgaXMgZW5vdWdoIHRvIGhhbmRsZSBzZWVrIGZvciBWT0Qgb3IgbGV2ZWwgY2hhbmdlIGZvciBMSVZFIHZpZGVvcykuIEF0IHRoZSB0aW1lIG9mIGNoYW5nZSB3ZSBpc3N1ZVxuICAgIC8vIGBTb3VyY2VCdWZmZXIuYWJvcnQoKWAgYW5kIGFkanVzdGluZyBgU291cmNlQnVmZmVyLnRpbWVzdGFtcE9mZnNldGAgaWYgYFNvdXJjZUJ1ZmZlci51cGRhdGluZ2AgaXMgZmFsc2Ugb3IgYXdhaXRpbmcgYHVwZGF0ZWVuZGBcbiAgICAvLyBldmVudCBpZiBTQiBpcyBpbiB1cGRhdGluZyBzdGF0ZS5cbiAgICAvLyBNb3JlIGluZm8gaGVyZTogaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvLWRldi9obHMuanMvaXNzdWVzLzMzMiNpc3N1ZWNvbW1lbnQtMjU3OTg2NDg2XG5cbiAgICBpZiAodHlwZSA9PT0gJ2F1ZGlvJyAmJiBhdWRpb1RyYWNrICYmIGF1ZGlvVHJhY2suY29udGFpbmVyID09PSAnYXVkaW8vbXBlZycpIHtcbiAgICAgIC8vIENocm9tZSBhdWRpbyBtcDMgdHJhY2tcbiAgICAgIHZhciBhdWRpb0J1ZmZlciA9IHRoaXMuc291cmNlQnVmZmVyLmF1ZGlvO1xuXG4gICAgICBpZiAoIWF1ZGlvQnVmZmVyKSB7XG4gICAgICAgIHRocm93IEVycm9yKCdMZXZlbCBQVFMgVXBkYXRlZCBhbmQgc291cmNlIGJ1ZmZlciBmb3IgYXVkaW8gdW5pbml0YWxpemVkJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBkZWx0YSA9IE1hdGguYWJzKGF1ZGlvQnVmZmVyLnRpbWVzdGFtcE9mZnNldCAtIGRhdGEuc3RhcnQpOyAvLyBhZGp1c3QgdGltZXN0YW1wIG9mZnNldCBpZiB0aW1lIGRlbHRhIGlzIGdyZWF0ZXIgdGhhbiAxMDBtc1xuXG4gICAgICBpZiAoZGVsdGEgPiAwLjEpIHtcbiAgICAgICAgdmFyIHVwZGF0aW5nID0gYXVkaW9CdWZmZXIudXBkYXRpbmc7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhdWRpb0J1ZmZlci5hYm9ydCgpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ud2FybignY2FuIG5vdCBhYm9ydCBhdWRpbyBidWZmZXI6ICcgKyBlcnIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF1cGRhdGluZykge1xuICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuKCdjaGFuZ2UgbXBlZyBhdWRpbyB0aW1lc3RhbXAgb2Zmc2V0IGZyb20gJyArIGF1ZGlvQnVmZmVyLnRpbWVzdGFtcE9mZnNldCArICcgdG8gJyArIGRhdGEuc3RhcnQpO1xuICAgICAgICAgIGF1ZGlvQnVmZmVyLnRpbWVzdGFtcE9mZnNldCA9IGRhdGEuc3RhcnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5hdWRpb1RpbWVzdGFtcE9mZnNldCA9IGRhdGEuc3RhcnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uTWFuaWZlc3RQYXJzZWQgPSBmdW5jdGlvbiBvbk1hbmlmZXN0UGFyc2VkKGRhdGEpIHtcbiAgICAvLyBpbiBjYXNlIG9mIGFsdCBhdWRpbyAod2hlcmUgYWxsIHRyYWNrcyBoYXZlIHVybHMpIDIgQlVGRkVSX0NPREVDUyBldmVudHMgd2lsbCBiZSB0cmlnZ2VyZWQsIG9uZSBwZXIgc3RyZWFtIGNvbnRyb2xsZXJcbiAgICAvLyBzb3VyY2VidWZmZXJzIHdpbGwgYmUgY3JlYXRlZCBhbGwgYXQgb25jZSB3aGVuIHRoZSBleHBlY3RlZCBuYiBvZiB0cmFja3Mgd2lsbCBiZSByZWFjaGVkXG4gICAgLy8gaW4gY2FzZSBhbHQgYXVkaW8gaXMgbm90IHVzZWQsIG9ubHkgb25lIEJVRkZFUl9DT0RFQyBldmVudCB3aWxsIGJlIGZpcmVkIGZyb20gbWFpbiBzdHJlYW0gY29udHJvbGxlclxuICAgIC8vIGl0IHdpbGwgY29udGFpbiB0aGUgZXhwZWN0ZWQgbmIgb2Ygc291cmNlIGJ1ZmZlcnMsIG5vIG5lZWQgdG8gY29tcHV0ZSBpdFxuICAgIHZhciBjb2RlY0V2ZW50cyA9IDI7XG5cbiAgICBpZiAoZGF0YS5hdWRpbyAmJiAhZGF0YS52aWRlbyB8fCAhZGF0YS5hbHRBdWRpbykge1xuICAgICAgY29kZWNFdmVudHMgPSAxO1xuICAgIH1cblxuICAgIHRoaXMuYnVmZmVyQ29kZWNFdmVudHNFeHBlY3RlZCA9IHRoaXMuX2J1ZmZlckNvZGVjRXZlbnRzVG90YWwgPSBjb2RlY0V2ZW50cztcbiAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKHRoaXMuYnVmZmVyQ29kZWNFdmVudHNFeHBlY3RlZCArIFwiIGJ1ZmZlckNvZGVjIGV2ZW50KHMpIGV4cGVjdGVkXCIpO1xuICB9O1xuXG4gIF9wcm90by5vbk1lZGlhQXR0YWNoaW5nID0gZnVuY3Rpb24gb25NZWRpYUF0dGFjaGluZyhkYXRhKSB7XG4gICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYSA9IGRhdGEubWVkaWE7XG5cbiAgICBpZiAobWVkaWEgJiYgYnVmZmVyX2NvbnRyb2xsZXJfTWVkaWFTb3VyY2UpIHtcbiAgICAgIC8vIHNldHVwIHRoZSBtZWRpYSBzb3VyY2VcbiAgICAgIHZhciBtcyA9IHRoaXMubWVkaWFTb3VyY2UgPSBuZXcgYnVmZmVyX2NvbnRyb2xsZXJfTWVkaWFTb3VyY2UoKTsgLy8gTWVkaWEgU291cmNlIGxpc3RlbmVyc1xuXG4gICAgICBtcy5hZGRFdmVudExpc3RlbmVyKCdzb3VyY2VvcGVuJywgdGhpcy5fb25NZWRpYVNvdXJjZU9wZW4pO1xuICAgICAgbXMuYWRkRXZlbnRMaXN0ZW5lcignc291cmNlZW5kZWQnLCB0aGlzLl9vbk1lZGlhU291cmNlRW5kZWQpO1xuICAgICAgbXMuYWRkRXZlbnRMaXN0ZW5lcignc291cmNlY2xvc2UnLCB0aGlzLl9vbk1lZGlhU291cmNlQ2xvc2UpOyAvLyBsaW5rIHZpZGVvIGFuZCBtZWRpYSBTb3VyY2VcblxuICAgICAgbWVkaWEuc3JjID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwobXMpOyAvLyBjYWNoZSB0aGUgbG9jYWxseSBnZW5lcmF0ZWQgb2JqZWN0IHVybFxuXG4gICAgICB0aGlzLl9vYmplY3RVcmwgPSBtZWRpYS5zcmM7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vbk1lZGlhRGV0YWNoaW5nID0gZnVuY3Rpb24gb25NZWRpYURldGFjaGluZygpIHtcbiAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKCdtZWRpYSBzb3VyY2UgZGV0YWNoaW5nJyk7XG4gICAgdmFyIG1zID0gdGhpcy5tZWRpYVNvdXJjZTtcblxuICAgIGlmIChtcykge1xuICAgICAgaWYgKG1zLnJlYWR5U3RhdGUgPT09ICdvcGVuJykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIGVuZE9mU3RyZWFtIGNvdWxkIHRyaWdnZXIgZXhjZXB0aW9uIGlmIGFueSBzb3VyY2VidWZmZXIgaXMgaW4gdXBkYXRpbmcgc3RhdGVcbiAgICAgICAgICAvLyB3ZSBkb24ndCByZWFsbHkgY2FyZSBhYm91dCBjaGVja2luZyBzb3VyY2VidWZmZXIgc3RhdGUgaGVyZSxcbiAgICAgICAgICAvLyBhcyB3ZSBhcmUgYW55d2F5IGRldGFjaGluZyB0aGUgTWVkaWFTb3VyY2VcbiAgICAgICAgICAvLyBsZXQncyBqdXN0IGF2b2lkIHRoaXMgZXhjZXB0aW9uIHRvIHByb3BhZ2F0ZVxuICAgICAgICAgIG1zLmVuZE9mU3RyZWFtKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuKFwib25NZWRpYURldGFjaGluZzpcIiArIGVyci5tZXNzYWdlICsgXCIgd2hpbGUgY2FsbGluZyBlbmRPZlN0cmVhbVwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtcy5yZW1vdmVFdmVudExpc3RlbmVyKCdzb3VyY2VvcGVuJywgdGhpcy5fb25NZWRpYVNvdXJjZU9wZW4pO1xuICAgICAgbXMucmVtb3ZlRXZlbnRMaXN0ZW5lcignc291cmNlZW5kZWQnLCB0aGlzLl9vbk1lZGlhU291cmNlRW5kZWQpO1xuICAgICAgbXMucmVtb3ZlRXZlbnRMaXN0ZW5lcignc291cmNlY2xvc2UnLCB0aGlzLl9vbk1lZGlhU291cmNlQ2xvc2UpOyAvLyBEZXRhY2ggcHJvcGVybHkgdGhlIE1lZGlhU291cmNlIGZyb20gdGhlIEhUTUxNZWRpYUVsZW1lbnQgYXNcbiAgICAgIC8vIHN1Z2dlc3RlZCBpbiBodHRwczovL2dpdGh1Yi5jb20vdzNjL21lZGlhLXNvdXJjZS9pc3N1ZXMvNTMuXG5cbiAgICAgIGlmICh0aGlzLm1lZGlhKSB7XG4gICAgICAgIGlmICh0aGlzLl9vYmplY3RVcmwpIHtcbiAgICAgICAgICB3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTCh0aGlzLl9vYmplY3RVcmwpO1xuICAgICAgICB9IC8vIGNsZWFuIHVwIHZpZGVvIHRhZyBzcmMgb25seSBpZiBpdCdzIG91ciBvd24gdXJsLiBzb21lIGV4dGVybmFsIGxpYnJhcmllcyBtaWdodFxuICAgICAgICAvLyBoaWphY2sgdGhlIHZpZGVvIHRhZyBhbmQgY2hhbmdlIGl0cyAnc3JjJyB3aXRob3V0IGRlc3Ryb3lpbmcgdGhlIEhscyBpbnN0YW5jZSBmaXJzdFxuXG5cbiAgICAgICAgaWYgKHRoaXMubWVkaWEuc3JjID09PSB0aGlzLl9vYmplY3RVcmwpIHtcbiAgICAgICAgICB0aGlzLm1lZGlhLnJlbW92ZUF0dHJpYnV0ZSgnc3JjJyk7XG4gICAgICAgICAgdGhpcy5tZWRpYS5sb2FkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLndhcm4oJ21lZGlhLnNyYyB3YXMgY2hhbmdlZCBieSBhIHRoaXJkIHBhcnR5IC0gc2tpcCBjbGVhbnVwJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5tZWRpYVNvdXJjZSA9IG51bGw7XG4gICAgICB0aGlzLm1lZGlhID0gbnVsbDtcbiAgICAgIHRoaXMuX29iamVjdFVybCA9IG51bGw7XG4gICAgICB0aGlzLmJ1ZmZlckNvZGVjRXZlbnRzRXhwZWN0ZWQgPSB0aGlzLl9idWZmZXJDb2RlY0V2ZW50c1RvdGFsO1xuICAgICAgdGhpcy5wZW5kaW5nVHJhY2tzID0ge307XG4gICAgICB0aGlzLnRyYWNrcyA9IHt9O1xuICAgICAgdGhpcy5zb3VyY2VCdWZmZXIgPSB7fTtcbiAgICAgIHRoaXMuZmx1c2hSYW5nZSA9IFtdO1xuICAgICAgdGhpcy5zZWdtZW50cyA9IFtdO1xuICAgICAgdGhpcy5hcHBlbmRlZCA9IDA7XG4gICAgfVxuXG4gICAgdGhpcy5obHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLk1FRElBX0RFVEFDSEVEKTtcbiAgfTtcblxuICBfcHJvdG8uY2hlY2tQZW5kaW5nVHJhY2tzID0gZnVuY3Rpb24gY2hlY2tQZW5kaW5nVHJhY2tzKCkge1xuICAgIHZhciBidWZmZXJDb2RlY0V2ZW50c0V4cGVjdGVkID0gdGhpcy5idWZmZXJDb2RlY0V2ZW50c0V4cGVjdGVkLFxuICAgICAgICBwZW5kaW5nVHJhY2tzID0gdGhpcy5wZW5kaW5nVHJhY2tzOyAvLyBDaGVjayBpZiB3ZSd2ZSByZWNlaXZlZCBhbGwgb2YgdGhlIGV4cGVjdGVkIGJ1ZmZlckNvZGVjIGV2ZW50cy4gV2hlbiBub25lIHJlbWFpbiwgY3JlYXRlIGFsbCB0aGUgc291cmNlQnVmZmVycyBhdCBvbmNlLlxuICAgIC8vIFRoaXMgaXMgaW1wb3J0YW50IGJlY2F1c2UgdGhlIE1TRSBzcGVjIGFsbG93cyBpbXBsZW1lbnRhdGlvbnMgdG8gdGhyb3cgUXVvdGFFeGNlZWRlZEVycm9ycyBpZiBjcmVhdGluZyBuZXcgc291cmNlQnVmZmVycyBhZnRlclxuICAgIC8vIGRhdGEgaGFzIGJlZW4gYXBwZW5kZWQgdG8gZXhpc3Rpbmcgb25lcy5cbiAgICAvLyAyIHRyYWNrcyBpcyB0aGUgbWF4IChvbmUgZm9yIGF1ZGlvLCBvbmUgZm9yIHZpZGVvKS4gSWYgd2UndmUgcmVhY2ggdGhpcyBtYXggZ28gYWhlYWQgYW5kIGNyZWF0ZSB0aGUgYnVmZmVycy5cblxuICAgIHZhciBwZW5kaW5nVHJhY2tzQ291bnQgPSBPYmplY3Qua2V5cyhwZW5kaW5nVHJhY2tzKS5sZW5ndGg7XG5cbiAgICBpZiAocGVuZGluZ1RyYWNrc0NvdW50ICYmICFidWZmZXJDb2RlY0V2ZW50c0V4cGVjdGVkIHx8IHBlbmRpbmdUcmFja3NDb3VudCA9PT0gMikge1xuICAgICAgLy8gb2ssIGxldCdzIGNyZWF0ZSB0aGVtIG5vdyAhXG4gICAgICB0aGlzLmNyZWF0ZVNvdXJjZUJ1ZmZlcnMocGVuZGluZ1RyYWNrcyk7XG4gICAgICB0aGlzLnBlbmRpbmdUcmFja3MgPSB7fTsgLy8gYXBwZW5kIGFueSBwZW5kaW5nIHNlZ21lbnRzIG5vdyAhXG5cbiAgICAgIHRoaXMuZG9BcHBlbmRpbmcoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uQnVmZmVyUmVzZXQgPSBmdW5jdGlvbiBvbkJ1ZmZlclJlc2V0KCkge1xuICAgIHZhciBzb3VyY2VCdWZmZXIgPSB0aGlzLnNvdXJjZUJ1ZmZlcjtcblxuICAgIGZvciAodmFyIHR5cGUgaW4gc291cmNlQnVmZmVyKSB7XG4gICAgICB2YXIgc2IgPSBzb3VyY2VCdWZmZXJbdHlwZV07XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChzYikge1xuICAgICAgICAgIGlmICh0aGlzLm1lZGlhU291cmNlKSB7XG4gICAgICAgICAgICB0aGlzLm1lZGlhU291cmNlLnJlbW92ZVNvdXJjZUJ1ZmZlcihzYik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2IucmVtb3ZlRXZlbnRMaXN0ZW5lcigndXBkYXRlZW5kJywgdGhpcy5fb25TQlVwZGF0ZUVuZCk7XG4gICAgICAgICAgc2IucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCB0aGlzLl9vblNCVXBkYXRlRXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgfVxuXG4gICAgdGhpcy5zb3VyY2VCdWZmZXIgPSB7fTtcbiAgICB0aGlzLmZsdXNoUmFuZ2UgPSBbXTtcbiAgICB0aGlzLnNlZ21lbnRzID0gW107XG4gICAgdGhpcy5hcHBlbmRlZCA9IDA7XG4gIH07XG5cbiAgX3Byb3RvLm9uQnVmZmVyQ29kZWNzID0gZnVuY3Rpb24gb25CdWZmZXJDb2RlY3ModHJhY2tzKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAvLyBpZiBzb3VyY2UgYnVmZmVyKHMpIG5vdCBjcmVhdGVkIHlldCwgYXBwZW5kZWQgYnVmZmVyIHRyYWNrcyBpbiB0aGlzLnBlbmRpbmdUcmFja3NcbiAgICAvLyBpZiBzb3VyY2VidWZmZXJzIGFscmVhZHkgY3JlYXRlZCwgZG8gbm90aGluZyAuLi5cbiAgICBpZiAoT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXIpLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIE9iamVjdC5rZXlzKHRyYWNrcykuZm9yRWFjaChmdW5jdGlvbiAodHJhY2tOYW1lKSB7XG4gICAgICBfdGhpczIucGVuZGluZ1RyYWNrc1t0cmFja05hbWVdID0gdHJhY2tzW3RyYWNrTmFtZV07XG4gICAgfSk7XG4gICAgdGhpcy5idWZmZXJDb2RlY0V2ZW50c0V4cGVjdGVkID0gTWF0aC5tYXgodGhpcy5idWZmZXJDb2RlY0V2ZW50c0V4cGVjdGVkIC0gMSwgMCk7XG5cbiAgICBpZiAodGhpcy5tZWRpYVNvdXJjZSAmJiB0aGlzLm1lZGlhU291cmNlLnJlYWR5U3RhdGUgPT09ICdvcGVuJykge1xuICAgICAgdGhpcy5jaGVja1BlbmRpbmdUcmFja3MoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNyZWF0ZVNvdXJjZUJ1ZmZlcnMgPSBmdW5jdGlvbiBjcmVhdGVTb3VyY2VCdWZmZXJzKHRyYWNrcykge1xuICAgIHZhciBzb3VyY2VCdWZmZXIgPSB0aGlzLnNvdXJjZUJ1ZmZlcixcbiAgICAgICAgbWVkaWFTb3VyY2UgPSB0aGlzLm1lZGlhU291cmNlO1xuXG4gICAgaWYgKCFtZWRpYVNvdXJjZSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ2NyZWF0ZVNvdXJjZUJ1ZmZlcnMgY2FsbGVkIHdoZW4gbWVkaWFTb3VyY2Ugd2FzIG51bGwnKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciB0cmFja05hbWUgaW4gdHJhY2tzKSB7XG4gICAgICBpZiAoIXNvdXJjZUJ1ZmZlclt0cmFja05hbWVdKSB7XG4gICAgICAgIHZhciB0cmFjayA9IHRyYWNrc1t0cmFja05hbWVdO1xuXG4gICAgICAgIGlmICghdHJhY2spIHtcbiAgICAgICAgICB0aHJvdyBFcnJvcihcInNvdXJjZSBidWZmZXIgZXhpc3RzIGZvciB0cmFjayBcIiArIHRyYWNrTmFtZSArIFwiLCBob3dldmVyIHRyYWNrIGRvZXMgbm90XCIpO1xuICAgICAgICB9IC8vIHVzZSBsZXZlbENvZGVjIGFzIGZpcnN0IHByaW9yaXR5XG5cblxuICAgICAgICB2YXIgY29kZWMgPSB0cmFjay5sZXZlbENvZGVjIHx8IHRyYWNrLmNvZGVjO1xuICAgICAgICB2YXIgbWltZVR5cGUgPSB0cmFjay5jb250YWluZXIgKyBcIjtjb2RlY3M9XCIgKyBjb2RlYztcbiAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyhcImNyZWF0aW5nIHNvdXJjZUJ1ZmZlcihcIiArIG1pbWVUeXBlICsgXCIpXCIpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIHNiID0gc291cmNlQnVmZmVyW3RyYWNrTmFtZV0gPSBtZWRpYVNvdXJjZS5hZGRTb3VyY2VCdWZmZXIobWltZVR5cGUpO1xuICAgICAgICAgIHNiLmFkZEV2ZW50TGlzdGVuZXIoJ3VwZGF0ZWVuZCcsIHRoaXMuX29uU0JVcGRhdGVFbmQpO1xuICAgICAgICAgIHNiLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgdGhpcy5fb25TQlVwZGF0ZUVycm9yKTtcbiAgICAgICAgICB0aGlzLnRyYWNrc1t0cmFja05hbWVdID0ge1xuICAgICAgICAgICAgYnVmZmVyOiBzYixcbiAgICAgICAgICAgIGNvZGVjOiBjb2RlYyxcbiAgICAgICAgICAgIGlkOiB0cmFjay5pZCxcbiAgICAgICAgICAgIGNvbnRhaW5lcjogdHJhY2suY29udGFpbmVyLFxuICAgICAgICAgICAgbGV2ZWxDb2RlYzogdHJhY2subGV2ZWxDb2RlY1xuICAgICAgICAgIH07XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5lcnJvcihcImVycm9yIHdoaWxlIHRyeWluZyB0byBhZGQgc291cmNlQnVmZmVyOlwiICsgZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgIHRoaXMuaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5FUlJPUiwge1xuICAgICAgICAgICAgdHlwZTogZXJyb3JzW1wiRXJyb3JUeXBlc1wiXS5NRURJQV9FUlJPUixcbiAgICAgICAgICAgIGRldGFpbHM6IGVycm9yc1tcIkVycm9yRGV0YWlsc1wiXS5CVUZGRVJfQUREX0NPREVDX0VSUk9SLFxuICAgICAgICAgICAgZmF0YWw6IGZhbHNlLFxuICAgICAgICAgICAgZXJyOiBlcnIsXG4gICAgICAgICAgICBtaW1lVHlwZTogbWltZVR5cGVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5CVUZGRVJfQ1JFQVRFRCwge1xuICAgICAgdHJhY2tzOiB0aGlzLnRyYWNrc1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5vbkJ1ZmZlckFwcGVuZGluZyA9IGZ1bmN0aW9uIG9uQnVmZmVyQXBwZW5kaW5nKGRhdGEpIHtcbiAgICBpZiAoIXRoaXMuX25lZWRzRmx1c2gpIHtcbiAgICAgIGlmICghdGhpcy5zZWdtZW50cykge1xuICAgICAgICB0aGlzLnNlZ21lbnRzID0gW2RhdGFdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZWdtZW50cy5wdXNoKGRhdGEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmRvQXBwZW5kaW5nKCk7XG4gICAgfVxuICB9IC8vIG9uIEJVRkZFUl9FT1MgbWFyayBtYXRjaGluZyBzb3VyY2VidWZmZXIocykgYXMgZW5kZWQgYW5kIHRyaWdnZXIgY2hlY2tFb3MoKVxuICAvLyBhbiB1bmRlZmluZWQgZGF0YS50eXBlIHdpbGwgbWFyayBhbGwgYnVmZmVycyBhcyBFT1MuXG4gIDtcblxuICBfcHJvdG8ub25CdWZmZXJFb3MgPSBmdW5jdGlvbiBvbkJ1ZmZlckVvcyhkYXRhKSB7XG4gICAgZm9yICh2YXIgdHlwZSBpbiB0aGlzLnNvdXJjZUJ1ZmZlcikge1xuICAgICAgaWYgKCFkYXRhLnR5cGUgfHwgZGF0YS50eXBlID09PSB0eXBlKSB7XG4gICAgICAgIHZhciBzYiA9IHRoaXMuc291cmNlQnVmZmVyW3R5cGVdO1xuXG4gICAgICAgIGlmIChzYiAmJiAhc2IuZW5kZWQpIHtcbiAgICAgICAgICBzYi5lbmRlZCA9IHRydWU7XG4gICAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyh0eXBlICsgXCIgc291cmNlQnVmZmVyIG5vdyBFT1NcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmNoZWNrRW9zKCk7XG4gIH0gLy8gaWYgYWxsIHNvdXJjZSBidWZmZXJzIGFyZSBtYXJrZWQgYXMgZW5kZWQsIHNpZ25hbCBlbmRPZlN0cmVhbSgpIHRvIE1lZGlhU291cmNlLlxuICA7XG5cbiAgX3Byb3RvLmNoZWNrRW9zID0gZnVuY3Rpb24gY2hlY2tFb3MoKSB7XG4gICAgdmFyIHNvdXJjZUJ1ZmZlciA9IHRoaXMuc291cmNlQnVmZmVyLFxuICAgICAgICBtZWRpYVNvdXJjZSA9IHRoaXMubWVkaWFTb3VyY2U7XG5cbiAgICBpZiAoIW1lZGlhU291cmNlIHx8IG1lZGlhU291cmNlLnJlYWR5U3RhdGUgIT09ICdvcGVuJykge1xuICAgICAgdGhpcy5fbmVlZHNFb3MgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciB0eXBlIGluIHNvdXJjZUJ1ZmZlcikge1xuICAgICAgdmFyIHNiID0gc291cmNlQnVmZmVyW3R5cGVdO1xuICAgICAgaWYgKCFzYikgY29udGludWU7XG5cbiAgICAgIGlmICghc2IuZW5kZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2IudXBkYXRpbmcpIHtcbiAgICAgICAgdGhpcy5fbmVlZHNFb3MgPSB0cnVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZygnYWxsIG1lZGlhIGRhdGEgYXJlIGF2YWlsYWJsZSwgc2lnbmFsIGVuZE9mU3RyZWFtKCkgdG8gTWVkaWFTb3VyY2UgYW5kIHN0b3AgbG9hZGluZyBmcmFnbWVudCcpOyAvLyBOb3RpZnkgdGhlIG1lZGlhIGVsZW1lbnQgdGhhdCBpdCBub3cgaGFzIGFsbCBvZiB0aGUgbWVkaWEgZGF0YVxuXG4gICAgdHJ5IHtcbiAgICAgIG1lZGlhU291cmNlLmVuZE9mU3RyZWFtKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLndhcm4oJ2V4Y2VwdGlvbiB3aGlsZSBjYWxsaW5nIG1lZGlhU291cmNlLmVuZE9mU3RyZWFtKCknKTtcbiAgICB9XG5cbiAgICB0aGlzLl9uZWVkc0VvcyA9IGZhbHNlO1xuICB9O1xuXG4gIF9wcm90by5vbkJ1ZmZlckZsdXNoaW5nID0gZnVuY3Rpb24gb25CdWZmZXJGbHVzaGluZyhkYXRhKSB7XG4gICAgaWYgKGRhdGEudHlwZSkge1xuICAgICAgdGhpcy5mbHVzaFJhbmdlLnB1c2goe1xuICAgICAgICBzdGFydDogZGF0YS5zdGFydE9mZnNldCxcbiAgICAgICAgZW5kOiBkYXRhLmVuZE9mZnNldCxcbiAgICAgICAgdHlwZTogZGF0YS50eXBlXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5mbHVzaFJhbmdlLnB1c2goe1xuICAgICAgICBzdGFydDogZGF0YS5zdGFydE9mZnNldCxcbiAgICAgICAgZW5kOiBkYXRhLmVuZE9mZnNldCxcbiAgICAgICAgdHlwZTogJ3ZpZGVvJ1xuICAgICAgfSk7XG4gICAgICB0aGlzLmZsdXNoUmFuZ2UucHVzaCh7XG4gICAgICAgIHN0YXJ0OiBkYXRhLnN0YXJ0T2Zmc2V0LFxuICAgICAgICBlbmQ6IGRhdGEuZW5kT2Zmc2V0LFxuICAgICAgICB0eXBlOiAnYXVkaW8nXG4gICAgICB9KTtcbiAgICB9IC8vIGF0dGVtcHQgZmx1c2ggaW1tZWRpYXRlbHlcblxuXG4gICAgdGhpcy5mbHVzaEJ1ZmZlckNvdW50ZXIgPSAwO1xuICAgIHRoaXMuZG9GbHVzaCgpO1xuICB9O1xuXG4gIF9wcm90by5mbHVzaExpdmVCYWNrQnVmZmVyID0gZnVuY3Rpb24gZmx1c2hMaXZlQmFja0J1ZmZlcigpIHtcbiAgICAvLyBjbGVhciBiYWNrIGJ1ZmZlciBmb3IgbGl2ZSBvbmx5XG4gICAgaWYgKCF0aGlzLl9saXZlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGxpdmVCYWNrQnVmZmVyTGVuZ3RoID0gdGhpcy5jb25maWcubGl2ZUJhY2tCdWZmZXJMZW5ndGg7XG5cbiAgICBpZiAoIWlzRmluaXRlKGxpdmVCYWNrQnVmZmVyTGVuZ3RoKSB8fCBsaXZlQmFja0J1ZmZlckxlbmd0aCA8IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMubWVkaWEpIHtcbiAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5lcnJvcignZmx1c2hMaXZlQmFja0J1ZmZlciBjYWxsZWQgd2l0aG91dCBhdHRhY2hpbmcgbWVkaWEnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY3VycmVudFRpbWUgPSB0aGlzLm1lZGlhLmN1cnJlbnRUaW1lO1xuICAgIHZhciBzb3VyY2VCdWZmZXIgPSB0aGlzLnNvdXJjZUJ1ZmZlcjtcbiAgICB2YXIgYnVmZmVyVHlwZXMgPSBPYmplY3Qua2V5cyhzb3VyY2VCdWZmZXIpO1xuICAgIHZhciB0YXJnZXRCYWNrQnVmZmVyUG9zaXRpb24gPSBjdXJyZW50VGltZSAtIE1hdGgubWF4KGxpdmVCYWNrQnVmZmVyTGVuZ3RoLCB0aGlzLl9sZXZlbFRhcmdldER1cmF0aW9uKTtcblxuICAgIGZvciAodmFyIGluZGV4ID0gYnVmZmVyVHlwZXMubGVuZ3RoIC0gMTsgaW5kZXggPj0gMDsgaW5kZXgtLSkge1xuICAgICAgdmFyIGJ1ZmZlclR5cGUgPSBidWZmZXJUeXBlc1tpbmRleF07XG4gICAgICB2YXIgc2IgPSBzb3VyY2VCdWZmZXJbYnVmZmVyVHlwZV07XG5cbiAgICAgIGlmIChzYikge1xuICAgICAgICB2YXIgYnVmZmVyZWQgPSBzYi5idWZmZXJlZDsgLy8gd2hlbiB0YXJnZXQgYnVmZmVyIHN0YXJ0IGV4Y2VlZHMgYWN0dWFsIGJ1ZmZlciBzdGFydFxuXG4gICAgICAgIGlmIChidWZmZXJlZC5sZW5ndGggPiAwICYmIHRhcmdldEJhY2tCdWZmZXJQb3NpdGlvbiA+IGJ1ZmZlcmVkLnN0YXJ0KDApKSB7XG4gICAgICAgICAgLy8gcmVtb3ZlIGJ1ZmZlciB1cCB1bnRpbCBjdXJyZW50IHRpbWUgbWludXMgbWluaW11bSBiYWNrIGJ1ZmZlciBsZW5ndGggKHJlbW92aW5nIGJ1ZmZlciB0b28gY2xvc2UgdG8gY3VycmVudFxuICAgICAgICAgIC8vIHRpbWUgd2lsbCBsZWFkIHRvIHBsYXliYWNrIGZyZWV6aW5nKVxuICAgICAgICAgIC8vIGNyZWRpdHMgZm9yIGxldmVsIHRhcmdldCBkdXJhdGlvbiAtIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL2h0dHAtc3RyZWFtaW5nL2Jsb2IvMzEzMjkzM2I2YWE5OWRkZWZhYjI5YzEwNDQ3NjI0ZWZkNmZkNmU1Mi9zcmMvc2VnbWVudC1sb2FkZXIuanMjTDkxXG4gICAgICAgICAgaWYgKHRoaXMucmVtb3ZlQnVmZmVyUmFuZ2UoYnVmZmVyVHlwZSwgc2IsIDAsIHRhcmdldEJhY2tCdWZmZXJQb3NpdGlvbikpIHtcbiAgICAgICAgICAgIHRoaXMuaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5MSVZFX0JBQ0tfQlVGRkVSX1JFQUNIRUQsIHtcbiAgICAgICAgICAgICAgYnVmZmVyRW5kOiB0YXJnZXRCYWNrQnVmZmVyUG9zaXRpb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25MZXZlbFVwZGF0ZWQgPSBmdW5jdGlvbiBvbkxldmVsVXBkYXRlZChfcmVmKSB7XG4gICAgdmFyIGRldGFpbHMgPSBfcmVmLmRldGFpbHM7XG5cbiAgICBpZiAoZGV0YWlscy5mcmFnbWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5fbGV2ZWxEdXJhdGlvbiA9IGRldGFpbHMudG90YWxkdXJhdGlvbiArIGRldGFpbHMuZnJhZ21lbnRzWzBdLnN0YXJ0O1xuICAgICAgdGhpcy5fbGV2ZWxUYXJnZXREdXJhdGlvbiA9IGRldGFpbHMuYXZlcmFnZXRhcmdldGR1cmF0aW9uIHx8IGRldGFpbHMudGFyZ2V0ZHVyYXRpb24gfHwgMTA7XG4gICAgICB0aGlzLl9saXZlID0gZGV0YWlscy5saXZlO1xuICAgICAgdGhpcy51cGRhdGVNZWRpYUVsZW1lbnREdXJhdGlvbigpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVXBkYXRlIE1lZGlhIFNvdXJjZSBkdXJhdGlvbiB0byBjdXJyZW50IGxldmVsIGR1cmF0aW9uIG9yIG92ZXJyaWRlIHRvIEluZmluaXR5IGlmIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVyXG4gICAqICdsaXZlRHVyYXRpb25JbmZpbml0eWAgaXMgc2V0IHRvIGB0cnVlYFxuICAgKiBNb3JlIGRldGFpbHM6IGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlby1kZXYvaGxzLmpzL2lzc3Vlcy8zNTVcbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlTWVkaWFFbGVtZW50RHVyYXRpb24gPSBmdW5jdGlvbiB1cGRhdGVNZWRpYUVsZW1lbnREdXJhdGlvbigpIHtcbiAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWc7XG4gICAgdmFyIGR1cmF0aW9uO1xuXG4gICAgaWYgKHRoaXMuX2xldmVsRHVyYXRpb24gPT09IG51bGwgfHwgIXRoaXMubWVkaWEgfHwgIXRoaXMubWVkaWFTb3VyY2UgfHwgIXRoaXMuc291cmNlQnVmZmVyIHx8IHRoaXMubWVkaWEucmVhZHlTdGF0ZSA9PT0gMCB8fCB0aGlzLm1lZGlhU291cmNlLnJlYWR5U3RhdGUgIT09ICdvcGVuJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIHR5cGUgaW4gdGhpcy5zb3VyY2VCdWZmZXIpIHtcbiAgICAgIHZhciBzYiA9IHRoaXMuc291cmNlQnVmZmVyW3R5cGVdO1xuXG4gICAgICBpZiAoc2IgJiYgc2IudXBkYXRpbmcgPT09IHRydWUpIHtcbiAgICAgICAgLy8gY2FuJ3Qgc2V0IGR1cmF0aW9uIHdoaWxzdCBhIGJ1ZmZlciBpcyB1cGRhdGluZ1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgZHVyYXRpb24gPSB0aGlzLm1lZGlhLmR1cmF0aW9uOyAvLyBpbml0aWFsaXNlIHRvIHRoZSB2YWx1ZSB0aGF0IHRoZSBtZWRpYSBzb3VyY2UgaXMgcmVwb3J0aW5nXG5cbiAgICBpZiAodGhpcy5fbXNEdXJhdGlvbiA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fbXNEdXJhdGlvbiA9IHRoaXMubWVkaWFTb3VyY2UuZHVyYXRpb247XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xpdmUgPT09IHRydWUgJiYgY29uZmlnLmxpdmVEdXJhdGlvbkluZmluaXR5ID09PSB0cnVlKSB7XG4gICAgICAvLyBPdmVycmlkZSBkdXJhdGlvbiB0byBJbmZpbml0eVxuICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZygnTWVkaWEgU291cmNlIGR1cmF0aW9uIGlzIHNldCB0byBJbmZpbml0eScpO1xuICAgICAgdGhpcy5fbXNEdXJhdGlvbiA9IHRoaXMubWVkaWFTb3VyY2UuZHVyYXRpb24gPSBJbmZpbml0eTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX2xldmVsRHVyYXRpb24gPiB0aGlzLl9tc0R1cmF0aW9uICYmIHRoaXMuX2xldmVsRHVyYXRpb24gPiBkdXJhdGlvbiB8fCAhT2JqZWN0KG51bWJlcltcImlzRmluaXRlTnVtYmVyXCJdKShkdXJhdGlvbikpIHtcbiAgICAgIC8vIGxldmVsRHVyYXRpb24gd2FzIHRoZSBsYXN0IHZhbHVlIHdlIHNldC5cbiAgICAgIC8vIG5vdCB1c2luZyBtZWRpYVNvdXJjZS5kdXJhdGlvbiBhcyB0aGUgYnJvd3NlciBtYXkgdHdlYWsgdGhpcyB2YWx1ZVxuICAgICAgLy8gb25seSB1cGRhdGUgTWVkaWEgU291cmNlIGR1cmF0aW9uIGlmIGl0cyB2YWx1ZSBpbmNyZWFzZSwgdGhpcyBpcyB0byBhdm9pZFxuICAgICAgLy8gZmx1c2hpbmcgYWxyZWFkeSBidWZmZXJlZCBwb3J0aW9uIHdoZW4gc3dpdGNoaW5nIGJldHdlZW4gcXVhbGl0eSBsZXZlbFxuICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyhcIlVwZGF0aW5nIE1lZGlhIFNvdXJjZSBkdXJhdGlvbiB0byBcIiArIHRoaXMuX2xldmVsRHVyYXRpb24udG9GaXhlZCgzKSk7XG4gICAgICB0aGlzLl9tc0R1cmF0aW9uID0gdGhpcy5tZWRpYVNvdXJjZS5kdXJhdGlvbiA9IHRoaXMuX2xldmVsRHVyYXRpb247XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5kb0ZsdXNoID0gZnVuY3Rpb24gZG9GbHVzaCgpIHtcbiAgICAvLyBsb29wIHRocm91Z2ggYWxsIGJ1ZmZlciByYW5nZXMgdG8gZmx1c2hcbiAgICB3aGlsZSAodGhpcy5mbHVzaFJhbmdlLmxlbmd0aCkge1xuICAgICAgdmFyIHJhbmdlID0gdGhpcy5mbHVzaFJhbmdlWzBdOyAvLyBmbHVzaEJ1ZmZlciB3aWxsIGFib3J0IGFueSBidWZmZXIgYXBwZW5kIGluIHByb2dyZXNzIGFuZCBmbHVzaCBBdWRpby9WaWRlbyBCdWZmZXJcblxuICAgICAgaWYgKHRoaXMuZmx1c2hCdWZmZXIocmFuZ2Uuc3RhcnQsIHJhbmdlLmVuZCwgcmFuZ2UudHlwZSkpIHtcbiAgICAgICAgLy8gcmFuZ2UgZmx1c2hlZCwgcmVtb3ZlIGZyb20gZmx1c2ggYXJyYXlcbiAgICAgICAgdGhpcy5mbHVzaFJhbmdlLnNoaWZ0KCk7XG4gICAgICAgIHRoaXMuZmx1c2hCdWZmZXJDb3VudGVyID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX25lZWRzRmx1c2ggPSB0cnVlOyAvLyBhdm9pZCBsb29waW5nLCB3YWl0IGZvciBTQiB1cGRhdGUgZW5kIHRvIHJldHJpZ2dlciBhIGZsdXNoXG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmZsdXNoUmFuZ2UubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBldmVyeXRoaW5nIGZsdXNoZWRcbiAgICAgIHRoaXMuX25lZWRzRmx1c2ggPSBmYWxzZTsgLy8gbGV0J3MgcmVjb21wdXRlIHRoaXMuYXBwZW5kZWQsIHdoaWNoIGlzIHVzZWQgdG8gYXZvaWQgZmx1c2ggbG9vcGluZ1xuXG4gICAgICB2YXIgYXBwZW5kZWQgPSAwO1xuICAgICAgdmFyIHNvdXJjZUJ1ZmZlciA9IHRoaXMuc291cmNlQnVmZmVyO1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKHZhciB0eXBlIGluIHNvdXJjZUJ1ZmZlcikge1xuICAgICAgICAgIHZhciBzYiA9IHNvdXJjZUJ1ZmZlclt0eXBlXTtcblxuICAgICAgICAgIGlmIChzYikge1xuICAgICAgICAgICAgYXBwZW5kZWQgKz0gc2IuYnVmZmVyZWQubGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8gZXJyb3IgY291bGQgYmUgdGhyb3duIHdoaWxlIGFjY2Vzc2luZyBidWZmZXJlZCwgaW4gY2FzZSBzb3VyY2VidWZmZXIgaGFzIGFscmVhZHkgYmVlbiByZW1vdmVkIGZyb20gTWVkaWFTb3VyY2VcbiAgICAgICAgLy8gdGhpcyBpcyBoYXJtZXNzIGF0IHRoaXMgc3RhZ2UsIGNhdGNoIHRoaXMgdG8gYXZvaWQgcmVwb3J0aW5nIGFuIGludGVybmFsIGV4Y2VwdGlvblxuICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0uZXJyb3IoJ2Vycm9yIHdoaWxlIGFjY2Vzc2luZyBzb3VyY2VCdWZmZXIuYnVmZmVyZWQnKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5hcHBlbmRlZCA9IGFwcGVuZGVkO1xuICAgICAgdGhpcy5obHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkJVRkZFUl9GTFVTSEVEKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmRvQXBwZW5kaW5nID0gZnVuY3Rpb24gZG9BcHBlbmRpbmcoKSB7XG4gICAgdmFyIGNvbmZpZyA9IHRoaXMuY29uZmlnLFxuICAgICAgICBobHMgPSB0aGlzLmhscyxcbiAgICAgICAgc2VnbWVudHMgPSB0aGlzLnNlZ21lbnRzLFxuICAgICAgICBzb3VyY2VCdWZmZXIgPSB0aGlzLnNvdXJjZUJ1ZmZlcjtcblxuICAgIGlmICghT2JqZWN0LmtleXMoc291cmNlQnVmZmVyKS5sZW5ndGgpIHtcbiAgICAgIC8vIGVhcmx5IGV4aXQgaWYgbm8gc291cmNlIGJ1ZmZlcnMgaGF2ZSBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5tZWRpYSB8fCB0aGlzLm1lZGlhLmVycm9yKSB7XG4gICAgICB0aGlzLnNlZ21lbnRzID0gW107XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0uZXJyb3IoJ3RyeWluZyB0byBhcHBlbmQgYWx0aG91Z2ggYSBtZWRpYSBlcnJvciBvY2N1cmVkLCBmbHVzaCBzZWdtZW50IGFuZCBhYm9ydCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmFwcGVuZGluZykge1xuICAgICAgLy8gbG9nZ2VyLmxvZyhgc2IgYXBwZW5kaW5nIGluIHByb2dyZXNzYCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHNlZ21lbnQgPSBzZWdtZW50cy5zaGlmdCgpO1xuXG4gICAgaWYgKCFzZWdtZW50KSB7XG4gICAgICAvLyBoYW5kbGUgdW5kZWZpbmVkIHNoaWZ0XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHZhciBzYiA9IHNvdXJjZUJ1ZmZlcltzZWdtZW50LnR5cGVdO1xuXG4gICAgICBpZiAoIXNiKSB7XG4gICAgICAgIC8vIGluIGNhc2Ugd2UgZG9uJ3QgaGF2ZSBhbnkgc291cmNlIGJ1ZmZlciBtYXRjaGluZyB3aXRoIHRoaXMgc2VnbWVudCB0eXBlLFxuICAgICAgICAvLyBpdCBtZWFucyB0aGF0IE1lZGlhc291cmNlIGZhaWxzIHRvIGNyZWF0ZSBzb3VyY2VidWZmZXJcbiAgICAgICAgLy8gZGlzY2FyZCB0aGlzIHNlZ21lbnQsIGFuZCB0cmlnZ2VyIHVwZGF0ZSBlbmRcbiAgICAgICAgdGhpcy5fb25TQlVwZGF0ZUVuZCgpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHNiLnVwZGF0aW5nKSB7XG4gICAgICAgIC8vIGlmIHdlIGFyZSBzdGlsbCB1cGRhdGluZyB0aGUgc291cmNlIGJ1ZmZlciBmcm9tIHRoZSBsYXN0IHNlZ21lbnQsIHBsYWNlIHRoaXMgYmFjayBhdCB0aGUgZnJvbnQgb2YgdGhlIHF1ZXVlXG4gICAgICAgIHNlZ21lbnRzLnVuc2hpZnQoc2VnbWVudCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gcmVzZXQgc291cmNlQnVmZmVyIGVuZGVkIGZsYWcgYmVmb3JlIGFwcGVuZGluZyBzZWdtZW50XG5cblxuICAgICAgc2IuZW5kZWQgPSBmYWxzZTsgLy8gbG9nZ2VyLmxvZyhgYXBwZW5kaW5nICR7c2VnbWVudC5jb250ZW50fSAke3R5cGV9IFNCLCBzaXplOiR7c2VnbWVudC5kYXRhLmxlbmd0aH0sICR7c2VnbWVudC5wYXJlbnR9YCk7XG5cbiAgICAgIHRoaXMucGFyZW50ID0gc2VnbWVudC5wYXJlbnQ7XG4gICAgICBzYi5hcHBlbmRCdWZmZXIoc2VnbWVudC5kYXRhKTtcbiAgICAgIHRoaXMuYXBwZW5kRXJyb3IgPSAwO1xuICAgICAgdGhpcy5hcHBlbmRlZCsrO1xuICAgICAgdGhpcy5hcHBlbmRpbmcgPSB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy8gaW4gY2FzZSBhbnkgZXJyb3Igb2NjdXJlZCB3aGlsZSBhcHBlbmRpbmcsIHB1dCBiYWNrIHNlZ21lbnQgaW4gc2VnbWVudHMgdGFibGVcbiAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5lcnJvcihcImVycm9yIHdoaWxlIHRyeWluZyB0byBhcHBlbmQgYnVmZmVyOlwiICsgZXJyLm1lc3NhZ2UpO1xuICAgICAgc2VnbWVudHMudW5zaGlmdChzZWdtZW50KTtcbiAgICAgIHZhciBldmVudCA9IHtcbiAgICAgICAgdHlwZTogZXJyb3JzW1wiRXJyb3JUeXBlc1wiXS5NRURJQV9FUlJPUixcbiAgICAgICAgcGFyZW50OiBzZWdtZW50LnBhcmVudCxcbiAgICAgICAgZGV0YWlsczogJycsXG4gICAgICAgIGZhdGFsOiBmYWxzZVxuICAgICAgfTtcblxuICAgICAgaWYgKGVyci5jb2RlID09PSAyMikge1xuICAgICAgICAvLyBRdW90YUV4Y2VlZGVkRXJyb3I6IGh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw1L2luZnJhc3RydWN0dXJlLmh0bWwjcXVvdGFleGNlZWRlZGVycm9yXG4gICAgICAgIC8vIGxldCdzIHN0b3AgYXBwZW5kaW5nIGFueSBzZWdtZW50cywgYW5kIHJlcG9ydCBCVUZGRVJfRlVMTF9FUlJPUiBlcnJvclxuICAgICAgICB0aGlzLnNlZ21lbnRzID0gW107XG4gICAgICAgIGV2ZW50LmRldGFpbHMgPSBlcnJvcnNbXCJFcnJvckRldGFpbHNcIl0uQlVGRkVSX0ZVTExfRVJST1I7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmFwcGVuZEVycm9yKys7XG4gICAgICAgIGV2ZW50LmRldGFpbHMgPSBlcnJvcnNbXCJFcnJvckRldGFpbHNcIl0uQlVGRkVSX0FQUEVORF9FUlJPUjtcbiAgICAgICAgLyogd2l0aCBVSEQgY29udGVudCwgd2UgY291bGQgZ2V0IGxvb3Agb2YgcXVvdGEgZXhjZWVkZWQgZXJyb3IgdW50aWxcbiAgICAgICAgICBicm93c2VyIGlzIGFibGUgdG8gZXZpY3Qgc29tZSBkYXRhIGZyb20gc291cmNlYnVmZmVyLiByZXRyeWluZyBoZWxwIHJlY292ZXJpbmcgdGhpc1xuICAgICAgICAqL1xuXG4gICAgICAgIGlmICh0aGlzLmFwcGVuZEVycm9yID4gY29uZmlnLmFwcGVuZEVycm9yTWF4UmV0cnkpIHtcbiAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKFwiZmFpbCBcIiArIGNvbmZpZy5hcHBlbmRFcnJvck1heFJldHJ5ICsgXCIgdGltZXMgdG8gYXBwZW5kIHNlZ21lbnQgaW4gc291cmNlQnVmZmVyXCIpO1xuICAgICAgICAgIHRoaXMuc2VnbWVudHMgPSBbXTtcbiAgICAgICAgICBldmVudC5mYXRhbCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5FUlJPUiwgZXZlbnQpO1xuICAgIH1cbiAgfVxuICAvKlxuICAgIGZsdXNoIHNwZWNpZmllZCBidWZmZXJlZCByYW5nZSxcbiAgICByZXR1cm4gdHJ1ZSBvbmNlIHJhbmdlIGhhcyBiZWVuIGZsdXNoZWQuXG4gICAgYXMgc291cmNlQnVmZmVyLnJlbW92ZSgpIGlzIGFzeW5jaHJvbm91cywgZmx1c2hCdWZmZXIgd2lsbCBiZSByZXRyaWdnZXJlZCBvbiBzb3VyY2VCdWZmZXIgdXBkYXRlIGVuZFxuICAqL1xuICA7XG5cbiAgX3Byb3RvLmZsdXNoQnVmZmVyID0gZnVuY3Rpb24gZmx1c2hCdWZmZXIoc3RhcnRPZmZzZXQsIGVuZE9mZnNldCwgc2JUeXBlKSB7XG4gICAgdmFyIHNvdXJjZUJ1ZmZlciA9IHRoaXMuc291cmNlQnVmZmVyOyAvLyBleGl0IGlmIG5vIHNvdXJjZUJ1ZmZlcnMgYXJlIGluaXRpYWxpemVkXG5cbiAgICBpZiAoIU9iamVjdC5rZXlzKHNvdXJjZUJ1ZmZlcikubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgY3VycmVudFRpbWUgPSAnbnVsbCc7XG5cbiAgICBpZiAodGhpcy5tZWRpYSkge1xuICAgICAgY3VycmVudFRpbWUgPSB0aGlzLm1lZGlhLmN1cnJlbnRUaW1lLnRvRml4ZWQoMyk7XG4gICAgfVxuXG4gICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyhcImZsdXNoQnVmZmVyLHBvcy9zdGFydC9lbmQ6IFwiICsgY3VycmVudFRpbWUgKyBcIi9cIiArIHN0YXJ0T2Zmc2V0ICsgXCIvXCIgKyBlbmRPZmZzZXQpOyAvLyBzYWZlZ3VhcmQgdG8gYXZvaWQgaW5maW5pdGUgbG9vcGluZyA6IGRvbid0IHRyeSB0byBmbHVzaCBtb3JlIHRoYW4gdGhlIG5iIG9mIGFwcGVuZGVkIHNlZ21lbnRzXG5cbiAgICBpZiAodGhpcy5mbHVzaEJ1ZmZlckNvdW50ZXIgPj0gdGhpcy5hcHBlbmRlZCkge1xuICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLndhcm4oJ2Fib3J0IGZsdXNoaW5nIHRvbyBtYW55IHJldHJpZXMnKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBzYiA9IHNvdXJjZUJ1ZmZlcltzYlR5cGVdOyAvLyB3ZSBhcmUgZ29pbmcgdG8gZmx1c2ggYnVmZmVyLCBtYXJrIHNvdXJjZSBidWZmZXIgYXMgJ25vdCBlbmRlZCdcblxuICAgIGlmIChzYikge1xuICAgICAgc2IuZW5kZWQgPSBmYWxzZTtcblxuICAgICAgaWYgKCFzYi51cGRhdGluZykge1xuICAgICAgICBpZiAodGhpcy5yZW1vdmVCdWZmZXJSYW5nZShzYlR5cGUsIHNiLCBzdGFydE9mZnNldCwgZW5kT2Zmc2V0KSkge1xuICAgICAgICAgIHRoaXMuZmx1c2hCdWZmZXJDb3VudGVyKys7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ud2FybignY2Fubm90IGZsdXNoLCBzYiB1cGRhdGluZyBpbiBwcm9ncmVzcycpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZygnYnVmZmVyIGZsdXNoZWQnKTsgLy8gZXZlcnl0aGluZyBmbHVzaGVkICFcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmVzIGZpcnN0IGJ1ZmZlcmVkIHJhbmdlIGZyb20gcHJvdmlkZWQgc291cmNlIGJ1ZmZlciB0aGF0IGxpZXMgd2l0aGluIGdpdmVuIHN0YXJ0IGFuZCBlbmQgb2Zmc2V0cy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVHlwZSBvZiB0aGUgc291cmNlIGJ1ZmZlciwgbG9nZ2luZyBwdXJwb3NlcyBvbmx5LlxuICAgKiBAcGFyYW0ge1NvdXJjZUJ1ZmZlcn0gc2IgVGFyZ2V0IFNvdXJjZUJ1ZmZlciBpbnN0YW5jZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0T2Zmc2V0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBlbmRPZmZzZXRcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgd2hlbiBzb3VyY2UgYnVmZmVyIHJlbW92ZSByZXF1ZXN0ZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlbW92ZUJ1ZmZlclJhbmdlID0gZnVuY3Rpb24gcmVtb3ZlQnVmZmVyUmFuZ2UodHlwZSwgc2IsIHN0YXJ0T2Zmc2V0LCBlbmRPZmZzZXQpIHtcbiAgICB0cnkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzYi5idWZmZXJlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgYnVmU3RhcnQgPSBzYi5idWZmZXJlZC5zdGFydChpKTtcbiAgICAgICAgdmFyIGJ1ZkVuZCA9IHNiLmJ1ZmZlcmVkLmVuZChpKTtcbiAgICAgICAgdmFyIHJlbW92ZVN0YXJ0ID0gTWF0aC5tYXgoYnVmU3RhcnQsIHN0YXJ0T2Zmc2V0KTtcbiAgICAgICAgdmFyIHJlbW92ZUVuZCA9IE1hdGgubWluKGJ1ZkVuZCwgZW5kT2Zmc2V0KTtcbiAgICAgICAgLyogc29tZXRpbWVzIHNvdXJjZWJ1ZmZlci5yZW1vdmUoKSBkb2VzIG5vdCBmbHVzaFxuICAgICAgICAgIHRoZSBleGFjdCBleHBlY3RlZCB0aW1lIHJhbmdlLlxuICAgICAgICAgIHRvIGF2b2lkIHJvdW5kaW5nIGlzc3Vlcy9pbmZpbml0ZSBsb29wLFxuICAgICAgICAgIG9ubHkgZmx1c2ggYnVmZmVyIHJhbmdlIG9mIGxlbmd0aCBncmVhdGVyIHRoYW4gNTAwbXMuXG4gICAgICAgICovXG5cbiAgICAgICAgaWYgKE1hdGgubWluKHJlbW92ZUVuZCwgYnVmRW5kKSAtIHJlbW92ZVN0YXJ0ID4gMC41KSB7XG4gICAgICAgICAgdmFyIGN1cnJlbnRUaW1lID0gJ251bGwnO1xuXG4gICAgICAgICAgaWYgKHRoaXMubWVkaWEpIHtcbiAgICAgICAgICAgIGN1cnJlbnRUaW1lID0gdGhpcy5tZWRpYS5jdXJyZW50VGltZS50b1N0cmluZygpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJzYiByZW1vdmUgXCIgKyB0eXBlICsgXCIgW1wiICsgcmVtb3ZlU3RhcnQgKyBcIixcIiArIHJlbW92ZUVuZCArIFwiXSwgb2YgW1wiICsgYnVmU3RhcnQgKyBcIixcIiArIGJ1ZkVuZCArIFwiXSwgcG9zOlwiICsgY3VycmVudFRpbWUpO1xuICAgICAgICAgIHNiLnJlbW92ZShyZW1vdmVTdGFydCwgcmVtb3ZlRW5kKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ud2FybigncmVtb3ZlQnVmZmVyUmFuZ2UgZmFpbGVkJywgZXJyb3IpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICByZXR1cm4gQnVmZmVyQ29udHJvbGxlcjtcbn0oZXZlbnRfaGFuZGxlcik7XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGJ1ZmZlcl9jb250cm9sbGVyID0gKGJ1ZmZlcl9jb250cm9sbGVyX0J1ZmZlckNvbnRyb2xsZXIpO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29udHJvbGxlci9jYXAtbGV2ZWwtY29udHJvbGxlci5qc1xuZnVuY3Rpb24gY2FwX2xldmVsX2NvbnRyb2xsZXJfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIGNhcF9sZXZlbF9jb250cm9sbGVyX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgY2FwX2xldmVsX2NvbnRyb2xsZXJfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGNhcF9sZXZlbF9jb250cm9sbGVyX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIGNhcF9sZXZlbF9jb250cm9sbGVyX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qXG4gKiBjYXAgc3RyZWFtIGxldmVsIHRvIG1lZGlhIHNpemUgZGltZW5zaW9uIGNvbnRyb2xsZXJcbiovXG5cblxuXG52YXIgY2FwX2xldmVsX2NvbnRyb2xsZXJfQ2FwTGV2ZWxDb250cm9sbGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfRXZlbnRIYW5kbGVyKSB7XG4gIGNhcF9sZXZlbF9jb250cm9sbGVyX2luaGVyaXRzTG9vc2UoQ2FwTGV2ZWxDb250cm9sbGVyLCBfRXZlbnRIYW5kbGVyKTtcblxuICBmdW5jdGlvbiBDYXBMZXZlbENvbnRyb2xsZXIoaGxzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfRXZlbnRIYW5kbGVyLmNhbGwodGhpcywgaGxzLCBldmVudHNbXCJkZWZhdWx0XCJdLkZQU19EUk9QX0xFVkVMX0NBUFBJTkcsIGV2ZW50c1tcImRlZmF1bHRcIl0uTUVESUFfQVRUQUNISU5HLCBldmVudHNbXCJkZWZhdWx0XCJdLk1BTklGRVNUX1BBUlNFRCwgZXZlbnRzW1wiZGVmYXVsdFwiXS5MRVZFTFNfVVBEQVRFRCwgZXZlbnRzW1wiZGVmYXVsdFwiXS5CVUZGRVJfQ09ERUNTLCBldmVudHNbXCJkZWZhdWx0XCJdLk1FRElBX0RFVEFDSElORykgfHwgdGhpcztcbiAgICBfdGhpcy5hdXRvTGV2ZWxDYXBwaW5nID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgIF90aGlzLmZpcnN0TGV2ZWwgPSBudWxsO1xuICAgIF90aGlzLmxldmVscyA9IFtdO1xuICAgIF90aGlzLm1lZGlhID0gbnVsbDtcbiAgICBfdGhpcy5yZXN0cmljdGVkTGV2ZWxzID0gW107XG4gICAgX3RoaXMudGltZXIgPSBudWxsO1xuICAgIF90aGlzLmNsaWVudFJlY3QgPSBudWxsO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBDYXBMZXZlbENvbnRyb2xsZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5obHMuY29uZmlnLmNhcExldmVsVG9QbGF5ZXJTaXplKSB7XG4gICAgICB0aGlzLm1lZGlhID0gbnVsbDtcbiAgICAgIHRoaXMuY2xpZW50UmVjdCA9IG51bGw7XG4gICAgICB0aGlzLnN0b3BDYXBwaW5nKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vbkZwc0Ryb3BMZXZlbENhcHBpbmcgPSBmdW5jdGlvbiBvbkZwc0Ryb3BMZXZlbENhcHBpbmcoZGF0YSkge1xuICAgIC8vIERvbid0IGFkZCBhIHJlc3RyaWN0ZWQgbGV2ZWwgbW9yZSB0aGFuIG9uY2VcbiAgICBpZiAoQ2FwTGV2ZWxDb250cm9sbGVyLmlzTGV2ZWxBbGxvd2VkKGRhdGEuZHJvcHBlZExldmVsLCB0aGlzLnJlc3RyaWN0ZWRMZXZlbHMpKSB7XG4gICAgICB0aGlzLnJlc3RyaWN0ZWRMZXZlbHMucHVzaChkYXRhLmRyb3BwZWRMZXZlbCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vbk1lZGlhQXR0YWNoaW5nID0gZnVuY3Rpb24gb25NZWRpYUF0dGFjaGluZyhkYXRhKSB7XG4gICAgdGhpcy5tZWRpYSA9IGRhdGEubWVkaWEgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTFZpZGVvRWxlbWVudCA/IGRhdGEubWVkaWEgOiBudWxsO1xuICB9O1xuXG4gIF9wcm90by5vbk1hbmlmZXN0UGFyc2VkID0gZnVuY3Rpb24gb25NYW5pZmVzdFBhcnNlZChkYXRhKSB7XG4gICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuICAgIHRoaXMucmVzdHJpY3RlZExldmVscyA9IFtdO1xuICAgIHRoaXMubGV2ZWxzID0gZGF0YS5sZXZlbHM7XG4gICAgdGhpcy5maXJzdExldmVsID0gZGF0YS5maXJzdExldmVsO1xuXG4gICAgaWYgKGhscy5jb25maWcuY2FwTGV2ZWxUb1BsYXllclNpemUgJiYgZGF0YS52aWRlbykge1xuICAgICAgLy8gU3RhcnQgY2FwcGluZyBpbW1lZGlhdGVseSBpZiB0aGUgbWFuaWZlc3QgaGFzIHNpZ25hbGVkIHZpZGVvIGNvZGVjc1xuICAgICAgdGhpcy5zdGFydENhcHBpbmcoKTtcbiAgICB9XG4gIH0gLy8gT25seSBhY3RpdmF0ZSBjYXBwaW5nIHdoZW4gcGxheWluZyBhIHZpZGVvIHN0cmVhbTsgb3RoZXJ3aXNlLCBtdWx0aS1iaXRyYXRlIGF1ZGlvLW9ubHkgc3RyZWFtcyB3aWxsIGJlIHJlc3RyaWN0ZWRcbiAgLy8gdG8gdGhlIGZpcnN0IGxldmVsXG4gIDtcblxuICBfcHJvdG8ub25CdWZmZXJDb2RlY3MgPSBmdW5jdGlvbiBvbkJ1ZmZlckNvZGVjcyhkYXRhKSB7XG4gICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuXG4gICAgaWYgKGhscy5jb25maWcuY2FwTGV2ZWxUb1BsYXllclNpemUgJiYgZGF0YS52aWRlbykge1xuICAgICAgLy8gSWYgdGhlIG1hbmlmZXN0IGRpZCBub3Qgc2lnbmFsIGEgdmlkZW8gY29kZWMgY2FwcGluZyBoYXMgYmVlbiBkZWZlcnJlZCB1bnRpbCB3ZSdyZSBjZXJ0YWluIHZpZGVvIGlzIHByZXNlbnRcbiAgICAgIHRoaXMuc3RhcnRDYXBwaW5nKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vbkxldmVsc1VwZGF0ZWQgPSBmdW5jdGlvbiBvbkxldmVsc1VwZGF0ZWQoZGF0YSkge1xuICAgIHRoaXMubGV2ZWxzID0gZGF0YS5sZXZlbHM7XG4gIH07XG5cbiAgX3Byb3RvLm9uTWVkaWFEZXRhY2hpbmcgPSBmdW5jdGlvbiBvbk1lZGlhRGV0YWNoaW5nKCkge1xuICAgIHRoaXMuc3RvcENhcHBpbmcoKTtcbiAgfTtcblxuICBfcHJvdG8uZGV0ZWN0UGxheWVyU2l6ZSA9IGZ1bmN0aW9uIGRldGVjdFBsYXllclNpemUoKSB7XG4gICAgaWYgKHRoaXMubWVkaWEpIHtcbiAgICAgIHZhciBsZXZlbHNMZW5ndGggPSB0aGlzLmxldmVscyA/IHRoaXMubGV2ZWxzLmxlbmd0aCA6IDA7XG5cbiAgICAgIGlmIChsZXZlbHNMZW5ndGgpIHtcbiAgICAgICAgdmFyIGhscyA9IHRoaXMuaGxzO1xuICAgICAgICBobHMuYXV0b0xldmVsQ2FwcGluZyA9IHRoaXMuZ2V0TWF4TGV2ZWwobGV2ZWxzTGVuZ3RoIC0gMSk7XG5cbiAgICAgICAgaWYgKGhscy5hdXRvTGV2ZWxDYXBwaW5nID4gdGhpcy5hdXRvTGV2ZWxDYXBwaW5nKSB7XG4gICAgICAgICAgLy8gaWYgYXV0byBsZXZlbCBjYXBwaW5nIGhhcyBhIGhpZ2hlciB2YWx1ZSBmb3IgdGhlIHByZXZpb3VzIG9uZSwgZmx1c2ggdGhlIGJ1ZmZlciB1c2luZyBuZXh0TGV2ZWxTd2l0Y2hcbiAgICAgICAgICAvLyB1c3VhbGx5IGhhcHBlbiB3aGVuIHRoZSB1c2VyIGdvIHRvIHRoZSBmdWxsc2NyZWVuIG1vZGUuXG4gICAgICAgICAgaGxzLnN0cmVhbUNvbnRyb2xsZXIubmV4dExldmVsU3dpdGNoKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmF1dG9MZXZlbENhcHBpbmcgPSBobHMuYXV0b0xldmVsQ2FwcGluZztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLypcbiAgKiByZXR1cm5zIGxldmVsIHNob3VsZCBiZSB0aGUgb25lIHdpdGggdGhlIGRpbWVuc2lvbnMgZXF1YWwgb3IgZ3JlYXRlciB0aGFuIHRoZSBtZWRpYSAocGxheWVyKSBkaW1lbnNpb25zIChzbyB0aGUgdmlkZW8gd2lsbCBiZSBkb3duc2NhbGVkKVxuICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldE1heExldmVsID0gZnVuY3Rpb24gZ2V0TWF4TGV2ZWwoY2FwTGV2ZWxJbmRleCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgaWYgKCF0aGlzLmxldmVscykge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIHZhciB2YWxpZExldmVscyA9IHRoaXMubGV2ZWxzLmZpbHRlcihmdW5jdGlvbiAobGV2ZWwsIGluZGV4KSB7XG4gICAgICByZXR1cm4gQ2FwTGV2ZWxDb250cm9sbGVyLmlzTGV2ZWxBbGxvd2VkKGluZGV4LCBfdGhpczIucmVzdHJpY3RlZExldmVscykgJiYgaW5kZXggPD0gY2FwTGV2ZWxJbmRleDtcbiAgICB9KTtcbiAgICB0aGlzLmNsaWVudFJlY3QgPSBudWxsO1xuICAgIHJldHVybiBDYXBMZXZlbENvbnRyb2xsZXIuZ2V0TWF4TGV2ZWxCeU1lZGlhU2l6ZSh2YWxpZExldmVscywgdGhpcy5tZWRpYVdpZHRoLCB0aGlzLm1lZGlhSGVpZ2h0KTtcbiAgfTtcblxuICBfcHJvdG8uc3RhcnRDYXBwaW5nID0gZnVuY3Rpb24gc3RhcnRDYXBwaW5nKCkge1xuICAgIGlmICh0aGlzLnRpbWVyKSB7XG4gICAgICAvLyBEb24ndCByZXNldCBjYXBwaW5nIGlmIHN0YXJ0ZWQgdHdpY2U7IHRoaXMgY2FuIGhhcHBlbiBpZiB0aGUgbWFuaWZlc3Qgc2lnbmFscyBhIHZpZGVvIGNvZGVjXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5hdXRvTGV2ZWxDYXBwaW5nID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgIHRoaXMuaGxzLmZpcnN0TGV2ZWwgPSB0aGlzLmdldE1heExldmVsKHRoaXMuZmlyc3RMZXZlbCk7XG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVyKTtcbiAgICB0aGlzLnRpbWVyID0gc2V0SW50ZXJ2YWwodGhpcy5kZXRlY3RQbGF5ZXJTaXplLmJpbmQodGhpcyksIDEwMDApO1xuICAgIHRoaXMuZGV0ZWN0UGxheWVyU2l6ZSgpO1xuICB9O1xuXG4gIF9wcm90by5zdG9wQ2FwcGluZyA9IGZ1bmN0aW9uIHN0b3BDYXBwaW5nKCkge1xuICAgIHRoaXMucmVzdHJpY3RlZExldmVscyA9IFtdO1xuICAgIHRoaXMuZmlyc3RMZXZlbCA9IG51bGw7XG4gICAgdGhpcy5hdXRvTGV2ZWxDYXBwaW5nID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuXG4gICAgaWYgKHRoaXMudGltZXIpIHtcbiAgICAgIHRoaXMudGltZXIgPSBjbGVhckludGVydmFsKHRoaXMudGltZXIpO1xuICAgICAgdGhpcy50aW1lciA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5nZXREaW1lbnNpb25zID0gZnVuY3Rpb24gZ2V0RGltZW5zaW9ucygpIHtcbiAgICBpZiAodGhpcy5jbGllbnRSZWN0KSB7XG4gICAgICByZXR1cm4gdGhpcy5jbGllbnRSZWN0O1xuICAgIH1cblxuICAgIHZhciBtZWRpYSA9IHRoaXMubWVkaWE7XG4gICAgdmFyIGJvdW5kc1JlY3QgPSB7XG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMFxuICAgIH07XG5cbiAgICBpZiAobWVkaWEpIHtcbiAgICAgIHZhciBjbGllbnRSZWN0ID0gbWVkaWEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBib3VuZHNSZWN0LndpZHRoID0gY2xpZW50UmVjdC53aWR0aDtcbiAgICAgIGJvdW5kc1JlY3QuaGVpZ2h0ID0gY2xpZW50UmVjdC5oZWlnaHQ7XG5cbiAgICAgIGlmICghYm91bmRzUmVjdC53aWR0aCAmJiAhYm91bmRzUmVjdC5oZWlnaHQpIHtcbiAgICAgICAgLy8gV2hlbiB0aGUgbWVkaWEgZWxlbWVudCBoYXMgbm8gd2lkdGggb3IgaGVpZ2h0IChlcXVpdmFsZW50IHRvIG5vdCBiZWluZyBpbiB0aGUgRE9NKSxcbiAgICAgICAgLy8gdGhlbiB1c2UgaXRzIHdpZHRoIGFuZCBoZWlnaHQgYXR0cmlidXRlcyAobWVkaWEud2lkdGgsIG1lZGlhLmhlaWdodClcbiAgICAgICAgYm91bmRzUmVjdC53aWR0aCA9IGNsaWVudFJlY3QucmlnaHQgLSBjbGllbnRSZWN0LmxlZnQgfHwgbWVkaWEud2lkdGggfHwgMDtcbiAgICAgICAgYm91bmRzUmVjdC5oZWlnaHQgPSBjbGllbnRSZWN0LmJvdHRvbSAtIGNsaWVudFJlY3QudG9wIHx8IG1lZGlhLmhlaWdodCB8fCAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuY2xpZW50UmVjdCA9IGJvdW5kc1JlY3Q7XG4gICAgcmV0dXJuIGJvdW5kc1JlY3Q7XG4gIH07XG5cbiAgQ2FwTGV2ZWxDb250cm9sbGVyLmlzTGV2ZWxBbGxvd2VkID0gZnVuY3Rpb24gaXNMZXZlbEFsbG93ZWQobGV2ZWwsIHJlc3RyaWN0ZWRMZXZlbHMpIHtcbiAgICBpZiAocmVzdHJpY3RlZExldmVscyA9PT0gdm9pZCAwKSB7XG4gICAgICByZXN0cmljdGVkTGV2ZWxzID0gW107XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3RyaWN0ZWRMZXZlbHMuaW5kZXhPZihsZXZlbCkgPT09IC0xO1xuICB9O1xuXG4gIENhcExldmVsQ29udHJvbGxlci5nZXRNYXhMZXZlbEJ5TWVkaWFTaXplID0gZnVuY3Rpb24gZ2V0TWF4TGV2ZWxCeU1lZGlhU2l6ZShsZXZlbHMsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICBpZiAoIWxldmVscyB8fCBsZXZlbHMgJiYgIWxldmVscy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9IC8vIExldmVscyBjYW4gaGF2ZSB0aGUgc2FtZSBkaW1lbnNpb25zIGJ1dCBkaWZmZXJpbmcgYmFuZHdpZHRocyAtIHNpbmNlIGxldmVscyBhcmUgb3JkZXJlZCwgd2UgY2FuIGxvb2sgdG8gdGhlIG5leHRcbiAgICAvLyB0byBkZXRlcm1pbmUgd2hldGhlciB3ZSd2ZSBjaG9zZW4gdGhlIGdyZWF0ZXN0IGJhbmR3aWR0aCBmb3IgdGhlIG1lZGlhJ3MgZGltZW5zaW9uc1xuXG5cbiAgICB2YXIgYXRHcmVhdGVzdEJhbmRpd2R0aCA9IGZ1bmN0aW9uIGF0R3JlYXRlc3RCYW5kaXdkdGgoY3VyTGV2ZWwsIG5leHRMZXZlbCkge1xuICAgICAgaWYgKCFuZXh0TGV2ZWwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjdXJMZXZlbC53aWR0aCAhPT0gbmV4dExldmVsLndpZHRoIHx8IGN1ckxldmVsLmhlaWdodCAhPT0gbmV4dExldmVsLmhlaWdodDtcbiAgICB9OyAvLyBJZiB3ZSBydW4gdGhyb3VnaCB0aGUgbG9vcCB3aXRob3V0IGJyZWFraW5nLCB0aGUgbWVkaWEncyBkaW1lbnNpb25zIGFyZSBncmVhdGVyIHRoYW4gZXZlcnkgbGV2ZWwsIHNvIGRlZmF1bHQgdG9cbiAgICAvLyB0aGUgbWF4IGxldmVsXG5cblxuICAgIHZhciBtYXhMZXZlbEluZGV4ID0gbGV2ZWxzLmxlbmd0aCAtIDE7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxldmVscy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIGxldmVsID0gbGV2ZWxzW2ldO1xuXG4gICAgICBpZiAoKGxldmVsLndpZHRoID49IHdpZHRoIHx8IGxldmVsLmhlaWdodCA+PSBoZWlnaHQpICYmIGF0R3JlYXRlc3RCYW5kaXdkdGgobGV2ZWwsIGxldmVsc1tpICsgMV0pKSB7XG4gICAgICAgIG1heExldmVsSW5kZXggPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWF4TGV2ZWxJbmRleDtcbiAgfTtcblxuICBjYXBfbGV2ZWxfY29udHJvbGxlcl9jcmVhdGVDbGFzcyhDYXBMZXZlbENvbnRyb2xsZXIsIFt7XG4gICAga2V5OiBcIm1lZGlhV2lkdGhcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldERpbWVuc2lvbnMoKS53aWR0aCAqIENhcExldmVsQ29udHJvbGxlci5jb250ZW50U2NhbGVGYWN0b3I7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm1lZGlhSGVpZ2h0XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXREaW1lbnNpb25zKCkuaGVpZ2h0ICogQ2FwTGV2ZWxDb250cm9sbGVyLmNvbnRlbnRTY2FsZUZhY3RvcjtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJjb250ZW50U2NhbGVGYWN0b3JcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBwaXhlbFJhdGlvID0gMTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgcGl4ZWxSYXRpbyA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgcmV0dXJuIHBpeGVsUmF0aW87XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENhcExldmVsQ29udHJvbGxlcjtcbn0oZXZlbnRfaGFuZGxlcik7XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGNhcF9sZXZlbF9jb250cm9sbGVyID0gKGNhcF9sZXZlbF9jb250cm9sbGVyX0NhcExldmVsQ29udHJvbGxlcik7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb250cm9sbGVyL2Zwcy1jb250cm9sbGVyLmpzXG5mdW5jdGlvbiBmcHNfY29udHJvbGxlcl9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKlxuICogRlBTIENvbnRyb2xsZXJcbiovXG5cblxuXG52YXIgZnBzX2NvbnRyb2xsZXJfd2luZG93ID0gd2luZG93LFxuICAgIGZwc19jb250cm9sbGVyX3BlcmZvcm1hbmNlID0gZnBzX2NvbnRyb2xsZXJfd2luZG93LnBlcmZvcm1hbmNlO1xuXG52YXIgZnBzX2NvbnRyb2xsZXJfRlBTQ29udHJvbGxlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0V2ZW50SGFuZGxlcikge1xuICBmcHNfY29udHJvbGxlcl9pbmhlcml0c0xvb3NlKEZQU0NvbnRyb2xsZXIsIF9FdmVudEhhbmRsZXIpO1xuXG4gIGZ1bmN0aW9uIEZQU0NvbnRyb2xsZXIoaGxzKSB7XG4gICAgcmV0dXJuIF9FdmVudEhhbmRsZXIuY2FsbCh0aGlzLCBobHMsIGV2ZW50c1tcImRlZmF1bHRcIl0uTUVESUFfQVRUQUNISU5HKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEZQU0NvbnRyb2xsZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy50aW1lcikge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVyKTtcbiAgICB9XG5cbiAgICB0aGlzLmlzVmlkZW9QbGF5YmFja1F1YWxpdHlBdmFpbGFibGUgPSBmYWxzZTtcbiAgfTtcblxuICBfcHJvdG8ub25NZWRpYUF0dGFjaGluZyA9IGZ1bmN0aW9uIG9uTWVkaWFBdHRhY2hpbmcoZGF0YSkge1xuICAgIHZhciBjb25maWcgPSB0aGlzLmhscy5jb25maWc7XG5cbiAgICBpZiAoY29uZmlnLmNhcExldmVsT25GUFNEcm9wKSB7XG4gICAgICB2YXIgdmlkZW8gPSB0aGlzLnZpZGVvID0gZGF0YS5tZWRpYSBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MVmlkZW9FbGVtZW50ID8gZGF0YS5tZWRpYSA6IG51bGw7XG5cbiAgICAgIGlmICh0eXBlb2YgdmlkZW8uZ2V0VmlkZW9QbGF5YmFja1F1YWxpdHkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5pc1ZpZGVvUGxheWJhY2tRdWFsaXR5QXZhaWxhYmxlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVyKTtcbiAgICAgIHRoaXMudGltZXIgPSBzZXRJbnRlcnZhbCh0aGlzLmNoZWNrRlBTSW50ZXJ2YWwuYmluZCh0aGlzKSwgY29uZmlnLmZwc0Ryb3BwZWRNb25pdG9yaW5nUGVyaW9kKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNoZWNrRlBTID0gZnVuY3Rpb24gY2hlY2tGUFModmlkZW8sIGRlY29kZWRGcmFtZXMsIGRyb3BwZWRGcmFtZXMpIHtcbiAgICB2YXIgY3VycmVudFRpbWUgPSBmcHNfY29udHJvbGxlcl9wZXJmb3JtYW5jZS5ub3coKTtcblxuICAgIGlmIChkZWNvZGVkRnJhbWVzKSB7XG4gICAgICBpZiAodGhpcy5sYXN0VGltZSkge1xuICAgICAgICB2YXIgY3VycmVudFBlcmlvZCA9IGN1cnJlbnRUaW1lIC0gdGhpcy5sYXN0VGltZSxcbiAgICAgICAgICAgIGN1cnJlbnREcm9wcGVkID0gZHJvcHBlZEZyYW1lcyAtIHRoaXMubGFzdERyb3BwZWRGcmFtZXMsXG4gICAgICAgICAgICBjdXJyZW50RGVjb2RlZCA9IGRlY29kZWRGcmFtZXMgLSB0aGlzLmxhc3REZWNvZGVkRnJhbWVzLFxuICAgICAgICAgICAgZHJvcHBlZEZQUyA9IDEwMDAgKiBjdXJyZW50RHJvcHBlZCAvIGN1cnJlbnRQZXJpb2QsXG4gICAgICAgICAgICBobHMgPSB0aGlzLmhscztcbiAgICAgICAgaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5GUFNfRFJPUCwge1xuICAgICAgICAgIGN1cnJlbnREcm9wcGVkOiBjdXJyZW50RHJvcHBlZCxcbiAgICAgICAgICBjdXJyZW50RGVjb2RlZDogY3VycmVudERlY29kZWQsXG4gICAgICAgICAgdG90YWxEcm9wcGVkRnJhbWVzOiBkcm9wcGVkRnJhbWVzXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChkcm9wcGVkRlBTID4gMCkge1xuICAgICAgICAgIC8vIGxvZ2dlci5sb2coJ2NoZWNrRlBTIDogZHJvcHBlZEZQUy9kZWNvZGVkRlBTOicgKyBkcm9wcGVkRlBTLygxMDAwICogY3VycmVudERlY29kZWQgLyBjdXJyZW50UGVyaW9kKSk7XG4gICAgICAgICAgaWYgKGN1cnJlbnREcm9wcGVkID4gaGxzLmNvbmZpZy5mcHNEcm9wcGVkTW9uaXRvcmluZ1RocmVzaG9sZCAqIGN1cnJlbnREZWNvZGVkKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudExldmVsID0gaGxzLmN1cnJlbnRMZXZlbDtcbiAgICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuKCdkcm9wIEZQUyByYXRpbyBncmVhdGVyIHRoYW4gbWF4IGFsbG93ZWQgdmFsdWUgZm9yIGN1cnJlbnRMZXZlbDogJyArIGN1cnJlbnRMZXZlbCk7XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50TGV2ZWwgPiAwICYmIChobHMuYXV0b0xldmVsQ2FwcGluZyA9PT0gLTEgfHwgaGxzLmF1dG9MZXZlbENhcHBpbmcgPj0gY3VycmVudExldmVsKSkge1xuICAgICAgICAgICAgICBjdXJyZW50TGV2ZWwgPSBjdXJyZW50TGV2ZWwgLSAxO1xuICAgICAgICAgICAgICBobHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkZQU19EUk9QX0xFVkVMX0NBUFBJTkcsIHtcbiAgICAgICAgICAgICAgICBsZXZlbDogY3VycmVudExldmVsLFxuICAgICAgICAgICAgICAgIGRyb3BwZWRMZXZlbDogaGxzLmN1cnJlbnRMZXZlbFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgaGxzLmF1dG9MZXZlbENhcHBpbmcgPSBjdXJyZW50TGV2ZWw7XG4gICAgICAgICAgICAgIGhscy5zdHJlYW1Db250cm9sbGVyLm5leHRMZXZlbFN3aXRjaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmxhc3RUaW1lID0gY3VycmVudFRpbWU7XG4gICAgICB0aGlzLmxhc3REcm9wcGVkRnJhbWVzID0gZHJvcHBlZEZyYW1lcztcbiAgICAgIHRoaXMubGFzdERlY29kZWRGcmFtZXMgPSBkZWNvZGVkRnJhbWVzO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY2hlY2tGUFNJbnRlcnZhbCA9IGZ1bmN0aW9uIGNoZWNrRlBTSW50ZXJ2YWwoKSB7XG4gICAgdmFyIHZpZGVvID0gdGhpcy52aWRlbztcblxuICAgIGlmICh2aWRlbykge1xuICAgICAgaWYgKHRoaXMuaXNWaWRlb1BsYXliYWNrUXVhbGl0eUF2YWlsYWJsZSkge1xuICAgICAgICB2YXIgdmlkZW9QbGF5YmFja1F1YWxpdHkgPSB2aWRlby5nZXRWaWRlb1BsYXliYWNrUXVhbGl0eSgpO1xuICAgICAgICB0aGlzLmNoZWNrRlBTKHZpZGVvLCB2aWRlb1BsYXliYWNrUXVhbGl0eS50b3RhbFZpZGVvRnJhbWVzLCB2aWRlb1BsYXliYWNrUXVhbGl0eS5kcm9wcGVkVmlkZW9GcmFtZXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jaGVja0ZQUyh2aWRlbywgdmlkZW8ud2Via2l0RGVjb2RlZEZyYW1lQ291bnQsIHZpZGVvLndlYmtpdERyb3BwZWRGcmFtZUNvdW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIEZQU0NvbnRyb2xsZXI7XG59KGV2ZW50X2hhbmRsZXIpO1xuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBmcHNfY29udHJvbGxlciA9IChmcHNfY29udHJvbGxlcl9GUFNDb250cm9sbGVyKTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3V0aWxzL3hoci1sb2FkZXIuanNcbi8qKlxuICogWEhSIGJhc2VkIGxvZ2dlclxuKi9cblxuXG52YXIgeGhyX2xvYWRlcl9YaHJMb2FkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBYaHJMb2FkZXIoY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZyAmJiBjb25maWcueGhyU2V0dXApIHtcbiAgICAgIHRoaXMueGhyU2V0dXAgPSBjb25maWcueGhyU2V0dXA7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9wcm90byA9IFhockxvYWRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIHRoaXMuYWJvcnQoKTtcbiAgICB0aGlzLmxvYWRlciA9IG51bGw7XG4gIH07XG5cbiAgX3Byb3RvLmFib3J0ID0gZnVuY3Rpb24gYWJvcnQoKSB7XG4gICAgdmFyIGxvYWRlciA9IHRoaXMubG9hZGVyO1xuXG4gICAgaWYgKGxvYWRlciAmJiBsb2FkZXIucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgdGhpcy5zdGF0cy5hYm9ydGVkID0gdHJ1ZTtcbiAgICAgIGxvYWRlci5hYm9ydCgpO1xuICAgIH1cblxuICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5yZXF1ZXN0VGltZW91dCk7XG4gICAgdGhpcy5yZXF1ZXN0VGltZW91dCA9IG51bGw7XG4gICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLnJldHJ5VGltZW91dCk7XG4gICAgdGhpcy5yZXRyeVRpbWVvdXQgPSBudWxsO1xuICB9O1xuXG4gIF9wcm90by5sb2FkID0gZnVuY3Rpb24gbG9hZChjb250ZXh0LCBjb25maWcsIGNhbGxiYWNrcykge1xuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy5jYWxsYmFja3MgPSBjYWxsYmFja3M7XG4gICAgdGhpcy5zdGF0cyA9IHtcbiAgICAgIHRyZXF1ZXN0OiB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCksXG4gICAgICByZXRyeTogMFxuICAgIH07XG4gICAgdGhpcy5yZXRyeURlbGF5ID0gY29uZmlnLnJldHJ5RGVsYXk7XG4gICAgdGhpcy5sb2FkSW50ZXJuYWwoKTtcbiAgfTtcblxuICBfcHJvdG8ubG9hZEludGVybmFsID0gZnVuY3Rpb24gbG9hZEludGVybmFsKCkge1xuICAgIHZhciB4aHIsXG4gICAgICAgIGNvbnRleHQgPSB0aGlzLmNvbnRleHQ7XG4gICAgeGhyID0gdGhpcy5sb2FkZXIgPSBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgdmFyIHN0YXRzID0gdGhpcy5zdGF0cztcbiAgICBzdGF0cy50Zmlyc3QgPSAwO1xuICAgIHN0YXRzLmxvYWRlZCA9IDA7XG4gICAgdmFyIHhoclNldHVwID0gdGhpcy54aHJTZXR1cDtcblxuICAgIHRyeSB7XG4gICAgICBpZiAoeGhyU2V0dXApIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB4aHJTZXR1cCh4aHIsIGNvbnRleHQudXJsKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGZpeCB4aHJTZXR1cDogKHhociwgdXJsKSA9PiB7eGhyLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LUxhbmd1YWdlXCIsIFwidGVzdFwiKTt9XG4gICAgICAgICAgLy8gbm90IHdvcmtpbmcsIGFzIHhoci5zZXRSZXF1ZXN0SGVhZGVyIGV4cGVjdHMgeGhyLnJlYWR5U3RhdGUgPT09IE9QRU5cbiAgICAgICAgICB4aHIub3BlbignR0VUJywgY29udGV4dC51cmwsIHRydWUpO1xuICAgICAgICAgIHhoclNldHVwKHhociwgY29udGV4dC51cmwpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICgheGhyLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgeGhyLm9wZW4oJ0dFVCcsIGNvbnRleHQudXJsLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJRTExIHRocm93cyBhbiBleGNlcHRpb24gb24geGhyLm9wZW4gaWYgYXR0ZW1wdGluZyB0byBhY2Nlc3MgYW4gSFRUUCByZXNvdXJjZSBvdmVyIEhUVFBTXG4gICAgICB0aGlzLmNhbGxiYWNrcy5vbkVycm9yKHtcbiAgICAgICAgY29kZTogeGhyLnN0YXR1cyxcbiAgICAgICAgdGV4dDogZS5tZXNzYWdlXG4gICAgICB9LCBjb250ZXh0LCB4aHIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChjb250ZXh0LnJhbmdlRW5kKSB7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignUmFuZ2UnLCAnYnl0ZXM9JyArIGNvbnRleHQucmFuZ2VTdGFydCArICctJyArIChjb250ZXh0LnJhbmdlRW5kIC0gMSkpO1xuICAgIH1cblxuICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSB0aGlzLnJlYWR5c3RhdGVjaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB4aHIub25wcm9ncmVzcyA9IHRoaXMubG9hZHByb2dyZXNzLmJpbmQodGhpcyk7XG4gICAgeGhyLnJlc3BvbnNlVHlwZSA9IGNvbnRleHQucmVzcG9uc2VUeXBlOyAvLyBzZXR1cCB0aW1lb3V0IGJlZm9yZSB3ZSBwZXJmb3JtIHJlcXVlc3RcblxuICAgIHRoaXMucmVxdWVzdFRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCh0aGlzLmxvYWR0aW1lb3V0LmJpbmQodGhpcyksIHRoaXMuY29uZmlnLnRpbWVvdXQpO1xuICAgIHhoci5zZW5kKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiByZWFkeXN0YXRlY2hhbmdlKGV2ZW50KSB7XG4gICAgdmFyIHhociA9IGV2ZW50LmN1cnJlbnRUYXJnZXQsXG4gICAgICAgIHJlYWR5U3RhdGUgPSB4aHIucmVhZHlTdGF0ZSxcbiAgICAgICAgc3RhdHMgPSB0aGlzLnN0YXRzLFxuICAgICAgICBjb250ZXh0ID0gdGhpcy5jb250ZXh0LFxuICAgICAgICBjb25maWcgPSB0aGlzLmNvbmZpZzsgLy8gZG9uJ3QgcHJvY2VlZCBpZiB4aHIgaGFzIGJlZW4gYWJvcnRlZFxuXG4gICAgaWYgKHN0YXRzLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vID49IEhFQURFUlNfUkVDRUlWRURcblxuXG4gICAgaWYgKHJlYWR5U3RhdGUgPj0gMikge1xuICAgICAgLy8gY2xlYXIgeGhyIHRpbWVvdXQgYW5kIHJlYXJtIGl0IGlmIHJlYWR5U3RhdGUgbGVzcyB0aGFuIDRcbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5yZXF1ZXN0VGltZW91dCk7XG5cbiAgICAgIGlmIChzdGF0cy50Zmlyc3QgPT09IDApIHtcbiAgICAgICAgc3RhdHMudGZpcnN0ID0gTWF0aC5tYXgod2luZG93LnBlcmZvcm1hbmNlLm5vdygpLCBzdGF0cy50cmVxdWVzdCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgIHZhciBzdGF0dXMgPSB4aHIuc3RhdHVzOyAvLyBodHRwIHN0YXR1cyBiZXR3ZWVuIDIwMCB0byAyOTkgYXJlIGFsbCBzdWNjZXNzZnVsXG5cbiAgICAgICAgaWYgKHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwKSB7XG4gICAgICAgICAgc3RhdHMudGxvYWQgPSBNYXRoLm1heChzdGF0cy50Zmlyc3QsIHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKSk7XG4gICAgICAgICAgdmFyIGRhdGEsIGxlbjtcblxuICAgICAgICAgIGlmIChjb250ZXh0LnJlc3BvbnNlVHlwZSA9PT0gJ2FycmF5YnVmZmVyJykge1xuICAgICAgICAgICAgZGF0YSA9IHhoci5yZXNwb25zZTtcbiAgICAgICAgICAgIGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0YSA9IHhoci5yZXNwb25zZVRleHQ7XG4gICAgICAgICAgICBsZW4gPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzdGF0cy5sb2FkZWQgPSBzdGF0cy50b3RhbCA9IGxlbjtcbiAgICAgICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgICAgICB1cmw6IHhoci5yZXNwb25zZVVSTCxcbiAgICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgICB9O1xuICAgICAgICAgIHRoaXMuY2FsbGJhY2tzLm9uU3VjY2VzcyhyZXNwb25zZSwgc3RhdHMsIGNvbnRleHQsIHhocik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gaWYgbWF4IG5iIG9mIHJldHJpZXMgcmVhY2hlZCBvciBpZiBodHRwIHN0YXR1cyBiZXR3ZWVuIDQwMCBhbmQgNDk5IChzdWNoIGVycm9yIGNhbm5vdCBiZSByZWNvdmVyZWQsIHJldHJ5aW5nIGlzIHVzZWxlc3MpLCByZXR1cm4gZXJyb3JcbiAgICAgICAgICBpZiAoc3RhdHMucmV0cnkgPj0gY29uZmlnLm1heFJldHJ5IHx8IHN0YXR1cyA+PSA0MDAgJiYgc3RhdHVzIDwgNDk5KSB7XG4gICAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0uZXJyb3Ioc3RhdHVzICsgXCIgd2hpbGUgbG9hZGluZyBcIiArIGNvbnRleHQudXJsKTtcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzLm9uRXJyb3Ioe1xuICAgICAgICAgICAgICBjb2RlOiBzdGF0dXMsXG4gICAgICAgICAgICAgIHRleHQ6IHhoci5zdGF0dXNUZXh0XG4gICAgICAgICAgICB9LCBjb250ZXh0LCB4aHIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyByZXRyeVxuICAgICAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLndhcm4oc3RhdHVzICsgXCIgd2hpbGUgbG9hZGluZyBcIiArIGNvbnRleHQudXJsICsgXCIsIHJldHJ5aW5nIGluIFwiICsgdGhpcy5yZXRyeURlbGF5ICsgXCIuLi5cIik7IC8vIGFib3J0cyBhbmQgcmVzZXRzIGludGVybmFsIHN0YXRlXG5cbiAgICAgICAgICAgIHRoaXMuZGVzdHJveSgpOyAvLyBzY2hlZHVsZSByZXRyeVxuXG4gICAgICAgICAgICB0aGlzLnJldHJ5VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KHRoaXMubG9hZEludGVybmFsLmJpbmQodGhpcyksIHRoaXMucmV0cnlEZWxheSk7IC8vIHNldCBleHBvbmVudGlhbCBiYWNrb2ZmXG5cbiAgICAgICAgICAgIHRoaXMucmV0cnlEZWxheSA9IE1hdGgubWluKDIgKiB0aGlzLnJldHJ5RGVsYXksIGNvbmZpZy5tYXhSZXRyeURlbGF5KTtcbiAgICAgICAgICAgIHN0YXRzLnJldHJ5Kys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyByZWFkeVN0YXRlID49IDIgQU5EIHJlYWR5U3RhdGUgIT09NCAocmVhZHlTdGF0ZSA9IEhFQURFUlNfUkVDRUlWRUQgfHwgTE9BRElORykgcmVhcm0gdGltZW91dCBhcyB4aHIgbm90IGZpbmlzaGVkIHlldFxuICAgICAgICB0aGlzLnJlcXVlc3RUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQodGhpcy5sb2FkdGltZW91dC5iaW5kKHRoaXMpLCBjb25maWcudGltZW91dCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5sb2FkdGltZW91dCA9IGZ1bmN0aW9uIGxvYWR0aW1lb3V0KCkge1xuICAgIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuKFwidGltZW91dCB3aGlsZSBsb2FkaW5nIFwiICsgdGhpcy5jb250ZXh0LnVybCk7XG4gICAgdGhpcy5jYWxsYmFja3Mub25UaW1lb3V0KHRoaXMuc3RhdHMsIHRoaXMuY29udGV4dCwgbnVsbCk7XG4gIH07XG5cbiAgX3Byb3RvLmxvYWRwcm9ncmVzcyA9IGZ1bmN0aW9uIGxvYWRwcm9ncmVzcyhldmVudCkge1xuICAgIHZhciB4aHIgPSBldmVudC5jdXJyZW50VGFyZ2V0LFxuICAgICAgICBzdGF0cyA9IHRoaXMuc3RhdHM7XG4gICAgc3RhdHMubG9hZGVkID0gZXZlbnQubG9hZGVkO1xuXG4gICAgaWYgKGV2ZW50Lmxlbmd0aENvbXB1dGFibGUpIHtcbiAgICAgIHN0YXRzLnRvdGFsID0gZXZlbnQudG90YWw7XG4gICAgfVxuXG4gICAgdmFyIG9uUHJvZ3Jlc3MgPSB0aGlzLmNhbGxiYWNrcy5vblByb2dyZXNzO1xuXG4gICAgaWYgKG9uUHJvZ3Jlc3MpIHtcbiAgICAgIC8vIHRoaXJkIGFyZyBpcyB0byBwcm92aWRlIG9uIHByb2dyZXNzIGRhdGFcbiAgICAgIG9uUHJvZ3Jlc3Moc3RhdHMsIHRoaXMuY29udGV4dCwgbnVsbCwgeGhyKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFhockxvYWRlcjtcbn0oKTtcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgeGhyX2xvYWRlciA9ICh4aHJfbG9hZGVyX1hockxvYWRlcik7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb250cm9sbGVyL2F1ZGlvLXRyYWNrLWNvbnRyb2xsZXIuanNcbmZ1bmN0aW9uIGF1ZGlvX3RyYWNrX2NvbnRyb2xsZXJfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIGF1ZGlvX3RyYWNrX2NvbnRyb2xsZXJfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBhdWRpb190cmFja19jb250cm9sbGVyX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBhdWRpb190cmFja19jb250cm9sbGVyX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIGF1ZGlvX3RyYWNrX2NvbnRyb2xsZXJfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuXG5cblxuXG4vKipcbiAqIEBjbGFzcyBBdWRpb1RyYWNrQ29udHJvbGxlclxuICogQGltcGxlbWVudHMge0V2ZW50SGFuZGxlcn1cbiAqXG4gKiBIYW5kbGVzIG1haW4gbWFuaWZlc3QgYW5kIGF1ZGlvLXRyYWNrIG1ldGFkYXRhIGxvYWRlZCxcbiAqIG93bnMgYW5kIGV4cG9zZXMgdGhlIHNlbGVjdGFibGUgYXVkaW8tdHJhY2tzIGRhdGEtbW9kZWxzLlxuICpcbiAqIEV4cG9zZXMgaW50ZXJuYWwgaW50ZXJmYWNlIHRvIHNlbGVjdCBhdmFpbGFibGUgYXVkaW8tdHJhY2tzLlxuICpcbiAqIEhhbmRsZXMgZXJyb3JzIG9uIGxvYWRpbmcgYXVkaW8tdHJhY2sgcGxheWxpc3RzLiBNYW5hZ2VzIGZhbGxiYWNrIG1lY2hhbmlzbVxuICogd2l0aCByZWR1bmRhbnRzIHRyYWNrcyAoZ3JvdXAtSURzKS5cbiAqXG4gKiBIYW5kbGVzIGxldmVsLWxvYWRpbmcgYW5kIGdyb3VwLUlEIHN3aXRjaGVzIGZvciB2aWRlbyAoZmFsbGJhY2sgb24gdmlkZW8gbGV2ZWxzKSxcbiAqIGFuZCBldmVudHVhbGx5IGFkYXB0cyB0aGUgYXVkaW8tdHJhY2sgZ3JvdXAtSUQgdG8gbWF0Y2guXG4gKlxuICogQGZpcmVzIEFVRElPX1RSQUNLX0xPQURJTkdcbiAqIEBmaXJlcyBBVURJT19UUkFDS19TV0lUQ0hJTkdcbiAqIEBmaXJlcyBBVURJT19UUkFDS1NfVVBEQVRFRFxuICogQGZpcmVzIEVSUk9SXG4gKlxuICovXG5cbnZhciBhdWRpb190cmFja19jb250cm9sbGVyX0F1ZGlvVHJhY2tDb250cm9sbGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfVGFza0xvb3ApIHtcbiAgYXVkaW9fdHJhY2tfY29udHJvbGxlcl9pbmhlcml0c0xvb3NlKEF1ZGlvVHJhY2tDb250cm9sbGVyLCBfVGFza0xvb3ApO1xuXG4gIGZ1bmN0aW9uIEF1ZGlvVHJhY2tDb250cm9sbGVyKGhscykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1Rhc2tMb29wLmNhbGwodGhpcywgaGxzLCBldmVudHNbXCJkZWZhdWx0XCJdLk1BTklGRVNUX0xPQURJTkcsIGV2ZW50c1tcImRlZmF1bHRcIl0uTUFOSUZFU1RfUEFSU0VELCBldmVudHNbXCJkZWZhdWx0XCJdLkFVRElPX1RSQUNLX0xPQURFRCwgZXZlbnRzW1wiZGVmYXVsdFwiXS5BVURJT19UUkFDS19TV0lUQ0hFRCwgZXZlbnRzW1wiZGVmYXVsdFwiXS5MRVZFTF9MT0FERUQsIGV2ZW50c1tcImRlZmF1bHRcIl0uRVJST1IpIHx8IHRoaXM7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBDdXJyZW50bHkgc2VsZWN0ZWQgaW5kZXggaW4gYHRyYWNrc2BcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IHRyYWNrSWRcbiAgICAgKi9cblxuICAgIF90aGlzLl90cmFja0lkID0gLTE7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBJZiBzaG91bGQgc2VsZWN0IHRyYWNrcyBhY2NvcmRpbmcgdG8gZGVmYXVsdCB0cmFjayBhdHRyaWJ1dGVcbiAgICAgKiBAbWVtYmVyIHtib29sZWFufSBfc2VsZWN0RGVmYXVsdFRyYWNrXG4gICAgICovXG5cbiAgICBfdGhpcy5fc2VsZWN0RGVmYXVsdFRyYWNrID0gdHJ1ZTtcbiAgICAvKipcbiAgICAgKiBAcHVibGljXG4gICAgICogQWxsIHRyYWNrcyBhdmFpbGFibGVcbiAgICAgKiBAbWVtYmVyIHtBdWRpb1RyYWNrW119XG4gICAgICovXG5cbiAgICBfdGhpcy50cmFja3MgPSBbXTtcbiAgICAvKipcbiAgICAgKiBAcHVibGljXG4gICAgICogTGlzdCBvZiBibGFja2xpc3RlZCBhdWRpbyB0cmFjayBJRHMgKHRoYXQgaGF2ZSBjYXVzZWQgZmFpbHVyZSlcbiAgICAgKiBAbWVtYmVyIHtudW1iZXJbXX1cbiAgICAgKi9cblxuICAgIF90aGlzLnRyYWNrSWRCbGFja2xpc3QgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIC8qKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBUaGUgY3VycmVudGx5IHJ1bm5pbmcgZ3JvdXAgSUQgZm9yIGF1ZGlvXG4gICAgICogKHdlIGdyYWIgdGhpcyBvbiBtYW5pZmVzdC1wYXJzZWQgYW5kIG5ldyBsZXZlbC1sb2FkZWQpXG4gICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAqL1xuXG4gICAgX3RoaXMuYXVkaW9Hcm91cElkID0gbnVsbDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFJlc2V0IGF1ZGlvIHRyYWNrcyBvbiBuZXcgbWFuaWZlc3QgbG9hZGluZy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gQXVkaW9UcmFja0NvbnRyb2xsZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5vbk1hbmlmZXN0TG9hZGluZyA9IGZ1bmN0aW9uIG9uTWFuaWZlc3RMb2FkaW5nKCkge1xuICAgIHRoaXMudHJhY2tzID0gW107XG4gICAgdGhpcy5fdHJhY2tJZCA9IC0xO1xuICAgIHRoaXMuX3NlbGVjdERlZmF1bHRUcmFjayA9IHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIFN0b3JlIHRyYWNrcyBkYXRhIGZyb20gbWFuaWZlc3QgcGFyc2VkIGRhdGEuXG4gICAqXG4gICAqIFRyaWdnZXIgQVVESU9fVFJBQ0tTX1VQREFURUQgZXZlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gZGF0YVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vbk1hbmlmZXN0UGFyc2VkID0gZnVuY3Rpb24gb25NYW5pZmVzdFBhcnNlZChkYXRhKSB7XG4gICAgdmFyIHRyYWNrcyA9IHRoaXMudHJhY2tzID0gZGF0YS5hdWRpb1RyYWNrcyB8fCBbXTtcbiAgICB0aGlzLmhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uQVVESU9fVFJBQ0tTX1VQREFURUQsIHtcbiAgICAgIGF1ZGlvVHJhY2tzOiB0cmFja3NcbiAgICB9KTtcblxuICAgIHRoaXMuX3NlbGVjdEF1ZGlvR3JvdXAodGhpcy5obHMubmV4dExvYWRMZXZlbCk7XG4gIH1cbiAgLyoqXG4gICAqIFN0b3JlIHRyYWNrIGRldGFpbHMgb2YgbG9hZGVkIHRyYWNrIGluIG91ciBkYXRhLW1vZGVsLlxuICAgKlxuICAgKiBTZXQtdXAgbWV0YWRhdGEgdXBkYXRlIGludGVydmFsIHRhc2sgZm9yIGxpdmUtbW9kZSBzdHJlYW1zLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGRhdGFcbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25BdWRpb1RyYWNrTG9hZGVkID0gZnVuY3Rpb24gb25BdWRpb1RyYWNrTG9hZGVkKGRhdGEpIHtcbiAgICBpZiAoZGF0YS5pZCA+PSB0aGlzLnRyYWNrcy5sZW5ndGgpIHtcbiAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuKCdJbnZhbGlkIGF1ZGlvIHRyYWNrIGlkOicsIGRhdGEuaWQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJhdWRpb1RyYWNrIFwiICsgZGF0YS5pZCArIFwiIGxvYWRlZFwiKTtcbiAgICB0aGlzLnRyYWNrc1tkYXRhLmlkXS5kZXRhaWxzID0gZGF0YS5kZXRhaWxzOyAvLyBjaGVjayBpZiBjdXJyZW50IHBsYXlsaXN0IGlzIGEgbGl2ZSBwbGF5bGlzdFxuICAgIC8vIGFuZCBpZiB3ZSBoYXZlIGFscmVhZHkgb3VyIHJlbG9hZCBpbnRlcnZhbCBzZXR1cFxuXG4gICAgaWYgKGRhdGEuZGV0YWlscy5saXZlICYmICF0aGlzLmhhc0ludGVydmFsKCkpIHtcbiAgICAgIC8vIGlmIGxpdmUgcGxheWxpc3Qgd2Ugd2lsbCBoYXZlIHRvIHJlbG9hZCBpdCBwZXJpb2RpY2FsbHlcbiAgICAgIC8vIHNldCByZWxvYWQgcGVyaW9kIHRvIHBsYXlsaXN0IHRhcmdldCBkdXJhdGlvblxuICAgICAgdmFyIHVwZGF0ZVBlcmlvZE1zID0gZGF0YS5kZXRhaWxzLnRhcmdldGR1cmF0aW9uICogMTAwMDtcbiAgICAgIHRoaXMuc2V0SW50ZXJ2YWwodXBkYXRlUGVyaW9kTXMpO1xuICAgIH1cblxuICAgIGlmICghZGF0YS5kZXRhaWxzLmxpdmUgJiYgdGhpcy5oYXNJbnRlcnZhbCgpKSB7XG4gICAgICAvLyBwbGF5bGlzdCBpcyBub3QgbGl2ZSBhbmQgdGltZXIgaXMgc2NoZWR1bGVkOiBjYW5jZWwgaXRcbiAgICAgIHRoaXMuY2xlYXJJbnRlcnZhbCgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVXBkYXRlIHRoZSBpbnRlcm5hbCBncm91cCBJRCB0byBhbnkgYXVkaW8tdHJhY2sgd2UgbWF5IGhhdmUgc2V0IG1hbnVhbGx5XG4gICAqIG9yIGJlY2F1c2Ugb2YgYSBmYWlsdXJlLWhhbmRsaW5nIGZhbGxiYWNrLlxuICAgKlxuICAgKiBRdWFsaXR5LWxldmVscyBzaG91bGQgdXBkYXRlIHRvIHRoYXQgZ3JvdXAgSUQgaW4gdGhpcyBjYXNlLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGRhdGFcbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25BdWRpb1RyYWNrU3dpdGNoZWQgPSBmdW5jdGlvbiBvbkF1ZGlvVHJhY2tTd2l0Y2hlZChkYXRhKSB7XG4gICAgdmFyIGF1ZGlvR3JvdXBJZCA9IHRoaXMudHJhY2tzW2RhdGEuaWRdLmdyb3VwSWQ7XG5cbiAgICBpZiAoYXVkaW9Hcm91cElkICYmIHRoaXMuYXVkaW9Hcm91cElkICE9PSBhdWRpb0dyb3VwSWQpIHtcbiAgICAgIHRoaXMuYXVkaW9Hcm91cElkID0gYXVkaW9Hcm91cElkO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogV2hlbiBhIGxldmVsIGdldHMgbG9hZGVkLCBpZiBpdCBoYXMgcmVkdW5kYW50IGF1ZGlvR3JvdXBJZHMgKGluIHRoZSBzYW1lIG9yZGluYWxpdHkgYXMgaXQncyByZWR1bmRhbnQgVVJMcylcbiAgICogd2UgYXJlIHNldHRpbmcgb3VyIGF1ZGlvLWdyb3VwIElEIGludGVybmFsbHkgdG8gdGhlIG9uZSBzZXQsIGlmIGl0IGlzIGRpZmZlcmVudCBmcm9tIHRoZSBncm91cCBJRCBjdXJyZW50bHkgc2V0LlxuICAgKlxuICAgKiBJZiBncm91cC1JRCBnb3QgdXBkYXRlLCB3ZSByZS1zZWxlY3QgdGhlIGFwcHJvcHJpYXRlIGF1ZGlvLXRyYWNrIHdpdGggdGhpcyBncm91cC1JRCBtYXRjaGluZyB0aGUgY3VycmVudGx5XG4gICAqIHNlbGVjdGVkIG9uZSAoYmFzZWQgb24gTkFNRSBwcm9wZXJ0eSkuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gZGF0YVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vbkxldmVsTG9hZGVkID0gZnVuY3Rpb24gb25MZXZlbExvYWRlZChkYXRhKSB7XG4gICAgdGhpcy5fc2VsZWN0QXVkaW9Hcm91cChkYXRhLmxldmVsKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIG5ldHdvcmsgZXJyb3JzIGxvYWRpbmcgYXVkaW8gdHJhY2sgbWFuaWZlc3RzXG4gICAqIGFuZCBhbHNvIHBhdXNpbmcgb24gYW55IG5ldHdvayBlcnJvcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7RXJyb3JFdmVudERhdGF9IGRhdGFcbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25FcnJvciA9IGZ1bmN0aW9uIG9uRXJyb3IoZGF0YSkge1xuICAgIC8vIE9ubHkgaGFuZGxlIG5ldHdvcmsgZXJyb3JzXG4gICAgaWYgKGRhdGEudHlwZSAhPT0gZXJyb3JzW1wiRXJyb3JUeXBlc1wiXS5ORVRXT1JLX0VSUk9SKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBJZiBmYXRhbCBuZXR3b3JrIGVycm9yLCBjYW5jZWwgdXBkYXRlIHRhc2tcblxuXG4gICAgaWYgKGRhdGEuZmF0YWwpIHtcbiAgICAgIHRoaXMuY2xlYXJJbnRlcnZhbCgpO1xuICAgIH0gLy8gSWYgbm90IGFuIGF1ZGlvLXRyYWNrIGxvYWRpbmcgZXJyb3IgZG9uJ3QgaGFuZGxlIGZ1cnRoZXJcblxuXG4gICAgaWYgKGRhdGEuZGV0YWlscyAhPT0gZXJyb3JzW1wiRXJyb3JEZXRhaWxzXCJdLkFVRElPX1RSQUNLX0xPQURfRVJST1IpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsb2dnZXJbXCJsb2dnZXJcIl0ud2FybignTmV0d29yayBmYWlsdXJlIG9uIGF1ZGlvLXRyYWNrIGlkOicsIGRhdGEuY29udGV4dC5pZCk7XG5cbiAgICB0aGlzLl9oYW5kbGVMb2FkRXJyb3IoKTtcbiAgfVxuICAvKipcbiAgICogQHR5cGUge0F1ZGlvVHJhY2tbXX0gQXVkaW8tdHJhY2sgbGlzdCB3ZSBvd25cbiAgICovXG4gIDtcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IG5ld0lkXG4gICAqL1xuICBfcHJvdG8uX3NldEF1ZGlvVHJhY2sgPSBmdW5jdGlvbiBfc2V0QXVkaW9UcmFjayhuZXdJZCkge1xuICAgIC8vIG5vb3Agb24gc2FtZSBhdWRpbyB0cmFjayBpZCBhcyBhbHJlYWR5IHNldFxuICAgIGlmICh0aGlzLl90cmFja0lkID09PSBuZXdJZCAmJiB0aGlzLnRyYWNrc1t0aGlzLl90cmFja0lkXS5kZXRhaWxzKSB7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0uZGVidWcoJ1NhbWUgaWQgYXMgY3VycmVudCBhdWRpby10cmFjayBwYXNzZWQsIGFuZCB0cmFjayBkZXRhaWxzIGF2YWlsYWJsZSAtPiBuby1vcCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gY2hlY2sgaWYgbGV2ZWwgaWR4IGlzIHZhbGlkXG5cblxuICAgIGlmIChuZXdJZCA8IDAgfHwgbmV3SWQgPj0gdGhpcy50cmFja3MubGVuZ3RoKSB7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ud2FybignSW52YWxpZCBpZCBwYXNzZWQgdG8gYXVkaW8tdHJhY2sgY29udHJvbGxlcicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBhdWRpb1RyYWNrID0gdGhpcy50cmFja3NbbmV3SWRdO1xuICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJOb3cgc3dpdGNoaW5nIHRvIGF1ZGlvLXRyYWNrIGluZGV4IFwiICsgbmV3SWQpOyAvLyBzdG9wcGluZyBsaXZlIHJlbG9hZGluZyB0aW1lciBpZiBhbnlcblxuICAgIHRoaXMuY2xlYXJJbnRlcnZhbCgpO1xuICAgIHRoaXMuX3RyYWNrSWQgPSBuZXdJZDtcbiAgICB2YXIgdXJsID0gYXVkaW9UcmFjay51cmwsXG4gICAgICAgIHR5cGUgPSBhdWRpb1RyYWNrLnR5cGUsXG4gICAgICAgIGlkID0gYXVkaW9UcmFjay5pZDtcbiAgICB0aGlzLmhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uQVVESU9fVFJBQ0tfU1dJVENISU5HLCB7XG4gICAgICBpZDogaWQsXG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KTtcblxuICAgIHRoaXMuX2xvYWRUcmFja0RldGFpbHNJZk5lZWRlZChhdWRpb1RyYWNrKTtcbiAgfVxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRvVGljayA9IGZ1bmN0aW9uIGRvVGljaygpIHtcbiAgICB0aGlzLl91cGRhdGVUcmFjayh0aGlzLl90cmFja0lkKTtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIGxldmVsSWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uX3NlbGVjdEF1ZGlvR3JvdXAgPSBmdW5jdGlvbiBfc2VsZWN0QXVkaW9Hcm91cChsZXZlbElkKSB7XG4gICAgdmFyIGxldmVsSW5mbyA9IHRoaXMuaGxzLmxldmVsc1tsZXZlbElkXTtcblxuICAgIGlmICghbGV2ZWxJbmZvIHx8ICFsZXZlbEluZm8uYXVkaW9Hcm91cElkcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBhdWRpb0dyb3VwSWQgPSBsZXZlbEluZm8uYXVkaW9Hcm91cElkc1tsZXZlbEluZm8udXJsSWRdO1xuXG4gICAgaWYgKHRoaXMuYXVkaW9Hcm91cElkICE9PSBhdWRpb0dyb3VwSWQpIHtcbiAgICAgIHRoaXMuYXVkaW9Hcm91cElkID0gYXVkaW9Hcm91cElkO1xuXG4gICAgICB0aGlzLl9zZWxlY3RJbml0aWFsQXVkaW9UcmFjaygpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogU2VsZWN0IGluaXRpYWwgdHJhY2tcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uX3NlbGVjdEluaXRpYWxBdWRpb1RyYWNrID0gZnVuY3Rpb24gX3NlbGVjdEluaXRpYWxBdWRpb1RyYWNrKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIHRyYWNrcyA9IHRoaXMudHJhY2tzO1xuXG4gICAgaWYgKCF0cmFja3MubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGN1cnJlbnRBdWRpb1RyYWNrID0gdGhpcy50cmFja3NbdGhpcy5fdHJhY2tJZF07XG4gICAgdmFyIG5hbWUgPSBudWxsO1xuXG4gICAgaWYgKGN1cnJlbnRBdWRpb1RyYWNrKSB7XG4gICAgICBuYW1lID0gY3VycmVudEF1ZGlvVHJhY2submFtZTtcbiAgICB9IC8vIFByZS1zZWxlY3QgZGVmYXVsdCB0cmFja3MgaWYgdGhlcmUgYXJlIGFueVxuXG5cbiAgICBpZiAodGhpcy5fc2VsZWN0RGVmYXVsdFRyYWNrKSB7XG4gICAgICB2YXIgZGVmYXVsdFRyYWNrcyA9IHRyYWNrcy5maWx0ZXIoZnVuY3Rpb24gKHRyYWNrKSB7XG4gICAgICAgIHJldHVybiB0cmFjay5kZWZhdWx0O1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChkZWZhdWx0VHJhY2tzLmxlbmd0aCkge1xuICAgICAgICB0cmFja3MgPSBkZWZhdWx0VHJhY2tzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLndhcm4oJ05vIGRlZmF1bHQgYXVkaW8gdHJhY2tzIGRlZmluZWQnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdHJhY2tGb3VuZCA9IGZhbHNlO1xuXG4gICAgdmFyIHRyYXZlcnNlVHJhY2tzID0gZnVuY3Rpb24gdHJhdmVyc2VUcmFja3MoKSB7XG4gICAgICAvLyBTZWxlY3QgdHJhY2sgd2l0aCByaWdodCBncm91cCBJRFxuICAgICAgdHJhY2tzLmZvckVhY2goZnVuY3Rpb24gKHRyYWNrKSB7XG4gICAgICAgIGlmICh0cmFja0ZvdW5kKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIFdlIG5lZWQgdG8gbWF0Y2ggdGhlIChwcmUtKXNlbGVjdGVkIGdyb3VwIElEXG4gICAgICAgIC8vIGFuZCB0aGUgTkFNRSBvZiB0aGUgY3VycmVudCB0cmFjay5cblxuXG4gICAgICAgIGlmICgoIV90aGlzMi5hdWRpb0dyb3VwSWQgfHwgdHJhY2suZ3JvdXBJZCA9PT0gX3RoaXMyLmF1ZGlvR3JvdXBJZCkgJiYgKCFuYW1lIHx8IG5hbWUgPT09IHRyYWNrLm5hbWUpKSB7XG4gICAgICAgICAgLy8gSWYgdGhlcmUgd2FzIGEgcHJldmlvdXMgdHJhY2sgdHJ5IHRvIHN0YXkgd2l0aCB0aGUgc2FtZSBgTkFNRWAuXG4gICAgICAgICAgLy8gSXQgc2hvdWxkIGJlIHVuaXF1ZSBhY3Jvc3MgdHJhY2tzIG9mIHNhbWUgZ3JvdXAsIGFuZCBjb25zaXN0ZW50IHRocm91Z2ggcmVkdW5kYW50IHRyYWNrIGdyb3Vwcy5cbiAgICAgICAgICBfdGhpczIuX3NldEF1ZGlvVHJhY2sodHJhY2suaWQpO1xuXG4gICAgICAgICAgdHJhY2tGb3VuZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICB0cmF2ZXJzZVRyYWNrcygpO1xuXG4gICAgaWYgKCF0cmFja0ZvdW5kKSB7XG4gICAgICBuYW1lID0gbnVsbDtcbiAgICAgIHRyYXZlcnNlVHJhY2tzKCk7XG4gICAgfVxuXG4gICAgaWYgKCF0cmFja0ZvdW5kKSB7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0uZXJyb3IoXCJObyB0cmFjayBmb3VuZCBmb3IgcnVubmluZyBhdWRpbyBncm91cC1JRDogXCIgKyB0aGlzLmF1ZGlvR3JvdXBJZCk7XG4gICAgICB0aGlzLmhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uRVJST1IsIHtcbiAgICAgICAgdHlwZTogZXJyb3JzW1wiRXJyb3JUeXBlc1wiXS5NRURJQV9FUlJPUixcbiAgICAgICAgZGV0YWlsczogZXJyb3JzW1wiRXJyb3JEZXRhaWxzXCJdLkFVRElPX1RSQUNLX0xPQURfRVJST1IsXG4gICAgICAgIGZhdGFsOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXVkaW9UcmFja30gYXVkaW9UcmFja1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uX25lZWRzVHJhY2tMb2FkaW5nID0gZnVuY3Rpb24gX25lZWRzVHJhY2tMb2FkaW5nKGF1ZGlvVHJhY2spIHtcbiAgICB2YXIgZGV0YWlscyA9IGF1ZGlvVHJhY2suZGV0YWlscyxcbiAgICAgICAgdXJsID0gYXVkaW9UcmFjay51cmw7XG5cbiAgICBpZiAoIWRldGFpbHMgfHwgZGV0YWlscy5saXZlKSB7XG4gICAgICAvLyBjaGVjayBpZiB3ZSBmYWNlIGFuIGF1ZGlvIHRyYWNrIGVtYmVkZGVkIGluIG1haW4gcGxheWxpc3QgKGF1ZGlvIHRyYWNrIHdpdGhvdXQgVVJJIGF0dHJpYnV0ZSlcbiAgICAgIHJldHVybiAhIXVybDtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXVkaW9UcmFja30gYXVkaW9UcmFja1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5fbG9hZFRyYWNrRGV0YWlsc0lmTmVlZGVkID0gZnVuY3Rpb24gX2xvYWRUcmFja0RldGFpbHNJZk5lZWRlZChhdWRpb1RyYWNrKSB7XG4gICAgaWYgKHRoaXMuX25lZWRzVHJhY2tMb2FkaW5nKGF1ZGlvVHJhY2spKSB7XG4gICAgICB2YXIgdXJsID0gYXVkaW9UcmFjay51cmwsXG4gICAgICAgICAgaWQgPSBhdWRpb1RyYWNrLmlkOyAvLyB0cmFjayBub3QgcmV0cmlldmVkIHlldCwgb3IgbGl2ZSBwbGF5bGlzdCB3ZSBuZWVkIHRvIChyZSlsb2FkIGl0XG5cbiAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJsb2FkaW5nIGF1ZGlvLXRyYWNrIHBsYXlsaXN0IGZvciBpZDogXCIgKyBpZCk7XG4gICAgICB0aGlzLmhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uQVVESU9fVFJBQ0tfTE9BRElORywge1xuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgaWQ6IGlkXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBuZXdJZFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5fdXBkYXRlVHJhY2sgPSBmdW5jdGlvbiBfdXBkYXRlVHJhY2sobmV3SWQpIHtcbiAgICAvLyBjaGVjayBpZiBsZXZlbCBpZHggaXMgdmFsaWRcbiAgICBpZiAobmV3SWQgPCAwIHx8IG5ld0lkID49IHRoaXMudHJhY2tzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gc3RvcHBpbmcgbGl2ZSByZWxvYWRpbmcgdGltZXIgaWYgYW55XG5cblxuICAgIHRoaXMuY2xlYXJJbnRlcnZhbCgpO1xuICAgIHRoaXMuX3RyYWNrSWQgPSBuZXdJZDtcbiAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKFwidHJ5aW5nIHRvIHVwZGF0ZSBhdWRpby10cmFjayBcIiArIG5ld0lkKTtcbiAgICB2YXIgYXVkaW9UcmFjayA9IHRoaXMudHJhY2tzW25ld0lkXTtcblxuICAgIHRoaXMuX2xvYWRUcmFja0RldGFpbHNJZk5lZWRlZChhdWRpb1RyYWNrKTtcbiAgfVxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uX2hhbmRsZUxvYWRFcnJvciA9IGZ1bmN0aW9uIF9oYW5kbGVMb2FkRXJyb3IoKSB7XG4gICAgLy8gRmlyc3QsIGxldCdzIGJsYWNrIGxpc3QgY3VycmVudCB0cmFjayBpZFxuICAgIHRoaXMudHJhY2tJZEJsYWNrbGlzdFt0aGlzLl90cmFja0lkXSA9IHRydWU7IC8vIExldCdzIHRyeSB0byBmYWxsIGJhY2sgb24gYSBmdW5jdGlvbmFsIGF1ZGlvLXRyYWNrIHdpdGggdGhlIHNhbWUgZ3JvdXAgSURcblxuICAgIHZhciBwcmV2aW91c0lkID0gdGhpcy5fdHJhY2tJZDtcbiAgICB2YXIgX3RoaXMkdHJhY2tzJHByZXZpb3VzID0gdGhpcy50cmFja3NbcHJldmlvdXNJZF0sXG4gICAgICAgIG5hbWUgPSBfdGhpcyR0cmFja3MkcHJldmlvdXMubmFtZSxcbiAgICAgICAgbGFuZ3VhZ2UgPSBfdGhpcyR0cmFja3MkcHJldmlvdXMubGFuZ3VhZ2UsXG4gICAgICAgIGdyb3VwSWQgPSBfdGhpcyR0cmFja3MkcHJldmlvdXMuZ3JvdXBJZDtcbiAgICBsb2dnZXJbXCJsb2dnZXJcIl0ud2FybihcIkxvYWRpbmcgZmFpbGVkIG9uIGF1ZGlvIHRyYWNrIGlkOiBcIiArIHByZXZpb3VzSWQgKyBcIiwgZ3JvdXAtaWQ6IFwiICsgZ3JvdXBJZCArIFwiLCBuYW1lL2xhbmd1YWdlOiBcXFwiXCIgKyBuYW1lICsgXCJcXFwiIC8gXFxcIlwiICsgbGFuZ3VhZ2UgKyBcIlxcXCJcIik7IC8vIEZpbmQgYSBub24tYmxhY2tsaXN0ZWQgdHJhY2sgSUQgd2l0aCB0aGUgc2FtZSBOQU1FXG4gICAgLy8gQXQgbGVhc3QgYSB0cmFjayB0aGF0IGlzIG5vdCBibGFja2xpc3RlZCwgdGh1cyBvbiBhbm90aGVyIGdyb3VwLUlELlxuXG4gICAgdmFyIG5ld0lkID0gcHJldmlvdXNJZDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50cmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLnRyYWNrSWRCbGFja2xpc3RbaV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBuZXdUcmFjayA9IHRoaXMudHJhY2tzW2ldO1xuXG4gICAgICBpZiAobmV3VHJhY2submFtZSA9PT0gbmFtZSkge1xuICAgICAgICBuZXdJZCA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuZXdJZCA9PT0gcHJldmlvdXNJZCkge1xuICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLndhcm4oXCJObyBmYWxsYmFjayBhdWRpby10cmFjayBmb3VuZCBmb3IgbmFtZS9sYW5ndWFnZTogXFxcIlwiICsgbmFtZSArIFwiXFxcIiAvIFxcXCJcIiArIGxhbmd1YWdlICsgXCJcXFwiXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coJ0F0dGVtcHRpbmcgYXVkaW8tdHJhY2sgZmFsbGJhY2sgaWQ6JywgbmV3SWQsICdncm91cC1pZDonLCB0aGlzLnRyYWNrc1tuZXdJZF0uZ3JvdXBJZCk7XG5cbiAgICB0aGlzLl9zZXRBdWRpb1RyYWNrKG5ld0lkKTtcbiAgfTtcblxuICBhdWRpb190cmFja19jb250cm9sbGVyX2NyZWF0ZUNsYXNzKEF1ZGlvVHJhY2tDb250cm9sbGVyLCBbe1xuICAgIGtleTogXCJhdWRpb1RyYWNrc1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMudHJhY2tzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVtYmVyfSBJbmRleCBpbnRvIGF1ZGlvLXRyYWNrcyBsaXN0IG9mIGN1cnJlbnRseSBzZWxlY3RlZCB0cmFjay5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImF1ZGlvVHJhY2tcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90cmFja0lkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZWxlY3QgY3VycmVudCB0cmFjayBieSBpbmRleFxuICAgICAqL1xuICAgICxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdJZCkge1xuICAgICAgdGhpcy5fc2V0QXVkaW9UcmFjayhuZXdJZCk7IC8vIElmIGF1ZGlvIHRyYWNrIGlzIHNlbGVjdGVkIGZyb20gQVBJIHRoZW4gZG9uJ3QgY2hvb3NlIGZyb20gdGhlIG1hbmlmZXN0IGRlZmF1bHQgdHJhY2tcblxuXG4gICAgICB0aGlzLl9zZWxlY3REZWZhdWx0VHJhY2sgPSBmYWxzZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQXVkaW9UcmFja0NvbnRyb2xsZXI7XG59KFRhc2tMb29wKTtcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgYXVkaW9fdHJhY2tfY29udHJvbGxlciA9IChhdWRpb190cmFja19jb250cm9sbGVyX0F1ZGlvVHJhY2tDb250cm9sbGVyKTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvbnRyb2xsZXIvYXVkaW8tc3RyZWFtLWNvbnRyb2xsZXIuanNcblxuXG5cblxuZnVuY3Rpb24gYXVkaW9fc3RyZWFtX2NvbnRyb2xsZXJfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIGF1ZGlvX3N0cmVhbV9jb250cm9sbGVyX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgYXVkaW9fc3RyZWFtX2NvbnRyb2xsZXJfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGF1ZGlvX3N0cmVhbV9jb250cm9sbGVyX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIGF1ZGlvX3N0cmVhbV9jb250cm9sbGVyX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qXG4gKiBBdWRpbyBTdHJlYW0gQ29udHJvbGxlclxuKi9cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG52YXIgYXVkaW9fc3RyZWFtX2NvbnRyb2xsZXJfd2luZG93ID0gd2luZG93LFxuICAgIGF1ZGlvX3N0cmVhbV9jb250cm9sbGVyX3BlcmZvcm1hbmNlID0gYXVkaW9fc3RyZWFtX2NvbnRyb2xsZXJfd2luZG93LnBlcmZvcm1hbmNlO1xudmFyIGF1ZGlvX3N0cmVhbV9jb250cm9sbGVyX1RJQ0tfSU5URVJWQUwgPSAxMDA7IC8vIGhvdyBvZnRlbiB0byB0aWNrIGluIG1zXG5cbnZhciBhdWRpb19zdHJlYW1fY29udHJvbGxlcl9BdWRpb1N0cmVhbUNvbnRyb2xsZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlU3RyZWFtQ29udHJvbGxlcikge1xuICBhdWRpb19zdHJlYW1fY29udHJvbGxlcl9pbmhlcml0c0xvb3NlKEF1ZGlvU3RyZWFtQ29udHJvbGxlciwgX0Jhc2VTdHJlYW1Db250cm9sbGVyKTtcblxuICBmdW5jdGlvbiBBdWRpb1N0cmVhbUNvbnRyb2xsZXIoaGxzLCBmcmFnbWVudFRyYWNrZXIpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9CYXNlU3RyZWFtQ29udHJvbGxlci5jYWxsKHRoaXMsIGhscywgZXZlbnRzW1wiZGVmYXVsdFwiXS5NRURJQV9BVFRBQ0hFRCwgZXZlbnRzW1wiZGVmYXVsdFwiXS5NRURJQV9ERVRBQ0hJTkcsIGV2ZW50c1tcImRlZmF1bHRcIl0uQVVESU9fVFJBQ0tTX1VQREFURUQsIGV2ZW50c1tcImRlZmF1bHRcIl0uQVVESU9fVFJBQ0tfU1dJVENISU5HLCBldmVudHNbXCJkZWZhdWx0XCJdLkFVRElPX1RSQUNLX0xPQURFRCwgZXZlbnRzW1wiZGVmYXVsdFwiXS5LRVlfTE9BREVELCBldmVudHNbXCJkZWZhdWx0XCJdLkZSQUdfTE9BREVELCBldmVudHNbXCJkZWZhdWx0XCJdLkZSQUdfUEFSU0lOR19JTklUX1NFR01FTlQsIGV2ZW50c1tcImRlZmF1bHRcIl0uRlJBR19QQVJTSU5HX0RBVEEsIGV2ZW50c1tcImRlZmF1bHRcIl0uRlJBR19QQVJTRUQsIGV2ZW50c1tcImRlZmF1bHRcIl0uRVJST1IsIGV2ZW50c1tcImRlZmF1bHRcIl0uQlVGRkVSX1JFU0VULCBldmVudHNbXCJkZWZhdWx0XCJdLkJVRkZFUl9DUkVBVEVELCBldmVudHNbXCJkZWZhdWx0XCJdLkJVRkZFUl9BUFBFTkRFRCwgZXZlbnRzW1wiZGVmYXVsdFwiXS5CVUZGRVJfRkxVU0hFRCwgZXZlbnRzW1wiZGVmYXVsdFwiXS5JTklUX1BUU19GT1VORCkgfHwgdGhpcztcbiAgICBfdGhpcy5mcmFnbWVudFRyYWNrZXIgPSBmcmFnbWVudFRyYWNrZXI7XG4gICAgX3RoaXMuY29uZmlnID0gaGxzLmNvbmZpZztcbiAgICBfdGhpcy5hdWRpb0NvZGVjU3dhcCA9IGZhbHNlO1xuICAgIF90aGlzLl9zdGF0ZSA9IFN0YXRlLlNUT1BQRUQ7XG4gICAgX3RoaXMuaW5pdFBUUyA9IFtdO1xuICAgIF90aGlzLndhaXRpbmdGcmFnbWVudCA9IG51bGw7XG4gICAgX3RoaXMudmlkZW9UcmFja0NDID0gbnVsbDtcbiAgICBfdGhpcy53YWl0aW5nVmlkZW9DQyA9IG51bGw7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9IC8vIFNpZ25hbCB0aGF0IHZpZGVvIFBUUyB3YXMgZm91bmRcblxuXG4gIHZhciBfcHJvdG8gPSBBdWRpb1N0cmVhbUNvbnRyb2xsZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5vbkluaXRQdHNGb3VuZCA9IGZ1bmN0aW9uIG9uSW5pdFB0c0ZvdW5kKGRhdGEpIHtcbiAgICB2YXIgZGVtdXhlcklkID0gZGF0YS5pZCxcbiAgICAgICAgY2MgPSBkYXRhLmZyYWcuY2MsXG4gICAgICAgIGluaXRQVFMgPSBkYXRhLmluaXRQVFM7XG5cbiAgICBpZiAoZGVtdXhlcklkID09PSAnbWFpbicpIHtcbiAgICAgIC8vIEFsd2F5cyB1cGRhdGUgdGhlIG5ldyBJTklUIFBUU1xuICAgICAgLy8gQ2FuIGNoYW5nZSBkdWUgbGV2ZWwgc3dpdGNoXG4gICAgICB0aGlzLmluaXRQVFNbY2NdID0gaW5pdFBUUztcbiAgICAgIHRoaXMudmlkZW9UcmFja0NDID0gY2M7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKFwiSW5pdFBUUyBmb3IgY2M6IFwiICsgY2MgKyBcIiBmb3VuZCBmcm9tIG1haW46IFwiICsgaW5pdFBUUyk7IC8vIElmIHdlIGFyZSB3YWl0aW5nIHdlIG5lZWQgdG8gZGVtdXgvcmVtdXggdGhlIHdhaXRpbmcgZnJhZ1xuICAgICAgLy8gV2l0aCB0aGUgbmV3IGluaXRQVFNcblxuICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IFN0YXRlLldBSVRJTkdfSU5JVF9QVFMpIHtcbiAgICAgICAgdGhpcy50aWNrKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zdGFydExvYWQgPSBmdW5jdGlvbiBzdGFydExvYWQoc3RhcnRQb3NpdGlvbikge1xuICAgIGlmICh0aGlzLnRyYWNrcykge1xuICAgICAgdmFyIGxhc3RDdXJyZW50VGltZSA9IHRoaXMubGFzdEN1cnJlbnRUaW1lO1xuICAgICAgdGhpcy5zdG9wTG9hZCgpO1xuICAgICAgdGhpcy5zZXRJbnRlcnZhbChhdWRpb19zdHJlYW1fY29udHJvbGxlcl9USUNLX0lOVEVSVkFMKTtcbiAgICAgIHRoaXMuZnJhZ0xvYWRFcnJvciA9IDA7XG5cbiAgICAgIGlmIChsYXN0Q3VycmVudFRpbWUgPiAwICYmIHN0YXJ0UG9zaXRpb24gPT09IC0xKSB7XG4gICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJhdWRpbzpvdmVycmlkZSBzdGFydFBvc2l0aW9uIHdpdGggbGFzdEN1cnJlbnRUaW1lIEBcIiArIGxhc3RDdXJyZW50VGltZS50b0ZpeGVkKDMpKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLklETEU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmxhc3RDdXJyZW50VGltZSA9IHRoaXMuc3RhcnRQb3NpdGlvbiA/IHRoaXMuc3RhcnRQb3NpdGlvbiA6IHN0YXJ0UG9zaXRpb247XG4gICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TVEFSVElORztcbiAgICAgIH1cblxuICAgICAgdGhpcy5uZXh0TG9hZFBvc2l0aW9uID0gdGhpcy5zdGFydFBvc2l0aW9uID0gdGhpcy5sYXN0Q3VycmVudFRpbWU7XG4gICAgICB0aGlzLnRpY2soKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGFydFBvc2l0aW9uID0gc3RhcnRQb3NpdGlvbjtcbiAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TVE9QUEVEO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZG9UaWNrID0gZnVuY3Rpb24gZG9UaWNrKCkge1xuICAgIHZhciBwb3MsXG4gICAgICAgIHRyYWNrLFxuICAgICAgICB0cmFja0RldGFpbHMsXG4gICAgICAgIGhscyA9IHRoaXMuaGxzLFxuICAgICAgICBjb25maWcgPSBobHMuY29uZmlnOyAvLyBsb2dnZXIubG9nKCdhdWRpb1N0cmVhbTonICsgdGhpcy5zdGF0ZSk7XG5cbiAgICBzd2l0Y2ggKHRoaXMuc3RhdGUpIHtcbiAgICAgIGNhc2UgU3RhdGUuRVJST1I6IC8vIGRvbid0IGRvIGFueXRoaW5nIGluIGVycm9yIHN0YXRlIHRvIGF2b2lkIGJyZWFraW5nIGZ1cnRoZXIgLi4uXG5cbiAgICAgIGNhc2UgU3RhdGUuUEFVU0VEOiAvLyBkb24ndCBkbyBhbnl0aGluZyBpbiBwYXVzZWQgc3RhdGUgZWl0aGVyIC4uLlxuXG4gICAgICBjYXNlIFN0YXRlLkJVRkZFUl9GTFVTSElORzpcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgU3RhdGUuU1RBUlRJTkc6XG4gICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5XQUlUSU5HX1RSQUNLO1xuICAgICAgICB0aGlzLmxvYWRlZG1ldGFkYXRhID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFN0YXRlLklETEU6XG4gICAgICAgIHZhciB0cmFja3MgPSB0aGlzLnRyYWNrczsgLy8gYXVkaW8gdHJhY2tzIG5vdCByZWNlaXZlZCA9PiBleGl0IGxvb3BcblxuICAgICAgICBpZiAoIXRyYWNrcykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IC8vIGlmIHZpZGVvIG5vdCBhdHRhY2hlZCBBTkRcbiAgICAgICAgLy8gc3RhcnQgZnJhZ21lbnQgYWxyZWFkeSByZXF1ZXN0ZWQgT1Igc3RhcnQgZnJhZyBwcmVmZXRjaCBkaXNhYmxlXG4gICAgICAgIC8vIGV4aXQgbG9vcFxuICAgICAgICAvLyA9PiBpZiBtZWRpYSBub3QgYXR0YWNoZWQgYnV0IHN0YXJ0IGZyYWcgcHJlZmV0Y2ggaXMgZW5hYmxlZCBhbmQgc3RhcnQgZnJhZyBub3QgcmVxdWVzdGVkIHlldCwgd2Ugd2lsbCBub3QgZXhpdCBsb29wXG5cblxuICAgICAgICBpZiAoIXRoaXMubWVkaWEgJiYgKHRoaXMuc3RhcnRGcmFnUmVxdWVzdGVkIHx8ICFjb25maWcuc3RhcnRGcmFnUHJlZmV0Y2gpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gLy8gZGV0ZXJtaW5lIG5leHQgY2FuZGlkYXRlIGZyYWdtZW50IHRvIGJlIGxvYWRlZCwgYmFzZWQgb24gY3VycmVudCBwb3NpdGlvbiBhbmRcbiAgICAgICAgLy8gIGVuZCBvZiBidWZmZXIgcG9zaXRpb25cbiAgICAgICAgLy8gaWYgd2UgaGF2ZSBub3QgeWV0IGxvYWRlZCBhbnkgZnJhZ21lbnQsIHN0YXJ0IGxvYWRpbmcgZnJvbSBzdGFydCBwb3NpdGlvblxuXG5cbiAgICAgICAgaWYgKHRoaXMubG9hZGVkbWV0YWRhdGEpIHtcbiAgICAgICAgICBwb3MgPSB0aGlzLm1lZGlhLmN1cnJlbnRUaW1lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBvcyA9IHRoaXMubmV4dExvYWRQb3NpdGlvbjtcblxuICAgICAgICAgIGlmIChwb3MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYUJ1ZmZlciA/IHRoaXMubWVkaWFCdWZmZXIgOiB0aGlzLm1lZGlhO1xuICAgICAgICB2YXIgdmlkZW9CdWZmZXIgPSB0aGlzLnZpZGVvQnVmZmVyID8gdGhpcy52aWRlb0J1ZmZlciA6IHRoaXMubWVkaWE7XG4gICAgICAgIHZhciBtYXhCdWZmZXJIb2xlID0gcG9zIDwgY29uZmlnLm1heEJ1ZmZlckhvbGUgPyBNYXRoLm1heChNQVhfU1RBUlRfR0FQX0pVTVAsIGNvbmZpZy5tYXhCdWZmZXJIb2xlKSA6IGNvbmZpZy5tYXhCdWZmZXJIb2xlO1xuICAgICAgICB2YXIgYnVmZmVySW5mbyA9IEJ1ZmZlckhlbHBlci5idWZmZXJJbmZvKG1lZGlhLCBwb3MsIG1heEJ1ZmZlckhvbGUpO1xuICAgICAgICB2YXIgbWFpbkJ1ZmZlckluZm8gPSBCdWZmZXJIZWxwZXIuYnVmZmVySW5mbyh2aWRlb0J1ZmZlciwgcG9zLCBtYXhCdWZmZXJIb2xlKTtcbiAgICAgICAgdmFyIGJ1ZmZlckxlbiA9IGJ1ZmZlckluZm8ubGVuO1xuICAgICAgICB2YXIgYnVmZmVyRW5kID0gYnVmZmVySW5mby5lbmQ7XG4gICAgICAgIHZhciBmcmFnUHJldmlvdXMgPSB0aGlzLmZyYWdQcmV2aW91czsgLy8gZW5zdXJlIHdlIGJ1ZmZlciBhdCBsZWFzdCBjb25maWcubWF4QnVmZmVyTGVuZ3RoIChkZWZhdWx0IDMwcykgb3IgY29uZmlnLm1heE1heEJ1ZmZlckxlbmd0aCAoZGVmYXVsdDogNjAwcylcbiAgICAgICAgLy8gd2hpY2hldmVyIGlzIHNtYWxsZXIuXG4gICAgICAgIC8vIG9uY2Ugd2UgcmVhY2ggdGhhdCB0aHJlc2hvbGQsIGRvbid0IGJ1ZmZlciBtb3JlIHRoYW4gdmlkZW8gKG1haW5CdWZmZXJJbmZvLmxlbilcblxuICAgICAgICB2YXIgbWF4Q29uZmlnQnVmZmVyID0gTWF0aC5taW4oY29uZmlnLm1heEJ1ZmZlckxlbmd0aCwgY29uZmlnLm1heE1heEJ1ZmZlckxlbmd0aCk7XG4gICAgICAgIHZhciBtYXhCdWZMZW4gPSBNYXRoLm1heChtYXhDb25maWdCdWZmZXIsIG1haW5CdWZmZXJJbmZvLmxlbik7XG4gICAgICAgIHZhciBhdWRpb1N3aXRjaCA9IHRoaXMuYXVkaW9Td2l0Y2g7XG4gICAgICAgIHZhciB0cmFja0lkID0gdGhpcy50cmFja0lkOyAvLyBpZiBidWZmZXIgbGVuZ3RoIGlzIGxlc3MgdGhhbiBtYXhCdWZMZW4gdHJ5IHRvIGxvYWQgYSBuZXcgZnJhZ21lbnRcblxuICAgICAgICBpZiAoKGJ1ZmZlckxlbiA8IG1heEJ1ZkxlbiB8fCBhdWRpb1N3aXRjaCkgJiYgdHJhY2tJZCA8IHRyYWNrcy5sZW5ndGgpIHtcbiAgICAgICAgICB0cmFja0RldGFpbHMgPSB0cmFja3NbdHJhY2tJZF0uZGV0YWlsczsgLy8gaWYgdHJhY2sgaW5mbyBub3QgcmV0cmlldmVkIHlldCwgc3dpdGNoIHN0YXRlIGFuZCB3YWl0IGZvciB0cmFjayByZXRyaWV2YWxcblxuICAgICAgICAgIGlmICh0eXBlb2YgdHJhY2tEZXRhaWxzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLldBSVRJTkdfVFJBQ0s7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWF1ZGlvU3dpdGNoICYmIHRoaXMuX3N0cmVhbUVuZGVkKGJ1ZmZlckluZm8sIHRyYWNrRGV0YWlscykpIHtcbiAgICAgICAgICAgIHRoaXMuaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5CVUZGRVJfRU9TLCB7XG4gICAgICAgICAgICAgIHR5cGU6ICdhdWRpbydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkVOREVEO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gLy8gZmluZCBmcmFnbWVudCBpbmRleCwgY29udGlndW91cyB3aXRoIGVuZCBvZiBidWZmZXIgcG9zaXRpb25cblxuXG4gICAgICAgICAgdmFyIGZyYWdtZW50cyA9IHRyYWNrRGV0YWlscy5mcmFnbWVudHMsXG4gICAgICAgICAgICAgIGZyYWdMZW4gPSBmcmFnbWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgICBzdGFydCA9IGZyYWdtZW50c1swXS5zdGFydCxcbiAgICAgICAgICAgICAgZW5kID0gZnJhZ21lbnRzW2ZyYWdMZW4gLSAxXS5zdGFydCArIGZyYWdtZW50c1tmcmFnTGVuIC0gMV0uZHVyYXRpb24sXG4gICAgICAgICAgICAgIGZyYWc7IC8vIFdoZW4gc3dpdGNoaW5nIGF1ZGlvIHRyYWNrLCByZWxvYWQgYXVkaW8gYXMgY2xvc2UgYXMgcG9zc2libGUgdG8gY3VycmVudFRpbWVcblxuICAgICAgICAgIGlmIChhdWRpb1N3aXRjaCkge1xuICAgICAgICAgICAgaWYgKHRyYWNrRGV0YWlscy5saXZlICYmICF0cmFja0RldGFpbHMuUFRTS25vd24pIHtcbiAgICAgICAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZygnc3dpdGNoaW5nIGF1ZGlvdHJhY2ssIGxpdmUgc3RyZWFtLCB1bmtub3duIFBUUyxsb2FkIGZpcnN0IGZyYWdtZW50Jyk7XG4gICAgICAgICAgICAgIGJ1ZmZlckVuZCA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBidWZmZXJFbmQgPSBwb3M7IC8vIGlmIGN1cnJlbnRUaW1lIChwb3MpIGlzIGxlc3MgdGhhbiBhbHQgYXVkaW8gcGxheWxpc3Qgc3RhcnQgdGltZSwgaXQgbWVhbnMgdGhhdCBhbHQgYXVkaW8gaXMgYWhlYWQgb2YgY3VycmVudFRpbWVcblxuICAgICAgICAgICAgICBpZiAodHJhY2tEZXRhaWxzLlBUU0tub3duICYmIHBvcyA8IHN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgZXZlcnl0aGluZyBpcyBidWZmZXJlZCBmcm9tIHBvcyB0byBzdGFydCBvciBpZiBhdWRpbyBidWZmZXIgdXBmcm9udCwgbGV0J3Mgc2VlayB0byBzdGFydFxuICAgICAgICAgICAgICAgIGlmIChidWZmZXJJbmZvLmVuZCA+IHN0YXJ0IHx8IGJ1ZmZlckluZm8ubmV4dFN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKCdhbHQgYXVkaW8gdHJhY2sgYWhlYWQgb2YgbWFpbiB0cmFjaywgc2VlayB0byBzdGFydCBvZiBhbHQgYXVkaW8gdHJhY2snKTtcbiAgICAgICAgICAgICAgICAgIHRoaXMubWVkaWEuY3VycmVudFRpbWUgPSBzdGFydCArIDAuMDU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodHJhY2tEZXRhaWxzLmluaXRTZWdtZW50ICYmICF0cmFja0RldGFpbHMuaW5pdFNlZ21lbnQuZGF0YSkge1xuICAgICAgICAgICAgZnJhZyA9IHRyYWNrRGV0YWlscy5pbml0U2VnbWVudDtcbiAgICAgICAgICB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgYnJhY2Utc3R5bGVcbiAgICAgICAgICAvLyBpZiBidWZmZXJFbmQgYmVmb3JlIHN0YXJ0IG9mIHBsYXlsaXN0LCBsb2FkIGZpcnN0IGZyYWdtZW50XG4gICAgICAgICAgZWxzZSBpZiAoYnVmZmVyRW5kIDw9IHN0YXJ0KSB7XG4gICAgICAgICAgICAgIGZyYWcgPSBmcmFnbWVudHNbMF07XG5cbiAgICAgICAgICAgICAgaWYgKHRoaXMudmlkZW9UcmFja0NDICE9PSBudWxsICYmIGZyYWcuY2MgIT09IHRoaXMudmlkZW9UcmFja0NDKSB7XG4gICAgICAgICAgICAgICAgLy8gRW5zdXJlIHdlIGZpbmQgYSBmcmFnbWVudCB3aGljaCBtYXRjaGVzIHRoZSBjb250aW51aXR5IG9mIHRoZSB2aWRlbyB0cmFja1xuICAgICAgICAgICAgICAgIGZyYWcgPSBmaW5kRnJhZ1dpdGhDQyhmcmFnbWVudHMsIHRoaXMudmlkZW9UcmFja0NDKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICh0cmFja0RldGFpbHMubGl2ZSAmJiBmcmFnLmxvYWRJZHggJiYgZnJhZy5sb2FkSWR4ID09PSB0aGlzLmZyYWdMb2FkSWR4KSB7XG4gICAgICAgICAgICAgICAgLy8gd2UganVzdCBsb2FkZWQgdGhpcyBmaXJzdCBmcmFnbWVudCwgYW5kIHdlIGFyZSBzdGlsbCBsYWdnaW5nIGJlaGluZCB0aGUgc3RhcnQgb2YgdGhlIGxpdmUgcGxheWxpc3RcbiAgICAgICAgICAgICAgICAvLyBsZXQncyBmb3JjZSBzZWVrIHRvIHN0YXJ0XG4gICAgICAgICAgICAgICAgdmFyIG5leHRCdWZmZXJlZCA9IGJ1ZmZlckluZm8ubmV4dFN0YXJ0ID8gYnVmZmVySW5mby5uZXh0U3RhcnQgOiBzdGFydDtcbiAgICAgICAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKFwibm8gYWx0IGF1ZGlvIGF2YWlsYWJsZSBAY3VycmVudFRpbWU6XCIgKyB0aGlzLm1lZGlhLmN1cnJlbnRUaW1lICsgXCIsIHNlZWtpbmcgQFwiICsgKG5leHRCdWZmZXJlZCArIDAuMDUpKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1lZGlhLmN1cnJlbnRUaW1lID0gbmV4dEJ1ZmZlcmVkICsgMC4wNTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBmb3VuZEZyYWc7XG4gICAgICAgICAgICAgIHZhciBtYXhGcmFnTG9va1VwVG9sZXJhbmNlID0gY29uZmlnLm1heEZyYWdMb29rVXBUb2xlcmFuY2U7XG4gICAgICAgICAgICAgIHZhciBmcmFnTmV4dCA9IGZyYWdQcmV2aW91cyA/IGZyYWdtZW50c1tmcmFnUHJldmlvdXMuc24gLSBmcmFnbWVudHNbMF0uc24gKyAxXSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICBpZiAoYnVmZmVyRW5kIDwgZW5kKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJ1ZmZlckVuZCA+IGVuZCAtIG1heEZyYWdMb29rVXBUb2xlcmFuY2UpIHtcbiAgICAgICAgICAgICAgICAgIG1heEZyYWdMb29rVXBUb2xlcmFuY2UgPSAwO1xuICAgICAgICAgICAgICAgIH0gLy8gUHJlZmVyIHRoZSBuZXh0IGZyYWdtZW50IGlmIGl0J3Mgd2l0aGluIHRvbGVyYW5jZVxuXG5cbiAgICAgICAgICAgICAgICBpZiAoZnJhZ05leHQgJiYgIWZyYWdtZW50V2l0aGluVG9sZXJhbmNlVGVzdChidWZmZXJFbmQsIG1heEZyYWdMb29rVXBUb2xlcmFuY2UsIGZyYWdOZXh0KSkge1xuICAgICAgICAgICAgICAgICAgZm91bmRGcmFnID0gZnJhZ05leHQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGZvdW5kRnJhZyA9IGJpbmFyeV9zZWFyY2guc2VhcmNoKGZyYWdtZW50cywgZnVuY3Rpb24gKGZyYWcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZyYWdtZW50V2l0aGluVG9sZXJhbmNlVGVzdChidWZmZXJFbmQsIG1heEZyYWdMb29rVXBUb2xlcmFuY2UsIGZyYWcpO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHJlYWNoIGVuZCBvZiBwbGF5bGlzdFxuICAgICAgICAgICAgICAgIGZvdW5kRnJhZyA9IGZyYWdtZW50c1tmcmFnTGVuIC0gMV07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoZm91bmRGcmFnKSB7XG4gICAgICAgICAgICAgICAgZnJhZyA9IGZvdW5kRnJhZztcbiAgICAgICAgICAgICAgICBzdGFydCA9IGZvdW5kRnJhZy5zdGFydDsgLy8gbG9nZ2VyLmxvZygnZmluZCBTTiBtYXRjaGluZyB3aXRoIHBvczonICsgIGJ1ZmZlckVuZCArICc6JyArIGZyYWcuc24pO1xuXG4gICAgICAgICAgICAgICAgaWYgKGZyYWdQcmV2aW91cyAmJiBmcmFnLmxldmVsID09PSBmcmFnUHJldmlvdXMubGV2ZWwgJiYgZnJhZy5zbiA9PT0gZnJhZ1ByZXZpb3VzLnNuKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoZnJhZy5zbiA8IHRyYWNrRGV0YWlscy5lbmRTTikge1xuICAgICAgICAgICAgICAgICAgICBmcmFnID0gZnJhZ21lbnRzW2ZyYWcuc24gKyAxIC0gdHJhY2tEZXRhaWxzLnN0YXJ0U05dO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmZyYWdtZW50VHJhY2tlci5nZXRTdGF0ZShmcmFnKSAhPT0gRnJhZ21lbnRTdGF0ZS5PSykge1xuICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJTTiBqdXN0IGxvYWRlZCwgbG9hZCBuZXh0IG9uZTogXCIgKyBmcmFnLnNuKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZnJhZyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZnJhZykge1xuICAgICAgICAgICAgLy8gbG9nZ2VyLmxvZygnICAgICAgbG9hZGluZyBmcmFnICcgKyBpICsnLHBvcy9idWZFbmQ6JyArIHBvcy50b0ZpeGVkKDMpICsgJy8nICsgYnVmZmVyRW5kLnRvRml4ZWQoMykpO1xuICAgICAgICAgICAgaWYgKGZyYWcuZW5jcnlwdGVkKSB7XG4gICAgICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJMb2FkaW5nIGtleSBmb3IgXCIgKyBmcmFnLnNuICsgXCIgb2YgW1wiICsgdHJhY2tEZXRhaWxzLnN0YXJ0U04gKyBcIiAsXCIgKyB0cmFja0RldGFpbHMuZW5kU04gKyBcIl0sdHJhY2sgXCIgKyB0cmFja0lkKTtcbiAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLktFWV9MT0FESU5HO1xuICAgICAgICAgICAgICBobHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLktFWV9MT0FESU5HLCB7XG4gICAgICAgICAgICAgICAgZnJhZzogZnJhZ1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIG9ubHkgbG9hZCBpZiBmcmFnbWVudCBpcyBub3QgbG9hZGVkIG9yIGlmIGluIGF1ZGlvIHN3aXRjaFxuICAgICAgICAgICAgICAvLyB3ZSBmb3JjZSBhIGZyYWcgbG9hZGluZyBpbiBhdWRpbyBzd2l0Y2ggYXMgZnJhZ21lbnQgdHJhY2tlciBtaWdodCBub3QgaGF2ZSBldmljdGVkIHByZXZpb3VzIGZyYWdzIGluIGNhc2Ugb2YgcXVpY2sgYXVkaW8gc3dpdGNoXG4gICAgICAgICAgICAgIHRoaXMuZnJhZ0N1cnJlbnQgPSBmcmFnO1xuXG4gICAgICAgICAgICAgIGlmIChhdWRpb1N3aXRjaCB8fCB0aGlzLmZyYWdtZW50VHJhY2tlci5nZXRTdGF0ZShmcmFnKSA9PT0gRnJhZ21lbnRTdGF0ZS5OT1RfTE9BREVEKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyhcIkxvYWRpbmcgXCIgKyBmcmFnLnNuICsgXCIsIGNjOiBcIiArIGZyYWcuY2MgKyBcIiBvZiBbXCIgKyB0cmFja0RldGFpbHMuc3RhcnRTTiArIFwiICxcIiArIHRyYWNrRGV0YWlscy5lbmRTTiArIFwiXSx0cmFjayBcIiArIHRyYWNrSWQgKyBcIiwgXCIgKyAodGhpcy5sb2FkZWRtZXRhZGF0YSA/ICdjdXJyZW50VGltZScgOiAnbmV4dExvYWRQb3NpdGlvbicpICsgXCI6IFwiICsgcG9zICsgXCIsIGJ1ZmZlckVuZDogXCIgKyBidWZmZXJFbmQudG9GaXhlZCgzKSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZnJhZy5zbiAhPT0gJ2luaXRTZWdtZW50Jykge1xuICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydEZyYWdSZXF1ZXN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChPYmplY3QobnVtYmVyW1wiaXNGaW5pdGVOdW1iZXJcIl0pKGZyYWcuc24pKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLm5leHRMb2FkUG9zaXRpb24gPSBmcmFnLnN0YXJ0ICsgZnJhZy5kdXJhdGlvbjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBobHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkZSQUdfTE9BRElORywge1xuICAgICAgICAgICAgICAgICAgZnJhZzogZnJhZ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5GUkFHX0xPQURJTkc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBTdGF0ZS5XQUlUSU5HX1RSQUNLOlxuICAgICAgICB0cmFjayA9IHRoaXMudHJhY2tzW3RoaXMudHJhY2tJZF07IC8vIGNoZWNrIGlmIHBsYXlsaXN0IGlzIGFscmVhZHkgbG9hZGVkXG5cbiAgICAgICAgaWYgKHRyYWNrICYmIHRyYWNrLmRldGFpbHMpIHtcbiAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSURMRTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFN0YXRlLkZSQUdfTE9BRElOR19XQUlUSU5HX1JFVFJZOlxuICAgICAgICB2YXIgbm93ID0gYXVkaW9fc3RyZWFtX2NvbnRyb2xsZXJfcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgIHZhciByZXRyeURhdGUgPSB0aGlzLnJldHJ5RGF0ZTtcbiAgICAgICAgbWVkaWEgPSB0aGlzLm1lZGlhO1xuICAgICAgICB2YXIgaXNTZWVraW5nID0gbWVkaWEgJiYgbWVkaWEuc2Vla2luZzsgLy8gaWYgY3VycmVudCB0aW1lIGlzIGd0IHRoYW4gcmV0cnlEYXRlLCBvciBpZiBtZWRpYSBzZWVraW5nIGxldCdzIHN3aXRjaCB0byBJRExFIHN0YXRlIHRvIHJldHJ5IGxvYWRpbmdcblxuICAgICAgICBpZiAoIXJldHJ5RGF0ZSB8fCBub3cgPj0gcmV0cnlEYXRlIHx8IGlzU2Vla2luZykge1xuICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coJ2F1ZGlvU3RyZWFtQ29udHJvbGxlcjogcmV0cnlEYXRlIHJlYWNoZWQsIHN3aXRjaCBiYWNrIHRvIElETEUgc3RhdGUnKTtcbiAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSURMRTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFN0YXRlLldBSVRJTkdfSU5JVF9QVFM6XG4gICAgICAgIC8vIEVuc3VyZSB3ZSBkb24ndCBnZXQgc3R1Y2sgaW4gdGhlIFdBSVRJTkdfSU5JVF9QVFMgc3RhdGUgaWYgdGhlIHdhaXRpbmcgZnJhZyBDQyBkb2Vzbid0IG1hdGNoIGFueSBpbml0UFRTXG4gICAgICAgIHZhciB3YWl0aW5nRnJhZyA9IHRoaXMud2FpdGluZ0ZyYWdtZW50O1xuXG4gICAgICAgIGlmICh3YWl0aW5nRnJhZykge1xuICAgICAgICAgIHZhciB3YWl0aW5nRnJhZ0NDID0gd2FpdGluZ0ZyYWcuZnJhZy5jYztcblxuICAgICAgICAgIGlmICh0aGlzLmluaXRQVFNbd2FpdGluZ0ZyYWdDQ10gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy53YWl0aW5nRnJhZ21lbnQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkZSQUdfTE9BRElORztcbiAgICAgICAgICAgIHRoaXMub25GcmFnTG9hZGVkKHdhaXRpbmdGcmFnKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMudmlkZW9UcmFja0NDICE9PSB0aGlzLndhaXRpbmdWaWRlb0NDKSB7XG4gICAgICAgICAgICAvLyBEcm9wIHdhaXRpbmcgZnJhZ21lbnQgaWYgdmlkZW9UcmFja0NDIGhhcyBjaGFuZ2VkIHNpbmNlIHdhaXRpbmdGcmFnbWVudCB3YXMgc2V0IGFuZCBpbml0UFRTIHdhcyBub3QgZm91bmRcbiAgICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJXYWl0aW5nIGZyYWdtZW50IGNjIChcIiArIHdhaXRpbmdGcmFnQ0MgKyBcIikgY2FuY2VsbGVkIGJlY2F1c2UgdmlkZW8gaXMgYXQgY2MgXCIgKyB0aGlzLnZpZGVvVHJhY2tDQyk7XG4gICAgICAgICAgICB0aGlzLmNsZWFyV2FpdGluZ0ZyYWdtZW50KCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIERyb3Agd2FpdGluZyBmcmFnbWVudCBpZiBhbiBlYXJsaWVyIGZyYWdtZW50IGlzIG5lZWRlZFxuICAgICAgICAgICAgdmFyIF9idWZmZXJJbmZvID0gQnVmZmVySGVscGVyLmJ1ZmZlckluZm8odGhpcy5tZWRpYUJ1ZmZlciwgdGhpcy5tZWRpYS5jdXJyZW50VGltZSwgY29uZmlnLm1heEJ1ZmZlckhvbGUpO1xuXG4gICAgICAgICAgICB2YXIgd2FpdGluZ0ZyYWdtZW50QXRQb3NpdGlvbiA9IGZyYWdtZW50V2l0aGluVG9sZXJhbmNlVGVzdChfYnVmZmVySW5mby5lbmQsIGNvbmZpZy5tYXhGcmFnTG9va1VwVG9sZXJhbmNlLCB3YWl0aW5nRnJhZy5mcmFnKTtcblxuICAgICAgICAgICAgaWYgKHdhaXRpbmdGcmFnbWVudEF0UG9zaXRpb24gPCAwKSB7XG4gICAgICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJXYWl0aW5nIGZyYWdtZW50IGNjIChcIiArIHdhaXRpbmdGcmFnQ0MgKyBcIikgQCBcIiArIHdhaXRpbmdGcmFnLmZyYWcuc3RhcnQgKyBcIiBjYW5jZWxsZWQgYmVjYXVzZSBhbm90aGVyIGZyYWdtZW50IGF0IFwiICsgX2J1ZmZlckluZm8uZW5kICsgXCIgaXMgbmVlZGVkXCIpO1xuICAgICAgICAgICAgICB0aGlzLmNsZWFyV2FpdGluZ0ZyYWdtZW50KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JRExFO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgU3RhdGUuU1RPUFBFRDpcbiAgICAgIGNhc2UgU3RhdGUuRlJBR19MT0FESU5HOlxuICAgICAgY2FzZSBTdGF0ZS5QQVJTSU5HOlxuICAgICAgY2FzZSBTdGF0ZS5QQVJTRUQ6XG4gICAgICBjYXNlIFN0YXRlLkVOREVEOlxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jbGVhcldhaXRpbmdGcmFnbWVudCA9IGZ1bmN0aW9uIGNsZWFyV2FpdGluZ0ZyYWdtZW50KCkge1xuICAgIHZhciB3YWl0aW5nRnJhZyA9IHRoaXMud2FpdGluZ0ZyYWdtZW50O1xuXG4gICAgaWYgKHdhaXRpbmdGcmFnKSB7XG4gICAgICB0aGlzLmZyYWdtZW50VHJhY2tlci5yZW1vdmVGcmFnbWVudCh3YWl0aW5nRnJhZy5mcmFnKTtcbiAgICAgIHRoaXMud2FpdGluZ0ZyYWdtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMud2FpdGluZ1ZpZGVvQ0MgPSBudWxsO1xuICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLklETEU7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vbk1lZGlhQXR0YWNoZWQgPSBmdW5jdGlvbiBvbk1lZGlhQXR0YWNoZWQoZGF0YSkge1xuICAgIHZhciBtZWRpYSA9IHRoaXMubWVkaWEgPSB0aGlzLm1lZGlhQnVmZmVyID0gZGF0YS5tZWRpYTtcbiAgICB0aGlzLm9udnNlZWtpbmcgPSB0aGlzLm9uTWVkaWFTZWVraW5nLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbnZlbmRlZCA9IHRoaXMub25NZWRpYUVuZGVkLmJpbmQodGhpcyk7XG4gICAgbWVkaWEuYWRkRXZlbnRMaXN0ZW5lcignc2Vla2luZycsIHRoaXMub252c2Vla2luZyk7XG4gICAgbWVkaWEuYWRkRXZlbnRMaXN0ZW5lcignZW5kZWQnLCB0aGlzLm9udmVuZGVkKTtcbiAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWc7XG5cbiAgICBpZiAodGhpcy50cmFja3MgJiYgY29uZmlnLmF1dG9TdGFydExvYWQpIHtcbiAgICAgIHRoaXMuc3RhcnRMb2FkKGNvbmZpZy5zdGFydFBvc2l0aW9uKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uTWVkaWFEZXRhY2hpbmcgPSBmdW5jdGlvbiBvbk1lZGlhRGV0YWNoaW5nKCkge1xuICAgIHZhciBtZWRpYSA9IHRoaXMubWVkaWE7XG5cbiAgICBpZiAobWVkaWEgJiYgbWVkaWEuZW5kZWQpIHtcbiAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coJ01TRSBkZXRhY2hpbmcgYW5kIHZpZGVvIGVuZGVkLCByZXNldCBzdGFydFBvc2l0aW9uJyk7XG4gICAgICB0aGlzLnN0YXJ0UG9zaXRpb24gPSB0aGlzLmxhc3RDdXJyZW50VGltZSA9IDA7XG4gICAgfSAvLyByZW1vdmUgdmlkZW8gbGlzdGVuZXJzXG5cblxuICAgIGlmIChtZWRpYSkge1xuICAgICAgbWVkaWEucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Vla2luZycsIHRoaXMub252c2Vla2luZyk7XG4gICAgICBtZWRpYS5yZW1vdmVFdmVudExpc3RlbmVyKCdlbmRlZCcsIHRoaXMub252ZW5kZWQpO1xuICAgICAgdGhpcy5vbnZzZWVraW5nID0gdGhpcy5vbnZzZWVrZWQgPSB0aGlzLm9udmVuZGVkID0gbnVsbDtcbiAgICB9XG5cbiAgICB0aGlzLm1lZGlhID0gdGhpcy5tZWRpYUJ1ZmZlciA9IHRoaXMudmlkZW9CdWZmZXIgPSBudWxsO1xuICAgIHRoaXMubG9hZGVkbWV0YWRhdGEgPSBmYWxzZTtcbiAgICB0aGlzLmZyYWdtZW50VHJhY2tlci5yZW1vdmVBbGxGcmFnbWVudHMoKTtcbiAgICB0aGlzLnN0b3BMb2FkKCk7XG4gIH07XG5cbiAgX3Byb3RvLm9uQXVkaW9UcmFja3NVcGRhdGVkID0gZnVuY3Rpb24gb25BdWRpb1RyYWNrc1VwZGF0ZWQoZGF0YSkge1xuICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coJ2F1ZGlvIHRyYWNrcyB1cGRhdGVkJyk7XG4gICAgdGhpcy50cmFja3MgPSBkYXRhLmF1ZGlvVHJhY2tzO1xuICB9O1xuXG4gIF9wcm90by5vbkF1ZGlvVHJhY2tTd2l0Y2hpbmcgPSBmdW5jdGlvbiBvbkF1ZGlvVHJhY2tTd2l0Y2hpbmcoZGF0YSkge1xuICAgIC8vIGlmIGFueSBVUkwgZm91bmQgb24gbmV3IGF1ZGlvIHRyYWNrLCBpdCBpcyBhbiBhbHRlcm5hdGUgYXVkaW8gdHJhY2tcbiAgICB2YXIgYWx0QXVkaW8gPSAhIWRhdGEudXJsO1xuICAgIHRoaXMudHJhY2tJZCA9IGRhdGEuaWQ7XG4gICAgdGhpcy5mcmFnQ3VycmVudCA9IG51bGw7XG4gICAgdGhpcy5jbGVhcldhaXRpbmdGcmFnbWVudCgpO1xuICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5QQVVTRUQ7IC8vIGRlc3Ryb3kgdXNlbGVzcyBkZW11eGVyIHdoZW4gc3dpdGNoaW5nIGF1ZGlvIHRvIG1haW5cblxuICAgIGlmICghYWx0QXVkaW8pIHtcbiAgICAgIGlmICh0aGlzLmRlbXV4ZXIpIHtcbiAgICAgICAgdGhpcy5kZW11eGVyLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5kZW11eGVyID0gbnVsbDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gc3dpdGNoaW5nIHRvIGF1ZGlvIHRyYWNrLCBzdGFydCB0aW1lciBpZiBub3QgYWxyZWFkeSBzdGFydGVkXG4gICAgICB0aGlzLnNldEludGVydmFsKGF1ZGlvX3N0cmVhbV9jb250cm9sbGVyX1RJQ0tfSU5URVJWQUwpO1xuICAgIH0gLy8gc2hvdWxkIHdlIHN3aXRjaCB0cmFja3MgP1xuXG5cbiAgICBpZiAoYWx0QXVkaW8pIHtcbiAgICAgIHRoaXMuYXVkaW9Td2l0Y2ggPSB0cnVlOyAvLyBtYWluIGF1ZGlvIHRyYWNrIGFyZSBoYW5kbGVkIGJ5IHN0cmVhbS1jb250cm9sbGVyLCBqdXN0IGRvIHNvbWV0aGluZyBpZiBzd2l0Y2hpbmcgdG8gYWx0IGF1ZGlvIHRyYWNrXG5cbiAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JRExFO1xuICAgIH1cblxuICAgIHRoaXMudGljaygpO1xuICB9O1xuXG4gIF9wcm90by5vbkF1ZGlvVHJhY2tMb2FkZWQgPSBmdW5jdGlvbiBvbkF1ZGlvVHJhY2tMb2FkZWQoZGF0YSkge1xuICAgIHZhciBuZXdEZXRhaWxzID0gZGF0YS5kZXRhaWxzLFxuICAgICAgICB0cmFja0lkID0gZGF0YS5pZCxcbiAgICAgICAgdHJhY2sgPSB0aGlzLnRyYWNrc1t0cmFja0lkXSxcbiAgICAgICAgY3VyRGV0YWlscyA9IHRyYWNrLmRldGFpbHMsXG4gICAgICAgIGR1cmF0aW9uID0gbmV3RGV0YWlscy50b3RhbGR1cmF0aW9uLFxuICAgICAgICBzbGlkaW5nID0gMDtcbiAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKFwidHJhY2sgXCIgKyB0cmFja0lkICsgXCIgbG9hZGVkIFtcIiArIG5ld0RldGFpbHMuc3RhcnRTTiArIFwiLFwiICsgbmV3RGV0YWlscy5lbmRTTiArIFwiXSxkdXJhdGlvbjpcIiArIGR1cmF0aW9uKTtcblxuICAgIGlmIChuZXdEZXRhaWxzLmxpdmUgfHwgY3VyRGV0YWlscyAmJiBjdXJEZXRhaWxzLmxpdmUpIHtcbiAgICAgIGlmIChjdXJEZXRhaWxzICYmIG5ld0RldGFpbHMuZnJhZ21lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gd2UgYWxyZWFkeSBoYXZlIGRldGFpbHMgZm9yIHRoYXQgbGV2ZWwsIG1lcmdlIHRoZW1cbiAgICAgICAgbWVyZ2VEZXRhaWxzKGN1ckRldGFpbHMsIG5ld0RldGFpbHMpO1xuICAgICAgICBzbGlkaW5nID0gbmV3RGV0YWlscy5mcmFnbWVudHNbMF0uc3RhcnQ7IC8vIFRPRE9cbiAgICAgICAgLy8gdGhpcy5saXZlU3luY1Bvc2l0aW9uID0gdGhpcy5jb21wdXRlTGl2ZVBvc2l0aW9uKHNsaWRpbmcsIGN1ckRldGFpbHMpO1xuXG4gICAgICAgIGlmIChuZXdEZXRhaWxzLlBUU0tub3duKSB7XG4gICAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyhcImxpdmUgYXVkaW8gcGxheWxpc3Qgc2xpZGluZzpcIiArIHNsaWRpbmcudG9GaXhlZCgzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZygnbGl2ZSBhdWRpbyBwbGF5bGlzdCAtIG91dGRhdGVkIFBUUywgdW5rbm93biBzbGlkaW5nJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld0RldGFpbHMuUFRTS25vd24gPSBmYWxzZTtcbiAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZygnbGl2ZSBhdWRpbyBwbGF5bGlzdCAtIGZpcnN0IGxvYWQsIHVua25vd24gc2xpZGluZycpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBuZXdEZXRhaWxzLlBUU0tub3duID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdHJhY2suZGV0YWlscyA9IG5ld0RldGFpbHM7IC8vIGNvbXB1dGUgc3RhcnQgcG9zaXRpb25cblxuICAgIGlmICghdGhpcy5zdGFydEZyYWdSZXF1ZXN0ZWQpIHtcbiAgICAgIC8vIGNvbXB1dGUgc3RhcnQgcG9zaXRpb24gaWYgc2V0IHRvIC0xLiB1c2UgaXQgc3RyYWlnaHQgYXdheSBpZiB2YWx1ZSBpcyBkZWZpbmVkXG4gICAgICBpZiAodGhpcy5zdGFydFBvc2l0aW9uID09PSAtMSkge1xuICAgICAgICAvLyBmaXJzdCwgY2hlY2sgaWYgc3RhcnQgdGltZSBvZmZzZXQgaGFzIGJlZW4gc2V0IGluIHBsYXlsaXN0LCBpZiB5ZXMsIHVzZSB0aGlzIHZhbHVlXG4gICAgICAgIHZhciBzdGFydFRpbWVPZmZzZXQgPSBuZXdEZXRhaWxzLnN0YXJ0VGltZU9mZnNldDtcblxuICAgICAgICBpZiAoT2JqZWN0KG51bWJlcltcImlzRmluaXRlTnVtYmVyXCJdKShzdGFydFRpbWVPZmZzZXQpKSB7XG4gICAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyhcInN0YXJ0IHRpbWUgb2Zmc2V0IGZvdW5kIGluIHBsYXlsaXN0LCBhZGp1c3Qgc3RhcnRQb3NpdGlvbiB0byBcIiArIHN0YXJ0VGltZU9mZnNldCk7XG4gICAgICAgICAgdGhpcy5zdGFydFBvc2l0aW9uID0gc3RhcnRUaW1lT2Zmc2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChuZXdEZXRhaWxzLmxpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRQb3NpdGlvbiA9IHRoaXMuY29tcHV0ZUxpdmVQb3NpdGlvbihzbGlkaW5nLCBuZXdEZXRhaWxzKTtcbiAgICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJjb21wdXRlIHN0YXJ0UG9zaXRpb24gZm9yIGF1ZGlvLXRyYWNrIHRvIFwiICsgdGhpcy5zdGFydFBvc2l0aW9uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdGFydFBvc2l0aW9uID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5uZXh0TG9hZFBvc2l0aW9uID0gdGhpcy5zdGFydFBvc2l0aW9uO1xuICAgIH0gLy8gb25seSBzd2l0Y2ggYmF0Y2sgdG8gSURMRSBzdGF0ZSBpZiB3ZSB3ZXJlIHdhaXRpbmcgZm9yIHRyYWNrIHRvIHN0YXJ0IGRvd25sb2FkaW5nIGEgbmV3IGZyYWdtZW50XG5cblxuICAgIGlmICh0aGlzLnN0YXRlID09PSBTdGF0ZS5XQUlUSU5HX1RSQUNLKSB7XG4gICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSURMRTtcbiAgICB9IC8vIHRyaWdnZXIgaGFuZGxlciByaWdodCBub3dcblxuXG4gICAgdGhpcy50aWNrKCk7XG4gIH07XG5cbiAgX3Byb3RvLm9uS2V5TG9hZGVkID0gZnVuY3Rpb24gb25LZXlMb2FkZWQoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUgPT09IFN0YXRlLktFWV9MT0FESU5HKSB7XG4gICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSURMRTtcbiAgICAgIHRoaXMudGljaygpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25GcmFnTG9hZGVkID0gZnVuY3Rpb24gb25GcmFnTG9hZGVkKGRhdGEpIHtcbiAgICB2YXIgZnJhZ0N1cnJlbnQgPSB0aGlzLmZyYWdDdXJyZW50LFxuICAgICAgICBmcmFnTG9hZGVkID0gZGF0YS5mcmFnO1xuXG4gICAgaWYgKHRoaXMuc3RhdGUgPT09IFN0YXRlLkZSQUdfTE9BRElORyAmJiBmcmFnQ3VycmVudCAmJiBmcmFnTG9hZGVkLnR5cGUgPT09ICdhdWRpbycgJiYgZnJhZ0xvYWRlZC5sZXZlbCA9PT0gZnJhZ0N1cnJlbnQubGV2ZWwgJiYgZnJhZ0xvYWRlZC5zbiA9PT0gZnJhZ0N1cnJlbnQuc24pIHtcbiAgICAgIHZhciB0cmFjayA9IHRoaXMudHJhY2tzW3RoaXMudHJhY2tJZF0sXG4gICAgICAgICAgZGV0YWlscyA9IHRyYWNrLmRldGFpbHMsXG4gICAgICAgICAgZHVyYXRpb24gPSBkZXRhaWxzLnRvdGFsZHVyYXRpb24sXG4gICAgICAgICAgdHJhY2tJZCA9IGZyYWdDdXJyZW50LmxldmVsLFxuICAgICAgICAgIHNuID0gZnJhZ0N1cnJlbnQuc24sXG4gICAgICAgICAgY2MgPSBmcmFnQ3VycmVudC5jYyxcbiAgICAgICAgICBhdWRpb0NvZGVjID0gdGhpcy5jb25maWcuZGVmYXVsdEF1ZGlvQ29kZWMgfHwgdHJhY2suYXVkaW9Db2RlYyB8fCAnbXA0YS40MC4yJyxcbiAgICAgICAgICBzdGF0cyA9IHRoaXMuc3RhdHMgPSBkYXRhLnN0YXRzO1xuXG4gICAgICBpZiAoc24gPT09ICdpbml0U2VnbWVudCcpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLklETEU7XG4gICAgICAgIHN0YXRzLnRwYXJzZWQgPSBzdGF0cy50YnVmZmVyZWQgPSBhdWRpb19zdHJlYW1fY29udHJvbGxlcl9wZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgZGV0YWlscy5pbml0U2VnbWVudC5kYXRhID0gZGF0YS5wYXlsb2FkO1xuICAgICAgICB0aGlzLmhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uRlJBR19CVUZGRVJFRCwge1xuICAgICAgICAgIHN0YXRzOiBzdGF0cyxcbiAgICAgICAgICBmcmFnOiBmcmFnQ3VycmVudCxcbiAgICAgICAgICBpZDogJ2F1ZGlvJ1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50aWNrKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuUEFSU0lORzsgLy8gdHJhbnNtdXggdGhlIE1QRUctVFMgZGF0YSB0byBJU08tQk1GRiBzZWdtZW50c1xuXG4gICAgICAgIHRoaXMuYXBwZW5kZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAoIXRoaXMuZGVtdXhlcikge1xuICAgICAgICAgIHRoaXMuZGVtdXhlciA9IG5ldyBkZW11eF9kZW11eGVyKHRoaXMuaGxzLCAnYXVkaW8nKTtcbiAgICAgICAgfSAvLyBDaGVjayBpZiB3ZSBoYXZlIHZpZGVvIGluaXRQVFNcbiAgICAgICAgLy8gSWYgbm90IHdlIG5lZWQgdG8gd2FpdCBmb3IgaXRcblxuXG4gICAgICAgIHZhciBpbml0UFRTID0gdGhpcy5pbml0UFRTW2NjXTtcbiAgICAgICAgdmFyIGluaXRTZWdtZW50RGF0YSA9IGRldGFpbHMuaW5pdFNlZ21lbnQgPyBkZXRhaWxzLmluaXRTZWdtZW50LmRhdGEgOiBbXTtcblxuICAgICAgICBpZiAoaW5pdFBUUyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhpcy5wZW5kaW5nQnVmZmVyaW5nID0gdHJ1ZTtcbiAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKFwiRGVtdXhpbmcgXCIgKyBzbiArIFwiIG9mIFtcIiArIGRldGFpbHMuc3RhcnRTTiArIFwiICxcIiArIGRldGFpbHMuZW5kU04gKyBcIl0sdHJhY2sgXCIgKyB0cmFja0lkKTsgLy8gdGltZSBPZmZzZXQgaXMgYWNjdXJhdGUgaWYgbGV2ZWwgUFRTIGlzIGtub3duLCBvciBpZiBwbGF5bGlzdCBpcyBub3Qgc2xpZGluZyAobm90IGxpdmUpXG5cbiAgICAgICAgICB2YXIgYWNjdXJhdGVUaW1lT2Zmc2V0ID0gZmFsc2U7IC8vIGRldGFpbHMuUFRTS25vd24gfHwgIWRldGFpbHMubGl2ZTtcblxuICAgICAgICAgIHRoaXMuZGVtdXhlci5wdXNoKGRhdGEucGF5bG9hZCwgaW5pdFNlZ21lbnREYXRhLCBhdWRpb0NvZGVjLCBudWxsLCBmcmFnQ3VycmVudCwgZHVyYXRpb24sIGFjY3VyYXRlVGltZU9mZnNldCwgaW5pdFBUUyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyhcIlVua25vd24gdmlkZW8gUFRTIGZvciBjYyBcIiArIGNjICsgXCIsIHdhaXRpbmcgZm9yIHZpZGVvIFBUUyBiZWZvcmUgZGVtdXhpbmcgYXVkaW8gZnJhZyBcIiArIHNuICsgXCIgb2YgW1wiICsgZGV0YWlscy5zdGFydFNOICsgXCIgLFwiICsgZGV0YWlscy5lbmRTTiArIFwiXSx0cmFjayBcIiArIHRyYWNrSWQpO1xuICAgICAgICAgIHRoaXMud2FpdGluZ0ZyYWdtZW50ID0gZGF0YTtcbiAgICAgICAgICB0aGlzLndhaXRpbmdWaWRlb0NDID0gdGhpcy52aWRlb1RyYWNrQ0M7XG4gICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLldBSVRJTkdfSU5JVF9QVFM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmZyYWdMb2FkRXJyb3IgPSAwO1xuICB9O1xuXG4gIF9wcm90by5vbkZyYWdQYXJzaW5nSW5pdFNlZ21lbnQgPSBmdW5jdGlvbiBvbkZyYWdQYXJzaW5nSW5pdFNlZ21lbnQoZGF0YSkge1xuICAgIHZhciBmcmFnQ3VycmVudCA9IHRoaXMuZnJhZ0N1cnJlbnQ7XG4gICAgdmFyIGZyYWdOZXcgPSBkYXRhLmZyYWc7XG5cbiAgICBpZiAoZnJhZ0N1cnJlbnQgJiYgZGF0YS5pZCA9PT0gJ2F1ZGlvJyAmJiBmcmFnTmV3LnNuID09PSBmcmFnQ3VycmVudC5zbiAmJiBmcmFnTmV3LmxldmVsID09PSBmcmFnQ3VycmVudC5sZXZlbCAmJiB0aGlzLnN0YXRlID09PSBTdGF0ZS5QQVJTSU5HKSB7XG4gICAgICB2YXIgdHJhY2tzID0gZGF0YS50cmFja3MsXG4gICAgICAgICAgdHJhY2s7IC8vIGRlbGV0ZSBhbnkgdmlkZW8gdHJhY2sgZm91bmQgb24gYXVkaW8gZGVtdXhlclxuXG4gICAgICBpZiAodHJhY2tzLnZpZGVvKSB7XG4gICAgICAgIGRlbGV0ZSB0cmFja3MudmlkZW87XG4gICAgICB9IC8vIGluY2x1ZGUgbGV2ZWxDb2RlYyBpbiBhdWRpbyBhbmQgdmlkZW8gdHJhY2tzXG5cblxuICAgICAgdHJhY2sgPSB0cmFja3MuYXVkaW87XG5cbiAgICAgIGlmICh0cmFjaykge1xuICAgICAgICB0cmFjay5sZXZlbENvZGVjID0gdHJhY2suY29kZWM7XG4gICAgICAgIHRyYWNrLmlkID0gZGF0YS5pZDtcbiAgICAgICAgdGhpcy5obHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkJVRkZFUl9DT0RFQ1MsIHRyYWNrcyk7XG4gICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJhdWRpbyB0cmFjazphdWRpbyxjb250YWluZXI6XCIgKyB0cmFjay5jb250YWluZXIgKyBcIixjb2RlY3NbbGV2ZWwvcGFyc2VkXT1bXCIgKyB0cmFjay5sZXZlbENvZGVjICsgXCIvXCIgKyB0cmFjay5jb2RlYyArIFwiXVwiKTtcbiAgICAgICAgdmFyIGluaXRTZWdtZW50ID0gdHJhY2suaW5pdFNlZ21lbnQ7XG5cbiAgICAgICAgaWYgKGluaXRTZWdtZW50KSB7XG4gICAgICAgICAgdmFyIGFwcGVuZE9iaiA9IHtcbiAgICAgICAgICAgIHR5cGU6ICdhdWRpbycsXG4gICAgICAgICAgICBkYXRhOiBpbml0U2VnbWVudCxcbiAgICAgICAgICAgIHBhcmVudDogJ2F1ZGlvJyxcbiAgICAgICAgICAgIGNvbnRlbnQ6ICdpbml0U2VnbWVudCdcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKHRoaXMuYXVkaW9Td2l0Y2gpIHtcbiAgICAgICAgICAgIHRoaXMucGVuZGluZ0RhdGEgPSBbYXBwZW5kT2JqXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hcHBlbmRlZCA9IHRydWU7IC8vIGFybSBwZW5kaW5nIEJ1ZmZlcmluZyBmbGFnIGJlZm9yZSBhcHBlbmRpbmcgYSBzZWdtZW50XG5cbiAgICAgICAgICAgIHRoaXMucGVuZGluZ0J1ZmZlcmluZyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uQlVGRkVSX0FQUEVORElORywgYXBwZW5kT2JqKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gdHJpZ2dlciBoYW5kbGVyIHJpZ2h0IG5vd1xuXG5cbiAgICAgICAgdGhpcy50aWNrKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vbkZyYWdQYXJzaW5nRGF0YSA9IGZ1bmN0aW9uIG9uRnJhZ1BhcnNpbmdEYXRhKGRhdGEpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBmcmFnQ3VycmVudCA9IHRoaXMuZnJhZ0N1cnJlbnQ7XG4gICAgdmFyIGZyYWdOZXcgPSBkYXRhLmZyYWc7XG5cbiAgICBpZiAoZnJhZ0N1cnJlbnQgJiYgZGF0YS5pZCA9PT0gJ2F1ZGlvJyAmJiBkYXRhLnR5cGUgPT09ICdhdWRpbycgJiYgZnJhZ05ldy5zbiA9PT0gZnJhZ0N1cnJlbnQuc24gJiYgZnJhZ05ldy5sZXZlbCA9PT0gZnJhZ0N1cnJlbnQubGV2ZWwgJiYgdGhpcy5zdGF0ZSA9PT0gU3RhdGUuUEFSU0lORykge1xuICAgICAgdmFyIHRyYWNrSWQgPSB0aGlzLnRyYWNrSWQsXG4gICAgICAgICAgdHJhY2sgPSB0aGlzLnRyYWNrc1t0cmFja0lkXSxcbiAgICAgICAgICBobHMgPSB0aGlzLmhscztcblxuICAgICAgaWYgKCFPYmplY3QobnVtYmVyW1wiaXNGaW5pdGVOdW1iZXJcIl0pKGRhdGEuZW5kUFRTKSkge1xuICAgICAgICBkYXRhLmVuZFBUUyA9IGRhdGEuc3RhcnRQVFMgKyBmcmFnQ3VycmVudC5kdXJhdGlvbjtcbiAgICAgICAgZGF0YS5lbmREVFMgPSBkYXRhLnN0YXJ0RFRTICsgZnJhZ0N1cnJlbnQuZHVyYXRpb247XG4gICAgICB9XG5cbiAgICAgIGZyYWdDdXJyZW50LmFkZEVsZW1lbnRhcnlTdHJlYW0oRWxlbWVudGFyeVN0cmVhbVR5cGVzLkFVRElPKTtcbiAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJwYXJzZWQgXCIgKyBkYXRhLnR5cGUgKyBcIixQVFM6W1wiICsgZGF0YS5zdGFydFBUUy50b0ZpeGVkKDMpICsgXCIsXCIgKyBkYXRhLmVuZFBUUy50b0ZpeGVkKDMpICsgXCJdLERUUzpbXCIgKyBkYXRhLnN0YXJ0RFRTLnRvRml4ZWQoMykgKyBcIi9cIiArIGRhdGEuZW5kRFRTLnRvRml4ZWQoMykgKyBcIl0sbmI6XCIgKyBkYXRhLm5iKTtcbiAgICAgIHVwZGF0ZUZyYWdQVFNEVFModHJhY2suZGV0YWlscywgZnJhZ0N1cnJlbnQsIGRhdGEuc3RhcnRQVFMsIGRhdGEuZW5kUFRTKTtcbiAgICAgIHZhciBtZWRpYSA9IHRoaXMubWVkaWE7XG4gICAgICB2YXIgYXBwZW5kT25CdWZmZXJGbHVzaCA9IGZhbHNlOyAvLyBPbmx5IGZsdXNoIGF1ZGlvIGZyb20gb2xkIGF1ZGlvIHRyYWNrcyB3aGVuIFBUUyBpcyBrbm93biBvbiBuZXcgYXVkaW8gdHJhY2tcblxuICAgICAgaWYgKHRoaXMuYXVkaW9Td2l0Y2gpIHtcbiAgICAgICAgaWYgKG1lZGlhICYmIG1lZGlhLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICB2YXIgY3VycmVudFRpbWUgPSBtZWRpYS5jdXJyZW50VGltZTtcbiAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKCdzd2l0Y2hpbmcgYXVkaW8gdHJhY2sgOiBjdXJyZW50VGltZTonICsgY3VycmVudFRpbWUpO1xuXG4gICAgICAgICAgaWYgKGN1cnJlbnRUaW1lID49IGRhdGEuc3RhcnRQVFMpIHtcbiAgICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coJ3N3aXRjaGluZyBhdWRpbyB0cmFjayA6IGZsdXNoaW5nIGFsbCBhdWRpbycpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkJVRkZFUl9GTFVTSElORztcbiAgICAgICAgICAgIGhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uQlVGRkVSX0ZMVVNISU5HLCB7XG4gICAgICAgICAgICAgIHN0YXJ0T2Zmc2V0OiAwLFxuICAgICAgICAgICAgICBlbmRPZmZzZXQ6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICAgICAgICAgICAgdHlwZTogJ2F1ZGlvJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhcHBlbmRPbkJ1ZmZlckZsdXNoID0gdHJ1ZTsgLy8gTGV0cyBhbm5vdW5jZSB0aGF0IHRoZSBpbml0aWFsIGF1ZGlvIHRyYWNrIHN3aXRjaCBmbHVzaCBvY2N1clxuXG4gICAgICAgICAgICB0aGlzLmF1ZGlvU3dpdGNoID0gZmFsc2U7XG4gICAgICAgICAgICBobHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkFVRElPX1RSQUNLX1NXSVRDSEVELCB7XG4gICAgICAgICAgICAgIGlkOiB0cmFja0lkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gTGV0cyBhbm5vdW5jZSB0aGF0IHRoZSBpbml0aWFsIGF1ZGlvIHRyYWNrIHN3aXRjaCBmbHVzaCBvY2N1clxuICAgICAgICAgIHRoaXMuYXVkaW9Td2l0Y2ggPSBmYWxzZTtcbiAgICAgICAgICBobHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkFVRElPX1RSQUNLX1NXSVRDSEVELCB7XG4gICAgICAgICAgICBpZDogdHJhY2tJZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBwZW5kaW5nRGF0YSA9IHRoaXMucGVuZGluZ0RhdGE7XG5cbiAgICAgIGlmICghcGVuZGluZ0RhdGEpIHtcbiAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLndhcm4oJ0FwcGFyZW50bHkgYXR0ZW1wdCB0byBlbnF1ZXVlIG1lZGlhIHBheWxvYWQgd2l0aG91dCBjb2RlYyBpbml0aWFsaXphdGlvbiBkYXRhIHVwZnJvbnQnKTtcbiAgICAgICAgaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5FUlJPUiwge1xuICAgICAgICAgIHR5cGU6IGVycm9yc1tcIkVycm9yVHlwZXNcIl0uTUVESUFfRVJST1IsXG4gICAgICAgICAgZGV0YWlsczogbnVsbCxcbiAgICAgICAgICBmYXRhbDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuYXVkaW9Td2l0Y2gpIHtcbiAgICAgICAgW2RhdGEuZGF0YTEsIGRhdGEuZGF0YTJdLmZvckVhY2goZnVuY3Rpb24gKGJ1ZmZlcikge1xuICAgICAgICAgIGlmIChidWZmZXIgJiYgYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgcGVuZGluZ0RhdGEucHVzaCh7XG4gICAgICAgICAgICAgIHR5cGU6IGRhdGEudHlwZSxcbiAgICAgICAgICAgICAgZGF0YTogYnVmZmVyLFxuICAgICAgICAgICAgICBwYXJlbnQ6ICdhdWRpbycsXG4gICAgICAgICAgICAgIGNvbnRlbnQ6ICdkYXRhJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIWFwcGVuZE9uQnVmZmVyRmx1c2ggJiYgcGVuZGluZ0RhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgcGVuZGluZ0RhdGEuZm9yRWFjaChmdW5jdGlvbiAoYXBwZW5kT2JqKSB7XG4gICAgICAgICAgICAvLyBvbmx5IGFwcGVuZCBpbiBQQVJTSU5HIHN0YXRlIChyYXRpb25hbGUgaXMgdGhhdCBhbiBhcHBlbmRpbmcgZXJyb3IgY291bGQgaGFwcGVuIHN5bmNocm9ub3VzbHkgb24gZmlyc3Qgc2VnbWVudCBhcHBlbmRpbmcpXG4gICAgICAgICAgICAvLyBpbiB0aGF0IGNhc2UgaXQgaXMgdXNlbGVzcyB0byBhcHBlbmQgZm9sbG93aW5nIHNlZ21lbnRzXG4gICAgICAgICAgICBpZiAoX3RoaXMyLnN0YXRlID09PSBTdGF0ZS5QQVJTSU5HKSB7XG4gICAgICAgICAgICAgIC8vIGFybSBwZW5kaW5nIEJ1ZmZlcmluZyBmbGFnIGJlZm9yZSBhcHBlbmRpbmcgYSBzZWdtZW50XG4gICAgICAgICAgICAgIF90aGlzMi5wZW5kaW5nQnVmZmVyaW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgICBfdGhpczIuaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5CVUZGRVJfQVBQRU5ESU5HLCBhcHBlbmRPYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMucGVuZGluZ0RhdGEgPSBbXTtcbiAgICAgICAgICB0aGlzLmFwcGVuZGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSAvLyB0cmlnZ2VyIGhhbmRsZXIgcmlnaHQgbm93XG5cblxuICAgICAgdGhpcy50aWNrKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vbkZyYWdQYXJzZWQgPSBmdW5jdGlvbiBvbkZyYWdQYXJzZWQoZGF0YSkge1xuICAgIHZhciBmcmFnQ3VycmVudCA9IHRoaXMuZnJhZ0N1cnJlbnQ7XG4gICAgdmFyIGZyYWdOZXcgPSBkYXRhLmZyYWc7XG5cbiAgICBpZiAoZnJhZ0N1cnJlbnQgJiYgZGF0YS5pZCA9PT0gJ2F1ZGlvJyAmJiBmcmFnTmV3LnNuID09PSBmcmFnQ3VycmVudC5zbiAmJiBmcmFnTmV3LmxldmVsID09PSBmcmFnQ3VycmVudC5sZXZlbCAmJiB0aGlzLnN0YXRlID09PSBTdGF0ZS5QQVJTSU5HKSB7XG4gICAgICB0aGlzLnN0YXRzLnRwYXJzZWQgPSBhdWRpb19zdHJlYW1fY29udHJvbGxlcl9wZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5QQVJTRUQ7XG5cbiAgICAgIHRoaXMuX2NoZWNrQXBwZW5kZWRQYXJzZWQoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uQnVmZmVyUmVzZXQgPSBmdW5jdGlvbiBvbkJ1ZmZlclJlc2V0KCkge1xuICAgIC8vIHJlc2V0IHJlZmVyZW5jZSB0byBzb3VyY2VidWZmZXJzXG4gICAgdGhpcy5tZWRpYUJ1ZmZlciA9IHRoaXMudmlkZW9CdWZmZXIgPSBudWxsO1xuICAgIHRoaXMubG9hZGVkbWV0YWRhdGEgPSBmYWxzZTtcbiAgfTtcblxuICBfcHJvdG8ub25CdWZmZXJDcmVhdGVkID0gZnVuY3Rpb24gb25CdWZmZXJDcmVhdGVkKGRhdGEpIHtcbiAgICB2YXIgYXVkaW9UcmFjayA9IGRhdGEudHJhY2tzLmF1ZGlvO1xuXG4gICAgaWYgKGF1ZGlvVHJhY2spIHtcbiAgICAgIHRoaXMubWVkaWFCdWZmZXIgPSBhdWRpb1RyYWNrLmJ1ZmZlcjtcbiAgICAgIHRoaXMubG9hZGVkbWV0YWRhdGEgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChkYXRhLnRyYWNrcy52aWRlbykge1xuICAgICAgdGhpcy52aWRlb0J1ZmZlciA9IGRhdGEudHJhY2tzLnZpZGVvLmJ1ZmZlcjtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uQnVmZmVyQXBwZW5kZWQgPSBmdW5jdGlvbiBvbkJ1ZmZlckFwcGVuZGVkKGRhdGEpIHtcbiAgICBpZiAoZGF0YS5wYXJlbnQgPT09ICdhdWRpbycpIHtcbiAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGU7XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gU3RhdGUuUEFSU0lORyB8fCBzdGF0ZSA9PT0gU3RhdGUuUEFSU0VEKSB7XG4gICAgICAgIC8vIGNoZWNrIGlmIGFsbCBidWZmZXJzIGhhdmUgYmVlbiBhcHBlbmRlZFxuICAgICAgICB0aGlzLnBlbmRpbmdCdWZmZXJpbmcgPSBkYXRhLnBlbmRpbmcgPiAwO1xuXG4gICAgICAgIHRoaXMuX2NoZWNrQXBwZW5kZWRQYXJzZWQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9jaGVja0FwcGVuZGVkUGFyc2VkID0gZnVuY3Rpb24gX2NoZWNrQXBwZW5kZWRQYXJzZWQoKSB7XG4gICAgLy8gdHJpZ2dlciBoYW5kbGVyIHJpZ2h0IG5vd1xuICAgIGlmICh0aGlzLnN0YXRlID09PSBTdGF0ZS5QQVJTRUQgJiYgKCF0aGlzLmFwcGVuZGVkIHx8ICF0aGlzLnBlbmRpbmdCdWZmZXJpbmcpKSB7XG4gICAgICB2YXIgZnJhZyA9IHRoaXMuZnJhZ0N1cnJlbnQsXG4gICAgICAgICAgc3RhdHMgPSB0aGlzLnN0YXRzLFxuICAgICAgICAgIGhscyA9IHRoaXMuaGxzO1xuXG4gICAgICBpZiAoZnJhZykge1xuICAgICAgICB0aGlzLmZyYWdQcmV2aW91cyA9IGZyYWc7XG4gICAgICAgIHN0YXRzLnRidWZmZXJlZCA9IGF1ZGlvX3N0cmVhbV9jb250cm9sbGVyX3BlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICBobHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkZSQUdfQlVGRkVSRUQsIHtcbiAgICAgICAgICBzdGF0czogc3RhdHMsXG4gICAgICAgICAgZnJhZzogZnJhZyxcbiAgICAgICAgICBpZDogJ2F1ZGlvJ1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYUJ1ZmZlciA/IHRoaXMubWVkaWFCdWZmZXIgOiB0aGlzLm1lZGlhO1xuXG4gICAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJhdWRpbyBidWZmZXJlZCA6IFwiICsgdGltZV9yYW5nZXMudG9TdHJpbmcobWVkaWEuYnVmZmVyZWQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmF1ZGlvU3dpdGNoICYmIHRoaXMuYXBwZW5kZWQpIHtcbiAgICAgICAgICB0aGlzLmF1ZGlvU3dpdGNoID0gZmFsc2U7XG4gICAgICAgICAgaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5BVURJT19UUkFDS19TV0lUQ0hFRCwge1xuICAgICAgICAgICAgaWQ6IHRoaXMudHJhY2tJZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLklETEU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudGljaygpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25FcnJvciA9IGZ1bmN0aW9uIG9uRXJyb3IoZGF0YSkge1xuICAgIHZhciBmcmFnID0gZGF0YS5mcmFnOyAvLyBkb24ndCBoYW5kbGUgZnJhZyBlcnJvciBub3QgcmVsYXRlZCB0byBhdWRpbyBmcmFnbWVudFxuXG4gICAgaWYgKGZyYWcgJiYgZnJhZy50eXBlICE9PSAnYXVkaW8nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3dpdGNoIChkYXRhLmRldGFpbHMpIHtcbiAgICAgIGNhc2UgZXJyb3JzW1wiRXJyb3JEZXRhaWxzXCJdLkZSQUdfTE9BRF9FUlJPUjpcbiAgICAgIGNhc2UgZXJyb3JzW1wiRXJyb3JEZXRhaWxzXCJdLkZSQUdfTE9BRF9USU1FT1VUOlxuICAgICAgICB2YXIgX2ZyYWcgPSBkYXRhLmZyYWc7IC8vIGRvbid0IGhhbmRsZSBmcmFnIGVycm9yIG5vdCByZWxhdGVkIHRvIGF1ZGlvIGZyYWdtZW50XG5cbiAgICAgICAgaWYgKF9mcmFnICYmIF9mcmFnLnR5cGUgIT09ICdhdWRpbycpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZGF0YS5mYXRhbCkge1xuICAgICAgICAgIHZhciBsb2FkRXJyb3IgPSB0aGlzLmZyYWdMb2FkRXJyb3I7XG5cbiAgICAgICAgICBpZiAobG9hZEVycm9yKSB7XG4gICAgICAgICAgICBsb2FkRXJyb3IrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbG9hZEVycm9yID0gMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWc7XG5cbiAgICAgICAgICBpZiAobG9hZEVycm9yIDw9IGNvbmZpZy5mcmFnTG9hZGluZ01heFJldHJ5KSB7XG4gICAgICAgICAgICB0aGlzLmZyYWdMb2FkRXJyb3IgPSBsb2FkRXJyb3I7IC8vIGV4cG9uZW50aWFsIGJhY2tvZmYgY2FwcGVkIHRvIGNvbmZpZy5mcmFnTG9hZGluZ01heFJldHJ5VGltZW91dFxuXG4gICAgICAgICAgICB2YXIgZGVsYXkgPSBNYXRoLm1pbihNYXRoLnBvdygyLCBsb2FkRXJyb3IgLSAxKSAqIGNvbmZpZy5mcmFnTG9hZGluZ1JldHJ5RGVsYXksIGNvbmZpZy5mcmFnTG9hZGluZ01heFJldHJ5VGltZW91dCk7XG4gICAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ud2FybihcIkF1ZGlvU3RyZWFtQ29udHJvbGxlcjogZnJhZyBsb2FkaW5nIGZhaWxlZCwgcmV0cnkgaW4gXCIgKyBkZWxheSArIFwiIG1zXCIpO1xuICAgICAgICAgICAgdGhpcy5yZXRyeURhdGUgPSBhdWRpb19zdHJlYW1fY29udHJvbGxlcl9wZXJmb3JtYW5jZS5ub3coKSArIGRlbGF5OyAvLyByZXRyeSBsb2FkaW5nIHN0YXRlXG5cbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5GUkFHX0xPQURJTkdfV0FJVElOR19SRVRSWTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmVycm9yKFwiQXVkaW9TdHJlYW1Db250cm9sbGVyOiBcIiArIGRhdGEuZGV0YWlscyArIFwiIHJlYWNoZXMgbWF4IHJldHJ5LCByZWRpc3BhdGNoIGFzIGZhdGFsIC4uLlwiKTsgLy8gc3dpdGNoIGVycm9yIHRvIGZhdGFsXG5cbiAgICAgICAgICAgIGRhdGEuZmF0YWwgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkVSUk9SO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIGVycm9yc1tcIkVycm9yRGV0YWlsc1wiXS5BVURJT19UUkFDS19MT0FEX0VSUk9SOlxuICAgICAgY2FzZSBlcnJvcnNbXCJFcnJvckRldGFpbHNcIl0uQVVESU9fVFJBQ0tfTE9BRF9USU1FT1VUOlxuICAgICAgY2FzZSBlcnJvcnNbXCJFcnJvckRldGFpbHNcIl0uS0VZX0xPQURfRVJST1I6XG4gICAgICBjYXNlIGVycm9yc1tcIkVycm9yRGV0YWlsc1wiXS5LRVlfTE9BRF9USU1FT1VUOlxuICAgICAgICAvLyAgd2hlbiBpbiBFUlJPUiBzdGF0ZSwgZG9uJ3Qgc3dpdGNoIGJhY2sgdG8gSURMRSBzdGF0ZSBpbiBjYXNlIGEgbm9uLWZhdGFsIGVycm9yIGlzIHJlY2VpdmVkXG4gICAgICAgIGlmICh0aGlzLnN0YXRlICE9PSBTdGF0ZS5FUlJPUikge1xuICAgICAgICAgIC8vIGlmIGZhdGFsIGVycm9yLCBzdG9wIHByb2Nlc3NpbmcsIG90aGVyd2lzZSBtb3ZlIHRvIElETEUgdG8gcmV0cnkgbG9hZGluZ1xuICAgICAgICAgIHRoaXMuc3RhdGUgPSBkYXRhLmZhdGFsID8gU3RhdGUuRVJST1IgOiBTdGF0ZS5JRExFO1xuICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuKFwiQXVkaW9TdHJlYW1Db250cm9sbGVyOiBcIiArIGRhdGEuZGV0YWlscyArIFwiIHdoaWxlIGxvYWRpbmcgZnJhZywgbm93IHN3aXRjaGluZyB0byBcIiArIHRoaXMuc3RhdGUgKyBcIiBzdGF0ZSAuLi5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBlcnJvcnNbXCJFcnJvckRldGFpbHNcIl0uQlVGRkVSX0ZVTExfRVJST1I6XG4gICAgICAgIC8vIGlmIGluIGFwcGVuZGluZyBzdGF0ZVxuICAgICAgICBpZiAoZGF0YS5wYXJlbnQgPT09ICdhdWRpbycgJiYgKHRoaXMuc3RhdGUgPT09IFN0YXRlLlBBUlNJTkcgfHwgdGhpcy5zdGF0ZSA9PT0gU3RhdGUuUEFSU0VEKSkge1xuICAgICAgICAgIHZhciBtZWRpYSA9IHRoaXMubWVkaWFCdWZmZXIsXG4gICAgICAgICAgICAgIGN1cnJlbnRUaW1lID0gdGhpcy5tZWRpYS5jdXJyZW50VGltZSxcbiAgICAgICAgICAgICAgbWVkaWFCdWZmZXJlZCA9IG1lZGlhICYmIEJ1ZmZlckhlbHBlci5pc0J1ZmZlcmVkKG1lZGlhLCBjdXJyZW50VGltZSkgJiYgQnVmZmVySGVscGVyLmlzQnVmZmVyZWQobWVkaWEsIGN1cnJlbnRUaW1lICsgMC41KTsgLy8gcmVkdWNlIG1heCBidWYgbGVuIGlmIGN1cnJlbnQgcG9zaXRpb24gaXMgYnVmZmVyZWRcblxuICAgICAgICAgIGlmIChtZWRpYUJ1ZmZlcmVkKSB7XG4gICAgICAgICAgICB2YXIgX2NvbmZpZyA9IHRoaXMuY29uZmlnO1xuXG4gICAgICAgICAgICBpZiAoX2NvbmZpZy5tYXhNYXhCdWZmZXJMZW5ndGggPj0gX2NvbmZpZy5tYXhCdWZmZXJMZW5ndGgpIHtcbiAgICAgICAgICAgICAgLy8gcmVkdWNlIG1heCBidWZmZXIgbGVuZ3RoIGFzIGl0IG1pZ2h0IGJlIHRvbyBoaWdoLiB3ZSBkbyB0aGlzIHRvIGF2b2lkIGxvb3AgZmx1c2hpbmcgLi4uXG4gICAgICAgICAgICAgIF9jb25maWcubWF4TWF4QnVmZmVyTGVuZ3RoIC89IDI7XG4gICAgICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuKFwiQXVkaW9TdHJlYW1Db250cm9sbGVyOiByZWR1Y2UgbWF4IGJ1ZmZlciBsZW5ndGggdG8gXCIgKyBfY29uZmlnLm1heE1heEJ1ZmZlckxlbmd0aCArIFwic1wiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLklETEU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGN1cnJlbnQgcG9zaXRpb24gaXMgbm90IGJ1ZmZlcmVkLCBidXQgYnJvd3NlciBpcyBzdGlsbCBjb21wbGFpbmluZyBhYm91dCBidWZmZXIgZnVsbCBlcnJvclxuICAgICAgICAgICAgLy8gdGhpcyBoYXBwZW5zIG9uIElFL0VkZ2UsIHJlZmVyIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlby1kZXYvaGxzLmpzL3B1bGwvNzA4XG4gICAgICAgICAgICAvLyBpbiB0aGF0IGNhc2UgZmx1c2ggdGhlIHdob2xlIGF1ZGlvIGJ1ZmZlciB0byByZWNvdmVyXG4gICAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ud2FybignQXVkaW9TdHJlYW1Db250cm9sbGVyOiBidWZmZXIgZnVsbCBlcnJvciBhbHNvIG1lZGlhLmN1cnJlbnRUaW1lIGlzIG5vdCBidWZmZXJlZCwgZmx1c2ggYXVkaW8gYnVmZmVyJyk7XG4gICAgICAgICAgICB0aGlzLmZyYWdDdXJyZW50ID0gbnVsbDsgLy8gZmx1c2ggZXZlcnl0aGluZ1xuXG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQlVGRkVSX0ZMVVNISU5HO1xuICAgICAgICAgICAgdGhpcy5obHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkJVRkZFUl9GTFVTSElORywge1xuICAgICAgICAgICAgICBzdGFydE9mZnNldDogMCxcbiAgICAgICAgICAgICAgZW5kT2Zmc2V0OiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXG4gICAgICAgICAgICAgIHR5cGU6ICdhdWRpbydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uQnVmZmVyRmx1c2hlZCA9IGZ1bmN0aW9uIG9uQnVmZmVyRmx1c2hlZCgpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBwZW5kaW5nRGF0YSA9IHRoaXMucGVuZGluZ0RhdGE7XG5cbiAgICBpZiAocGVuZGluZ0RhdGEgJiYgcGVuZGluZ0RhdGEubGVuZ3RoKSB7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKCdBdWRpb1N0cmVhbUNvbnRyb2xsZXI6IGFwcGVuZGluZyBwZW5kaW5nIGF1ZGlvIGRhdGEgYWZ0ZXIgYnVmZmVyIGZsdXNoZWQnKTtcbiAgICAgIHBlbmRpbmdEYXRhLmZvckVhY2goZnVuY3Rpb24gKGFwcGVuZE9iaikge1xuICAgICAgICBfdGhpczMuaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5CVUZGRVJfQVBQRU5ESU5HLCBhcHBlbmRPYmopO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmFwcGVuZGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMucGVuZGluZ0RhdGEgPSBbXTtcbiAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5QQVJTRUQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG1vdmUgdG8gSURMRSBvbmNlIGZsdXNoIGNvbXBsZXRlLiB0aGlzIHNob3VsZCB0cmlnZ2VyIG5ldyBmcmFnbWVudCBsb2FkaW5nXG4gICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSURMRTsgLy8gcmVzZXQgcmVmZXJlbmNlIHRvIGZyYWdcblxuICAgICAgdGhpcy5mcmFnUHJldmlvdXMgPSBudWxsO1xuICAgICAgdGhpcy50aWNrKCk7XG4gICAgfVxuICB9O1xuXG4gIGF1ZGlvX3N0cmVhbV9jb250cm9sbGVyX2NyZWF0ZUNsYXNzKEF1ZGlvU3RyZWFtQ29udHJvbGxlciwgW3tcbiAgICBrZXk6IFwic3RhdGVcIixcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXh0U3RhdGUpIHtcbiAgICAgIGlmICh0aGlzLnN0YXRlICE9PSBuZXh0U3RhdGUpIHtcbiAgICAgICAgdmFyIHByZXZpb3VzU3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyhcImF1ZGlvIHN0cmVhbTpcIiArIHByZXZpb3VzU3RhdGUgKyBcIi0+XCIgKyBuZXh0U3RhdGUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc3RhdGU7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEF1ZGlvU3RyZWFtQ29udHJvbGxlcjtcbn0oYmFzZV9zdHJlYW1fY29udHJvbGxlcl9CYXNlU3RyZWFtQ29udHJvbGxlcik7XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGF1ZGlvX3N0cmVhbV9jb250cm9sbGVyID0gKGF1ZGlvX3N0cmVhbV9jb250cm9sbGVyX0F1ZGlvU3RyZWFtQ29udHJvbGxlcik7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy91dGlscy92dHRjdWUuanNcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMgdnR0LmpzIENvbnRyaWJ1dG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHZ0dGN1ZSA9ICgoZnVuY3Rpb24gKCkge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LlZUVEN1ZSkge1xuICAgIHJldHVybiB3aW5kb3cuVlRUQ3VlO1xuICB9XG5cbiAgdmFyIGF1dG9LZXl3b3JkID0gJ2F1dG8nO1xuICB2YXIgZGlyZWN0aW9uU2V0dGluZyA9IHtcbiAgICAnJzogdHJ1ZSxcbiAgICBscjogdHJ1ZSxcbiAgICBybDogdHJ1ZVxuICB9O1xuICB2YXIgYWxpZ25TZXR0aW5nID0ge1xuICAgIHN0YXJ0OiB0cnVlLFxuICAgIG1pZGRsZTogdHJ1ZSxcbiAgICBlbmQ6IHRydWUsXG4gICAgbGVmdDogdHJ1ZSxcbiAgICByaWdodDogdHJ1ZVxuICB9O1xuXG4gIGZ1bmN0aW9uIGZpbmREaXJlY3Rpb25TZXR0aW5nKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgZGlyID0gZGlyZWN0aW9uU2V0dGluZ1t2YWx1ZS50b0xvd2VyQ2FzZSgpXTtcbiAgICByZXR1cm4gZGlyID8gdmFsdWUudG9Mb3dlckNhc2UoKSA6IGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gZmluZEFsaWduU2V0dGluZyh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGFsaWduID0gYWxpZ25TZXR0aW5nW3ZhbHVlLnRvTG93ZXJDYXNlKCldO1xuICAgIHJldHVybiBhbGlnbiA/IHZhbHVlLnRvTG93ZXJDYXNlKCkgOiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dGVuZChvYmopIHtcbiAgICB2YXIgaSA9IDE7XG5cbiAgICBmb3IgKDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNvYmogPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIHAgaW4gY29iaikge1xuICAgICAgICBvYmpbcF0gPSBjb2JqW3BdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBmdW5jdGlvbiBWVFRDdWUoc3RhcnRUaW1lLCBlbmRUaW1lLCB0ZXh0KSB7XG4gICAgdmFyIGN1ZSA9IHRoaXM7XG4gICAgdmFyIGJhc2VPYmogPSB7fTtcbiAgICBiYXNlT2JqLmVudW1lcmFibGUgPSB0cnVlO1xuICAgIC8qKlxuICAgICAqIFNoaW0gaW1wbGVtZW50YXRpb24gc3BlY2lmaWMgcHJvcGVydGllcy4gVGhlc2UgcHJvcGVydGllcyBhcmUgbm90IGluXG4gICAgICogdGhlIHNwZWMuXG4gICAgICovXG4gICAgLy8gTGV0cyB1cyBrbm93IHdoZW4gdGhlIFZUVEN1ZSdzIGRhdGEgaGFzIGNoYW5nZWQgaW4gc3VjaCBhIHdheSB0aGF0IHdlIG5lZWRcbiAgICAvLyB0byByZWNvbXB1dGUgaXRzIGRpc3BsYXkgc3RhdGUuIFRoaXMgbGV0cyB1cyBjb21wdXRlIGl0cyBkaXNwbGF5IHN0YXRlXG4gICAgLy8gbGF6aWx5LlxuXG4gICAgY3VlLmhhc0JlZW5SZXNldCA9IGZhbHNlO1xuICAgIC8qKlxuICAgICAqIFZUVEN1ZSBhbmQgVGV4dFRyYWNrQ3VlIHByb3BlcnRpZXNcbiAgICAgKiBodHRwOi8vZGV2LnczLm9yZy9odG1sNS93ZWJ2dHQvI3Z0dGN1ZS1pbnRlcmZhY2VcbiAgICAgKi9cblxuICAgIHZhciBfaWQgPSAnJztcbiAgICB2YXIgX3BhdXNlT25FeGl0ID0gZmFsc2U7XG4gICAgdmFyIF9zdGFydFRpbWUgPSBzdGFydFRpbWU7XG4gICAgdmFyIF9lbmRUaW1lID0gZW5kVGltZTtcbiAgICB2YXIgX3RleHQgPSB0ZXh0O1xuICAgIHZhciBfcmVnaW9uID0gbnVsbDtcbiAgICB2YXIgX3ZlcnRpY2FsID0gJyc7XG4gICAgdmFyIF9zbmFwVG9MaW5lcyA9IHRydWU7XG4gICAgdmFyIF9saW5lID0gJ2F1dG8nO1xuICAgIHZhciBfbGluZUFsaWduID0gJ3N0YXJ0JztcbiAgICB2YXIgX3Bvc2l0aW9uID0gNTA7XG4gICAgdmFyIF9wb3NpdGlvbkFsaWduID0gJ21pZGRsZSc7XG4gICAgdmFyIF9zaXplID0gNTA7XG4gICAgdmFyIF9hbGlnbiA9ICdtaWRkbGUnO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdWUsICdpZCcsIGV4dGVuZCh7fSwgYmFzZU9iaiwge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfaWQ7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgX2lkID0gJycgKyB2YWx1ZTtcbiAgICAgIH1cbiAgICB9KSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN1ZSwgJ3BhdXNlT25FeGl0JywgZXh0ZW5kKHt9LCBiYXNlT2JqLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9wYXVzZU9uRXhpdDtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICBfcGF1c2VPbkV4aXQgPSAhIXZhbHVlO1xuICAgICAgfVxuICAgIH0pKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3VlLCAnc3RhcnRUaW1lJywgZXh0ZW5kKHt9LCBiYXNlT2JqLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdGFydFRpbWU7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdGFydCB0aW1lIG11c3QgYmUgc2V0IHRvIGEgbnVtYmVyLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3N0YXJ0VGltZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmhhc0JlZW5SZXNldCA9IHRydWU7XG4gICAgICB9XG4gICAgfSkpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdWUsICdlbmRUaW1lJywgZXh0ZW5kKHt9LCBiYXNlT2JqLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9lbmRUaW1lO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRW5kIHRpbWUgbXVzdCBiZSBzZXQgdG8gYSBudW1iZXIuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBfZW5kVGltZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmhhc0JlZW5SZXNldCA9IHRydWU7XG4gICAgICB9XG4gICAgfSkpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdWUsICd0ZXh0JywgZXh0ZW5kKHt9LCBiYXNlT2JqLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF90ZXh0O1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgIF90ZXh0ID0gJycgKyB2YWx1ZTtcbiAgICAgICAgdGhpcy5oYXNCZWVuUmVzZXQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3VlLCAncmVnaW9uJywgZXh0ZW5kKHt9LCBiYXNlT2JqLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9yZWdpb247XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgX3JlZ2lvbiA9IHZhbHVlO1xuICAgICAgICB0aGlzLmhhc0JlZW5SZXNldCA9IHRydWU7XG4gICAgICB9XG4gICAgfSkpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdWUsICd2ZXJ0aWNhbCcsIGV4dGVuZCh7fSwgYmFzZU9iaiwge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfdmVydGljYWw7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgdmFyIHNldHRpbmcgPSBmaW5kRGlyZWN0aW9uU2V0dGluZyh2YWx1ZSk7IC8vIEhhdmUgdG8gY2hlY2sgZm9yIGZhbHNlIGJlY2F1c2UgdGhlIHNldHRpbmcgYW4gYmUgYW4gZW1wdHkgc3RyaW5nLlxuXG4gICAgICAgIGlmIChzZXR0aW5nID09PSBmYWxzZSkge1xuICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignQW4gaW52YWxpZCBvciBpbGxlZ2FsIHN0cmluZyB3YXMgc3BlY2lmaWVkLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3ZlcnRpY2FsID0gc2V0dGluZztcbiAgICAgICAgdGhpcy5oYXNCZWVuUmVzZXQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3VlLCAnc25hcFRvTGluZXMnLCBleHRlbmQoe30sIGJhc2VPYmosIHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX3NuYXBUb0xpbmVzO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgIF9zbmFwVG9MaW5lcyA9ICEhdmFsdWU7XG4gICAgICAgIHRoaXMuaGFzQmVlblJlc2V0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN1ZSwgJ2xpbmUnLCBleHRlbmQoe30sIGJhc2VPYmosIHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX2xpbmU7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicgJiYgdmFsdWUgIT09IGF1dG9LZXl3b3JkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdBbiBpbnZhbGlkIG51bWJlciBvciBpbGxlZ2FsIHN0cmluZyB3YXMgc3BlY2lmaWVkLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgX2xpbmUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5oYXNCZWVuUmVzZXQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3VlLCAnbGluZUFsaWduJywgZXh0ZW5kKHt9LCBiYXNlT2JqLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9saW5lQWxpZ247XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgdmFyIHNldHRpbmcgPSBmaW5kQWxpZ25TZXR0aW5nKHZhbHVlKTtcblxuICAgICAgICBpZiAoIXNldHRpbmcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ0FuIGludmFsaWQgb3IgaWxsZWdhbCBzdHJpbmcgd2FzIHNwZWNpZmllZC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9saW5lQWxpZ24gPSBzZXR0aW5nO1xuICAgICAgICB0aGlzLmhhc0JlZW5SZXNldCA9IHRydWU7XG4gICAgICB9XG4gICAgfSkpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdWUsICdwb3NpdGlvbicsIGV4dGVuZCh7fSwgYmFzZU9iaiwge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfcG9zaXRpb247XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlIDwgMCB8fCB2YWx1ZSA+IDEwMCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUG9zaXRpb24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEwMC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9wb3NpdGlvbiA9IHZhbHVlO1xuICAgICAgICB0aGlzLmhhc0JlZW5SZXNldCA9IHRydWU7XG4gICAgICB9XG4gICAgfSkpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdWUsICdwb3NpdGlvbkFsaWduJywgZXh0ZW5kKHt9LCBiYXNlT2JqLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9wb3NpdGlvbkFsaWduO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgIHZhciBzZXR0aW5nID0gZmluZEFsaWduU2V0dGluZyh2YWx1ZSk7XG5cbiAgICAgICAgaWYgKCFzZXR0aW5nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdBbiBpbnZhbGlkIG9yIGlsbGVnYWwgc3RyaW5nIHdhcyBzcGVjaWZpZWQuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBfcG9zaXRpb25BbGlnbiA9IHNldHRpbmc7XG4gICAgICAgIHRoaXMuaGFzQmVlblJlc2V0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN1ZSwgJ3NpemUnLCBleHRlbmQoe30sIGJhc2VPYmosIHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX3NpemU7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlIDwgMCB8fCB2YWx1ZSA+IDEwMCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU2l6ZSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMTAwLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3NpemUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5oYXNCZWVuUmVzZXQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3VlLCAnYWxpZ24nLCBleHRlbmQoe30sIGJhc2VPYmosIHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX2FsaWduO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgIHZhciBzZXR0aW5nID0gZmluZEFsaWduU2V0dGluZyh2YWx1ZSk7XG5cbiAgICAgICAgaWYgKCFzZXR0aW5nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdBbiBpbnZhbGlkIG9yIGlsbGVnYWwgc3RyaW5nIHdhcyBzcGVjaWZpZWQuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBfYWxpZ24gPSBzZXR0aW5nO1xuICAgICAgICB0aGlzLmhhc0JlZW5SZXNldCA9IHRydWU7XG4gICAgICB9XG4gICAgfSkpO1xuICAgIC8qKlxuICAgICAqIE90aGVyIDx0cmFjaz4gc3BlYyBkZWZpbmVkIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICAvLyBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS90aGUtdmlkZW8tZWxlbWVudC5odG1sI3RleHQtdHJhY2stY3VlLWRpc3BsYXktc3RhdGVcblxuICAgIGN1ZS5kaXNwbGF5U3RhdGUgPSB2b2lkIDA7XG4gIH1cbiAgLyoqXG4gICAqIFZUVEN1ZSBtZXRob2RzXG4gICAqL1xuXG5cbiAgVlRUQ3VlLnByb3RvdHlwZS5nZXRDdWVBc0hUTUwgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gQXNzdW1lIFdlYlZUVC5jb252ZXJ0Q3VlVG9ET01UcmVlIGlzIG9uIHRoZSBnbG9iYWwuXG4gICAgdmFyIFdlYlZUVCA9IHdpbmRvdy5XZWJWVFQ7XG4gICAgcmV0dXJuIFdlYlZUVC5jb252ZXJ0Q3VlVG9ET01UcmVlKHdpbmRvdywgdGhpcy50ZXh0KTtcbiAgfTtcblxuICByZXR1cm4gVlRUQ3VlO1xufSkoKSk7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy91dGlscy92dHRwYXJzZXIuanNcbi8qXG4gKiBTb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3Z0dC5qcy9ibG9iL21hc3Rlci9kaXN0L3Z0dC5qcyNMMTcxNlxuICovXG5cblxudmFyIFN0cmluZ0RlY29kZXIgPSBmdW5jdGlvbiBTdHJpbmdEZWNvZGVyKCkge1xuICByZXR1cm4ge1xuICAgIGRlY29kZTogZnVuY3Rpb24gZGVjb2RlKGRhdGEpIHtcbiAgICAgIGlmICghZGF0YSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciAtIGV4cGVjdGVkIHN0cmluZyBkYXRhLicpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVuY29kZVVSSUNvbXBvbmVudChkYXRhKSk7XG4gICAgfVxuICB9O1xufTtcblxuZnVuY3Rpb24gVlRUUGFyc2VyKCkge1xuICB0aGlzLndpbmRvdyA9IHdpbmRvdztcbiAgdGhpcy5zdGF0ZSA9ICdJTklUSUFMJztcbiAgdGhpcy5idWZmZXIgPSAnJztcbiAgdGhpcy5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoKTtcbiAgdGhpcy5yZWdpb25MaXN0ID0gW107XG59IC8vIFRyeSB0byBwYXJzZSBpbnB1dCBhcyBhIHRpbWUgc3RhbXAuXG5cblxuZnVuY3Rpb24gcGFyc2VUaW1lU3RhbXAoaW5wdXQpIHtcbiAgZnVuY3Rpb24gY29tcHV0ZVNlY29uZHMoaCwgbSwgcywgZikge1xuICAgIHJldHVybiAoaCB8IDApICogMzYwMCArIChtIHwgMCkgKiA2MCArIChzIHwgMCkgKyAoZiB8IDApIC8gMTAwMDtcbiAgfVxuXG4gIHZhciBtID0gaW5wdXQubWF0Y2goL14oXFxkKyk6KFxcZHsyfSkoOlxcZHsyfSk/XFwuKFxcZHszfSkvKTtcblxuICBpZiAoIW0pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChtWzNdKSB7XG4gICAgLy8gVGltZXN0YW1wIHRha2VzIHRoZSBmb3JtIG9mIFtob3Vyc106W21pbnV0ZXNdOltzZWNvbmRzXS5bbWlsbGlzZWNvbmRzXVxuICAgIHJldHVybiBjb21wdXRlU2Vjb25kcyhtWzFdLCBtWzJdLCBtWzNdLnJlcGxhY2UoJzonLCAnJyksIG1bNF0pO1xuICB9IGVsc2UgaWYgKG1bMV0gPiA1OSkge1xuICAgIC8vIFRpbWVzdGFtcCB0YWtlcyB0aGUgZm9ybSBvZiBbaG91cnNdOlttaW51dGVzXS5bbWlsbGlzZWNvbmRzXVxuICAgIC8vIEZpcnN0IHBvc2l0aW9uIGlzIGhvdXJzIGFzIGl0J3Mgb3ZlciA1OS5cbiAgICByZXR1cm4gY29tcHV0ZVNlY29uZHMobVsxXSwgbVsyXSwgMCwgbVs0XSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gVGltZXN0YW1wIHRha2VzIHRoZSBmb3JtIG9mIFttaW51dGVzXTpbc2Vjb25kc10uW21pbGxpc2Vjb25kc11cbiAgICByZXR1cm4gY29tcHV0ZVNlY29uZHMoMCwgbVsxXSwgbVsyXSwgbVs0XSk7XG4gIH1cbn0gLy8gQSBzZXR0aW5ncyBvYmplY3QgaG9sZHMga2V5L3ZhbHVlIHBhaXJzIGFuZCB3aWxsIGlnbm9yZSBhbnl0aGluZyBidXQgdGhlIGZpcnN0XG4vLyBhc3NpZ25tZW50IHRvIGEgc3BlY2lmaWMga2V5LlxuXG5cbmZ1bmN0aW9uIFNldHRpbmdzKCkge1xuICB0aGlzLnZhbHVlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG59XG5cblNldHRpbmdzLnByb3RvdHlwZSA9IHtcbiAgLy8gT25seSBhY2NlcHQgdGhlIGZpcnN0IGFzc2lnbm1lbnQgdG8gYW55IGtleS5cbiAgc2V0OiBmdW5jdGlvbiBzZXQoaywgdikge1xuICAgIGlmICghdGhpcy5nZXQoaykgJiYgdiAhPT0gJycpIHtcbiAgICAgIHRoaXMudmFsdWVzW2tdID0gdjtcbiAgICB9XG4gIH0sXG4gIC8vIFJldHVybiB0aGUgdmFsdWUgZm9yIGEga2V5LCBvciBhIGRlZmF1bHQgdmFsdWUuXG4gIC8vIElmICdkZWZhdWx0S2V5JyBpcyBwYXNzZWQgdGhlbiAnZGZsdCcgaXMgYXNzdW1lZCB0byBiZSBhbiBvYmplY3Qgd2l0aFxuICAvLyBhIG51bWJlciBvZiBwb3NzaWJsZSBkZWZhdWx0IHZhbHVlcyBhcyBwcm9wZXJ0aWVzIHdoZXJlICdkZWZhdWx0S2V5JyBpc1xuICAvLyB0aGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0aGF0IHdpbGwgYmUgY2hvc2VuOyBvdGhlcndpc2UgaXQncyBhc3N1bWVkIHRvIGJlXG4gIC8vIGEgc2luZ2xlIHZhbHVlLlxuICBnZXQ6IGZ1bmN0aW9uIGdldChrLCBkZmx0LCBkZWZhdWx0S2V5KSB7XG4gICAgaWYgKGRlZmF1bHRLZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhcyhrKSA/IHRoaXMudmFsdWVzW2tdIDogZGZsdFtkZWZhdWx0S2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5oYXMoaykgPyB0aGlzLnZhbHVlc1trXSA6IGRmbHQ7XG4gIH0sXG4gIC8vIENoZWNrIHdoZXRoZXIgd2UgaGF2ZSBhIHZhbHVlIGZvciBhIGtleS5cbiAgaGFzOiBmdW5jdGlvbiBoYXMoaykge1xuICAgIHJldHVybiBrIGluIHRoaXMudmFsdWVzO1xuICB9LFxuICAvLyBBY2NlcHQgYSBzZXR0aW5nIGlmIGl0cyBvbmUgb2YgdGhlIGdpdmVuIGFsdGVybmF0aXZlcy5cbiAgYWx0OiBmdW5jdGlvbiBhbHQoaywgdiwgYSkge1xuICAgIGZvciAodmFyIG4gPSAwOyBuIDwgYS5sZW5ndGg7ICsrbikge1xuICAgICAgaWYgKHYgPT09IGFbbl0pIHtcbiAgICAgICAgdGhpcy5zZXQoaywgdik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgLy8gQWNjZXB0IGEgc2V0dGluZyBpZiBpdHMgYSB2YWxpZCAoc2lnbmVkKSBpbnRlZ2VyLlxuICBpbnRlZ2VyOiBmdW5jdGlvbiBpbnRlZ2VyKGssIHYpIHtcbiAgICBpZiAoL14tP1xcZCskLy50ZXN0KHYpKSB7XG4gICAgICAvLyBpbnRlZ2VyXG4gICAgICB0aGlzLnNldChrLCBwYXJzZUludCh2LCAxMCkpO1xuICAgIH1cbiAgfSxcbiAgLy8gQWNjZXB0IGEgc2V0dGluZyBpZiBpdHMgYSB2YWxpZCBwZXJjZW50YWdlLlxuICBwZXJjZW50OiBmdW5jdGlvbiBwZXJjZW50KGssIHYpIHtcbiAgICB2YXIgbTtcblxuICAgIGlmIChtID0gdi5tYXRjaCgvXihbXFxkXXsxLDN9KShcXC5bXFxkXSopPyUkLykpIHtcbiAgICAgIHYgPSBwYXJzZUZsb2F0KHYpO1xuXG4gICAgICBpZiAodiA+PSAwICYmIHYgPD0gMTAwKSB7XG4gICAgICAgIHRoaXMuc2V0KGssIHYpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07IC8vIEhlbHBlciBmdW5jdGlvbiB0byBwYXJzZSBpbnB1dCBpbnRvIGdyb3VwcyBzZXBhcmF0ZWQgYnkgJ2dyb3VwRGVsaW0nLCBhbmRcbi8vIGludGVycHJldGUgZWFjaCBncm91cCBhcyBhIGtleS92YWx1ZSBwYWlyIHNlcGFyYXRlZCBieSAna2V5VmFsdWVEZWxpbScuXG5cbmZ1bmN0aW9uIHBhcnNlT3B0aW9ucyhpbnB1dCwgY2FsbGJhY2ssIGtleVZhbHVlRGVsaW0sIGdyb3VwRGVsaW0pIHtcbiAgdmFyIGdyb3VwcyA9IGdyb3VwRGVsaW0gPyBpbnB1dC5zcGxpdChncm91cERlbGltKSA6IFtpbnB1dF07XG5cbiAgZm9yICh2YXIgaSBpbiBncm91cHMpIHtcbiAgICBpZiAodHlwZW9mIGdyb3Vwc1tpXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBrdiA9IGdyb3Vwc1tpXS5zcGxpdChrZXlWYWx1ZURlbGltKTtcblxuICAgIGlmIChrdi5sZW5ndGggIT09IDIpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBrID0ga3ZbMF07XG4gICAgdmFyIHYgPSBrdlsxXTtcbiAgICBjYWxsYmFjayhrLCB2KTtcbiAgfVxufVxuXG52YXIgZGVmYXVsdHMgPSBuZXcgdnR0Y3VlKDAsIDAsIDApOyAvLyAnbWlkZGxlJyB3YXMgY2hhbmdlZCB0byAnY2VudGVyJyBpbiB0aGUgc3BlYzogaHR0cHM6Ly9naXRodWIuY29tL3czYy93ZWJ2dHQvcHVsbC8yNDRcbi8vICBTYWZhcmkgZG9lc24ndCB5ZXQgc3VwcG9ydCB0aGlzIGNoYW5nZSwgYnV0IEZGIGFuZCBDaHJvbWUgZG8uXG5cbnZhciBjZW50ZXIgPSBkZWZhdWx0cy5hbGlnbiA9PT0gJ21pZGRsZScgPyAnbWlkZGxlJyA6ICdjZW50ZXInO1xuXG5mdW5jdGlvbiBwYXJzZUN1ZShpbnB1dCwgY3VlLCByZWdpb25MaXN0KSB7XG4gIC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCBpbnB1dCBpZiB3ZSBuZWVkIHRvIHRocm93IGFuIGVycm9yLlxuICB2YXIgb0lucHV0ID0gaW5wdXQ7IC8vIDQuMSBXZWJWVFQgdGltZXN0YW1wXG5cbiAgZnVuY3Rpb24gY29uc3VtZVRpbWVTdGFtcCgpIHtcbiAgICB2YXIgdHMgPSBwYXJzZVRpbWVTdGFtcChpbnB1dCk7XG5cbiAgICBpZiAodHMgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWFsZm9ybWVkIHRpbWVzdGFtcDogJyArIG9JbnB1dCk7XG4gICAgfSAvLyBSZW1vdmUgdGltZSBzdGFtcCBmcm9tIGlucHV0LlxuXG5cbiAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoL15bXlxcc2EtekEtWi1dKy8sICcnKTtcbiAgICByZXR1cm4gdHM7XG4gIH0gLy8gNC40LjIgV2ViVlRUIGN1ZSBzZXR0aW5nc1xuXG5cbiAgZnVuY3Rpb24gY29uc3VtZUN1ZVNldHRpbmdzKGlucHV0LCBjdWUpIHtcbiAgICB2YXIgc2V0dGluZ3MgPSBuZXcgU2V0dGluZ3MoKTtcbiAgICBwYXJzZU9wdGlvbnMoaW5wdXQsIGZ1bmN0aW9uIChrLCB2KSB7XG4gICAgICBzd2l0Y2ggKGspIHtcbiAgICAgICAgY2FzZSAncmVnaW9uJzpcbiAgICAgICAgICAvLyBGaW5kIHRoZSBsYXN0IHJlZ2lvbiB3ZSBwYXJzZWQgd2l0aCB0aGUgc2FtZSByZWdpb24gaWQuXG4gICAgICAgICAgZm9yICh2YXIgaSA9IHJlZ2lvbkxpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGlmIChyZWdpb25MaXN0W2ldLmlkID09PSB2KSB7XG4gICAgICAgICAgICAgIHNldHRpbmdzLnNldChrLCByZWdpb25MaXN0W2ldLnJlZ2lvbik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3ZlcnRpY2FsJzpcbiAgICAgICAgICBzZXR0aW5ncy5hbHQoaywgdiwgWydybCcsICdsciddKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdsaW5lJzpcbiAgICAgICAgICB2YXIgdmFscyA9IHYuc3BsaXQoJywnKSxcbiAgICAgICAgICAgICAgdmFsczAgPSB2YWxzWzBdO1xuICAgICAgICAgIHNldHRpbmdzLmludGVnZXIoaywgdmFsczApO1xuXG4gICAgICAgICAgaWYgKHNldHRpbmdzLnBlcmNlbnQoaywgdmFsczApKSB7XG4gICAgICAgICAgICBzZXR0aW5ncy5zZXQoJ3NuYXBUb0xpbmVzJywgZmFsc2UpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNldHRpbmdzLmFsdChrLCB2YWxzMCwgWydhdXRvJ10pO1xuXG4gICAgICAgICAgaWYgKHZhbHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICBzZXR0aW5ncy5hbHQoJ2xpbmVBbGlnbicsIHZhbHNbMV0sIFsnc3RhcnQnLCBjZW50ZXIsICdlbmQnXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncG9zaXRpb24nOlxuICAgICAgICAgIHZhbHMgPSB2LnNwbGl0KCcsJyk7XG4gICAgICAgICAgc2V0dGluZ3MucGVyY2VudChrLCB2YWxzWzBdKTtcblxuICAgICAgICAgIGlmICh2YWxzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgc2V0dGluZ3MuYWx0KCdwb3NpdGlvbkFsaWduJywgdmFsc1sxXSwgWydzdGFydCcsIGNlbnRlciwgJ2VuZCcsICdsaW5lLWxlZnQnLCAnbGluZS1yaWdodCcsICdhdXRvJ10pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3NpemUnOlxuICAgICAgICAgIHNldHRpbmdzLnBlcmNlbnQoaywgdik7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnYWxpZ24nOlxuICAgICAgICAgIHNldHRpbmdzLmFsdChrLCB2LCBbJ3N0YXJ0JywgY2VudGVyLCAnZW5kJywgJ2xlZnQnLCAncmlnaHQnXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSwgLzovLCAvXFxzLyk7IC8vIEFwcGx5IGRlZmF1bHQgdmFsdWVzIGZvciBhbnkgbWlzc2luZyBmaWVsZHMuXG5cbiAgICBjdWUucmVnaW9uID0gc2V0dGluZ3MuZ2V0KCdyZWdpb24nLCBudWxsKTtcbiAgICBjdWUudmVydGljYWwgPSBzZXR0aW5ncy5nZXQoJ3ZlcnRpY2FsJywgJycpO1xuICAgIHZhciBsaW5lID0gc2V0dGluZ3MuZ2V0KCdsaW5lJywgJ2F1dG8nKTtcblxuICAgIGlmIChsaW5lID09PSAnYXV0bycgJiYgZGVmYXVsdHMubGluZSA9PT0gLTEpIHtcbiAgICAgIC8vIHNldCBudW1lcmljIGxpbmUgbnVtYmVyIGZvciBTYWZhcmlcbiAgICAgIGxpbmUgPSAtMTtcbiAgICB9XG5cbiAgICBjdWUubGluZSA9IGxpbmU7XG4gICAgY3VlLmxpbmVBbGlnbiA9IHNldHRpbmdzLmdldCgnbGluZUFsaWduJywgJ3N0YXJ0Jyk7XG4gICAgY3VlLnNuYXBUb0xpbmVzID0gc2V0dGluZ3MuZ2V0KCdzbmFwVG9MaW5lcycsIHRydWUpO1xuICAgIGN1ZS5zaXplID0gc2V0dGluZ3MuZ2V0KCdzaXplJywgMTAwKTtcbiAgICBjdWUuYWxpZ24gPSBzZXR0aW5ncy5nZXQoJ2FsaWduJywgY2VudGVyKTtcbiAgICB2YXIgcG9zaXRpb24gPSBzZXR0aW5ncy5nZXQoJ3Bvc2l0aW9uJywgJ2F1dG8nKTtcblxuICAgIGlmIChwb3NpdGlvbiA9PT0gJ2F1dG8nICYmIGRlZmF1bHRzLnBvc2l0aW9uID09PSA1MCkge1xuICAgICAgLy8gc2V0IG51bWVyaWMgcG9zaXRpb24gZm9yIFNhZmFyaVxuICAgICAgcG9zaXRpb24gPSBjdWUuYWxpZ24gPT09ICdzdGFydCcgfHwgY3VlLmFsaWduID09PSAnbGVmdCcgPyAwIDogY3VlLmFsaWduID09PSAnZW5kJyB8fCBjdWUuYWxpZ24gPT09ICdyaWdodCcgPyAxMDAgOiA1MDtcbiAgICB9XG5cbiAgICBjdWUucG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNraXBXaGl0ZXNwYWNlKCkge1xuICAgIGlucHV0ID0gaW5wdXQucmVwbGFjZSgvXlxccysvLCAnJyk7XG4gIH0gLy8gNC4xIFdlYlZUVCBjdWUgdGltaW5ncy5cblxuXG4gIHNraXBXaGl0ZXNwYWNlKCk7XG4gIGN1ZS5zdGFydFRpbWUgPSBjb25zdW1lVGltZVN0YW1wKCk7IC8vICgxKSBjb2xsZWN0IGN1ZSBzdGFydCB0aW1lXG5cbiAgc2tpcFdoaXRlc3BhY2UoKTtcblxuICBpZiAoaW5wdXQuc3Vic3RyKDAsIDMpICE9PSAnLS0+Jykge1xuICAgIC8vICgzKSBuZXh0IGNoYXJhY3RlcnMgbXVzdCBtYXRjaCAnLS0+J1xuICAgIHRocm93IG5ldyBFcnJvcignTWFsZm9ybWVkIHRpbWUgc3RhbXAgKHRpbWUgc3RhbXBzIG11c3QgYmUgc2VwYXJhdGVkIGJ5IFxcJy0tPlxcJyk6ICcgKyBvSW5wdXQpO1xuICB9XG5cbiAgaW5wdXQgPSBpbnB1dC5zdWJzdHIoMyk7XG4gIHNraXBXaGl0ZXNwYWNlKCk7XG4gIGN1ZS5lbmRUaW1lID0gY29uc3VtZVRpbWVTdGFtcCgpOyAvLyAoNSkgY29sbGVjdCBjdWUgZW5kIHRpbWVcbiAgLy8gNC4xIFdlYlZUVCBjdWUgc2V0dGluZ3MgbGlzdC5cblxuICBza2lwV2hpdGVzcGFjZSgpO1xuICBjb25zdW1lQ3VlU2V0dGluZ3MoaW5wdXQsIGN1ZSk7XG59XG5cbmZ1bmN0aW9uIGZpeExpbmVCcmVha3MoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoLzxicig/OiBcXC8pPz4vZ2ksICdcXG4nKTtcbn1cblxuVlRUUGFyc2VyLnByb3RvdHlwZSA9IHtcbiAgcGFyc2U6IGZ1bmN0aW9uIHBhcnNlKGRhdGEpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7IC8vIElmIHRoZXJlIGlzIG5vIGRhdGEgdGhlbiB3ZSB3b24ndCBkZWNvZGUgaXQsIGJ1dCB3aWxsIGp1c3QgdHJ5IHRvIHBhcnNlXG4gICAgLy8gd2hhdGV2ZXIgaXMgaW4gYnVmZmVyIGFscmVhZHkuIFRoaXMgbWF5IG9jY3VyIGluIGNpcmN1bXN0YW5jZXMsIGZvclxuICAgIC8vIGV4YW1wbGUgd2hlbiBmbHVzaCgpIGlzIGNhbGxlZC5cblxuICAgIGlmIChkYXRhKSB7XG4gICAgICAvLyBUcnkgdG8gZGVjb2RlIHRoZSBkYXRhIHRoYXQgd2UgcmVjZWl2ZWQuXG4gICAgICBzZWxmLmJ1ZmZlciArPSBzZWxmLmRlY29kZXIuZGVjb2RlKGRhdGEsIHtcbiAgICAgICAgc3RyZWFtOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb2xsZWN0TmV4dExpbmUoKSB7XG4gICAgICB2YXIgYnVmZmVyID0gc2VsZi5idWZmZXI7XG4gICAgICB2YXIgcG9zID0gMDtcbiAgICAgIGJ1ZmZlciA9IGZpeExpbmVCcmVha3MoYnVmZmVyKTtcblxuICAgICAgd2hpbGUgKHBvcyA8IGJ1ZmZlci5sZW5ndGggJiYgYnVmZmVyW3Bvc10gIT09ICdcXHInICYmIGJ1ZmZlcltwb3NdICE9PSAnXFxuJykge1xuICAgICAgICArK3BvcztcbiAgICAgIH1cblxuICAgICAgdmFyIGxpbmUgPSBidWZmZXIuc3Vic3RyKDAsIHBvcyk7IC8vIEFkdmFuY2UgdGhlIGJ1ZmZlciBlYXJseSBpbiBjYXNlIHdlIGZhaWwgYmVsb3cuXG5cbiAgICAgIGlmIChidWZmZXJbcG9zXSA9PT0gJ1xccicpIHtcbiAgICAgICAgKytwb3M7XG4gICAgICB9XG5cbiAgICAgIGlmIChidWZmZXJbcG9zXSA9PT0gJ1xcbicpIHtcbiAgICAgICAgKytwb3M7XG4gICAgICB9XG5cbiAgICAgIHNlbGYuYnVmZmVyID0gYnVmZmVyLnN1YnN0cihwb3MpO1xuICAgICAgcmV0dXJuIGxpbmU7XG4gICAgfSAvLyAzLjIgV2ViVlRUIG1ldGFkYXRhIGhlYWRlciBzeW50YXhcblxuXG4gICAgZnVuY3Rpb24gcGFyc2VIZWFkZXIoaW5wdXQpIHtcbiAgICAgIHBhcnNlT3B0aW9ucyhpbnB1dCwgZnVuY3Rpb24gKGssIHYpIHtcbiAgICAgICAgc3dpdGNoIChrKSB7XG4gICAgICAgICAgY2FzZSAnUmVnaW9uJzpcbiAgICAgICAgICAgIC8vIDMuMyBXZWJWVFQgcmVnaW9uIG1ldGFkYXRhIGhlYWRlciBzeW50YXhcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdwYXJzZSByZWdpb24nLCB2KTtcbiAgICAgICAgICAgIC8vIHBhcnNlUmVnaW9uKHYpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0sIC86Lyk7XG4gICAgfSAvLyA1LjEgV2ViVlRUIGZpbGUgcGFyc2luZy5cblxuXG4gICAgdHJ5IHtcbiAgICAgIHZhciBsaW5lO1xuXG4gICAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gJ0lOSVRJQUwnKSB7XG4gICAgICAgIC8vIFdlIGNhbid0IHN0YXJ0IHBhcnNpbmcgdW50aWwgd2UgaGF2ZSB0aGUgZmlyc3QgbGluZS5cbiAgICAgICAgaWYgKCEvXFxyXFxufFxcbi8udGVzdChzZWxmLmJ1ZmZlcikpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGxpbmUgPSBjb2xsZWN0TmV4dExpbmUoKTsgLy8gc3RyaXAgb2YgVVRGLTggQk9NIGlmIGFueVxuICAgICAgICAvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CeXRlX29yZGVyX21hcmsjVVRGLThcblxuICAgICAgICB2YXIgbSA9IGxpbmUubWF0Y2goL14ow6/Cu8K/KT9XRUJWVFQoWyBcXHRdLiopPyQvKTtcblxuICAgICAgICBpZiAoIW0gfHwgIW1bMF0pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01hbGZvcm1lZCBXZWJWVFQgc2lnbmF0dXJlLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5zdGF0ZSA9ICdIRUFERVInO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWxyZWFkeUNvbGxlY3RlZExpbmUgPSBmYWxzZTtcblxuICAgICAgd2hpbGUgKHNlbGYuYnVmZmVyKSB7XG4gICAgICAgIC8vIFdlIGNhbid0IHBhcnNlIGEgbGluZSB1bnRpbCB3ZSBoYXZlIHRoZSBmdWxsIGxpbmUuXG4gICAgICAgIGlmICghL1xcclxcbnxcXG4vLnRlc3Qoc2VsZi5idWZmZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWFscmVhZHlDb2xsZWN0ZWRMaW5lKSB7XG4gICAgICAgICAgbGluZSA9IGNvbGxlY3ROZXh0TGluZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFscmVhZHlDb2xsZWN0ZWRMaW5lID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKHNlbGYuc3RhdGUpIHtcbiAgICAgICAgICBjYXNlICdIRUFERVInOlxuICAgICAgICAgICAgLy8gMTMtMTggLSBBbGxvdyBhIGhlYWRlciAobWV0YWRhdGEpIHVuZGVyIHRoZSBXRUJWVFQgbGluZS5cbiAgICAgICAgICAgIGlmICgvOi8udGVzdChsaW5lKSkge1xuICAgICAgICAgICAgICBwYXJzZUhlYWRlcihsaW5lKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWxpbmUpIHtcbiAgICAgICAgICAgICAgLy8gQW4gZW1wdHkgbGluZSB0ZXJtaW5hdGVzIHRoZSBoZWFkZXIgYW5kIHN0YXJ0cyB0aGUgYm9keSAoY3VlcykuXG4gICAgICAgICAgICAgIHNlbGYuc3RhdGUgPSAnSUQnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgIGNhc2UgJ05PVEUnOlxuICAgICAgICAgICAgLy8gSWdub3JlIE5PVEUgYmxvY2tzLlxuICAgICAgICAgICAgaWYgKCFsaW5lKSB7XG4gICAgICAgICAgICAgIHNlbGYuc3RhdGUgPSAnSUQnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgIGNhc2UgJ0lEJzpcbiAgICAgICAgICAgIC8vIENoZWNrIGZvciB0aGUgc3RhcnQgb2YgTk9URSBibG9ja3MuXG4gICAgICAgICAgICBpZiAoL15OT1RFKCR8WyBcXHRdKS8udGVzdChsaW5lKSkge1xuICAgICAgICAgICAgICBzZWxmLnN0YXRlID0gJ05PVEUnO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gLy8gMTktMjkgLSBBbGxvdyBhbnkgbnVtYmVyIG9mIGxpbmUgdGVybWluYXRvcnMsIHRoZW4gaW5pdGlhbGl6ZSBuZXcgY3VlIHZhbHVlcy5cblxuXG4gICAgICAgICAgICBpZiAoIWxpbmUpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNlbGYuY3VlID0gbmV3IHZ0dGN1ZSgwLCAwLCAnJyk7XG4gICAgICAgICAgICBzZWxmLnN0YXRlID0gJ0NVRSc7IC8vIDMwLTM5IC0gQ2hlY2sgaWYgc2VsZiBsaW5lIGNvbnRhaW5zIGFuIG9wdGlvbmFsIGlkZW50aWZpZXIgb3IgdGltaW5nIGRhdGEuXG5cbiAgICAgICAgICAgIGlmIChsaW5lLmluZGV4T2YoJy0tPicpID09PSAtMSkge1xuICAgICAgICAgICAgICBzZWxmLmN1ZS5pZCA9IGxpbmU7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gUHJvY2VzcyBsaW5lIGFzIHN0YXJ0IG9mIGEgY3VlLlxuXG4gICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuXG4gICAgICAgICAgY2FzZSAnQ1VFJzpcbiAgICAgICAgICAgIC8vIDQwIC0gQ29sbGVjdCBjdWUgdGltaW5ncyBhbmQgc2V0dGluZ3MuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBwYXJzZUN1ZShsaW5lLCBzZWxmLmN1ZSwgc2VsZi5yZWdpb25MaXN0KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgLy8gSW4gY2FzZSBvZiBhbiBlcnJvciBpZ25vcmUgcmVzdCBvZiB0aGUgY3VlLlxuICAgICAgICAgICAgICBzZWxmLmN1ZSA9IG51bGw7XG4gICAgICAgICAgICAgIHNlbGYuc3RhdGUgPSAnQkFEQ1VFJztcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNlbGYuc3RhdGUgPSAnQ1VFVEVYVCc7XG4gICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgIGNhc2UgJ0NVRVRFWFQnOlxuICAgICAgICAgICAgdmFyIGhhc1N1YnN0cmluZyA9IGxpbmUuaW5kZXhPZignLS0+JykgIT09IC0xOyAvLyAzNCAtIElmIHdlIGhhdmUgYW4gZW1wdHkgbGluZSB0aGVuIHJlcG9ydCB0aGUgY3VlLlxuICAgICAgICAgICAgLy8gMzUgLSBJZiB3ZSBoYXZlIHRoZSBzcGVjaWFsIHN1YnN0cmluZyAnLS0+JyB0aGVuIHJlcG9ydCB0aGUgY3VlLFxuICAgICAgICAgICAgLy8gYnV0IGRvIG5vdCBjb2xsZWN0IHRoZSBsaW5lIGFzIHdlIG5lZWQgdG8gcHJvY2VzcyB0aGUgY3VycmVudFxuICAgICAgICAgICAgLy8gb25lIGFzIGEgbmV3IGN1ZS5cblxuICAgICAgICAgICAgaWYgKCFsaW5lIHx8IGhhc1N1YnN0cmluZyAmJiAoYWxyZWFkeUNvbGxlY3RlZExpbmUgPSB0cnVlKSkge1xuICAgICAgICAgICAgICAvLyBXZSBhcmUgZG9uZSBwYXJzaW5nIHNlbGYgY3VlLlxuICAgICAgICAgICAgICBpZiAoc2VsZi5vbmN1ZSkge1xuICAgICAgICAgICAgICAgIHNlbGYub25jdWUoc2VsZi5jdWUpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgc2VsZi5jdWUgPSBudWxsO1xuICAgICAgICAgICAgICBzZWxmLnN0YXRlID0gJ0lEJztcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzZWxmLmN1ZS50ZXh0KSB7XG4gICAgICAgICAgICAgIHNlbGYuY3VlLnRleHQgKz0gJ1xcbic7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNlbGYuY3VlLnRleHQgKz0gbGluZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgY2FzZSAnQkFEQ1VFJzpcbiAgICAgICAgICAgIC8vIEJBRENVRVxuICAgICAgICAgICAgLy8gNTQtNjIgLSBDb2xsZWN0IGFuZCBkaXNjYXJkIHRoZSByZW1haW5pbmcgY3VlLlxuICAgICAgICAgICAgaWYgKCFsaW5lKSB7XG4gICAgICAgICAgICAgIHNlbGYuc3RhdGUgPSAnSUQnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIElmIHdlIGFyZSBjdXJyZW50bHkgcGFyc2luZyBhIGN1ZSwgcmVwb3J0IHdoYXQgd2UgaGF2ZS5cbiAgICAgIGlmIChzZWxmLnN0YXRlID09PSAnQ1VFVEVYVCcgJiYgc2VsZi5jdWUgJiYgc2VsZi5vbmN1ZSkge1xuICAgICAgICBzZWxmLm9uY3VlKHNlbGYuY3VlKTtcbiAgICAgIH1cblxuICAgICAgc2VsZi5jdWUgPSBudWxsOyAvLyBFbnRlciBCQURXRUJWVFQgc3RhdGUgaWYgaGVhZGVyIHdhcyBub3QgcGFyc2VkIGNvcnJlY3RseSBvdGhlcndpc2VcbiAgICAgIC8vIGFub3RoZXIgZXhjZXB0aW9uIG9jY3VycmVkIHNvIGVudGVyIEJBRENVRSBzdGF0ZS5cblxuICAgICAgc2VsZi5zdGF0ZSA9IHNlbGYuc3RhdGUgPT09ICdJTklUSUFMJyA/ICdCQURXRUJWVFQnIDogJ0JBRENVRSc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGZsdXNoOiBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB0cnkge1xuICAgICAgLy8gRmluaXNoIGRlY29kaW5nIHRoZSBzdHJlYW0uXG4gICAgICBzZWxmLmJ1ZmZlciArPSBzZWxmLmRlY29kZXIuZGVjb2RlKCk7IC8vIFN5bnRoZXNpemUgdGhlIGVuZCBvZiB0aGUgY3VycmVudCBjdWUgb3IgcmVnaW9uLlxuXG4gICAgICBpZiAoc2VsZi5jdWUgfHwgc2VsZi5zdGF0ZSA9PT0gJ0hFQURFUicpIHtcbiAgICAgICAgc2VsZi5idWZmZXIgKz0gJ1xcblxcbic7XG4gICAgICAgIHNlbGYucGFyc2UoKTtcbiAgICAgIH0gLy8gSWYgd2UndmUgZmx1c2hlZCwgcGFyc2VkLCBhbmQgd2UncmUgc3RpbGwgb24gdGhlIElOSVRJQUwgc3RhdGUgdGhlblxuICAgICAgLy8gdGhhdCBtZWFucyB3ZSBkb24ndCBoYXZlIGVub3VnaCBvZiB0aGUgc3RyZWFtIHRvIHBhcnNlIHRoZSBmaXJzdFxuICAgICAgLy8gbGluZS5cblxuXG4gICAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gJ0lOSVRJQUwnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWFsZm9ybWVkIFdlYlZUVCBzaWduYXR1cmUuJyk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5vbmZsdXNoKSB7XG4gICAgICBzZWxmLm9uZmx1c2goKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufTtcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgdnR0cGFyc2VyID0gKFZUVFBhcnNlcik7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy91dGlscy9jdWVzLnRzXG5cbmZ1bmN0aW9uIG5ld0N1ZSh0cmFjaywgc3RhcnRUaW1lLCBlbmRUaW1lLCBjYXB0aW9uU2NyZWVuKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIHJvdzsgLy8gdGhlIHR5cGUgZGF0YSBzdGF0ZXMgdGhpcyBpcyBWVFRDdWUsIGJ1dCBpdCBjYW4gcG90ZW50aWFsbHkgYmUgYSBUZXh0VHJhY2tDdWUgb24gb2xkIGJyb3dzZXJzXG5cbiAgdmFyIGN1ZTtcbiAgdmFyIGluZGVudGluZztcbiAgdmFyIGluZGVudDtcbiAgdmFyIHRleHQ7XG4gIHZhciBWVFRDdWUgPSB3aW5kb3cuVlRUQ3VlIHx8IFRleHRUcmFja0N1ZTtcblxuICBmb3IgKHZhciByID0gMDsgciA8IGNhcHRpb25TY3JlZW4ucm93cy5sZW5ndGg7IHIrKykge1xuICAgIHJvdyA9IGNhcHRpb25TY3JlZW4ucm93c1tyXTtcbiAgICBpbmRlbnRpbmcgPSB0cnVlO1xuICAgIGluZGVudCA9IDA7XG4gICAgdGV4dCA9ICcnO1xuXG4gICAgaWYgKCFyb3cuaXNFbXB0eSgpKSB7XG4gICAgICBmb3IgKHZhciBjID0gMDsgYyA8IHJvdy5jaGFycy5sZW5ndGg7IGMrKykge1xuICAgICAgICBpZiAocm93LmNoYXJzW2NdLnVjaGFyLm1hdGNoKC9cXHMvKSAmJiBpbmRlbnRpbmcpIHtcbiAgICAgICAgICBpbmRlbnQrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZXh0ICs9IHJvdy5jaGFyc1tjXS51Y2hhcjtcbiAgICAgICAgICBpbmRlbnRpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBUbyBiZSB1c2VkIGZvciBjbGVhbmluZy11cCBvcnBoYW5lZCByb2xsLXVwIGNhcHRpb25zXG5cblxuICAgICAgcm93LmN1ZVN0YXJ0VGltZSA9IHN0YXJ0VGltZTsgLy8gR2l2ZSBhIHNsaWdodCBidW1wIHRvIHRoZSBlbmRUaW1lIGlmIGl0J3MgZXF1YWwgdG8gc3RhcnRUaW1lIHRvIGF2b2lkIGEgU3ludGF4RXJyb3IgaW4gSUVcblxuICAgICAgaWYgKHN0YXJ0VGltZSA9PT0gZW5kVGltZSkge1xuICAgICAgICBlbmRUaW1lICs9IDAuMDAwMTtcbiAgICAgIH1cblxuICAgICAgY3VlID0gbmV3IFZUVEN1ZShzdGFydFRpbWUsIGVuZFRpbWUsIGZpeExpbmVCcmVha3ModGV4dC50cmltKCkpKTtcblxuICAgICAgaWYgKGluZGVudCA+PSAxNikge1xuICAgICAgICBpbmRlbnQtLTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluZGVudCsrO1xuICAgICAgfSAvLyBWVFRDdWUubGluZSBnZXQncyBmbGFrZXkgd2hlbiB1c2luZyBjb250cm9scywgc28gbGV0J3Mgbm93IGluY2x1ZGUgbGluZSAxMyYxNFxuICAgICAgLy8gYWxzbywgZHJvcCBsaW5lIDEgc2luY2UgaXQncyB0byBjbG9zZSB0byB0aGUgdG9wXG5cblxuICAgICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0ZpcmVmb3hcXC8vKSkge1xuICAgICAgICBjdWUubGluZSA9IHIgKyAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VlLmxpbmUgPSByID4gNyA/IHIgLSAyIDogciArIDE7XG4gICAgICB9XG5cbiAgICAgIGN1ZS5hbGlnbiA9ICdsZWZ0JzsgLy8gQ2xhbXAgdGhlIHBvc2l0aW9uIGJldHdlZW4gMCBhbmQgMTAwIC0gaWYgb3V0IG9mIHRoZXNlIGJvdW5kcywgRmlyZWZveCB0aHJvd3MgYW4gZXhjZXB0aW9uIGFuZCBjYXB0aW9ucyBicmVha1xuXG4gICAgICBjdWUucG9zaXRpb24gPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxMDAsIDEwMCAqIChpbmRlbnQgLyAzMikpKTtcbiAgICAgIHJlc3VsdC5wdXNoKGN1ZSk7XG5cbiAgICAgIGlmICh0cmFjaykge1xuICAgICAgICB0cmFjay5hZGRDdWUoY3VlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvdXRpbHMvY2VhLTYwOC1wYXJzZXIudHNcblxuLyoqXG4gKlxuICogVGhpcyBjb2RlIHdhcyBwb3J0ZWQgZnJvbSB0aGUgZGFzaC5qcyBwcm9qZWN0IGF0OlxuICogICBodHRwczovL2dpdGh1Yi5jb20vRGFzaC1JbmR1c3RyeS1Gb3J1bS9kYXNoLmpzL2Jsb2IvZGV2ZWxvcG1lbnQvZXh0ZXJuYWxzL2NlYTYwOC1wYXJzZXIuanNcbiAqICAgaHR0cHM6Ly9naXRodWIuY29tL0Rhc2gtSW5kdXN0cnktRm9ydW0vZGFzaC5qcy9jb21taXQvODI2OWIyNmE3NjFlMDg1M2JiMjFkNzg3ODBlZDk0NTE0NGVjZGQ0ZCNkaWZmLTcxYmMyOTVhMmQ2YjZiNzA5M2ExZDMyOTBkNTNhNGIyXG4gKlxuICogVGhlIG9yaWdpbmFsIGNvcHlyaWdodCBhcHBlYXJzIGJlbG93OlxuICpcbiAqIFRoZSBjb3B5cmlnaHQgaW4gdGhpcyBzb2Z0d2FyZSBpcyBiZWluZyBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgQlNEIExpY2Vuc2UsXG4gKiBpbmNsdWRlZCBiZWxvdy4gVGhpcyBzb2Z0d2FyZSBtYXkgYmUgc3ViamVjdCB0byBvdGhlciB0aGlyZCBwYXJ0eSBhbmQgY29udHJpYnV0b3JcbiAqIHJpZ2h0cywgaW5jbHVkaW5nIHBhdGVudCByaWdodHMsIGFuZCBubyBzdWNoIHJpZ2h0cyBhcmUgZ3JhbnRlZCB1bmRlciB0aGlzIGxpY2Vuc2UuXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LTIwMTYsIERBU0ggSW5kdXN0cnkgRm9ydW0uXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sXG4gKiBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4gKiAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4gKiAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKiAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3JcbiAqICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICogIDIuIE5laXRoZXIgdGhlIG5hbWUgb2YgRGFzaCBJbmR1c3RyeSBGb3J1bSBub3IgdGhlIG5hbWVzIG9mIGl0c1xuICogIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiAqICB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBBUyBJUyBBTkQgQU5ZXG4gKiAgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRFxuICogIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC5cbiAqICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULFxuICogIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVRcbiAqICBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SXG4gKiAgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksXG4gKiAgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuICogIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4gKiAgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuLyoqXG4gKiAgRXhjZXB0aW9ucyBmcm9tIHJlZ3VsYXIgQVNDSUkuIENvZGVQb2ludHMgYXJlIG1hcHBlZCB0byBVVEYtMTYgY29kZXNcbiAqL1xuXG52YXIgc3BlY2lhbENlYTYwOENoYXJzQ29kZXMgPSB7XG4gIDB4MmE6IDB4ZTEsXG4gIC8vIGxvd2VyY2FzZSBhLCBhY3V0ZSBhY2NlbnRcbiAgMHg1YzogMHhlOSxcbiAgLy8gbG93ZXJjYXNlIGUsIGFjdXRlIGFjY2VudFxuICAweDVlOiAweGVkLFxuICAvLyBsb3dlcmNhc2UgaSwgYWN1dGUgYWNjZW50XG4gIDB4NWY6IDB4ZjMsXG4gIC8vIGxvd2VyY2FzZSBvLCBhY3V0ZSBhY2NlbnRcbiAgMHg2MDogMHhmYSxcbiAgLy8gbG93ZXJjYXNlIHUsIGFjdXRlIGFjY2VudFxuICAweDdiOiAweGU3LFxuICAvLyBsb3dlcmNhc2UgYyB3aXRoIGNlZGlsbGFcbiAgMHg3YzogMHhmNyxcbiAgLy8gZGl2aXNpb24gc3ltYm9sXG4gIDB4N2Q6IDB4ZDEsXG4gIC8vIHVwcGVyY2FzZSBOIHRpbGRlXG4gIDB4N2U6IDB4ZjEsXG4gIC8vIGxvd2VyY2FzZSBuIHRpbGRlXG4gIDB4N2Y6IDB4MjU4OCxcbiAgLy8gRnVsbCBibG9ja1xuICAvLyBUSElTIEJMT0NLIElOQ0xVREVTIFRIRSAxNiBFWFRFTkRFRCAoVFdPLUJZVEUpIExJTkUgMjEgQ0hBUkFDVEVSU1xuICAvLyBUSEFUIENPTUUgRlJPTSBISSBCWVRFPTB4MTEgQU5EIExPVyBCRVRXRUVOIDB4MzAgQU5EIDB4M0ZcbiAgLy8gVEhJUyBNRUFOUyBUSEFUIFxceDUwIE1VU1QgQkUgQURERUQgVE8gVEhFIFZBTFVFU1xuICAweDgwOiAweGFlLFxuICAvLyBSZWdpc3RlcmVkIHN5bWJvbCAoUilcbiAgMHg4MTogMHhiMCxcbiAgLy8gZGVncmVlIHNpZ25cbiAgMHg4MjogMHhiZCxcbiAgLy8gMS8yIHN5bWJvbFxuICAweDgzOiAweGJmLFxuICAvLyBJbnZlcnRlZCAob3BlbikgcXVlc3Rpb24gbWFya1xuICAweDg0OiAweDIxMjIsXG4gIC8vIFRyYWRlbWFyayBzeW1ib2wgKFRNKVxuICAweDg1OiAweGEyLFxuICAvLyBDZW50cyBzeW1ib2xcbiAgMHg4NjogMHhhMyxcbiAgLy8gUG91bmRzIHN0ZXJsaW5nXG4gIDB4ODc6IDB4MjY2YSxcbiAgLy8gTXVzaWMgOCd0aCBub3RlXG4gIDB4ODg6IDB4ZTAsXG4gIC8vIGxvd2VyY2FzZSBhLCBncmF2ZSBhY2NlbnRcbiAgMHg4OTogMHgyMCxcbiAgLy8gdHJhbnNwYXJlbnQgc3BhY2UgKHJlZ3VsYXIpXG4gIDB4OGE6IDB4ZTgsXG4gIC8vIGxvd2VyY2FzZSBlLCBncmF2ZSBhY2NlbnRcbiAgMHg4YjogMHhlMixcbiAgLy8gbG93ZXJjYXNlIGEsIGNpcmN1bWZsZXggYWNjZW50XG4gIDB4OGM6IDB4ZWEsXG4gIC8vIGxvd2VyY2FzZSBlLCBjaXJjdW1mbGV4IGFjY2VudFxuICAweDhkOiAweGVlLFxuICAvLyBsb3dlcmNhc2UgaSwgY2lyY3VtZmxleCBhY2NlbnRcbiAgMHg4ZTogMHhmNCxcbiAgLy8gbG93ZXJjYXNlIG8sIGNpcmN1bWZsZXggYWNjZW50XG4gIDB4OGY6IDB4ZmIsXG4gIC8vIGxvd2VyY2FzZSB1LCBjaXJjdW1mbGV4IGFjY2VudFxuICAvLyBUSElTIEJMT0NLIElOQ0xVREVTIFRIRSAzMiBFWFRFTkRFRCAoVFdPLUJZVEUpIExJTkUgMjEgQ0hBUkFDVEVSU1xuICAvLyBUSEFUIENPTUUgRlJPTSBISSBCWVRFPTB4MTIgQU5EIExPVyBCRVRXRUVOIDB4MjAgQU5EIDB4M0ZcbiAgMHg5MDogMHhjMSxcbiAgLy8gY2FwaXRhbCBsZXR0ZXIgQSB3aXRoIGFjdXRlXG4gIDB4OTE6IDB4YzksXG4gIC8vIGNhcGl0YWwgbGV0dGVyIEUgd2l0aCBhY3V0ZVxuICAweDkyOiAweGQzLFxuICAvLyBjYXBpdGFsIGxldHRlciBPIHdpdGggYWN1dGVcbiAgMHg5MzogMHhkYSxcbiAgLy8gY2FwaXRhbCBsZXR0ZXIgVSB3aXRoIGFjdXRlXG4gIDB4OTQ6IDB4ZGMsXG4gIC8vIGNhcGl0YWwgbGV0dGVyIFUgd2l0aCBkaWFyZXNpc1xuICAweDk1OiAweGZjLFxuICAvLyBsb3dlcmNhc2UgbGV0dGVyIFUgd2l0aCBkaWFlcmVzaXNcbiAgMHg5NjogMHgyMDE4LFxuICAvLyBvcGVuaW5nIHNpbmdsZSBxdW90ZVxuICAweDk3OiAweGExLFxuICAvLyBpbnZlcnRlZCBleGNsYW1hdGlvbiBtYXJrXG4gIDB4OTg6IDB4MmEsXG4gIC8vIGFzdGVyaXNrXG4gIDB4OTk6IDB4MjAxOSxcbiAgLy8gY2xvc2luZyBzaW5nbGUgcXVvdGVcbiAgMHg5YTogMHgyNTAxLFxuICAvLyBib3ggZHJhd2luZ3MgaGVhdnkgaG9yaXpvbnRhbFxuICAweDliOiAweGE5LFxuICAvLyBjb3B5cmlnaHQgc2lnblxuICAweDljOiAweDIxMjAsXG4gIC8vIFNlcnZpY2UgbWFya1xuICAweDlkOiAweDIwMjIsXG4gIC8vIChyb3VuZCkgYnVsbGV0XG4gIDB4OWU6IDB4MjAxYyxcbiAgLy8gTGVmdCBkb3VibGUgcXVvdGF0aW9uIG1hcmtcbiAgMHg5ZjogMHgyMDFkLFxuICAvLyBSaWdodCBkb3VibGUgcXVvdGF0aW9uIG1hcmtcbiAgMHhhMDogMHhjMCxcbiAgLy8gdXBwZXJjYXNlIEEsIGdyYXZlIGFjY2VudFxuICAweGExOiAweGMyLFxuICAvLyB1cHBlcmNhc2UgQSwgY2lyY3VtZmxleFxuICAweGEyOiAweGM3LFxuICAvLyB1cHBlcmNhc2UgQyB3aXRoIGNlZGlsbGFcbiAgMHhhMzogMHhjOCxcbiAgLy8gdXBwZXJjYXNlIEUsIGdyYXZlIGFjY2VudFxuICAweGE0OiAweGNhLFxuICAvLyB1cHBlcmNhc2UgRSwgY2lyY3VtZmxleFxuICAweGE1OiAweGNiLFxuICAvLyBjYXBpdGFsIGxldHRlciBFIHdpdGggZGlhcmVzaXNcbiAgMHhhNjogMHhlYixcbiAgLy8gbG93ZXJjYXNlIGxldHRlciBlIHdpdGggZGlhcmVzaXNcbiAgMHhhNzogMHhjZSxcbiAgLy8gdXBwZXJjYXNlIEksIGNpcmN1bWZsZXhcbiAgMHhhODogMHhjZixcbiAgLy8gdXBwZXJjYXNlIEksIHdpdGggZGlhcmVzaXNcbiAgMHhhOTogMHhlZixcbiAgLy8gbG93ZXJjYXNlIGksIHdpdGggZGlhcmVzaXNcbiAgMHhhYTogMHhkNCxcbiAgLy8gdXBwZXJjYXNlIE8sIGNpcmN1bWZsZXhcbiAgMHhhYjogMHhkOSxcbiAgLy8gdXBwZXJjYXNlIFUsIGdyYXZlIGFjY2VudFxuICAweGFjOiAweGY5LFxuICAvLyBsb3dlcmNhc2UgdSwgZ3JhdmUgYWNjZW50XG4gIDB4YWQ6IDB4ZGIsXG4gIC8vIHVwcGVyY2FzZSBVLCBjaXJjdW1mbGV4XG4gIDB4YWU6IDB4YWIsXG4gIC8vIGxlZnQtcG9pbnRpbmcgZG91YmxlIGFuZ2xlIHF1b3RhdGlvbiBtYXJrXG4gIDB4YWY6IDB4YmIsXG4gIC8vIHJpZ2h0LXBvaW50aW5nIGRvdWJsZSBhbmdsZSBxdW90YXRpb24gbWFya1xuICAvLyBUSElTIEJMT0NLIElOQ0xVREVTIFRIRSAzMiBFWFRFTkRFRCAoVFdPLUJZVEUpIExJTkUgMjEgQ0hBUkFDVEVSU1xuICAvLyBUSEFUIENPTUUgRlJPTSBISSBCWVRFPTB4MTMgQU5EIExPVyBCRVRXRUVOIDB4MjAgQU5EIDB4M0ZcbiAgMHhiMDogMHhjMyxcbiAgLy8gVXBwZXJjYXNlIEEsIHRpbGRlXG4gIDB4YjE6IDB4ZTMsXG4gIC8vIExvd2VyY2FzZSBhLCB0aWxkZVxuICAweGIyOiAweGNkLFxuICAvLyBVcHBlcmNhc2UgSSwgYWN1dGUgYWNjZW50XG4gIDB4YjM6IDB4Y2MsXG4gIC8vIFVwcGVyY2FzZSBJLCBncmF2ZSBhY2NlbnRcbiAgMHhiNDogMHhlYyxcbiAgLy8gTG93ZXJjYXNlIGksIGdyYXZlIGFjY2VudFxuICAweGI1OiAweGQyLFxuICAvLyBVcHBlcmNhc2UgTywgZ3JhdmUgYWNjZW50XG4gIDB4YjY6IDB4ZjIsXG4gIC8vIExvd2VyY2FzZSBvLCBncmF2ZSBhY2NlbnRcbiAgMHhiNzogMHhkNSxcbiAgLy8gVXBwZXJjYXNlIE8sIHRpbGRlXG4gIDB4Yjg6IDB4ZjUsXG4gIC8vIExvd2VyY2FzZSBvLCB0aWxkZVxuICAweGI5OiAweDdiLFxuICAvLyBPcGVuIGN1cmx5IGJyYWNlXG4gIDB4YmE6IDB4N2QsXG4gIC8vIENsb3NpbmcgY3VybHkgYnJhY2VcbiAgMHhiYjogMHg1YyxcbiAgLy8gQmFja3NsYXNoXG4gIDB4YmM6IDB4NWUsXG4gIC8vIENhcmV0XG4gIDB4YmQ6IDB4NWYsXG4gIC8vIFVuZGVyc2NvcmVcbiAgMHhiZTogMHg3YyxcbiAgLy8gUGlwZSAodmVydGljYWwgbGluZSlcbiAgMHhiZjogMHgyMjNjLFxuICAvLyBUaWxkZSBvcGVyYXRvclxuICAweGMwOiAweGM0LFxuICAvLyBVcHBlcmNhc2UgQSwgdW1sYXV0XG4gIDB4YzE6IDB4ZTQsXG4gIC8vIExvd2VyY2FzZSBBLCB1bWxhdXRcbiAgMHhjMjogMHhkNixcbiAgLy8gVXBwZXJjYXNlIE8sIHVtbGF1dFxuICAweGMzOiAweGY2LFxuICAvLyBMb3dlcmNhc2UgbywgdW1sYXV0XG4gIDB4YzQ6IDB4ZGYsXG4gIC8vIEVzc3pldHQgKHNoYXJwIFMpXG4gIDB4YzU6IDB4YTUsXG4gIC8vIFllbiBzeW1ib2xcbiAgMHhjNjogMHhhNCxcbiAgLy8gR2VuZXJpYyBjdXJyZW5jeSBzaWduXG4gIDB4Yzc6IDB4MjUwMyxcbiAgLy8gQm94IGRyYXdpbmdzIGhlYXZ5IHZlcnRpY2FsXG4gIDB4Yzg6IDB4YzUsXG4gIC8vIFVwcGVyY2FzZSBBLCByaW5nXG4gIDB4Yzk6IDB4ZTUsXG4gIC8vIExvd2VyY2FzZSBBLCByaW5nXG4gIDB4Y2E6IDB4ZDgsXG4gIC8vIFVwcGVyY2FzZSBPLCBzdHJva2VcbiAgMHhjYjogMHhmOCxcbiAgLy8gTG93ZXJjYXNlIG8sIHN0cm9rXG4gIDB4Y2M6IDB4MjUwZixcbiAgLy8gQm94IGRyYXdpbmdzIGhlYXZ5IGRvd24gYW5kIHJpZ2h0XG4gIDB4Y2Q6IDB4MjUxMyxcbiAgLy8gQm94IGRyYXdpbmdzIGhlYXZ5IGRvd24gYW5kIGxlZnRcbiAgMHhjZTogMHgyNTE3LFxuICAvLyBCb3ggZHJhd2luZ3MgaGVhdnkgdXAgYW5kIHJpZ2h0XG4gIDB4Y2Y6IDB4MjUxYiAvLyBCb3ggZHJhd2luZ3MgaGVhdnkgdXAgYW5kIGxlZnRcblxufTtcbi8qKlxuICogVXRpbHNcbiAqL1xuXG52YXIgZ2V0Q2hhckZvckJ5dGUgPSBmdW5jdGlvbiBnZXRDaGFyRm9yQnl0ZShfYnl0ZSkge1xuICB2YXIgY2hhckNvZGUgPSBfYnl0ZTtcblxuICBpZiAoc3BlY2lhbENlYTYwOENoYXJzQ29kZXMuaGFzT3duUHJvcGVydHkoX2J5dGUpKSB7XG4gICAgY2hhckNvZGUgPSBzcGVjaWFsQ2VhNjA4Q2hhcnNDb2Rlc1tfYnl0ZV07XG4gIH1cblxuICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjaGFyQ29kZSk7XG59O1xuXG52YXIgTlJfUk9XUyA9IDE1O1xudmFyIE5SX0NPTFMgPSAxMDA7IC8vIFRhYmxlcyB0byBsb29rIHVwIHJvdyBmcm9tIFBBQyBkYXRhXG5cbnZhciByb3dzTG93Q2gxID0ge1xuICAweDExOiAxLFxuICAweDEyOiAzLFxuICAweDE1OiA1LFxuICAweDE2OiA3LFxuICAweDE3OiA5LFxuICAweDEwOiAxMSxcbiAgMHgxMzogMTIsXG4gIDB4MTQ6IDE0XG59O1xudmFyIHJvd3NIaWdoQ2gxID0ge1xuICAweDExOiAyLFxuICAweDEyOiA0LFxuICAweDE1OiA2LFxuICAweDE2OiA4LFxuICAweDE3OiAxMCxcbiAgMHgxMzogMTMsXG4gIDB4MTQ6IDE1XG59O1xudmFyIHJvd3NMb3dDaDIgPSB7XG4gIDB4MTk6IDEsXG4gIDB4MUE6IDMsXG4gIDB4MUQ6IDUsXG4gIDB4MUU6IDcsXG4gIDB4MUY6IDksXG4gIDB4MTg6IDExLFxuICAweDFCOiAxMixcbiAgMHgxQzogMTRcbn07XG52YXIgcm93c0hpZ2hDaDIgPSB7XG4gIDB4MTk6IDIsXG4gIDB4MUE6IDQsXG4gIDB4MUQ6IDYsXG4gIDB4MUU6IDgsXG4gIDB4MUY6IDEwLFxuICAweDFCOiAxMyxcbiAgMHgxQzogMTVcbn07XG52YXIgYmFja2dyb3VuZENvbG9ycyA9IFsnd2hpdGUnLCAnZ3JlZW4nLCAnYmx1ZScsICdjeWFuJywgJ3JlZCcsICd5ZWxsb3cnLCAnbWFnZW50YScsICdibGFjaycsICd0cmFuc3BhcmVudCddO1xudmFyIFZlcmJvc2VMZXZlbDtcblxuKGZ1bmN0aW9uIChWZXJib3NlTGV2ZWwpIHtcbiAgVmVyYm9zZUxldmVsW1ZlcmJvc2VMZXZlbFtcIkVSUk9SXCJdID0gMF0gPSBcIkVSUk9SXCI7XG4gIFZlcmJvc2VMZXZlbFtWZXJib3NlTGV2ZWxbXCJURVhUXCJdID0gMV0gPSBcIlRFWFRcIjtcbiAgVmVyYm9zZUxldmVsW1ZlcmJvc2VMZXZlbFtcIldBUk5JTkdcIl0gPSAyXSA9IFwiV0FSTklOR1wiO1xuICBWZXJib3NlTGV2ZWxbVmVyYm9zZUxldmVsW1wiSU5GT1wiXSA9IDJdID0gXCJJTkZPXCI7XG4gIFZlcmJvc2VMZXZlbFtWZXJib3NlTGV2ZWxbXCJERUJVR1wiXSA9IDNdID0gXCJERUJVR1wiO1xuICBWZXJib3NlTGV2ZWxbVmVyYm9zZUxldmVsW1wiREFUQVwiXSA9IDNdID0gXCJEQVRBXCI7XG59KShWZXJib3NlTGV2ZWwgfHwgKFZlcmJvc2VMZXZlbCA9IHt9KSk7XG5cbnZhciBjZWFfNjA4X3BhcnNlcl9DYXB0aW9uc0xvZ2dlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENhcHRpb25zTG9nZ2VyKCkge1xuICAgIHRoaXMudGltZSA9IG51bGw7XG4gICAgdGhpcy52ZXJib3NlTGV2ZWwgPSBWZXJib3NlTGV2ZWwuRVJST1I7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQ2FwdGlvbnNMb2dnZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5sb2cgPSBmdW5jdGlvbiBsb2coc2V2ZXJpdHksIG1zZykge1xuICAgIGlmICh0aGlzLnZlcmJvc2VMZXZlbCA+PSBzZXZlcml0eSkge1xuICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyh0aGlzLnRpbWUgKyBcIiBbXCIgKyBzZXZlcml0eSArIFwiXSBcIiArIG1zZyk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBDYXB0aW9uc0xvZ2dlcjtcbn0oKTtcblxudmFyIG51bUFycmF5VG9IZXhBcnJheSA9IGZ1bmN0aW9uIG51bUFycmF5VG9IZXhBcnJheShudW1BcnJheSkge1xuICB2YXIgaGV4QXJyYXkgPSBbXTtcblxuICBmb3IgKHZhciBqID0gMDsgaiA8IG51bUFycmF5Lmxlbmd0aDsgaisrKSB7XG4gICAgaGV4QXJyYXkucHVzaChudW1BcnJheVtqXS50b1N0cmluZygxNikpO1xuICB9XG5cbiAgcmV0dXJuIGhleEFycmF5O1xufTtcblxudmFyIFBlblN0YXRlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUGVuU3RhdGUoZm9yZWdyb3VuZCwgdW5kZXJsaW5lLCBpdGFsaWNzLCBiYWNrZ3JvdW5kLCBmbGFzaCkge1xuICAgIHRoaXMuZm9yZWdyb3VuZCA9IHZvaWQgMDtcbiAgICB0aGlzLnVuZGVybGluZSA9IHZvaWQgMDtcbiAgICB0aGlzLml0YWxpY3MgPSB2b2lkIDA7XG4gICAgdGhpcy5iYWNrZ3JvdW5kID0gdm9pZCAwO1xuICAgIHRoaXMuZmxhc2ggPSB2b2lkIDA7XG4gICAgdGhpcy5mb3JlZ3JvdW5kID0gZm9yZWdyb3VuZCB8fCAnd2hpdGUnO1xuICAgIHRoaXMudW5kZXJsaW5lID0gdW5kZXJsaW5lIHx8IGZhbHNlO1xuICAgIHRoaXMuaXRhbGljcyA9IGl0YWxpY3MgfHwgZmFsc2U7XG4gICAgdGhpcy5iYWNrZ3JvdW5kID0gYmFja2dyb3VuZCB8fCAnYmxhY2snO1xuICAgIHRoaXMuZmxhc2ggPSBmbGFzaCB8fCBmYWxzZTtcbiAgfVxuXG4gIHZhciBfcHJvdG8yID0gUGVuU3RhdGUucHJvdG90eXBlO1xuXG4gIF9wcm90bzIucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB0aGlzLmZvcmVncm91bmQgPSAnd2hpdGUnO1xuICAgIHRoaXMudW5kZXJsaW5lID0gZmFsc2U7XG4gICAgdGhpcy5pdGFsaWNzID0gZmFsc2U7XG4gICAgdGhpcy5iYWNrZ3JvdW5kID0gJ2JsYWNrJztcbiAgICB0aGlzLmZsYXNoID0gZmFsc2U7XG4gIH07XG5cbiAgX3Byb3RvMi5zZXRTdHlsZXMgPSBmdW5jdGlvbiBzZXRTdHlsZXMoc3R5bGVzKSB7XG4gICAgdmFyIGF0dHJpYnMgPSBbJ2ZvcmVncm91bmQnLCAndW5kZXJsaW5lJywgJ2l0YWxpY3MnLCAnYmFja2dyb3VuZCcsICdmbGFzaCddO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRyaWJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc3R5bGUgPSBhdHRyaWJzW2ldO1xuXG4gICAgICBpZiAoc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlKSkge1xuICAgICAgICB0aGlzW3N0eWxlXSA9IHN0eWxlc1tzdHlsZV07XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzIuaXNEZWZhdWx0ID0gZnVuY3Rpb24gaXNEZWZhdWx0KCkge1xuICAgIHJldHVybiB0aGlzLmZvcmVncm91bmQgPT09ICd3aGl0ZScgJiYgIXRoaXMudW5kZXJsaW5lICYmICF0aGlzLml0YWxpY3MgJiYgdGhpcy5iYWNrZ3JvdW5kID09PSAnYmxhY2snICYmICF0aGlzLmZsYXNoO1xuICB9O1xuXG4gIF9wcm90bzIuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzKG90aGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZm9yZWdyb3VuZCA9PT0gb3RoZXIuZm9yZWdyb3VuZCAmJiB0aGlzLnVuZGVybGluZSA9PT0gb3RoZXIudW5kZXJsaW5lICYmIHRoaXMuaXRhbGljcyA9PT0gb3RoZXIuaXRhbGljcyAmJiB0aGlzLmJhY2tncm91bmQgPT09IG90aGVyLmJhY2tncm91bmQgJiYgdGhpcy5mbGFzaCA9PT0gb3RoZXIuZmxhc2g7XG4gIH07XG5cbiAgX3Byb3RvMi5jb3B5ID0gZnVuY3Rpb24gY29weShuZXdQZW5TdGF0ZSkge1xuICAgIHRoaXMuZm9yZWdyb3VuZCA9IG5ld1BlblN0YXRlLmZvcmVncm91bmQ7XG4gICAgdGhpcy51bmRlcmxpbmUgPSBuZXdQZW5TdGF0ZS51bmRlcmxpbmU7XG4gICAgdGhpcy5pdGFsaWNzID0gbmV3UGVuU3RhdGUuaXRhbGljcztcbiAgICB0aGlzLmJhY2tncm91bmQgPSBuZXdQZW5TdGF0ZS5iYWNrZ3JvdW5kO1xuICAgIHRoaXMuZmxhc2ggPSBuZXdQZW5TdGF0ZS5mbGFzaDtcbiAgfTtcblxuICBfcHJvdG8yLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdjb2xvcj0nICsgdGhpcy5mb3JlZ3JvdW5kICsgJywgdW5kZXJsaW5lPScgKyB0aGlzLnVuZGVybGluZSArICcsIGl0YWxpY3M9JyArIHRoaXMuaXRhbGljcyArICcsIGJhY2tncm91bmQ9JyArIHRoaXMuYmFja2dyb3VuZCArICcsIGZsYXNoPScgKyB0aGlzLmZsYXNoO1xuICB9O1xuXG4gIHJldHVybiBQZW5TdGF0ZTtcbn0oKTtcbi8qKlxuICogVW5pY29kZSBjaGFyYWN0ZXIgd2l0aCBzdHlsaW5nIGFuZCBiYWNrZ3JvdW5kLlxuICogQGNvbnN0cnVjdG9yXG4gKi9cblxuXG52YXIgU3R5bGVkVW5pY29kZUNoYXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdHlsZWRVbmljb2RlQ2hhcih1Y2hhciwgZm9yZWdyb3VuZCwgdW5kZXJsaW5lLCBpdGFsaWNzLCBiYWNrZ3JvdW5kLCBmbGFzaCkge1xuICAgIHRoaXMudWNoYXIgPSB2b2lkIDA7XG4gICAgdGhpcy5wZW5TdGF0ZSA9IHZvaWQgMDtcbiAgICB0aGlzLnVjaGFyID0gdWNoYXIgfHwgJyAnOyAvLyB1bmljb2RlIGNoYXJhY3RlclxuXG4gICAgdGhpcy5wZW5TdGF0ZSA9IG5ldyBQZW5TdGF0ZShmb3JlZ3JvdW5kLCB1bmRlcmxpbmUsIGl0YWxpY3MsIGJhY2tncm91bmQsIGZsYXNoKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8zID0gU3R5bGVkVW5pY29kZUNoYXIucHJvdG90eXBlO1xuXG4gIF9wcm90bzMucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB0aGlzLnVjaGFyID0gJyAnO1xuICAgIHRoaXMucGVuU3RhdGUucmVzZXQoKTtcbiAgfTtcblxuICBfcHJvdG8zLnNldENoYXIgPSBmdW5jdGlvbiBzZXRDaGFyKHVjaGFyLCBuZXdQZW5TdGF0ZSkge1xuICAgIHRoaXMudWNoYXIgPSB1Y2hhcjtcbiAgICB0aGlzLnBlblN0YXRlLmNvcHkobmV3UGVuU3RhdGUpO1xuICB9O1xuXG4gIF9wcm90bzMuc2V0UGVuU3RhdGUgPSBmdW5jdGlvbiBzZXRQZW5TdGF0ZShuZXdQZW5TdGF0ZSkge1xuICAgIHRoaXMucGVuU3RhdGUuY29weShuZXdQZW5TdGF0ZSk7XG4gIH07XG5cbiAgX3Byb3RvMy5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMob3RoZXIpIHtcbiAgICByZXR1cm4gdGhpcy51Y2hhciA9PT0gb3RoZXIudWNoYXIgJiYgdGhpcy5wZW5TdGF0ZS5lcXVhbHMob3RoZXIucGVuU3RhdGUpO1xuICB9O1xuXG4gIF9wcm90bzMuY29weSA9IGZ1bmN0aW9uIGNvcHkobmV3Q2hhcikge1xuICAgIHRoaXMudWNoYXIgPSBuZXdDaGFyLnVjaGFyO1xuICAgIHRoaXMucGVuU3RhdGUuY29weShuZXdDaGFyLnBlblN0YXRlKTtcbiAgfTtcblxuICBfcHJvdG8zLmlzRW1wdHkgPSBmdW5jdGlvbiBpc0VtcHR5KCkge1xuICAgIHJldHVybiB0aGlzLnVjaGFyID09PSAnICcgJiYgdGhpcy5wZW5TdGF0ZS5pc0RlZmF1bHQoKTtcbiAgfTtcblxuICByZXR1cm4gU3R5bGVkVW5pY29kZUNoYXI7XG59KCk7XG4vKipcbiAqIENFQS02MDggcm93IGNvbnNpc3Rpbmcgb2YgTlJfQ09MUyBpbnN0YW5jZXMgb2YgU3R5bGVkVW5pY29kZUNoYXIuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuXG5cbnZhciBSb3cgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBSb3cobG9nZ2VyKSB7XG4gICAgdGhpcy5jaGFycyA9IHZvaWQgMDtcbiAgICB0aGlzLnBvcyA9IHZvaWQgMDtcbiAgICB0aGlzLmN1cnJQZW5TdGF0ZSA9IHZvaWQgMDtcbiAgICB0aGlzLmN1ZVN0YXJ0VGltZSA9IHZvaWQgMDtcbiAgICB0aGlzLmxvZ2dlciA9IHZvaWQgMDtcbiAgICB0aGlzLmNoYXJzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE5SX0NPTFM7IGkrKykge1xuICAgICAgdGhpcy5jaGFycy5wdXNoKG5ldyBTdHlsZWRVbmljb2RlQ2hhcigpKTtcbiAgICB9XG5cbiAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgICB0aGlzLnBvcyA9IDA7XG4gICAgdGhpcy5jdXJyUGVuU3RhdGUgPSBuZXcgUGVuU3RhdGUoKTtcbiAgfVxuXG4gIHZhciBfcHJvdG80ID0gUm93LnByb3RvdHlwZTtcblxuICBfcHJvdG80LmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyhvdGhlcikge1xuICAgIHZhciBlcXVhbCA9IHRydWU7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE5SX0NPTFM7IGkrKykge1xuICAgICAgaWYgKCF0aGlzLmNoYXJzW2ldLmVxdWFscyhvdGhlci5jaGFyc1tpXSkpIHtcbiAgICAgICAgZXF1YWwgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGVxdWFsO1xuICB9O1xuXG4gIF9wcm90bzQuY29weSA9IGZ1bmN0aW9uIGNvcHkob3RoZXIpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE5SX0NPTFM7IGkrKykge1xuICAgICAgdGhpcy5jaGFyc1tpXS5jb3B5KG90aGVyLmNoYXJzW2ldKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvNC5pc0VtcHR5ID0gZnVuY3Rpb24gaXNFbXB0eSgpIHtcbiAgICB2YXIgZW1wdHkgPSB0cnVlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOUl9DT0xTOyBpKyspIHtcbiAgICAgIGlmICghdGhpcy5jaGFyc1tpXS5pc0VtcHR5KCkpIHtcbiAgICAgICAgZW1wdHkgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGVtcHR5O1xuICB9XG4gIC8qKlxuICAgKiAgU2V0IHRoZSBjdXJzb3IgdG8gYSB2YWxpZCBjb2x1bW4uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvNC5zZXRDdXJzb3IgPSBmdW5jdGlvbiBzZXRDdXJzb3IoYWJzUG9zKSB7XG4gICAgaWYgKHRoaXMucG9zICE9PSBhYnNQb3MpIHtcbiAgICAgIHRoaXMucG9zID0gYWJzUG9zO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnBvcyA8IDApIHtcbiAgICAgIHRoaXMubG9nZ2VyLmxvZyhWZXJib3NlTGV2ZWwuREVCVUcsICdOZWdhdGl2ZSBjdXJzb3IgcG9zaXRpb24gJyArIHRoaXMucG9zKTtcbiAgICAgIHRoaXMucG9zID0gMDtcbiAgICB9IGVsc2UgaWYgKHRoaXMucG9zID4gTlJfQ09MUykge1xuICAgICAgdGhpcy5sb2dnZXIubG9nKFZlcmJvc2VMZXZlbC5ERUJVRywgJ1RvbyBsYXJnZSBjdXJzb3IgcG9zaXRpb24gJyArIHRoaXMucG9zKTtcbiAgICAgIHRoaXMucG9zID0gTlJfQ09MUztcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIE1vdmUgdGhlIGN1cnNvciByZWxhdGl2ZSB0byBjdXJyZW50IHBvc2l0aW9uLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90bzQubW92ZUN1cnNvciA9IGZ1bmN0aW9uIG1vdmVDdXJzb3IocmVsUG9zKSB7XG4gICAgdmFyIG5ld1BvcyA9IHRoaXMucG9zICsgcmVsUG9zO1xuXG4gICAgaWYgKHJlbFBvcyA+IDEpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnBvcyArIDE7IGkgPCBuZXdQb3MgKyAxOyBpKyspIHtcbiAgICAgICAgdGhpcy5jaGFyc1tpXS5zZXRQZW5TdGF0ZSh0aGlzLmN1cnJQZW5TdGF0ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zZXRDdXJzb3IobmV3UG9zKTtcbiAgfVxuICAvKipcbiAgICogQmFja3NwYWNlLCBtb3ZlIG9uZSBzdGVwIGJhY2sgYW5kIGNsZWFyIGNoYXJhY3Rlci5cbiAgICovXG4gIDtcblxuICBfcHJvdG80LmJhY2tTcGFjZSA9IGZ1bmN0aW9uIGJhY2tTcGFjZSgpIHtcbiAgICB0aGlzLm1vdmVDdXJzb3IoLTEpO1xuICAgIHRoaXMuY2hhcnNbdGhpcy5wb3NdLnNldENoYXIoJyAnLCB0aGlzLmN1cnJQZW5TdGF0ZSk7XG4gIH07XG5cbiAgX3Byb3RvNC5pbnNlcnRDaGFyID0gZnVuY3Rpb24gaW5zZXJ0Q2hhcihfYnl0ZTIpIHtcbiAgICBpZiAoX2J5dGUyID49IDB4OTApIHtcbiAgICAgIC8vIEV4dGVuZGVkIGNoYXJcbiAgICAgIHRoaXMuYmFja1NwYWNlKCk7XG4gICAgfVxuXG4gICAgdmFyIF9jaGFyID0gZ2V0Q2hhckZvckJ5dGUoX2J5dGUyKTtcblxuICAgIGlmICh0aGlzLnBvcyA+PSBOUl9DT0xTKSB7XG4gICAgICB0aGlzLmxvZ2dlci5sb2coVmVyYm9zZUxldmVsLkVSUk9SLCAnQ2Fubm90IGluc2VydCAnICsgX2J5dGUyLnRvU3RyaW5nKDE2KSArICcgKCcgKyBfY2hhciArICcpIGF0IHBvc2l0aW9uICcgKyB0aGlzLnBvcyArICcuIFNraXBwaW5nIGl0IScpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuY2hhcnNbdGhpcy5wb3NdLnNldENoYXIoX2NoYXIsIHRoaXMuY3VyclBlblN0YXRlKTtcbiAgICB0aGlzLm1vdmVDdXJzb3IoMSk7XG4gIH07XG5cbiAgX3Byb3RvNC5jbGVhckZyb21Qb3MgPSBmdW5jdGlvbiBjbGVhckZyb21Qb3Moc3RhcnRQb3MpIHtcbiAgICB2YXIgaTtcblxuICAgIGZvciAoaSA9IHN0YXJ0UG9zOyBpIDwgTlJfQ09MUzsgaSsrKSB7XG4gICAgICB0aGlzLmNoYXJzW2ldLnJlc2V0KCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzQuY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICB0aGlzLmNsZWFyRnJvbVBvcygwKTtcbiAgICB0aGlzLnBvcyA9IDA7XG4gICAgdGhpcy5jdXJyUGVuU3RhdGUucmVzZXQoKTtcbiAgfTtcblxuICBfcHJvdG80LmNsZWFyVG9FbmRPZlJvdyA9IGZ1bmN0aW9uIGNsZWFyVG9FbmRPZlJvdygpIHtcbiAgICB0aGlzLmNsZWFyRnJvbVBvcyh0aGlzLnBvcyk7XG4gIH07XG5cbiAgX3Byb3RvNC5nZXRUZXh0U3RyaW5nID0gZnVuY3Rpb24gZ2V0VGV4dFN0cmluZygpIHtcbiAgICB2YXIgY2hhcnMgPSBbXTtcbiAgICB2YXIgZW1wdHkgPSB0cnVlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOUl9DT0xTOyBpKyspIHtcbiAgICAgIHZhciBfY2hhcjIgPSB0aGlzLmNoYXJzW2ldLnVjaGFyO1xuXG4gICAgICBpZiAoX2NoYXIyICE9PSAnICcpIHtcbiAgICAgICAgZW1wdHkgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgY2hhcnMucHVzaChfY2hhcjIpO1xuICAgIH1cblxuICAgIGlmIChlbXB0eSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY2hhcnMuam9pbignJyk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzQuc2V0UGVuU3R5bGVzID0gZnVuY3Rpb24gc2V0UGVuU3R5bGVzKHN0eWxlcykge1xuICAgIHRoaXMuY3VyclBlblN0YXRlLnNldFN0eWxlcyhzdHlsZXMpO1xuICAgIHZhciBjdXJyQ2hhciA9IHRoaXMuY2hhcnNbdGhpcy5wb3NdO1xuICAgIGN1cnJDaGFyLnNldFBlblN0YXRlKHRoaXMuY3VyclBlblN0YXRlKTtcbiAgfTtcblxuICByZXR1cm4gUm93O1xufSgpO1xuLyoqXG4gKiBLZWVwIGEgQ0VBLTYwOCBzY3JlZW4gb2YgMzJ4MTUgc3R5bGVkIGNoYXJhY3RlcnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5cbnZhciBDYXB0aW9uU2NyZWVuID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ2FwdGlvblNjcmVlbihsb2dnZXIpIHtcbiAgICB0aGlzLnJvd3MgPSB2b2lkIDA7XG4gICAgdGhpcy5jdXJyUm93ID0gdm9pZCAwO1xuICAgIHRoaXMubnJSb2xsVXBSb3dzID0gdm9pZCAwO1xuICAgIHRoaXMubGFzdE91dHB1dFNjcmVlbiA9IHZvaWQgMDtcbiAgICB0aGlzLmxvZ2dlciA9IHZvaWQgMDtcbiAgICB0aGlzLnJvd3MgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTlJfUk9XUzsgaSsrKSB7XG4gICAgICB0aGlzLnJvd3MucHVzaChuZXcgUm93KGxvZ2dlcikpO1xuICAgIH0gLy8gTm90ZSB0aGF0IHdlIHVzZSB6ZXJvLWJhc2VkIG51bWJlcmluZyAoMC0xNClcblxuXG4gICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XG4gICAgdGhpcy5jdXJyUm93ID0gTlJfUk9XUyAtIDE7XG4gICAgdGhpcy5uclJvbGxVcFJvd3MgPSBudWxsO1xuICAgIHRoaXMubGFzdE91dHB1dFNjcmVlbiA9IG51bGw7XG4gICAgdGhpcy5yZXNldCgpO1xuICB9XG5cbiAgdmFyIF9wcm90bzUgPSBDYXB0aW9uU2NyZWVuLnByb3RvdHlwZTtcblxuICBfcHJvdG81LnJlc2V0ID0gZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOUl9ST1dTOyBpKyspIHtcbiAgICAgIHRoaXMucm93c1tpXS5jbGVhcigpO1xuICAgIH1cblxuICAgIHRoaXMuY3VyclJvdyA9IE5SX1JPV1MgLSAxO1xuICB9O1xuXG4gIF9wcm90bzUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzKG90aGVyKSB7XG4gICAgdmFyIGVxdWFsID0gdHJ1ZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTlJfUk9XUzsgaSsrKSB7XG4gICAgICBpZiAoIXRoaXMucm93c1tpXS5lcXVhbHMob3RoZXIucm93c1tpXSkpIHtcbiAgICAgICAgZXF1YWwgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGVxdWFsO1xuICB9O1xuXG4gIF9wcm90bzUuY29weSA9IGZ1bmN0aW9uIGNvcHkob3RoZXIpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE5SX1JPV1M7IGkrKykge1xuICAgICAgdGhpcy5yb3dzW2ldLmNvcHkob3RoZXIucm93c1tpXSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzUuaXNFbXB0eSA9IGZ1bmN0aW9uIGlzRW1wdHkoKSB7XG4gICAgdmFyIGVtcHR5ID0gdHJ1ZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTlJfUk9XUzsgaSsrKSB7XG4gICAgICBpZiAoIXRoaXMucm93c1tpXS5pc0VtcHR5KCkpIHtcbiAgICAgICAgZW1wdHkgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGVtcHR5O1xuICB9O1xuXG4gIF9wcm90bzUuYmFja1NwYWNlID0gZnVuY3Rpb24gYmFja1NwYWNlKCkge1xuICAgIHZhciByb3cgPSB0aGlzLnJvd3NbdGhpcy5jdXJyUm93XTtcbiAgICByb3cuYmFja1NwYWNlKCk7XG4gIH07XG5cbiAgX3Byb3RvNS5jbGVhclRvRW5kT2ZSb3cgPSBmdW5jdGlvbiBjbGVhclRvRW5kT2ZSb3coKSB7XG4gICAgdmFyIHJvdyA9IHRoaXMucm93c1t0aGlzLmN1cnJSb3ddO1xuICAgIHJvdy5jbGVhclRvRW5kT2ZSb3coKTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IGEgY2hhcmFjdGVyICh3aXRob3V0IHN0eWxpbmcpIGluIHRoZSBjdXJyZW50IHJvdy5cbiAgICovXG4gIDtcblxuICBfcHJvdG81Lmluc2VydENoYXIgPSBmdW5jdGlvbiBpbnNlcnRDaGFyKF9jaGFyMykge1xuICAgIHZhciByb3cgPSB0aGlzLnJvd3NbdGhpcy5jdXJyUm93XTtcbiAgICByb3cuaW5zZXJ0Q2hhcihfY2hhcjMpO1xuICB9O1xuXG4gIF9wcm90bzUuc2V0UGVuID0gZnVuY3Rpb24gc2V0UGVuKHN0eWxlcykge1xuICAgIHZhciByb3cgPSB0aGlzLnJvd3NbdGhpcy5jdXJyUm93XTtcbiAgICByb3cuc2V0UGVuU3R5bGVzKHN0eWxlcyk7XG4gIH07XG5cbiAgX3Byb3RvNS5tb3ZlQ3Vyc29yID0gZnVuY3Rpb24gbW92ZUN1cnNvcihyZWxQb3MpIHtcbiAgICB2YXIgcm93ID0gdGhpcy5yb3dzW3RoaXMuY3VyclJvd107XG4gICAgcm93Lm1vdmVDdXJzb3IocmVsUG9zKTtcbiAgfTtcblxuICBfcHJvdG81LnNldEN1cnNvciA9IGZ1bmN0aW9uIHNldEN1cnNvcihhYnNQb3MpIHtcbiAgICB0aGlzLmxvZ2dlci5sb2coVmVyYm9zZUxldmVsLklORk8sICdzZXRDdXJzb3I6ICcgKyBhYnNQb3MpO1xuICAgIHZhciByb3cgPSB0aGlzLnJvd3NbdGhpcy5jdXJyUm93XTtcbiAgICByb3cuc2V0Q3Vyc29yKGFic1Bvcyk7XG4gIH07XG5cbiAgX3Byb3RvNS5zZXRQQUMgPSBmdW5jdGlvbiBzZXRQQUMocGFjRGF0YSkge1xuICAgIHRoaXMubG9nZ2VyLmxvZyhWZXJib3NlTGV2ZWwuSU5GTywgJ3BhY0RhdGEgPSAnICsgSlNPTi5zdHJpbmdpZnkocGFjRGF0YSkpO1xuICAgIHZhciBuZXdSb3cgPSBwYWNEYXRhLnJvdyAtIDE7XG5cbiAgICBpZiAodGhpcy5uclJvbGxVcFJvd3MgJiYgbmV3Um93IDwgdGhpcy5uclJvbGxVcFJvd3MgLSAxKSB7XG4gICAgICBuZXdSb3cgPSB0aGlzLm5yUm9sbFVwUm93cyAtIDE7XG4gICAgfSAvLyBNYWtlIHN1cmUgdGhpcyBvbmx5IGFmZmVjdHMgUm9sbC11cCBDYXB0aW9ucyBieSBjaGVja2luZyB0aGlzLm5yUm9sbFVwUm93c1xuXG5cbiAgICBpZiAodGhpcy5uclJvbGxVcFJvd3MgJiYgdGhpcy5jdXJyUm93ICE9PSBuZXdSb3cpIHtcbiAgICAgIC8vIGNsZWFyIGFsbCByb3dzIGZpcnN0XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IE5SX1JPV1M7IGkrKykge1xuICAgICAgICB0aGlzLnJvd3NbaV0uY2xlYXIoKTtcbiAgICAgIH0gLy8gQ29weSB0aGlzLm5yUm9sbFVwUm93cyByb3dzIGZyb20gbGFzdE91dHB1dFNjcmVlbiBhbmQgcGxhY2UgaXQgaW4gdGhlIG5ld1JvdyBsb2NhdGlvblxuICAgICAgLy8gdG9wUm93SW5kZXggLSB0aGUgc3RhcnQgb2Ygcm93cyB0byBjb3B5IChpbmNsdXNpdmUgaW5kZXgpXG5cblxuICAgICAgdmFyIHRvcFJvd0luZGV4ID0gdGhpcy5jdXJyUm93ICsgMSAtIHRoaXMubnJSb2xsVXBSb3dzOyAvLyBXZSBvbmx5IGNvcHkgaWYgdGhlIGxhc3QgcG9zaXRpb24gd2FzIGFscmVhZHkgc2hvd24uXG4gICAgICAvLyBXZSB1c2UgdGhlIGN1ZVN0YXJ0VGltZSB2YWx1ZSB0byBjaGVjayB0aGlzLlxuXG4gICAgICB2YXIgbGFzdE91dHB1dFNjcmVlbiA9IHRoaXMubGFzdE91dHB1dFNjcmVlbjtcblxuICAgICAgaWYgKGxhc3RPdXRwdXRTY3JlZW4pIHtcbiAgICAgICAgdmFyIHByZXZMaW5lVGltZSA9IGxhc3RPdXRwdXRTY3JlZW4ucm93c1t0b3BSb3dJbmRleF0uY3VlU3RhcnRUaW1lO1xuICAgICAgICB2YXIgdGltZSA9IHRoaXMubG9nZ2VyLnRpbWU7XG5cbiAgICAgICAgaWYgKHByZXZMaW5lVGltZSAmJiB0aW1lICE9PSBudWxsICYmIHByZXZMaW5lVGltZSA8IHRpbWUpIHtcbiAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgdGhpcy5uclJvbGxVcFJvd3M7IF9pKyspIHtcbiAgICAgICAgICAgIHRoaXMucm93c1tuZXdSb3cgLSB0aGlzLm5yUm9sbFVwUm93cyArIF9pICsgMV0uY29weShsYXN0T3V0cHV0U2NyZWVuLnJvd3NbdG9wUm93SW5kZXggKyBfaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuY3VyclJvdyA9IG5ld1JvdztcbiAgICB2YXIgcm93ID0gdGhpcy5yb3dzW3RoaXMuY3VyclJvd107XG5cbiAgICBpZiAocGFjRGF0YS5pbmRlbnQgIT09IG51bGwpIHtcbiAgICAgIHZhciBpbmRlbnQgPSBwYWNEYXRhLmluZGVudDtcbiAgICAgIHZhciBwcmV2UG9zID0gTWF0aC5tYXgoaW5kZW50IC0gMSwgMCk7XG4gICAgICByb3cuc2V0Q3Vyc29yKHBhY0RhdGEuaW5kZW50KTtcbiAgICAgIHBhY0RhdGEuY29sb3IgPSByb3cuY2hhcnNbcHJldlBvc10ucGVuU3RhdGUuZm9yZWdyb3VuZDtcbiAgICB9XG5cbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgZm9yZWdyb3VuZDogcGFjRGF0YS5jb2xvcixcbiAgICAgIHVuZGVybGluZTogcGFjRGF0YS51bmRlcmxpbmUsXG4gICAgICBpdGFsaWNzOiBwYWNEYXRhLml0YWxpY3MsXG4gICAgICBiYWNrZ3JvdW5kOiAnYmxhY2snLFxuICAgICAgZmxhc2g6IGZhbHNlXG4gICAgfTtcbiAgICB0aGlzLnNldFBlbihzdHlsZXMpO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgYmFja2dyb3VuZC9leHRyYSBmb3JlZ3JvdW5kLCBidXQgZmlyc3QgZG8gYmFja19zcGFjZSwgYW5kIHRoZW4gaW5zZXJ0IHNwYWNlIChiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSkuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvNS5zZXRCa2dEYXRhID0gZnVuY3Rpb24gc2V0QmtnRGF0YShia2dEYXRhKSB7XG4gICAgdGhpcy5sb2dnZXIubG9nKFZlcmJvc2VMZXZlbC5JTkZPLCAnYmtnRGF0YSA9ICcgKyBKU09OLnN0cmluZ2lmeShia2dEYXRhKSk7XG4gICAgdGhpcy5iYWNrU3BhY2UoKTtcbiAgICB0aGlzLnNldFBlbihia2dEYXRhKTtcbiAgICB0aGlzLmluc2VydENoYXIoMHgyMCk7IC8vIFNwYWNlXG4gIH07XG5cbiAgX3Byb3RvNS5zZXRSb2xsVXBSb3dzID0gZnVuY3Rpb24gc2V0Um9sbFVwUm93cyhuclJvd3MpIHtcbiAgICB0aGlzLm5yUm9sbFVwUm93cyA9IG5yUm93cztcbiAgfTtcblxuICBfcHJvdG81LnJvbGxVcCA9IGZ1bmN0aW9uIHJvbGxVcCgpIHtcbiAgICBpZiAodGhpcy5uclJvbGxVcFJvd3MgPT09IG51bGwpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmxvZyhWZXJib3NlTGV2ZWwuREVCVUcsICdyb2xsX3VwIGJ1dCBuclJvbGxVcFJvd3Mgbm90IHNldCB5ZXQnKTtcbiAgICAgIHJldHVybjsgLy8gTm90IHByb3Blcmx5IHNldHVwXG4gICAgfVxuXG4gICAgdGhpcy5sb2dnZXIubG9nKFZlcmJvc2VMZXZlbC5URVhULCB0aGlzLmdldERpc3BsYXlUZXh0KCkpO1xuICAgIHZhciB0b3BSb3dJbmRleCA9IHRoaXMuY3VyclJvdyArIDEgLSB0aGlzLm5yUm9sbFVwUm93cztcbiAgICB2YXIgdG9wUm93ID0gdGhpcy5yb3dzLnNwbGljZSh0b3BSb3dJbmRleCwgMSlbMF07XG4gICAgdG9wUm93LmNsZWFyKCk7XG4gICAgdGhpcy5yb3dzLnNwbGljZSh0aGlzLmN1cnJSb3csIDAsIHRvcFJvdyk7XG4gICAgdGhpcy5sb2dnZXIubG9nKFZlcmJvc2VMZXZlbC5JTkZPLCAnUm9sbGluZyB1cCcpOyAvLyB0aGlzLmxvZ2dlci5sb2coVmVyYm9zZUxldmVsLlRFWFQsIHRoaXMuZ2V0X2Rpc3BsYXlfdGV4dCgpKVxuICB9XG4gIC8qKlxuICAgKiBHZXQgYWxsIG5vbi1lbXB0eSByb3dzIHdpdGggYXMgdW5pY29kZSB0ZXh0LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90bzUuZ2V0RGlzcGxheVRleHQgPSBmdW5jdGlvbiBnZXREaXNwbGF5VGV4dChhc09uZVJvdykge1xuICAgIGFzT25lUm93ID0gYXNPbmVSb3cgfHwgZmFsc2U7XG4gICAgdmFyIGRpc3BsYXlUZXh0ID0gW107XG4gICAgdmFyIHRleHQgPSAnJztcbiAgICB2YXIgcm93TnIgPSAtMTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTlJfUk9XUzsgaSsrKSB7XG4gICAgICB2YXIgcm93VGV4dCA9IHRoaXMucm93c1tpXS5nZXRUZXh0U3RyaW5nKCk7XG5cbiAgICAgIGlmIChyb3dUZXh0KSB7XG4gICAgICAgIHJvd05yID0gaSArIDE7XG5cbiAgICAgICAgaWYgKGFzT25lUm93KSB7XG4gICAgICAgICAgZGlzcGxheVRleHQucHVzaCgnUm93ICcgKyByb3dOciArICc6IFxcJycgKyByb3dUZXh0ICsgJ1xcJycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRpc3BsYXlUZXh0LnB1c2gocm93VGV4dC50cmltKCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRpc3BsYXlUZXh0Lmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChhc09uZVJvdykge1xuICAgICAgICB0ZXh0ID0gJ1snICsgZGlzcGxheVRleHQuam9pbignIHwgJykgKyAnXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZXh0ID0gZGlzcGxheVRleHQuam9pbignXFxuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRleHQ7XG4gIH07XG5cbiAgX3Byb3RvNS5nZXRUZXh0QW5kRm9ybWF0ID0gZnVuY3Rpb24gZ2V0VGV4dEFuZEZvcm1hdCgpIHtcbiAgICByZXR1cm4gdGhpcy5yb3dzO1xuICB9O1xuXG4gIHJldHVybiBDYXB0aW9uU2NyZWVuO1xufSgpOyAvLyB2YXIgbW9kZXMgPSBbJ01PREVfUk9MTC1VUCcsICdNT0RFX1BPUC1PTicsICdNT0RFX1BBSU5ULU9OJywgJ01PREVfVEVYVCddO1xuXG52YXIgQ2VhNjA4Q2hhbm5lbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENlYTYwOENoYW5uZWwoY2hhbm5lbE51bWJlciwgb3V0cHV0RmlsdGVyLCBsb2dnZXIpIHtcbiAgICB0aGlzLmNoTnIgPSB2b2lkIDA7XG4gICAgdGhpcy5vdXRwdXRGaWx0ZXIgPSB2b2lkIDA7XG4gICAgdGhpcy5tb2RlID0gdm9pZCAwO1xuICAgIHRoaXMudmVyYm9zZSA9IHZvaWQgMDtcbiAgICB0aGlzLmRpc3BsYXllZE1lbW9yeSA9IHZvaWQgMDtcbiAgICB0aGlzLm5vbkRpc3BsYXllZE1lbW9yeSA9IHZvaWQgMDtcbiAgICB0aGlzLmxhc3RPdXRwdXRTY3JlZW4gPSB2b2lkIDA7XG4gICAgdGhpcy5jdXJyUm9sbFVwUm93ID0gdm9pZCAwO1xuICAgIHRoaXMud3JpdGVTY3JlZW4gPSB2b2lkIDA7XG4gICAgdGhpcy5jdWVTdGFydFRpbWUgPSB2b2lkIDA7XG4gICAgdGhpcy5sb2dnZXIgPSB2b2lkIDA7XG4gICAgdGhpcy5jaE5yID0gY2hhbm5lbE51bWJlcjtcbiAgICB0aGlzLm91dHB1dEZpbHRlciA9IG91dHB1dEZpbHRlcjtcbiAgICB0aGlzLm1vZGUgPSBudWxsO1xuICAgIHRoaXMudmVyYm9zZSA9IDA7XG4gICAgdGhpcy5kaXNwbGF5ZWRNZW1vcnkgPSBuZXcgQ2FwdGlvblNjcmVlbihsb2dnZXIpO1xuICAgIHRoaXMubm9uRGlzcGxheWVkTWVtb3J5ID0gbmV3IENhcHRpb25TY3JlZW4obG9nZ2VyKTtcbiAgICB0aGlzLmxhc3RPdXRwdXRTY3JlZW4gPSBuZXcgQ2FwdGlvblNjcmVlbihsb2dnZXIpO1xuICAgIHRoaXMuY3VyclJvbGxVcFJvdyA9IHRoaXMuZGlzcGxheWVkTWVtb3J5LnJvd3NbTlJfUk9XUyAtIDFdO1xuICAgIHRoaXMud3JpdGVTY3JlZW4gPSB0aGlzLmRpc3BsYXllZE1lbW9yeTtcbiAgICB0aGlzLm1vZGUgPSBudWxsO1xuICAgIHRoaXMuY3VlU3RhcnRUaW1lID0gbnVsbDsgLy8gS2VlcHMgdHJhY2sgb2Ygd2hlcmUgYSBjdWUgc3RhcnRlZC5cblxuICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xuICB9XG5cbiAgdmFyIF9wcm90bzYgPSBDZWE2MDhDaGFubmVsLnByb3RvdHlwZTtcblxuICBfcHJvdG82LnJlc2V0ID0gZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgdGhpcy5tb2RlID0gbnVsbDtcbiAgICB0aGlzLmRpc3BsYXllZE1lbW9yeS5yZXNldCgpO1xuICAgIHRoaXMubm9uRGlzcGxheWVkTWVtb3J5LnJlc2V0KCk7XG4gICAgdGhpcy5sYXN0T3V0cHV0U2NyZWVuLnJlc2V0KCk7XG4gICAgdGhpcy5vdXRwdXRGaWx0ZXIucmVzZXQoKTtcbiAgICB0aGlzLmN1cnJSb2xsVXBSb3cgPSB0aGlzLmRpc3BsYXllZE1lbW9yeS5yb3dzW05SX1JPV1MgLSAxXTtcbiAgICB0aGlzLndyaXRlU2NyZWVuID0gdGhpcy5kaXNwbGF5ZWRNZW1vcnk7XG4gICAgdGhpcy5tb2RlID0gbnVsbDtcbiAgICB0aGlzLmN1ZVN0YXJ0VGltZSA9IG51bGw7XG4gIH07XG5cbiAgX3Byb3RvNi5nZXRIYW5kbGVyID0gZnVuY3Rpb24gZ2V0SGFuZGxlcigpIHtcbiAgICByZXR1cm4gdGhpcy5vdXRwdXRGaWx0ZXI7XG4gIH07XG5cbiAgX3Byb3RvNi5zZXRIYW5kbGVyID0gZnVuY3Rpb24gc2V0SGFuZGxlcihuZXdIYW5kbGVyKSB7XG4gICAgdGhpcy5vdXRwdXRGaWx0ZXIgPSBuZXdIYW5kbGVyO1xuICB9O1xuXG4gIF9wcm90bzYuc2V0UEFDID0gZnVuY3Rpb24gc2V0UEFDKHBhY0RhdGEpIHtcbiAgICB0aGlzLndyaXRlU2NyZWVuLnNldFBBQyhwYWNEYXRhKTtcbiAgfTtcblxuICBfcHJvdG82LnNldEJrZ0RhdGEgPSBmdW5jdGlvbiBzZXRCa2dEYXRhKGJrZ0RhdGEpIHtcbiAgICB0aGlzLndyaXRlU2NyZWVuLnNldEJrZ0RhdGEoYmtnRGF0YSk7XG4gIH07XG5cbiAgX3Byb3RvNi5zZXRNb2RlID0gZnVuY3Rpb24gc2V0TW9kZShuZXdNb2RlKSB7XG4gICAgaWYgKG5ld01vZGUgPT09IHRoaXMubW9kZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMubW9kZSA9IG5ld01vZGU7XG4gICAgdGhpcy5sb2dnZXIubG9nKFZlcmJvc2VMZXZlbC5JTkZPLCAnTU9ERT0nICsgbmV3TW9kZSk7XG5cbiAgICBpZiAodGhpcy5tb2RlID09PSAnTU9ERV9QT1AtT04nKSB7XG4gICAgICB0aGlzLndyaXRlU2NyZWVuID0gdGhpcy5ub25EaXNwbGF5ZWRNZW1vcnk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud3JpdGVTY3JlZW4gPSB0aGlzLmRpc3BsYXllZE1lbW9yeTtcbiAgICAgIHRoaXMud3JpdGVTY3JlZW4ucmVzZXQoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5tb2RlICE9PSAnTU9ERV9ST0xMLVVQJykge1xuICAgICAgdGhpcy5kaXNwbGF5ZWRNZW1vcnkubnJSb2xsVXBSb3dzID0gbnVsbDtcbiAgICAgIHRoaXMubm9uRGlzcGxheWVkTWVtb3J5Lm5yUm9sbFVwUm93cyA9IG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy5tb2RlID0gbmV3TW9kZTtcbiAgfTtcblxuICBfcHJvdG82Lmluc2VydENoYXJzID0gZnVuY3Rpb24gaW5zZXJ0Q2hhcnMoY2hhcnMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndyaXRlU2NyZWVuLmluc2VydENoYXIoY2hhcnNbaV0pO1xuICAgIH1cblxuICAgIHZhciBzY3JlZW4gPSB0aGlzLndyaXRlU2NyZWVuID09PSB0aGlzLmRpc3BsYXllZE1lbW9yeSA/ICdESVNQJyA6ICdOT05fRElTUCc7XG4gICAgdGhpcy5sb2dnZXIubG9nKFZlcmJvc2VMZXZlbC5JTkZPLCBzY3JlZW4gKyAnOiAnICsgdGhpcy53cml0ZVNjcmVlbi5nZXREaXNwbGF5VGV4dCh0cnVlKSk7XG5cbiAgICBpZiAodGhpcy5tb2RlID09PSAnTU9ERV9QQUlOVC1PTicgfHwgdGhpcy5tb2RlID09PSAnTU9ERV9ST0xMLVVQJykge1xuICAgICAgdGhpcy5sb2dnZXIubG9nKFZlcmJvc2VMZXZlbC5URVhULCAnRElTUExBWUVEOiAnICsgdGhpcy5kaXNwbGF5ZWRNZW1vcnkuZ2V0RGlzcGxheVRleHQodHJ1ZSkpO1xuICAgICAgdGhpcy5vdXRwdXREYXRhVXBkYXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzYuY2NSQ0wgPSBmdW5jdGlvbiBjY1JDTCgpIHtcbiAgICAvLyBSZXN1bWUgQ2FwdGlvbiBMb2FkaW5nIChzd2l0Y2ggbW9kZSB0byBQb3AgT24pXG4gICAgdGhpcy5sb2dnZXIubG9nKFZlcmJvc2VMZXZlbC5JTkZPLCAnUkNMIC0gUmVzdW1lIENhcHRpb24gTG9hZGluZycpO1xuICAgIHRoaXMuc2V0TW9kZSgnTU9ERV9QT1AtT04nKTtcbiAgfTtcblxuICBfcHJvdG82LmNjQlMgPSBmdW5jdGlvbiBjY0JTKCkge1xuICAgIC8vIEJhY2tTcGFjZVxuICAgIHRoaXMubG9nZ2VyLmxvZyhWZXJib3NlTGV2ZWwuSU5GTywgJ0JTIC0gQmFja1NwYWNlJyk7XG5cbiAgICBpZiAodGhpcy5tb2RlID09PSAnTU9ERV9URVhUJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMud3JpdGVTY3JlZW4uYmFja1NwYWNlKCk7XG5cbiAgICBpZiAodGhpcy53cml0ZVNjcmVlbiA9PT0gdGhpcy5kaXNwbGF5ZWRNZW1vcnkpIHtcbiAgICAgIHRoaXMub3V0cHV0RGF0YVVwZGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG82LmNjQU9GID0gZnVuY3Rpb24gY2NBT0YoKSB7Ly8gUmVzZXJ2ZWQgKGZvcm1lcmx5IEFsYXJtIE9mZilcbiAgfTtcblxuICBfcHJvdG82LmNjQU9OID0gZnVuY3Rpb24gY2NBT04oKSB7Ly8gUmVzZXJ2ZWQgKGZvcm1lcmx5IEFsYXJtIE9uKVxuICB9O1xuXG4gIF9wcm90bzYuY2NERVIgPSBmdW5jdGlvbiBjY0RFUigpIHtcbiAgICAvLyBEZWxldGUgdG8gRW5kIG9mIFJvd1xuICAgIHRoaXMubG9nZ2VyLmxvZyhWZXJib3NlTGV2ZWwuSU5GTywgJ0RFUi0gRGVsZXRlIHRvIEVuZCBvZiBSb3cnKTtcbiAgICB0aGlzLndyaXRlU2NyZWVuLmNsZWFyVG9FbmRPZlJvdygpO1xuICAgIHRoaXMub3V0cHV0RGF0YVVwZGF0ZSgpO1xuICB9O1xuXG4gIF9wcm90bzYuY2NSVSA9IGZ1bmN0aW9uIGNjUlUobnJSb3dzKSB7XG4gICAgLy8gUm9sbC1VcCBDYXB0aW9ucy0yLDMsb3IgNCBSb3dzXG4gICAgdGhpcy5sb2dnZXIubG9nKFZlcmJvc2VMZXZlbC5JTkZPLCAnUlUoJyArIG5yUm93cyArICcpIC0gUm9sbCBVcCcpO1xuICAgIHRoaXMud3JpdGVTY3JlZW4gPSB0aGlzLmRpc3BsYXllZE1lbW9yeTtcbiAgICB0aGlzLnNldE1vZGUoJ01PREVfUk9MTC1VUCcpO1xuICAgIHRoaXMud3JpdGVTY3JlZW4uc2V0Um9sbFVwUm93cyhuclJvd3MpO1xuICB9O1xuXG4gIF9wcm90bzYuY2NGT04gPSBmdW5jdGlvbiBjY0ZPTigpIHtcbiAgICAvLyBGbGFzaCBPblxuICAgIHRoaXMubG9nZ2VyLmxvZyhWZXJib3NlTGV2ZWwuSU5GTywgJ0ZPTiAtIEZsYXNoIE9uJyk7XG4gICAgdGhpcy53cml0ZVNjcmVlbi5zZXRQZW4oe1xuICAgICAgZmxhc2g6IHRydWVcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG82LmNjUkRDID0gZnVuY3Rpb24gY2NSREMoKSB7XG4gICAgLy8gUmVzdW1lIERpcmVjdCBDYXB0aW9uaW5nIChzd2l0Y2ggbW9kZSB0byBQYWludE9uKVxuICAgIHRoaXMubG9nZ2VyLmxvZyhWZXJib3NlTGV2ZWwuSU5GTywgJ1JEQyAtIFJlc3VtZSBEaXJlY3QgQ2FwdGlvbmluZycpO1xuICAgIHRoaXMuc2V0TW9kZSgnTU9ERV9QQUlOVC1PTicpO1xuICB9O1xuXG4gIF9wcm90bzYuY2NUUiA9IGZ1bmN0aW9uIGNjVFIoKSB7XG4gICAgLy8gVGV4dCBSZXN0YXJ0IGluIHRleHQgbW9kZSAobm90IHN1cHBvcnRlZCwgaG93ZXZlcilcbiAgICB0aGlzLmxvZ2dlci5sb2coVmVyYm9zZUxldmVsLklORk8sICdUUicpO1xuICAgIHRoaXMuc2V0TW9kZSgnTU9ERV9URVhUJyk7XG4gIH07XG5cbiAgX3Byb3RvNi5jY1JURCA9IGZ1bmN0aW9uIGNjUlREKCkge1xuICAgIC8vIFJlc3VtZSBUZXh0IERpc3BsYXkgaW4gVGV4dCBtb2RlIChub3Qgc3VwcG9ydGVkLCBob3dldmVyKVxuICAgIHRoaXMubG9nZ2VyLmxvZyhWZXJib3NlTGV2ZWwuSU5GTywgJ1JURCcpO1xuICAgIHRoaXMuc2V0TW9kZSgnTU9ERV9URVhUJyk7XG4gIH07XG5cbiAgX3Byb3RvNi5jY0VETSA9IGZ1bmN0aW9uIGNjRURNKCkge1xuICAgIC8vIEVyYXNlIERpc3BsYXllZCBNZW1vcnlcbiAgICB0aGlzLmxvZ2dlci5sb2coVmVyYm9zZUxldmVsLklORk8sICdFRE0gLSBFcmFzZSBEaXNwbGF5ZWQgTWVtb3J5Jyk7XG4gICAgdGhpcy5kaXNwbGF5ZWRNZW1vcnkucmVzZXQoKTtcbiAgICB0aGlzLm91dHB1dERhdGFVcGRhdGUodHJ1ZSk7XG4gIH07XG5cbiAgX3Byb3RvNi5jY0NSID0gZnVuY3Rpb24gY2NDUigpIHtcbiAgICAvLyBDYXJyaWFnZSBSZXR1cm5cbiAgICB0aGlzLmxvZ2dlci5sb2coVmVyYm9zZUxldmVsLklORk8sICdDUiAtIENhcnJpYWdlIFJldHVybicpO1xuICAgIHRoaXMud3JpdGVTY3JlZW4ucm9sbFVwKCk7XG4gICAgdGhpcy5vdXRwdXREYXRhVXBkYXRlKHRydWUpO1xuICB9O1xuXG4gIF9wcm90bzYuY2NFTk0gPSBmdW5jdGlvbiBjY0VOTSgpIHtcbiAgICAvLyBFcmFzZSBOb24tRGlzcGxheWVkIE1lbW9yeVxuICAgIHRoaXMubG9nZ2VyLmxvZyhWZXJib3NlTGV2ZWwuSU5GTywgJ0VOTSAtIEVyYXNlIE5vbi1kaXNwbGF5ZWQgTWVtb3J5Jyk7XG4gICAgdGhpcy5ub25EaXNwbGF5ZWRNZW1vcnkucmVzZXQoKTtcbiAgfTtcblxuICBfcHJvdG82LmNjRU9DID0gZnVuY3Rpb24gY2NFT0MoKSB7XG4gICAgLy8gRW5kIG9mIENhcHRpb24gKEZsaXAgTWVtb3JpZXMpXG4gICAgdGhpcy5sb2dnZXIubG9nKFZlcmJvc2VMZXZlbC5JTkZPLCAnRU9DIC0gRW5kIE9mIENhcHRpb24nKTtcblxuICAgIGlmICh0aGlzLm1vZGUgPT09ICdNT0RFX1BPUC1PTicpIHtcbiAgICAgIHZhciB0bXAgPSB0aGlzLmRpc3BsYXllZE1lbW9yeTtcbiAgICAgIHRoaXMuZGlzcGxheWVkTWVtb3J5ID0gdGhpcy5ub25EaXNwbGF5ZWRNZW1vcnk7XG4gICAgICB0aGlzLm5vbkRpc3BsYXllZE1lbW9yeSA9IHRtcDtcbiAgICAgIHRoaXMud3JpdGVTY3JlZW4gPSB0aGlzLm5vbkRpc3BsYXllZE1lbW9yeTtcbiAgICAgIHRoaXMubG9nZ2VyLmxvZyhWZXJib3NlTGV2ZWwuVEVYVCwgJ0RJU1A6ICcgKyB0aGlzLmRpc3BsYXllZE1lbW9yeS5nZXREaXNwbGF5VGV4dCgpKTtcbiAgICB9XG5cbiAgICB0aGlzLm91dHB1dERhdGFVcGRhdGUodHJ1ZSk7XG4gIH07XG5cbiAgX3Byb3RvNi5jY1RPID0gZnVuY3Rpb24gY2NUTyhuckNvbHMpIHtcbiAgICAvLyBUYWIgT2Zmc2V0IDEsMiwgb3IgMyBjb2x1bW5zXG4gICAgdGhpcy5sb2dnZXIubG9nKFZlcmJvc2VMZXZlbC5JTkZPLCAnVE8oJyArIG5yQ29scyArICcpIC0gVGFiIE9mZnNldCcpO1xuICAgIHRoaXMud3JpdGVTY3JlZW4ubW92ZUN1cnNvcihuckNvbHMpO1xuICB9O1xuXG4gIF9wcm90bzYuY2NNSURST1cgPSBmdW5jdGlvbiBjY01JRFJPVyhzZWNvbmRCeXRlKSB7XG4gICAgLy8gUGFyc2UgTUlEUk9XIGNvbW1hbmRcbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgZmxhc2g6IGZhbHNlXG4gICAgfTtcbiAgICBzdHlsZXMudW5kZXJsaW5lID0gc2Vjb25kQnl0ZSAlIDIgPT09IDE7XG4gICAgc3R5bGVzLml0YWxpY3MgPSBzZWNvbmRCeXRlID49IDB4MmU7XG5cbiAgICBpZiAoIXN0eWxlcy5pdGFsaWNzKSB7XG4gICAgICB2YXIgY29sb3JJbmRleCA9IE1hdGguZmxvb3Ioc2Vjb25kQnl0ZSAvIDIpIC0gMHgxMDtcbiAgICAgIHZhciBjb2xvcnMgPSBbJ3doaXRlJywgJ2dyZWVuJywgJ2JsdWUnLCAnY3lhbicsICdyZWQnLCAneWVsbG93JywgJ21hZ2VudGEnXTtcbiAgICAgIHN0eWxlcy5mb3JlZ3JvdW5kID0gY29sb3JzW2NvbG9ySW5kZXhdO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXMuZm9yZWdyb3VuZCA9ICd3aGl0ZSc7XG4gICAgfVxuXG4gICAgdGhpcy5sb2dnZXIubG9nKFZlcmJvc2VMZXZlbC5JTkZPLCAnTUlEUk9XOiAnICsgSlNPTi5zdHJpbmdpZnkoc3R5bGVzKSk7XG4gICAgdGhpcy53cml0ZVNjcmVlbi5zZXRQZW4oc3R5bGVzKTtcbiAgfTtcblxuICBfcHJvdG82Lm91dHB1dERhdGFVcGRhdGUgPSBmdW5jdGlvbiBvdXRwdXREYXRhVXBkYXRlKGRpc3BhdGNoKSB7XG4gICAgaWYgKGRpc3BhdGNoID09PSB2b2lkIDApIHtcbiAgICAgIGRpc3BhdGNoID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHRpbWUgPSB0aGlzLmxvZ2dlci50aW1lO1xuXG4gICAgaWYgKHRpbWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vdXRwdXRGaWx0ZXIpIHtcbiAgICAgIGlmICh0aGlzLmN1ZVN0YXJ0VGltZSA9PT0gbnVsbCAmJiAhdGhpcy5kaXNwbGF5ZWRNZW1vcnkuaXNFbXB0eSgpKSB7XG4gICAgICAgIC8vIFN0YXJ0IG9mIGEgbmV3IGN1ZVxuICAgICAgICB0aGlzLmN1ZVN0YXJ0VGltZSA9IHRpbWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIXRoaXMuZGlzcGxheWVkTWVtb3J5LmVxdWFscyh0aGlzLmxhc3RPdXRwdXRTY3JlZW4pKSB7XG4gICAgICAgICAgdGhpcy5vdXRwdXRGaWx0ZXIubmV3Q3VlKHRoaXMuY3VlU3RhcnRUaW1lLCB0aW1lLCB0aGlzLmxhc3RPdXRwdXRTY3JlZW4pO1xuXG4gICAgICAgICAgaWYgKGRpc3BhdGNoICYmIHRoaXMub3V0cHV0RmlsdGVyLmRpc3BhdGNoQ3VlKSB7XG4gICAgICAgICAgICB0aGlzLm91dHB1dEZpbHRlci5kaXNwYXRjaEN1ZSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuY3VlU3RhcnRUaW1lID0gdGhpcy5kaXNwbGF5ZWRNZW1vcnkuaXNFbXB0eSgpID8gbnVsbCA6IHRpbWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5sYXN0T3V0cHV0U2NyZWVuLmNvcHkodGhpcy5kaXNwbGF5ZWRNZW1vcnkpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG82LmN1ZVNwbGl0QXRUaW1lID0gZnVuY3Rpb24gY3VlU3BsaXRBdFRpbWUodCkge1xuICAgIGlmICh0aGlzLm91dHB1dEZpbHRlcikge1xuICAgICAgaWYgKCF0aGlzLmRpc3BsYXllZE1lbW9yeS5pc0VtcHR5KCkpIHtcbiAgICAgICAgaWYgKHRoaXMub3V0cHV0RmlsdGVyLm5ld0N1ZSkge1xuICAgICAgICAgIHRoaXMub3V0cHV0RmlsdGVyLm5ld0N1ZSh0aGlzLmN1ZVN0YXJ0VGltZSwgdCwgdGhpcy5kaXNwbGF5ZWRNZW1vcnkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jdWVTdGFydFRpbWUgPSB0O1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gQ2VhNjA4Q2hhbm5lbDtcbn0oKTtcblxudmFyIENlYTYwOFBhcnNlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENlYTYwOFBhcnNlcihmaWVsZCwgb3V0MSwgb3V0Mikge1xuICAgIHRoaXMuY2hhbm5lbHMgPSB2b2lkIDA7XG4gICAgdGhpcy5jdXJyZW50Q2hhbm5lbCA9IDA7XG4gICAgdGhpcy5jbWRIaXN0b3J5ID0gdm9pZCAwO1xuICAgIHRoaXMubG9nZ2VyID0gdm9pZCAwO1xuICAgIHZhciBsb2dnZXIgPSBuZXcgY2VhXzYwOF9wYXJzZXJfQ2FwdGlvbnNMb2dnZXIoKTtcbiAgICB0aGlzLmNoYW5uZWxzID0gW251bGwsIG5ldyBDZWE2MDhDaGFubmVsKGZpZWxkLCBvdXQxLCBsb2dnZXIpLCBuZXcgQ2VhNjA4Q2hhbm5lbChmaWVsZCArIDEsIG91dDIsIGxvZ2dlcildO1xuICAgIHRoaXMuY21kSGlzdG9yeSA9IGNyZWF0ZUNtZEhpc3RvcnkoKTtcbiAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgfVxuXG4gIHZhciBfcHJvdG83ID0gQ2VhNjA4UGFyc2VyLnByb3RvdHlwZTtcblxuICBfcHJvdG83LmdldEhhbmRsZXIgPSBmdW5jdGlvbiBnZXRIYW5kbGVyKGNoYW5uZWwpIHtcbiAgICByZXR1cm4gdGhpcy5jaGFubmVsc1tjaGFubmVsXS5nZXRIYW5kbGVyKCk7XG4gIH07XG5cbiAgX3Byb3RvNy5zZXRIYW5kbGVyID0gZnVuY3Rpb24gc2V0SGFuZGxlcihjaGFubmVsLCBuZXdIYW5kbGVyKSB7XG4gICAgdGhpcy5jaGFubmVsc1tjaGFubmVsXS5zZXRIYW5kbGVyKG5ld0hhbmRsZXIpO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgZGF0YSBmb3IgdGltZSB0IGluIGZvcm1zIG9mIGxpc3Qgb2YgYnl0ZXMgKHVuc2lnbmVkIGludHMpLiBUaGUgYnl0ZXMgYXJlIHRyZWF0ZWQgYXMgcGFpcnMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvNy5hZGREYXRhID0gZnVuY3Rpb24gYWRkRGF0YSh0aW1lLCBieXRlTGlzdCkge1xuICAgIHZhciBjbWRGb3VuZDtcbiAgICB2YXIgYTtcbiAgICB2YXIgYjtcbiAgICB2YXIgY2hhcnNGb3VuZCA9IGZhbHNlO1xuICAgIHRoaXMubG9nZ2VyLnRpbWUgPSB0aW1lO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlTGlzdC5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgYSA9IGJ5dGVMaXN0W2ldICYgMHg3ZjtcbiAgICAgIGIgPSBieXRlTGlzdFtpICsgMV0gJiAweDdmO1xuXG4gICAgICBpZiAoYSA9PT0gMCAmJiBiID09PSAwKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5sb2dnZXIubG9nKFZlcmJvc2VMZXZlbC5EQVRBLCAnWycgKyBudW1BcnJheVRvSGV4QXJyYXkoW2J5dGVMaXN0W2ldLCBieXRlTGlzdFtpICsgMV1dKSArICddIC0+ICgnICsgbnVtQXJyYXlUb0hleEFycmF5KFthLCBiXSkgKyAnKScpO1xuICAgICAgfVxuXG4gICAgICBjbWRGb3VuZCA9IHRoaXMucGFyc2VDbWQoYSwgYik7XG5cbiAgICAgIGlmICghY21kRm91bmQpIHtcbiAgICAgICAgY21kRm91bmQgPSB0aGlzLnBhcnNlTWlkcm93KGEsIGIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWNtZEZvdW5kKSB7XG4gICAgICAgIGNtZEZvdW5kID0gdGhpcy5wYXJzZVBBQyhhLCBiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFjbWRGb3VuZCkge1xuICAgICAgICBjbWRGb3VuZCA9IHRoaXMucGFyc2VCYWNrZ3JvdW5kQXR0cmlidXRlcyhhLCBiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFjbWRGb3VuZCkge1xuICAgICAgICBjaGFyc0ZvdW5kID0gdGhpcy5wYXJzZUNoYXJzKGEsIGIpO1xuXG4gICAgICAgIGlmIChjaGFyc0ZvdW5kKSB7XG4gICAgICAgICAgdmFyIGN1cnJDaE5yID0gdGhpcy5jdXJyZW50Q2hhbm5lbDtcblxuICAgICAgICAgIGlmIChjdXJyQ2hOciAmJiBjdXJyQ2hOciA+IDApIHtcbiAgICAgICAgICAgIHZhciBjaGFubmVsID0gdGhpcy5jaGFubmVsc1tjdXJyQ2hOcl07XG4gICAgICAgICAgICBjaGFubmVsLmluc2VydENoYXJzKGNoYXJzRm91bmQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coVmVyYm9zZUxldmVsLldBUk5JTkcsICdObyBjaGFubmVsIGZvdW5kIHlldC4gVEVYVC1NT0RFPycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIWNtZEZvdW5kICYmICFjaGFyc0ZvdW5kKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZyhWZXJib3NlTGV2ZWwuV0FSTklORywgJ0NvdWxkblxcJ3QgcGFyc2UgY2xlYW5lZCBkYXRhICcgKyBudW1BcnJheVRvSGV4QXJyYXkoW2EsIGJdKSArICcgb3JpZzogJyArIG51bUFycmF5VG9IZXhBcnJheShbYnl0ZUxpc3RbaV0sIGJ5dGVMaXN0W2kgKyAxXV0pKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFBhcnNlIENvbW1hbmQuXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBUZWxscyBpZiBhIGNvbW1hbmQgd2FzIGZvdW5kXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvNy5wYXJzZUNtZCA9IGZ1bmN0aW9uIHBhcnNlQ21kKGEsIGIpIHtcbiAgICB2YXIgY21kSGlzdG9yeSA9IHRoaXMuY21kSGlzdG9yeTtcbiAgICB2YXIgY29uZDEgPSAoYSA9PT0gMHgxNCB8fCBhID09PSAweDFDIHx8IGEgPT09IDB4MTUgfHwgYSA9PT0gMHgxRCkgJiYgYiA+PSAweDIwICYmIGIgPD0gMHgyRjtcbiAgICB2YXIgY29uZDIgPSAoYSA9PT0gMHgxNyB8fCBhID09PSAweDFGKSAmJiBiID49IDB4MjEgJiYgYiA8PSAweDIzO1xuXG4gICAgaWYgKCEoY29uZDEgfHwgY29uZDIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGhhc0NtZFJlcGVhdGVkKGEsIGIsIGNtZEhpc3RvcnkpKSB7XG4gICAgICBzZXRMYXN0Q21kKG51bGwsIG51bGwsIGNtZEhpc3RvcnkpO1xuICAgICAgdGhpcy5sb2dnZXIubG9nKFZlcmJvc2VMZXZlbC5ERUJVRywgJ1JlcGVhdGVkIGNvbW1hbmQgKCcgKyBudW1BcnJheVRvSGV4QXJyYXkoW2EsIGJdKSArICcpIGlzIGRyb3BwZWQnKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBjaE5yID0gYSA9PT0gMHgxNCB8fCBhID09PSAweDE1IHx8IGEgPT09IDB4MTcgPyAxIDogMjtcbiAgICB2YXIgY2hhbm5lbCA9IHRoaXMuY2hhbm5lbHNbY2hOcl07XG5cbiAgICBpZiAoYSA9PT0gMHgxNCB8fCBhID09PSAweDE1IHx8IGEgPT09IDB4MUMgfHwgYSA9PT0gMHgxRCkge1xuICAgICAgaWYgKGIgPT09IDB4MjApIHtcbiAgICAgICAgY2hhbm5lbC5jY1JDTCgpO1xuICAgICAgfSBlbHNlIGlmIChiID09PSAweDIxKSB7XG4gICAgICAgIGNoYW5uZWwuY2NCUygpO1xuICAgICAgfSBlbHNlIGlmIChiID09PSAweDIyKSB7XG4gICAgICAgIGNoYW5uZWwuY2NBT0YoKTtcbiAgICAgIH0gZWxzZSBpZiAoYiA9PT0gMHgyMykge1xuICAgICAgICBjaGFubmVsLmNjQU9OKCk7XG4gICAgICB9IGVsc2UgaWYgKGIgPT09IDB4MjQpIHtcbiAgICAgICAgY2hhbm5lbC5jY0RFUigpO1xuICAgICAgfSBlbHNlIGlmIChiID09PSAweDI1KSB7XG4gICAgICAgIGNoYW5uZWwuY2NSVSgyKTtcbiAgICAgIH0gZWxzZSBpZiAoYiA9PT0gMHgyNikge1xuICAgICAgICBjaGFubmVsLmNjUlUoMyk7XG4gICAgICB9IGVsc2UgaWYgKGIgPT09IDB4MjcpIHtcbiAgICAgICAgY2hhbm5lbC5jY1JVKDQpO1xuICAgICAgfSBlbHNlIGlmIChiID09PSAweDI4KSB7XG4gICAgICAgIGNoYW5uZWwuY2NGT04oKTtcbiAgICAgIH0gZWxzZSBpZiAoYiA9PT0gMHgyOSkge1xuICAgICAgICBjaGFubmVsLmNjUkRDKCk7XG4gICAgICB9IGVsc2UgaWYgKGIgPT09IDB4MkEpIHtcbiAgICAgICAgY2hhbm5lbC5jY1RSKCk7XG4gICAgICB9IGVsc2UgaWYgKGIgPT09IDB4MkIpIHtcbiAgICAgICAgY2hhbm5lbC5jY1JURCgpO1xuICAgICAgfSBlbHNlIGlmIChiID09PSAweDJDKSB7XG4gICAgICAgIGNoYW5uZWwuY2NFRE0oKTtcbiAgICAgIH0gZWxzZSBpZiAoYiA9PT0gMHgyRCkge1xuICAgICAgICBjaGFubmVsLmNjQ1IoKTtcbiAgICAgIH0gZWxzZSBpZiAoYiA9PT0gMHgyRSkge1xuICAgICAgICBjaGFubmVsLmNjRU5NKCk7XG4gICAgICB9IGVsc2UgaWYgKGIgPT09IDB4MkYpIHtcbiAgICAgICAgY2hhbm5lbC5jY0VPQygpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBhID09IDB4MTcgfHwgYSA9PSAweDFGXG4gICAgICBjaGFubmVsLmNjVE8oYiAtIDB4MjApO1xuICAgIH1cblxuICAgIHNldExhc3RDbWQoYSwgYiwgY21kSGlzdG9yeSk7XG4gICAgdGhpcy5jdXJyZW50Q2hhbm5lbCA9IGNoTnI7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIFBhcnNlIG1pZHJvdyBzdHlsaW5nIGNvbW1hbmRcbiAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvNy5wYXJzZU1pZHJvdyA9IGZ1bmN0aW9uIHBhcnNlTWlkcm93KGEsIGIpIHtcbiAgICB2YXIgY2hOciA9IDA7XG5cbiAgICBpZiAoKGEgPT09IDB4MTEgfHwgYSA9PT0gMHgxOSkgJiYgYiA+PSAweDIwICYmIGIgPD0gMHgyZikge1xuICAgICAgaWYgKGEgPT09IDB4MTEpIHtcbiAgICAgICAgY2hOciA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaE5yID0gMjtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoTnIgIT09IHRoaXMuY3VycmVudENoYW5uZWwpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIubG9nKFZlcmJvc2VMZXZlbC5FUlJPUiwgJ01pc21hdGNoIGNoYW5uZWwgaW4gbWlkcm93IHBhcnNpbmcnKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2hhbm5lbCA9IHRoaXMuY2hhbm5lbHNbY2hOcl07XG5cbiAgICAgIGlmICghY2hhbm5lbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGNoYW5uZWwuY2NNSURST1coYik7XG4gICAgICB0aGlzLmxvZ2dlci5sb2coVmVyYm9zZUxldmVsLkRFQlVHLCAnTUlEUk9XICgnICsgbnVtQXJyYXlUb0hleEFycmF5KFthLCBiXSkgKyAnKScpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBQYXJzZSBQcmVhYmxlIEFjY2VzcyBDb2RlcyAoVGFibGUgNTMpLlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gVGVsbHMgaWYgUEFDIGZvdW5kXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvNy5wYXJzZVBBQyA9IGZ1bmN0aW9uIHBhcnNlUEFDKGEsIGIpIHtcbiAgICB2YXIgcm93O1xuICAgIHZhciBjbWRIaXN0b3J5ID0gdGhpcy5jbWRIaXN0b3J5O1xuICAgIHZhciBjYXNlMSA9IChhID49IDB4MTEgJiYgYSA8PSAweDE3IHx8IGEgPj0gMHgxOSAmJiBhIDw9IDB4MUYpICYmIGIgPj0gMHg0MCAmJiBiIDw9IDB4N0Y7XG4gICAgdmFyIGNhc2UyID0gKGEgPT09IDB4MTAgfHwgYSA9PT0gMHgxOCkgJiYgYiA+PSAweDQwICYmIGIgPD0gMHg1RjtcblxuICAgIGlmICghKGNhc2UxIHx8IGNhc2UyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChoYXNDbWRSZXBlYXRlZChhLCBiLCBjbWRIaXN0b3J5KSkge1xuICAgICAgc2V0TGFzdENtZChudWxsLCBudWxsLCBjbWRIaXN0b3J5KTtcbiAgICAgIHJldHVybiB0cnVlOyAvLyBSZXBlYXRlZCBjb21tYW5kcyBhcmUgZHJvcHBlZCAob25jZSlcbiAgICB9XG5cbiAgICB2YXIgY2hOciA9IGEgPD0gMHgxNyA/IDEgOiAyO1xuXG4gICAgaWYgKGIgPj0gMHg0MCAmJiBiIDw9IDB4NUYpIHtcbiAgICAgIHJvdyA9IGNoTnIgPT09IDEgPyByb3dzTG93Q2gxW2FdIDogcm93c0xvd0NoMlthXTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gMHg2MCA8PSBiIDw9IDB4N0ZcbiAgICAgIHJvdyA9IGNoTnIgPT09IDEgPyByb3dzSGlnaENoMVthXSA6IHJvd3NIaWdoQ2gyW2FdO1xuICAgIH1cblxuICAgIHZhciBjaGFubmVsID0gdGhpcy5jaGFubmVsc1tjaE5yXTtcblxuICAgIGlmICghY2hhbm5lbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNoYW5uZWwuc2V0UEFDKHRoaXMuaW50ZXJwcmV0UEFDKHJvdywgYikpO1xuICAgIHNldExhc3RDbWQoYSwgYiwgY21kSGlzdG9yeSk7XG4gICAgdGhpcy5jdXJyZW50Q2hhbm5lbCA9IGNoTnI7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIEludGVycHJldCB0aGUgc2Vjb25kIGJ5dGUgb2YgdGhlIHBhYywgYW5kIHJldHVybiB0aGUgaW5mb3JtYXRpb24uXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IHBhY0RhdGEgd2l0aCBzdHlsZSBwYXJhbWV0ZXJzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90bzcuaW50ZXJwcmV0UEFDID0gZnVuY3Rpb24gaW50ZXJwcmV0UEFDKHJvdywgX2J5dGUzKSB7XG4gICAgdmFyIHBhY0luZGV4ID0gX2J5dGUzO1xuICAgIHZhciBwYWNEYXRhID0ge1xuICAgICAgY29sb3I6IG51bGwsXG4gICAgICBpdGFsaWNzOiBmYWxzZSxcbiAgICAgIGluZGVudDogbnVsbCxcbiAgICAgIHVuZGVybGluZTogZmFsc2UsXG4gICAgICByb3c6IHJvd1xuICAgIH07XG5cbiAgICBpZiAoX2J5dGUzID4gMHg1Rikge1xuICAgICAgcGFjSW5kZXggPSBfYnl0ZTMgLSAweDYwO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYWNJbmRleCA9IF9ieXRlMyAtIDB4NDA7XG4gICAgfVxuXG4gICAgcGFjRGF0YS51bmRlcmxpbmUgPSAocGFjSW5kZXggJiAxKSA9PT0gMTtcblxuICAgIGlmIChwYWNJbmRleCA8PSAweGQpIHtcbiAgICAgIHBhY0RhdGEuY29sb3IgPSBbJ3doaXRlJywgJ2dyZWVuJywgJ2JsdWUnLCAnY3lhbicsICdyZWQnLCAneWVsbG93JywgJ21hZ2VudGEnLCAnd2hpdGUnXVtNYXRoLmZsb29yKHBhY0luZGV4IC8gMildO1xuICAgIH0gZWxzZSBpZiAocGFjSW5kZXggPD0gMHhmKSB7XG4gICAgICBwYWNEYXRhLml0YWxpY3MgPSB0cnVlO1xuICAgICAgcGFjRGF0YS5jb2xvciA9ICd3aGl0ZSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhY0RhdGEuaW5kZW50ID0gTWF0aC5mbG9vcigocGFjSW5kZXggLSAweDEwKSAvIDIpICogNDtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFjRGF0YTsgLy8gTm90ZSB0aGF0IHJvdyBoYXMgemVybyBvZmZzZXQuIFRoZSBzcGVjIHVzZXMgMS5cbiAgfVxuICAvKipcbiAgICogUGFyc2UgY2hhcmFjdGVycy5cbiAgICogQHJldHVybnMgQW4gYXJyYXkgd2l0aCAxIHRvIDIgY29kZXMgY29ycmVzcG9uZGluZyB0byBjaGFycywgaWYgZm91bmQuIG51bGwgb3RoZXJ3aXNlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90bzcucGFyc2VDaGFycyA9IGZ1bmN0aW9uIHBhcnNlQ2hhcnMoYSwgYikge1xuICAgIHZhciBjaGFubmVsTnI7XG4gICAgdmFyIGNoYXJDb2RlcyA9IG51bGw7XG4gICAgdmFyIGNoYXJDb2RlMSA9IG51bGw7XG5cbiAgICBpZiAoYSA+PSAweDE5KSB7XG4gICAgICBjaGFubmVsTnIgPSAyO1xuICAgICAgY2hhckNvZGUxID0gYSAtIDg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNoYW5uZWxOciA9IDE7XG4gICAgICBjaGFyQ29kZTEgPSBhO1xuICAgIH1cblxuICAgIGlmIChjaGFyQ29kZTEgPj0gMHgxMSAmJiBjaGFyQ29kZTEgPD0gMHgxMykge1xuICAgICAgLy8gU3BlY2lhbCBjaGFyYWN0ZXJcbiAgICAgIHZhciBvbmVDb2RlID0gYjtcblxuICAgICAgaWYgKGNoYXJDb2RlMSA9PT0gMHgxMSkge1xuICAgICAgICBvbmVDb2RlID0gYiArIDB4NTA7XG4gICAgICB9IGVsc2UgaWYgKGNoYXJDb2RlMSA9PT0gMHgxMikge1xuICAgICAgICBvbmVDb2RlID0gYiArIDB4NzA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbmVDb2RlID0gYiArIDB4OTA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubG9nZ2VyLmxvZyhWZXJib3NlTGV2ZWwuSU5GTywgJ1NwZWNpYWwgY2hhciBcXCcnICsgZ2V0Q2hhckZvckJ5dGUob25lQ29kZSkgKyAnXFwnIGluIGNoYW5uZWwgJyArIGNoYW5uZWxOcik7XG4gICAgICBjaGFyQ29kZXMgPSBbb25lQ29kZV07XG4gICAgfSBlbHNlIGlmIChhID49IDB4MjAgJiYgYSA8PSAweDdmKSB7XG4gICAgICBjaGFyQ29kZXMgPSBiID09PSAwID8gW2FdIDogW2EsIGJdO1xuICAgIH1cblxuICAgIGlmIChjaGFyQ29kZXMpIHtcbiAgICAgIHZhciBoZXhDb2RlcyA9IG51bUFycmF5VG9IZXhBcnJheShjaGFyQ29kZXMpO1xuICAgICAgdGhpcy5sb2dnZXIubG9nKFZlcmJvc2VMZXZlbC5ERUJVRywgJ0NoYXIgY29kZXMgPSAgJyArIGhleENvZGVzLmpvaW4oJywnKSk7XG4gICAgICBzZXRMYXN0Q21kKGEsIGIsIHRoaXMuY21kSGlzdG9yeSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoYXJDb2RlcztcbiAgfVxuICAvKipcbiAgICogUGFyc2UgZXh0ZW5kZWQgYmFja2dyb3VuZCBhdHRyaWJ1dGVzIGFzIHdlbGwgYXMgbmV3IGZvcmVncm91bmQgY29sb3IgYmxhY2suXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBUZWxscyBpZiBiYWNrZ3JvdW5kIGF0dHJpYnV0ZXMgYXJlIGZvdW5kXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvNy5wYXJzZUJhY2tncm91bmRBdHRyaWJ1dGVzID0gZnVuY3Rpb24gcGFyc2VCYWNrZ3JvdW5kQXR0cmlidXRlcyhhLCBiKSB7XG4gICAgdmFyIGNhc2UxID0gKGEgPT09IDB4MTAgfHwgYSA9PT0gMHgxOCkgJiYgYiA+PSAweDIwICYmIGIgPD0gMHgyZjtcbiAgICB2YXIgY2FzZTIgPSAoYSA9PT0gMHgxNyB8fCBhID09PSAweDFmKSAmJiBiID49IDB4MmQgJiYgYiA8PSAweDJmO1xuXG4gICAgaWYgKCEoY2FzZTEgfHwgY2FzZTIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGluZGV4O1xuICAgIHZhciBia2dEYXRhID0ge307XG5cbiAgICBpZiAoYSA9PT0gMHgxMCB8fCBhID09PSAweDE4KSB7XG4gICAgICBpbmRleCA9IE1hdGguZmxvb3IoKGIgLSAweDIwKSAvIDIpO1xuICAgICAgYmtnRGF0YS5iYWNrZ3JvdW5kID0gYmFja2dyb3VuZENvbG9yc1tpbmRleF07XG5cbiAgICAgIGlmIChiICUgMiA9PT0gMSkge1xuICAgICAgICBia2dEYXRhLmJhY2tncm91bmQgPSBia2dEYXRhLmJhY2tncm91bmQgKyAnX3NlbWknO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYiA9PT0gMHgyZCkge1xuICAgICAgYmtnRGF0YS5iYWNrZ3JvdW5kID0gJ3RyYW5zcGFyZW50JztcbiAgICB9IGVsc2Uge1xuICAgICAgYmtnRGF0YS5mb3JlZ3JvdW5kID0gJ2JsYWNrJztcblxuICAgICAgaWYgKGIgPT09IDB4MmYpIHtcbiAgICAgICAgYmtnRGF0YS51bmRlcmxpbmUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjaE5yID0gYSA8PSAweDE3ID8gMSA6IDI7XG4gICAgdmFyIGNoYW5uZWwgPSB0aGlzLmNoYW5uZWxzW2NoTnJdO1xuICAgIGNoYW5uZWwuc2V0QmtnRGF0YShia2dEYXRhKTtcbiAgICBzZXRMYXN0Q21kKGEsIGIsIHRoaXMuY21kSGlzdG9yeSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIFJlc2V0IHN0YXRlIG9mIHBhcnNlciBhbmQgaXRzIGNoYW5uZWxzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90bzcucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE9iamVjdC5rZXlzKHRoaXMuY2hhbm5lbHMpLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hhbm5lbCA9IHRoaXMuY2hhbm5lbHNbaV07XG5cbiAgICAgIGlmIChjaGFubmVsKSB7XG4gICAgICAgIGNoYW5uZWwucmVzZXQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmNtZEhpc3RvcnkgPSBjcmVhdGVDbWRIaXN0b3J5KCk7XG4gIH1cbiAgLyoqXG4gICAqIFRyaWdnZXIgdGhlIGdlbmVyYXRpb24gb2YgYSBjdWUsIGFuZCB0aGUgc3RhcnQgb2YgYSBuZXcgb25lIGlmIGRpc3BsYXlTY3JlZW5zIGFyZSBub3QgZW1wdHkuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvNy5jdWVTcGxpdEF0VGltZSA9IGZ1bmN0aW9uIGN1ZVNwbGl0QXRUaW1lKHQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY2hhbm5lbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjaGFubmVsID0gdGhpcy5jaGFubmVsc1tpXTtcblxuICAgICAgaWYgKGNoYW5uZWwpIHtcbiAgICAgICAgY2hhbm5lbC5jdWVTcGxpdEF0VGltZSh0KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIENlYTYwOFBhcnNlcjtcbn0oKTtcblxuZnVuY3Rpb24gc2V0TGFzdENtZChhLCBiLCBjbWRIaXN0b3J5KSB7XG4gIGNtZEhpc3RvcnkuYSA9IGE7XG4gIGNtZEhpc3RvcnkuYiA9IGI7XG59XG5cbmZ1bmN0aW9uIGhhc0NtZFJlcGVhdGVkKGEsIGIsIGNtZEhpc3RvcnkpIHtcbiAgcmV0dXJuIGNtZEhpc3RvcnkuYSA9PT0gYSAmJiBjbWRIaXN0b3J5LmIgPT09IGI7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNtZEhpc3RvcnkoKSB7XG4gIHJldHVybiB7XG4gICAgYTogbnVsbCxcbiAgICBiOiBudWxsXG4gIH07XG59XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGNlYV82MDhfcGFyc2VyID0gKENlYTYwOFBhcnNlcik7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy91dGlscy9vdXRwdXQtZmlsdGVyLnRzXG52YXIgT3V0cHV0RmlsdGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gT3V0cHV0RmlsdGVyKHRpbWVsaW5lQ29udHJvbGxlciwgdHJhY2tOYW1lKSB7XG4gICAgdGhpcy50aW1lbGluZUNvbnRyb2xsZXIgPSB2b2lkIDA7XG4gICAgdGhpcy5jdWVSYW5nZXMgPSBbXTtcbiAgICB0aGlzLnRyYWNrTmFtZSA9IHZvaWQgMDtcbiAgICB0aGlzLnN0YXJ0VGltZSA9IG51bGw7XG4gICAgdGhpcy5lbmRUaW1lID0gbnVsbDtcbiAgICB0aGlzLnNjcmVlbiA9IG51bGw7XG4gICAgdGhpcy50aW1lbGluZUNvbnRyb2xsZXIgPSB0aW1lbGluZUNvbnRyb2xsZXI7XG4gICAgdGhpcy50cmFja05hbWUgPSB0cmFja05hbWU7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gT3V0cHV0RmlsdGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZGlzcGF0Y2hDdWUgPSBmdW5jdGlvbiBkaXNwYXRjaEN1ZSgpIHtcbiAgICBpZiAodGhpcy5zdGFydFRpbWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnRpbWVsaW5lQ29udHJvbGxlci5hZGRDdWVzKHRoaXMudHJhY2tOYW1lLCB0aGlzLnN0YXJ0VGltZSwgdGhpcy5lbmRUaW1lLCB0aGlzLnNjcmVlbiwgdGhpcy5jdWVSYW5nZXMpO1xuICAgIHRoaXMuc3RhcnRUaW1lID0gbnVsbDtcbiAgfTtcblxuICBfcHJvdG8ubmV3Q3VlID0gZnVuY3Rpb24gbmV3Q3VlKHN0YXJ0VGltZSwgZW5kVGltZSwgc2NyZWVuKSB7XG4gICAgaWYgKHRoaXMuc3RhcnRUaW1lID09PSBudWxsIHx8IHRoaXMuc3RhcnRUaW1lID4gc3RhcnRUaW1lKSB7XG4gICAgICB0aGlzLnN0YXJ0VGltZSA9IHN0YXJ0VGltZTtcbiAgICB9XG5cbiAgICB0aGlzLmVuZFRpbWUgPSBlbmRUaW1lO1xuICAgIHRoaXMuc2NyZWVuID0gc2NyZWVuO1xuICAgIHRoaXMudGltZWxpbmVDb250cm9sbGVyLmNyZWF0ZUNhcHRpb25zVHJhY2sodGhpcy50cmFja05hbWUpO1xuICB9O1xuXG4gIF9wcm90by5yZXNldCA9IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIHRoaXMuY3VlUmFuZ2VzID0gW107XG4gIH07XG5cbiAgcmV0dXJuIE91dHB1dEZpbHRlcjtcbn0oKTtcblxuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy91dGlscy93ZWJ2dHQtcGFyc2VyLmpzXG5cblxuXG5cblxuIC8vIFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aCBpcyBub3Qgc3VwcG9ydGVkIGluIElFMTFcblxudmFyIHN0YXJ0c1dpdGggPSBmdW5jdGlvbiBzdGFydHNXaXRoKGlucHV0U3RyaW5nLCBzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKSB7XG4gIHJldHVybiBpbnB1dFN0cmluZy5zdWJzdHIocG9zaXRpb24gfHwgMCwgc2VhcmNoU3RyaW5nLmxlbmd0aCkgPT09IHNlYXJjaFN0cmluZztcbn07XG5cbnZhciB3ZWJ2dHRfcGFyc2VyX2N1ZVN0cmluZzJtaWxsaXMgPSBmdW5jdGlvbiBjdWVTdHJpbmcybWlsbGlzKHRpbWVTdHJpbmcpIHtcbiAgdmFyIHRzID0gcGFyc2VJbnQodGltZVN0cmluZy5zdWJzdHIoLTMpKTtcbiAgdmFyIHNlY3MgPSBwYXJzZUludCh0aW1lU3RyaW5nLnN1YnN0cigtNiwgMikpO1xuICB2YXIgbWlucyA9IHBhcnNlSW50KHRpbWVTdHJpbmcuc3Vic3RyKC05LCAyKSk7XG4gIHZhciBob3VycyA9IHRpbWVTdHJpbmcubGVuZ3RoID4gOSA/IHBhcnNlSW50KHRpbWVTdHJpbmcuc3Vic3RyKDAsIHRpbWVTdHJpbmcuaW5kZXhPZignOicpKSkgOiAwO1xuXG4gIGlmICghT2JqZWN0KG51bWJlcltcImlzRmluaXRlTnVtYmVyXCJdKSh0cykgfHwgIU9iamVjdChudW1iZXJbXCJpc0Zpbml0ZU51bWJlclwiXSkoc2VjcykgfHwgIU9iamVjdChudW1iZXJbXCJpc0Zpbml0ZU51bWJlclwiXSkobWlucykgfHwgIU9iamVjdChudW1iZXJbXCJpc0Zpbml0ZU51bWJlclwiXSkoaG91cnMpKSB7XG4gICAgdGhyb3cgRXJyb3IoXCJNYWxmb3JtZWQgWC1USU1FU1RBTVAtTUFQOiBMb2NhbDpcIiArIHRpbWVTdHJpbmcpO1xuICB9XG5cbiAgdHMgKz0gMTAwMCAqIHNlY3M7XG4gIHRzICs9IDYwICogMTAwMCAqIG1pbnM7XG4gIHRzICs9IDYwICogNjAgKiAxMDAwICogaG91cnM7XG4gIHJldHVybiB0cztcbn07IC8vIEZyb20gaHR0cHM6Ly9naXRodWIuY29tL2Rhcmtza3lhcHAvc3RyaW5nLWhhc2hcblxuXG52YXIgaGFzaCA9IGZ1bmN0aW9uIGhhc2godGV4dCkge1xuICB2YXIgaGFzaCA9IDUzODE7XG4gIHZhciBpID0gdGV4dC5sZW5ndGg7XG5cbiAgd2hpbGUgKGkpIHtcbiAgICBoYXNoID0gaGFzaCAqIDMzIF4gdGV4dC5jaGFyQ29kZUF0KC0taSk7XG4gIH1cblxuICByZXR1cm4gKGhhc2ggPj4+IDApLnRvU3RyaW5nKCk7XG59O1xuXG52YXIgY2FsY3VsYXRlT2Zmc2V0ID0gZnVuY3Rpb24gY2FsY3VsYXRlT2Zmc2V0KHZ0dENDcywgY2MsIHByZXNlbnRhdGlvblRpbWUpIHtcbiAgdmFyIGN1cnJDQyA9IHZ0dENDc1tjY107XG4gIHZhciBwcmV2Q0MgPSB2dHRDQ3NbY3VyckNDLnByZXZDQ107IC8vIFRoaXMgaXMgdGhlIGZpcnN0IGRpc2NvbnRpbnVpdHkgb3IgY3VlcyBoYXZlIGJlZW4gcHJvY2Vzc2VkIHNpbmNlIHRoZSBsYXN0IGRpc2NvbnRpbnVpdHlcbiAgLy8gT2Zmc2V0ID0gY3VycmVudCBkaXNjb250aW51aXR5IHRpbWVcblxuICBpZiAoIXByZXZDQyB8fCAhcHJldkNDLm5ldyAmJiBjdXJyQ0MubmV3KSB7XG4gICAgdnR0Q0NzLmNjT2Zmc2V0ID0gdnR0Q0NzLnByZXNlbnRhdGlvbk9mZnNldCA9IGN1cnJDQy5zdGFydDtcbiAgICBjdXJyQ0MubmV3ID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9IC8vIFRoZXJlIGhhdmUgYmVlbiBkaXNjb250aW51aXRpZXMgc2luY2UgY3VlcyB3ZXJlIGxhc3QgcGFyc2VkLlxuICAvLyBPZmZzZXQgPSB0aW1lIGVsYXBzZWRcblxuXG4gIHdoaWxlIChwcmV2Q0MgJiYgcHJldkNDLm5ldykge1xuICAgIHZ0dENDcy5jY09mZnNldCArPSBjdXJyQ0Muc3RhcnQgLSBwcmV2Q0Muc3RhcnQ7XG4gICAgY3VyckNDLm5ldyA9IGZhbHNlO1xuICAgIGN1cnJDQyA9IHByZXZDQztcbiAgICBwcmV2Q0MgPSB2dHRDQ3NbY3VyckNDLnByZXZDQ107XG4gIH1cblxuICB2dHRDQ3MucHJlc2VudGF0aW9uT2Zmc2V0ID0gcHJlc2VudGF0aW9uVGltZTtcbn07XG5cbnZhciBXZWJWVFRQYXJzZXIgPSB7XG4gIHBhcnNlOiBmdW5jdGlvbiBwYXJzZSh2dHRCeXRlQXJyYXksIHN5bmNQVFMsIHZ0dENDcywgY2MsIGNhbGxCYWNrLCBlcnJvckNhbGxCYWNrKSB7XG4gICAgLy8gQ29udmVydCBieXRlQXJyYXkgaW50byBzdHJpbmcsIHJlcGxhY2luZyBhbnkgc29tZXdoYXQgZXhvdGljIGxpbmVmZWVkcyB3aXRoIFwiXFxuXCIsIHRoZW4gc3BsaXQgb24gdGhhdCBjaGFyYWN0ZXIuXG4gICAgdmFyIHJlID0gL1xcclxcbnxcXG5cXHJ8XFxufFxcci9nOyAvLyBVaW50OEFycmF5LnByb3RvdHlwZS5yZWR1Y2UgaXMgbm90IGltcGxlbWVudGVkIGluIElFMTFcblxuICAgIHZhciB2dHRMaW5lcyA9IE9iamVjdChpZDNbXCJ1dGY4QXJyYXlUb1N0clwiXSkobmV3IFVpbnQ4QXJyYXkodnR0Qnl0ZUFycmF5KSkudHJpbSgpLnJlcGxhY2UocmUsICdcXG4nKS5zcGxpdCgnXFxuJyk7XG4gICAgdmFyIGN1ZVRpbWUgPSAnMDA6MDAuMDAwJztcbiAgICB2YXIgbXBlZ1RzID0gMDtcbiAgICB2YXIgbG9jYWxUaW1lID0gMDtcbiAgICB2YXIgcHJlc2VudGF0aW9uVGltZSA9IDA7XG4gICAgdmFyIGN1ZXMgPSBbXTtcbiAgICB2YXIgcGFyc2luZ0Vycm9yO1xuICAgIHZhciBpbkhlYWRlciA9IHRydWU7XG4gICAgdmFyIHRpbWVzdGFtcE1hcCA9IGZhbHNlOyAvLyBsZXQgVlRUQ3VlID0gVlRUQ3VlIHx8IHdpbmRvdy5UZXh0VHJhY2tDdWU7XG4gICAgLy8gQ3JlYXRlIHBhcnNlciBvYmplY3QgdXNpbmcgVlRUQ3VlIHdpdGggVGV4dFRyYWNrQ3VlIGZhbGxiYWNrIG9uIGNlcnRhaW4gYnJvd3NlcnMuXG5cbiAgICB2YXIgcGFyc2VyID0gbmV3IHZ0dHBhcnNlcigpO1xuXG4gICAgcGFyc2VyLm9uY3VlID0gZnVuY3Rpb24gKGN1ZSkge1xuICAgICAgLy8gQWRqdXN0IGN1ZSB0aW1pbmc7IGNsYW1wIGN1ZXMgdG8gc3RhcnQgbm8gZWFybGllciB0aGFuIC0gYW5kIGRyb3AgY3VlcyB0aGF0IGRvbid0IGVuZCBhZnRlciAtIDAgb24gdGltZWxpbmUuXG4gICAgICB2YXIgY3VyckNDID0gdnR0Q0NzW2NjXTtcbiAgICAgIHZhciBjdWVPZmZzZXQgPSB2dHRDQ3MuY2NPZmZzZXQ7IC8vIFVwZGF0ZSBvZmZzZXRzIGZvciBuZXcgZGlzY29udGludWl0aWVzXG5cbiAgICAgIGlmIChjdXJyQ0MgJiYgY3VyckNDLm5ldykge1xuICAgICAgICBpZiAobG9jYWxUaW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGxvY2FsIHRpbWUgaXMgcHJvdmlkZWQsIG9mZnNldCA9IGRpc2NvbnRpbnVpdHkgc3RhcnQgdGltZSAtIGxvY2FsIHRpbWVcbiAgICAgICAgICBjdWVPZmZzZXQgPSB2dHRDQ3MuY2NPZmZzZXQgPSBjdXJyQ0Muc3RhcnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FsY3VsYXRlT2Zmc2V0KHZ0dENDcywgY2MsIHByZXNlbnRhdGlvblRpbWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmVzZW50YXRpb25UaW1lKSB7XG4gICAgICAgIC8vIElmIHdlIGhhdmUgTVBFR1RTLCBvZmZzZXQgPSBwcmVzZW50YXRpb24gdGltZSArIGRpc2NvbnRpbnVpdHkgb2Zmc2V0XG4gICAgICAgIGN1ZU9mZnNldCA9IHByZXNlbnRhdGlvblRpbWUgLSB2dHRDQ3MucHJlc2VudGF0aW9uT2Zmc2V0O1xuICAgICAgfVxuXG4gICAgICBpZiAodGltZXN0YW1wTWFwKSB7XG4gICAgICAgIGN1ZS5zdGFydFRpbWUgKz0gY3VlT2Zmc2V0IC0gbG9jYWxUaW1lO1xuICAgICAgICBjdWUuZW5kVGltZSArPSBjdWVPZmZzZXQgLSBsb2NhbFRpbWU7XG4gICAgICB9IC8vIENyZWF0ZSBhIHVuaXF1ZSBoYXNoIGlkIGZvciBhIGN1ZSBiYXNlZCBvbiBzdGFydC9lbmQgdGltZXMgYW5kIHRleHQuXG4gICAgICAvLyBUaGlzIGhlbHBzIHRpbWVsaW5lLWNvbnRyb2xsZXIgdG8gYXZvaWQgc2hvd2luZyByZXBlYXRlZCBjYXB0aW9ucy5cblxuXG4gICAgICBjdWUuaWQgPSBoYXNoKGN1ZS5zdGFydFRpbWUudG9TdHJpbmcoKSkgKyBoYXNoKGN1ZS5lbmRUaW1lLnRvU3RyaW5nKCkpICsgaGFzaChjdWUudGV4dCk7IC8vIEZpeCBlbmNvZGluZyBvZiBzcGVjaWFsIGNoYXJhY3RlcnMuIFRPRE86IFRlc3Qgd2l0aCBhbGwgc29ydHMgb2Ygd2VpcmQgY2hhcmFjdGVycy5cblxuICAgICAgY3VlLnRleHQgPSBkZWNvZGVVUklDb21wb25lbnQoZW5jb2RlVVJJQ29tcG9uZW50KGN1ZS50ZXh0KSk7XG5cbiAgICAgIGlmIChjdWUuZW5kVGltZSA+IDApIHtcbiAgICAgICAgY3Vlcy5wdXNoKGN1ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHBhcnNlci5vbnBhcnNpbmdlcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBwYXJzaW5nRXJyb3IgPSBlO1xuICAgIH07XG5cbiAgICBwYXJzZXIub25mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwYXJzaW5nRXJyb3IgJiYgZXJyb3JDYWxsQmFjaykge1xuICAgICAgICBlcnJvckNhbGxCYWNrKHBhcnNpbmdFcnJvcik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY2FsbEJhY2soY3Vlcyk7XG4gICAgfTsgLy8gR28gdGhyb3VnaCBjb250ZW50cyBsaW5lIGJ5IGxpbmUuXG5cblxuICAgIHZ0dExpbmVzLmZvckVhY2goZnVuY3Rpb24gKGxpbmUpIHtcbiAgICAgIGlmIChpbkhlYWRlcikge1xuICAgICAgICAvLyBMb29rIGZvciBYLVRJTUVTVEFNUC1NQVAgaW4gaGVhZGVyLlxuICAgICAgICBpZiAoc3RhcnRzV2l0aChsaW5lLCAnWC1USU1FU1RBTVAtTUFQPScpKSB7XG4gICAgICAgICAgLy8gT25jZSBmb3VuZCwgbm8gbW9yZSBhcmUgYWxsb3dlZCBhbnl3YXksIHNvIHN0b3Agc2VhcmNoaW5nLlxuICAgICAgICAgIGluSGVhZGVyID0gZmFsc2U7XG4gICAgICAgICAgdGltZXN0YW1wTWFwID0gdHJ1ZTsgLy8gRXh0cmFjdCBMT0NBTCBhbmQgTVBFR1RTLlxuXG4gICAgICAgICAgbGluZS5zdWJzdHIoMTYpLnNwbGl0KCcsJykuZm9yRWFjaChmdW5jdGlvbiAodGltZXN0YW1wKSB7XG4gICAgICAgICAgICBpZiAoc3RhcnRzV2l0aCh0aW1lc3RhbXAsICdMT0NBTDonKSkge1xuICAgICAgICAgICAgICBjdWVUaW1lID0gdGltZXN0YW1wLnN1YnN0cig2KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhcnRzV2l0aCh0aW1lc3RhbXAsICdNUEVHVFM6JykpIHtcbiAgICAgICAgICAgICAgbXBlZ1RzID0gcGFyc2VJbnQodGltZXN0YW1wLnN1YnN0cig3KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHN1YnRpdGxlIG9mZnNldCBpbiBtaWxsaXNlY29uZHMuXG4gICAgICAgICAgICBpZiAoc3luY1BUUyArICh2dHRDQ3NbY2NdLnN0YXJ0ICogOTAwMDAgfHwgMCkgPCAwKSB7XG4gICAgICAgICAgICAgIHN5bmNQVFMgKz0gODU4OTkzNDU5MjtcbiAgICAgICAgICAgIH0gLy8gQWRqdXN0IE1QRUdUUyBieSBzeW5jIFBUUy5cblxuXG4gICAgICAgICAgICBtcGVnVHMgLT0gc3luY1BUUzsgLy8gQ29udmVydCBjdWUgdGltZSB0byBzZWNvbmRzXG5cbiAgICAgICAgICAgIGxvY2FsVGltZSA9IHdlYnZ0dF9wYXJzZXJfY3VlU3RyaW5nMm1pbGxpcyhjdWVUaW1lKSAvIDEwMDA7IC8vIENvbnZlcnQgTVBFR1RTIHRvIHNlY29uZHMgZnJvbSA5MGtIei5cblxuICAgICAgICAgICAgcHJlc2VudGF0aW9uVGltZSA9IG1wZWdUcyAvIDkwMDAwO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRpbWVzdGFtcE1hcCA9IGZhbHNlO1xuICAgICAgICAgICAgcGFyc2luZ0Vycm9yID0gZTtcbiAgICAgICAgICB9IC8vIFJldHVybiB3aXRob3V0IHBhcnNpbmcgWC1USU1FU1RBTVAtTUFQIGxpbmUuXG5cblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChsaW5lID09PSAnJykge1xuICAgICAgICAgIGluSGVhZGVyID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gUGFyc2UgbGluZSBieSBkZWZhdWx0LlxuXG5cbiAgICAgIHBhcnNlci5wYXJzZShsaW5lICsgJ1xcbicpO1xuICAgIH0pO1xuICAgIHBhcnNlci5mbHVzaCgpO1xuICB9XG59O1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgd2VidnR0X3BhcnNlciA9IChXZWJWVFRQYXJzZXIpO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29udHJvbGxlci90aW1lbGluZS1jb250cm9sbGVyLnRzXG5cblxuXG5mdW5jdGlvbiB0aW1lbGluZV9jb250cm9sbGVyX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIHRpbWVsaW5lX2NvbnRyb2xsZXJfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuXG5cblxuXG5cblxuXG5cbnZhciB0aW1lbGluZV9jb250cm9sbGVyX1RpbWVsaW5lQ29udHJvbGxlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0V2ZW50SGFuZGxlcikge1xuICB0aW1lbGluZV9jb250cm9sbGVyX2luaGVyaXRzTG9vc2UoVGltZWxpbmVDb250cm9sbGVyLCBfRXZlbnRIYW5kbGVyKTtcblxuICBmdW5jdGlvbiBUaW1lbGluZUNvbnRyb2xsZXIoaGxzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfRXZlbnRIYW5kbGVyLmNhbGwodGhpcywgaGxzLCBldmVudHNbXCJkZWZhdWx0XCJdLk1FRElBX0FUVEFDSElORywgZXZlbnRzW1wiZGVmYXVsdFwiXS5NRURJQV9ERVRBQ0hJTkcsIGV2ZW50c1tcImRlZmF1bHRcIl0uRlJBR19QQVJTSU5HX1VTRVJEQVRBLCBldmVudHNbXCJkZWZhdWx0XCJdLkZSQUdfREVDUllQVEVELCBldmVudHNbXCJkZWZhdWx0XCJdLk1BTklGRVNUX0xPQURJTkcsIGV2ZW50c1tcImRlZmF1bHRcIl0uTUFOSUZFU1RfTE9BREVELCBldmVudHNbXCJkZWZhdWx0XCJdLkZSQUdfTE9BREVELCBldmVudHNbXCJkZWZhdWx0XCJdLklOSVRfUFRTX0ZPVU5EKSB8fCB0aGlzO1xuICAgIF90aGlzLm1lZGlhID0gbnVsbDtcbiAgICBfdGhpcy5jb25maWcgPSB2b2lkIDA7XG4gICAgX3RoaXMuZW5hYmxlZCA9IHRydWU7XG4gICAgX3RoaXMuQ3VlcyA9IHZvaWQgMDtcbiAgICBfdGhpcy50ZXh0VHJhY2tzID0gW107XG4gICAgX3RoaXMudHJhY2tzID0gW107XG4gICAgX3RoaXMuaW5pdFBUUyA9IFtdO1xuICAgIF90aGlzLnVucGFyc2VkVnR0RnJhZ3MgPSBbXTtcbiAgICBfdGhpcy5jYXB0aW9uc1RyYWNrcyA9IHt9O1xuICAgIF90aGlzLm5vbk5hdGl2ZUNhcHRpb25zVHJhY2tzID0ge307XG4gICAgX3RoaXMuY2FwdGlvbnNQcm9wZXJ0aWVzID0gdm9pZCAwO1xuICAgIF90aGlzLmNlYTYwOFBhcnNlcjEgPSB2b2lkIDA7XG4gICAgX3RoaXMuY2VhNjA4UGFyc2VyMiA9IHZvaWQgMDtcbiAgICBfdGhpcy5sYXN0U24gPSAtMTtcbiAgICBfdGhpcy5wcmV2Q0MgPSAtMTtcbiAgICBfdGhpcy52dHRDQ3MgPSBuZXdWVFRDQ3MoKTtcbiAgICBfdGhpcy5obHMgPSBobHM7XG4gICAgX3RoaXMuY29uZmlnID0gaGxzLmNvbmZpZztcbiAgICBfdGhpcy5DdWVzID0gaGxzLmNvbmZpZy5jdWVIYW5kbGVyO1xuICAgIF90aGlzLmNhcHRpb25zUHJvcGVydGllcyA9IHtcbiAgICAgIHRleHRUcmFjazE6IHtcbiAgICAgICAgbGFiZWw6IF90aGlzLmNvbmZpZy5jYXB0aW9uc1RleHRUcmFjazFMYWJlbCxcbiAgICAgICAgbGFuZ3VhZ2VDb2RlOiBfdGhpcy5jb25maWcuY2FwdGlvbnNUZXh0VHJhY2sxTGFuZ3VhZ2VDb2RlXG4gICAgICB9LFxuICAgICAgdGV4dFRyYWNrMjoge1xuICAgICAgICBsYWJlbDogX3RoaXMuY29uZmlnLmNhcHRpb25zVGV4dFRyYWNrMkxhYmVsLFxuICAgICAgICBsYW5ndWFnZUNvZGU6IF90aGlzLmNvbmZpZy5jYXB0aW9uc1RleHRUcmFjazJMYW5ndWFnZUNvZGVcbiAgICAgIH0sXG4gICAgICB0ZXh0VHJhY2szOiB7XG4gICAgICAgIGxhYmVsOiBfdGhpcy5jb25maWcuY2FwdGlvbnNUZXh0VHJhY2szTGFiZWwsXG4gICAgICAgIGxhbmd1YWdlQ29kZTogX3RoaXMuY29uZmlnLmNhcHRpb25zVGV4dFRyYWNrM0xhbmd1YWdlQ29kZVxuICAgICAgfSxcbiAgICAgIHRleHRUcmFjazQ6IHtcbiAgICAgICAgbGFiZWw6IF90aGlzLmNvbmZpZy5jYXB0aW9uc1RleHRUcmFjazRMYWJlbCxcbiAgICAgICAgbGFuZ3VhZ2VDb2RlOiBfdGhpcy5jb25maWcuY2FwdGlvbnNUZXh0VHJhY2s0TGFuZ3VhZ2VDb2RlXG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChfdGhpcy5jb25maWcuZW5hYmxlQ0VBNzA4Q2FwdGlvbnMpIHtcbiAgICAgIHZhciBjaGFubmVsMSA9IG5ldyBPdXRwdXRGaWx0ZXIodGltZWxpbmVfY29udHJvbGxlcl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAndGV4dFRyYWNrMScpO1xuICAgICAgdmFyIGNoYW5uZWwyID0gbmV3IE91dHB1dEZpbHRlcih0aW1lbGluZV9jb250cm9sbGVyX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICd0ZXh0VHJhY2syJyk7XG4gICAgICB2YXIgY2hhbm5lbDMgPSBuZXcgT3V0cHV0RmlsdGVyKHRpbWVsaW5lX2NvbnRyb2xsZXJfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgJ3RleHRUcmFjazMnKTtcbiAgICAgIHZhciBjaGFubmVsNCA9IG5ldyBPdXRwdXRGaWx0ZXIodGltZWxpbmVfY29udHJvbGxlcl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAndGV4dFRyYWNrNCcpO1xuICAgICAgX3RoaXMuY2VhNjA4UGFyc2VyMSA9IG5ldyBjZWFfNjA4X3BhcnNlcigxLCBjaGFubmVsMSwgY2hhbm5lbDIpO1xuICAgICAgX3RoaXMuY2VhNjA4UGFyc2VyMiA9IG5ldyBjZWFfNjA4X3BhcnNlcigzLCBjaGFubmVsMywgY2hhbm5lbDQpO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUaW1lbGluZUNvbnRyb2xsZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGRDdWVzID0gZnVuY3Rpb24gYWRkQ3Vlcyh0cmFja05hbWUsIHN0YXJ0VGltZSwgZW5kVGltZSwgc2NyZWVuLCBjdWVSYW5nZXMpIHtcbiAgICAvLyBza2lwIGN1ZXMgd2hpY2ggb3ZlcmxhcCBtb3JlIHRoYW4gNTAlIHdpdGggcHJldmlvdXNseSBwYXJzZWQgdGltZSByYW5nZXNcbiAgICB2YXIgbWVyZ2VkID0gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpID0gY3VlUmFuZ2VzLmxlbmd0aDsgaS0tOykge1xuICAgICAgdmFyIGN1ZVJhbmdlID0gY3VlUmFuZ2VzW2ldO1xuICAgICAgdmFyIG92ZXJsYXAgPSBpbnRlcnNlY3Rpb24oY3VlUmFuZ2VbMF0sIGN1ZVJhbmdlWzFdLCBzdGFydFRpbWUsIGVuZFRpbWUpO1xuXG4gICAgICBpZiAob3ZlcmxhcCA+PSAwKSB7XG4gICAgICAgIGN1ZVJhbmdlWzBdID0gTWF0aC5taW4oY3VlUmFuZ2VbMF0sIHN0YXJ0VGltZSk7XG4gICAgICAgIGN1ZVJhbmdlWzFdID0gTWF0aC5tYXgoY3VlUmFuZ2VbMV0sIGVuZFRpbWUpO1xuICAgICAgICBtZXJnZWQgPSB0cnVlO1xuXG4gICAgICAgIGlmIChvdmVybGFwIC8gKGVuZFRpbWUgLSBzdGFydFRpbWUpID4gMC41KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFtZXJnZWQpIHtcbiAgICAgIGN1ZVJhbmdlcy5wdXNoKFtzdGFydFRpbWUsIGVuZFRpbWVdKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jb25maWcucmVuZGVyVGV4dFRyYWNrc05hdGl2ZWx5KSB7XG4gICAgICB0aGlzLkN1ZXMubmV3Q3VlKHRoaXMuY2FwdGlvbnNUcmFja3NbdHJhY2tOYW1lXSwgc3RhcnRUaW1lLCBlbmRUaW1lLCBzY3JlZW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY3VlcyA9IHRoaXMuQ3Vlcy5uZXdDdWUobnVsbCwgc3RhcnRUaW1lLCBlbmRUaW1lLCBzY3JlZW4pO1xuICAgICAgdGhpcy5obHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkNVRVNfUEFSU0VELCB7XG4gICAgICAgIHR5cGU6ICdjYXB0aW9ucycsXG4gICAgICAgIGN1ZXM6IGN1ZXMsXG4gICAgICAgIHRyYWNrOiB0cmFja05hbWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSAvLyBUcmlnZ2VyZWQgd2hlbiBhbiBpbml0aWFsIFBUUyBpcyBmb3VuZDsgdXNlZCBmb3Igc3luY2hyb25pc2F0aW9uIG9mIFdlYlZUVC5cbiAgO1xuXG4gIF9wcm90by5vbkluaXRQdHNGb3VuZCA9IGZ1bmN0aW9uIG9uSW5pdFB0c0ZvdW5kKGRhdGEpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBmcmFnID0gZGF0YS5mcmFnLFxuICAgICAgICBpZCA9IGRhdGEuaWQsXG4gICAgICAgIGluaXRQVFMgPSBkYXRhLmluaXRQVFM7XG4gICAgdmFyIHVucGFyc2VkVnR0RnJhZ3MgPSB0aGlzLnVucGFyc2VkVnR0RnJhZ3M7XG5cbiAgICBpZiAoaWQgPT09ICdtYWluJykge1xuICAgICAgdGhpcy5pbml0UFRTW2ZyYWcuY2NdID0gaW5pdFBUUztcbiAgICB9IC8vIER1ZSB0byBhc3luY2hyb25vdXMgcHJvY2Vzc2luZywgaW5pdGlhbCBQVFMgbWF5IGFycml2ZSBsYXRlciB0aGFuIHRoZSBmaXJzdCBWVFQgZnJhZ21lbnRzIGFyZSBsb2FkZWQuXG4gICAgLy8gUGFyc2UgYW55IHVucGFyc2VkIGZyYWdtZW50cyB1cG9uIHJlY2VpdmluZyB0aGUgaW5pdGlhbCBQVFMuXG5cblxuICAgIGlmICh1bnBhcnNlZFZ0dEZyYWdzLmxlbmd0aCkge1xuICAgICAgdGhpcy51bnBhcnNlZFZ0dEZyYWdzID0gW107XG4gICAgICB1bnBhcnNlZFZ0dEZyYWdzLmZvckVhY2goZnVuY3Rpb24gKGZyYWcpIHtcbiAgICAgICAgX3RoaXMyLm9uRnJhZ0xvYWRlZChmcmFnKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZ2V0RXhpc3RpbmdUcmFjayA9IGZ1bmN0aW9uIGdldEV4aXN0aW5nVHJhY2sodHJhY2tOYW1lKSB7XG4gICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYTtcblxuICAgIGlmIChtZWRpYSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZWRpYS50ZXh0VHJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB0ZXh0VHJhY2sgPSBtZWRpYS50ZXh0VHJhY2tzW2ldO1xuXG4gICAgICAgIGlmICh0ZXh0VHJhY2tbdHJhY2tOYW1lXSkge1xuICAgICAgICAgIHJldHVybiB0ZXh0VHJhY2s7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBfcHJvdG8uY3JlYXRlQ2FwdGlvbnNUcmFjayA9IGZ1bmN0aW9uIGNyZWF0ZUNhcHRpb25zVHJhY2sodHJhY2tOYW1lKSB7XG4gICAgaWYgKHRoaXMuY29uZmlnLnJlbmRlclRleHRUcmFja3NOYXRpdmVseSkge1xuICAgICAgdGhpcy5jcmVhdGVOYXRpdmVUcmFjayh0cmFja05hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNyZWF0ZU5vbk5hdGl2ZVRyYWNrKHRyYWNrTmFtZSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jcmVhdGVOYXRpdmVUcmFjayA9IGZ1bmN0aW9uIGNyZWF0ZU5hdGl2ZVRyYWNrKHRyYWNrTmFtZSkge1xuICAgIGlmICh0aGlzLmNhcHRpb25zVHJhY2tzW3RyYWNrTmFtZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY2FwdGlvbnNQcm9wZXJ0aWVzID0gdGhpcy5jYXB0aW9uc1Byb3BlcnRpZXMsXG4gICAgICAgIGNhcHRpb25zVHJhY2tzID0gdGhpcy5jYXB0aW9uc1RyYWNrcyxcbiAgICAgICAgbWVkaWEgPSB0aGlzLm1lZGlhO1xuICAgIHZhciBfY2FwdGlvbnNQcm9wZXJ0aWVzJHQgPSBjYXB0aW9uc1Byb3BlcnRpZXNbdHJhY2tOYW1lXSxcbiAgICAgICAgbGFiZWwgPSBfY2FwdGlvbnNQcm9wZXJ0aWVzJHQubGFiZWwsXG4gICAgICAgIGxhbmd1YWdlQ29kZSA9IF9jYXB0aW9uc1Byb3BlcnRpZXMkdC5sYW5ndWFnZUNvZGU7IC8vIEVuYWJsZSByZXVzZSBvZiBleGlzdGluZyB0ZXh0IHRyYWNrLlxuXG4gICAgdmFyIGV4aXN0aW5nVHJhY2sgPSB0aGlzLmdldEV4aXN0aW5nVHJhY2sodHJhY2tOYW1lKTtcblxuICAgIGlmICghZXhpc3RpbmdUcmFjaykge1xuICAgICAgdmFyIHRleHRUcmFjayA9IHRoaXMuY3JlYXRlVGV4dFRyYWNrKCdjYXB0aW9ucycsIGxhYmVsLCBsYW5ndWFnZUNvZGUpO1xuXG4gICAgICBpZiAodGV4dFRyYWNrKSB7XG4gICAgICAgIC8vIFNldCBhIHNwZWNpYWwgcHJvcGVydHkgb24gdGhlIHRyYWNrIHNvIHdlIGtub3cgaXQncyBtYW5hZ2VkIGJ5IEhscy5qc1xuICAgICAgICB0ZXh0VHJhY2tbdHJhY2tOYW1lXSA9IHRydWU7XG4gICAgICAgIGNhcHRpb25zVHJhY2tzW3RyYWNrTmFtZV0gPSB0ZXh0VHJhY2s7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhcHRpb25zVHJhY2tzW3RyYWNrTmFtZV0gPSBleGlzdGluZ1RyYWNrO1xuICAgICAgY2xlYXJDdXJyZW50Q3VlcyhjYXB0aW9uc1RyYWNrc1t0cmFja05hbWVdKTtcbiAgICAgIHNlbmRBZGRUcmFja0V2ZW50KGNhcHRpb25zVHJhY2tzW3RyYWNrTmFtZV0sIG1lZGlhKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNyZWF0ZU5vbk5hdGl2ZVRyYWNrID0gZnVuY3Rpb24gY3JlYXRlTm9uTmF0aXZlVHJhY2sodHJhY2tOYW1lKSB7XG4gICAgaWYgKHRoaXMubm9uTmF0aXZlQ2FwdGlvbnNUcmFja3NbdHJhY2tOYW1lXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gQ3JlYXRlIGEgbGlzdCBvZiBhIHNpbmdsZSB0cmFjayBmb3IgdGhlIHByb3ZpZGVyIHRvIGNvbnN1bWVcblxuXG4gICAgdmFyIHRyYWNrUHJvcGVydGllcyA9IHRoaXMuY2FwdGlvbnNQcm9wZXJ0aWVzW3RyYWNrTmFtZV07XG5cbiAgICBpZiAoIXRyYWNrUHJvcGVydGllcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBsYWJlbCA9IHRyYWNrUHJvcGVydGllcy5sYWJlbDtcbiAgICB2YXIgdHJhY2sgPSB7XG4gICAgICBfaWQ6IHRyYWNrTmFtZSxcbiAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgIGtpbmQ6ICdjYXB0aW9ucycsXG4gICAgICBkZWZhdWx0OiB0cmFja1Byb3BlcnRpZXMubWVkaWEgPyAhIXRyYWNrUHJvcGVydGllcy5tZWRpYS5kZWZhdWx0IDogZmFsc2UsXG4gICAgICBjbG9zZWRDYXB0aW9uczogdHJhY2tQcm9wZXJ0aWVzLm1lZGlhXG4gICAgfTtcbiAgICB0aGlzLm5vbk5hdGl2ZUNhcHRpb25zVHJhY2tzW3RyYWNrTmFtZV0gPSB0cmFjaztcbiAgICB0aGlzLmhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uTk9OX05BVElWRV9URVhUX1RSQUNLU19GT1VORCwge1xuICAgICAgdHJhY2tzOiBbdHJhY2tdXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNyZWF0ZVRleHRUcmFjayA9IGZ1bmN0aW9uIGNyZWF0ZVRleHRUcmFjayhraW5kLCBsYWJlbCwgbGFuZykge1xuICAgIHZhciBtZWRpYSA9IHRoaXMubWVkaWE7XG5cbiAgICBpZiAoIW1lZGlhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lZGlhLmFkZFRleHRUcmFjayhraW5kLCBsYWJlbCwgbGFuZyk7XG4gIH07XG5cbiAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIF9FdmVudEhhbmRsZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8ub25NZWRpYUF0dGFjaGluZyA9IGZ1bmN0aW9uIG9uTWVkaWFBdHRhY2hpbmcoZGF0YSkge1xuICAgIHRoaXMubWVkaWEgPSBkYXRhLm1lZGlhO1xuXG4gICAgdGhpcy5fY2xlYW5UcmFja3MoKTtcbiAgfTtcblxuICBfcHJvdG8ub25NZWRpYURldGFjaGluZyA9IGZ1bmN0aW9uIG9uTWVkaWFEZXRhY2hpbmcoKSB7XG4gICAgdmFyIGNhcHRpb25zVHJhY2tzID0gdGhpcy5jYXB0aW9uc1RyYWNrcztcbiAgICBPYmplY3Qua2V5cyhjYXB0aW9uc1RyYWNrcykuZm9yRWFjaChmdW5jdGlvbiAodHJhY2tOYW1lKSB7XG4gICAgICBjbGVhckN1cnJlbnRDdWVzKGNhcHRpb25zVHJhY2tzW3RyYWNrTmFtZV0pO1xuICAgICAgZGVsZXRlIGNhcHRpb25zVHJhY2tzW3RyYWNrTmFtZV07XG4gICAgfSk7XG4gICAgdGhpcy5ub25OYXRpdmVDYXB0aW9uc1RyYWNrcyA9IHt9O1xuICB9O1xuXG4gIF9wcm90by5vbk1hbmlmZXN0TG9hZGluZyA9IGZ1bmN0aW9uIG9uTWFuaWZlc3RMb2FkaW5nKCkge1xuICAgIHRoaXMubGFzdFNuID0gLTE7IC8vIERldGVjdCBkaXNjb250aWd1aXR5IGluIGZyYWdtZW50IHBhcnNpbmdcblxuICAgIHRoaXMucHJldkNDID0gLTE7XG4gICAgdGhpcy52dHRDQ3MgPSBuZXdWVFRDQ3MoKTsgLy8gRGV0ZWN0IGRpc2NvbnRpbnVpdHkgaW4gc3VidGl0bGUgbWFuaWZlc3RzXG5cbiAgICB0aGlzLl9jbGVhblRyYWNrcygpO1xuXG4gICAgdGhpcy50cmFja3MgPSBbXTtcbiAgICB0aGlzLmNhcHRpb25zVHJhY2tzID0ge307XG4gICAgdGhpcy5ub25OYXRpdmVDYXB0aW9uc1RyYWNrcyA9IHt9O1xuICB9O1xuXG4gIF9wcm90by5fY2xlYW5UcmFja3MgPSBmdW5jdGlvbiBfY2xlYW5UcmFja3MoKSB7XG4gICAgLy8gY2xlYXIgb3V0ZGF0ZWQgc3VidGl0bGVzXG4gICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYTtcblxuICAgIGlmICghbWVkaWEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdGV4dFRyYWNrcyA9IG1lZGlhLnRleHRUcmFja3M7XG5cbiAgICBpZiAodGV4dFRyYWNrcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXh0VHJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNsZWFyQ3VycmVudEN1ZXModGV4dFRyYWNrc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vbk1hbmlmZXN0TG9hZGVkID0gZnVuY3Rpb24gb25NYW5pZmVzdExvYWRlZChkYXRhKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB0aGlzLnRleHRUcmFja3MgPSBbXTtcbiAgICB0aGlzLnVucGFyc2VkVnR0RnJhZ3MgPSB0aGlzLnVucGFyc2VkVnR0RnJhZ3MgfHwgW107XG4gICAgdGhpcy5pbml0UFRTID0gW107XG5cbiAgICBpZiAodGhpcy5jZWE2MDhQYXJzZXIxICYmIHRoaXMuY2VhNjA4UGFyc2VyMikge1xuICAgICAgdGhpcy5jZWE2MDhQYXJzZXIxLnJlc2V0KCk7XG4gICAgICB0aGlzLmNlYTYwOFBhcnNlcjIucmVzZXQoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jb25maWcuZW5hYmxlV2ViVlRUKSB7XG4gICAgICB2YXIgdHJhY2tzID0gZGF0YS5zdWJ0aXRsZXMgfHwgW107XG4gICAgICB2YXIgc2FtZVRyYWNrcyA9IHRoaXMudHJhY2tzICYmIHRyYWNrcyAmJiB0aGlzLnRyYWNrcy5sZW5ndGggPT09IHRyYWNrcy5sZW5ndGg7XG4gICAgICB0aGlzLnRyYWNrcyA9IGRhdGEuc3VidGl0bGVzIHx8IFtdO1xuXG4gICAgICBpZiAodGhpcy5jb25maWcucmVuZGVyVGV4dFRyYWNrc05hdGl2ZWx5KSB7XG4gICAgICAgIHZhciBpblVzZVRyYWNrcyA9IHRoaXMubWVkaWEgPyB0aGlzLm1lZGlhLnRleHRUcmFja3MgOiBbXTtcbiAgICAgICAgdGhpcy50cmFja3MuZm9yRWFjaChmdW5jdGlvbiAodHJhY2ssIGluZGV4KSB7XG4gICAgICAgICAgdmFyIHRleHRUcmFjaztcblxuICAgICAgICAgIGlmIChpbmRleCA8IGluVXNlVHJhY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGluVXNlVHJhY2sgPSBudWxsO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluVXNlVHJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGlmIChjYW5SZXVzZVZ0dFRleHRUcmFjayhpblVzZVRyYWNrc1tpXSwgdHJhY2spKSB7XG4gICAgICAgICAgICAgICAgaW5Vc2VUcmFjayA9IGluVXNlVHJhY2tzW2ldO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IC8vIFJldXNlIHRyYWNrcyB3aXRoIHRoZSBzYW1lIGxhYmVsLCBidXQgZG8gbm90IHJldXNlIDYwOC83MDggdHJhY2tzXG5cblxuICAgICAgICAgICAgaWYgKGluVXNlVHJhY2spIHtcbiAgICAgICAgICAgICAgdGV4dFRyYWNrID0gaW5Vc2VUcmFjaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIXRleHRUcmFjaykge1xuICAgICAgICAgICAgdGV4dFRyYWNrID0gX3RoaXMzLmNyZWF0ZVRleHRUcmFjaygnc3VidGl0bGVzJywgdHJhY2submFtZSwgdHJhY2subGFuZyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRyYWNrLmRlZmF1bHQpIHtcbiAgICAgICAgICAgIHRleHRUcmFjay5tb2RlID0gX3RoaXMzLmhscy5zdWJ0aXRsZURpc3BsYXkgPyAnc2hvd2luZycgOiAnaGlkZGVuJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGV4dFRyYWNrLm1vZGUgPSAnZGlzYWJsZWQnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF90aGlzMy50ZXh0VHJhY2tzLnB1c2godGV4dFRyYWNrKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKCFzYW1lVHJhY2tzICYmIHRoaXMudHJhY2tzICYmIHRoaXMudHJhY2tzLmxlbmd0aCkge1xuICAgICAgICAvLyBDcmVhdGUgYSBsaXN0IG9mIHRyYWNrcyBmb3IgdGhlIHByb3ZpZGVyIHRvIGNvbnN1bWVcbiAgICAgICAgdmFyIHRyYWNrc0xpc3QgPSB0aGlzLnRyYWNrcy5tYXAoZnVuY3Rpb24gKHRyYWNrKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsOiB0cmFjay5uYW1lLFxuICAgICAgICAgICAga2luZDogdHJhY2sudHlwZS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgZGVmYXVsdDogdHJhY2suZGVmYXVsdCxcbiAgICAgICAgICAgIHN1YnRpdGxlVHJhY2s6IHRyYWNrXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5OT05fTkFUSVZFX1RFWFRfVFJBQ0tTX0ZPVU5ELCB7XG4gICAgICAgICAgdHJhY2tzOiB0cmFja3NMaXN0XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmNvbmZpZy5lbmFibGVDRUE3MDhDYXB0aW9ucyAmJiBkYXRhLmNhcHRpb25zKSB7XG4gICAgICBkYXRhLmNhcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKGNhcHRpb25zVHJhY2spIHtcbiAgICAgICAgdmFyIGluc3RyZWFtSWRNYXRjaCA9IC8oPzpDQ3xTRVJWSUNFKShbMS00XSkvLmV4ZWMoY2FwdGlvbnNUcmFjay5pbnN0cmVhbUlkKTtcblxuICAgICAgICBpZiAoIWluc3RyZWFtSWRNYXRjaCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0cmFja05hbWUgPSBcInRleHRUcmFja1wiICsgaW5zdHJlYW1JZE1hdGNoWzFdO1xuICAgICAgICB2YXIgdHJhY2tQcm9wZXJ0aWVzID0gX3RoaXMzLmNhcHRpb25zUHJvcGVydGllc1t0cmFja05hbWVdO1xuXG4gICAgICAgIGlmICghdHJhY2tQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJhY2tQcm9wZXJ0aWVzLmxhYmVsID0gY2FwdGlvbnNUcmFjay5uYW1lO1xuXG4gICAgICAgIGlmIChjYXB0aW9uc1RyYWNrLmxhbmcpIHtcbiAgICAgICAgICAvLyBvcHRpb25hbCBhdHRyaWJ1dGVcbiAgICAgICAgICB0cmFja1Byb3BlcnRpZXMubGFuZ3VhZ2VDb2RlID0gY2FwdGlvbnNUcmFjay5sYW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJhY2tQcm9wZXJ0aWVzLm1lZGlhID0gY2FwdGlvbnNUcmFjaztcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25GcmFnTG9hZGVkID0gZnVuY3Rpb24gb25GcmFnTG9hZGVkKGRhdGEpIHtcbiAgICB2YXIgZnJhZyA9IGRhdGEuZnJhZyxcbiAgICAgICAgcGF5bG9hZCA9IGRhdGEucGF5bG9hZDtcbiAgICB2YXIgY2VhNjA4UGFyc2VyMSA9IHRoaXMuY2VhNjA4UGFyc2VyMSxcbiAgICAgICAgY2VhNjA4UGFyc2VyMiA9IHRoaXMuY2VhNjA4UGFyc2VyMixcbiAgICAgICAgaW5pdFBUUyA9IHRoaXMuaW5pdFBUUyxcbiAgICAgICAgbGFzdFNuID0gdGhpcy5sYXN0U24sXG4gICAgICAgIHVucGFyc2VkVnR0RnJhZ3MgPSB0aGlzLnVucGFyc2VkVnR0RnJhZ3M7XG5cbiAgICBpZiAoZnJhZy50eXBlID09PSAnbWFpbicpIHtcbiAgICAgIHZhciBzbiA9IGZyYWcuc247IC8vIGlmIHRoaXMgZnJhZyBpc24ndCBjb250aWd1b3VzLCBjbGVhciB0aGUgcGFyc2VyIHNvIGN1ZXMgd2l0aCBiYWQgc3RhcnQvZW5kIHRpbWVzIGFyZW4ndCBhZGRlZCB0byB0aGUgdGV4dFRyYWNrXG5cbiAgICAgIGlmIChmcmFnLnNuICE9PSBsYXN0U24gKyAxKSB7XG4gICAgICAgIGlmIChjZWE2MDhQYXJzZXIxICYmIGNlYTYwOFBhcnNlcjIpIHtcbiAgICAgICAgICBjZWE2MDhQYXJzZXIxLnJlc2V0KCk7XG4gICAgICAgICAgY2VhNjA4UGFyc2VyMi5yZXNldCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMubGFzdFNuID0gc247XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGJyYWNlLXN0eWxlXG4gICAgLy8gSWYgZnJhZ21lbnQgaXMgc3VidGl0bGUgdHlwZSwgcGFyc2UgYXMgV2ViVlRULlxuICAgIGVsc2UgaWYgKGZyYWcudHlwZSA9PT0gJ3N1YnRpdGxlJykge1xuICAgICAgICBpZiAocGF5bG9hZC5ieXRlTGVuZ3RoKSB7XG4gICAgICAgICAgLy8gV2UgbmVlZCBhbiBpbml0aWFsIHN5bmNocm9uaXNhdGlvbiBQVFMuIFN0b3JlIGZyYWdtZW50cyBhcyBsb25nIGFzIG5vbmUgaGFzIGFycml2ZWQuXG4gICAgICAgICAgaWYgKCFPYmplY3QobnVtYmVyW1wiaXNGaW5pdGVOdW1iZXJcIl0pKGluaXRQVFNbZnJhZy5jY10pKSB7XG4gICAgICAgICAgICB1bnBhcnNlZFZ0dEZyYWdzLnB1c2goZGF0YSk7XG5cbiAgICAgICAgICAgIGlmIChpbml0UFRTLmxlbmd0aCkge1xuICAgICAgICAgICAgICAvLyBmaW5pc2ggdW5zdWNjZXNzZnVsbHksIG90aGVyd2lzZSB0aGUgc3VidGl0bGUtc3RyZWFtLWNvbnRyb2xsZXIgY291bGQgYmUgYmxvY2tlZCBmcm9tIGxvYWRpbmcgbmV3IGZyYWdzLlxuICAgICAgICAgICAgICB0aGlzLmhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uU1VCVElUTEVfRlJBR19QUk9DRVNTRUQsIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBmcmFnOiBmcmFnXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGRlY3J5cHREYXRhID0gZnJhZy5kZWNyeXB0ZGF0YTsgLy8gSWYgdGhlIHN1YnRpdGxlcyBhcmUgbm90IGVuY3J5cHRlZCwgcGFyc2UgVlRUcyBub3cuIE90aGVyd2lzZSwgd2UgbmVlZCB0byB3YWl0LlxuXG4gICAgICAgICAgaWYgKGRlY3J5cHREYXRhID09IG51bGwgfHwgZGVjcnlwdERhdGEua2V5ID09IG51bGwgfHwgZGVjcnlwdERhdGEubWV0aG9kICE9PSAnQUVTLTEyOCcpIHtcbiAgICAgICAgICAgIHRoaXMuX3BhcnNlVlRUcyhmcmFnLCBwYXlsb2FkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gSW4gY2FzZSB0aGVyZSBpcyBubyBwYXlsb2FkLCBmaW5pc2ggdW5zdWNjZXNzZnVsbHkuXG4gICAgICAgICAgdGhpcy5obHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLlNVQlRJVExFX0ZSQUdfUFJPQ0VTU0VELCB7XG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgIGZyYWc6IGZyYWdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICB9O1xuXG4gIF9wcm90by5fcGFyc2VWVFRzID0gZnVuY3Rpb24gX3BhcnNlVlRUcyhmcmFnLCBwYXlsb2FkKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICB2YXIgaGxzID0gdGhpcy5obHMsXG4gICAgICAgIHByZXZDQyA9IHRoaXMucHJldkNDLFxuICAgICAgICB0ZXh0VHJhY2tzID0gdGhpcy50ZXh0VHJhY2tzLFxuICAgICAgICB2dHRDQ3MgPSB0aGlzLnZ0dENDcztcblxuICAgIGlmICghdnR0Q0NzW2ZyYWcuY2NdKSB7XG4gICAgICB2dHRDQ3NbZnJhZy5jY10gPSB7XG4gICAgICAgIHN0YXJ0OiBmcmFnLnN0YXJ0LFxuICAgICAgICBwcmV2Q0M6IHByZXZDQyxcbiAgICAgICAgbmV3OiB0cnVlXG4gICAgICB9O1xuICAgICAgdGhpcy5wcmV2Q0MgPSBmcmFnLmNjO1xuICAgIH0gLy8gUGFyc2UgdGhlIFdlYlZUVCBmaWxlIGNvbnRlbnRzLlxuXG5cbiAgICB3ZWJ2dHRfcGFyc2VyLnBhcnNlKHBheWxvYWQsIHRoaXMuaW5pdFBUU1tmcmFnLmNjXSwgdnR0Q0NzLCBmcmFnLmNjLCBmdW5jdGlvbiAoY3Vlcykge1xuICAgICAgaWYgKF90aGlzNC5jb25maWcucmVuZGVyVGV4dFRyYWNrc05hdGl2ZWx5KSB7XG4gICAgICAgIHZhciBjdXJyZW50VHJhY2sgPSB0ZXh0VHJhY2tzW2ZyYWcubGV2ZWxdOyAvLyBXZWJWVFRQYXJzZXIucGFyc2UgaXMgYW4gYXN5bmMgbWV0aG9kIGFuZCBpZiB0aGUgY3VycmVudGx5IHNlbGVjdGVkIHRleHQgdHJhY2sgbW9kZSBpcyBzZXQgdG8gXCJkaXNhYmxlZFwiXG4gICAgICAgIC8vIGJlZm9yZSBwYXJzaW5nIGlzIGRvbmUgdGhlbiBkb24ndCB0cnkgdG8gYWNjZXNzIGN1cnJlbnRUcmFjay5jdWVzLmdldEN1ZUJ5SWQgYXMgY3VlcyB3aWxsIGJlIG51bGxcbiAgICAgICAgLy8gYW5kIHRyeWluZyB0byBhY2Nlc3MgZ2V0Q3VlQnlJZCBtZXRob2Qgb2YgY3VlcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvblxuICAgICAgICAvLyBCZWNhdXNlIHdlIGNoZWNrIGlmIHRoZSBtb2RlIGlzIGRpYWJsZWQsIHdlIGNhbiBmb3JjZSBjaGVjayBgY3Vlc2AgYmVsb3cuIFRoZXkgY2FuJ3QgYmUgbnVsbC5cblxuICAgICAgICBpZiAoY3VycmVudFRyYWNrLm1vZGUgPT09ICdkaXNhYmxlZCcpIHtcbiAgICAgICAgICBobHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLlNVQlRJVExFX0ZSQUdfUFJPQ0VTU0VELCB7XG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgIGZyYWc6IGZyYWdcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gQWRkIGN1ZXMgYW5kIHRyaWdnZXIgZXZlbnQgd2l0aCBzdWNjZXNzIHRydWUuXG5cblxuICAgICAgICBjdWVzLmZvckVhY2goZnVuY3Rpb24gKGN1ZSkge1xuICAgICAgICAgIC8vIFNvbWV0aW1lcyB0aGVyZSBhcmUgY3VlIG92ZXJsYXBzIG9uIHNlZ21lbnRlZCB2dHRzIHNvIHRoZSBzYW1lXG4gICAgICAgICAgLy8gY3VlIGNhbiBhcHBlYXIgbW9yZSB0aGFuIG9uY2UgaW4gZGlmZmVyZW50IHZ0dCBmaWxlcy5cbiAgICAgICAgICAvLyBUaGlzIGF2b2lkIHNob3dpbmcgZHVwbGljYXRlZCBjdWVzIHdpdGggc2FtZSB0aW1lY29kZSBhbmQgdGV4dC5cbiAgICAgICAgICBpZiAoIWN1cnJlbnRUcmFjay5jdWVzLmdldEN1ZUJ5SWQoY3VlLmlkKSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgY3VycmVudFRyYWNrLmFkZEN1ZShjdWUpO1xuXG4gICAgICAgICAgICAgIGlmICghY3VycmVudFRyYWNrLmN1ZXMuZ2V0Q3VlQnlJZChjdWUuaWQpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWRkQ3VlIGlzIGZhaWxlZCBmb3I6IFwiICsgY3VlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5kZWJ1ZyhcIkZhaWxlZCBvY2N1cnJlZCBvbiBhZGRpbmcgY3VlczogXCIgKyBlcnIpO1xuICAgICAgICAgICAgICB2YXIgdGV4dFRyYWNrQ3VlID0gbmV3IHdpbmRvdy5UZXh0VHJhY2tDdWUoY3VlLnN0YXJ0VGltZSwgY3VlLmVuZFRpbWUsIGN1ZS50ZXh0KTtcbiAgICAgICAgICAgICAgdGV4dFRyYWNrQ3VlLmlkID0gY3VlLmlkO1xuICAgICAgICAgICAgICBjdXJyZW50VHJhY2suYWRkQ3VlKHRleHRUcmFja0N1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB0cmFja0lkID0gX3RoaXM0LnRyYWNrc1tmcmFnLmxldmVsXS5kZWZhdWx0ID8gJ2RlZmF1bHQnIDogJ3N1YnRpdGxlcycgKyBmcmFnLmxldmVsO1xuICAgICAgICBobHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkNVRVNfUEFSU0VELCB7XG4gICAgICAgICAgdHlwZTogJ3N1YnRpdGxlcycsXG4gICAgICAgICAgY3VlczogY3VlcyxcbiAgICAgICAgICB0cmFjazogdHJhY2tJZFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5TVUJUSVRMRV9GUkFHX1BST0NFU1NFRCwge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBmcmFnOiBmcmFnXG4gICAgICB9KTtcbiAgICB9LCBmdW5jdGlvbiAoZSkge1xuICAgICAgLy8gU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2hpbGUgcGFyc2luZy4gVHJpZ2dlciBldmVudCB3aXRoIHN1Y2Nlc3MgZmFsc2UuXG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKFwiRmFpbGVkIHRvIHBhcnNlIFZUVCBjdWU6IFwiICsgZSk7XG4gICAgICBobHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLlNVQlRJVExFX0ZSQUdfUFJPQ0VTU0VELCB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBmcmFnOiBmcmFnXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ub25GcmFnRGVjcnlwdGVkID0gZnVuY3Rpb24gb25GcmFnRGVjcnlwdGVkKGRhdGEpIHtcbiAgICB2YXIgZnJhZyA9IGRhdGEuZnJhZyxcbiAgICAgICAgcGF5bG9hZCA9IGRhdGEucGF5bG9hZDtcblxuICAgIGlmIChmcmFnLnR5cGUgPT09ICdzdWJ0aXRsZScpIHtcbiAgICAgIGlmICghT2JqZWN0KG51bWJlcltcImlzRmluaXRlTnVtYmVyXCJdKSh0aGlzLmluaXRQVFNbZnJhZy5jY10pKSB7XG4gICAgICAgIHRoaXMudW5wYXJzZWRWdHRGcmFncy5wdXNoKGRhdGEpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3BhcnNlVlRUcyhmcmFnLCBwYXlsb2FkKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uRnJhZ1BhcnNpbmdVc2VyZGF0YSA9IGZ1bmN0aW9uIG9uRnJhZ1BhcnNpbmdVc2VyZGF0YShkYXRhKSB7XG4gICAgdmFyIGNlYTYwOFBhcnNlcjEgPSB0aGlzLmNlYTYwOFBhcnNlcjEsXG4gICAgICAgIGNlYTYwOFBhcnNlcjIgPSB0aGlzLmNlYTYwOFBhcnNlcjI7XG5cbiAgICBpZiAoIXRoaXMuZW5hYmxlZCB8fCAhKGNlYTYwOFBhcnNlcjEgJiYgY2VhNjA4UGFyc2VyMikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIElmIHRoZSBldmVudCBjb250YWlucyBjYXB0aW9ucyAoZm91bmQgaW4gdGhlIGJ5dGVzIHByb3BlcnR5KSwgcHVzaCBhbGwgYnl0ZXMgaW50byB0aGUgcGFyc2VyIGltbWVkaWF0ZWx5XG4gICAgLy8gSXQgd2lsbCBjcmVhdGUgdGhlIHByb3BlciB0aW1lc3RhbXBzIGJhc2VkIG9uIHRoZSBQVFMgdmFsdWVcblxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLnNhbXBsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjY0J5dGVzID0gZGF0YS5zYW1wbGVzW2ldLmJ5dGVzO1xuXG4gICAgICBpZiAoY2NCeXRlcykge1xuICAgICAgICB2YXIgY2NkYXRhcyA9IHRoaXMuZXh0cmFjdENlYTYwOERhdGEoY2NCeXRlcyk7XG4gICAgICAgIGNlYTYwOFBhcnNlcjEuYWRkRGF0YShkYXRhLnNhbXBsZXNbaV0ucHRzLCBjY2RhdGFzWzBdKTtcbiAgICAgICAgY2VhNjA4UGFyc2VyMi5hZGREYXRhKGRhdGEuc2FtcGxlc1tpXS5wdHMsIGNjZGF0YXNbMV0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZXh0cmFjdENlYTYwOERhdGEgPSBmdW5jdGlvbiBleHRyYWN0Q2VhNjA4RGF0YShieXRlQXJyYXkpIHtcbiAgICB2YXIgY291bnQgPSBieXRlQXJyYXlbMF0gJiAzMTtcbiAgICB2YXIgcG9zaXRpb24gPSAyO1xuICAgIHZhciBhY3R1YWxDQ0J5dGVzID0gW1tdLCBbXV07XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNvdW50OyBqKyspIHtcbiAgICAgIHZhciB0bXBCeXRlID0gYnl0ZUFycmF5W3Bvc2l0aW9uKytdO1xuICAgICAgdmFyIGNjYnl0ZTEgPSAweDdGICYgYnl0ZUFycmF5W3Bvc2l0aW9uKytdO1xuICAgICAgdmFyIGNjYnl0ZTIgPSAweDdGICYgYnl0ZUFycmF5W3Bvc2l0aW9uKytdO1xuICAgICAgdmFyIGNjVmFsaWQgPSAoNCAmIHRtcEJ5dGUpICE9PSAwO1xuICAgICAgdmFyIGNjVHlwZSA9IDMgJiB0bXBCeXRlO1xuXG4gICAgICBpZiAoY2NieXRlMSA9PT0gMCAmJiBjY2J5dGUyID09PSAwKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2NWYWxpZCkge1xuICAgICAgICBpZiAoY2NUeXBlID09PSAwIHx8IGNjVHlwZSA9PT0gMSkge1xuICAgICAgICAgIGFjdHVhbENDQnl0ZXNbY2NUeXBlXS5wdXNoKGNjYnl0ZTEpO1xuICAgICAgICAgIGFjdHVhbENDQnl0ZXNbY2NUeXBlXS5wdXNoKGNjYnl0ZTIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdHVhbENDQnl0ZXM7XG4gIH07XG5cbiAgcmV0dXJuIFRpbWVsaW5lQ29udHJvbGxlcjtcbn0oZXZlbnRfaGFuZGxlcik7XG5cbmZ1bmN0aW9uIGNhblJldXNlVnR0VGV4dFRyYWNrKGluVXNlVHJhY2ssIG1hbmlmZXN0VHJhY2spIHtcbiAgcmV0dXJuIGluVXNlVHJhY2sgJiYgaW5Vc2VUcmFjay5sYWJlbCA9PT0gbWFuaWZlc3RUcmFjay5uYW1lICYmICEoaW5Vc2VUcmFjay50ZXh0VHJhY2sxIHx8IGluVXNlVHJhY2sudGV4dFRyYWNrMik7XG59XG5cbmZ1bmN0aW9uIGludGVyc2VjdGlvbih4MSwgeDIsIHkxLCB5Mikge1xuICByZXR1cm4gTWF0aC5taW4oeDIsIHkyKSAtIE1hdGgubWF4KHgxLCB5MSk7XG59XG5cbmZ1bmN0aW9uIG5ld1ZUVENDcygpIHtcbiAgcmV0dXJuIHtcbiAgICBjY09mZnNldDogMCxcbiAgICBwcmVzZW50YXRpb25PZmZzZXQ6IDAsXG4gICAgMDoge1xuICAgICAgc3RhcnQ6IDAsXG4gICAgICBwcmV2Q0M6IC0xLFxuICAgICAgbmV3OiBmYWxzZVxuICAgIH1cbiAgfTtcbn1cblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgdGltZWxpbmVfY29udHJvbGxlciA9ICh0aW1lbGluZV9jb250cm9sbGVyX1RpbWVsaW5lQ29udHJvbGxlcik7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb250cm9sbGVyL3N1YnRpdGxlLXRyYWNrLWNvbnRyb2xsZXIuanNcblxuXG5cblxuZnVuY3Rpb24gc3VidGl0bGVfdHJhY2tfY29udHJvbGxlcl9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gc3VidGl0bGVfdHJhY2tfY29udHJvbGxlcl9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIHN1YnRpdGxlX3RyYWNrX2NvbnRyb2xsZXJfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIHN1YnRpdGxlX3RyYWNrX2NvbnRyb2xsZXJfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gc3VidGl0bGVfdHJhY2tfY29udHJvbGxlcl9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5cblxuXG5cblxuXG52YXIgc3VidGl0bGVfdHJhY2tfY29udHJvbGxlcl9TdWJ0aXRsZVRyYWNrQ29udHJvbGxlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0V2ZW50SGFuZGxlcikge1xuICBzdWJ0aXRsZV90cmFja19jb250cm9sbGVyX2luaGVyaXRzTG9vc2UoU3VidGl0bGVUcmFja0NvbnRyb2xsZXIsIF9FdmVudEhhbmRsZXIpO1xuXG4gIGZ1bmN0aW9uIFN1YnRpdGxlVHJhY2tDb250cm9sbGVyKGhscykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0V2ZW50SGFuZGxlci5jYWxsKHRoaXMsIGhscywgZXZlbnRzW1wiZGVmYXVsdFwiXS5NRURJQV9BVFRBQ0hFRCwgZXZlbnRzW1wiZGVmYXVsdFwiXS5NRURJQV9ERVRBQ0hJTkcsIGV2ZW50c1tcImRlZmF1bHRcIl0uTUFOSUZFU1RfTE9BREVELCBldmVudHNbXCJkZWZhdWx0XCJdLlNVQlRJVExFX1RSQUNLX0xPQURFRCkgfHwgdGhpcztcbiAgICBfdGhpcy50cmFja3MgPSBbXTtcbiAgICBfdGhpcy50cmFja0lkID0gLTE7XG4gICAgX3RoaXMubWVkaWEgPSBudWxsO1xuICAgIF90aGlzLnN0b3BwZWQgPSB0cnVlO1xuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge2Jvb2xlYW59IHN1YnRpdGxlRGlzcGxheSBFbmFibGUvZGlzYWJsZSBzdWJ0aXRsZSBkaXNwbGF5IHJlbmRlcmluZ1xuICAgICAqL1xuXG4gICAgX3RoaXMuc3VidGl0bGVEaXNwbGF5ID0gdHJ1ZTtcbiAgICAvKipcbiAgICAgKiBLZWVwcyByZWZlcmVuY2UgdG8gYSBkZWZhdWx0IHRyYWNrIGlkIHdoZW4gbWVkaWEgaGFzIG5vdCBiZWVuIGF0dGFjaGVkIHlldFxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cblxuICAgIF90aGlzLnF1ZXVlZERlZmF1bHRUcmFjayA9IG51bGw7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN1YnRpdGxlVHJhY2tDb250cm9sbGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgZXZlbnRfaGFuZGxlci5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICB9IC8vIExpc3RlbiBmb3Igc3VidGl0bGUgdHJhY2sgY2hhbmdlLCB0aGVuIGV4dHJhY3QgdGhlIGN1cnJlbnQgdHJhY2sgSUQuXG4gIDtcblxuICBfcHJvdG8ub25NZWRpYUF0dGFjaGVkID0gZnVuY3Rpb24gb25NZWRpYUF0dGFjaGVkKGRhdGEpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHRoaXMubWVkaWEgPSBkYXRhLm1lZGlhO1xuXG4gICAgaWYgKCF0aGlzLm1lZGlhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdChudW1iZXJbXCJpc0Zpbml0ZU51bWJlclwiXSkodGhpcy5xdWV1ZWREZWZhdWx0VHJhY2spKSB7XG4gICAgICB0aGlzLnN1YnRpdGxlVHJhY2sgPSB0aGlzLnF1ZXVlZERlZmF1bHRUcmFjaztcbiAgICAgIHRoaXMucXVldWVkRGVmYXVsdFRyYWNrID0gbnVsbDtcbiAgICB9XG5cbiAgICB0aGlzLnRyYWNrQ2hhbmdlTGlzdGVuZXIgPSB0aGlzLl9vblRleHRUcmFja3NDaGFuZ2VkLmJpbmQodGhpcyk7XG4gICAgdGhpcy51c2VUZXh0VHJhY2tQb2xsaW5nID0gISh0aGlzLm1lZGlhLnRleHRUcmFja3MgJiYgJ29uY2hhbmdlJyBpbiB0aGlzLm1lZGlhLnRleHRUcmFja3MpO1xuXG4gICAgaWYgKHRoaXMudXNlVGV4dFRyYWNrUG9sbGluZykge1xuICAgICAgdGhpcy5zdWJ0aXRsZVBvbGxpbmdJbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnRyYWNrQ2hhbmdlTGlzdGVuZXIoKTtcbiAgICAgIH0sIDUwMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubWVkaWEudGV4dFRyYWNrcy5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLnRyYWNrQ2hhbmdlTGlzdGVuZXIpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25NZWRpYURldGFjaGluZyA9IGZ1bmN0aW9uIG9uTWVkaWFEZXRhY2hpbmcoKSB7XG4gICAgaWYgKCF0aGlzLm1lZGlhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudXNlVGV4dFRyYWNrUG9sbGluZykge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnN1YnRpdGxlUG9sbGluZ0ludGVydmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tZWRpYS50ZXh0VHJhY2tzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMudHJhY2tDaGFuZ2VMaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdChudW1iZXJbXCJpc0Zpbml0ZU51bWJlclwiXSkodGhpcy5zdWJ0aXRsZVRyYWNrKSkge1xuICAgICAgdGhpcy5xdWV1ZWREZWZhdWx0VHJhY2sgPSB0aGlzLnN1YnRpdGxlVHJhY2s7XG4gICAgfVxuXG4gICAgdmFyIHRleHRUcmFja3MgPSBmaWx0ZXJTdWJ0aXRsZVRyYWNrcyh0aGlzLm1lZGlhLnRleHRUcmFja3MpOyAvLyBDbGVhciBsb2FkZWQgY3VlcyBvbiBtZWRpYSBkZXRhY2htZW50IGZyb20gdHJhY2tzXG5cbiAgICB0ZXh0VHJhY2tzLmZvckVhY2goZnVuY3Rpb24gKHRyYWNrKSB7XG4gICAgICBjbGVhckN1cnJlbnRDdWVzKHRyYWNrKTtcbiAgICB9KTsgLy8gRGlzYWJsZSBhbGwgc3VidGl0bGUgdHJhY2tzIGJlZm9yZSBkZXRhY2htZW50IHNvIHdoZW4gcmVhdHRhY2hlZCBvbmx5IHRyYWNrcyBpbiB0aGF0IGNvbnRlbnQgYXJlIGVuYWJsZWQuXG5cbiAgICB0aGlzLnN1YnRpdGxlVHJhY2sgPSAtMTtcbiAgICB0aGlzLm1lZGlhID0gbnVsbDtcbiAgfSAvLyBGaXJlZCB3aGVuZXZlciBhIG5ldyBtYW5pZmVzdCBpcyBsb2FkZWQuXG4gIDtcblxuICBfcHJvdG8ub25NYW5pZmVzdExvYWRlZCA9IGZ1bmN0aW9uIG9uTWFuaWZlc3RMb2FkZWQoZGF0YSkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIHRyYWNrcyA9IGRhdGEuc3VidGl0bGVzIHx8IFtdO1xuICAgIHRoaXMudHJhY2tzID0gdHJhY2tzO1xuICAgIHRoaXMuaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5TVUJUSVRMRV9UUkFDS1NfVVBEQVRFRCwge1xuICAgICAgc3VidGl0bGVUcmFja3M6IHRyYWNrc1xuICAgIH0pOyAvLyBsb29wIHRocm91Z2ggYXZhaWxhYmxlIHN1YnRpdGxlIHRyYWNrcyBhbmQgYXV0b3NlbGVjdCBkZWZhdWx0IGlmIG5lZWRlZFxuICAgIC8vIFRPRE86IGltcHJvdmUgc2VsZWN0aW9uIGxvZ2ljIHRvIGhhbmRsZSBmb3JjZWQsIGV0Y1xuXG4gICAgdHJhY2tzLmZvckVhY2goZnVuY3Rpb24gKHRyYWNrKSB7XG4gICAgICBpZiAodHJhY2suZGVmYXVsdCkge1xuICAgICAgICAvLyBzZXR0aW5nIHRoaXMuc3VidGl0bGVUcmFjayB3aWxsIHRyaWdnZXIgaW50ZXJuYWwgbG9naWNcbiAgICAgICAgLy8gaWYgbWVkaWEgaGFzIG5vdCBiZWVuIGF0dGFjaGVkIHlldCwgaXQgd2lsbCBmYWlsXG4gICAgICAgIC8vIHdlIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIGRlZmF1bHQgdHJhY2sgaWRcbiAgICAgICAgLy8gYW5kIHdlJ2xsIHNldCBzdWJ0aXRsZVRyYWNrIHdoZW4gb25NZWRpYUF0dGFjaGVkIGlzIHRyaWdnZXJlZFxuICAgICAgICBpZiAoX3RoaXMzLm1lZGlhKSB7XG4gICAgICAgICAgX3RoaXMzLnN1YnRpdGxlVHJhY2sgPSB0cmFjay5pZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpczMucXVldWVkRGVmYXVsdFRyYWNrID0gdHJhY2suaWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ub25TdWJ0aXRsZVRyYWNrTG9hZGVkID0gZnVuY3Rpb24gb25TdWJ0aXRsZVRyYWNrTG9hZGVkKGRhdGEpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBpZCA9IGRhdGEuaWQsXG4gICAgICAgIGRldGFpbHMgPSBkYXRhLmRldGFpbHM7XG4gICAgdmFyIHRyYWNrSWQgPSB0aGlzLnRyYWNrSWQsXG4gICAgICAgIHRyYWNrcyA9IHRoaXMudHJhY2tzO1xuICAgIHZhciBjdXJyZW50VHJhY2sgPSB0cmFja3NbdHJhY2tJZF07XG5cbiAgICBpZiAoaWQgPj0gdHJhY2tzLmxlbmd0aCB8fCBpZCAhPT0gdHJhY2tJZCB8fCAhY3VycmVudFRyYWNrIHx8IHRoaXMuc3RvcHBlZCkge1xuICAgICAgdGhpcy5fY2xlYXJSZWxvYWRUaW1lcigpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyhcInN1YnRpdGxlIHRyYWNrIFwiICsgaWQgKyBcIiBsb2FkZWRcIik7XG5cbiAgICBpZiAoZGV0YWlscy5saXZlKSB7XG4gICAgICB2YXIgcmVsb2FkSW50ZXJ2YWwgPSBjb21wdXRlUmVsb2FkSW50ZXJ2YWwoY3VycmVudFRyYWNrLmRldGFpbHMsIGRldGFpbHMsIGRhdGEuc3RhdHMudHJlcXVlc3QpO1xuICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyhcIlJlbG9hZGluZyBsaXZlIHN1YnRpdGxlIHBsYXlsaXN0IGluIFwiICsgcmVsb2FkSW50ZXJ2YWwgKyBcIm1zXCIpO1xuICAgICAgdGhpcy50aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczQuX2xvYWRDdXJyZW50VHJhY2soKTtcbiAgICAgIH0sIHJlbG9hZEludGVydmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fY2xlYXJSZWxvYWRUaW1lcigpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc3RhcnRMb2FkID0gZnVuY3Rpb24gc3RhcnRMb2FkKCkge1xuICAgIHRoaXMuc3RvcHBlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5fbG9hZEN1cnJlbnRUcmFjaygpO1xuICB9O1xuXG4gIF9wcm90by5zdG9wTG9hZCA9IGZ1bmN0aW9uIHN0b3BMb2FkKCkge1xuICAgIHRoaXMuc3RvcHBlZCA9IHRydWU7XG5cbiAgICB0aGlzLl9jbGVhclJlbG9hZFRpbWVyKCk7XG4gIH1cbiAgLyoqIGdldCBhbHRlcm5hdGUgc3VidGl0bGUgdHJhY2tzIGxpc3QgZnJvbSBwbGF5bGlzdCAqKi9cbiAgO1xuXG4gIF9wcm90by5fY2xlYXJSZWxvYWRUaW1lciA9IGZ1bmN0aW9uIF9jbGVhclJlbG9hZFRpbWVyKCkge1xuICAgIGlmICh0aGlzLnRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcik7XG4gICAgICB0aGlzLnRpbWVyID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9sb2FkQ3VycmVudFRyYWNrID0gZnVuY3Rpb24gX2xvYWRDdXJyZW50VHJhY2soKSB7XG4gICAgdmFyIHRyYWNrSWQgPSB0aGlzLnRyYWNrSWQsXG4gICAgICAgIHRyYWNrcyA9IHRoaXMudHJhY2tzLFxuICAgICAgICBobHMgPSB0aGlzLmhscztcbiAgICB2YXIgY3VycmVudFRyYWNrID0gdHJhY2tzW3RyYWNrSWRdO1xuXG4gICAgaWYgKHRyYWNrSWQgPCAwIHx8ICFjdXJyZW50VHJhY2sgfHwgY3VycmVudFRyYWNrLmRldGFpbHMgJiYgIWN1cnJlbnRUcmFjay5kZXRhaWxzLmxpdmUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKFwiTG9hZGluZyBzdWJ0aXRsZSB0cmFjayBcIiArIHRyYWNrSWQpO1xuICAgIGhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uU1VCVElUTEVfVFJBQ0tfTE9BRElORywge1xuICAgICAgdXJsOiBjdXJyZW50VHJhY2sudXJsLFxuICAgICAgaWQ6IHRyYWNrSWRcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogRGlzYWJsZXMgdGhlIG9sZCBzdWJ0aXRsZVRyYWNrIGFuZCBzZXRzIGN1cnJlbnQgbW9kZSBvbiB0aGUgbmV4dCBzdWJ0aXRsZVRyYWNrLlxuICAgKiBUaGlzIG9wZXJhdGVzIG9uIHRoZSBET00gdGV4dFRyYWNrcy5cbiAgICogQSB2YWx1ZSBvZiAtMSB3aWxsIGRpc2FibGUgYWxsIHN1YnRpdGxlIHRyYWNrcy5cbiAgICogQHBhcmFtIG5ld0lkIC0gVGhlIGlkIG9mIHRoZSBuZXh0IHRyYWNrIHRvIGVuYWJsZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5fdG9nZ2xlVHJhY2tNb2RlcyA9IGZ1bmN0aW9uIF90b2dnbGVUcmFja01vZGVzKG5ld0lkKSB7XG4gICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYSxcbiAgICAgICAgc3VidGl0bGVEaXNwbGF5ID0gdGhpcy5zdWJ0aXRsZURpc3BsYXksXG4gICAgICAgIHRyYWNrSWQgPSB0aGlzLnRyYWNrSWQ7XG5cbiAgICBpZiAoIW1lZGlhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHRleHRUcmFja3MgPSBmaWx0ZXJTdWJ0aXRsZVRyYWNrcyhtZWRpYS50ZXh0VHJhY2tzKTtcblxuICAgIGlmIChuZXdJZCA9PT0gLTEpIHtcbiAgICAgIFtdLnNsaWNlLmNhbGwodGV4dFRyYWNrcykuZm9yRWFjaChmdW5jdGlvbiAodHJhY2spIHtcbiAgICAgICAgdHJhY2subW9kZSA9ICdkaXNhYmxlZCc7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG9sZFRyYWNrID0gdGV4dFRyYWNrc1t0cmFja0lkXTtcblxuICAgICAgaWYgKG9sZFRyYWNrKSB7XG4gICAgICAgIG9sZFRyYWNrLm1vZGUgPSAnZGlzYWJsZWQnO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBuZXh0VHJhY2sgPSB0ZXh0VHJhY2tzW25ld0lkXTtcblxuICAgIGlmIChuZXh0VHJhY2spIHtcbiAgICAgIG5leHRUcmFjay5tb2RlID0gc3VidGl0bGVEaXNwbGF5ID8gJ3Nob3dpbmcnIDogJ2hpZGRlbic7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHJlc3BvbnNpYmxlIGZvciB2YWxpZGF0aW5nIHRoZSBzdWJ0aXRsZSBpbmRleCBhbmQgcGVyaW9kaWNhbGx5IHJlbG9hZGluZyBpZiBsaXZlLlxuICAgICAqIERpc3BhdGNoZXMgdGhlIFNVQlRJVExFX1RSQUNLX1NXSVRDSCBldmVudCwgd2hpY2ggaW5zdHJ1Y3RzIHRoZSBzdWJ0aXRsZS1zdHJlYW0tY29udHJvbGxlciB0byBsb2FkIHRoZSBzZWxlY3RlZCB0cmFjay5cbiAgICAgKiBAcGFyYW0gbmV3SWQgLSBUaGUgaWQgb2YgdGhlIHN1YnRpdGxlIHRyYWNrIHRvIGFjdGl2YXRlLlxuICAgICAqL1xuICA7XG5cbiAgX3Byb3RvLl9zZXRTdWJ0aXRsZVRyYWNrSW50ZXJuYWwgPSBmdW5jdGlvbiBfc2V0U3VidGl0bGVUcmFja0ludGVybmFsKG5ld0lkKSB7XG4gICAgdmFyIGhscyA9IHRoaXMuaGxzLFxuICAgICAgICB0cmFja3MgPSB0aGlzLnRyYWNrcztcblxuICAgIGlmICghT2JqZWN0KG51bWJlcltcImlzRmluaXRlTnVtYmVyXCJdKShuZXdJZCkgfHwgbmV3SWQgPCAtMSB8fCBuZXdJZCA+PSB0cmFja3MubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy50cmFja0lkID0gbmV3SWQ7XG4gICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyhcIlN3aXRjaGluZyB0byBzdWJ0aXRsZSB0cmFjayBcIiArIG5ld0lkKTtcbiAgICBobHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLlNVQlRJVExFX1RSQUNLX1NXSVRDSCwge1xuICAgICAgaWQ6IG5ld0lkXG4gICAgfSk7XG5cbiAgICB0aGlzLl9sb2FkQ3VycmVudFRyYWNrKCk7XG4gIH07XG5cbiAgX3Byb3RvLl9vblRleHRUcmFja3NDaGFuZ2VkID0gZnVuY3Rpb24gX29uVGV4dFRyYWNrc0NoYW5nZWQoKSB7XG4gICAgLy8gTWVkaWEgaXMgdW5kZWZpbmVkIHdoZW4gc3dpdGNoaW5nIHN0cmVhbXMgdmlhIGxvYWRTb3VyY2UoKVxuICAgIGlmICghdGhpcy5tZWRpYSB8fCAhdGhpcy5obHMuY29uZmlnLnJlbmRlclRleHRUcmFja3NOYXRpdmVseSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0cmFja0lkID0gLTE7XG4gICAgdmFyIHRyYWNrcyA9IGZpbHRlclN1YnRpdGxlVHJhY2tzKHRoaXMubWVkaWEudGV4dFRyYWNrcyk7XG5cbiAgICBmb3IgKHZhciBpZCA9IDA7IGlkIDwgdHJhY2tzLmxlbmd0aDsgaWQrKykge1xuICAgICAgaWYgKHRyYWNrc1tpZF0ubW9kZSA9PT0gJ2hpZGRlbicpIHtcbiAgICAgICAgLy8gRG8gbm90IGJyZWFrIGluIGNhc2UgdGhlcmUgaXMgYSBmb2xsb3dpbmcgdHJhY2sgd2l0aCBzaG93aW5nLlxuICAgICAgICB0cmFja0lkID0gaWQ7XG4gICAgICB9IGVsc2UgaWYgKHRyYWNrc1tpZF0ubW9kZSA9PT0gJ3Nob3dpbmcnKSB7XG4gICAgICAgIHRyYWNrSWQgPSBpZDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSAvLyBTZXR0aW5nIGN1cnJlbnQgc3VidGl0bGVUcmFjayB3aWxsIGludm9rZSBjb2RlLlxuXG5cbiAgICB0aGlzLnN1YnRpdGxlVHJhY2sgPSB0cmFja0lkO1xuICB9O1xuXG4gIHN1YnRpdGxlX3RyYWNrX2NvbnRyb2xsZXJfY3JlYXRlQ2xhc3MoU3VidGl0bGVUcmFja0NvbnRyb2xsZXIsIFt7XG4gICAga2V5OiBcInN1YnRpdGxlVHJhY2tzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy50cmFja3M7XG4gICAgfVxuICAgIC8qKiBnZXQgaW5kZXggb2YgdGhlIHNlbGVjdGVkIHN1YnRpdGxlIHRyYWNrIChpbmRleCBpbiBzdWJ0aXRsZSB0cmFjayBsaXN0cykgKiovXG5cbiAgfSwge1xuICAgIGtleTogXCJzdWJ0aXRsZVRyYWNrXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy50cmFja0lkO1xuICAgIH1cbiAgICAvKiogc2VsZWN0IGEgc3VidGl0bGUgdHJhY2ssIGJhc2VkIG9uIGl0cyBpbmRleCBpbiBzdWJ0aXRsZSB0cmFjayBsaXN0cyoqL1xuICAgICxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChzdWJ0aXRsZVRyYWNrSWQpIHtcbiAgICAgIGlmICh0aGlzLnRyYWNrSWQgIT09IHN1YnRpdGxlVHJhY2tJZCkge1xuICAgICAgICB0aGlzLl90b2dnbGVUcmFja01vZGVzKHN1YnRpdGxlVHJhY2tJZCk7XG5cbiAgICAgICAgdGhpcy5fc2V0U3VidGl0bGVUcmFja0ludGVybmFsKHN1YnRpdGxlVHJhY2tJZCk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFN1YnRpdGxlVHJhY2tDb250cm9sbGVyO1xufShldmVudF9oYW5kbGVyKTtcblxuZnVuY3Rpb24gZmlsdGVyU3VidGl0bGVUcmFja3ModGV4dFRyYWNrTGlzdCkge1xuICB2YXIgdHJhY2tzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXh0VHJhY2tMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRyYWNrID0gdGV4dFRyYWNrTGlzdFtpXTsgLy8gRWRnZSBhZGRzIGEgdHJhY2sgd2l0aG91dCBhIGxhYmVsOyB3ZSBkb24ndCB3YW50IHRvIHVzZSBpdFxuXG4gICAgaWYgKHRyYWNrLmtpbmQgPT09ICdzdWJ0aXRsZXMnICYmIHRyYWNrLmxhYmVsKSB7XG4gICAgICB0cmFja3MucHVzaCh0ZXh0VHJhY2tMaXN0W2ldKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJhY2tzO1xufVxuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBzdWJ0aXRsZV90cmFja19jb250cm9sbGVyID0gKHN1YnRpdGxlX3RyYWNrX2NvbnRyb2xsZXJfU3VidGl0bGVUcmFja0NvbnRyb2xsZXIpO1xuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9jcnlwdC9kZWNyeXB0ZXIuanMgKyAzIG1vZHVsZXNcbnZhciBkZWNyeXB0ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvY3J5cHQvZGVjcnlwdGVyLmpzXCIpO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb250cm9sbGVyL3N1YnRpdGxlLXN0cmVhbS1jb250cm9sbGVyLmpzXG5mdW5jdGlvbiBzdWJ0aXRsZV9zdHJlYW1fY29udHJvbGxlcl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBzdWJ0aXRsZV9zdHJlYW1fY29udHJvbGxlcl9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIEBjbGFzcyBTdWJ0aXRsZVN0cmVhbUNvbnRyb2xsZXJcbiAqL1xuXG5cblxuXG5cblxuXG5cbnZhciBzdWJ0aXRsZV9zdHJlYW1fY29udHJvbGxlcl93aW5kb3cgPSB3aW5kb3csXG4gICAgc3VidGl0bGVfc3RyZWFtX2NvbnRyb2xsZXJfcGVyZm9ybWFuY2UgPSBzdWJ0aXRsZV9zdHJlYW1fY29udHJvbGxlcl93aW5kb3cucGVyZm9ybWFuY2U7XG52YXIgc3VidGl0bGVfc3RyZWFtX2NvbnRyb2xsZXJfVElDS19JTlRFUlZBTCA9IDUwMDsgLy8gaG93IG9mdGVuIHRvIHRpY2sgaW4gbXNcblxudmFyIHN1YnRpdGxlX3N0cmVhbV9jb250cm9sbGVyX1N1YnRpdGxlU3RyZWFtQ29udHJvbGxlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VTdHJlYW1Db250cm9sbGVyKSB7XG4gIHN1YnRpdGxlX3N0cmVhbV9jb250cm9sbGVyX2luaGVyaXRzTG9vc2UoU3VidGl0bGVTdHJlYW1Db250cm9sbGVyLCBfQmFzZVN0cmVhbUNvbnRyb2xsZXIpO1xuXG4gIGZ1bmN0aW9uIFN1YnRpdGxlU3RyZWFtQ29udHJvbGxlcihobHMsIGZyYWdtZW50VHJhY2tlcikge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0Jhc2VTdHJlYW1Db250cm9sbGVyLmNhbGwodGhpcywgaGxzLCBldmVudHNbXCJkZWZhdWx0XCJdLk1FRElBX0FUVEFDSEVELCBldmVudHNbXCJkZWZhdWx0XCJdLk1FRElBX0RFVEFDSElORywgZXZlbnRzW1wiZGVmYXVsdFwiXS5FUlJPUiwgZXZlbnRzW1wiZGVmYXVsdFwiXS5LRVlfTE9BREVELCBldmVudHNbXCJkZWZhdWx0XCJdLkZSQUdfTE9BREVELCBldmVudHNbXCJkZWZhdWx0XCJdLlNVQlRJVExFX1RSQUNLU19VUERBVEVELCBldmVudHNbXCJkZWZhdWx0XCJdLlNVQlRJVExFX1RSQUNLX1NXSVRDSCwgZXZlbnRzW1wiZGVmYXVsdFwiXS5TVUJUSVRMRV9UUkFDS19MT0FERUQsIGV2ZW50c1tcImRlZmF1bHRcIl0uU1VCVElUTEVfRlJBR19QUk9DRVNTRUQsIGV2ZW50c1tcImRlZmF1bHRcIl0uTEVWRUxfVVBEQVRFRCkgfHwgdGhpcztcbiAgICBfdGhpcy5mcmFnbWVudFRyYWNrZXIgPSBmcmFnbWVudFRyYWNrZXI7XG4gICAgX3RoaXMuY29uZmlnID0gaGxzLmNvbmZpZztcbiAgICBfdGhpcy5zdGF0ZSA9IFN0YXRlLlNUT1BQRUQ7XG4gICAgX3RoaXMudHJhY2tzID0gW107XG4gICAgX3RoaXMudHJhY2tzQnVmZmVyZWQgPSBbXTtcbiAgICBfdGhpcy5jdXJyZW50VHJhY2tJZCA9IC0xO1xuICAgIF90aGlzLmRlY3J5cHRlciA9IG5ldyBkZWNyeXB0ZXJbXCJkZWZhdWx0XCJdKGhscywgaGxzLmNvbmZpZyk7IC8vIGxhc3RBVlN0YXJ0IHN0b3JlcyB0aGUgdGltZSBpbiBzZWNvbmRzIGZvciB0aGUgc3RhcnQgdGltZSBvZiBhIGxldmVsIGxvYWRcblxuICAgIF90aGlzLmxhc3RBVlN0YXJ0ID0gMDtcbiAgICBfdGhpcy5fb25NZWRpYVNlZWtpbmcgPSBfdGhpcy5vbk1lZGlhU2Vla2luZy5iaW5kKHN1YnRpdGxlX3N0cmVhbV9jb250cm9sbGVyX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdWJ0aXRsZVN0cmVhbUNvbnRyb2xsZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5zdGFydExvYWQgPSBmdW5jdGlvbiBzdGFydExvYWQoKSB7XG4gICAgdGhpcy5zdG9wTG9hZCgpO1xuICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JRExFOyAvLyBDaGVjayBpZiB3ZSBhbHJlYWR5IGhhdmUgYSB0cmFjayB3aXRoIG5lY2Vzc2FyeSBkZXRhaWxzIHRvIGxvYWQgZnJhZ21lbnRzXG5cbiAgICB2YXIgY3VycmVudFRyYWNrID0gdGhpcy50cmFja3NbdGhpcy5jdXJyZW50VHJhY2tJZF07XG5cbiAgICBpZiAoY3VycmVudFRyYWNrICYmIGN1cnJlbnRUcmFjay5kZXRhaWxzKSB7XG4gICAgICB0aGlzLnNldEludGVydmFsKHN1YnRpdGxlX3N0cmVhbV9jb250cm9sbGVyX1RJQ0tfSU5URVJWQUwpO1xuICAgICAgdGhpcy50aWNrKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vblN1YnRpdGxlRnJhZ1Byb2Nlc3NlZCA9IGZ1bmN0aW9uIG9uU3VidGl0bGVGcmFnUHJvY2Vzc2VkKGRhdGEpIHtcbiAgICB2YXIgZnJhZyA9IGRhdGEuZnJhZyxcbiAgICAgICAgc3VjY2VzcyA9IGRhdGEuc3VjY2VzcztcbiAgICB0aGlzLmZyYWdQcmV2aW91cyA9IGZyYWc7XG4gICAgdGhpcy5zdGF0ZSA9IFN0YXRlLklETEU7XG5cbiAgICBpZiAoIXN1Y2Nlc3MpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgYnVmZmVyZWQgPSB0aGlzLnRyYWNrc0J1ZmZlcmVkW3RoaXMuY3VycmVudFRyYWNrSWRdO1xuXG4gICAgaWYgKCFidWZmZXJlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gQ3JlYXRlL3VwZGF0ZSBhIGJ1ZmZlcmVkIGFycmF5IG1hdGNoaW5nIHRoZSBpbnRlcmZhY2UgdXNlZCBieSBCdWZmZXJIZWxwZXIuYnVmZmVyZWRJbmZvXG4gICAgLy8gc28gd2UgY2FuIHJlLXVzZSB0aGUgbG9naWMgdXNlZCB0byBkZXRlY3QgaG93IG11Y2ggaGF2ZSBiZWVuIGJ1ZmZlcmVkXG5cblxuICAgIHZhciB0aW1lUmFuZ2U7XG4gICAgdmFyIGZyYWdTdGFydCA9IGZyYWcuc3RhcnQ7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1ZmZlcmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZnJhZ1N0YXJ0ID49IGJ1ZmZlcmVkW2ldLnN0YXJ0ICYmIGZyYWdTdGFydCA8PSBidWZmZXJlZFtpXS5lbmQpIHtcbiAgICAgICAgdGltZVJhbmdlID0gYnVmZmVyZWRbaV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBmcmFnRW5kID0gZnJhZy5zdGFydCArIGZyYWcuZHVyYXRpb247XG5cbiAgICBpZiAodGltZVJhbmdlKSB7XG4gICAgICB0aW1lUmFuZ2UuZW5kID0gZnJhZ0VuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGltZVJhbmdlID0ge1xuICAgICAgICBzdGFydDogZnJhZ1N0YXJ0LFxuICAgICAgICBlbmQ6IGZyYWdFbmRcbiAgICAgIH07XG4gICAgICBidWZmZXJlZC5wdXNoKHRpbWVSYW5nZSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vbk1lZGlhQXR0YWNoZWQgPSBmdW5jdGlvbiBvbk1lZGlhQXR0YWNoZWQoX3JlZikge1xuICAgIHZhciBtZWRpYSA9IF9yZWYubWVkaWE7XG4gICAgdGhpcy5tZWRpYSA9IG1lZGlhO1xuICAgIG1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ3NlZWtpbmcnLCB0aGlzLl9vbk1lZGlhU2Vla2luZyk7XG4gICAgdGhpcy5zdGF0ZSA9IFN0YXRlLklETEU7XG4gIH07XG5cbiAgX3Byb3RvLm9uTWVkaWFEZXRhY2hpbmcgPSBmdW5jdGlvbiBvbk1lZGlhRGV0YWNoaW5nKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgaWYgKCF0aGlzLm1lZGlhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5tZWRpYS5yZW1vdmVFdmVudExpc3RlbmVyKCdzZWVraW5nJywgdGhpcy5fb25NZWRpYVNlZWtpbmcpO1xuICAgIHRoaXMuZnJhZ21lbnRUcmFja2VyLnJlbW92ZUFsbEZyYWdtZW50cygpO1xuICAgIHRoaXMuY3VycmVudFRyYWNrSWQgPSAtMTtcbiAgICB0aGlzLnRyYWNrcy5mb3JFYWNoKGZ1bmN0aW9uICh0cmFjaykge1xuICAgICAgX3RoaXMyLnRyYWNrc0J1ZmZlcmVkW3RyYWNrLmlkXSA9IFtdO1xuICAgIH0pO1xuICAgIHRoaXMubWVkaWEgPSBudWxsO1xuICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TVE9QUEVEO1xuICB9IC8vIElmIHNvbWV0aGluZyBnb2VzIHdyb25nLCBwcm9jZWVkIHRvIG5leHQgZnJhZywgaWYgd2Ugd2VyZSBwcm9jZXNzaW5nIG9uZS5cbiAgO1xuXG4gIF9wcm90by5vbkVycm9yID0gZnVuY3Rpb24gb25FcnJvcihkYXRhKSB7XG4gICAgdmFyIGZyYWcgPSBkYXRhLmZyYWc7IC8vIGRvbid0IGhhbmRsZSBlcnJvciBub3QgcmVsYXRlZCB0byBzdWJ0aXRsZSBmcmFnbWVudFxuXG4gICAgaWYgKCFmcmFnIHx8IGZyYWcudHlwZSAhPT0gJ3N1YnRpdGxlJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmZyYWdDdXJyZW50ICYmIHRoaXMuZnJhZ0N1cnJlbnQubG9hZGVyKSB7XG4gICAgICB0aGlzLmZyYWdDdXJyZW50LmxvYWRlci5hYm9ydCgpO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JRExFO1xuICB9IC8vIEdvdCBhbGwgbmV3IHN1YnRpdGxlIHRyYWNrcy5cbiAgO1xuXG4gIF9wcm90by5vblN1YnRpdGxlVHJhY2tzVXBkYXRlZCA9IGZ1bmN0aW9uIG9uU3VidGl0bGVUcmFja3NVcGRhdGVkKGRhdGEpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coJ3N1YnRpdGxlIHRyYWNrcyB1cGRhdGVkJyk7XG4gICAgdGhpcy50cmFja3NCdWZmZXJlZCA9IFtdO1xuICAgIHRoaXMudHJhY2tzID0gZGF0YS5zdWJ0aXRsZVRyYWNrcztcbiAgICB0aGlzLnRyYWNrcy5mb3JFYWNoKGZ1bmN0aW9uICh0cmFjaykge1xuICAgICAgX3RoaXMzLnRyYWNrc0J1ZmZlcmVkW3RyYWNrLmlkXSA9IFtdO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5vblN1YnRpdGxlVHJhY2tTd2l0Y2ggPSBmdW5jdGlvbiBvblN1YnRpdGxlVHJhY2tTd2l0Y2goZGF0YSkge1xuICAgIHRoaXMuY3VycmVudFRyYWNrSWQgPSBkYXRhLmlkO1xuXG4gICAgaWYgKCF0aGlzLnRyYWNrcyB8fCAhdGhpcy50cmFja3MubGVuZ3RoIHx8IHRoaXMuY3VycmVudFRyYWNrSWQgPT09IC0xKSB7XG4gICAgICB0aGlzLmNsZWFySW50ZXJ2YWwoKTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIENoZWNrIGlmIHRyYWNrIGhhcyB0aGUgbmVjZXNzYXJ5IGRldGFpbHMgdG8gbG9hZCBmcmFnbWVudHNcblxuXG4gICAgdmFyIGN1cnJlbnRUcmFjayA9IHRoaXMudHJhY2tzW3RoaXMuY3VycmVudFRyYWNrSWRdO1xuXG4gICAgaWYgKGN1cnJlbnRUcmFjayAmJiBjdXJyZW50VHJhY2suZGV0YWlscykge1xuICAgICAgdGhpcy5zZXRJbnRlcnZhbChzdWJ0aXRsZV9zdHJlYW1fY29udHJvbGxlcl9USUNLX0lOVEVSVkFMKTtcbiAgICB9XG4gIH0gLy8gR290IGEgbmV3IHNldCBvZiBzdWJ0aXRsZSBmcmFnbWVudHMuXG4gIDtcblxuICBfcHJvdG8ub25TdWJ0aXRsZVRyYWNrTG9hZGVkID0gZnVuY3Rpb24gb25TdWJ0aXRsZVRyYWNrTG9hZGVkKGRhdGEpIHtcbiAgICB2YXIgaWQgPSBkYXRhLmlkLFxuICAgICAgICBkZXRhaWxzID0gZGF0YS5kZXRhaWxzO1xuICAgIHZhciBjdXJyZW50VHJhY2tJZCA9IHRoaXMuY3VycmVudFRyYWNrSWQsXG4gICAgICAgIHRyYWNrcyA9IHRoaXMudHJhY2tzO1xuICAgIHZhciBjdXJyZW50VHJhY2sgPSB0cmFja3NbY3VycmVudFRyYWNrSWRdO1xuXG4gICAgaWYgKGlkID49IHRyYWNrcy5sZW5ndGggfHwgaWQgIT09IGN1cnJlbnRUcmFja0lkIHx8ICFjdXJyZW50VHJhY2spIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZGV0YWlscy5saXZlKSB7XG4gICAgICBtZXJnZVN1YnRpdGxlUGxheWxpc3RzKGN1cnJlbnRUcmFjay5kZXRhaWxzLCBkZXRhaWxzLCB0aGlzLmxhc3RBVlN0YXJ0KTtcbiAgICB9XG5cbiAgICBjdXJyZW50VHJhY2suZGV0YWlscyA9IGRldGFpbHM7XG4gICAgdGhpcy5zZXRJbnRlcnZhbChzdWJ0aXRsZV9zdHJlYW1fY29udHJvbGxlcl9USUNLX0lOVEVSVkFMKTtcbiAgfTtcblxuICBfcHJvdG8ub25LZXlMb2FkZWQgPSBmdW5jdGlvbiBvbktleUxvYWRlZCgpIHtcbiAgICBpZiAodGhpcy5zdGF0ZSA9PT0gU3RhdGUuS0VZX0xPQURJTkcpIHtcbiAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JRExFO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25GcmFnTG9hZGVkID0gZnVuY3Rpb24gb25GcmFnTG9hZGVkKGRhdGEpIHtcbiAgICB2YXIgZnJhZ0N1cnJlbnQgPSB0aGlzLmZyYWdDdXJyZW50O1xuICAgIHZhciBkZWNyeXB0RGF0YSA9IGRhdGEuZnJhZy5kZWNyeXB0ZGF0YTtcbiAgICB2YXIgZnJhZ0xvYWRlZCA9IGRhdGEuZnJhZztcbiAgICB2YXIgaGxzID0gdGhpcy5obHM7XG5cbiAgICBpZiAodGhpcy5zdGF0ZSA9PT0gU3RhdGUuRlJBR19MT0FESU5HICYmIGZyYWdDdXJyZW50ICYmIGRhdGEuZnJhZy50eXBlID09PSAnc3VidGl0bGUnICYmIGZyYWdDdXJyZW50LnNuID09PSBkYXRhLmZyYWcuc24pIHtcbiAgICAgIC8vIGNoZWNrIHRvIHNlZSBpZiB0aGUgcGF5bG9hZCBuZWVkcyB0byBiZSBkZWNyeXB0ZWRcbiAgICAgIGlmIChkYXRhLnBheWxvYWQuYnl0ZUxlbmd0aCA+IDAgJiYgZGVjcnlwdERhdGEgJiYgZGVjcnlwdERhdGEua2V5ICYmIGRlY3J5cHREYXRhLm1ldGhvZCA9PT0gJ0FFUy0xMjgnKSB7XG4gICAgICAgIHZhciBzdGFydFRpbWUgPSBzdWJ0aXRsZV9zdHJlYW1fY29udHJvbGxlcl9wZXJmb3JtYW5jZS5ub3coKTsgLy8gZGVjcnlwdCB0aGUgc3VidGl0bGVzXG5cbiAgICAgICAgdGhpcy5kZWNyeXB0ZXIuZGVjcnlwdChkYXRhLnBheWxvYWQsIGRlY3J5cHREYXRhLmtleS5idWZmZXIsIGRlY3J5cHREYXRhLml2LmJ1ZmZlciwgZnVuY3Rpb24gKGRlY3J5cHRlZERhdGEpIHtcbiAgICAgICAgICB2YXIgZW5kVGltZSA9IHN1YnRpdGxlX3N0cmVhbV9jb250cm9sbGVyX3BlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICAgIGhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uRlJBR19ERUNSWVBURUQsIHtcbiAgICAgICAgICAgIGZyYWc6IGZyYWdMb2FkZWQsXG4gICAgICAgICAgICBwYXlsb2FkOiBkZWNyeXB0ZWREYXRhLFxuICAgICAgICAgICAgc3RhdHM6IHtcbiAgICAgICAgICAgICAgdHN0YXJ0OiBzdGFydFRpbWUsXG4gICAgICAgICAgICAgIHRkZWNyeXB0OiBlbmRUaW1lXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25MZXZlbFVwZGF0ZWQgPSBmdW5jdGlvbiBvbkxldmVsVXBkYXRlZChfcmVmMikge1xuICAgIHZhciBkZXRhaWxzID0gX3JlZjIuZGV0YWlscztcbiAgICB2YXIgZnJhZ3MgPSBkZXRhaWxzLmZyYWdtZW50cztcbiAgICB0aGlzLmxhc3RBVlN0YXJ0ID0gZnJhZ3MubGVuZ3RoID8gZnJhZ3NbMF0uc3RhcnQgOiAwO1xuICB9O1xuXG4gIF9wcm90by5kb1RpY2sgPSBmdW5jdGlvbiBkb1RpY2soKSB7XG4gICAgaWYgKCF0aGlzLm1lZGlhKSB7XG4gICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSURMRTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRoaXMuc3RhdGUpIHtcbiAgICAgIGNhc2UgU3RhdGUuSURMRTpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBjb25maWcgPSB0aGlzLmNvbmZpZyxcbiAgICAgICAgICAgICAgY3VycmVudFRyYWNrSWQgPSB0aGlzLmN1cnJlbnRUcmFja0lkLFxuICAgICAgICAgICAgICBmcmFnbWVudFRyYWNrZXIgPSB0aGlzLmZyYWdtZW50VHJhY2tlcixcbiAgICAgICAgICAgICAgbWVkaWEgPSB0aGlzLm1lZGlhLFxuICAgICAgICAgICAgICB0cmFja3MgPSB0aGlzLnRyYWNrcztcblxuICAgICAgICAgIGlmICghdHJhY2tzIHx8ICF0cmFja3NbY3VycmVudFRyYWNrSWRdIHx8ICF0cmFja3NbY3VycmVudFRyYWNrSWRdLmRldGFpbHMpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBtYXhCdWZmZXJIb2xlID0gY29uZmlnLm1heEJ1ZmZlckhvbGUsXG4gICAgICAgICAgICAgIG1heEZyYWdMb29rVXBUb2xlcmFuY2UgPSBjb25maWcubWF4RnJhZ0xvb2tVcFRvbGVyYW5jZTtcbiAgICAgICAgICB2YXIgbWF4Q29uZmlnQnVmZmVyID0gTWF0aC5taW4oY29uZmlnLm1heEJ1ZmZlckxlbmd0aCwgY29uZmlnLm1heE1heEJ1ZmZlckxlbmd0aCk7XG4gICAgICAgICAgdmFyIGJ1ZmZlcmVkSW5mbyA9IEJ1ZmZlckhlbHBlci5idWZmZXJlZEluZm8odGhpcy5fZ2V0QnVmZmVyZWQoKSwgbWVkaWEuY3VycmVudFRpbWUsIG1heEJ1ZmZlckhvbGUpO1xuICAgICAgICAgIHZhciBidWZmZXJFbmQgPSBidWZmZXJlZEluZm8uZW5kLFxuICAgICAgICAgICAgICBidWZmZXJMZW4gPSBidWZmZXJlZEluZm8ubGVuO1xuICAgICAgICAgIHZhciB0cmFja0RldGFpbHMgPSB0cmFja3NbY3VycmVudFRyYWNrSWRdLmRldGFpbHM7XG4gICAgICAgICAgdmFyIGZyYWdtZW50cyA9IHRyYWNrRGV0YWlscy5mcmFnbWVudHM7XG4gICAgICAgICAgdmFyIGZyYWdMZW4gPSBmcmFnbWVudHMubGVuZ3RoO1xuICAgICAgICAgIHZhciBlbmQgPSBmcmFnbWVudHNbZnJhZ0xlbiAtIDFdLnN0YXJ0ICsgZnJhZ21lbnRzW2ZyYWdMZW4gLSAxXS5kdXJhdGlvbjtcblxuICAgICAgICAgIGlmIChidWZmZXJMZW4gPiBtYXhDb25maWdCdWZmZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgZm91bmRGcmFnO1xuICAgICAgICAgIHZhciBmcmFnUHJldmlvdXMgPSB0aGlzLmZyYWdQcmV2aW91cztcblxuICAgICAgICAgIGlmIChidWZmZXJFbmQgPCBlbmQpIHtcbiAgICAgICAgICAgIGlmIChmcmFnUHJldmlvdXMgJiYgdHJhY2tEZXRhaWxzLmhhc1Byb2dyYW1EYXRlVGltZSkge1xuICAgICAgICAgICAgICBmb3VuZEZyYWcgPSBmaW5kRnJhZ21lbnRCeVBEVChmcmFnbWVudHMsIGZyYWdQcmV2aW91cy5lbmRQcm9ncmFtRGF0ZVRpbWUsIG1heEZyYWdMb29rVXBUb2xlcmFuY2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWZvdW5kRnJhZykge1xuICAgICAgICAgICAgICBmb3VuZEZyYWcgPSBmaW5kRnJhZ21lbnRCeVBUUyhmcmFnUHJldmlvdXMsIGZyYWdtZW50cywgYnVmZmVyRW5kLCBtYXhGcmFnTG9va1VwVG9sZXJhbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm91bmRGcmFnID0gZnJhZ21lbnRzW2ZyYWdMZW4gLSAxXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZm91bmRGcmFnICYmIGZvdW5kRnJhZy5lbmNyeXB0ZWQpIHtcbiAgICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJMb2FkaW5nIGtleSBmb3IgXCIgKyBmb3VuZEZyYWcuc24pO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLktFWV9MT0FESU5HO1xuICAgICAgICAgICAgdGhpcy5obHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLktFWV9MT0FESU5HLCB7XG4gICAgICAgICAgICAgIGZyYWc6IGZvdW5kRnJhZ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChmb3VuZEZyYWcgJiYgZnJhZ21lbnRUcmFja2VyLmdldFN0YXRlKGZvdW5kRnJhZykgPT09IEZyYWdtZW50U3RhdGUuTk9UX0xPQURFRCkge1xuICAgICAgICAgICAgLy8gb25seSBsb2FkIGlmIGZyYWdtZW50IGlzIG5vdCBsb2FkZWRcbiAgICAgICAgICAgIHRoaXMuZnJhZ0N1cnJlbnQgPSBmb3VuZEZyYWc7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuRlJBR19MT0FESU5HO1xuICAgICAgICAgICAgdGhpcy5obHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkZSQUdfTE9BRElORywge1xuICAgICAgICAgICAgICBmcmFnOiBmb3VuZEZyYWdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc3RvcExvYWQgPSBmdW5jdGlvbiBzdG9wTG9hZCgpIHtcbiAgICB0aGlzLmxhc3RBVlN0YXJ0ID0gMDtcbiAgICB0aGlzLmZyYWdQcmV2aW91cyA9IG51bGw7XG5cbiAgICBfQmFzZVN0cmVhbUNvbnRyb2xsZXIucHJvdG90eXBlLnN0b3BMb2FkLmNhbGwodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLl9nZXRCdWZmZXJlZCA9IGZ1bmN0aW9uIF9nZXRCdWZmZXJlZCgpIHtcbiAgICByZXR1cm4gdGhpcy50cmFja3NCdWZmZXJlZFt0aGlzLmN1cnJlbnRUcmFja0lkXSB8fCBbXTtcbiAgfTtcblxuICBfcHJvdG8ub25NZWRpYVNlZWtpbmcgPSBmdW5jdGlvbiBvbk1lZGlhU2Vla2luZygpIHtcbiAgICBpZiAodGhpcy5mcmFnQ3VycmVudCkge1xuICAgICAgdmFyIGN1cnJlbnRUaW1lID0gdGhpcy5tZWRpYSA/IHRoaXMubWVkaWEuY3VycmVudFRpbWUgOiAwO1xuICAgICAgdmFyIHRvbGVyYW5jZSA9IHRoaXMuY29uZmlnLm1heEZyYWdMb29rVXBUb2xlcmFuY2U7XG4gICAgICB2YXIgZnJhZ1N0YXJ0T2Zmc2V0ID0gdGhpcy5mcmFnQ3VycmVudC5zdGFydCAtIHRvbGVyYW5jZTtcbiAgICAgIHZhciBmcmFnRW5kT2Zmc2V0ID0gdGhpcy5mcmFnQ3VycmVudC5zdGFydCArIHRoaXMuZnJhZ0N1cnJlbnQuZHVyYXRpb24gKyB0b2xlcmFuY2U7IC8vIGNoZWNrIGlmIHBvc2l0aW9uIHdpbGwgYmUgb3V0IG9mIGN1cnJlbnRseSBsb2FkZWQgZnJhZyByYW5nZSBhZnRlciBzZWVraW5nIDogaWYgb3V0LCBjYW5jZWwgZnJhZyBsb2FkLCBpZiBpbiwgZG9uJ3QgZG8gYW55dGhpbmdcblxuICAgICAgaWYgKGN1cnJlbnRUaW1lIDwgZnJhZ1N0YXJ0T2Zmc2V0IHx8IGN1cnJlbnRUaW1lID4gZnJhZ0VuZE9mZnNldCkge1xuICAgICAgICBpZiAodGhpcy5mcmFnQ3VycmVudC5sb2FkZXIpIHtcbiAgICAgICAgICB0aGlzLmZyYWdDdXJyZW50LmxvYWRlci5hYm9ydCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5mcmFnbWVudFRyYWNrZXIucmVtb3ZlRnJhZ21lbnQodGhpcy5mcmFnQ3VycmVudCk7XG4gICAgICAgIHRoaXMuZnJhZ0N1cnJlbnQgPSBudWxsO1xuICAgICAgICB0aGlzLmZyYWdQcmV2aW91cyA9IG51bGw7IC8vIHN3aXRjaCB0byBJRExFIHN0YXRlIHRvIGxvYWQgbmV3IGZyYWdtZW50XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLklETEU7IC8vIHNwZWVkIHVwIHRoaW5nc1xuXG4gICAgICAgIHRoaXMudGljaygpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU3VidGl0bGVTdHJlYW1Db250cm9sbGVyO1xufShiYXNlX3N0cmVhbV9jb250cm9sbGVyX0Jhc2VTdHJlYW1Db250cm9sbGVyKTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3V0aWxzL21lZGlha2V5cy1oZWxwZXIudHNcbi8qKlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTmF2aWdhdG9yL3JlcXVlc3RNZWRpYUtleVN5c3RlbUFjY2Vzc1xuICovXG52YXIgS2V5U3lzdGVtcztcblxuKGZ1bmN0aW9uIChLZXlTeXN0ZW1zKSB7XG4gIEtleVN5c3RlbXNbXCJXSURFVklORVwiXSA9IFwiY29tLndpZGV2aW5lLmFscGhhXCI7XG4gIEtleVN5c3RlbXNbXCJQTEFZUkVBRFlcIl0gPSBcImNvbS5taWNyb3NvZnQucGxheXJlYWR5XCI7XG59KShLZXlTeXN0ZW1zIHx8IChLZXlTeXN0ZW1zID0ge30pKTtcblxudmFyIHJlcXVlc3RNZWRpYUtleVN5c3RlbUFjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5uYXZpZ2F0b3IgJiYgd2luZG93Lm5hdmlnYXRvci5yZXF1ZXN0TWVkaWFLZXlTeXN0ZW1BY2Nlc3MpIHtcbiAgICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci5yZXF1ZXN0TWVkaWFLZXlTeXN0ZW1BY2Nlc3MuYmluZCh3aW5kb3cubmF2aWdhdG9yKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufSgpO1xuXG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvbnRyb2xsZXIvZW1lLWNvbnRyb2xsZXIudHNcbmZ1bmN0aW9uIGVtZV9jb250cm9sbGVyX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBlbWVfY29udHJvbGxlcl9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGVtZV9jb250cm9sbGVyX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBlbWVfY29udHJvbGxlcl9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBlbWVfY29udHJvbGxlcl9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIEBhdXRob3IgU3RlcGhhbiBIZXNzZSA8ZGlzcGFyYXRAZ21haWwuY29tPiB8IDx0Y2hha2FiYW1AZ21haWwuY29tPlxuICpcbiAqIERSTSBzdXBwb3J0IGZvciBIbHMuanNcbiAqL1xuXG5cblxuXG5cbnZhciBNQVhfTElDRU5TRV9SRVFVRVNUX0ZBSUxVUkVTID0gMztcbi8qKlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTWVkaWFLZXlTeXN0ZW1Db25maWd1cmF0aW9uXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IGF1ZGlvQ29kZWNzIExpc3Qgb2YgcmVxdWlyZWQgYXVkaW8gY29kZWNzIHRvIHN1cHBvcnRcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gdmlkZW9Db2RlY3MgTGlzdCBvZiByZXF1aXJlZCB2aWRlbyBjb2RlY3MgdG8gc3VwcG9ydFxuICogQHBhcmFtIHtvYmplY3R9IGRybVN5c3RlbU9wdGlvbnMgT3B0aW9uYWwgcGFyYW1ldGVycy9yZXF1aXJlbWVudHMgZm9yIHRoZSBrZXktc3lzdGVtXG4gKiBAcmV0dXJucyB7QXJyYXk8TWVkaWFTeXN0ZW1Db25maWd1cmF0aW9uPn0gQW4gYXJyYXkgb2Ygc3VwcG9ydGVkIGNvbmZpZ3VyYXRpb25zXG4gKi9cblxudmFyIGNyZWF0ZVdpZGV2aW5lTWVkaWFLZXlTeXN0ZW1Db25maWd1cmF0aW9ucyA9IGZ1bmN0aW9uIGNyZWF0ZVdpZGV2aW5lTWVkaWFLZXlTeXN0ZW1Db25maWd1cmF0aW9ucyhhdWRpb0NvZGVjcywgdmlkZW9Db2RlY3MsIGRybVN5c3RlbU9wdGlvbnMpIHtcbiAgLyoganNoaW50IGlnbm9yZTpsaW5lICovXG4gIHZhciBiYXNlQ29uZmlnID0ge1xuICAgIC8vIGluaXREYXRhVHlwZXM6IFsna2V5aWRzJywgJ21wNCddLFxuICAgIC8vIGxhYmVsOiBcIlwiLFxuICAgIC8vIHBlcnNpc3RlbnRTdGF0ZTogXCJub3QtYWxsb3dlZFwiLCAvLyBvciBcInJlcXVpcmVkXCIgP1xuICAgIC8vIGRpc3RpbmN0aXZlSWRlbnRpZmllcjogXCJub3QtYWxsb3dlZFwiLCAvLyBvciBcInJlcXVpcmVkXCIgP1xuICAgIC8vIHNlc3Npb25UeXBlczogWyd0ZW1wb3JhcnknXSxcbiAgICBhdWRpb0NhcGFiaWxpdGllczogW10sXG4gICAgLy8geyBjb250ZW50VHlwZTogJ2F1ZGlvL21wNDsgY29kZWNzPVwibXA0YS40MC4yXCInIH1cbiAgICB2aWRlb0NhcGFiaWxpdGllczogW10gLy8geyBjb250ZW50VHlwZTogJ3ZpZGVvL21wNDsgY29kZWNzPVwiYXZjMS40MkUwMUVcIicgfVxuXG4gIH07XG4gIGF1ZGlvQ29kZWNzLmZvckVhY2goZnVuY3Rpb24gKGNvZGVjKSB7XG4gICAgYmFzZUNvbmZpZy5hdWRpb0NhcGFiaWxpdGllcy5wdXNoKHtcbiAgICAgIGNvbnRlbnRUeXBlOiBcImF1ZGlvL21wNDsgY29kZWNzPVxcXCJcIiArIGNvZGVjICsgXCJcXFwiXCIsXG4gICAgICByb2J1c3RuZXNzOiBkcm1TeXN0ZW1PcHRpb25zLmF1ZGlvUm9idXN0bmVzcyB8fCAnJ1xuICAgIH0pO1xuICB9KTtcbiAgdmlkZW9Db2RlY3MuZm9yRWFjaChmdW5jdGlvbiAoY29kZWMpIHtcbiAgICBiYXNlQ29uZmlnLnZpZGVvQ2FwYWJpbGl0aWVzLnB1c2goe1xuICAgICAgY29udGVudFR5cGU6IFwidmlkZW8vbXA0OyBjb2RlY3M9XFxcIlwiICsgY29kZWMgKyBcIlxcXCJcIixcbiAgICAgIHJvYnVzdG5lc3M6IGRybVN5c3RlbU9wdGlvbnMudmlkZW9Sb2J1c3RuZXNzIHx8ICcnXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gW2Jhc2VDb25maWddO1xufTtcbi8qKlxuICogVGhlIGlkZWEgaGVyZSBpcyB0byBoYW5kbGUga2V5LXN5c3RlbSAoYW5kIHRoZWlyIHJlc3BlY3RpdmUgcGxhdGZvcm1zKSBzcGVjaWZpYyBjb25maWd1cmF0aW9uIGRpZmZlcmVuY2VzXG4gKiBpbiBvcmRlciB0byB3b3JrIHdpdGggdGhlIGxvY2FsIHJlcXVlc3RNZWRpYUtleVN5c3RlbUFjY2VzcyBtZXRob2QuXG4gKlxuICogV2UgY2FuIGFsc28gcnVsZS1vdXQgcGxhdGZvcm0tcmVsYXRlZCBrZXktc3lzdGVtIHN1cHBvcnQgYXQgdGhpcyBwb2ludCBieSB0aHJvd2luZyBhbiBlcnJvci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5U3lzdGVtIElkZW50aWZpZXIgZm9yIHRoZSBrZXktc3lzdGVtLCBzZWUgYEtleVN5c3RlbXNgIGVudW1cbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gYXVkaW9Db2RlY3MgTGlzdCBvZiByZXF1aXJlZCBhdWRpbyBjb2RlY3MgdG8gc3VwcG9ydFxuICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSB2aWRlb0NvZGVjcyBMaXN0IG9mIHJlcXVpcmVkIHZpZGVvIGNvZGVjcyB0byBzdXBwb3J0XG4gKiBAdGhyb3dzIHdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgYSB1bmtub3duIGtleSBzeXN0ZW0gaXMgcGFzc2VkXG4gKiBAcmV0dXJucyB7QXJyYXk8TWVkaWFTeXN0ZW1Db25maWd1cmF0aW9uPn0gQSBub24tZW1wdHkgQXJyYXkgb2YgTWVkaWFLZXlTeXN0ZW1Db25maWd1cmF0aW9uIG9iamVjdHNcbiAqL1xuXG5cbnZhciBlbWVfY29udHJvbGxlcl9nZXRTdXBwb3J0ZWRNZWRpYUtleVN5c3RlbUNvbmZpZ3VyYXRpb25zID0gZnVuY3Rpb24gZ2V0U3VwcG9ydGVkTWVkaWFLZXlTeXN0ZW1Db25maWd1cmF0aW9ucyhrZXlTeXN0ZW0sIGF1ZGlvQ29kZWNzLCB2aWRlb0NvZGVjcywgZHJtU3lzdGVtT3B0aW9ucykge1xuICBzd2l0Y2ggKGtleVN5c3RlbSkge1xuICAgIGNhc2UgS2V5U3lzdGVtcy5XSURFVklORTpcbiAgICAgIHJldHVybiBjcmVhdGVXaWRldmluZU1lZGlhS2V5U3lzdGVtQ29uZmlndXJhdGlvbnMoYXVkaW9Db2RlY3MsIHZpZGVvQ29kZWNzLCBkcm1TeXN0ZW1PcHRpb25zKTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGtleS1zeXN0ZW06IFwiICsga2V5U3lzdGVtKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDb250cm9sbGVyIHRvIGRlYWwgd2l0aCBlbmNyeXB0ZWQgbWVkaWEgZXh0ZW5zaW9ucyAoRU1FKVxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRW5jcnlwdGVkX01lZGlhX0V4dGVuc2lvbnNfQVBJXG4gKlxuICogQGNsYXNzXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIGVtZV9jb250cm9sbGVyX0VNRUNvbnRyb2xsZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9FdmVudEhhbmRsZXIpIHtcbiAgZW1lX2NvbnRyb2xsZXJfaW5oZXJpdHNMb29zZShFTUVDb250cm9sbGVyLCBfRXZlbnRIYW5kbGVyKTtcblxuICAvKipcbiAgICAgKiBAY29uc3RydWN0c1xuICAgICAqIEBwYXJhbSB7SGxzfSBobHMgT3VyIEhscy5qcyBpbnN0YW5jZVxuICAgICAqL1xuICBmdW5jdGlvbiBFTUVDb250cm9sbGVyKGhscykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0V2ZW50SGFuZGxlci5jYWxsKHRoaXMsIGhscywgZXZlbnRzW1wiZGVmYXVsdFwiXS5NRURJQV9BVFRBQ0hFRCwgZXZlbnRzW1wiZGVmYXVsdFwiXS5NRURJQV9ERVRBQ0hFRCwgZXZlbnRzW1wiZGVmYXVsdFwiXS5NQU5JRkVTVF9QQVJTRUQpIHx8IHRoaXM7XG4gICAgX3RoaXMuX3dpZGV2aW5lTGljZW5zZVVybCA9IHZvaWQgMDtcbiAgICBfdGhpcy5fbGljZW5zZVhoclNldHVwID0gdm9pZCAwO1xuICAgIF90aGlzLl9lbWVFbmFibGVkID0gdm9pZCAwO1xuICAgIF90aGlzLl9yZXF1ZXN0TWVkaWFLZXlTeXN0ZW1BY2Nlc3MgPSB2b2lkIDA7XG4gICAgX3RoaXMuX2RybVN5c3RlbU9wdGlvbnMgPSB2b2lkIDA7XG4gICAgX3RoaXMuX2NvbmZpZyA9IHZvaWQgMDtcbiAgICBfdGhpcy5fbWVkaWFLZXlzTGlzdCA9IFtdO1xuICAgIF90aGlzLl9tZWRpYSA9IG51bGw7XG4gICAgX3RoaXMuX2hhc1NldE1lZGlhS2V5cyA9IGZhbHNlO1xuICAgIF90aGlzLl9yZXF1ZXN0TGljZW5zZUZhaWx1cmVDb3VudCA9IDA7XG4gICAgX3RoaXMubWVkaWFLZXlzUHJvbWlzZSA9IG51bGw7XG5cbiAgICBfdGhpcy5fb25NZWRpYUVuY3J5cHRlZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKFwiTWVkaWEgaXMgZW5jcnlwdGVkIHVzaW5nIFxcXCJcIiArIGUuaW5pdERhdGFUeXBlICsgXCJcXFwiIGluaXQgZGF0YSB0eXBlXCIpO1xuXG4gICAgICBpZiAoIV90aGlzLm1lZGlhS2V5c1Byb21pc2UpIHtcbiAgICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmVycm9yKCdGYXRhbDogTWVkaWEgaXMgZW5jcnlwdGVkIGJ1dCBubyBDRE0gYWNjZXNzIG9yIG5vIGtleXMgaGF2ZSBiZWVuIHJlcXVlc3RlZCcpO1xuXG4gICAgICAgIF90aGlzLmhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uRVJST1IsIHtcbiAgICAgICAgICB0eXBlOiBlcnJvcnNbXCJFcnJvclR5cGVzXCJdLktFWV9TWVNURU1fRVJST1IsXG4gICAgICAgICAgZGV0YWlsczogZXJyb3JzW1wiRXJyb3JEZXRhaWxzXCJdLktFWV9TWVNURU1fTk9fS0VZUyxcbiAgICAgICAgICBmYXRhbDogdHJ1ZVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBmaW5hbGx5U2V0S2V5QW5kU3RhcnRTZXNzaW9uID0gZnVuY3Rpb24gZmluYWxseVNldEtleUFuZFN0YXJ0U2Vzc2lvbihtZWRpYUtleXMpIHtcbiAgICAgICAgaWYgKCFfdGhpcy5fbWVkaWEpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5fYXR0ZW1wdFNldE1lZGlhS2V5cyhtZWRpYUtleXMpO1xuXG4gICAgICAgIF90aGlzLl9nZW5lcmF0ZVJlcXVlc3RXaXRoUHJlZmVycmVkS2V5U2Vzc2lvbihlLmluaXREYXRhVHlwZSwgZS5pbml0RGF0YSk7XG4gICAgICB9OyAvLyBDb3VsZCB1c2UgYFByb21pc2UuZmluYWxseWAgYnV0IHNvbWUgUHJvbWlzZSBwb2x5ZmlsbHMgYXJlIG1pc3NpbmcgaXRcblxuXG4gICAgICBfdGhpcy5tZWRpYUtleXNQcm9taXNlLnRoZW4oZmluYWxseVNldEtleUFuZFN0YXJ0U2Vzc2lvbikuY2F0Y2goZmluYWxseVNldEtleUFuZFN0YXJ0U2Vzc2lvbik7XG4gICAgfTtcblxuICAgIF90aGlzLl9jb25maWcgPSBobHMuY29uZmlnO1xuICAgIF90aGlzLl93aWRldmluZUxpY2Vuc2VVcmwgPSBfdGhpcy5fY29uZmlnLndpZGV2aW5lTGljZW5zZVVybDtcbiAgICBfdGhpcy5fbGljZW5zZVhoclNldHVwID0gX3RoaXMuX2NvbmZpZy5saWNlbnNlWGhyU2V0dXA7XG4gICAgX3RoaXMuX2VtZUVuYWJsZWQgPSBfdGhpcy5fY29uZmlnLmVtZUVuYWJsZWQ7XG4gICAgX3RoaXMuX3JlcXVlc3RNZWRpYUtleVN5c3RlbUFjY2VzcyA9IF90aGlzLl9jb25maWcucmVxdWVzdE1lZGlhS2V5U3lzdGVtQWNjZXNzRnVuYztcbiAgICBfdGhpcy5fZHJtU3lzdGVtT3B0aW9ucyA9IGhscy5jb25maWcuZHJtU3lzdGVtT3B0aW9ucztcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlTeXN0ZW0gSWRlbnRpZmllciBmb3IgdGhlIGtleS1zeXN0ZW0sIHNlZSBgS2V5U3lzdGVtc2AgZW51bVxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBMaWNlbnNlIHNlcnZlciBVUkwgZm9yIGtleS1zeXN0ZW0gKGlmIGFueSBjb25maWd1cmVkLCBvdGhlcndpc2UgY2F1c2VzIGVycm9yKVxuICAgKiBAdGhyb3dzIGlmIGEgdW5zdXBwb3J0ZWQga2V5c3lzdGVtIGlzIHBhc3NlZFxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBFTUVDb250cm9sbGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0TGljZW5zZVNlcnZlclVybCA9IGZ1bmN0aW9uIGdldExpY2Vuc2VTZXJ2ZXJVcmwoa2V5U3lzdGVtKSB7XG4gICAgc3dpdGNoIChrZXlTeXN0ZW0pIHtcbiAgICAgIGNhc2UgS2V5U3lzdGVtcy5XSURFVklORTpcbiAgICAgICAgaWYgKCF0aGlzLl93aWRldmluZUxpY2Vuc2VVcmwpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl93aWRldmluZUxpY2Vuc2VVcmw7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKFwibm8gbGljZW5zZSBzZXJ2ZXIgVVJMIGNvbmZpZ3VyZWQgZm9yIGtleS1zeXN0ZW0gXFxcIlwiICsga2V5U3lzdGVtICsgXCJcXFwiXCIpO1xuICB9XG4gIC8qKlxuICAgICAqIFJlcXVlc3RzIGFjY2VzcyBvYmplY3QgYW5kIGFkZHMgaXQgdG8gb3VyIGxpc3QgdXBvbiBzdWNjZXNzXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5U3lzdGVtIFN5c3RlbSBJRCAoc2VlIGBLZXlTeXN0ZW1zYClcbiAgICAgKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IGF1ZGlvQ29kZWNzIExpc3Qgb2YgcmVxdWlyZWQgYXVkaW8gY29kZWNzIHRvIHN1cHBvcnRcbiAgICAgKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IHZpZGVvQ29kZWNzIExpc3Qgb2YgcmVxdWlyZWQgdmlkZW8gY29kZWNzIHRvIHN1cHBvcnRcbiAgICAgKiBAdGhyb3dzIFdoZW4gYSB1bnN1cHBvcnRlZCBLZXlTeXN0ZW0gaXMgcGFzc2VkXG4gICAgICovXG4gIDtcblxuICBfcHJvdG8uX2F0dGVtcHRLZXlTeXN0ZW1BY2Nlc3MgPSBmdW5jdGlvbiBfYXR0ZW1wdEtleVN5c3RlbUFjY2VzcyhrZXlTeXN0ZW0sIGF1ZGlvQ29kZWNzLCB2aWRlb0NvZGVjcykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgLy8gVGhpcyBjYW4gdGhyb3csIGJ1dCBpcyBjYXVnaHQgaW4gZXZlbnQgaGFuZGxlciBjYWxscGF0aFxuICAgIHZhciBtZWRpYUtleVN5c3RlbUNvbmZpZ3MgPSBlbWVfY29udHJvbGxlcl9nZXRTdXBwb3J0ZWRNZWRpYUtleVN5c3RlbUNvbmZpZ3VyYXRpb25zKGtleVN5c3RlbSwgYXVkaW9Db2RlY3MsIHZpZGVvQ29kZWNzLCB0aGlzLl9kcm1TeXN0ZW1PcHRpb25zKTtcbiAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKCdSZXF1ZXN0aW5nIGVuY3J5cHRlZCBtZWRpYSBrZXktc3lzdGVtIGFjY2VzcycpOyAvLyBleHBlY3RpbmcgaW50ZXJmYWNlIGxpa2Ugd2luZG93Lm5hdmlnYXRvci5yZXF1ZXN0TWVkaWFLZXlTeXN0ZW1BY2Nlc3NcblxuICAgIHZhciBrZXlTeXN0ZW1BY2Nlc3NQcm9taXNlID0gdGhpcy5yZXF1ZXN0TWVkaWFLZXlTeXN0ZW1BY2Nlc3Moa2V5U3lzdGVtLCBtZWRpYUtleVN5c3RlbUNvbmZpZ3MpO1xuICAgIHRoaXMubWVkaWFLZXlzUHJvbWlzZSA9IGtleVN5c3RlbUFjY2Vzc1Byb21pc2UudGhlbihmdW5jdGlvbiAobWVkaWFLZXlTeXN0ZW1BY2Nlc3MpIHtcbiAgICAgIHJldHVybiBfdGhpczIuX29uTWVkaWFLZXlTeXN0ZW1BY2Nlc3NPYnRhaW5lZChrZXlTeXN0ZW0sIG1lZGlhS2V5U3lzdGVtQWNjZXNzKTtcbiAgICB9KTtcbiAgICBrZXlTeXN0ZW1BY2Nlc3NQcm9taXNlLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5lcnJvcihcIkZhaWxlZCB0byBvYnRhaW4ga2V5LXN5c3RlbSBcXFwiXCIgKyBrZXlTeXN0ZW0gKyBcIlxcXCIgYWNjZXNzOlwiLCBlcnIpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgICAqIEhhbmRsZXMgb2J0YWluaW5nIGFjY2VzcyB0byBhIGtleS1zeXN0ZW1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlTeXN0ZW1cbiAgICAgKiBAcGFyYW0ge01lZGlhS2V5U3lzdGVtQWNjZXNzfSBtZWRpYUtleVN5c3RlbUFjY2VzcyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTWVkaWFLZXlTeXN0ZW1BY2Nlc3NcbiAgICAgKi9cbiAgX3Byb3RvLl9vbk1lZGlhS2V5U3lzdGVtQWNjZXNzT2J0YWluZWQgPSBmdW5jdGlvbiBfb25NZWRpYUtleVN5c3RlbUFjY2Vzc09idGFpbmVkKGtleVN5c3RlbSwgbWVkaWFLZXlTeXN0ZW1BY2Nlc3MpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJBY2Nlc3MgZm9yIGtleS1zeXN0ZW0gXFxcIlwiICsga2V5U3lzdGVtICsgXCJcXFwiIG9idGFpbmVkXCIpO1xuICAgIHZhciBtZWRpYUtleXNMaXN0SXRlbSA9IHtcbiAgICAgIG1lZGlhS2V5c1Nlc3Npb25Jbml0aWFsaXplZDogZmFsc2UsXG4gICAgICBtZWRpYUtleVN5c3RlbUFjY2VzczogbWVkaWFLZXlTeXN0ZW1BY2Nlc3MsXG4gICAgICBtZWRpYUtleVN5c3RlbURvbWFpbjoga2V5U3lzdGVtXG4gICAgfTtcblxuICAgIHRoaXMuX21lZGlhS2V5c0xpc3QucHVzaChtZWRpYUtleXNMaXN0SXRlbSk7XG5cbiAgICB2YXIgbWVkaWFLZXlzUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG1lZGlhS2V5U3lzdGVtQWNjZXNzLmNyZWF0ZU1lZGlhS2V5cygpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKG1lZGlhS2V5cykge1xuICAgICAgbWVkaWFLZXlzTGlzdEl0ZW0ubWVkaWFLZXlzID0gbWVkaWFLZXlzO1xuICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyhcIk1lZGlhLWtleXMgY3JlYXRlZCBmb3Iga2V5LXN5c3RlbSBcXFwiXCIgKyBrZXlTeXN0ZW0gKyBcIlxcXCJcIik7XG5cbiAgICAgIF90aGlzMy5fb25NZWRpYUtleXNDcmVhdGVkKCk7XG5cbiAgICAgIHJldHVybiBtZWRpYUtleXM7XG4gICAgfSk7XG4gICAgbWVkaWFLZXlzUHJvbWlzZS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0uZXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgbWVkaWEta2V5czonLCBlcnIpO1xuICAgIH0pO1xuICAgIHJldHVybiBtZWRpYUtleXNQcm9taXNlO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGVzIGtleS1jcmVhdGlvbiAocmVwcmVzZW50cyBhY2Nlc3MgdG8gQ0RNKS4gV2UgYXJlIGdvaW5nIHRvIGNyZWF0ZSBrZXktc2Vzc2lvbnMgdXBvbiB0aGlzXG4gICAqIGZvciBhbGwgZXhpc3Rpbmcga2V5cyB3aGVyZSBubyBzZXNzaW9uIGV4aXN0cyB5ZXQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLl9vbk1lZGlhS2V5c0NyZWF0ZWQgPSBmdW5jdGlvbiBfb25NZWRpYUtleXNDcmVhdGVkKCkge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgLy8gY2hlY2sgZm9yIGFsbCBrZXktbGlzdCBpdGVtcyBpZiBhIHNlc3Npb24gZXhpc3RzLCBvdGhlcndpc2UsIGNyZWF0ZSBvbmVcbiAgICB0aGlzLl9tZWRpYUtleXNMaXN0LmZvckVhY2goZnVuY3Rpb24gKG1lZGlhS2V5c0xpc3RJdGVtKSB7XG4gICAgICBpZiAoIW1lZGlhS2V5c0xpc3RJdGVtLm1lZGlhS2V5c1Nlc3Npb24pIHtcbiAgICAgICAgLy8gbWVkaWFLZXlzIGlzIGRlZmluaXRlbHkgaW5pdGlhbGl6ZWQgaGVyZVxuICAgICAgICBtZWRpYUtleXNMaXN0SXRlbS5tZWRpYUtleXNTZXNzaW9uID0gbWVkaWFLZXlzTGlzdEl0ZW0ubWVkaWFLZXlzLmNyZWF0ZVNlc3Npb24oKTtcblxuICAgICAgICBfdGhpczQuX29uTmV3TWVkaWFLZXlTZXNzaW9uKG1lZGlhS2V5c0xpc3RJdGVtLm1lZGlhS2V5c1Nlc3Npb24pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBrZXlTZXNzaW9uXG4gICAgICovXG4gIDtcblxuICBfcHJvdG8uX29uTmV3TWVkaWFLZXlTZXNzaW9uID0gZnVuY3Rpb24gX29uTmV3TWVkaWFLZXlTZXNzaW9uKGtleVNlc3Npb24pIHtcbiAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJOZXcga2V5LXN5c3RlbSBzZXNzaW9uIFwiICsga2V5U2Vzc2lvbi5zZXNzaW9uSWQpO1xuICAgIGtleVNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgX3RoaXM1Ll9vbktleVNlc3Npb25NZXNzYWdlKGtleVNlc3Npb24sIGV2ZW50Lm1lc3NhZ2UpO1xuICAgIH0sIGZhbHNlKTtcbiAgfVxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtNZWRpYUtleVNlc3Npb259IGtleVNlc3Npb25cbiAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gbWVzc2FnZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5fb25LZXlTZXNzaW9uTWVzc2FnZSA9IGZ1bmN0aW9uIF9vbktleVNlc3Npb25NZXNzYWdlKGtleVNlc3Npb24sIG1lc3NhZ2UpIHtcbiAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKCdHb3QgRU1FIG1lc3NhZ2UgZXZlbnQsIGNyZWF0aW5nIGxpY2Vuc2UgcmVxdWVzdCcpO1xuXG4gICAgdGhpcy5fcmVxdWVzdExpY2Vuc2UobWVzc2FnZSwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJSZWNlaXZlZCBsaWNlbnNlIGRhdGEgKGxlbmd0aDogXCIgKyAoZGF0YSA/IGRhdGEuYnl0ZUxlbmd0aCA6IGRhdGEpICsgXCIpLCB1cGRhdGluZyBrZXktc2Vzc2lvblwiKTtcbiAgICAgIGtleVNlc3Npb24udXBkYXRlKGRhdGEpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0gZSB7TWVkaWFFbmNyeXB0ZWRFdmVudH1cbiAgICovXG4gIDtcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wcm90by5fYXR0ZW1wdFNldE1lZGlhS2V5cyA9IGZ1bmN0aW9uIF9hdHRlbXB0U2V0TWVkaWFLZXlzKG1lZGlhS2V5cykge1xuICAgIGlmICghdGhpcy5fbWVkaWEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGVkIHRvIHNldCBtZWRpYUtleXMgd2l0aG91dCBmaXJzdCBhdHRhY2hpbmcgYSBtZWRpYSBlbGVtZW50Jyk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9oYXNTZXRNZWRpYUtleXMpIHtcbiAgICAgIC8vIEZJWE1FOiBzZWUgaWYgd2UgY2FuL3dhbnQvbmVlZC10byByZWFsbHkgdG8gZGVhbCB3aXRoIHNldmVyYWwgcG90ZW50aWFsIGtleS1zZXNzaW9ucz9cbiAgICAgIHZhciBrZXlzTGlzdEl0ZW0gPSB0aGlzLl9tZWRpYUtleXNMaXN0WzBdO1xuXG4gICAgICBpZiAoIWtleXNMaXN0SXRlbSB8fCAha2V5c0xpc3RJdGVtLm1lZGlhS2V5cykge1xuICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0uZXJyb3IoJ0ZhdGFsOiBNZWRpYSBpcyBlbmNyeXB0ZWQgYnV0IG5vIENETSBhY2Nlc3Mgb3Igbm8ga2V5cyBoYXZlIGJlZW4gb2J0YWluZWQgeWV0Jyk7XG4gICAgICAgIHRoaXMuaGxzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5FUlJPUiwge1xuICAgICAgICAgIHR5cGU6IGVycm9yc1tcIkVycm9yVHlwZXNcIl0uS0VZX1NZU1RFTV9FUlJPUixcbiAgICAgICAgICBkZXRhaWxzOiBlcnJvcnNbXCJFcnJvckRldGFpbHNcIl0uS0VZX1NZU1RFTV9OT19LRVlTLFxuICAgICAgICAgIGZhdGFsOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coJ1NldHRpbmcga2V5cyBmb3IgZW5jcnlwdGVkIG1lZGlhJyk7XG5cbiAgICAgIHRoaXMuX21lZGlhLnNldE1lZGlhS2V5cyhrZXlzTGlzdEl0ZW0ubWVkaWFLZXlzKTtcblxuICAgICAgdGhpcy5faGFzU2V0TWVkaWFLZXlzID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLl9nZW5lcmF0ZVJlcXVlc3RXaXRoUHJlZmVycmVkS2V5U2Vzc2lvbiA9IGZ1bmN0aW9uIF9nZW5lcmF0ZVJlcXVlc3RXaXRoUHJlZmVycmVkS2V5U2Vzc2lvbihpbml0RGF0YVR5cGUsIGluaXREYXRhKSB7XG4gICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICAvLyBGSVhNRTogc2VlIGlmIHdlIGNhbi93YW50L25lZWQtdG8gcmVhbGx5IHRvIGRlYWwgd2l0aCBzZXZlcmFsIHBvdGVudGlhbCBrZXktc2Vzc2lvbnM/XG4gICAgdmFyIGtleXNMaXN0SXRlbSA9IHRoaXMuX21lZGlhS2V5c0xpc3RbMF07XG5cbiAgICBpZiAoIWtleXNMaXN0SXRlbSkge1xuICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmVycm9yKCdGYXRhbDogTWVkaWEgaXMgZW5jcnlwdGVkIGJ1dCBub3QgYW55IGtleS1zeXN0ZW0gYWNjZXNzIGhhcyBiZWVuIG9idGFpbmVkIHlldCcpO1xuICAgICAgdGhpcy5obHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkVSUk9SLCB7XG4gICAgICAgIHR5cGU6IGVycm9yc1tcIkVycm9yVHlwZXNcIl0uS0VZX1NZU1RFTV9FUlJPUixcbiAgICAgICAgZGV0YWlsczogZXJyb3JzW1wiRXJyb3JEZXRhaWxzXCJdLktFWV9TWVNURU1fTk9fQUNDRVNTLFxuICAgICAgICBmYXRhbDogdHJ1ZVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGtleXNMaXN0SXRlbS5tZWRpYUtleXNTZXNzaW9uSW5pdGlhbGl6ZWQpIHtcbiAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuKCdLZXktU2Vzc2lvbiBhbHJlYWR5IGluaXRpYWxpemVkIGJ1dCByZXF1ZXN0ZWQgYWdhaW4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIga2V5U2Vzc2lvbiA9IGtleXNMaXN0SXRlbS5tZWRpYUtleXNTZXNzaW9uO1xuXG4gICAgaWYgKCFrZXlTZXNzaW9uKSB7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0uZXJyb3IoJ0ZhdGFsOiBNZWRpYSBpcyBlbmNyeXB0ZWQgYnV0IG5vIGtleS1zZXNzaW9uIGV4aXN0aW5nJyk7XG4gICAgICB0aGlzLmhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uRVJST1IsIHtcbiAgICAgICAgdHlwZTogZXJyb3JzW1wiRXJyb3JUeXBlc1wiXS5LRVlfU1lTVEVNX0VSUk9SLFxuICAgICAgICBkZXRhaWxzOiBlcnJvcnNbXCJFcnJvckRldGFpbHNcIl0uS0VZX1NZU1RFTV9OT19TRVNTSU9OLFxuICAgICAgICBmYXRhbDogdHJ1ZVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBpbml0RGF0YSBpcyBudWxsIGlmIHRoZSBtZWRpYSBpcyBub3QgQ09SUy1zYW1lLW9yaWdpblxuXG5cbiAgICBpZiAoIWluaXREYXRhKSB7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ud2FybignRmF0YWw6IGluaXREYXRhIHJlcXVpcmVkIGZvciBnZW5lcmF0aW5nIGEga2V5IHNlc3Npb24gaXMgbnVsbCcpO1xuICAgICAgdGhpcy5obHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkVSUk9SLCB7XG4gICAgICAgIHR5cGU6IGVycm9yc1tcIkVycm9yVHlwZXNcIl0uS0VZX1NZU1RFTV9FUlJPUixcbiAgICAgICAgZGV0YWlsczogZXJyb3JzW1wiRXJyb3JEZXRhaWxzXCJdLktFWV9TWVNURU1fTk9fSU5JVF9EQVRBLFxuICAgICAgICBmYXRhbDogdHJ1ZVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyhcIkdlbmVyYXRpbmcga2V5LXNlc3Npb24gcmVxdWVzdCBmb3IgXFxcIlwiICsgaW5pdERhdGFUeXBlICsgXCJcXFwiIGluaXQgZGF0YSB0eXBlXCIpO1xuICAgIGtleXNMaXN0SXRlbS5tZWRpYUtleXNTZXNzaW9uSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIGtleVNlc3Npb24uZ2VuZXJhdGVSZXF1ZXN0KGluaXREYXRhVHlwZSwgaW5pdERhdGEpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmRlYnVnKCdLZXktc2Vzc2lvbiBnZW5lcmF0aW9uIHN1Y2NlZWRlZCcpO1xuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5lcnJvcignRXJyb3IgZ2VuZXJhdGluZyBrZXktc2Vzc2lvbiByZXF1ZXN0OicsIGVycik7XG5cbiAgICAgIF90aGlzNi5obHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkVSUk9SLCB7XG4gICAgICAgIHR5cGU6IGVycm9yc1tcIkVycm9yVHlwZXNcIl0uS0VZX1NZU1RFTV9FUlJPUixcbiAgICAgICAgZGV0YWlsczogZXJyb3JzW1wiRXJyb3JEZXRhaWxzXCJdLktFWV9TWVNURU1fTk9fU0VTU0lPTixcbiAgICAgICAgZmF0YWw6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBMaWNlbnNlIHNlcnZlciBVUkxcbiAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0ga2V5TWVzc2FnZSBNZXNzYWdlIGRhdGEgaXNzdWVkIGJ5IGtleS1zeXN0ZW1cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIHdoZW4gWEhSIGhhcyBzdWNjZWVkZWRcbiAgICogQHJldHVybnMge1hNTEh0dHBSZXF1ZXN0fSBVbnNlbnQgKGJ1dCBvcGVuZWQgc3RhdGUpIFhIUiBvYmplY3RcbiAgICogQHRocm93cyBpZiBYTUxIdHRwUmVxdWVzdCBjb25zdHJ1Y3Rpb24gZmFpbGVkXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLl9jcmVhdGVMaWNlbnNlWGhyID0gZnVuY3Rpb24gX2NyZWF0ZUxpY2Vuc2VYaHIodXJsLCBrZXlNZXNzYWdlLCBjYWxsYmFjaykge1xuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB2YXIgbGljZW5zZVhoclNldHVwID0gdGhpcy5fbGljZW5zZVhoclNldHVwO1xuXG4gICAgdHJ5IHtcbiAgICAgIGlmIChsaWNlbnNlWGhyU2V0dXApIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBsaWNlbnNlWGhyU2V0dXAoeGhyLCB1cmwpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gbGV0J3MgdHJ5IHRvIG9wZW4gYmVmb3JlIHJ1bm5pbmcgc2V0dXBcbiAgICAgICAgICB4aHIub3BlbignUE9TVCcsIHVybCwgdHJ1ZSk7XG4gICAgICAgICAgbGljZW5zZVhoclNldHVwKHhociwgdXJsKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBpZiBsaWNlbnNlWGhyU2V0dXAgZGlkIG5vdCB5ZXQgY2FsbCBvcGVuLCBsZXQncyBkbyBpdCBub3dcblxuXG4gICAgICBpZiAoIXhoci5yZWFkeVN0YXRlKSB7XG4gICAgICAgIHhoci5vcGVuKCdQT1NUJywgdXJsLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJRTExIHRocm93cyBhbiBleGNlcHRpb24gb24geGhyLm9wZW4gaWYgYXR0ZW1wdGluZyB0byBhY2Nlc3MgYW4gSFRUUCByZXNvdXJjZSBvdmVyIEhUVFBTXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpc3N1ZSBzZXR0aW5nIHVwIEtleVN5c3RlbSBsaWNlbnNlIFhIUiBcIiArIGUpO1xuICAgIH0gLy8gQmVjYXVzZSB3ZSBzZXQgcmVzcG9uc2VUeXBlIHRvIEFycmF5QnVmZmVyIGhlcmUsIGNhbGxiYWNrIGlzIHR5cGVkIGFzIGhhbmRsaW5nIG9ubHkgYXJyYXkgYnVmZmVyc1xuXG5cbiAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gdGhpcy5fb25MaWNlbnNlUmVxdWVzdFJlYWR5U3RhZ2VDaGFuZ2UuYmluZCh0aGlzLCB4aHIsIHVybCwga2V5TWVzc2FnZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiB4aHI7XG4gIH1cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7WE1MSHR0cFJlcXVlc3R9IHhoclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIExpY2Vuc2Ugc2VydmVyIFVSTFxuICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBrZXlNZXNzYWdlIE1lc3NhZ2UgZGF0YSBpc3N1ZWQgYnkga2V5LXN5c3RlbVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgd2hlbiBYSFIgaGFzIHN1Y2NlZWRlZFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5fb25MaWNlbnNlUmVxdWVzdFJlYWR5U3RhZ2VDaGFuZ2UgPSBmdW5jdGlvbiBfb25MaWNlbnNlUmVxdWVzdFJlYWR5U3RhZ2VDaGFuZ2UoeGhyLCB1cmwsIGtleU1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gICAgc3dpdGNoICh4aHIucmVhZHlTdGF0ZSkge1xuICAgICAgY2FzZSA0OlxuICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgdGhpcy5fcmVxdWVzdExpY2Vuc2VGYWlsdXJlQ291bnQgPSAwO1xuICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coJ0xpY2Vuc2UgcmVxdWVzdCBzdWNjZWVkZWQnKTtcblxuICAgICAgICAgIGlmICh4aHIucmVzcG9uc2VUeXBlICE9PSAnYXJyYXlidWZmZXInKSB7XG4gICAgICAgICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ud2FybigneGhyIHJlc3BvbnNlIHR5cGUgd2FzIG5vdCBzZXQgdG8gdGhlIGV4cGVjdGVkIGFycmF5YnVmZmVyIGZvciBsaWNlbnNlIHJlcXVlc3QnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjYWxsYmFjayh4aHIucmVzcG9uc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5lcnJvcihcIkxpY2Vuc2UgUmVxdWVzdCBYSFIgZmFpbGVkIChcIiArIHVybCArIFwiKS4gU3RhdHVzOiBcIiArIHhoci5zdGF0dXMgKyBcIiAoXCIgKyB4aHIuc3RhdHVzVGV4dCArIFwiKVwiKTtcbiAgICAgICAgICB0aGlzLl9yZXF1ZXN0TGljZW5zZUZhaWx1cmVDb3VudCsrO1xuXG4gICAgICAgICAgaWYgKHRoaXMuX3JlcXVlc3RMaWNlbnNlRmFpbHVyZUNvdW50ID4gTUFYX0xJQ0VOU0VfUkVRVUVTVF9GQUlMVVJFUykge1xuICAgICAgICAgICAgdGhpcy5obHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkVSUk9SLCB7XG4gICAgICAgICAgICAgIHR5cGU6IGVycm9yc1tcIkVycm9yVHlwZXNcIl0uS0VZX1NZU1RFTV9FUlJPUixcbiAgICAgICAgICAgICAgZGV0YWlsczogZXJyb3JzW1wiRXJyb3JEZXRhaWxzXCJdLktFWV9TWVNURU1fTElDRU5TRV9SRVFVRVNUX0ZBSUxFRCxcbiAgICAgICAgICAgICAgZmF0YWw6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBhdHRlbXB0c0xlZnQgPSBNQVhfTElDRU5TRV9SRVFVRVNUX0ZBSUxVUkVTIC0gdGhpcy5fcmVxdWVzdExpY2Vuc2VGYWlsdXJlQ291bnQgKyAxO1xuICAgICAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS53YXJuKFwiUmV0cnlpbmcgbGljZW5zZSByZXF1ZXN0LCBcIiArIGF0dGVtcHRzTGVmdCArIFwiIGF0dGVtcHRzIGxlZnRcIik7XG5cbiAgICAgICAgICB0aGlzLl9yZXF1ZXN0TGljZW5zZShrZXlNZXNzYWdlLCBjYWxsYmFjayk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7TWVkaWFLZXlzTGlzdEl0ZW19IGtleXNMaXN0SXRlbVxuICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBrZXlNZXNzYWdlXG4gICAqIEByZXR1cm5zIHtBcnJheUJ1ZmZlcn0gQ2hhbGxlbmdlIGRhdGEgcG9zdGVkIHRvIGxpY2Vuc2Ugc2VydmVyXG4gICAqIEB0aHJvd3MgaWYgS2V5U3lzdGVtIGlzIHVuc3VwcG9ydGVkXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLl9nZW5lcmF0ZUxpY2Vuc2VSZXF1ZXN0Q2hhbGxlbmdlID0gZnVuY3Rpb24gX2dlbmVyYXRlTGljZW5zZVJlcXVlc3RDaGFsbGVuZ2Uoa2V5c0xpc3RJdGVtLCBrZXlNZXNzYWdlKSB7XG4gICAgc3dpdGNoIChrZXlzTGlzdEl0ZW0ubWVkaWFLZXlTeXN0ZW1Eb21haW4pIHtcbiAgICAgIC8vIGNhc2UgS2V5U3lzdGVtcy5QTEFZUkVBRFk6XG4gICAgICAvLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnRFZGdlL0RlbW9zL2Jsb2IvbWFzdGVyL2VtZS9zY3JpcHRzL2RlbW8uanNcblxuICAgICAgLypcbiAgICAgICAgaWYgKHRoaXMubGljZW5zZVR5cGUgIT09IHRoaXMuTElDRU5TRV9UWVBFX1dJREVWSU5FKSB7XG4gICAgICAgICAgLy8gRm9yIFBsYXlSZWFkeSBDRE1zLCB3ZSBuZWVkIHRvIGRpZyB0aGUgQ2hhbGxlbmdlIG91dCBvZiB0aGUgWE1MLlxuICAgICAgICAgIHZhciBrZXlNZXNzYWdlWG1sID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50MTZBcnJheShrZXlNZXNzYWdlKSksICdhcHBsaWNhdGlvbi94bWwnKTtcbiAgICAgICAgICBpZiAoa2V5TWVzc2FnZVhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnQ2hhbGxlbmdlJylbMF0pIHtcbiAgICAgICAgICAgICAgY2hhbGxlbmdlID0gYXRvYihrZXlNZXNzYWdlWG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdDaGFsbGVuZ2UnKVswXS5jaGlsZE5vZGVzWzBdLm5vZGVWYWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhyb3cgJ0Nhbm5vdCBmaW5kIDxDaGFsbGVuZ2U+IGluIGtleSBtZXNzYWdlJztcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGhlYWRlck5hbWVzID0ga2V5TWVzc2FnZVhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbmFtZScpO1xuICAgICAgICAgIHZhciBoZWFkZXJWYWx1ZXMgPSBrZXlNZXNzYWdlWG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd2YWx1ZScpO1xuICAgICAgICAgIGlmIChoZWFkZXJOYW1lcy5sZW5ndGggIT09IGhlYWRlclZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgdGhyb3cgJ01pc21hdGNoZWQgaGVhZGVyIDxuYW1lPi88dmFsdWU+IHBhaXIgaW4ga2V5IG1lc3NhZ2UnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhlYWRlck5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGhlYWRlck5hbWVzW2ldLmNoaWxkTm9kZXNbMF0ubm9kZVZhbHVlLCBoZWFkZXJWYWx1ZXNbaV0uY2hpbGROb2Rlc1swXS5ub2RlVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgICovXG4gICAgICBjYXNlIEtleVN5c3RlbXMuV0lERVZJTkU6XG4gICAgICAgIC8vIEZvciBXaWRldmluZSBDRE1zLCB0aGUgY2hhbGxlbmdlIGlzIHRoZSBrZXlNZXNzYWdlLlxuICAgICAgICByZXR1cm4ga2V5TWVzc2FnZTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bnN1cHBvcnRlZCBrZXktc3lzdGVtOiBcIiArIGtleXNMaXN0SXRlbS5tZWRpYUtleVN5c3RlbURvbWFpbik7XG4gIH1cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSBrZXlNZXNzYWdlXG4gICAqIEBwYXJhbSBjYWxsYmFja1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5fcmVxdWVzdExpY2Vuc2UgPSBmdW5jdGlvbiBfcmVxdWVzdExpY2Vuc2Uoa2V5TWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKCdSZXF1ZXN0aW5nIGNvbnRlbnQgbGljZW5zZSBmb3Iga2V5LXN5c3RlbScpO1xuICAgIHZhciBrZXlzTGlzdEl0ZW0gPSB0aGlzLl9tZWRpYUtleXNMaXN0WzBdO1xuXG4gICAgaWYgKCFrZXlzTGlzdEl0ZW0pIHtcbiAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5lcnJvcignRmF0YWwgZXJyb3I6IE1lZGlhIGlzIGVuY3J5cHRlZCBidXQgbm8ga2V5LXN5c3RlbSBhY2Nlc3MgaGFzIGJlZW4gb2J0YWluZWQgeWV0Jyk7XG4gICAgICB0aGlzLmhscy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uRVJST1IsIHtcbiAgICAgICAgdHlwZTogZXJyb3JzW1wiRXJyb3JUeXBlc1wiXS5LRVlfU1lTVEVNX0VSUk9SLFxuICAgICAgICBkZXRhaWxzOiBlcnJvcnNbXCJFcnJvckRldGFpbHNcIl0uS0VZX1NZU1RFTV9OT19BQ0NFU1MsXG4gICAgICAgIGZhdGFsOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgdmFyIF91cmwgPSB0aGlzLmdldExpY2Vuc2VTZXJ2ZXJVcmwoa2V5c0xpc3RJdGVtLm1lZGlhS2V5U3lzdGVtRG9tYWluKTtcblxuICAgICAgdmFyIF94aHIgPSB0aGlzLl9jcmVhdGVMaWNlbnNlWGhyKF91cmwsIGtleU1lc3NhZ2UsIGNhbGxiYWNrKTtcblxuICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyhcIlNlbmRpbmcgbGljZW5zZSByZXF1ZXN0IHRvIFVSTDogXCIgKyBfdXJsKTtcblxuICAgICAgdmFyIGNoYWxsZW5nZSA9IHRoaXMuX2dlbmVyYXRlTGljZW5zZVJlcXVlc3RDaGFsbGVuZ2Uoa2V5c0xpc3RJdGVtLCBrZXlNZXNzYWdlKTtcblxuICAgICAgX3hoci5zZW5kKGNoYWxsZW5nZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmVycm9yKFwiRmFpbHVyZSByZXF1ZXN0aW5nIERSTSBsaWNlbnNlOiBcIiArIGUpO1xuICAgICAgdGhpcy5obHMudHJpZ2dlcihldmVudHNbXCJkZWZhdWx0XCJdLkVSUk9SLCB7XG4gICAgICAgIHR5cGU6IGVycm9yc1tcIkVycm9yVHlwZXNcIl0uS0VZX1NZU1RFTV9FUlJPUixcbiAgICAgICAgZGV0YWlsczogZXJyb3JzW1wiRXJyb3JEZXRhaWxzXCJdLktFWV9TWVNURU1fTElDRU5TRV9SRVFVRVNUX0ZBSUxFRCxcbiAgICAgICAgZmF0YWw6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25NZWRpYUF0dGFjaGVkID0gZnVuY3Rpb24gb25NZWRpYUF0dGFjaGVkKGRhdGEpIHtcbiAgICBpZiAoIXRoaXMuX2VtZUVuYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbWVkaWEgPSBkYXRhLm1lZGlhOyAvLyBrZWVwIHJlZmVyZW5jZSBvZiBtZWRpYVxuXG4gICAgdGhpcy5fbWVkaWEgPSBtZWRpYTtcbiAgICBtZWRpYS5hZGRFdmVudExpc3RlbmVyKCdlbmNyeXB0ZWQnLCB0aGlzLl9vbk1lZGlhRW5jcnlwdGVkKTtcbiAgfTtcblxuICBfcHJvdG8ub25NZWRpYURldGFjaGVkID0gZnVuY3Rpb24gb25NZWRpYURldGFjaGVkKCkge1xuICAgIHZhciBtZWRpYSA9IHRoaXMuX21lZGlhO1xuICAgIHZhciBtZWRpYUtleXNMaXN0ID0gdGhpcy5fbWVkaWFLZXlzTGlzdDtcblxuICAgIGlmICghbWVkaWEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBtZWRpYS5yZW1vdmVFdmVudExpc3RlbmVyKCdlbmNyeXB0ZWQnLCB0aGlzLl9vbk1lZGlhRW5jcnlwdGVkKTtcbiAgICB0aGlzLl9tZWRpYSA9IG51bGw7XG4gICAgdGhpcy5fbWVkaWFLZXlzTGlzdCA9IFtdOyAvLyBDbG9zZSBhbGwgc2Vzc2lvbnMgYW5kIHJlbW92ZSBtZWRpYSBrZXlzIGZyb20gdGhlIHZpZGVvIGVsZW1lbnQuXG5cbiAgICBQcm9taXNlLmFsbChtZWRpYUtleXNMaXN0Lm1hcChmdW5jdGlvbiAobWVkaWFLZXlzTGlzdEl0ZW0pIHtcbiAgICAgIGlmIChtZWRpYUtleXNMaXN0SXRlbS5tZWRpYUtleXNTZXNzaW9uKSB7XG4gICAgICAgIHJldHVybiBtZWRpYUtleXNMaXN0SXRlbS5tZWRpYUtleXNTZXNzaW9uLmNsb3NlKCkuY2F0Y2goZnVuY3Rpb24gKCkgey8vIElnbm9yZSBlcnJvcnMgd2hlbiBjbG9zaW5nIHRoZSBzZXNzaW9ucy4gQ2xvc2luZyBhIHNlc3Npb24gdGhhdFxuICAgICAgICAgIC8vIGdlbmVyYXRlZCBubyBrZXkgcmVxdWVzdHMgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSkpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG1lZGlhLnNldE1lZGlhS2V5cyhudWxsKTtcbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7Ly8gSWdub3JlIGFueSBmYWlsdXJlcyB3aGlsZSByZW1vdmluZyBtZWRpYSBrZXlzIGZyb20gdGhlIHZpZGVvIGVsZW1lbnQuXG4gICAgfSk7XG4gIH0gLy8gVE9ETzogVXNlIG1hbmlmZXN0IHR5cGVzIGhlcmUgd2hlbiB0aGV5IGFyZSBkZWZpbmVkXG4gIDtcblxuICBfcHJvdG8ub25NYW5pZmVzdFBhcnNlZCA9IGZ1bmN0aW9uIG9uTWFuaWZlc3RQYXJzZWQoZGF0YSkge1xuICAgIGlmICghdGhpcy5fZW1lRW5hYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBhdWRpb0NvZGVjcyA9IGRhdGEubGV2ZWxzLm1hcChmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICAgIHJldHVybiBsZXZlbC5hdWRpb0NvZGVjO1xuICAgIH0pO1xuICAgIHZhciB2aWRlb0NvZGVjcyA9IGRhdGEubGV2ZWxzLm1hcChmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICAgIHJldHVybiBsZXZlbC52aWRlb0NvZGVjO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fYXR0ZW1wdEtleVN5c3RlbUFjY2VzcyhLZXlTeXN0ZW1zLldJREVWSU5FLCBhdWRpb0NvZGVjcywgdmlkZW9Db2RlY3MpO1xuICB9O1xuXG4gIGVtZV9jb250cm9sbGVyX2NyZWF0ZUNsYXNzKEVNRUNvbnRyb2xsZXIsIFt7XG4gICAga2V5OiBcInJlcXVlc3RNZWRpYUtleVN5c3RlbUFjY2Vzc1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKCF0aGlzLl9yZXF1ZXN0TWVkaWFLZXlTeXN0ZW1BY2Nlc3MpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyByZXF1ZXN0TWVkaWFLZXlTeXN0ZW1BY2Nlc3MgZnVuY3Rpb24gY29uZmlndXJlZCcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdE1lZGlhS2V5U3lzdGVtQWNjZXNzO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBFTUVDb250cm9sbGVyO1xufShldmVudF9oYW5kbGVyKTtcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgZW1lX2NvbnRyb2xsZXIgPSAoZW1lX2NvbnRyb2xsZXJfRU1FQ29udHJvbGxlcik7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb25maWcudHNcbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG4vKipcbiAqIEhMUyBjb25maWdcbiAqL1xuXG5cblxuXG4gLy8gaW1wb3J0IEZldGNoTG9hZGVyIGZyb20gJy4vdXRpbHMvZmV0Y2gtbG9hZGVyJztcblxuXG5cblxuXG5cblxuXG5cbi8vIElmIHBvc3NpYmxlLCBrZWVwIGhsc0RlZmF1bHRDb25maWcgc2hhbGxvd1xuLy8gSXQgaXMgY2xvbmVkIHdoZW5ldmVyIGEgbmV3IEhscyBpbnN0YW5jZSBpcyBjcmVhdGVkLCBieSBrZWVwaW5nIHRoZSBjb25maWdcbi8vIHNoYWxsb3cgdGhlIHByb3BlcnRpZXMgYXJlIGNsb25lZCwgYW5kIHdlIGRvbid0IGVuZCB1cCBtYW5pcHVsYXRpbmcgdGhlIGRlZmF1bHRcbnZhciBobHNEZWZhdWx0Q29uZmlnID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHtcbiAgYXV0b1N0YXJ0TG9hZDogdHJ1ZSxcbiAgLy8gdXNlZCBieSBzdHJlYW0tY29udHJvbGxlclxuICBzdGFydFBvc2l0aW9uOiAtMSxcbiAgLy8gdXNlZCBieSBzdHJlYW0tY29udHJvbGxlclxuICBkZWZhdWx0QXVkaW9Db2RlYzogdm9pZCAwLFxuICAvLyB1c2VkIGJ5IHN0cmVhbS1jb250cm9sbGVyXG4gIGRlYnVnOiBmYWxzZSxcbiAgLy8gdXNlZCBieSBsb2dnZXJcbiAgY2FwTGV2ZWxPbkZQU0Ryb3A6IGZhbHNlLFxuICAvLyB1c2VkIGJ5IGZwcy1jb250cm9sbGVyXG4gIGNhcExldmVsVG9QbGF5ZXJTaXplOiBmYWxzZSxcbiAgLy8gdXNlZCBieSBjYXAtbGV2ZWwtY29udHJvbGxlclxuICBpbml0aWFsTGl2ZU1hbmlmZXN0U2l6ZTogMSxcbiAgLy8gdXNlZCBieSBzdHJlYW0tY29udHJvbGxlclxuICBtYXhCdWZmZXJMZW5ndGg6IDMwLFxuICAvLyB1c2VkIGJ5IHN0cmVhbS1jb250cm9sbGVyXG4gIG1heEJ1ZmZlclNpemU6IDYwICogMTAwMCAqIDEwMDAsXG4gIC8vIHVzZWQgYnkgc3RyZWFtLWNvbnRyb2xsZXJcbiAgbWF4QnVmZmVySG9sZTogMC41LFxuICAvLyB1c2VkIGJ5IHN0cmVhbS1jb250cm9sbGVyXG4gIGxvd0J1ZmZlcldhdGNoZG9nUGVyaW9kOiAwLjUsXG4gIC8vIHVzZWQgYnkgc3RyZWFtLWNvbnRyb2xsZXJcbiAgaGlnaEJ1ZmZlcldhdGNoZG9nUGVyaW9kOiAzLFxuICAvLyB1c2VkIGJ5IHN0cmVhbS1jb250cm9sbGVyXG4gIG51ZGdlT2Zmc2V0OiAwLjEsXG4gIC8vIHVzZWQgYnkgc3RyZWFtLWNvbnRyb2xsZXJcbiAgbnVkZ2VNYXhSZXRyeTogMyxcbiAgLy8gdXNlZCBieSBzdHJlYW0tY29udHJvbGxlclxuICBtYXhGcmFnTG9va1VwVG9sZXJhbmNlOiAwLjI1LFxuICAvLyB1c2VkIGJ5IHN0cmVhbS1jb250cm9sbGVyXG4gIGxpdmVTeW5jRHVyYXRpb25Db3VudDogMyxcbiAgLy8gdXNlZCBieSBzdHJlYW0tY29udHJvbGxlclxuICBsaXZlTWF4TGF0ZW5jeUR1cmF0aW9uQ291bnQ6IEluZmluaXR5LFxuICAvLyB1c2VkIGJ5IHN0cmVhbS1jb250cm9sbGVyXG4gIGxpdmVTeW5jRHVyYXRpb246IHZvaWQgMCxcbiAgLy8gdXNlZCBieSBzdHJlYW0tY29udHJvbGxlclxuICBsaXZlTWF4TGF0ZW5jeUR1cmF0aW9uOiB2b2lkIDAsXG4gIC8vIHVzZWQgYnkgc3RyZWFtLWNvbnRyb2xsZXJcbiAgbGl2ZUR1cmF0aW9uSW5maW5pdHk6IGZhbHNlLFxuICAvLyB1c2VkIGJ5IGJ1ZmZlci1jb250cm9sbGVyXG4gIGxpdmVCYWNrQnVmZmVyTGVuZ3RoOiBJbmZpbml0eSxcbiAgLy8gdXNlZCBieSBidWZmZXItY29udHJvbGxlclxuICBtYXhNYXhCdWZmZXJMZW5ndGg6IDYwMCxcbiAgLy8gdXNlZCBieSBzdHJlYW0tY29udHJvbGxlclxuICBlbmFibGVXb3JrZXI6IHRydWUsXG4gIC8vIHVzZWQgYnkgZGVtdXhlclxuICBlbmFibGVTb2Z0d2FyZUFFUzogdHJ1ZSxcbiAgLy8gdXNlZCBieSBkZWNyeXB0ZXJcbiAgbWFuaWZlc3RMb2FkaW5nVGltZU91dDogMTAwMDAsXG4gIC8vIHVzZWQgYnkgcGxheWxpc3QtbG9hZGVyXG4gIG1hbmlmZXN0TG9hZGluZ01heFJldHJ5OiAxLFxuICAvLyB1c2VkIGJ5IHBsYXlsaXN0LWxvYWRlclxuICBtYW5pZmVzdExvYWRpbmdSZXRyeURlbGF5OiAxMDAwLFxuICAvLyB1c2VkIGJ5IHBsYXlsaXN0LWxvYWRlclxuICBtYW5pZmVzdExvYWRpbmdNYXhSZXRyeVRpbWVvdXQ6IDY0MDAwLFxuICAvLyB1c2VkIGJ5IHBsYXlsaXN0LWxvYWRlclxuICBzdGFydExldmVsOiB2b2lkIDAsXG4gIC8vIHVzZWQgYnkgbGV2ZWwtY29udHJvbGxlclxuICBsZXZlbExvYWRpbmdUaW1lT3V0OiAxMDAwMCxcbiAgLy8gdXNlZCBieSBwbGF5bGlzdC1sb2FkZXJcbiAgbGV2ZWxMb2FkaW5nTWF4UmV0cnk6IDQsXG4gIC8vIHVzZWQgYnkgcGxheWxpc3QtbG9hZGVyXG4gIGxldmVsTG9hZGluZ1JldHJ5RGVsYXk6IDEwMDAsXG4gIC8vIHVzZWQgYnkgcGxheWxpc3QtbG9hZGVyXG4gIGxldmVsTG9hZGluZ01heFJldHJ5VGltZW91dDogNjQwMDAsXG4gIC8vIHVzZWQgYnkgcGxheWxpc3QtbG9hZGVyXG4gIGZyYWdMb2FkaW5nVGltZU91dDogMjAwMDAsXG4gIC8vIHVzZWQgYnkgZnJhZ21lbnQtbG9hZGVyXG4gIGZyYWdMb2FkaW5nTWF4UmV0cnk6IDYsXG4gIC8vIHVzZWQgYnkgZnJhZ21lbnQtbG9hZGVyXG4gIGZyYWdMb2FkaW5nUmV0cnlEZWxheTogMTAwMCxcbiAgLy8gdXNlZCBieSBmcmFnbWVudC1sb2FkZXJcbiAgZnJhZ0xvYWRpbmdNYXhSZXRyeVRpbWVvdXQ6IDY0MDAwLFxuICAvLyB1c2VkIGJ5IGZyYWdtZW50LWxvYWRlclxuICBzdGFydEZyYWdQcmVmZXRjaDogZmFsc2UsXG4gIC8vIHVzZWQgYnkgc3RyZWFtLWNvbnRyb2xsZXJcbiAgZnBzRHJvcHBlZE1vbml0b3JpbmdQZXJpb2Q6IDUwMDAsXG4gIC8vIHVzZWQgYnkgZnBzLWNvbnRyb2xsZXJcbiAgZnBzRHJvcHBlZE1vbml0b3JpbmdUaHJlc2hvbGQ6IDAuMixcbiAgLy8gdXNlZCBieSBmcHMtY29udHJvbGxlclxuICBhcHBlbmRFcnJvck1heFJldHJ5OiAzLFxuICAvLyB1c2VkIGJ5IGJ1ZmZlci1jb250cm9sbGVyXG4gIGxvYWRlcjogeGhyX2xvYWRlcixcbiAgLy8gbG9hZGVyOiBGZXRjaExvYWRlcixcbiAgZkxvYWRlcjogdm9pZCAwLFxuICAvLyB1c2VkIGJ5IGZyYWdtZW50LWxvYWRlclxuICBwTG9hZGVyOiB2b2lkIDAsXG4gIC8vIHVzZWQgYnkgcGxheWxpc3QtbG9hZGVyXG4gIHhoclNldHVwOiB2b2lkIDAsXG4gIC8vIHVzZWQgYnkgeGhyLWxvYWRlclxuICBsaWNlbnNlWGhyU2V0dXA6IHZvaWQgMCxcbiAgLy8gdXNlZCBieSBlbWUtY29udHJvbGxlclxuICAvLyBmZXRjaFNldHVwOiB2b2lkIDAsXG4gIGFickNvbnRyb2xsZXI6IGFicl9jb250cm9sbGVyLFxuICBidWZmZXJDb250cm9sbGVyOiBidWZmZXJfY29udHJvbGxlcixcbiAgY2FwTGV2ZWxDb250cm9sbGVyOiBjYXBfbGV2ZWxfY29udHJvbGxlcixcbiAgZnBzQ29udHJvbGxlcjogZnBzX2NvbnRyb2xsZXIsXG4gIHN0cmV0Y2hTaG9ydFZpZGVvVHJhY2s6IGZhbHNlLFxuICAvLyB1c2VkIGJ5IG1wNC1yZW11eGVyXG4gIG1heEF1ZGlvRnJhbWVzRHJpZnQ6IDEsXG4gIC8vIHVzZWQgYnkgbXA0LXJlbXV4ZXJcbiAgZm9yY2VLZXlGcmFtZU9uRGlzY29udGludWl0eTogdHJ1ZSxcbiAgLy8gdXNlZCBieSB0cy1kZW11eGVyXG4gIGFickV3bWFGYXN0TGl2ZTogMyxcbiAgLy8gdXNlZCBieSBhYnItY29udHJvbGxlclxuICBhYnJFd21hU2xvd0xpdmU6IDksXG4gIC8vIHVzZWQgYnkgYWJyLWNvbnRyb2xsZXJcbiAgYWJyRXdtYUZhc3RWb0Q6IDMsXG4gIC8vIHVzZWQgYnkgYWJyLWNvbnRyb2xsZXJcbiAgYWJyRXdtYVNsb3dWb0Q6IDksXG4gIC8vIHVzZWQgYnkgYWJyLWNvbnRyb2xsZXJcbiAgYWJyRXdtYURlZmF1bHRFc3RpbWF0ZTogNWU1LFxuICAvLyA1MDAga2JwcyAgLy8gdXNlZCBieSBhYnItY29udHJvbGxlclxuICBhYnJCYW5kV2lkdGhGYWN0b3I6IDAuOTUsXG4gIC8vIHVzZWQgYnkgYWJyLWNvbnRyb2xsZXJcbiAgYWJyQmFuZFdpZHRoVXBGYWN0b3I6IDAuNyxcbiAgLy8gdXNlZCBieSBhYnItY29udHJvbGxlclxuICBhYnJNYXhXaXRoUmVhbEJpdHJhdGU6IGZhbHNlLFxuICAvLyB1c2VkIGJ5IGFici1jb250cm9sbGVyXG4gIG1heFN0YXJ2YXRpb25EZWxheTogNCxcbiAgLy8gdXNlZCBieSBhYnItY29udHJvbGxlclxuICBtYXhMb2FkaW5nRGVsYXk6IDQsXG4gIC8vIHVzZWQgYnkgYWJyLWNvbnRyb2xsZXJcbiAgbWluQXV0b0JpdHJhdGU6IDAsXG4gIC8vIHVzZWQgYnkgaGxzXG4gIGVtZUVuYWJsZWQ6IGZhbHNlLFxuICAvLyB1c2VkIGJ5IGVtZS1jb250cm9sbGVyXG4gIHdpZGV2aW5lTGljZW5zZVVybDogdm9pZCAwLFxuICAvLyB1c2VkIGJ5IGVtZS1jb250cm9sbGVyXG4gIGRybVN5c3RlbU9wdGlvbnM6IHt9LFxuICAvLyB1c2VkIGJ5IGVtZS1jb250cm9sbGVyXG4gIHJlcXVlc3RNZWRpYUtleVN5c3RlbUFjY2Vzc0Z1bmM6IHJlcXVlc3RNZWRpYUtleVN5c3RlbUFjY2VzcyxcbiAgLy8gdXNlZCBieSBlbWUtY29udHJvbGxlclxuICB0ZXN0QmFuZHdpZHRoOiB0cnVlXG59LCB0aW1lbGluZUNvbmZpZygpKSwge30sIHtcbiAgc3VidGl0bGVTdHJlYW1Db250cm9sbGVyOiAgdHJ1ZSA/IHN1YnRpdGxlX3N0cmVhbV9jb250cm9sbGVyX1N1YnRpdGxlU3RyZWFtQ29udHJvbGxlciA6IHVuZGVmaW5lZCxcbiAgc3VidGl0bGVUcmFja0NvbnRyb2xsZXI6ICB0cnVlID8gc3VidGl0bGVfdHJhY2tfY29udHJvbGxlciA6IHVuZGVmaW5lZCxcbiAgdGltZWxpbmVDb250cm9sbGVyOiAgdHJ1ZSA/IHRpbWVsaW5lX2NvbnRyb2xsZXIgOiB1bmRlZmluZWQsXG4gIGF1ZGlvU3RyZWFtQ29udHJvbGxlcjogIHRydWUgPyBhdWRpb19zdHJlYW1fY29udHJvbGxlciA6IHVuZGVmaW5lZCxcbiAgYXVkaW9UcmFja0NvbnRyb2xsZXI6ICB0cnVlID8gYXVkaW9fdHJhY2tfY29udHJvbGxlciA6IHVuZGVmaW5lZCxcbiAgZW1lQ29udHJvbGxlcjogIHRydWUgPyBlbWVfY29udHJvbGxlciA6IHVuZGVmaW5lZFxufSk7XG5cbmZ1bmN0aW9uIHRpbWVsaW5lQ29uZmlnKCkge1xuICByZXR1cm4ge1xuICAgIGN1ZUhhbmRsZXI6IGN1ZXNfbmFtZXNwYWNlT2JqZWN0LFxuICAgIC8vIHVzZWQgYnkgdGltZWxpbmUtY29udHJvbGxlclxuICAgIGVuYWJsZUNFQTcwOENhcHRpb25zOiB0cnVlLFxuICAgIC8vIHVzZWQgYnkgdGltZWxpbmUtY29udHJvbGxlclxuICAgIGVuYWJsZVdlYlZUVDogdHJ1ZSxcbiAgICAvLyB1c2VkIGJ5IHRpbWVsaW5lLWNvbnRyb2xsZXJcbiAgICBjYXB0aW9uc1RleHRUcmFjazFMYWJlbDogJ0VuZ2xpc2gnLFxuICAgIC8vIHVzZWQgYnkgdGltZWxpbmUtY29udHJvbGxlclxuICAgIGNhcHRpb25zVGV4dFRyYWNrMUxhbmd1YWdlQ29kZTogJ2VuJyxcbiAgICAvLyB1c2VkIGJ5IHRpbWVsaW5lLWNvbnRyb2xsZXJcbiAgICBjYXB0aW9uc1RleHRUcmFjazJMYWJlbDogJ1NwYW5pc2gnLFxuICAgIC8vIHVzZWQgYnkgdGltZWxpbmUtY29udHJvbGxlclxuICAgIGNhcHRpb25zVGV4dFRyYWNrMkxhbmd1YWdlQ29kZTogJ2VzJyxcbiAgICAvLyB1c2VkIGJ5IHRpbWVsaW5lLWNvbnRyb2xsZXJcbiAgICBjYXB0aW9uc1RleHRUcmFjazNMYWJlbDogJ1Vua25vd24gQ0MnLFxuICAgIC8vIHVzZWQgYnkgdGltZWxpbmUtY29udHJvbGxlclxuICAgIGNhcHRpb25zVGV4dFRyYWNrM0xhbmd1YWdlQ29kZTogJycsXG4gICAgLy8gdXNlZCBieSB0aW1lbGluZS1jb250cm9sbGVyXG4gICAgY2FwdGlvbnNUZXh0VHJhY2s0TGFiZWw6ICdVbmtub3duIENDJyxcbiAgICAvLyB1c2VkIGJ5IHRpbWVsaW5lLWNvbnRyb2xsZXJcbiAgICBjYXB0aW9uc1RleHRUcmFjazRMYW5ndWFnZUNvZGU6ICcnLFxuICAgIC8vIHVzZWQgYnkgdGltZWxpbmUtY29udHJvbGxlclxuICAgIHJlbmRlclRleHRUcmFja3NOYXRpdmVseTogdHJ1ZVxuICB9O1xufVxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvaGxzLnRzXG5mdW5jdGlvbiBobHNfb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gaGxzX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBobHNfb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IGhsc19kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBobHNfb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gaGxzX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gaGxzX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIGhsc19kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gaGxzX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgaGxzX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBobHNfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gaGxzX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4vKipcbiAqIEBtb2R1bGUgSGxzXG4gKiBAY2xhc3NcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5cbnZhciBobHNfSGxzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfT2JzZXJ2ZXIpIHtcbiAgaGxzX2luaGVyaXRzTG9vc2UoSGxzLCBfT2JzZXJ2ZXIpO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIEhscy5pc1N1cHBvcnRlZCA9IGZ1bmN0aW9uIGlzU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiBpc19zdXBwb3J0ZWRfaXNTdXBwb3J0ZWQoKTtcbiAgfVxuICAvKipcbiAgICogQHR5cGUge0hsc0V2ZW50c31cbiAgICovXG4gIDtcblxuICBobHNfY3JlYXRlQ2xhc3MoSGxzLCBudWxsLCBbe1xuICAgIGtleTogXCJ2ZXJzaW9uXCIsXG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIFwiMC4xNC4xN1wiO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJFdmVudHNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBldmVudHNbXCJkZWZhdWx0XCJdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7SGxzRXJyb3JUeXBlc31cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIkVycm9yVHlwZXNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBlcnJvcnNbXCJFcnJvclR5cGVzXCJdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7SGxzRXJyb3JEZXRhaWxzfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiRXJyb3JEZXRhaWxzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gZXJyb3JzW1wiRXJyb3JEZXRhaWxzXCJdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7SGxzQ29uZmlnfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiRGVmYXVsdENvbmZpZ1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKCFIbHMuZGVmYXVsdENvbmZpZykge1xuICAgICAgICByZXR1cm4gaGxzRGVmYXVsdENvbmZpZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIEhscy5kZWZhdWx0Q29uZmlnO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7SGxzQ29uZmlnfVxuICAgICAqL1xuICAgICxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChkZWZhdWx0Q29uZmlnKSB7XG4gICAgICBIbHMuZGVmYXVsdENvbmZpZyA9IGRlZmF1bHRDb25maWc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgYW4gSExTIGNsaWVudCB0aGF0IGNhbiBhdHRhY2ggdG8gZXhhY3RseSBvbmUgYEhUTUxNZWRpYUVsZW1lbnRgLlxuICAgICAqXG4gICAgICogQGNvbnN0cnVjdHMgSGxzXG4gICAgICogQHBhcmFtIHtIbHNDb25maWd9IGNvbmZpZ1xuICAgICAqL1xuXG4gIH1dKTtcblxuICBmdW5jdGlvbiBIbHModXNlckNvbmZpZykge1xuICAgIHZhciBfdGhpcztcblxuICAgIGlmICh1c2VyQ29uZmlnID09PSB2b2lkIDApIHtcbiAgICAgIHVzZXJDb25maWcgPSB7fTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9PYnNlcnZlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgX3RoaXMuY29uZmlnID0gdm9pZCAwO1xuICAgIF90aGlzLl9hdXRvTGV2ZWxDYXBwaW5nID0gdm9pZCAwO1xuICAgIF90aGlzLmFickNvbnRyb2xsZXIgPSB2b2lkIDA7XG4gICAgX3RoaXMuY2FwTGV2ZWxDb250cm9sbGVyID0gdm9pZCAwO1xuICAgIF90aGlzLmxldmVsQ29udHJvbGxlciA9IHZvaWQgMDtcbiAgICBfdGhpcy5zdHJlYW1Db250cm9sbGVyID0gdm9pZCAwO1xuICAgIF90aGlzLm5ldHdvcmtDb250cm9sbGVycyA9IHZvaWQgMDtcbiAgICBfdGhpcy5hdWRpb1RyYWNrQ29udHJvbGxlciA9IHZvaWQgMDtcbiAgICBfdGhpcy5zdWJ0aXRsZVRyYWNrQ29udHJvbGxlciA9IHZvaWQgMDtcbiAgICBfdGhpcy5lbWVDb250cm9sbGVyID0gdm9pZCAwO1xuICAgIF90aGlzLmNvcmVDb21wb25lbnRzID0gdm9pZCAwO1xuICAgIF90aGlzLm1lZGlhID0gbnVsbDtcbiAgICBfdGhpcy51cmwgPSBudWxsO1xuICAgIHZhciBkZWZhdWx0Q29uZmlnID0gSGxzLkRlZmF1bHRDb25maWc7XG5cbiAgICBpZiAoKHVzZXJDb25maWcubGl2ZVN5bmNEdXJhdGlvbkNvdW50IHx8IHVzZXJDb25maWcubGl2ZU1heExhdGVuY3lEdXJhdGlvbkNvdW50KSAmJiAodXNlckNvbmZpZy5saXZlU3luY0R1cmF0aW9uIHx8IHVzZXJDb25maWcubGl2ZU1heExhdGVuY3lEdXJhdGlvbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSWxsZWdhbCBobHMuanMgY29uZmlnOiBkb25cXCd0IG1peCB1cCBsaXZlU3luY0R1cmF0aW9uQ291bnQvbGl2ZU1heExhdGVuY3lEdXJhdGlvbkNvdW50IGFuZCBsaXZlU3luY0R1cmF0aW9uL2xpdmVNYXhMYXRlbmN5RHVyYXRpb24nKTtcbiAgICB9IC8vIFNoYWxsb3cgY2xvbmVcblxuXG4gICAgX3RoaXMuY29uZmlnID0gaGxzX29iamVjdFNwcmVhZChobHNfb2JqZWN0U3ByZWFkKHt9LCBkZWZhdWx0Q29uZmlnKSwgdXNlckNvbmZpZyk7XG5cbiAgICB2YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplID0gaGxzX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksXG4gICAgICAgIGNvbmZpZyA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZS5jb25maWc7XG5cbiAgICBpZiAoY29uZmlnLmxpdmVNYXhMYXRlbmN5RHVyYXRpb25Db3VudCAhPT0gdm9pZCAwICYmIGNvbmZpZy5saXZlTWF4TGF0ZW5jeUR1cmF0aW9uQ291bnQgPD0gY29uZmlnLmxpdmVTeW5jRHVyYXRpb25Db3VudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbGxlZ2FsIGhscy5qcyBjb25maWc6IFwibGl2ZU1heExhdGVuY3lEdXJhdGlvbkNvdW50XCIgbXVzdCBiZSBndCBcImxpdmVTeW5jRHVyYXRpb25Db3VudFwiJyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5saXZlTWF4TGF0ZW5jeUR1cmF0aW9uICE9PSB2b2lkIDAgJiYgKGNvbmZpZy5saXZlU3luY0R1cmF0aW9uID09PSB2b2lkIDAgfHwgY29uZmlnLmxpdmVNYXhMYXRlbmN5RHVyYXRpb24gPD0gY29uZmlnLmxpdmVTeW5jRHVyYXRpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lsbGVnYWwgaGxzLmpzIGNvbmZpZzogXCJsaXZlTWF4TGF0ZW5jeUR1cmF0aW9uXCIgbXVzdCBiZSBndCBcImxpdmVTeW5jRHVyYXRpb25cIicpO1xuICAgIH1cblxuICAgIE9iamVjdChsb2dnZXJbXCJlbmFibGVMb2dzXCJdKShjb25maWcuZGVidWcpO1xuICAgIF90aGlzLl9hdXRvTGV2ZWxDYXBwaW5nID0gLTE7IC8vIGNvcmUgY29udHJvbGxlcnMgYW5kIG5ldHdvcmsgbG9hZGVyc1xuXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7QWJyQ29udHJvbGxlcn0gYWJyQ29udHJvbGxlclxuICAgICAqL1xuXG4gICAgdmFyIGFickNvbnRyb2xsZXIgPSBfdGhpcy5hYnJDb250cm9sbGVyID0gbmV3IGNvbmZpZy5hYnJDb250cm9sbGVyKGhsc19hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuZXctY2FwXG5cbiAgICB2YXIgYnVmZmVyQ29udHJvbGxlciA9IG5ldyBjb25maWcuYnVmZmVyQ29udHJvbGxlcihobHNfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbmV3LWNhcFxuXG4gICAgdmFyIGNhcExldmVsQ29udHJvbGxlciA9IF90aGlzLmNhcExldmVsQ29udHJvbGxlciA9IG5ldyBjb25maWcuY2FwTGV2ZWxDb250cm9sbGVyKGhsc19hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuZXctY2FwXG5cbiAgICB2YXIgZnBzQ29udHJvbGxlciA9IG5ldyBjb25maWcuZnBzQ29udHJvbGxlcihobHNfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbmV3LWNhcFxuXG4gICAgdmFyIHBsYXlMaXN0TG9hZGVyID0gbmV3IHBsYXlsaXN0X2xvYWRlcihobHNfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgdmFyIGZyYWdtZW50TG9hZGVyID0gbmV3IGZyYWdtZW50X2xvYWRlcihobHNfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgdmFyIGtleUxvYWRlciA9IG5ldyBrZXlfbG9hZGVyKGhsc19hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICB2YXIgaWQzVHJhY2tDb250cm9sbGVyID0gbmV3IGlkM190cmFja19jb250cm9sbGVyKGhsc19hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTsgLy8gbmV0d29yayBjb250cm9sbGVyc1xuXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7TGV2ZWxDb250cm9sbGVyfSBsZXZlbENvbnRyb2xsZXJcbiAgICAgKi9cblxuICAgIHZhciBsZXZlbENvbnRyb2xsZXIgPSBfdGhpcy5sZXZlbENvbnRyb2xsZXIgPSBuZXcgbGV2ZWxfY29udHJvbGxlcl9MZXZlbENvbnRyb2xsZXIoaGxzX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpOyAvLyBGSVhNRTogRnJhZ21lbnRUcmFja2VyIG11c3QgYmUgZGVmaW5lZCBiZWZvcmUgU3RyZWFtQ29udHJvbGxlciBiZWNhdXNlIHRoZSBvcmRlciBvZiBldmVudCBoYW5kbGluZyBpcyBpbXBvcnRhbnRcblxuICAgIHZhciBmcmFnbWVudFRyYWNrZXIgPSBuZXcgZnJhZ21lbnRfdHJhY2tlcl9GcmFnbWVudFRyYWNrZXIoaGxzX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge1N0cmVhbUNvbnRyb2xsZXJ9IHN0cmVhbUNvbnRyb2xsZXJcbiAgICAgKi9cblxuICAgIHZhciBzdHJlYW1Db250cm9sbGVyID0gX3RoaXMuc3RyZWFtQ29udHJvbGxlciA9IG5ldyBzdHJlYW1fY29udHJvbGxlcihobHNfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgZnJhZ21lbnRUcmFja2VyKTtcbiAgICB2YXIgbmV0d29ya0NvbnRyb2xsZXJzID0gW2xldmVsQ29udHJvbGxlciwgc3RyZWFtQ29udHJvbGxlcl07IC8vIG9wdGlvbmFsIGF1ZGlvIHN0cmVhbSBjb250cm9sbGVyXG5cbiAgICAvKipcbiAgICAgKiBAdmFyIHtJQ29yZUNvbXBvbmVudCB8IENvbnRyb2xsZXJ9XG4gICAgICovXG5cbiAgICB2YXIgQ29udHJvbGxlciA9IGNvbmZpZy5hdWRpb1N0cmVhbUNvbnRyb2xsZXI7XG5cbiAgICBpZiAoQ29udHJvbGxlcikge1xuICAgICAgbmV0d29ya0NvbnRyb2xsZXJzLnB1c2gobmV3IENvbnRyb2xsZXIoaGxzX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIGZyYWdtZW50VHJhY2tlcikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtJTmV0d29ya0NvbnRyb2xsZXJbXX0gbmV0d29ya0NvbnRyb2xsZXJzXG4gICAgICovXG5cblxuICAgIF90aGlzLm5ldHdvcmtDb250cm9sbGVycyA9IG5ldHdvcmtDb250cm9sbGVycztcbiAgICAvKipcbiAgICAgKiBAdmFyIHtJQ29yZUNvbXBvbmVudFtdfVxuICAgICAqL1xuXG4gICAgdmFyIGNvcmVDb21wb25lbnRzID0gW3BsYXlMaXN0TG9hZGVyLCBmcmFnbWVudExvYWRlciwga2V5TG9hZGVyLCBhYnJDb250cm9sbGVyLCBidWZmZXJDb250cm9sbGVyLCBjYXBMZXZlbENvbnRyb2xsZXIsIGZwc0NvbnRyb2xsZXIsIGlkM1RyYWNrQ29udHJvbGxlciwgZnJhZ21lbnRUcmFja2VyXTsgLy8gb3B0aW9uYWwgYXVkaW8gdHJhY2sgYW5kIHN1YnRpdGxlIGNvbnRyb2xsZXJcblxuICAgIENvbnRyb2xsZXIgPSBjb25maWcuYXVkaW9UcmFja0NvbnRyb2xsZXI7XG5cbiAgICBpZiAoQ29udHJvbGxlcikge1xuICAgICAgdmFyIGF1ZGlvVHJhY2tDb250cm9sbGVyID0gbmV3IENvbnRyb2xsZXIoaGxzX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgICAgLyoqXG4gICAgICAgKiBAbWVtYmVyIHtBdWRpb1RyYWNrQ29udHJvbGxlcn0gYXVkaW9UcmFja0NvbnRyb2xsZXJcbiAgICAgICAqL1xuXG4gICAgICBfdGhpcy5hdWRpb1RyYWNrQ29udHJvbGxlciA9IGF1ZGlvVHJhY2tDb250cm9sbGVyO1xuICAgICAgY29yZUNvbXBvbmVudHMucHVzaChhdWRpb1RyYWNrQ29udHJvbGxlcik7XG4gICAgfVxuXG4gICAgQ29udHJvbGxlciA9IGNvbmZpZy5zdWJ0aXRsZVRyYWNrQ29udHJvbGxlcjtcblxuICAgIGlmIChDb250cm9sbGVyKSB7XG4gICAgICB2YXIgc3VidGl0bGVUcmFja0NvbnRyb2xsZXIgPSBuZXcgQ29udHJvbGxlcihobHNfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgICAvKipcbiAgICAgICAqIEBtZW1iZXIge1N1YnRpdGxlVHJhY2tDb250cm9sbGVyfSBzdWJ0aXRsZVRyYWNrQ29udHJvbGxlclxuICAgICAgICovXG5cbiAgICAgIF90aGlzLnN1YnRpdGxlVHJhY2tDb250cm9sbGVyID0gc3VidGl0bGVUcmFja0NvbnRyb2xsZXI7XG4gICAgICBuZXR3b3JrQ29udHJvbGxlcnMucHVzaChzdWJ0aXRsZVRyYWNrQ29udHJvbGxlcik7XG4gICAgfVxuXG4gICAgQ29udHJvbGxlciA9IGNvbmZpZy5lbWVDb250cm9sbGVyO1xuXG4gICAgaWYgKENvbnRyb2xsZXIpIHtcbiAgICAgIHZhciBlbWVDb250cm9sbGVyID0gbmV3IENvbnRyb2xsZXIoaGxzX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgICAgLyoqXG4gICAgICAgKiBAbWVtYmVyIHtFTUVDb250cm9sbGVyfSBlbWVDb250cm9sbGVyXG4gICAgICAgKi9cblxuICAgICAgX3RoaXMuZW1lQ29udHJvbGxlciA9IGVtZUNvbnRyb2xsZXI7XG4gICAgICBjb3JlQ29tcG9uZW50cy5wdXNoKGVtZUNvbnRyb2xsZXIpO1xuICAgIH0gLy8gb3B0aW9uYWwgc3VidGl0bGUgY29udHJvbGxlcnNcblxuXG4gICAgQ29udHJvbGxlciA9IGNvbmZpZy5zdWJ0aXRsZVN0cmVhbUNvbnRyb2xsZXI7XG5cbiAgICBpZiAoQ29udHJvbGxlcikge1xuICAgICAgbmV0d29ya0NvbnRyb2xsZXJzLnB1c2gobmV3IENvbnRyb2xsZXIoaGxzX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIGZyYWdtZW50VHJhY2tlcikpO1xuICAgIH1cblxuICAgIENvbnRyb2xsZXIgPSBjb25maWcudGltZWxpbmVDb250cm9sbGVyO1xuXG4gICAgaWYgKENvbnRyb2xsZXIpIHtcbiAgICAgIGNvcmVDb21wb25lbnRzLnB1c2gobmV3IENvbnRyb2xsZXIoaGxzX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7SUNvcmVDb21wb25lbnRbXX1cbiAgICAgKi9cblxuXG4gICAgX3RoaXMuY29yZUNvbXBvbmVudHMgPSBjb3JlQ29tcG9uZW50cztcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIERpc3Bvc2Ugb2YgdGhlIGluc3RhbmNlXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEhscy5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coJ2Rlc3Ryb3knKTtcbiAgICB0aGlzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5ERVNUUk9ZSU5HKTtcbiAgICB0aGlzLmRldGFjaE1lZGlhKCk7XG4gICAgdGhpcy5jb3JlQ29tcG9uZW50cy5jb25jYXQodGhpcy5uZXR3b3JrQ29udHJvbGxlcnMpLmZvckVhY2goZnVuY3Rpb24gKGNvbXBvbmVudCkge1xuICAgICAgY29tcG9uZW50LmRlc3Ryb3koKTtcbiAgICB9KTtcbiAgICB0aGlzLnVybCA9IG51bGw7XG4gICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLl9hdXRvTGV2ZWxDYXBwaW5nID0gLTE7XG4gIH1cbiAgLyoqXG4gICAqIEF0dGFjaCBhIG1lZGlhIGVsZW1lbnRcbiAgICogQHBhcmFtIHtIVE1MTWVkaWFFbGVtZW50fSBtZWRpYVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hdHRhY2hNZWRpYSA9IGZ1bmN0aW9uIGF0dGFjaE1lZGlhKG1lZGlhKSB7XG4gICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZygnYXR0YWNoTWVkaWEnKTtcbiAgICB0aGlzLm1lZGlhID0gbWVkaWE7XG4gICAgdGhpcy50cmlnZ2VyKGV2ZW50c1tcImRlZmF1bHRcIl0uTUVESUFfQVRUQUNISU5HLCB7XG4gICAgICBtZWRpYTogbWVkaWFcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogRGV0YWNoIGZyb20gdGhlIG1lZGlhXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRldGFjaE1lZGlhID0gZnVuY3Rpb24gZGV0YWNoTWVkaWEoKSB7XG4gICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZygnZGV0YWNoTWVkaWEnKTtcbiAgICB0aGlzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5NRURJQV9ERVRBQ0hJTkcpO1xuICAgIHRoaXMubWVkaWEgPSBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgdGhlIHNvdXJjZSBVUkwuIENhbiBiZSByZWxhdGl2ZSBvciBhYnNvbHV0ZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5sb2FkU291cmNlID0gZnVuY3Rpb24gbG9hZFNvdXJjZSh1cmwpIHtcbiAgICB1cmwgPSB1cmxfdG9vbGtpdFtcImJ1aWxkQWJzb2x1dGVVUkxcIl0od2luZG93LmxvY2F0aW9uLmhyZWYsIHVybCwge1xuICAgICAgYWx3YXlzTm9ybWFsaXplOiB0cnVlXG4gICAgfSk7XG4gICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyhcImxvYWRTb3VyY2U6XCIgKyB1cmwpO1xuICAgIHRoaXMudXJsID0gdXJsOyAvLyB3aGVuIGF0dGFjaGluZyB0byBhIHNvdXJjZSBVUkwsIHRyaWdnZXIgYSBwbGF5bGlzdCBsb2FkXG5cbiAgICB0aGlzLnRyaWdnZXIoZXZlbnRzW1wiZGVmYXVsdFwiXS5NQU5JRkVTVF9MT0FESU5HLCB7XG4gICAgICB1cmw6IHVybFxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBTdGFydCBsb2FkaW5nIGRhdGEgZnJvbSB0aGUgc3RyZWFtIHNvdXJjZS5cbiAgICogRGVwZW5kaW5nIG9uIGRlZmF1bHQgY29uZmlnLCBjbGllbnQgc3RhcnRzIGxvYWRpbmcgYXV0b21hdGljYWxseSB3aGVuIGEgc291cmNlIGlzIHNldC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0UG9zaXRpb24gU2V0IHRoZSBzdGFydCBwb3NpdGlvbiB0byBzdHJlYW0gZnJvbVxuICAgKiBAZGVmYXVsdCAtMSBOb25lIChmcm9tIGVhcmxpZXN0IHBvaW50KVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zdGFydExvYWQgPSBmdW5jdGlvbiBzdGFydExvYWQoc3RhcnRQb3NpdGlvbikge1xuICAgIGlmIChzdGFydFBvc2l0aW9uID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXJ0UG9zaXRpb24gPSAtMTtcbiAgICB9XG5cbiAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKFwic3RhcnRMb2FkKFwiICsgc3RhcnRQb3NpdGlvbiArIFwiKVwiKTtcbiAgICB0aGlzLm5ldHdvcmtDb250cm9sbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChjb250cm9sbGVyKSB7XG4gICAgICBjb250cm9sbGVyLnN0YXJ0TG9hZChzdGFydFBvc2l0aW9uKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogU3RvcCBsb2FkaW5nIG9mIGFueSBzdHJlYW0gZGF0YS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uc3RvcExvYWQgPSBmdW5jdGlvbiBzdG9wTG9hZCgpIHtcbiAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKCdzdG9wTG9hZCcpO1xuICAgIHRoaXMubmV0d29ya0NvbnRyb2xsZXJzLmZvckVhY2goZnVuY3Rpb24gKGNvbnRyb2xsZXIpIHtcbiAgICAgIGNvbnRyb2xsZXIuc3RvcExvYWQoKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogU3dhcCB0aHJvdWdoIHBvc3NpYmxlIGF1ZGlvIGNvZGVjcyBpbiB0aGUgc3RyZWFtIChmb3IgZXhhbXBsZSB0byBzd2l0Y2ggZnJvbSBzdGVyZW8gdG8gNS4xKVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zd2FwQXVkaW9Db2RlYyA9IGZ1bmN0aW9uIHN3YXBBdWRpb0NvZGVjKCkge1xuICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coJ3N3YXBBdWRpb0NvZGVjJyk7XG4gICAgdGhpcy5zdHJlYW1Db250cm9sbGVyLnN3YXBBdWRpb0NvZGVjKCk7XG4gIH1cbiAgLyoqXG4gICAqIFdoZW4gdGhlIG1lZGlhLWVsZW1lbnQgZmFpbHMsIHRoaXMgYWxsb3dzIHRvIGRldGFjaCBhbmQgdGhlbiByZS1hdHRhY2ggaXRcbiAgICogYXMgb25lIGNhbGwgKGNvbnZlbmllbmNlIG1ldGhvZCkuXG4gICAqXG4gICAqIEF1dG9tYXRpYyByZWNvdmVyeSBvZiBtZWRpYS1lcnJvcnMgYnkgdGhpcyBwcm9jZXNzIGlzIGNvbmZpZ3VyYWJsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVjb3Zlck1lZGlhRXJyb3IgPSBmdW5jdGlvbiByZWNvdmVyTWVkaWFFcnJvcigpIHtcbiAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKCdyZWNvdmVyTWVkaWFFcnJvcicpO1xuICAgIHZhciBtZWRpYSA9IHRoaXMubWVkaWE7XG4gICAgdGhpcy5kZXRhY2hNZWRpYSgpO1xuXG4gICAgaWYgKG1lZGlhKSB7XG4gICAgICB0aGlzLmF0dGFjaE1lZGlhKG1lZGlhKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBhIGxvYWRlZCBsZXZlbCBmcm9tIHRoZSBsaXN0IG9mIGxldmVscywgb3IgYSBsZXZlbCB1cmwgaW4gZnJvbSBhIGxpc3Qgb2YgcmVkdW5kYW50IGxldmVsIHVybHMuXG4gICAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gcmVtb3ZlIGEgcmVuZGl0aW9uIG9yIHBsYXlsaXN0IHVybCB0aGF0IGVycm9ycyBmcmVxdWVudGx5IGZyb20gdGhlIGxpc3Qgb2YgbGV2ZWxzIHRoYXQgYSB1c2VyXG4gICAqIG9yIGhscy5qcyBjYW4gY2hvb3NlIGZyb20uXG4gICAqXG4gICAqIEBwYXJhbSBsZXZlbEluZGV4IHtudW1iZXJ9IFRoZSBxdWFsaXR5IGxldmVsIGluZGV4IHRvIG9mIHRoZSBsZXZlbCB0byByZW1vdmVcbiAgICogQHBhcmFtIHVybElkIHtudW1iZXJ9IFRoZSBxdWFsaXR5IGxldmVsIHVybCBpbmRleCBpbiB0aGUgY2FzZSB0aGF0IGZhbGxiYWNrIGxldmVscyBhcmUgYXZhaWxhYmxlLiBEZWZhdWx0cyB0byAwLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmVMZXZlbCA9IGZ1bmN0aW9uIHJlbW92ZUxldmVsKGxldmVsSW5kZXgsIHVybElkKSB7XG4gICAgaWYgKHVybElkID09PSB2b2lkIDApIHtcbiAgICAgIHVybElkID0gMDtcbiAgICB9XG5cbiAgICB0aGlzLmxldmVsQ29udHJvbGxlci5yZW1vdmVMZXZlbChsZXZlbEluZGV4LCB1cmxJZCk7XG4gIH1cbiAgLyoqXG4gICAqIEB0eXBlIHtRdWFsaXR5TGV2ZWxbXX1cbiAgICovXG4gIC8vIHRvZG8odHlwZXNjcmlwdC1sZXZlbENvbnRyb2xsZXIpXG4gIDtcblxuICBobHNfY3JlYXRlQ2xhc3MoSGxzLCBbe1xuICAgIGtleTogXCJsZXZlbHNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmxldmVsQ29udHJvbGxlci5sZXZlbHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluZGV4IG9mIHF1YWxpdHkgbGV2ZWwgY3VycmVudGx5IHBsYXllZFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJjdXJyZW50TGV2ZWxcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbUNvbnRyb2xsZXIuY3VycmVudExldmVsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgcXVhbGl0eSBsZXZlbCBpbmRleCBpbW1lZGlhdGVseSAuXG4gICAgICogVGhpcyB3aWxsIGZsdXNoIHRoZSBjdXJyZW50IGJ1ZmZlciB0byByZXBsYWNlIHRoZSBxdWFsaXR5IGFzYXAuXG4gICAgICogVGhhdCBtZWFucyBwbGF5YmFjayB3aWxsIGludGVycnVwdCBhdCBsZWFzdCBzaG9ydGx5IHRvIHJlLWJ1ZmZlciBhbmQgcmUtc3luYyBldmVudHVhbGx5LlxuICAgICAqIEBwYXJhbSBuZXdMZXZlbCB7bnVtYmVyfSAtMSBmb3IgYXV0b21hdGljIGxldmVsIHNlbGVjdGlvblxuICAgICAqL1xuICAgICxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdMZXZlbCkge1xuICAgICAgbG9nZ2VyW1wibG9nZ2VyXCJdLmxvZyhcInNldCBjdXJyZW50TGV2ZWw6XCIgKyBuZXdMZXZlbCk7XG4gICAgICB0aGlzLmxvYWRMZXZlbCA9IG5ld0xldmVsO1xuICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyLmltbWVkaWF0ZUxldmVsU3dpdGNoKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluZGV4IG9mIG5leHQgcXVhbGl0eSBsZXZlbCBsb2FkZWQgYXMgc2NoZWR1bGVkIGJ5IHN0cmVhbSBjb250cm9sbGVyLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJuZXh0TGV2ZWxcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbUNvbnRyb2xsZXIubmV4dExldmVsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgcXVhbGl0eSBsZXZlbCBpbmRleCBmb3IgbmV4dCBsb2FkZWQgZGF0YS5cbiAgICAgKiBUaGlzIHdpbGwgc3dpdGNoIHRoZSB2aWRlbyBxdWFsaXR5IGFzYXAsIHdpdGhvdXQgaW50ZXJydXB0aW5nIHBsYXliYWNrLlxuICAgICAqIE1heSBhYm9ydCBjdXJyZW50IGxvYWRpbmcgb2YgZGF0YSwgYW5kIGZsdXNoIHBhcnRzIG9mIGJ1ZmZlciAob3V0c2lkZSBjdXJyZW50bHkgcGxheWVkIGZyYWdtZW50IHJlZ2lvbikuXG4gICAgICogQHR5cGUge251bWJlcn0gLTEgZm9yIGF1dG9tYXRpYyBsZXZlbCBzZWxlY3Rpb25cbiAgICAgKi9cbiAgICAsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQobmV3TGV2ZWwpIHtcbiAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJzZXQgbmV4dExldmVsOlwiICsgbmV3TGV2ZWwpO1xuICAgICAgdGhpcy5sZXZlbENvbnRyb2xsZXIubWFudWFsTGV2ZWwgPSBuZXdMZXZlbDtcbiAgICAgIHRoaXMuc3RyZWFtQ29udHJvbGxlci5uZXh0TGV2ZWxTd2l0Y2goKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBxdWFsaXR5IGxldmVsIG9mIHRoZSBjdXJyZW50bHkgb3IgbGFzdCAob2Ygbm9uZSBpcyBsb2FkZWQgY3VycmVudGx5KSBzZWdtZW50XG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImxvYWRMZXZlbFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMubGV2ZWxDb250cm9sbGVyLmxldmVsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgcXVhbGl0eSBsZXZlbCBpbmRleCBmb3IgbmV4dCBsb2FkZWQgZGF0YSBpbiBhIGNvbnNlcnZhdGl2ZSB3YXkuXG4gICAgICogVGhpcyB3aWxsIHN3aXRjaCB0aGUgcXVhbGl0eSB3aXRob3V0IGZsdXNoaW5nLCBidXQgaW50ZXJydXB0IGN1cnJlbnQgbG9hZGluZy5cbiAgICAgKiBUaHVzIHRoZSBtb21lbnQgd2hlbiB0aGUgcXVhbGl0eSBzd2l0Y2ggd2lsbCBhcHBlYXIgaW4gZWZmZWN0IHdpbGwgb25seSBiZSBhZnRlciB0aGUgYWxyZWFkeSBleGlzdGluZyBidWZmZXIuXG4gICAgICogQHR5cGUge251bWJlcn0gbmV3TGV2ZWwgLTEgZm9yIGF1dG9tYXRpYyBsZXZlbCBzZWxlY3Rpb25cbiAgICAgKi9cbiAgICAsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQobmV3TGV2ZWwpIHtcbiAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJzZXQgbG9hZExldmVsOlwiICsgbmV3TGV2ZWwpO1xuICAgICAgdGhpcy5sZXZlbENvbnRyb2xsZXIubWFudWFsTGV2ZWwgPSBuZXdMZXZlbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogZ2V0IG5leHQgcXVhbGl0eSBsZXZlbCBsb2FkZWRcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibmV4dExvYWRMZXZlbFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMubGV2ZWxDb250cm9sbGVyLm5leHRMb2FkTGV2ZWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCBxdWFsaXR5IGxldmVsIG9mIG5leHQgbG9hZGVkIHNlZ21lbnQgaW4gYSBmdWxseSBcIm5vbi1kZXN0cnVjdGl2ZVwiIHdheS5cbiAgICAgKiBTYW1lIGFzIGBsb2FkTGV2ZWxgIGJ1dCB3aWxsIHdhaXQgZm9yIG5leHQgc3dpdGNoICh1bnRpbCBjdXJyZW50IGxvYWRpbmcgaXMgZG9uZSkuXG4gICAgICogQHR5cGUge251bWJlcn0gbGV2ZWxcbiAgICAgKi9cbiAgICAsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQobGV2ZWwpIHtcbiAgICAgIHRoaXMubGV2ZWxDb250cm9sbGVyLm5leHRMb2FkTGV2ZWwgPSBsZXZlbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIFwiZmlyc3QgbGV2ZWxcIjogbGlrZSBhIGRlZmF1bHQgbGV2ZWwsIGlmIG5vdCBzZXQsXG4gICAgICogZmFsbHMgYmFjayB0byBpbmRleCBvZiBmaXJzdCBsZXZlbCByZWZlcmVuY2VkIGluIG1hbmlmZXN0XG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImZpcnN0TGV2ZWxcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBNYXRoLm1heCh0aGlzLmxldmVsQ29udHJvbGxlci5maXJzdExldmVsLCB0aGlzLm1pbkF1dG9MZXZlbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgXCJmaXJzdC1sZXZlbFwiLCBzZWUgZ2V0dGVyLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgLFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld0xldmVsKSB7XG4gICAgICBsb2dnZXJbXCJsb2dnZXJcIl0ubG9nKFwic2V0IGZpcnN0TGV2ZWw6XCIgKyBuZXdMZXZlbCk7XG4gICAgICB0aGlzLmxldmVsQ29udHJvbGxlci5maXJzdExldmVsID0gbmV3TGV2ZWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybiBzdGFydCBsZXZlbCAobGV2ZWwgb2YgZmlyc3QgZnJhZ21lbnQgdGhhdCB3aWxsIGJlIHBsYXllZCBiYWNrKVxuICAgICAqIGlmIG5vdCBvdmVycmlkZWQgYnkgdXNlciwgZmlyc3QgbGV2ZWwgYXBwZWFyaW5nIGluIG1hbmlmZXN0IHdpbGwgYmUgdXNlZCBhcyBzdGFydCBsZXZlbFxuICAgICAqIGlmIC0xIDogYXV0b21hdGljIHN0YXJ0IGxldmVsIHNlbGVjdGlvbiwgcGxheWJhY2sgd2lsbCBzdGFydCBmcm9tIGxldmVsIG1hdGNoaW5nIGRvd25sb2FkIGJhbmR3aWR0aFxuICAgICAqIChkZXRlcm1pbmVkIGZyb20gZG93bmxvYWQgb2YgZmlyc3Qgc2VnbWVudClcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic3RhcnRMZXZlbFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMubGV2ZWxDb250cm9sbGVyLnN0YXJ0TGV2ZWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHNldCAgc3RhcnQgbGV2ZWwgKGxldmVsIG9mIGZpcnN0IGZyYWdtZW50IHRoYXQgd2lsbCBiZSBwbGF5ZWQgYmFjaylcbiAgICAgKiBpZiBub3Qgb3ZlcnJpZGVkIGJ5IHVzZXIsIGZpcnN0IGxldmVsIGFwcGVhcmluZyBpbiBtYW5pZmVzdCB3aWxsIGJlIHVzZWQgYXMgc3RhcnQgbGV2ZWxcbiAgICAgKiBpZiAtMSA6IGF1dG9tYXRpYyBzdGFydCBsZXZlbCBzZWxlY3Rpb24sIHBsYXliYWNrIHdpbGwgc3RhcnQgZnJvbSBsZXZlbCBtYXRjaGluZyBkb3dubG9hZCBiYW5kd2lkdGhcbiAgICAgKiAoZGV0ZXJtaW5lZCBmcm9tIGRvd25sb2FkIG9mIGZpcnN0IHNlZ21lbnQpXG4gICAgICogQHR5cGUge251bWJlcn0gbmV3TGV2ZWxcbiAgICAgKi9cbiAgICAsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQobmV3TGV2ZWwpIHtcbiAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJzZXQgc3RhcnRMZXZlbDpcIiArIG5ld0xldmVsKTsgLy8gaWYgbm90IGluIGF1dG9tYXRpYyBzdGFydCBsZXZlbCBkZXRlY3Rpb24sIGVuc3VyZSBzdGFydExldmVsIGlzIGdyZWF0ZXIgdGhhbiBtaW5BdXRvTGV2ZWxcblxuICAgICAgaWYgKG5ld0xldmVsICE9PSAtMSkge1xuICAgICAgICBuZXdMZXZlbCA9IE1hdGgubWF4KG5ld0xldmVsLCB0aGlzLm1pbkF1dG9MZXZlbCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubGV2ZWxDb250cm9sbGVyLnN0YXJ0TGV2ZWwgPSBuZXdMZXZlbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogc2V0ICBkeW5hbWljYWxseSBzZXQgY2FwTGV2ZWxUb1BsYXllclNpemUgYWdhaW5zdCAoYENhcExldmVsQ29udHJvbGxlcmApXG4gICAgICpcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImNhcExldmVsVG9QbGF5ZXJTaXplXCIsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQoc2hvdWxkU3RhcnRDYXBwaW5nKSB7XG4gICAgICB2YXIgbmV3Q2FwTGV2ZWxUb1BsYXllclNpemUgPSAhIXNob3VsZFN0YXJ0Q2FwcGluZztcblxuICAgICAgaWYgKG5ld0NhcExldmVsVG9QbGF5ZXJTaXplICE9PSB0aGlzLmNvbmZpZy5jYXBMZXZlbFRvUGxheWVyU2l6ZSkge1xuICAgICAgICBpZiAobmV3Q2FwTGV2ZWxUb1BsYXllclNpemUpIHtcbiAgICAgICAgICB0aGlzLmNhcExldmVsQ29udHJvbGxlci5zdGFydENhcHBpbmcoKTsgLy8gSWYgY2FwcGluZyBvY2N1cnMsIG5leHRMZXZlbFN3aXRjaCB3aWxsIGhhcHBlbiBiYXNlZCBvbiBzaXplLlxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY2FwTGV2ZWxDb250cm9sbGVyLnN0b3BDYXBwaW5nKCk7XG4gICAgICAgICAgdGhpcy5hdXRvTGV2ZWxDYXBwaW5nID0gLTE7XG4gICAgICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyLm5leHRMZXZlbFN3aXRjaCgpOyAvLyBOb3cgd2UncmUgdW5jYXBwZWQsIGdldCB0aGUgbmV4dCBsZXZlbCBhc2FwLlxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb25maWcuY2FwTGV2ZWxUb1BsYXllclNpemUgPSBuZXdDYXBMZXZlbFRvUGxheWVyU2l6ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FwcGluZy9tYXggbGV2ZWwgdmFsdWUgdGhhdCBzaG91bGQgYmUgdXNlZCBieSBhdXRvbWF0aWMgbGV2ZWwgc2VsZWN0aW9uIGFsZ29yaXRobSAoYEFCUkNvbnRyb2xsZXJgKVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJhdXRvTGV2ZWxDYXBwaW5nXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fYXV0b0xldmVsQ2FwcGluZztcbiAgICB9XG4gICAgLyoqXG4gICAgICogZ2V0IGJhbmR3aWR0aCBlc3RpbWF0ZVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgLFxuXG4gICAgLyoqXG4gICAgICogQ2FwcGluZy9tYXggbGV2ZWwgdmFsdWUgdGhhdCBzaG91bGQgYmUgdXNlZCBieSBhdXRvbWF0aWMgbGV2ZWwgc2VsZWN0aW9uIGFsZ29yaXRobSAoYEFCUkNvbnRyb2xsZXJgKVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQobmV3TGV2ZWwpIHtcbiAgICAgIGxvZ2dlcltcImxvZ2dlclwiXS5sb2coXCJzZXQgYXV0b0xldmVsQ2FwcGluZzpcIiArIG5ld0xldmVsKTtcbiAgICAgIHRoaXMuX2F1dG9MZXZlbENhcHBpbmcgPSBuZXdMZXZlbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJ1ZSB3aGVuIGF1dG9tYXRpYyBsZXZlbCBzZWxlY3Rpb24gZW5hYmxlZFxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiYmFuZHdpZHRoRXN0aW1hdGVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBid0VzdGltYXRvciA9IHRoaXMuYWJyQ29udHJvbGxlci5fYndFc3RpbWF0b3I7XG4gICAgICByZXR1cm4gYndFc3RpbWF0b3IgPyBid0VzdGltYXRvci5nZXRFc3RpbWF0ZSgpIDogTmFOO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhdXRvTGV2ZWxFbmFibGVkXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5sZXZlbENvbnRyb2xsZXIubWFudWFsTGV2ZWwgPT09IC0xO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMZXZlbCBzZXQgbWFudWFsbHkgKGlmIGFueSlcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibWFudWFsTGV2ZWxcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmxldmVsQ29udHJvbGxlci5tYW51YWxMZXZlbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogbWluIGxldmVsIHNlbGVjdGFibGUgaW4gYXV0byBtb2RlIGFjY29yZGluZyB0byBjb25maWcubWluQXV0b0JpdHJhdGVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibWluQXV0b0xldmVsXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgbGV2ZWxzID0gdGhpcy5sZXZlbHMsXG4gICAgICAgICAgbWluQXV0b0JpdHJhdGUgPSB0aGlzLmNvbmZpZy5taW5BdXRvQml0cmF0ZTtcbiAgICAgIHZhciBsZW4gPSBsZXZlbHMgPyBsZXZlbHMubGVuZ3RoIDogMDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB2YXIgbGV2ZWxOZXh0Qml0cmF0ZSA9IGxldmVsc1tpXS5yZWFsQml0cmF0ZSA/IE1hdGgubWF4KGxldmVsc1tpXS5yZWFsQml0cmF0ZSwgbGV2ZWxzW2ldLmJpdHJhdGUpIDogbGV2ZWxzW2ldLmJpdHJhdGU7XG5cbiAgICAgICAgaWYgKGxldmVsTmV4dEJpdHJhdGUgPiBtaW5BdXRvQml0cmF0ZSkge1xuICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBtYXggbGV2ZWwgc2VsZWN0YWJsZSBpbiBhdXRvIG1vZGUgYWNjb3JkaW5nIHRvIGF1dG9MZXZlbENhcHBpbmdcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibWF4QXV0b0xldmVsXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgbGV2ZWxzID0gdGhpcy5sZXZlbHMsXG4gICAgICAgICAgYXV0b0xldmVsQ2FwcGluZyA9IHRoaXMuYXV0b0xldmVsQ2FwcGluZztcbiAgICAgIHZhciBtYXhBdXRvTGV2ZWw7XG5cbiAgICAgIGlmIChhdXRvTGV2ZWxDYXBwaW5nID09PSAtMSAmJiBsZXZlbHMgJiYgbGV2ZWxzLmxlbmd0aCkge1xuICAgICAgICBtYXhBdXRvTGV2ZWwgPSBsZXZlbHMubGVuZ3RoIC0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1heEF1dG9MZXZlbCA9IGF1dG9MZXZlbENhcHBpbmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXhBdXRvTGV2ZWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIG5leHQgYXV0b21hdGljYWxseSBzZWxlY3RlZCBxdWFsaXR5IGxldmVsXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm5leHRBdXRvTGV2ZWxcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIC8vIGVuc3VyZSBuZXh0IGF1dG8gbGV2ZWwgaXMgYmV0d2VlbiAgbWluIGFuZCBtYXggYXV0byBsZXZlbFxuICAgICAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KHRoaXMuYWJyQ29udHJvbGxlci5uZXh0QXV0b0xldmVsLCB0aGlzLm1pbkF1dG9MZXZlbCksIHRoaXMubWF4QXV0b0xldmVsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogdGhpcyBzZXR0ZXIgaXMgdXNlZCB0byBmb3JjZSBuZXh0IGF1dG8gbGV2ZWwuXG4gICAgICogdGhpcyBpcyB1c2VmdWwgdG8gZm9yY2UgYSBzd2l0Y2ggZG93biBpbiBhdXRvIG1vZGU6XG4gICAgICogaW4gY2FzZSBvZiBsb2FkIGVycm9yIG9uIGxldmVsIE4sIGhscy5qcyBjYW4gc2V0IG5leHRBdXRvTGV2ZWwgdG8gTi0xIGZvciBleGFtcGxlKVxuICAgICAqIGZvcmNlZCB2YWx1ZSBpcyB2YWxpZCBmb3Igb25lIGZyYWdtZW50LiB1cG9uIHN1Y2Nlc2Z1bCBmcmFnIGxvYWRpbmcgYXQgZm9yY2VkIGxldmVsLFxuICAgICAqIHRoaXMgdmFsdWUgd2lsbCBiZSByZXNldHRlZCB0byAtMSBieSBBQlIgY29udHJvbGxlci5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgICxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXh0TGV2ZWwpIHtcbiAgICAgIHRoaXMuYWJyQ29udHJvbGxlci5uZXh0QXV0b0xldmVsID0gTWF0aC5tYXgodGhpcy5taW5BdXRvTGV2ZWwsIG5leHRMZXZlbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBdWRpb1RyYWNrW119XG4gICAgICovXG4gICAgLy8gdG9kbyh0eXBlc2NyaXB0LWF1ZGlvVHJhY2tDb250cm9sbGVyKVxuXG4gIH0sIHtcbiAgICBrZXk6IFwiYXVkaW9UcmFja3NcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBhdWRpb1RyYWNrQ29udHJvbGxlciA9IHRoaXMuYXVkaW9UcmFja0NvbnRyb2xsZXI7XG4gICAgICByZXR1cm4gYXVkaW9UcmFja0NvbnRyb2xsZXIgPyBhdWRpb1RyYWNrQ29udHJvbGxlci5hdWRpb1RyYWNrcyA6IFtdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBpbmRleCBvZiB0aGUgc2VsZWN0ZWQgYXVkaW8gdHJhY2sgKGluZGV4IGluIGF1ZGlvIHRyYWNrIGxpc3RzKVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJhdWRpb1RyYWNrXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgYXVkaW9UcmFja0NvbnRyb2xsZXIgPSB0aGlzLmF1ZGlvVHJhY2tDb250cm9sbGVyO1xuICAgICAgcmV0dXJuIGF1ZGlvVHJhY2tDb250cm9sbGVyID8gYXVkaW9UcmFja0NvbnRyb2xsZXIuYXVkaW9UcmFjayA6IC0xO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBzZWxlY3RzIGFuIGF1ZGlvIHRyYWNrLCBiYXNlZCBvbiBpdHMgaW5kZXggaW4gYXVkaW8gdHJhY2sgbGlzdHNcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgICxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChhdWRpb1RyYWNrSWQpIHtcbiAgICAgIHZhciBhdWRpb1RyYWNrQ29udHJvbGxlciA9IHRoaXMuYXVkaW9UcmFja0NvbnRyb2xsZXI7XG5cbiAgICAgIGlmIChhdWRpb1RyYWNrQ29udHJvbGxlcikge1xuICAgICAgICBhdWRpb1RyYWNrQ29udHJvbGxlci5hdWRpb1RyYWNrID0gYXVkaW9UcmFja0lkO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7U2Vjb25kc31cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImxpdmVTeW5jUG9zaXRpb25cIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbUNvbnRyb2xsZXIubGl2ZVN5bmNQb3NpdGlvbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogZ2V0IGFsdGVybmF0ZSBzdWJ0aXRsZSB0cmFja3MgbGlzdCBmcm9tIHBsYXlsaXN0XG4gICAgICogQHR5cGUge1N1YnRpdGxlVHJhY2tbXX1cbiAgICAgKi9cbiAgICAvLyB0b2RvKHR5cGVzY3JpcHQtc3VidGl0bGVUcmFja0NvbnRyb2xsZXIpXG5cbiAgfSwge1xuICAgIGtleTogXCJzdWJ0aXRsZVRyYWNrc1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIHN1YnRpdGxlVHJhY2tDb250cm9sbGVyID0gdGhpcy5zdWJ0aXRsZVRyYWNrQ29udHJvbGxlcjtcbiAgICAgIHJldHVybiBzdWJ0aXRsZVRyYWNrQ29udHJvbGxlciA/IHN1YnRpdGxlVHJhY2tDb250cm9sbGVyLnN1YnRpdGxlVHJhY2tzIDogW107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGluZGV4IG9mIHRoZSBzZWxlY3RlZCBzdWJ0aXRsZSB0cmFjayAoaW5kZXggaW4gc3VidGl0bGUgdHJhY2sgbGlzdHMpXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInN1YnRpdGxlVHJhY2tcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBzdWJ0aXRsZVRyYWNrQ29udHJvbGxlciA9IHRoaXMuc3VidGl0bGVUcmFja0NvbnRyb2xsZXI7XG4gICAgICByZXR1cm4gc3VidGl0bGVUcmFja0NvbnRyb2xsZXIgPyBzdWJ0aXRsZVRyYWNrQ29udHJvbGxlci5zdWJ0aXRsZVRyYWNrIDogLTE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHNlbGVjdCBhbiBzdWJ0aXRsZSB0cmFjaywgYmFzZWQgb24gaXRzIGluZGV4IGluIHN1YnRpdGxlIHRyYWNrIGxpc3RzXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICAsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQoc3VidGl0bGVUcmFja0lkKSB7XG4gICAgICB2YXIgc3VidGl0bGVUcmFja0NvbnRyb2xsZXIgPSB0aGlzLnN1YnRpdGxlVHJhY2tDb250cm9sbGVyO1xuXG4gICAgICBpZiAoc3VidGl0bGVUcmFja0NvbnRyb2xsZXIpIHtcbiAgICAgICAgc3VidGl0bGVUcmFja0NvbnRyb2xsZXIuc3VidGl0bGVUcmFjayA9IHN1YnRpdGxlVHJhY2tJZDtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzdWJ0aXRsZURpc3BsYXlcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBzdWJ0aXRsZVRyYWNrQ29udHJvbGxlciA9IHRoaXMuc3VidGl0bGVUcmFja0NvbnRyb2xsZXI7XG4gICAgICByZXR1cm4gc3VidGl0bGVUcmFja0NvbnRyb2xsZXIgPyBzdWJ0aXRsZVRyYWNrQ29udHJvbGxlci5zdWJ0aXRsZURpc3BsYXkgOiBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW5hYmxlL2Rpc2FibGUgc3VidGl0bGUgZGlzcGxheSByZW5kZXJpbmdcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICAsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgIHZhciBzdWJ0aXRsZVRyYWNrQ29udHJvbGxlciA9IHRoaXMuc3VidGl0bGVUcmFja0NvbnRyb2xsZXI7XG5cbiAgICAgIGlmIChzdWJ0aXRsZVRyYWNrQ29udHJvbGxlcikge1xuICAgICAgICBzdWJ0aXRsZVRyYWNrQ29udHJvbGxlci5zdWJ0aXRsZURpc3BsYXkgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSGxzO1xufShPYnNlcnZlcik7XG5cbmhsc19IbHMuZGVmYXVsdENvbmZpZyA9IHZvaWQgMDtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9wb2x5ZmlsbHMvbnVtYmVyLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvcG9seWZpbGxzL251bWJlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IGlzRmluaXRlTnVtYmVyLCBNQVhfU0FGRV9JTlRFR0VSICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImlzRmluaXRlTnVtYmVyXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gaXNGaW5pdGVOdW1iZXI7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIk1BWF9TQUZFX0lOVEVHRVJcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBNQVhfU0FGRV9JTlRFR0VSOyB9KTtcbnZhciBpc0Zpbml0ZU51bWJlciA9IE51bWJlci5pc0Zpbml0ZSB8fCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodmFsdWUpO1xufTtcbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgfHwgOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvdXRpbHMvZ2V0LXNlbGYtc2NvcGUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvdXRpbHMvZ2V0LXNlbGYtc2NvcGUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogZ2V0U2VsZlNjb3BlICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImdldFNlbGZTY29wZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGdldFNlbGZTY29wZTsgfSk7XG5mdW5jdGlvbiBnZXRTZWxmU2NvcGUoKSB7XG4gIC8vIHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTEyMzcyNTkvNTg5NDkzXG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZiAqL1xuICAgIHJldHVybiBzZWxmO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB3aW5kb3c7XG4gIH1cbn1cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvdXRpbHMvbG9nZ2VyLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy91dGlscy9sb2dnZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IGVuYWJsZUxvZ3MsIGxvZ2dlciAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJlbmFibGVMb2dzXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gZW5hYmxlTG9nczsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwibG9nZ2VyXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gbG9nZ2VyOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfZ2V0X3NlbGZfc2NvcGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vZ2V0LXNlbGYtc2NvcGUgKi8gXCIuL3NyYy91dGlscy9nZXQtc2VsZi1zY29wZS5qc1wiKTtcblxuXG5mdW5jdGlvbiBub29wKCkge31cblxudmFyIGZha2VMb2dnZXIgPSB7XG4gIHRyYWNlOiBub29wLFxuICBkZWJ1Zzogbm9vcCxcbiAgbG9nOiBub29wLFxuICB3YXJuOiBub29wLFxuICBpbmZvOiBub29wLFxuICBlcnJvcjogbm9vcFxufTtcbnZhciBleHBvcnRlZExvZ2dlciA9IGZha2VMb2dnZXI7IC8vIGxldCBsYXN0Q2FsbFRpbWU7XG4vLyBmdW5jdGlvbiBmb3JtYXRNc2dXaXRoVGltZUluZm8odHlwZSwgbXNnKSB7XG4vLyAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4vLyAgIGNvbnN0IGRpZmYgPSBsYXN0Q2FsbFRpbWUgPyAnKycgKyAobm93IC0gbGFzdENhbGxUaW1lKSA6ICcwJztcbi8vICAgbGFzdENhbGxUaW1lID0gbm93O1xuLy8gICBtc2cgPSAobmV3IERhdGUobm93KSkudG9JU09TdHJpbmcoKSArICcgfCBbJyArICB0eXBlICsgJ10gPiAnICsgbXNnICsgJyAoICcgKyBkaWZmICsgJyBtcyApJztcbi8vICAgcmV0dXJuIG1zZztcbi8vIH1cblxuZnVuY3Rpb24gZm9ybWF0TXNnKHR5cGUsIG1zZykge1xuICBtc2cgPSAnWycgKyB0eXBlICsgJ10gPiAnICsgbXNnO1xuICByZXR1cm4gbXNnO1xufVxuXG52YXIgZ2xvYmFsID0gT2JqZWN0KF9nZXRfc2VsZl9zY29wZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fW1wiZ2V0U2VsZlNjb3BlXCJdKSgpO1xuXG5mdW5jdGlvbiBjb25zb2xlUHJpbnRGbih0eXBlKSB7XG4gIHZhciBmdW5jID0gZ2xvYmFsLmNvbnNvbGVbdHlwZV07XG5cbiAgaWYgKGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIGlmIChhcmdzWzBdKSB7XG4gICAgICAgIGFyZ3NbMF0gPSBmb3JtYXRNc2codHlwZSwgYXJnc1swXSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmMuYXBwbHkoZ2xvYmFsLmNvbnNvbGUsIGFyZ3MpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gbm9vcDtcbn1cblxuZnVuY3Rpb24gZXhwb3J0TG9nZ2VyRnVuY3Rpb25zKGRlYnVnQ29uZmlnKSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3Rpb25zID0gbmV3IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICBmdW5jdGlvbnNbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gIH1cblxuICBmdW5jdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIGV4cG9ydGVkTG9nZ2VyW3R5cGVdID0gZGVidWdDb25maWdbdHlwZV0gPyBkZWJ1Z0NvbmZpZ1t0eXBlXS5iaW5kKGRlYnVnQ29uZmlnKSA6IGNvbnNvbGVQcmludEZuKHR5cGUpO1xuICB9KTtcbn1cblxudmFyIGVuYWJsZUxvZ3MgPSBmdW5jdGlvbiBlbmFibGVMb2dzKGRlYnVnQ29uZmlnKSB7XG4gIC8vIGNoZWNrIHRoYXQgY29uc29sZSBpcyBhdmFpbGFibGVcbiAgaWYgKGdsb2JhbC5jb25zb2xlICYmIGRlYnVnQ29uZmlnID09PSB0cnVlIHx8IHR5cGVvZiBkZWJ1Z0NvbmZpZyA9PT0gJ29iamVjdCcpIHtcbiAgICBleHBvcnRMb2dnZXJGdW5jdGlvbnMoZGVidWdDb25maWcsIC8vIFJlbW92ZSBvdXQgZnJvbSBsaXN0IGhlcmUgdG8gaGFyZC1kaXNhYmxlIGEgbG9nLWxldmVsXG4gICAgLy8gJ3RyYWNlJyxcbiAgICAnZGVidWcnLCAnbG9nJywgJ2luZm8nLCAnd2FybicsICdlcnJvcicpOyAvLyBTb21lIGJyb3dzZXJzIGRvbid0IGFsbG93IHRvIHVzZSBiaW5kIG9uIGNvbnNvbGUgb2JqZWN0IGFueXdheVxuICAgIC8vIGZhbGxiYWNrIHRvIGRlZmF1bHQgaWYgbmVlZGVkXG5cbiAgICB0cnkge1xuICAgICAgZXhwb3J0ZWRMb2dnZXIubG9nKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZXhwb3J0ZWRMb2dnZXIgPSBmYWtlTG9nZ2VyO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBleHBvcnRlZExvZ2dlciA9IGZha2VMb2dnZXI7XG4gIH1cbn07XG52YXIgbG9nZ2VyID0gZXhwb3J0ZWRMb2dnZXI7XG5cbi8qKiovIH0pXG5cbi8qKioqKiovIH0pW1wiZGVmYXVsdFwiXTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGxzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/hls.js/dist/hls.js\n");

/***/ }),

/***/ "../node_modules/mp4-parser/dist/mp4-parser.min.js":
/*!*********************************************************!*\
  !*** ../node_modules/mp4-parser/dist/mp4-parser.min.js ***!
  \*********************************************************/
/***/ (function(module) {

eval("!function(e,t){ true?module.exports=t():0}(self,(function(){return function(){\"use strict\";var e={d:function(t,n){for(var s in n)e.o(n,s)&&!e.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:n[s]})},o:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r:function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})}},t={};function n(e,t,n){if(\"function\"==typeof e.slice)return e.slice(t,t+n);for(var s=new Uint8Array(n),r=0;r<n;r+=1)s[r]=e[t+r];return s}function s(e){var t;function s(){return t.bytes[t.position++]}function r(e){e=e||0,t.bytes[t.position++]=255&e}function a(e){r((e=e||0)>>>24&255),r(e>>>16&255),r(e>>>8&255),r(255&e)}return e instanceof Uint8Array||(e=new Uint8Array(e)),t={bytes:e,position:0,readUnsignedByte:s,readUnsignedInt16:function(){for(var e=0,t=0;t<2;t+=1)e=e<<8|s();return e},readUnsignedInt24:function(){for(var e=0,t=0;t<3;t+=1)e=e<<8|s();return e},readUnsignedInt32:function(){for(var e=0,t=0;t<4;t+=1)e=256*e+s();return e},readUnsignedInt64:function(){for(var e=0,t=0;t<8;t+=1)e=256*e+s();return e},readString:function(e){for(var n=\"\",s=0;s<e;s+=1)n+=String.fromCharCode(t.bytes[t.position++]);return n},readBytes:function(e){var s=n(t.bytes,t.position,e);return t.position+=e,s},writeUnsignedByte:r,writeUnsignedInt16:function(e){r((e=e||0)>>>8&255),r(255&e)},writeUnsignedInt24:function(e){r((e=e||0)>>>16&255),r(e>>>8&255),r(255&e)},writeUnsignedInt32:a,writeUnsignedInt64:function(e){a(Math.floor(e/Math.pow(2,32))),a(Math.floor(e%Math.pow(2,32)))},writeString:function(e){for(var n=0;n<e.length;n+=1)t.bytes[t.position++]=e.charCodeAt(n)},writeBytes:function(e){t.bytes.set(e,t.position),t.position+=e.length}}}e.r(t),e.d(t,{getFragments:function(){return b},parse:function(){return f},version:function(){return U}});var r={decorate:function(e){var t=s(e.bytes);for(t.position=e.fourCC?e.start+8:e.start,e.boxes=[];t.position<e.start+e.length;){var n={};n.start=t.position,n.length=t.readUnsignedInt32(),n.fourCC=t.readString(4),n.bytes=e.bytes,e.boxes.push(n),t.position+=n.length-8}}};function a(e,t){for(var n=\"0\";n.length<t;)n+=n;return(n+e).substr(-t,t)}var i={fmov:r,free:r,mdia:r,minf:r,moof:r,moov:r,mvex:r,stbl:r,traf:r,trak:r,ustm:r,fhst:{decorate:function(e){function t(){var t,n=s(e.bytes);n.position=e.start+8,e.hashes=[];for(var r=0;r<Math.floor((e.length-8)/4);r+=1)t=n.readUnsignedInt32(),e.hashes.push(a(t.toString(16),8))}e.parseBytes=t,t()}},hash:{decorate:function(e){function t(){var t=s(e.bytes);t.position=e.start+8;var n=t.readUnsignedInt32();e.hash=a(n.toString(16),8)}e.parseBytes=t,t()}},idta:{decorate:function(e){function t(){var t=s(e.bytes);t.position=e.start+8,e.rawInit=t.readBytes(e.length-8)}e.parseBytes=t,t()}},sidx:{decorate:function(e){var t,n,r=s(e.bytes);r.position=e.start+8,e.version=r.readUnsignedByte(),e.rawFlags=r.readUnsignedInt24(),e.referenceId=r.readUnsignedInt32(),e.timeScale=r.readUnsignedInt32(),e.version?(e.earliestPresentationTime=r.readUnsignedInt64(),e.firstOffset=r.readUnsignedInt64()):(e.earliestPresentationTime=r.readUnsignedInt32(),e.firstOffset=r.readUnsignedInt32()),r.readUnsignedInt16(),e.referenceCount=r.readUnsignedInt16(),e.references=[];for(var a=0;a<e.referenceCount;a+=1)t={},n=r.readUnsignedInt32(),t.referenceType=!!(2147483648&n),t.subsegmentSize=2147483647&n,t.subsegmentDuration=r.readUnsignedInt32(),n=r.readUnsignedInt32(),t.containsRAP=!!(2147483648&n),t.rapType=(1879048192&n)>>>28,t.rapDeltaTime=268435455&n,e.references.push(t)}},styp:{decorate:function(e){var t=s(e.bytes);for(t.position=e.start+8,e.majorBrand=t.readString(4),e.minorVersion=t.readUnsignedInt32(),e.compatibleBrands=[];t.position<e.start+e.length;)e.compatibleBrands.push(t.readString(4))}},trun:{decorate:function(e){function t(){var t,n=s(e.bytes);n.position=e.start+8,e.version=n.readUnsignedByte(),e.flags={dataOffsetPresent:!!(1&(t=n.readUnsignedInt24())),firstSampleFlagsPresent:!!(4&t),sampleDurationsPresent:!!(256&t),sampleSizesPresent:!!(512&t),sampleFlagsPresent:!!(1024&t),sampleCompositionTimeOffsetsPresent:!!(2048&t)},e.sampleCount=n.readUnsignedInt32(),e.flags.dataOffsetPresent&&(e.dataOffset=n.readUnsignedInt32()),e.flags.firstSampleFlagsPresent&&(e.firstSampleFlags=n.readUnsignedInt32()),e.samples=[];for(var r=0;r<e.sampleCount;r+=1){var a={};e.flags.sampleDurationsPresent&&(a.duration=n.readUnsignedInt32()),e.flags.sampleSizesPresent&&(a.size=n.readUnsignedInt32()),e.flags.sampleFlagsPresent&&(a.flags=n.readUnsignedInt32()),e.flags.sampleCompositionTimeOffsetsPresent&&(a.compositionTimeOffset=n.readUnsignedInt32()),e.samples.push(a)}}e.parseBytes=t,e.writeBytes=function(){e.flags=e.flags||{};var t=4*e.flags.dataOffsetPresent,n=4*e.flags.firstSampleFlagsPresent,r=4*(e.flags&&e.flags.sampleDurationsPresent)+4*(e.flags&&e.flags.sampleSizesPresent)+4*(e.flags&&e.flags.sampleFlagsPresent)+4*(e.flags&&e.flags.sampleCompositionTimeOffsetsPresent);e.length=16+t+n+e.sampleCount*r;var a,i,o=s(new Uint8Array(e.length));o.writeUnsignedInt32(e.length),o.writeString(e.fourCC),o.writeUnsignedByte(e.version),o.writeUnsignedInt24((i=0,i|=1*(a=e.flags).dataOffsetPresent,i|=4*a.firstSampleFlagsPresent,i|=256*a.sampleDurationsPresent,i|=512*a.sampleSizesPresent,(i|=1024*a.sampleFlagsPresent)|2048*a.sampleCompositionTimeOffsetsPresent)),o.writeUnsignedInt32(e.sampleCount),e.flags.dataOffsetPresent&&o.writeUnsignedInt32(e.dataOffset),e.flags.firstSampleFlagsPresent&&o.writeUnsignedInt32(e.firstSampleFlags);for(var f=0;f<e.sampleCount;f+=1)e.flags.sampleDurationsPresent&&o.writeUnsignedInt32(e.samples[f].duration),e.flags.sampleSizesPresent&&o.writeUnsignedInt32(e.samples[f].size),e.flags.sampleFlagsPresent&&o.writeUnsignedInt32(e.samples[f].flags),e.flags.sampleCompositionTimeOffsetsPresent&&o.writeUnsignedInt32(e.samples[f].compositionTimeOffset);e.bytes=o.bytes,e.start=0},t()}},tfdt:{decorate:function(e){function t(){var t=s(e.bytes);t.position=e.start+8,e.version=t.readUnsignedByte(),e.rawFlags=t.readUnsignedInt24(),e.version?e.baseMediaDecodeTime=t.readUnsignedInt64():e.baseMediaDecodeTime=t.readUnsignedInt32()}e.parseBytes=t,e.writeBytes=function(){e.length=12+(e.version?8:4);var t=s(new Uint8Array(e.length));t.writeUnsignedInt32(e.length),t.writeString(e.fourCC),t.writeUnsignedByte(e.version),t.writeUnsignedInt24(e.rawFlags),e.version?t.writeUnsignedInt64(e.baseMediaDecodeTime):t.writeUnsignedInt32(e.baseMediaDecodeTime),e.bytes=t.bytes,e.start=0},t()}},tfhd:{decorate:function(e){function t(){var t,n=s(e.bytes);n.position=e.start+8,e.version=n.readUnsignedByte(),e.flags={baseDataOffsetPresent:!!(1&(t=n.readUnsignedInt24())),sampleDescriptionIndexPresent:!!(2&t),defaultSampleDurationPresent:!!(8&t),defaultSampleSizePresent:!!(16&t),defaultSampleFlagsPresent:!!(32&t)},e.trackId=n.readUnsignedInt32(),e.flags.baseDataOffsetPresent&&(e.baseDataOffset=n.readUnsignedInt64()),e.flags.sampleDescriptionIndexPresent&&(e.sampleDescriptionIndex=n.readUnsignedInt32()),e.flags.defaultSampleDurationPresent&&(e.defaultSampleDuration=n.readUnsignedInt32()),e.flags.defaultSampleSizePresent&&(e.defaultSampleSize=n.readUnsignedInt32()),e.flags.defaultSampleFlagsPresent&&(e.defaultSampleFlags=n.readUnsignedInt32())}e.parseBytes=t,e.writeBytes=function(){e.flags=e.flags||{},e.length=16,e.length+=8*e.flags.baseDataOffsetPresent,e.length+=4*e.flags.sampleDescriptionIndexPresent,e.length+=4*e.flags.defaultSampleDurationPresent,e.length+=4*e.flags.defaultSampleSizePresent,e.length+=4*e.flags.defaultSampleFlagsPresent;var t,n,r=s(new Uint8Array(e.length));r.writeUnsignedInt32(e.length),r.writeString(e.fourCC),r.writeUnsignedByte(e.version),r.writeUnsignedInt24((n=0,n|=1*(t=e.flags).baseDataOffsetPresent,n|=2*t.sampleDescriptionIndexPresent,n|=8*t.defaultSampleDurationPresent,(n|=16*t.defaultSampleSizePresent)|32*t.defaultSampleFlagsPresent)),r.writeUnsignedInt32(e.trackId),e.flags.baseDataOffsetPresent&&r.writeUnsignedInt64(e.baseDataOffset),e.flags.sampleDescriptionIndexPresent&&r.writeUnsignedInt32(e.sampleDescriptionIndex),e.flags.defaultSampleDurationPresent&&r.writeUnsignedInt32(e.defaultSampleDuration),e.flags.defaultSampleSizePresent&&r.writeUnsignedInt32(e.defaultSampleSize),e.flags.defaultSampleFlagsPresent&&r.writeUnsignedInt32(e.defaultSampleFlags),e.bytes=r.bytes,e.start=0},t()}},mfhd:{decorate:function(e){function t(){var t=s(e.bytes);t.position=e.start+8,e.version=t.readUnsignedByte(),e.rawFlags=t.readUnsignedInt24(),e.sequenceNumber=t.readUnsignedInt32()}e.parseBytes=t,e.writeBytes=function(){e.length=16;var t=s(new Uint8Array(e.length));t.writeUnsignedInt32(e.length),t.writeString(e.fourCC),t.writeUnsignedByte(e.version),t.writeUnsignedInt24(e.rawFlags),t.writeUnsignedInt32(e.sequenceNumber),e.bytes=t.bytes,e.start=0},t()}}};function o(e){var t=e.fourCC?i[e.fourCC]:r;if(t&&(t.decorate(e),e.boxes)){for(var n=0;n<e.boxes.length;n+=1)o(e.boxes[n]);e.boxes.length&&(delete e.bytes,delete e.start,delete e.length)}}function f(e){var t={bytes:e,start:0,length:e.length};return o(t),t}function l(e){if(e.bytes)return e.length;if(e.boxes){for(var t=e.fourCC?8:0,n=0;n<e.boxes.length;n+=1)t+=l(e.boxes[n]);return t}return 0}function d(e,t){if(t.bytes)e.writeBytes(n(t.bytes,t.start,t.length));else if(t.boxes){t.fourCC&&(e.writeUnsignedInt32(l(t)),e.writeString(t.fourCC));for(var s=0;s<t.boxes.length;s+=1)d(e,t.boxes[s])}}function g(e){var t=s(new Uint8Array(l(e)));return d(t,e),t.bytes}function u(e,t){return Math.floor(1e3*function(e,t){return e/t}(e,t))}function p(e,t){for(var n=0;n<e.boxes.length;n+=1)if(e.boxes[n].fourCC===t)return e.boxes[n];return null}function m(e,t){for(var n=t.split(\".\");e&&n.length;)e=p(e,n.shift());return e}var c=[\"moof\",\"mdat\"];function y(e,t,n,s){var r=m({boxes:e},\"moof.traf.tfdt\"),a=m({boxes:e},\"moof.traf.trun\");if(r&&a){var i=u(r.baseMediaDecodeTime,n),o=u(t.subsegmentDuration,n);return{start:i,duration:o,end:i+o,bytes:g({boxes:e}),containsRAP:!!t.containsRAP,rapType:t.rapType,rapDeltaTime:t.rapDeltaTime,sampleCount:a.samples.length,hash:s}}}var U=\"1.0.9\";function b(e){return p(e,\"styp\")?function(e){for(var t,n,s,r=p(e,\"sidx\"),a=function(e){var t=[],n=m(e,\"free.ustm.fhst\");return n&&(t=n.hashes),t}(e),i=[],o=[],f=0;f<e.boxes.length;f+=1)n=e.boxes[f],-1!==c.indexOf(n.fourCC)&&(o.push(n),c.indexOf(n.fourCC)===c.length-1&&(s=a[Math.min(i.length,a.length-1)],(t=y(o,r.references[i.length],r.timeScale,s))&&i.push(t),o=[]));return i}(e):[]}return t}()}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/mp4-parser/dist/mp4-parser.min.js\n");

/***/ }),

/***/ "../node_modules/player-utils/array/uniq.js":
/*!**************************************************!*\
  !*** ../node_modules/player-utils/array/uniq.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = _default;\n\n/**\n * @param {Array}\n * @returns {Array}\n */\nfunction _default(arr) {\n  return Array.from(new Set(arr));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3BsYXllci11dGlscy9hcnJheS91bmlxLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtCQUFlOztBQUVmO0FBQ0EsV0FBVztBQUNYLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VzdHJlYW1QbGF5ZXIvLi4vbm9kZV9tb2R1bGVzL3BsYXllci11dGlscy9hcnJheS91bmlxLmpzPzRjOWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5fVxuICogQHJldHVybnMge0FycmF5fVxuICovXG5mdW5jdGlvbiBfZGVmYXVsdChhcnIpIHtcbiAgcmV0dXJuIEFycmF5LmZyb20obmV3IFNldChhcnIpKTtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/player-utils/array/uniq.js\n");

/***/ }),

/***/ "../node_modules/player-utils/video/timeRanges.js":
/*!********************************************************!*\
  !*** ../node_modules/player-utils/video/timeRanges.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.current = current;\nexports.intersection = intersection;\nexports.timeRangesFromArray = timeRangesFromArray;\nexports.timeRangesToArray = timeRangesToArray;\n\nvar _uniq = _interopRequireDefault(__webpack_require__(/*! ../array/uniq */ \"../node_modules/player-utils/array/uniq.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/** @typedef {{ start: number, end: number }} RangeObject */\n\n/** @typedef {Array<RangeObject>} Ranges */\n\n/**\n * @param {TimeRanges} timeRanges\n * @returns {Ranges}\n */\nfunction timeRangesToArray(timeRanges) {\n  return Array.from({\n    length: timeRanges.length\n  }).map(function (_, i) {\n    return {\n      start: timeRanges.start(i),\n      end: timeRanges.end(i)\n    };\n  });\n}\n/**\n * @param {Ranges=} ranges\n * @returns {{ length: number, start: function(number): number, end: function(number): number }}\n */\n\n\nfunction timeRangesFromArray() {\n  var ranges = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return {\n    length: ranges.length,\n    start: function start(i) {\n      return ranges[i].start;\n    },\n    end: function end(i) {\n      return ranges[i].end;\n    }\n  };\n}\n/**\n * @param {number} position\n * @param {Ranges} ranges\n * @returns {RangeObject|undefined}\n */\n\n\nfunction current(position, ranges) {\n  return ranges.find(function (_ref) {\n    var start = _ref.start,\n        end = _ref.end;\n    return start <= position && position <= end;\n  });\n}\n/**\n * @param {Ranges} a\n * @param {Ranges} b\n * @returns {Ranges}\n */\n\n\nfunction intersection(a, b) {\n  var starts = (0, _uniq.default)([].concat(_toConsumableArray(a), _toConsumableArray(b)).map(function (_ref2) {\n    var start = _ref2.start;\n    return start;\n  }));\n  return starts.reduce(function (soFar, start) {\n    var rangeFromA = current(start, a);\n    var rangeFromB = current(start, b);\n\n    if (!rangeFromA || !rangeFromB) {\n      return soFar;\n    }\n\n    var intersectRange = {\n      start: Math.max(rangeFromA.start, rangeFromB.start),\n      end: Math.min(rangeFromA.end, rangeFromB.end)\n    };\n    soFar.push(intersectRange);\n    return soFar;\n  }, []).sort(function (x, y) {\n    return x.start - y.start;\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3BsYXllci11dGlscy92aWRlby90aW1lUmFuZ2VzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGVBQWU7QUFDZixvQkFBb0I7QUFDcEIsMkJBQTJCO0FBQzNCLHlCQUF5Qjs7QUFFekIsbUNBQW1DLG1CQUFPLENBQUMsaUVBQWU7O0FBRTFELHVDQUF1Qyx1Q0FBdUM7O0FBRTlFLG1DQUFtQzs7QUFFbkMsZ0NBQWdDOztBQUVoQyxrREFBa0QsZ0JBQWdCLGdFQUFnRSx3REFBd0QsNkRBQTZELHNEQUFzRDs7QUFFN1Msa0NBQWtDOztBQUVsQyxtQ0FBbUM7O0FBRW5DLHVDQUF1Qyx1REFBdUQsdUNBQXVDLFNBQVMsT0FBTyxvQkFBb0I7O0FBRXpLLGdCQUFnQiw4QkFBOEI7O0FBRTlDLGNBQWMsb0JBQW9COztBQUVsQztBQUNBLFdBQVcsWUFBWTtBQUN2QixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixlQUFlO0FBQ2Y7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLGFBQWE7QUFDYjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXN0cmVhbVBsYXllci8uLi9ub2RlX21vZHVsZXMvcGxheWVyLXV0aWxzL3ZpZGVvL3RpbWVSYW5nZXMuanM/MjU3MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY3VycmVudCA9IGN1cnJlbnQ7XG5leHBvcnRzLmludGVyc2VjdGlvbiA9IGludGVyc2VjdGlvbjtcbmV4cG9ydHMudGltZVJhbmdlc0Zyb21BcnJheSA9IHRpbWVSYW5nZXNGcm9tQXJyYXk7XG5leHBvcnRzLnRpbWVSYW5nZXNUb0FycmF5ID0gdGltZVJhbmdlc1RvQXJyYXk7XG5cbnZhciBfdW5pcSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2FycmF5L3VuaXFcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXCJAQGl0ZXJhdG9yXCJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGFycik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbi8qKiBAdHlwZWRlZiB7eyBzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlciB9fSBSYW5nZU9iamVjdCAqL1xuXG4vKiogQHR5cGVkZWYge0FycmF5PFJhbmdlT2JqZWN0Pn0gUmFuZ2VzICovXG5cbi8qKlxuICogQHBhcmFtIHtUaW1lUmFuZ2VzfSB0aW1lUmFuZ2VzXG4gKiBAcmV0dXJucyB7UmFuZ2VzfVxuICovXG5mdW5jdGlvbiB0aW1lUmFuZ2VzVG9BcnJheSh0aW1lUmFuZ2VzKSB7XG4gIHJldHVybiBBcnJheS5mcm9tKHtcbiAgICBsZW5ndGg6IHRpbWVSYW5nZXMubGVuZ3RoXG4gIH0pLm1hcChmdW5jdGlvbiAoXywgaSkge1xuICAgIHJldHVybiB7XG4gICAgICBzdGFydDogdGltZVJhbmdlcy5zdGFydChpKSxcbiAgICAgIGVuZDogdGltZVJhbmdlcy5lbmQoaSlcbiAgICB9O1xuICB9KTtcbn1cbi8qKlxuICogQHBhcmFtIHtSYW5nZXM9fSByYW5nZXNcbiAqIEByZXR1cm5zIHt7IGxlbmd0aDogbnVtYmVyLCBzdGFydDogZnVuY3Rpb24obnVtYmVyKTogbnVtYmVyLCBlbmQ6IGZ1bmN0aW9uKG51bWJlcik6IG51bWJlciB9fVxuICovXG5cblxuZnVuY3Rpb24gdGltZVJhbmdlc0Zyb21BcnJheSgpIHtcbiAgdmFyIHJhbmdlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG4gIHJldHVybiB7XG4gICAgbGVuZ3RoOiByYW5nZXMubGVuZ3RoLFxuICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydChpKSB7XG4gICAgICByZXR1cm4gcmFuZ2VzW2ldLnN0YXJ0O1xuICAgIH0sXG4gICAgZW5kOiBmdW5jdGlvbiBlbmQoaSkge1xuICAgICAgcmV0dXJuIHJhbmdlc1tpXS5lbmQ7XG4gICAgfVxuICB9O1xufVxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gcG9zaXRpb25cbiAqIEBwYXJhbSB7UmFuZ2VzfSByYW5nZXNcbiAqIEByZXR1cm5zIHtSYW5nZU9iamVjdHx1bmRlZmluZWR9XG4gKi9cblxuXG5mdW5jdGlvbiBjdXJyZW50KHBvc2l0aW9uLCByYW5nZXMpIHtcbiAgcmV0dXJuIHJhbmdlcy5maW5kKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIHN0YXJ0ID0gX3JlZi5zdGFydCxcbiAgICAgICAgZW5kID0gX3JlZi5lbmQ7XG4gICAgcmV0dXJuIHN0YXJ0IDw9IHBvc2l0aW9uICYmIHBvc2l0aW9uIDw9IGVuZDtcbiAgfSk7XG59XG4vKipcbiAqIEBwYXJhbSB7UmFuZ2VzfSBhXG4gKiBAcGFyYW0ge1Jhbmdlc30gYlxuICogQHJldHVybnMge1Jhbmdlc31cbiAqL1xuXG5cbmZ1bmN0aW9uIGludGVyc2VjdGlvbihhLCBiKSB7XG4gIHZhciBzdGFydHMgPSAoMCwgX3VuaXEuZGVmYXVsdCkoW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShhKSwgX3RvQ29uc3VtYWJsZUFycmF5KGIpKS5tYXAoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgdmFyIHN0YXJ0ID0gX3JlZjIuc3RhcnQ7XG4gICAgcmV0dXJuIHN0YXJ0O1xuICB9KSk7XG4gIHJldHVybiBzdGFydHMucmVkdWNlKGZ1bmN0aW9uIChzb0Zhciwgc3RhcnQpIHtcbiAgICB2YXIgcmFuZ2VGcm9tQSA9IGN1cnJlbnQoc3RhcnQsIGEpO1xuICAgIHZhciByYW5nZUZyb21CID0gY3VycmVudChzdGFydCwgYik7XG5cbiAgICBpZiAoIXJhbmdlRnJvbUEgfHwgIXJhbmdlRnJvbUIpIHtcbiAgICAgIHJldHVybiBzb0ZhcjtcbiAgICB9XG5cbiAgICB2YXIgaW50ZXJzZWN0UmFuZ2UgPSB7XG4gICAgICBzdGFydDogTWF0aC5tYXgocmFuZ2VGcm9tQS5zdGFydCwgcmFuZ2VGcm9tQi5zdGFydCksXG4gICAgICBlbmQ6IE1hdGgubWluKHJhbmdlRnJvbUEuZW5kLCByYW5nZUZyb21CLmVuZClcbiAgICB9O1xuICAgIHNvRmFyLnB1c2goaW50ZXJzZWN0UmFuZ2UpO1xuICAgIHJldHVybiBzb0ZhcjtcbiAgfSwgW10pLnNvcnQoZnVuY3Rpb24gKHgsIHkpIHtcbiAgICByZXR1cm4geC5zdGFydCAtIHkuc3RhcnQ7XG4gIH0pO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/player-utils/video/timeRanges.js\n");

/***/ })

}]);